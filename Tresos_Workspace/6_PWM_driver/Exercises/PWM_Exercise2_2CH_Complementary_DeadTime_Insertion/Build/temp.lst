
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000abb 	.word	0x00000abb
  10:	00000abd 	.word	0x00000abd
  14:	00000abf 	.word	0x00000abf
  18:	00000ac1 	.word	0x00000ac1
	...
  2c:	00000ac3 	.word	0x00000ac3
  30:	00000ac5 	.word	0x00000ac5
  34:	00000000 	.word	0x00000000
  38:	00000ac7 	.word	0x00000ac7
  3c:	00000ac9 	.word	0x00000ac9
  40:	00000acb 	.word	0x00000acb
  44:	00000acb 	.word	0x00000acb
  48:	00000acb 	.word	0x00000acb
  4c:	00000acb 	.word	0x00000acb
  50:	00000acb 	.word	0x00000acb
  54:	00000acb 	.word	0x00000acb
  58:	00000acb 	.word	0x00000acb
  5c:	00000acb 	.word	0x00000acb
  60:	00000acb 	.word	0x00000acb
  64:	00000acb 	.word	0x00000acb
  68:	00000acb 	.word	0x00000acb
  6c:	00000acb 	.word	0x00000acb
  70:	00000acb 	.word	0x00000acb
  74:	00000acb 	.word	0x00000acb
  78:	00000acb 	.word	0x00000acb
  7c:	00000acb 	.word	0x00000acb
  80:	00000acb 	.word	0x00000acb
  84:	00000acb 	.word	0x00000acb
  88:	00000acb 	.word	0x00000acb
  8c:	00000acb 	.word	0x00000acb
  90:	00000acb 	.word	0x00000acb
  94:	00000acb 	.word	0x00000acb
  98:	00000acb 	.word	0x00000acb
  9c:	00000acb 	.word	0x00000acb
  a0:	00000acb 	.word	0x00000acb
  a4:	00000acb 	.word	0x00000acb
  a8:	00000acb 	.word	0x00000acb
  ac:	00000acb 	.word	0x00000acb
  b0:	00000acb 	.word	0x00000acb
  b4:	00000acb 	.word	0x00000acb
  b8:	00000acb 	.word	0x00000acb
  bc:	00000acb 	.word	0x00000acb
  c0:	00000acb 	.word	0x00000acb
  c4:	00000acb 	.word	0x00000acb
  c8:	00000acb 	.word	0x00000acb
  cc:	00000acb 	.word	0x00000acb
  d0:	00000acb 	.word	0x00000acb
  d4:	00000acb 	.word	0x00000acb
  d8:	00000acb 	.word	0x00000acb
  dc:	00000acb 	.word	0x00000acb
  e0:	00000acb 	.word	0x00000acb
  e4:	00000acb 	.word	0x00000acb
  e8:	00000acb 	.word	0x00000acb
  ec:	00000acb 	.word	0x00000acb
  f0:	00000acb 	.word	0x00000acb
  f4:	00000acb 	.word	0x00000acb
  f8:	00000acb 	.word	0x00000acb
  fc:	00000acb 	.word	0x00000acb
 100:	00000acb 	.word	0x00000acb
 104:	00000acb 	.word	0x00000acb
 108:	00000acb 	.word	0x00000acb
 10c:	00000acb 	.word	0x00000acb
 110:	00000acb 	.word	0x00000acb
 114:	00000acb 	.word	0x00000acb
 118:	00000acb 	.word	0x00000acb
 11c:	00000acb 	.word	0x00000acb
 120:	00000acb 	.word	0x00000acb
 124:	00000acb 	.word	0x00000acb
 128:	00000acb 	.word	0x00000acb
 12c:	00000acb 	.word	0x00000acb
 130:	00000acb 	.word	0x00000acb
 134:	00000acb 	.word	0x00000acb
 138:	00000acb 	.word	0x00000acb
 13c:	00000acb 	.word	0x00000acb
 140:	00000acb 	.word	0x00000acb
 144:	00000acb 	.word	0x00000acb
 148:	00000acb 	.word	0x00000acb
 14c:	00000acb 	.word	0x00000acb
 150:	00000acb 	.word	0x00000acb
 154:	00000acb 	.word	0x00000acb
 158:	00000acb 	.word	0x00000acb
 15c:	00000acb 	.word	0x00000acb
 160:	00000acb 	.word	0x00000acb
 164:	00000acb 	.word	0x00000acb
 168:	00000acb 	.word	0x00000acb
 16c:	00000acb 	.word	0x00000acb
 170:	00000acb 	.word	0x00000acb
 174:	00000acb 	.word	0x00000acb
 178:	00000acb 	.word	0x00000acb
 17c:	00000acb 	.word	0x00000acb
 180:	00000acb 	.word	0x00000acb
 184:	00000acb 	.word	0x00000acb
 188:	00000acb 	.word	0x00000acb
 18c:	00000acb 	.word	0x00000acb
 190:	00000acb 	.word	0x00000acb
 194:	00000acb 	.word	0x00000acb
 198:	00000acb 	.word	0x00000acb
 19c:	00000acb 	.word	0x00000acb
 1a0:	00000acb 	.word	0x00000acb
 1a4:	00000acb 	.word	0x00000acb
 1a8:	00000acb 	.word	0x00000acb
 1ac:	00000acb 	.word	0x00000acb
 1b0:	00000acb 	.word	0x00000acb
 1b4:	00000acb 	.word	0x00000acb
 1b8:	00000acb 	.word	0x00000acb
 1bc:	00000acb 	.word	0x00000acb
 1c0:	00000acb 	.word	0x00000acb
 1c4:	00000acb 	.word	0x00000acb
 1c8:	00000acb 	.word	0x00000acb
 1cc:	00000acb 	.word	0x00000acb
 1d0:	00000acb 	.word	0x00000acb
 1d4:	00000acb 	.word	0x00000acb
 1d8:	00000acb 	.word	0x00000acb
 1dc:	00000acb 	.word	0x00000acb
 1e0:	00000acb 	.word	0x00000acb
 1e4:	00000acb 	.word	0x00000acb
 1e8:	00000acb 	.word	0x00000acb
 1ec:	00000acb 	.word	0x00000acb
 1f0:	00000acb 	.word	0x00000acb
 1f4:	00000acb 	.word	0x00000acb
 1f8:	00000acb 	.word	0x00000acb
 1fc:	00000acb 	.word	0x00000acb
 200:	00000acb 	.word	0x00000acb
 204:	00000acb 	.word	0x00000acb
 208:	00000acb 	.word	0x00000acb
 20c:	00000acb 	.word	0x00000acb
 210:	00000acb 	.word	0x00000acb
 214:	00000acb 	.word	0x00000acb
 218:	00000acb 	.word	0x00000acb
 21c:	00000acb 	.word	0x00000acb
 220:	00000acb 	.word	0x00000acb
 224:	00000acb 	.word	0x00000acb
 228:	00000acb 	.word	0x00000acb
 22c:	00000acb 	.word	0x00000acb
 230:	00000acb 	.word	0x00000acb
 234:	00000acb 	.word	0x00000acb
 238:	00000acb 	.word	0x00000acb
 23c:	00000acb 	.word	0x00000acb
 240:	00000acb 	.word	0x00000acb
 244:	00000acb 	.word	0x00000acb
 248:	00000acb 	.word	0x00000acb
 24c:	00000acb 	.word	0x00000acb
 250:	00000acb 	.word	0x00000acb
 254:	00000acb 	.word	0x00000acb
 258:	00000acb 	.word	0x00000acb
 25c:	00000acb 	.word	0x00000acb
 260:	00000acb 	.word	0x00000acb
 264:	00000acb 	.word	0x00000acb
 268:	00000acb 	.word	0x00000acb
 26c:	00000acb 	.word	0x00000acb
 270:	00000acb 	.word	0x00000acb
 274:	00000acb 	.word	0x00000acb
 278:	00000acb 	.word	0x00000acb
 27c:	00000acb 	.word	0x00000acb
 280:	00000acb 	.word	0x00000acb
 284:	00000acb 	.word	0x00000acb
 288:	00000acb 	.word	0x00000acb
 28c:	00000acb 	.word	0x00000acb
 290:	00000acb 	.word	0x00000acb
 294:	00000acb 	.word	0x00000acb
 298:	00000acb 	.word	0x00000acb
 29c:	00000acb 	.word	0x00000acb
 2a0:	00000acb 	.word	0x00000acb
 2a4:	00000acb 	.word	0x00000acb
 2a8:	00000acb 	.word	0x00000acb
 2ac:	00000acb 	.word	0x00000acb
 2b0:	00000acb 	.word	0x00000acb
 2b4:	00000acb 	.word	0x00000acb
 2b8:	00000acb 	.word	0x00000acb
 2bc:	00000acb 	.word	0x00000acb
 2c0:	00000acb 	.word	0x00000acb
 2c4:	00000acb 	.word	0x00000acb
 2c8:	00000acb 	.word	0x00000acb
 2cc:	00000acb 	.word	0x00000acb
 2d0:	00000acb 	.word	0x00000acb
 2d4:	00000acb 	.word	0x00000acb
 2d8:	00000acb 	.word	0x00000acb
 2dc:	00000acb 	.word	0x00000acb
 2e0:	00000acb 	.word	0x00000acb
 2e4:	00000acb 	.word	0x00000acb
 2e8:	00000acb 	.word	0x00000acb
 2ec:	00000acb 	.word	0x00000acb
 2f0:	00000acb 	.word	0x00000acb
 2f4:	00000acb 	.word	0x00000acb
 2f8:	00000acb 	.word	0x00000acb
 2fc:	00000acb 	.word	0x00000acb
 300:	00000acb 	.word	0x00000acb
 304:	00000acb 	.word	0x00000acb
 308:	00000acb 	.word	0x00000acb
 30c:	00000acb 	.word	0x00000acb

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fa51 	bl	928 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb10 	bl	ab0 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff92f4 	.word	0x1fff92f4

000004c8 <SystemInit>:
     4c8:	b508      	push	{r3, lr}
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88
     4de:	f3bf 8f4f 	dsb	sy
     4e2:	f3bf 8f6f 	isb	sy
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c
     590:	f3bf 8f4f 	dsb	sy
     594:	f3bf 8f6f 	isb	sy
     598:	2000      	movs	r0, #0
     59a:	f000 fa5b 	bl	a54 <sys_m4_cache_init>
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0xac>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0xac>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0xb0>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0xb0>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0xa6>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0xe4>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x24>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0xdc>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0xd6>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0xd2>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0xd2>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0xca>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0xca>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0xb8>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0xb4>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0xe8>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0x70>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0xce>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0xce>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0x9e>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0xc6>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0xc6>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x6>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x6>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0x9e>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0x70>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();
     8b2:	f000 f801 	bl	8b8 <EcuM_Init>
    active state at the same time.

    So deadtime delay insertion of 1% means 375 ticks value, is the 1% of the 37500 period value configured for the channels.
    */

    while( 1u )
     8b6:	e7fe      	b.n	8b6 <main+0x6>

000008b8 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8b8:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     8ba:	480a      	ldr	r0, [pc, #40]	; (8e4 <EcuM_Init+0x2c>)
     8bc:	f003 feb0 	bl	4620 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     8c0:	2000      	movs	r0, #0
     8c2:	f003 ff01 	bl	46c8 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     8c6:	2000      	movs	r0, #0
     8c8:	f003 ff22 	bl	4710 <Mcu_SetMode>
    OsIf_Init(NULL_PTR);
     8cc:	2000      	movs	r0, #0
     8ce:	f000 f911 	bl	af4 <OsIf_Init>
    /*Apply all the Pin Port microcontroller configuration, for this case
    Port Pin D0 (FTM0-CH2), D15 (FTM0-CH1), D16 (FTM0-CH0) are configured as output*/
    Port_Init( &Port_Config );
     8d2:	4805      	ldr	r0, [pc, #20]	; (8e8 <EcuM_Init+0x30>)
     8d4:	f004 faa6 	bl	4e24 <Port_Init>
    Pwm_Init( &Pwm_Config );
     8d8:	4804      	ldr	r0, [pc, #16]	; (8ec <EcuM_Init+0x34>)
     8da:	f007 fe57 	bl	858c <Pwm_Init>
}
     8de:	bf00      	nop
     8e0:	bd08      	pop	{r3, pc}
     8e2:	bf00      	nop
     8e4:	0000c208 	.word	0x0000c208
     8e8:	0000c364 	.word	0x0000c364
     8ec:	0000c3d4 	.word	0x0000c3d4

000008f0 <Mcu_schm_read_msr>:
     8f0:	b410      	push	{r4}
     8f2:	f3ef 8310 	mrs	r3, PRIMASK
     8f6:	461c      	mov	r4, r3
     8f8:	4623      	mov	r3, r4
     8fa:	4618      	mov	r0, r3
     8fc:	f85d 4b04 	ldr.w	r4, [sp], #4
     900:	4770      	bx	lr

00000902 <Port_schm_read_msr>:
     902:	b410      	push	{r4}
     904:	f3ef 8310 	mrs	r3, PRIMASK
     908:	461c      	mov	r4, r3
     90a:	4623      	mov	r3, r4
     90c:	4618      	mov	r0, r3
     90e:	f85d 4b04 	ldr.w	r4, [sp], #4
     912:	4770      	bx	lr

00000914 <Pwm_schm_read_msr>:
     914:	b410      	push	{r4}
     916:	f3ef 8310 	mrs	r3, PRIMASK
     91a:	461c      	mov	r4, r3
     91c:	4623      	mov	r3, r4
     91e:	4618      	mov	r0, r3
     920:	f85d 4b04 	ldr.w	r4, [sp], #4
     924:	4770      	bx	lr
	...

00000928 <init_data_bss>:
     928:	b08a      	sub	sp, #40	; 0x28
     92a:	2300      	movs	r3, #0
     92c:	9307      	str	r3, [sp, #28]
     92e:	2300      	movs	r3, #0
     930:	9306      	str	r3, [sp, #24]
     932:	2300      	movs	r3, #0
     934:	9309      	str	r3, [sp, #36]	; 0x24
     936:	2300      	movs	r3, #0
     938:	9308      	str	r3, [sp, #32]
     93a:	4b44      	ldr	r3, [pc, #272]	; (a4c <init_data_bss+0x124>)
     93c:	9305      	str	r3, [sp, #20]
     93e:	4b44      	ldr	r3, [pc, #272]	; (a50 <init_data_bss+0x128>)
     940:	9304      	str	r3, [sp, #16]
     942:	9b05      	ldr	r3, [sp, #20]
     944:	681b      	ldr	r3, [r3, #0]
     946:	9307      	str	r3, [sp, #28]
     948:	9b05      	ldr	r3, [sp, #20]
     94a:	3304      	adds	r3, #4
     94c:	9305      	str	r3, [sp, #20]
     94e:	9b05      	ldr	r3, [sp, #20]
     950:	9303      	str	r3, [sp, #12]
     952:	2300      	movs	r3, #0
     954:	9309      	str	r3, [sp, #36]	; 0x24
     956:	e03d      	b.n	9d4 <init_data_bss+0xac>
     958:	9a09      	ldr	r2, [sp, #36]	; 0x24
     95a:	4613      	mov	r3, r2
     95c:	005b      	lsls	r3, r3, #1
     95e:	4413      	add	r3, r2
     960:	009b      	lsls	r3, r3, #2
     962:	461a      	mov	r2, r3
     964:	9b03      	ldr	r3, [sp, #12]
     966:	4413      	add	r3, r2
     968:	685b      	ldr	r3, [r3, #4]
     96a:	9300      	str	r3, [sp, #0]
     96c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     96e:	4613      	mov	r3, r2
     970:	005b      	lsls	r3, r3, #1
     972:	4413      	add	r3, r2
     974:	009b      	lsls	r3, r3, #2
     976:	461a      	mov	r2, r3
     978:	9b03      	ldr	r3, [sp, #12]
     97a:	4413      	add	r3, r2
     97c:	681b      	ldr	r3, [r3, #0]
     97e:	9301      	str	r3, [sp, #4]
     980:	9a09      	ldr	r2, [sp, #36]	; 0x24
     982:	4613      	mov	r3, r2
     984:	005b      	lsls	r3, r3, #1
     986:	4413      	add	r3, r2
     988:	009b      	lsls	r3, r3, #2
     98a:	461a      	mov	r2, r3
     98c:	9b03      	ldr	r3, [sp, #12]
     98e:	4413      	add	r3, r2
     990:	689b      	ldr	r3, [r3, #8]
     992:	4619      	mov	r1, r3
     994:	9a09      	ldr	r2, [sp, #36]	; 0x24
     996:	4613      	mov	r3, r2
     998:	005b      	lsls	r3, r3, #1
     99a:	4413      	add	r3, r2
     99c:	009b      	lsls	r3, r3, #2
     99e:	461a      	mov	r2, r3
     9a0:	9b03      	ldr	r3, [sp, #12]
     9a2:	4413      	add	r3, r2
     9a4:	685b      	ldr	r3, [r3, #4]
     9a6:	1acb      	subs	r3, r1, r3
     9a8:	9306      	str	r3, [sp, #24]
     9aa:	2300      	movs	r3, #0
     9ac:	9308      	str	r3, [sp, #32]
     9ae:	e00a      	b.n	9c6 <init_data_bss+0x9e>
     9b0:	9a00      	ldr	r2, [sp, #0]
     9b2:	9b08      	ldr	r3, [sp, #32]
     9b4:	441a      	add	r2, r3
     9b6:	9901      	ldr	r1, [sp, #4]
     9b8:	9b08      	ldr	r3, [sp, #32]
     9ba:	440b      	add	r3, r1
     9bc:	7812      	ldrb	r2, [r2, #0]
     9be:	701a      	strb	r2, [r3, #0]
     9c0:	9b08      	ldr	r3, [sp, #32]
     9c2:	3301      	adds	r3, #1
     9c4:	9308      	str	r3, [sp, #32]
     9c6:	9a08      	ldr	r2, [sp, #32]
     9c8:	9b06      	ldr	r3, [sp, #24]
     9ca:	429a      	cmp	r2, r3
     9cc:	d3f0      	bcc.n	9b0 <init_data_bss+0x88>
     9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
     9d0:	3301      	adds	r3, #1
     9d2:	9309      	str	r3, [sp, #36]	; 0x24
     9d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9d6:	9b07      	ldr	r3, [sp, #28]
     9d8:	429a      	cmp	r2, r3
     9da:	d3bd      	bcc.n	958 <init_data_bss+0x30>
     9dc:	9b04      	ldr	r3, [sp, #16]
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	9307      	str	r3, [sp, #28]
     9e2:	9b04      	ldr	r3, [sp, #16]
     9e4:	3304      	adds	r3, #4
     9e6:	9304      	str	r3, [sp, #16]
     9e8:	9b04      	ldr	r3, [sp, #16]
     9ea:	9302      	str	r3, [sp, #8]
     9ec:	2300      	movs	r3, #0
     9ee:	9309      	str	r3, [sp, #36]	; 0x24
     9f0:	e024      	b.n	a3c <init_data_bss+0x114>
     9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     9f4:	00db      	lsls	r3, r3, #3
     9f6:	9a02      	ldr	r2, [sp, #8]
     9f8:	4413      	add	r3, r2
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	9301      	str	r3, [sp, #4]
     9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a00:	00db      	lsls	r3, r3, #3
     a02:	9a02      	ldr	r2, [sp, #8]
     a04:	4413      	add	r3, r2
     a06:	685b      	ldr	r3, [r3, #4]
     a08:	4619      	mov	r1, r3
     a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a0c:	00db      	lsls	r3, r3, #3
     a0e:	9a02      	ldr	r2, [sp, #8]
     a10:	4413      	add	r3, r2
     a12:	681b      	ldr	r3, [r3, #0]
     a14:	1acb      	subs	r3, r1, r3
     a16:	9306      	str	r3, [sp, #24]
     a18:	2300      	movs	r3, #0
     a1a:	9308      	str	r3, [sp, #32]
     a1c:	e007      	b.n	a2e <init_data_bss+0x106>
     a1e:	9a01      	ldr	r2, [sp, #4]
     a20:	9b08      	ldr	r3, [sp, #32]
     a22:	4413      	add	r3, r2
     a24:	2200      	movs	r2, #0
     a26:	701a      	strb	r2, [r3, #0]
     a28:	9b08      	ldr	r3, [sp, #32]
     a2a:	3301      	adds	r3, #1
     a2c:	9308      	str	r3, [sp, #32]
     a2e:	9a08      	ldr	r2, [sp, #32]
     a30:	9b06      	ldr	r3, [sp, #24]
     a32:	429a      	cmp	r2, r3
     a34:	d3f3      	bcc.n	a1e <init_data_bss+0xf6>
     a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a38:	3301      	adds	r3, #1
     a3a:	9309      	str	r3, [sp, #36]	; 0x24
     a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a3e:	9b07      	ldr	r3, [sp, #28]
     a40:	429a      	cmp	r2, r3
     a42:	d3d6      	bcc.n	9f2 <init_data_bss+0xca>
     a44:	bf00      	nop
     a46:	bf00      	nop
     a48:	b00a      	add	sp, #40	; 0x28
     a4a:	4770      	bx	lr
     a4c:	0000c3e4 	.word	0x0000c3e4
     a50:	0000c400 	.word	0x0000c400

00000a54 <sys_m4_cache_init>:
     a54:	b084      	sub	sp, #16
     a56:	4603      	mov	r3, r0
     a58:	f88d 3007 	strb.w	r3, [sp, #7]
     a5c:	2300      	movs	r3, #0
     a5e:	f88d 300f 	strb.w	r3, [sp, #15]
     a62:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a66:	2b00      	cmp	r3, #0
     a68:	d118      	bne.n	a9c <sys_m4_cache_init+0x48>
     a6a:	4b10      	ldr	r3, [pc, #64]	; (aac <sys_m4_cache_init+0x58>)
     a6c:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     a70:	601a      	str	r2, [r3, #0]
     a72:	4b0e      	ldr	r3, [pc, #56]	; (aac <sys_m4_cache_init+0x58>)
     a74:	681b      	ldr	r3, [r3, #0]
     a76:	4a0d      	ldr	r2, [pc, #52]	; (aac <sys_m4_cache_init+0x58>)
     a78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a7c:	6013      	str	r3, [r2, #0]
     a7e:	bf00      	nop
     a80:	4b0a      	ldr	r3, [pc, #40]	; (aac <sys_m4_cache_init+0x58>)
     a82:	681b      	ldr	r3, [r3, #0]
     a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     a8c:	d0f8      	beq.n	a80 <sys_m4_cache_init+0x2c>
     a8e:	4b07      	ldr	r3, [pc, #28]	; (aac <sys_m4_cache_init+0x58>)
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	4a06      	ldr	r2, [pc, #24]	; (aac <sys_m4_cache_init+0x58>)
     a94:	f043 0301 	orr.w	r3, r3, #1
     a98:	6013      	str	r3, [r2, #0]
     a9a:	e002      	b.n	aa2 <sys_m4_cache_init+0x4e>
     a9c:	2301      	movs	r3, #1
     a9e:	f88d 300f 	strb.w	r3, [sp, #15]
     aa2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     aa6:	4618      	mov	r0, r3
     aa8:	b004      	add	sp, #16
     aaa:	4770      	bx	lr
     aac:	e0082000 	.word	0xe0082000

00000ab0 <startup_go_to_user_mode>:
     ab0:	bf00      	nop
     ab2:	4770      	bx	lr

00000ab4 <Sys_GetCoreID>:
     ab4:	2300      	movs	r3, #0
     ab6:	4618      	mov	r0, r3
     ab8:	4770      	bx	lr

00000aba <HardFault_Handler>:
     aba:	e7fe      	b.n	aba <HardFault_Handler>

00000abc <MemManage_Handler>:
     abc:	e7fe      	b.n	abc <MemManage_Handler>

00000abe <BusFault_Handler>:
     abe:	e7fe      	b.n	abe <BusFault_Handler>

00000ac0 <UsageFault_Handler>:
     ac0:	e7fe      	b.n	ac0 <UsageFault_Handler>

00000ac2 <SVC_Handler>:
     ac2:	e7fe      	b.n	ac2 <SVC_Handler>

00000ac4 <DebugMon_Handler>:
     ac4:	e7fe      	b.n	ac4 <DebugMon_Handler>

00000ac6 <PendSV_Handler>:
     ac6:	e7fe      	b.n	ac6 <PendSV_Handler>

00000ac8 <SysTick_Handler>:
     ac8:	e7fe      	b.n	ac8 <SysTick_Handler>

00000aca <undefined_handler>:
     aca:	e7fe      	b.n	aca <undefined_handler>

00000acc <OsIf_Timer_Dummy_GetCounter>:
     acc:	2300      	movs	r3, #0
     ace:	4618      	mov	r0, r3
     ad0:	4770      	bx	lr

00000ad2 <OsIf_Timer_Dummy_GetElapsed>:
     ad2:	b082      	sub	sp, #8
     ad4:	9001      	str	r0, [sp, #4]
     ad6:	2301      	movs	r3, #1
     ad8:	4618      	mov	r0, r3
     ada:	b002      	add	sp, #8
     adc:	4770      	bx	lr

00000ade <OsIf_Timer_Dummy_SetTimerFrequency>:
     ade:	b082      	sub	sp, #8
     ae0:	9001      	str	r0, [sp, #4]
     ae2:	bf00      	nop
     ae4:	b002      	add	sp, #8
     ae6:	4770      	bx	lr

00000ae8 <OsIf_Timer_Dummy_MicrosToTicks>:
     ae8:	b082      	sub	sp, #8
     aea:	9001      	str	r0, [sp, #4]
     aec:	9b01      	ldr	r3, [sp, #4]
     aee:	4618      	mov	r0, r3
     af0:	b002      	add	sp, #8
     af2:	4770      	bx	lr

00000af4 <OsIf_Init>:
     af4:	b500      	push	{lr}
     af6:	b083      	sub	sp, #12
     af8:	9001      	str	r0, [sp, #4]
     afa:	f000 f86d 	bl	bd8 <OsIf_Timer_System_Init>
     afe:	bf00      	nop
     b00:	b003      	add	sp, #12
     b02:	f85d fb04 	ldr.w	pc, [sp], #4

00000b06 <OsIf_GetCounter>:
     b06:	b500      	push	{lr}
     b08:	b085      	sub	sp, #20
     b0a:	9001      	str	r0, [sp, #4]
     b0c:	2300      	movs	r3, #0
     b0e:	9303      	str	r3, [sp, #12]
     b10:	9b01      	ldr	r3, [sp, #4]
     b12:	2b00      	cmp	r3, #0
     b14:	d003      	beq.n	b1e <OsIf_GetCounter+0x18>
     b16:	9b01      	ldr	r3, [sp, #4]
     b18:	2b01      	cmp	r3, #1
     b1a:	d004      	beq.n	b26 <OsIf_GetCounter+0x20>
     b1c:	e007      	b.n	b2e <OsIf_GetCounter+0x28>
     b1e:	f7ff ffd5 	bl	acc <OsIf_Timer_Dummy_GetCounter>
     b22:	9003      	str	r0, [sp, #12]
     b24:	e003      	b.n	b2e <OsIf_GetCounter+0x28>
     b26:	f000 f873 	bl	c10 <OsIf_Timer_System_GetCounter>
     b2a:	9003      	str	r0, [sp, #12]
     b2c:	bf00      	nop
     b2e:	9b03      	ldr	r3, [sp, #12]
     b30:	4618      	mov	r0, r3
     b32:	b005      	add	sp, #20
     b34:	f85d fb04 	ldr.w	pc, [sp], #4

00000b38 <OsIf_GetElapsed>:
     b38:	b500      	push	{lr}
     b3a:	b085      	sub	sp, #20
     b3c:	9001      	str	r0, [sp, #4]
     b3e:	9100      	str	r1, [sp, #0]
     b40:	2300      	movs	r3, #0
     b42:	9303      	str	r3, [sp, #12]
     b44:	9b00      	ldr	r3, [sp, #0]
     b46:	2b00      	cmp	r3, #0
     b48:	d003      	beq.n	b52 <OsIf_GetElapsed+0x1a>
     b4a:	9b00      	ldr	r3, [sp, #0]
     b4c:	2b01      	cmp	r3, #1
     b4e:	d005      	beq.n	b5c <OsIf_GetElapsed+0x24>
     b50:	e009      	b.n	b66 <OsIf_GetElapsed+0x2e>
     b52:	9801      	ldr	r0, [sp, #4]
     b54:	f7ff ffbd 	bl	ad2 <OsIf_Timer_Dummy_GetElapsed>
     b58:	9003      	str	r0, [sp, #12]
     b5a:	e004      	b.n	b66 <OsIf_GetElapsed+0x2e>
     b5c:	9801      	ldr	r0, [sp, #4]
     b5e:	f000 f865 	bl	c2c <OsIf_Timer_System_GetElapsed>
     b62:	9003      	str	r0, [sp, #12]
     b64:	bf00      	nop
     b66:	9b03      	ldr	r3, [sp, #12]
     b68:	4618      	mov	r0, r3
     b6a:	b005      	add	sp, #20
     b6c:	f85d fb04 	ldr.w	pc, [sp], #4

00000b70 <OsIf_SetTimerFrequency>:
     b70:	b500      	push	{lr}
     b72:	b083      	sub	sp, #12
     b74:	9001      	str	r0, [sp, #4]
     b76:	9100      	str	r1, [sp, #0]
     b78:	9b00      	ldr	r3, [sp, #0]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d003      	beq.n	b86 <OsIf_SetTimerFrequency+0x16>
     b7e:	9b00      	ldr	r3, [sp, #0]
     b80:	2b01      	cmp	r3, #1
     b82:	d004      	beq.n	b8e <OsIf_SetTimerFrequency+0x1e>
     b84:	e007      	b.n	b96 <OsIf_SetTimerFrequency+0x26>
     b86:	9801      	ldr	r0, [sp, #4]
     b88:	f7ff ffa9 	bl	ade <OsIf_Timer_Dummy_SetTimerFrequency>
     b8c:	e003      	b.n	b96 <OsIf_SetTimerFrequency+0x26>
     b8e:	9801      	ldr	r0, [sp, #4]
     b90:	f000 f85c 	bl	c4c <OsIf_Timer_System_SetTimerFrequency>
     b94:	bf00      	nop
     b96:	bf00      	nop
     b98:	b003      	add	sp, #12
     b9a:	f85d fb04 	ldr.w	pc, [sp], #4

00000b9e <OsIf_MicrosToTicks>:
     b9e:	b500      	push	{lr}
     ba0:	b085      	sub	sp, #20
     ba2:	9001      	str	r0, [sp, #4]
     ba4:	9100      	str	r1, [sp, #0]
     ba6:	2300      	movs	r3, #0
     ba8:	9303      	str	r3, [sp, #12]
     baa:	9b00      	ldr	r3, [sp, #0]
     bac:	2b00      	cmp	r3, #0
     bae:	d003      	beq.n	bb8 <OsIf_MicrosToTicks+0x1a>
     bb0:	9b00      	ldr	r3, [sp, #0]
     bb2:	2b01      	cmp	r3, #1
     bb4:	d005      	beq.n	bc2 <OsIf_MicrosToTicks+0x24>
     bb6:	e009      	b.n	bcc <OsIf_MicrosToTicks+0x2e>
     bb8:	9801      	ldr	r0, [sp, #4]
     bba:	f7ff ff95 	bl	ae8 <OsIf_Timer_Dummy_MicrosToTicks>
     bbe:	9003      	str	r0, [sp, #12]
     bc0:	e004      	b.n	bcc <OsIf_MicrosToTicks+0x2e>
     bc2:	9801      	ldr	r0, [sp, #4]
     bc4:	f000 f850 	bl	c68 <OsIf_Timer_System_MicrosToTicks>
     bc8:	9003      	str	r0, [sp, #12]
     bca:	bf00      	nop
     bcc:	9b03      	ldr	r3, [sp, #12]
     bce:	4618      	mov	r0, r3
     bd0:	b005      	add	sp, #20
     bd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000bd8 <OsIf_Timer_System_Init>:
     bd8:	b500      	push	{lr}
     bda:	b083      	sub	sp, #12
     bdc:	2300      	movs	r3, #0
     bde:	9301      	str	r3, [sp, #4]
     be0:	4a09      	ldr	r2, [pc, #36]	; (c08 <OsIf_Timer_System_Init+0x30>)
     be2:	9b01      	ldr	r3, [sp, #4]
     be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     be8:	685a      	ldr	r2, [r3, #4]
     bea:	4908      	ldr	r1, [pc, #32]	; (c0c <OsIf_Timer_System_Init+0x34>)
     bec:	9b01      	ldr	r3, [sp, #4]
     bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     bf2:	4a06      	ldr	r2, [pc, #24]	; (c0c <OsIf_Timer_System_Init+0x34>)
     bf4:	9b01      	ldr	r3, [sp, #4]
     bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     bfa:	4618      	mov	r0, r3
     bfc:	f000 f868 	bl	cd0 <OsIf_Timer_System_Internal_Init>
     c00:	bf00      	nop
     c02:	b003      	add	sp, #12
     c04:	f85d fb04 	ldr.w	pc, [sp], #4
     c08:	0000c22c 	.word	0x0000c22c
     c0c:	1fff8b40 	.word	0x1fff8b40

00000c10 <OsIf_Timer_System_GetCounter>:
     c10:	b500      	push	{lr}
     c12:	b083      	sub	sp, #12
     c14:	2300      	movs	r3, #0
     c16:	9301      	str	r3, [sp, #4]
     c18:	2300      	movs	r3, #0
     c1a:	9300      	str	r3, [sp, #0]
     c1c:	f000 f86c 	bl	cf8 <OsIf_Timer_System_Internal_GetCounter>
     c20:	9001      	str	r0, [sp, #4]
     c22:	9b01      	ldr	r3, [sp, #4]
     c24:	4618      	mov	r0, r3
     c26:	b003      	add	sp, #12
     c28:	f85d fb04 	ldr.w	pc, [sp], #4

00000c2c <OsIf_Timer_System_GetElapsed>:
     c2c:	b500      	push	{lr}
     c2e:	b085      	sub	sp, #20
     c30:	9001      	str	r0, [sp, #4]
     c32:	2300      	movs	r3, #0
     c34:	9303      	str	r3, [sp, #12]
     c36:	2300      	movs	r3, #0
     c38:	9302      	str	r3, [sp, #8]
     c3a:	9801      	ldr	r0, [sp, #4]
     c3c:	f000 f864 	bl	d08 <OsIf_Timer_System_Internal_GetElapsed>
     c40:	9003      	str	r0, [sp, #12]
     c42:	9b03      	ldr	r3, [sp, #12]
     c44:	4618      	mov	r0, r3
     c46:	b005      	add	sp, #20
     c48:	f85d fb04 	ldr.w	pc, [sp], #4

00000c4c <OsIf_Timer_System_SetTimerFrequency>:
     c4c:	b084      	sub	sp, #16
     c4e:	9001      	str	r0, [sp, #4]
     c50:	2300      	movs	r3, #0
     c52:	9303      	str	r3, [sp, #12]
     c54:	4903      	ldr	r1, [pc, #12]	; (c64 <OsIf_Timer_System_SetTimerFrequency+0x18>)
     c56:	9b03      	ldr	r3, [sp, #12]
     c58:	9a01      	ldr	r2, [sp, #4]
     c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     c5e:	bf00      	nop
     c60:	b004      	add	sp, #16
     c62:	4770      	bx	lr
     c64:	1fff8b40 	.word	0x1fff8b40

00000c68 <OsIf_Timer_System_MicrosToTicks>:
     c68:	b5f0      	push	{r4, r5, r6, r7, lr}
     c6a:	b087      	sub	sp, #28
     c6c:	9001      	str	r0, [sp, #4]
     c6e:	2100      	movs	r1, #0
     c70:	9105      	str	r1, [sp, #20]
     c72:	2100      	movs	r1, #0
     c74:	9104      	str	r1, [sp, #16]
     c76:	9901      	ldr	r1, [sp, #4]
     c78:	2000      	movs	r0, #0
     c7a:	460e      	mov	r6, r1
     c7c:	4607      	mov	r7, r0
     c7e:	4812      	ldr	r0, [pc, #72]	; (cc8 <OsIf_Timer_System_MicrosToTicks+0x60>)
     c80:	9904      	ldr	r1, [sp, #16]
     c82:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
     c86:	2000      	movs	r0, #0
     c88:	460c      	mov	r4, r1
     c8a:	4605      	mov	r5, r0
     c8c:	fb04 f007 	mul.w	r0, r4, r7
     c90:	fb06 f105 	mul.w	r1, r6, r5
     c94:	4401      	add	r1, r0
     c96:	fba6 2304 	umull	r2, r3, r6, r4
     c9a:	4419      	add	r1, r3
     c9c:	460b      	mov	r3, r1
     c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
     ca2:	e9cd 2302 	strd	r2, r3, [sp, #8]
     ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     caa:	4a08      	ldr	r2, [pc, #32]	; (ccc <OsIf_Timer_System_MicrosToTicks+0x64>)
     cac:	f04f 0300 	mov.w	r3, #0
     cb0:	f7ff fc78 	bl	5a4 <__aeabi_uldivmod>
     cb4:	4602      	mov	r2, r0
     cb6:	460b      	mov	r3, r1
     cb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
     cbc:	9b02      	ldr	r3, [sp, #8]
     cbe:	9305      	str	r3, [sp, #20]
     cc0:	9b05      	ldr	r3, [sp, #20]
     cc2:	4618      	mov	r0, r3
     cc4:	b007      	add	sp, #28
     cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cc8:	1fff8b40 	.word	0x1fff8b40
     ccc:	000f4240 	.word	0x000f4240

00000cd0 <OsIf_Timer_System_Internal_Init>:
     cd0:	b082      	sub	sp, #8
     cd2:	9001      	str	r0, [sp, #4]
     cd4:	4b07      	ldr	r3, [pc, #28]	; (cf4 <OsIf_Timer_System_Internal_Init+0x24>)
     cd6:	2200      	movs	r2, #0
     cd8:	601a      	str	r2, [r3, #0]
     cda:	4b06      	ldr	r3, [pc, #24]	; (cf4 <OsIf_Timer_System_Internal_Init+0x24>)
     cdc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
     ce0:	605a      	str	r2, [r3, #4]
     ce2:	4b04      	ldr	r3, [pc, #16]	; (cf4 <OsIf_Timer_System_Internal_Init+0x24>)
     ce4:	2200      	movs	r2, #0
     ce6:	609a      	str	r2, [r3, #8]
     ce8:	4b02      	ldr	r3, [pc, #8]	; (cf4 <OsIf_Timer_System_Internal_Init+0x24>)
     cea:	2205      	movs	r2, #5
     cec:	601a      	str	r2, [r3, #0]
     cee:	bf00      	nop
     cf0:	b002      	add	sp, #8
     cf2:	4770      	bx	lr
     cf4:	e000e010 	.word	0xe000e010

00000cf8 <OsIf_Timer_System_Internal_GetCounter>:
     cf8:	4b02      	ldr	r3, [pc, #8]	; (d04 <OsIf_Timer_System_Internal_GetCounter+0xc>)
     cfa:	689b      	ldr	r3, [r3, #8]
     cfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d00:	4618      	mov	r0, r3
     d02:	4770      	bx	lr
     d04:	e000e010 	.word	0xe000e010

00000d08 <OsIf_Timer_System_Internal_GetElapsed>:
     d08:	b084      	sub	sp, #16
     d0a:	9001      	str	r0, [sp, #4]
     d0c:	4b10      	ldr	r3, [pc, #64]	; (d50 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
     d0e:	689b      	ldr	r3, [r3, #8]
     d10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d14:	9302      	str	r3, [sp, #8]
     d16:	2300      	movs	r3, #0
     d18:	9303      	str	r3, [sp, #12]
     d1a:	9b01      	ldr	r3, [sp, #4]
     d1c:	681b      	ldr	r3, [r3, #0]
     d1e:	9a02      	ldr	r2, [sp, #8]
     d20:	429a      	cmp	r2, r3
     d22:	d909      	bls.n	d38 <OsIf_Timer_System_Internal_GetElapsed+0x30>
     d24:	9b01      	ldr	r3, [sp, #4]
     d26:	681a      	ldr	r2, [r3, #0]
     d28:	9b02      	ldr	r3, [sp, #8]
     d2a:	1ad3      	subs	r3, r2, r3
     d2c:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
     d30:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     d34:	9303      	str	r3, [sp, #12]
     d36:	e004      	b.n	d42 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
     d38:	9b01      	ldr	r3, [sp, #4]
     d3a:	681a      	ldr	r2, [r3, #0]
     d3c:	9b02      	ldr	r3, [sp, #8]
     d3e:	1ad3      	subs	r3, r2, r3
     d40:	9303      	str	r3, [sp, #12]
     d42:	9b01      	ldr	r3, [sp, #4]
     d44:	9a02      	ldr	r2, [sp, #8]
     d46:	601a      	str	r2, [r3, #0]
     d48:	9b03      	ldr	r3, [sp, #12]
     d4a:	4618      	mov	r0, r3
     d4c:	b004      	add	sp, #16
     d4e:	4770      	bx	lr
     d50:	e000e010 	.word	0xe000e010

00000d54 <Clock_Ip_NotificatonsEmptyCallback>:
     d54:	b082      	sub	sp, #8
     d56:	9001      	str	r0, [sp, #4]
     d58:	9100      	str	r1, [sp, #0]
     d5a:	bf00      	nop
     d5c:	b002      	add	sp, #8
     d5e:	4770      	bx	lr

00000d60 <Clock_Ip_UpdateDriverContext>:
     d60:	b500      	push	{lr}
     d62:	b085      	sub	sp, #20
     d64:	9001      	str	r0, [sp, #4]
     d66:	4b24      	ldr	r3, [pc, #144]	; (df8 <Clock_Ip_UpdateDriverContext+0x98>)
     d68:	2201      	movs	r2, #1
     d6a:	701a      	strb	r2, [r3, #0]
     d6c:	4b23      	ldr	r3, [pc, #140]	; (dfc <Clock_Ip_UpdateDriverContext+0x9c>)
     d6e:	681b      	ldr	r3, [r3, #0]
     d70:	2102      	movs	r1, #2
     d72:	4618      	mov	r0, r3
     d74:	f003 fc32 	bl	45dc <Clock_Ip_Command>
     d78:	2300      	movs	r3, #0
     d7a:	f88d 300f 	strb.w	r3, [sp, #15]
     d7e:	e015      	b.n	dac <Clock_Ip_UpdateDriverContext+0x4c>
     d80:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d84:	9a01      	ldr	r2, [sp, #4]
     d86:	334a      	adds	r3, #74	; 0x4a
     d88:	00db      	lsls	r3, r3, #3
     d8a:	4413      	add	r3, r2
     d8c:	6858      	ldr	r0, [r3, #4]
     d8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d92:	9a01      	ldr	r2, [sp, #4]
     d94:	334a      	adds	r3, #74	; 0x4a
     d96:	00db      	lsls	r3, r3, #3
     d98:	4413      	add	r3, r2
     d9a:	689b      	ldr	r3, [r3, #8]
     d9c:	4619      	mov	r1, r3
     d9e:	f001 fadc 	bl	235a <Clock_Ip_SetExternalSignalFrequency>
     da2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     da6:	3301      	adds	r3, #1
     da8:	f88d 300f 	strb.w	r3, [sp, #15]
     dac:	9b01      	ldr	r3, [sp, #4]
     dae:	7bdb      	ldrb	r3, [r3, #15]
     db0:	f89d 200f 	ldrb.w	r2, [sp, #15]
     db4:	429a      	cmp	r2, r3
     db6:	d3e3      	bcc.n	d80 <Clock_Ip_UpdateDriverContext+0x20>
     db8:	f000 f824 	bl	e04 <Clock_Ip_CallEmptyCallbacks>
     dbc:	2301      	movs	r3, #1
     dbe:	f88d 300f 	strb.w	r3, [sp, #15]
     dc2:	e00e      	b.n	de2 <Clock_Ip_UpdateDriverContext+0x82>
     dc4:	f89d 200f 	ldrb.w	r2, [sp, #15]
     dc8:	9b01      	ldr	r3, [sp, #4]
     dca:	327e      	adds	r2, #126	; 0x7e
     dcc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
     dd0:	490b      	ldr	r1, [pc, #44]	; (e00 <Clock_Ip_UpdateDriverContext+0xa0>)
     dd2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     dd6:	54ca      	strb	r2, [r1, r3]
     dd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ddc:	3301      	adds	r3, #1
     dde:	f88d 300f 	strb.w	r3, [sp, #15]
     de2:	9b01      	ldr	r3, [sp, #4]
     de4:	7cdb      	ldrb	r3, [r3, #19]
     de6:	f89d 200f 	ldrb.w	r2, [sp, #15]
     dea:	429a      	cmp	r2, r3
     dec:	d3ea      	bcc.n	dc4 <Clock_Ip_UpdateDriverContext+0x64>
     dee:	bf00      	nop
     df0:	bf00      	nop
     df2:	b005      	add	sp, #20
     df4:	f85d fb04 	ldr.w	pc, [sp], #4
     df8:	1fff8b10 	.word	0x1fff8b10
     dfc:	1fff8b44 	.word	0x1fff8b44
     e00:	1fff8b50 	.word	0x1fff8b50

00000e04 <Clock_Ip_CallEmptyCallbacks>:
     e04:	b508      	push	{r3, lr}
     e06:	4b23      	ldr	r3, [pc, #140]	; (e94 <Clock_Ip_CallEmptyCallbacks+0x90>)
     e08:	781b      	ldrb	r3, [r3, #0]
     e0a:	f083 0301 	eor.w	r3, r3, #1
     e0e:	b2db      	uxtb	r3, r3
     e10:	2b00      	cmp	r3, #0
     e12:	d03d      	beq.n	e90 <Clock_Ip_CallEmptyCallbacks+0x8c>
     e14:	4b1f      	ldr	r3, [pc, #124]	; (e94 <Clock_Ip_CallEmptyCallbacks+0x90>)
     e16:	2201      	movs	r2, #1
     e18:	701a      	strb	r2, [r3, #0]
     e1a:	4b1f      	ldr	r3, [pc, #124]	; (e98 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e1c:	685b      	ldr	r3, [r3, #4]
     e1e:	2100      	movs	r1, #0
     e20:	2000      	movs	r0, #0
     e22:	4798      	blx	r3
     e24:	4b1c      	ldr	r3, [pc, #112]	; (e98 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e26:	689b      	ldr	r3, [r3, #8]
     e28:	2057      	movs	r0, #87	; 0x57
     e2a:	4798      	blx	r3
     e2c:	4b1b      	ldr	r3, [pc, #108]	; (e9c <Clock_Ip_CallEmptyCallbacks+0x98>)
     e2e:	681b      	ldr	r3, [r3, #0]
     e30:	2000      	movs	r0, #0
     e32:	4798      	blx	r3
     e34:	4b1a      	ldr	r3, [pc, #104]	; (ea0 <Clock_Ip_CallEmptyCallbacks+0x9c>)
     e36:	681b      	ldr	r3, [r3, #0]
     e38:	2000      	movs	r0, #0
     e3a:	4798      	blx	r3
     e3c:	4b19      	ldr	r3, [pc, #100]	; (ea4 <Clock_Ip_CallEmptyCallbacks+0xa0>)
     e3e:	681b      	ldr	r3, [r3, #0]
     e40:	2000      	movs	r0, #0
     e42:	4798      	blx	r3
     e44:	4b18      	ldr	r3, [pc, #96]	; (ea8 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     e46:	685b      	ldr	r3, [r3, #4]
     e48:	2000      	movs	r0, #0
     e4a:	4798      	blx	r3
     e4c:	4b16      	ldr	r3, [pc, #88]	; (ea8 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     e4e:	689b      	ldr	r3, [r3, #8]
     e50:	2057      	movs	r0, #87	; 0x57
     e52:	4798      	blx	r3
     e54:	4b15      	ldr	r3, [pc, #84]	; (eac <Clock_Ip_CallEmptyCallbacks+0xa8>)
     e56:	681b      	ldr	r3, [r3, #0]
     e58:	2000      	movs	r0, #0
     e5a:	4798      	blx	r3
     e5c:	4b13      	ldr	r3, [pc, #76]	; (eac <Clock_Ip_CallEmptyCallbacks+0xa8>)
     e5e:	685b      	ldr	r3, [r3, #4]
     e60:	2100      	movs	r1, #0
     e62:	2057      	movs	r0, #87	; 0x57
     e64:	4798      	blx	r3
     e66:	4b12      	ldr	r3, [pc, #72]	; (eb0 <Clock_Ip_CallEmptyCallbacks+0xac>)
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	2000      	movs	r0, #0
     e6c:	4798      	blx	r3
     e6e:	4b11      	ldr	r3, [pc, #68]	; (eb4 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     e70:	685b      	ldr	r3, [r3, #4]
     e72:	2000      	movs	r0, #0
     e74:	4798      	blx	r3
     e76:	4b0f      	ldr	r3, [pc, #60]	; (eb4 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     e78:	689b      	ldr	r3, [r3, #8]
     e7a:	2057      	movs	r0, #87	; 0x57
     e7c:	4798      	blx	r3
     e7e:	4b0e      	ldr	r3, [pc, #56]	; (eb8 <Clock_Ip_CallEmptyCallbacks+0xb4>)
     e80:	685b      	ldr	r3, [r3, #4]
     e82:	2000      	movs	r0, #0
     e84:	4798      	blx	r3
     e86:	4b0d      	ldr	r3, [pc, #52]	; (ebc <Clock_Ip_CallEmptyCallbacks+0xb8>)
     e88:	681b      	ldr	r3, [r3, #0]
     e8a:	2100      	movs	r1, #0
     e8c:	2000      	movs	r0, #0
     e8e:	4798      	blx	r3
     e90:	bf00      	nop
     e92:	bd08      	pop	{r3, pc}
     e94:	1fff8b48 	.word	0x1fff8b48
     e98:	0000bc30 	.word	0x0000bc30
     e9c:	0000bb44 	.word	0x0000bb44
     ea0:	0000bb80 	.word	0x0000bb80
     ea4:	0000bb88 	.word	0x0000bb88
     ea8:	0000bbb0 	.word	0x0000bbb0
     eac:	0000bbbc 	.word	0x0000bbbc
     eb0:	0000bbf4 	.word	0x0000bbf4
     eb4:	0000bc40 	.word	0x0000bc40
     eb8:	0000bc6c 	.word	0x0000bc6c
     ebc:	0000bc68 	.word	0x0000bc68

00000ec0 <Clock_Ip_ResetClockConfiguration>:
     ec0:	b500      	push	{lr}
     ec2:	b085      	sub	sp, #20
     ec4:	9001      	str	r0, [sp, #4]
     ec6:	9b01      	ldr	r3, [sp, #4]
     ec8:	7adb      	ldrb	r3, [r3, #11]
     eca:	9303      	str	r3, [sp, #12]
     ecc:	e01f      	b.n	f0e <Clock_Ip_ResetClockConfiguration+0x4e>
     ece:	9b03      	ldr	r3, [sp, #12]
     ed0:	1e5a      	subs	r2, r3, #1
     ed2:	9b01      	ldr	r3, [sp, #4]
     ed4:	320d      	adds	r2, #13
     ed6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
     eda:	495a      	ldr	r1, [pc, #360]	; (1044 <Clock_Ip_ResetClockConfiguration+0x184>)
     edc:	4613      	mov	r3, r2
     ede:	00db      	lsls	r3, r3, #3
     ee0:	4413      	add	r3, r2
     ee2:	440b      	add	r3, r1
     ee4:	3301      	adds	r3, #1
     ee6:	781b      	ldrb	r3, [r3, #0]
     ee8:	461a      	mov	r2, r3
     eea:	4b57      	ldr	r3, [pc, #348]	; (1048 <Clock_Ip_ResetClockConfiguration+0x188>)
     eec:	5c9b      	ldrb	r3, [r3, r2]
     eee:	9302      	str	r3, [sp, #8]
     ef0:	4a56      	ldr	r2, [pc, #344]	; (104c <Clock_Ip_ResetClockConfiguration+0x18c>)
     ef2:	9b02      	ldr	r3, [sp, #8]
     ef4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     ef8:	9a03      	ldr	r2, [sp, #12]
     efa:	3a01      	subs	r2, #1
     efc:	320d      	adds	r2, #13
     efe:	00d2      	lsls	r2, r2, #3
     f00:	9901      	ldr	r1, [sp, #4]
     f02:	440a      	add	r2, r1
     f04:	4610      	mov	r0, r2
     f06:	4798      	blx	r3
     f08:	9b03      	ldr	r3, [sp, #12]
     f0a:	3b01      	subs	r3, #1
     f0c:	9303      	str	r3, [sp, #12]
     f0e:	9b03      	ldr	r3, [sp, #12]
     f10:	2b00      	cmp	r3, #0
     f12:	d1dc      	bne.n	ece <Clock_Ip_ResetClockConfiguration+0xe>
     f14:	9b01      	ldr	r3, [sp, #4]
     f16:	7b9b      	ldrb	r3, [r3, #14]
     f18:	9303      	str	r3, [sp, #12]
     f1a:	e026      	b.n	f6a <Clock_Ip_ResetClockConfiguration+0xaa>
     f1c:	9b03      	ldr	r3, [sp, #12]
     f1e:	3b01      	subs	r3, #1
     f20:	9a01      	ldr	r2, [sp, #4]
     f22:	3324      	adds	r3, #36	; 0x24
     f24:	011b      	lsls	r3, r3, #4
     f26:	4413      	add	r3, r2
     f28:	3304      	adds	r3, #4
     f2a:	681a      	ldr	r2, [r3, #0]
     f2c:	4945      	ldr	r1, [pc, #276]	; (1044 <Clock_Ip_ResetClockConfiguration+0x184>)
     f2e:	4613      	mov	r3, r2
     f30:	00db      	lsls	r3, r3, #3
     f32:	4413      	add	r3, r2
     f34:	440b      	add	r3, r1
     f36:	3301      	adds	r3, #1
     f38:	781b      	ldrb	r3, [r3, #0]
     f3a:	461a      	mov	r2, r3
     f3c:	4b44      	ldr	r3, [pc, #272]	; (1050 <Clock_Ip_ResetClockConfiguration+0x190>)
     f3e:	5c9b      	ldrb	r3, [r3, r2]
     f40:	9302      	str	r3, [sp, #8]
     f42:	4944      	ldr	r1, [pc, #272]	; (1054 <Clock_Ip_ResetClockConfiguration+0x194>)
     f44:	9a02      	ldr	r2, [sp, #8]
     f46:	4613      	mov	r3, r2
     f48:	005b      	lsls	r3, r3, #1
     f4a:	4413      	add	r3, r2
     f4c:	009b      	lsls	r3, r3, #2
     f4e:	440b      	add	r3, r1
     f50:	681b      	ldr	r3, [r3, #0]
     f52:	9a03      	ldr	r2, [sp, #12]
     f54:	3a01      	subs	r2, #1
     f56:	3224      	adds	r2, #36	; 0x24
     f58:	0112      	lsls	r2, r2, #4
     f5a:	9901      	ldr	r1, [sp, #4]
     f5c:	440a      	add	r2, r1
     f5e:	3204      	adds	r2, #4
     f60:	4610      	mov	r0, r2
     f62:	4798      	blx	r3
     f64:	9b03      	ldr	r3, [sp, #12]
     f66:	3b01      	subs	r3, #1
     f68:	9303      	str	r3, [sp, #12]
     f6a:	9b03      	ldr	r3, [sp, #12]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d1d5      	bne.n	f1c <Clock_Ip_ResetClockConfiguration+0x5c>
     f70:	9b01      	ldr	r3, [sp, #4]
     f72:	7a9b      	ldrb	r3, [r3, #10]
     f74:	9303      	str	r3, [sp, #12]
     f76:	e02a      	b.n	fce <Clock_Ip_ResetClockConfiguration+0x10e>
     f78:	9b03      	ldr	r3, [sp, #12]
     f7a:	1e5a      	subs	r2, r3, #1
     f7c:	9901      	ldr	r1, [sp, #4]
     f7e:	4613      	mov	r3, r2
     f80:	009b      	lsls	r3, r3, #2
     f82:	4413      	add	r3, r2
     f84:	00db      	lsls	r3, r3, #3
     f86:	440b      	add	r3, r1
     f88:	3340      	adds	r3, #64	; 0x40
     f8a:	681a      	ldr	r2, [r3, #0]
     f8c:	492d      	ldr	r1, [pc, #180]	; (1044 <Clock_Ip_ResetClockConfiguration+0x184>)
     f8e:	4613      	mov	r3, r2
     f90:	00db      	lsls	r3, r3, #3
     f92:	4413      	add	r3, r2
     f94:	440b      	add	r3, r1
     f96:	3301      	adds	r3, #1
     f98:	781b      	ldrb	r3, [r3, #0]
     f9a:	461a      	mov	r2, r3
     f9c:	4b2e      	ldr	r3, [pc, #184]	; (1058 <Clock_Ip_ResetClockConfiguration+0x198>)
     f9e:	5c9b      	ldrb	r3, [r3, r2]
     fa0:	9302      	str	r3, [sp, #8]
     fa2:	492e      	ldr	r1, [pc, #184]	; (105c <Clock_Ip_ResetClockConfiguration+0x19c>)
     fa4:	9a02      	ldr	r2, [sp, #8]
     fa6:	4613      	mov	r3, r2
     fa8:	009b      	lsls	r3, r3, #2
     faa:	4413      	add	r3, r2
     fac:	009b      	lsls	r3, r3, #2
     fae:	440b      	add	r3, r1
     fb0:	6819      	ldr	r1, [r3, #0]
     fb2:	9b03      	ldr	r3, [sp, #12]
     fb4:	1e5a      	subs	r2, r3, #1
     fb6:	4613      	mov	r3, r2
     fb8:	009b      	lsls	r3, r3, #2
     fba:	4413      	add	r3, r2
     fbc:	00db      	lsls	r3, r3, #3
     fbe:	3340      	adds	r3, #64	; 0x40
     fc0:	9a01      	ldr	r2, [sp, #4]
     fc2:	4413      	add	r3, r2
     fc4:	4618      	mov	r0, r3
     fc6:	4788      	blx	r1
     fc8:	9b03      	ldr	r3, [sp, #12]
     fca:	3b01      	subs	r3, #1
     fcc:	9303      	str	r3, [sp, #12]
     fce:	9b03      	ldr	r3, [sp, #12]
     fd0:	2b00      	cmp	r3, #0
     fd2:	d1d1      	bne.n	f78 <Clock_Ip_ResetClockConfiguration+0xb8>
     fd4:	9b01      	ldr	r3, [sp, #4]
     fd6:	7a5b      	ldrb	r3, [r3, #9]
     fd8:	9303      	str	r3, [sp, #12]
     fda:	e02b      	b.n	1034 <Clock_Ip_ResetClockConfiguration+0x174>
     fdc:	9b03      	ldr	r3, [sp, #12]
     fde:	1e5a      	subs	r2, r3, #1
     fe0:	9901      	ldr	r1, [sp, #4]
     fe2:	4613      	mov	r3, r2
     fe4:	009b      	lsls	r3, r3, #2
     fe6:	4413      	add	r3, r2
     fe8:	009b      	lsls	r3, r3, #2
     fea:	440b      	add	r3, r1
     fec:	332c      	adds	r3, #44	; 0x2c
     fee:	681a      	ldr	r2, [r3, #0]
     ff0:	4914      	ldr	r1, [pc, #80]	; (1044 <Clock_Ip_ResetClockConfiguration+0x184>)
     ff2:	4613      	mov	r3, r2
     ff4:	00db      	lsls	r3, r3, #3
     ff6:	4413      	add	r3, r2
     ff8:	440b      	add	r3, r1
     ffa:	3301      	adds	r3, #1
     ffc:	781b      	ldrb	r3, [r3, #0]
     ffe:	461a      	mov	r2, r3
    1000:	4b17      	ldr	r3, [pc, #92]	; (1060 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1002:	5c9b      	ldrb	r3, [r3, r2]
    1004:	9302      	str	r3, [sp, #8]
    1006:	4917      	ldr	r1, [pc, #92]	; (1064 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1008:	9a02      	ldr	r2, [sp, #8]
    100a:	4613      	mov	r3, r2
    100c:	009b      	lsls	r3, r3, #2
    100e:	4413      	add	r3, r2
    1010:	009b      	lsls	r3, r3, #2
    1012:	440b      	add	r3, r1
    1014:	6819      	ldr	r1, [r3, #0]
    1016:	9b03      	ldr	r3, [sp, #12]
    1018:	1e5a      	subs	r2, r3, #1
    101a:	4613      	mov	r3, r2
    101c:	009b      	lsls	r3, r3, #2
    101e:	4413      	add	r3, r2
    1020:	009b      	lsls	r3, r3, #2
    1022:	3328      	adds	r3, #40	; 0x28
    1024:	9a01      	ldr	r2, [sp, #4]
    1026:	4413      	add	r3, r2
    1028:	3304      	adds	r3, #4
    102a:	4618      	mov	r0, r3
    102c:	4788      	blx	r1
    102e:	9b03      	ldr	r3, [sp, #12]
    1030:	3b01      	subs	r3, #1
    1032:	9303      	str	r3, [sp, #12]
    1034:	9b03      	ldr	r3, [sp, #12]
    1036:	2b00      	cmp	r3, #0
    1038:	d1d0      	bne.n	fdc <Clock_Ip_ResetClockConfiguration+0x11c>
    103a:	bf00      	nop
    103c:	bf00      	nop
    103e:	b005      	add	sp, #20
    1040:	f85d fb04 	ldr.w	pc, [sp], #4
    1044:	0000b634 	.word	0x0000b634
    1048:	0000b604 	.word	0x0000b604
    104c:	0000bc6c 	.word	0x0000bc6c
    1050:	0000b5e4 	.word	0x0000b5e4
    1054:	0000bbb0 	.word	0x0000bbb0
    1058:	0000b5f4 	.word	0x0000b5f4
    105c:	0000bc40 	.word	0x0000bc40
    1060:	0000b5b4 	.word	0x0000b5b4
    1064:	0000bb88 	.word	0x0000bb88

00001068 <Clock_Ip_Init>:
    1068:	b500      	push	{lr}
    106a:	b085      	sub	sp, #20
    106c:	9001      	str	r0, [sp, #4]
    106e:	2301      	movs	r3, #1
    1070:	9303      	str	r3, [sp, #12]
    1072:	9801      	ldr	r0, [sp, #4]
    1074:	f000 f818 	bl	10a8 <Clock_Ip_InitClock>
    1078:	4b0a      	ldr	r3, [pc, #40]	; (10a4 <Clock_Ip_Init+0x3c>)
    107a:	781b      	ldrb	r3, [r3, #0]
    107c:	2b00      	cmp	r3, #0
    107e:	d00a      	beq.n	1096 <Clock_Ip_Init+0x2e>
    1080:	f000 fb74 	bl	176c <Clock_Ip_GetPllStatus>
    1084:	9002      	str	r0, [sp, #8]
    1086:	9b02      	ldr	r3, [sp, #8]
    1088:	2b00      	cmp	r3, #0
    108a:	d106      	bne.n	109a <Clock_Ip_Init+0x32>
    108c:	f000 fbf2 	bl	1874 <Clock_Ip_DistributePll>
    1090:	2300      	movs	r3, #0
    1092:	9303      	str	r3, [sp, #12]
    1094:	e001      	b.n	109a <Clock_Ip_Init+0x32>
    1096:	2300      	movs	r3, #0
    1098:	9303      	str	r3, [sp, #12]
    109a:	9b03      	ldr	r3, [sp, #12]
    109c:	4618      	mov	r0, r3
    109e:	b005      	add	sp, #20
    10a0:	f85d fb04 	ldr.w	pc, [sp], #4
    10a4:	1fff8b4c 	.word	0x1fff8b4c

000010a8 <Clock_Ip_InitClock>:
    10a8:	b510      	push	{r4, lr}
    10aa:	b084      	sub	sp, #16
    10ac:	9001      	str	r0, [sp, #4]
    10ae:	4a9f      	ldr	r2, [pc, #636]	; (132c <Clock_Ip_InitClock+0x284>)
    10b0:	9b01      	ldr	r3, [sp, #4]
    10b2:	6013      	str	r3, [r2, #0]
    10b4:	2101      	movs	r1, #1
    10b6:	9801      	ldr	r0, [sp, #4]
    10b8:	f003 fa90 	bl	45dc <Clock_Ip_Command>
    10bc:	4b9b      	ldr	r3, [pc, #620]	; (132c <Clock_Ip_InitClock+0x284>)
    10be:	681b      	ldr	r3, [r3, #0]
    10c0:	2b00      	cmp	r3, #0
    10c2:	d030      	beq.n	1126 <Clock_Ip_InitClock+0x7e>
    10c4:	2300      	movs	r3, #0
    10c6:	9303      	str	r3, [sp, #12]
    10c8:	e027      	b.n	111a <Clock_Ip_InitClock+0x72>
    10ca:	9901      	ldr	r1, [sp, #4]
    10cc:	9a03      	ldr	r2, [sp, #12]
    10ce:	4613      	mov	r3, r2
    10d0:	009b      	lsls	r3, r3, #2
    10d2:	4413      	add	r3, r2
    10d4:	009b      	lsls	r3, r3, #2
    10d6:	440b      	add	r3, r1
    10d8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    10dc:	681a      	ldr	r2, [r3, #0]
    10de:	4994      	ldr	r1, [pc, #592]	; (1330 <Clock_Ip_InitClock+0x288>)
    10e0:	4613      	mov	r3, r2
    10e2:	00db      	lsls	r3, r3, #3
    10e4:	4413      	add	r3, r2
    10e6:	440b      	add	r3, r1
    10e8:	3301      	adds	r3, #1
    10ea:	781b      	ldrb	r3, [r3, #0]
    10ec:	461a      	mov	r2, r3
    10ee:	4b91      	ldr	r3, [pc, #580]	; (1334 <Clock_Ip_InitClock+0x28c>)
    10f0:	5c9b      	ldrb	r3, [r3, r2]
    10f2:	9302      	str	r3, [sp, #8]
    10f4:	4a90      	ldr	r2, [pc, #576]	; (1338 <Clock_Ip_InitClock+0x290>)
    10f6:	9b02      	ldr	r3, [sp, #8]
    10f8:	011b      	lsls	r3, r3, #4
    10fa:	4413      	add	r3, r2
    10fc:	6819      	ldr	r1, [r3, #0]
    10fe:	9a03      	ldr	r2, [sp, #12]
    1100:	4613      	mov	r3, r2
    1102:	009b      	lsls	r3, r3, #2
    1104:	4413      	add	r3, r2
    1106:	009b      	lsls	r3, r3, #2
    1108:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    110c:	9a01      	ldr	r2, [sp, #4]
    110e:	4413      	add	r3, r2
    1110:	4618      	mov	r0, r3
    1112:	4788      	blx	r1
    1114:	9b03      	ldr	r3, [sp, #12]
    1116:	3301      	adds	r3, #1
    1118:	9303      	str	r3, [sp, #12]
    111a:	9b01      	ldr	r3, [sp, #4]
    111c:	7c9b      	ldrb	r3, [r3, #18]
    111e:	461a      	mov	r2, r3
    1120:	9b03      	ldr	r3, [sp, #12]
    1122:	4293      	cmp	r3, r2
    1124:	d3d1      	bcc.n	10ca <Clock_Ip_InitClock+0x22>
    1126:	9801      	ldr	r0, [sp, #4]
    1128:	f7ff feca 	bl	ec0 <Clock_Ip_ResetClockConfiguration>
    112c:	2300      	movs	r3, #0
    112e:	9303      	str	r3, [sp, #12]
    1130:	e029      	b.n	1186 <Clock_Ip_InitClock+0xde>
    1132:	9901      	ldr	r1, [sp, #4]
    1134:	9a03      	ldr	r2, [sp, #12]
    1136:	4613      	mov	r3, r2
    1138:	005b      	lsls	r3, r3, #1
    113a:	4413      	add	r3, r2
    113c:	009b      	lsls	r3, r3, #2
    113e:	440b      	add	r3, r1
    1140:	3314      	adds	r3, #20
    1142:	681a      	ldr	r2, [r3, #0]
    1144:	497a      	ldr	r1, [pc, #488]	; (1330 <Clock_Ip_InitClock+0x288>)
    1146:	4613      	mov	r3, r2
    1148:	00db      	lsls	r3, r3, #3
    114a:	4413      	add	r3, r2
    114c:	440b      	add	r3, r1
    114e:	3301      	adds	r3, #1
    1150:	781b      	ldrb	r3, [r3, #0]
    1152:	461a      	mov	r2, r3
    1154:	4b79      	ldr	r3, [pc, #484]	; (133c <Clock_Ip_InitClock+0x294>)
    1156:	5c9b      	ldrb	r3, [r3, r2]
    1158:	9302      	str	r3, [sp, #8]
    115a:	4979      	ldr	r1, [pc, #484]	; (1340 <Clock_Ip_InitClock+0x298>)
    115c:	9a02      	ldr	r2, [sp, #8]
    115e:	4613      	mov	r3, r2
    1160:	005b      	lsls	r3, r3, #1
    1162:	4413      	add	r3, r2
    1164:	009b      	lsls	r3, r3, #2
    1166:	440b      	add	r3, r1
    1168:	6819      	ldr	r1, [r3, #0]
    116a:	9a03      	ldr	r2, [sp, #12]
    116c:	4613      	mov	r3, r2
    116e:	005b      	lsls	r3, r3, #1
    1170:	4413      	add	r3, r2
    1172:	009b      	lsls	r3, r3, #2
    1174:	3310      	adds	r3, #16
    1176:	9a01      	ldr	r2, [sp, #4]
    1178:	4413      	add	r3, r2
    117a:	3304      	adds	r3, #4
    117c:	4618      	mov	r0, r3
    117e:	4788      	blx	r1
    1180:	9b03      	ldr	r3, [sp, #12]
    1182:	3301      	adds	r3, #1
    1184:	9303      	str	r3, [sp, #12]
    1186:	9b01      	ldr	r3, [sp, #4]
    1188:	7a1b      	ldrb	r3, [r3, #8]
    118a:	461a      	mov	r2, r3
    118c:	9b03      	ldr	r3, [sp, #12]
    118e:	4293      	cmp	r3, r2
    1190:	d3cf      	bcc.n	1132 <Clock_Ip_InitClock+0x8a>
    1192:	2300      	movs	r3, #0
    1194:	9303      	str	r3, [sp, #12]
    1196:	e02a      	b.n	11ee <Clock_Ip_InitClock+0x146>
    1198:	9901      	ldr	r1, [sp, #4]
    119a:	9a03      	ldr	r2, [sp, #12]
    119c:	4613      	mov	r3, r2
    119e:	009b      	lsls	r3, r3, #2
    11a0:	4413      	add	r3, r2
    11a2:	009b      	lsls	r3, r3, #2
    11a4:	440b      	add	r3, r1
    11a6:	332c      	adds	r3, #44	; 0x2c
    11a8:	681a      	ldr	r2, [r3, #0]
    11aa:	4961      	ldr	r1, [pc, #388]	; (1330 <Clock_Ip_InitClock+0x288>)
    11ac:	4613      	mov	r3, r2
    11ae:	00db      	lsls	r3, r3, #3
    11b0:	4413      	add	r3, r2
    11b2:	440b      	add	r3, r1
    11b4:	3301      	adds	r3, #1
    11b6:	781b      	ldrb	r3, [r3, #0]
    11b8:	461a      	mov	r2, r3
    11ba:	4b62      	ldr	r3, [pc, #392]	; (1344 <Clock_Ip_InitClock+0x29c>)
    11bc:	5c9b      	ldrb	r3, [r3, r2]
    11be:	9302      	str	r3, [sp, #8]
    11c0:	4961      	ldr	r1, [pc, #388]	; (1348 <Clock_Ip_InitClock+0x2a0>)
    11c2:	9a02      	ldr	r2, [sp, #8]
    11c4:	4613      	mov	r3, r2
    11c6:	009b      	lsls	r3, r3, #2
    11c8:	4413      	add	r3, r2
    11ca:	009b      	lsls	r3, r3, #2
    11cc:	440b      	add	r3, r1
    11ce:	3304      	adds	r3, #4
    11d0:	6819      	ldr	r1, [r3, #0]
    11d2:	9a03      	ldr	r2, [sp, #12]
    11d4:	4613      	mov	r3, r2
    11d6:	009b      	lsls	r3, r3, #2
    11d8:	4413      	add	r3, r2
    11da:	009b      	lsls	r3, r3, #2
    11dc:	3328      	adds	r3, #40	; 0x28
    11de:	9a01      	ldr	r2, [sp, #4]
    11e0:	4413      	add	r3, r2
    11e2:	3304      	adds	r3, #4
    11e4:	4618      	mov	r0, r3
    11e6:	4788      	blx	r1
    11e8:	9b03      	ldr	r3, [sp, #12]
    11ea:	3301      	adds	r3, #1
    11ec:	9303      	str	r3, [sp, #12]
    11ee:	9b01      	ldr	r3, [sp, #4]
    11f0:	7a5b      	ldrb	r3, [r3, #9]
    11f2:	461a      	mov	r2, r3
    11f4:	9b03      	ldr	r3, [sp, #12]
    11f6:	4293      	cmp	r3, r2
    11f8:	d3ce      	bcc.n	1198 <Clock_Ip_InitClock+0xf0>
    11fa:	9801      	ldr	r0, [sp, #4]
    11fc:	f7ff fdb0 	bl	d60 <Clock_Ip_UpdateDriverContext>
    1200:	2300      	movs	r3, #0
    1202:	9303      	str	r3, [sp, #12]
    1204:	e028      	b.n	1258 <Clock_Ip_InitClock+0x1b0>
    1206:	9901      	ldr	r1, [sp, #4]
    1208:	9a03      	ldr	r2, [sp, #12]
    120a:	4613      	mov	r3, r2
    120c:	009b      	lsls	r3, r3, #2
    120e:	4413      	add	r3, r2
    1210:	009b      	lsls	r3, r3, #2
    1212:	440b      	add	r3, r1
    1214:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1218:	681a      	ldr	r2, [r3, #0]
    121a:	4945      	ldr	r1, [pc, #276]	; (1330 <Clock_Ip_InitClock+0x288>)
    121c:	4613      	mov	r3, r2
    121e:	00db      	lsls	r3, r3, #3
    1220:	4413      	add	r3, r2
    1222:	440b      	add	r3, r1
    1224:	3301      	adds	r3, #1
    1226:	781b      	ldrb	r3, [r3, #0]
    1228:	461a      	mov	r2, r3
    122a:	4b48      	ldr	r3, [pc, #288]	; (134c <Clock_Ip_InitClock+0x2a4>)
    122c:	5c9b      	ldrb	r3, [r3, r2]
    122e:	9302      	str	r3, [sp, #8]
    1230:	4a47      	ldr	r2, [pc, #284]	; (1350 <Clock_Ip_InitClock+0x2a8>)
    1232:	9b02      	ldr	r3, [sp, #8]
    1234:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1238:	9a03      	ldr	r2, [sp, #12]
    123a:	4613      	mov	r3, r2
    123c:	009b      	lsls	r3, r3, #2
    123e:	4413      	add	r3, r2
    1240:	009b      	lsls	r3, r3, #2
    1242:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1246:	9a01      	ldr	r2, [sp, #4]
    1248:	4413      	add	r3, r2
    124a:	3304      	adds	r3, #4
    124c:	9903      	ldr	r1, [sp, #12]
    124e:	4618      	mov	r0, r3
    1250:	47a0      	blx	r4
    1252:	9b03      	ldr	r3, [sp, #12]
    1254:	3301      	adds	r3, #1
    1256:	9303      	str	r3, [sp, #12]
    1258:	9b01      	ldr	r3, [sp, #4]
    125a:	7c5b      	ldrb	r3, [r3, #17]
    125c:	461a      	mov	r2, r3
    125e:	9b03      	ldr	r3, [sp, #12]
    1260:	4293      	cmp	r3, r2
    1262:	d3d0      	bcc.n	1206 <Clock_Ip_InitClock+0x15e>
    1264:	2300      	movs	r3, #0
    1266:	9303      	str	r3, [sp, #12]
    1268:	e026      	b.n	12b8 <Clock_Ip_InitClock+0x210>
    126a:	9901      	ldr	r1, [sp, #4]
    126c:	9a03      	ldr	r2, [sp, #12]
    126e:	4613      	mov	r3, r2
    1270:	005b      	lsls	r3, r3, #1
    1272:	4413      	add	r3, r2
    1274:	009b      	lsls	r3, r3, #2
    1276:	440b      	add	r3, r1
    1278:	f503 730e 	add.w	r3, r3, #568	; 0x238
    127c:	681a      	ldr	r2, [r3, #0]
    127e:	492c      	ldr	r1, [pc, #176]	; (1330 <Clock_Ip_InitClock+0x288>)
    1280:	4613      	mov	r3, r2
    1282:	00db      	lsls	r3, r3, #3
    1284:	4413      	add	r3, r2
    1286:	440b      	add	r3, r1
    1288:	3301      	adds	r3, #1
    128a:	781b      	ldrb	r3, [r3, #0]
    128c:	461a      	mov	r2, r3
    128e:	4b31      	ldr	r3, [pc, #196]	; (1354 <Clock_Ip_InitClock+0x2ac>)
    1290:	5c9b      	ldrb	r3, [r3, r2]
    1292:	9302      	str	r3, [sp, #8]
    1294:	4a30      	ldr	r2, [pc, #192]	; (1358 <Clock_Ip_InitClock+0x2b0>)
    1296:	9b02      	ldr	r3, [sp, #8]
    1298:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    129c:	9a03      	ldr	r2, [sp, #12]
    129e:	4613      	mov	r3, r2
    12a0:	005b      	lsls	r3, r3, #1
    12a2:	4413      	add	r3, r2
    12a4:	009b      	lsls	r3, r3, #2
    12a6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    12aa:	9a01      	ldr	r2, [sp, #4]
    12ac:	4413      	add	r3, r2
    12ae:	4618      	mov	r0, r3
    12b0:	4788      	blx	r1
    12b2:	9b03      	ldr	r3, [sp, #12]
    12b4:	3301      	adds	r3, #1
    12b6:	9303      	str	r3, [sp, #12]
    12b8:	9b01      	ldr	r3, [sp, #4]
    12ba:	7b5b      	ldrb	r3, [r3, #13]
    12bc:	461a      	mov	r2, r3
    12be:	9b03      	ldr	r3, [sp, #12]
    12c0:	4293      	cmp	r3, r2
    12c2:	d3d2      	bcc.n	126a <Clock_Ip_InitClock+0x1c2>
    12c4:	2300      	movs	r3, #0
    12c6:	9303      	str	r3, [sp, #12]
    12c8:	e026      	b.n	1318 <Clock_Ip_InitClock+0x270>
    12ca:	9901      	ldr	r1, [sp, #4]
    12cc:	9a03      	ldr	r2, [sp, #12]
    12ce:	4613      	mov	r3, r2
    12d0:	005b      	lsls	r3, r3, #1
    12d2:	4413      	add	r3, r2
    12d4:	009b      	lsls	r3, r3, #2
    12d6:	440b      	add	r3, r1
    12d8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    12dc:	681a      	ldr	r2, [r3, #0]
    12de:	4914      	ldr	r1, [pc, #80]	; (1330 <Clock_Ip_InitClock+0x288>)
    12e0:	4613      	mov	r3, r2
    12e2:	00db      	lsls	r3, r3, #3
    12e4:	4413      	add	r3, r2
    12e6:	440b      	add	r3, r1
    12e8:	3301      	adds	r3, #1
    12ea:	781b      	ldrb	r3, [r3, #0]
    12ec:	461a      	mov	r2, r3
    12ee:	4b1b      	ldr	r3, [pc, #108]	; (135c <Clock_Ip_InitClock+0x2b4>)
    12f0:	5c9b      	ldrb	r3, [r3, r2]
    12f2:	9302      	str	r3, [sp, #8]
    12f4:	4a1a      	ldr	r2, [pc, #104]	; (1360 <Clock_Ip_InitClock+0x2b8>)
    12f6:	9b02      	ldr	r3, [sp, #8]
    12f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    12fc:	9a03      	ldr	r2, [sp, #12]
    12fe:	4613      	mov	r3, r2
    1300:	005b      	lsls	r3, r3, #1
    1302:	4413      	add	r3, r2
    1304:	009b      	lsls	r3, r3, #2
    1306:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    130a:	9a01      	ldr	r2, [sp, #4]
    130c:	4413      	add	r3, r2
    130e:	4618      	mov	r0, r3
    1310:	4788      	blx	r1
    1312:	9b03      	ldr	r3, [sp, #12]
    1314:	3301      	adds	r3, #1
    1316:	9303      	str	r3, [sp, #12]
    1318:	9b01      	ldr	r3, [sp, #4]
    131a:	7b1b      	ldrb	r3, [r3, #12]
    131c:	461a      	mov	r2, r3
    131e:	9b03      	ldr	r3, [sp, #12]
    1320:	4293      	cmp	r3, r2
    1322:	d3d2      	bcc.n	12ca <Clock_Ip_InitClock+0x222>
    1324:	2300      	movs	r3, #0
    1326:	9303      	str	r3, [sp, #12]
    1328:	e044      	b.n	13b4 <Clock_Ip_InitClock+0x30c>
    132a:	bf00      	nop
    132c:	1fff8b44 	.word	0x1fff8b44
    1330:	0000b634 	.word	0x0000b634
    1334:	0000b624 	.word	0x0000b624
    1338:	0000bc30 	.word	0x0000bc30
    133c:	0000b5c4 	.word	0x0000b5c4
    1340:	0000bbf4 	.word	0x0000bbf4
    1344:	0000b5b4 	.word	0x0000b5b4
    1348:	0000bb88 	.word	0x0000bb88
    134c:	0000b614 	.word	0x0000b614
    1350:	0000bc68 	.word	0x0000bc68
    1354:	0000b5a4 	.word	0x0000b5a4
    1358:	0000bb80 	.word	0x0000bb80
    135c:	0000b594 	.word	0x0000b594
    1360:	0000bb44 	.word	0x0000bb44
    1364:	9901      	ldr	r1, [sp, #4]
    1366:	9a03      	ldr	r2, [sp, #12]
    1368:	4613      	mov	r3, r2
    136a:	005b      	lsls	r3, r3, #1
    136c:	4413      	add	r3, r2
    136e:	009b      	lsls	r3, r3, #2
    1370:	440b      	add	r3, r1
    1372:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1376:	681a      	ldr	r2, [r3, #0]
    1378:	49ac      	ldr	r1, [pc, #688]	; (162c <Clock_Ip_InitClock+0x584>)
    137a:	4613      	mov	r3, r2
    137c:	00db      	lsls	r3, r3, #3
    137e:	4413      	add	r3, r2
    1380:	440b      	add	r3, r1
    1382:	3301      	adds	r3, #1
    1384:	781b      	ldrb	r3, [r3, #0]
    1386:	461a      	mov	r2, r3
    1388:	4ba9      	ldr	r3, [pc, #676]	; (1630 <Clock_Ip_InitClock+0x588>)
    138a:	5c9b      	ldrb	r3, [r3, r2]
    138c:	9302      	str	r3, [sp, #8]
    138e:	4aa9      	ldr	r2, [pc, #676]	; (1634 <Clock_Ip_InitClock+0x58c>)
    1390:	9b02      	ldr	r3, [sp, #8]
    1392:	00db      	lsls	r3, r3, #3
    1394:	4413      	add	r3, r2
    1396:	6859      	ldr	r1, [r3, #4]
    1398:	9a03      	ldr	r2, [sp, #12]
    139a:	4613      	mov	r3, r2
    139c:	005b      	lsls	r3, r3, #1
    139e:	4413      	add	r3, r2
    13a0:	009b      	lsls	r3, r3, #2
    13a2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    13a6:	9a01      	ldr	r2, [sp, #4]
    13a8:	4413      	add	r3, r2
    13aa:	4618      	mov	r0, r3
    13ac:	4788      	blx	r1
    13ae:	9b03      	ldr	r3, [sp, #12]
    13b0:	3301      	adds	r3, #1
    13b2:	9303      	str	r3, [sp, #12]
    13b4:	9b01      	ldr	r3, [sp, #4]
    13b6:	7b5b      	ldrb	r3, [r3, #13]
    13b8:	461a      	mov	r2, r3
    13ba:	9b03      	ldr	r3, [sp, #12]
    13bc:	4293      	cmp	r3, r2
    13be:	d3d1      	bcc.n	1364 <Clock_Ip_InitClock+0x2bc>
    13c0:	2300      	movs	r3, #0
    13c2:	9303      	str	r3, [sp, #12]
    13c4:	e029      	b.n	141a <Clock_Ip_InitClock+0x372>
    13c6:	9901      	ldr	r1, [sp, #4]
    13c8:	9a03      	ldr	r2, [sp, #12]
    13ca:	4613      	mov	r3, r2
    13cc:	009b      	lsls	r3, r3, #2
    13ce:	4413      	add	r3, r2
    13d0:	00db      	lsls	r3, r3, #3
    13d2:	440b      	add	r3, r1
    13d4:	3340      	adds	r3, #64	; 0x40
    13d6:	681a      	ldr	r2, [r3, #0]
    13d8:	4994      	ldr	r1, [pc, #592]	; (162c <Clock_Ip_InitClock+0x584>)
    13da:	4613      	mov	r3, r2
    13dc:	00db      	lsls	r3, r3, #3
    13de:	4413      	add	r3, r2
    13e0:	440b      	add	r3, r1
    13e2:	3301      	adds	r3, #1
    13e4:	781b      	ldrb	r3, [r3, #0]
    13e6:	461a      	mov	r2, r3
    13e8:	4b93      	ldr	r3, [pc, #588]	; (1638 <Clock_Ip_InitClock+0x590>)
    13ea:	5c9b      	ldrb	r3, [r3, r2]
    13ec:	9302      	str	r3, [sp, #8]
    13ee:	4993      	ldr	r1, [pc, #588]	; (163c <Clock_Ip_InitClock+0x594>)
    13f0:	9a02      	ldr	r2, [sp, #8]
    13f2:	4613      	mov	r3, r2
    13f4:	009b      	lsls	r3, r3, #2
    13f6:	4413      	add	r3, r2
    13f8:	009b      	lsls	r3, r3, #2
    13fa:	440b      	add	r3, r1
    13fc:	3304      	adds	r3, #4
    13fe:	6819      	ldr	r1, [r3, #0]
    1400:	9a03      	ldr	r2, [sp, #12]
    1402:	4613      	mov	r3, r2
    1404:	009b      	lsls	r3, r3, #2
    1406:	4413      	add	r3, r2
    1408:	00db      	lsls	r3, r3, #3
    140a:	3340      	adds	r3, #64	; 0x40
    140c:	9a01      	ldr	r2, [sp, #4]
    140e:	4413      	add	r3, r2
    1410:	4618      	mov	r0, r3
    1412:	4788      	blx	r1
    1414:	9b03      	ldr	r3, [sp, #12]
    1416:	3301      	adds	r3, #1
    1418:	9303      	str	r3, [sp, #12]
    141a:	9b01      	ldr	r3, [sp, #4]
    141c:	7a9b      	ldrb	r3, [r3, #10]
    141e:	461a      	mov	r2, r3
    1420:	9b03      	ldr	r3, [sp, #12]
    1422:	4293      	cmp	r3, r2
    1424:	d3cf      	bcc.n	13c6 <Clock_Ip_InitClock+0x31e>
    1426:	2300      	movs	r3, #0
    1428:	9303      	str	r3, [sp, #12]
    142a:	e029      	b.n	1480 <Clock_Ip_InitClock+0x3d8>
    142c:	9901      	ldr	r1, [sp, #4]
    142e:	9a03      	ldr	r2, [sp, #12]
    1430:	4613      	mov	r3, r2
    1432:	009b      	lsls	r3, r3, #2
    1434:	4413      	add	r3, r2
    1436:	009b      	lsls	r3, r3, #2
    1438:	440b      	add	r3, r1
    143a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    143e:	681a      	ldr	r2, [r3, #0]
    1440:	497a      	ldr	r1, [pc, #488]	; (162c <Clock_Ip_InitClock+0x584>)
    1442:	4613      	mov	r3, r2
    1444:	00db      	lsls	r3, r3, #3
    1446:	4413      	add	r3, r2
    1448:	440b      	add	r3, r1
    144a:	3301      	adds	r3, #1
    144c:	781b      	ldrb	r3, [r3, #0]
    144e:	461a      	mov	r2, r3
    1450:	4b7b      	ldr	r3, [pc, #492]	; (1640 <Clock_Ip_InitClock+0x598>)
    1452:	5c9b      	ldrb	r3, [r3, r2]
    1454:	9302      	str	r3, [sp, #8]
    1456:	4a7b      	ldr	r2, [pc, #492]	; (1644 <Clock_Ip_InitClock+0x59c>)
    1458:	9b02      	ldr	r3, [sp, #8]
    145a:	011b      	lsls	r3, r3, #4
    145c:	4413      	add	r3, r2
    145e:	3304      	adds	r3, #4
    1460:	681c      	ldr	r4, [r3, #0]
    1462:	9a03      	ldr	r2, [sp, #12]
    1464:	4613      	mov	r3, r2
    1466:	009b      	lsls	r3, r3, #2
    1468:	4413      	add	r3, r2
    146a:	009b      	lsls	r3, r3, #2
    146c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1470:	9a01      	ldr	r2, [sp, #4]
    1472:	4413      	add	r3, r2
    1474:	9903      	ldr	r1, [sp, #12]
    1476:	4618      	mov	r0, r3
    1478:	47a0      	blx	r4
    147a:	9b03      	ldr	r3, [sp, #12]
    147c:	3301      	adds	r3, #1
    147e:	9303      	str	r3, [sp, #12]
    1480:	9b01      	ldr	r3, [sp, #4]
    1482:	7c9b      	ldrb	r3, [r3, #18]
    1484:	461a      	mov	r2, r3
    1486:	9b03      	ldr	r3, [sp, #12]
    1488:	4293      	cmp	r3, r2
    148a:	d3cf      	bcc.n	142c <Clock_Ip_InitClock+0x384>
    148c:	2300      	movs	r3, #0
    148e:	9303      	str	r3, [sp, #12]
    1490:	e02a      	b.n	14e8 <Clock_Ip_InitClock+0x440>
    1492:	9901      	ldr	r1, [sp, #4]
    1494:	9a03      	ldr	r2, [sp, #12]
    1496:	4613      	mov	r3, r2
    1498:	009b      	lsls	r3, r3, #2
    149a:	4413      	add	r3, r2
    149c:	009b      	lsls	r3, r3, #2
    149e:	440b      	add	r3, r1
    14a0:	332c      	adds	r3, #44	; 0x2c
    14a2:	681a      	ldr	r2, [r3, #0]
    14a4:	4961      	ldr	r1, [pc, #388]	; (162c <Clock_Ip_InitClock+0x584>)
    14a6:	4613      	mov	r3, r2
    14a8:	00db      	lsls	r3, r3, #3
    14aa:	4413      	add	r3, r2
    14ac:	440b      	add	r3, r1
    14ae:	3301      	adds	r3, #1
    14b0:	781b      	ldrb	r3, [r3, #0]
    14b2:	461a      	mov	r2, r3
    14b4:	4b64      	ldr	r3, [pc, #400]	; (1648 <Clock_Ip_InitClock+0x5a0>)
    14b6:	5c9b      	ldrb	r3, [r3, r2]
    14b8:	9302      	str	r3, [sp, #8]
    14ba:	4964      	ldr	r1, [pc, #400]	; (164c <Clock_Ip_InitClock+0x5a4>)
    14bc:	9a02      	ldr	r2, [sp, #8]
    14be:	4613      	mov	r3, r2
    14c0:	009b      	lsls	r3, r3, #2
    14c2:	4413      	add	r3, r2
    14c4:	009b      	lsls	r3, r3, #2
    14c6:	440b      	add	r3, r1
    14c8:	3308      	adds	r3, #8
    14ca:	6819      	ldr	r1, [r3, #0]
    14cc:	9a03      	ldr	r2, [sp, #12]
    14ce:	4613      	mov	r3, r2
    14d0:	009b      	lsls	r3, r3, #2
    14d2:	4413      	add	r3, r2
    14d4:	009b      	lsls	r3, r3, #2
    14d6:	3328      	adds	r3, #40	; 0x28
    14d8:	9a01      	ldr	r2, [sp, #4]
    14da:	4413      	add	r3, r2
    14dc:	3304      	adds	r3, #4
    14de:	4618      	mov	r0, r3
    14e0:	4788      	blx	r1
    14e2:	9b03      	ldr	r3, [sp, #12]
    14e4:	3301      	adds	r3, #1
    14e6:	9303      	str	r3, [sp, #12]
    14e8:	9b01      	ldr	r3, [sp, #4]
    14ea:	7a5b      	ldrb	r3, [r3, #9]
    14ec:	461a      	mov	r2, r3
    14ee:	9b03      	ldr	r3, [sp, #12]
    14f0:	4293      	cmp	r3, r2
    14f2:	d3ce      	bcc.n	1492 <Clock_Ip_InitClock+0x3ea>
    14f4:	2300      	movs	r3, #0
    14f6:	9303      	str	r3, [sp, #12]
    14f8:	e029      	b.n	154e <Clock_Ip_InitClock+0x4a6>
    14fa:	9901      	ldr	r1, [sp, #4]
    14fc:	9a03      	ldr	r2, [sp, #12]
    14fe:	4613      	mov	r3, r2
    1500:	009b      	lsls	r3, r3, #2
    1502:	4413      	add	r3, r2
    1504:	00db      	lsls	r3, r3, #3
    1506:	440b      	add	r3, r1
    1508:	3340      	adds	r3, #64	; 0x40
    150a:	681a      	ldr	r2, [r3, #0]
    150c:	4947      	ldr	r1, [pc, #284]	; (162c <Clock_Ip_InitClock+0x584>)
    150e:	4613      	mov	r3, r2
    1510:	00db      	lsls	r3, r3, #3
    1512:	4413      	add	r3, r2
    1514:	440b      	add	r3, r1
    1516:	3301      	adds	r3, #1
    1518:	781b      	ldrb	r3, [r3, #0]
    151a:	461a      	mov	r2, r3
    151c:	4b46      	ldr	r3, [pc, #280]	; (1638 <Clock_Ip_InitClock+0x590>)
    151e:	5c9b      	ldrb	r3, [r3, r2]
    1520:	9302      	str	r3, [sp, #8]
    1522:	4946      	ldr	r1, [pc, #280]	; (163c <Clock_Ip_InitClock+0x594>)
    1524:	9a02      	ldr	r2, [sp, #8]
    1526:	4613      	mov	r3, r2
    1528:	009b      	lsls	r3, r3, #2
    152a:	4413      	add	r3, r2
    152c:	009b      	lsls	r3, r3, #2
    152e:	440b      	add	r3, r1
    1530:	330c      	adds	r3, #12
    1532:	6819      	ldr	r1, [r3, #0]
    1534:	9a03      	ldr	r2, [sp, #12]
    1536:	4613      	mov	r3, r2
    1538:	009b      	lsls	r3, r3, #2
    153a:	4413      	add	r3, r2
    153c:	00db      	lsls	r3, r3, #3
    153e:	3340      	adds	r3, #64	; 0x40
    1540:	9a01      	ldr	r2, [sp, #4]
    1542:	4413      	add	r3, r2
    1544:	4618      	mov	r0, r3
    1546:	4788      	blx	r1
    1548:	9b03      	ldr	r3, [sp, #12]
    154a:	3301      	adds	r3, #1
    154c:	9303      	str	r3, [sp, #12]
    154e:	9b01      	ldr	r3, [sp, #4]
    1550:	7a9b      	ldrb	r3, [r3, #10]
    1552:	461a      	mov	r2, r3
    1554:	9b03      	ldr	r3, [sp, #12]
    1556:	4293      	cmp	r3, r2
    1558:	d3cf      	bcc.n	14fa <Clock_Ip_InitClock+0x452>
    155a:	2300      	movs	r3, #0
    155c:	9303      	str	r3, [sp, #12]
    155e:	e025      	b.n	15ac <Clock_Ip_InitClock+0x504>
    1560:	9a01      	ldr	r2, [sp, #4]
    1562:	9b03      	ldr	r3, [sp, #12]
    1564:	3324      	adds	r3, #36	; 0x24
    1566:	011b      	lsls	r3, r3, #4
    1568:	4413      	add	r3, r2
    156a:	3304      	adds	r3, #4
    156c:	681a      	ldr	r2, [r3, #0]
    156e:	492f      	ldr	r1, [pc, #188]	; (162c <Clock_Ip_InitClock+0x584>)
    1570:	4613      	mov	r3, r2
    1572:	00db      	lsls	r3, r3, #3
    1574:	4413      	add	r3, r2
    1576:	440b      	add	r3, r1
    1578:	3301      	adds	r3, #1
    157a:	781b      	ldrb	r3, [r3, #0]
    157c:	461a      	mov	r2, r3
    157e:	4b34      	ldr	r3, [pc, #208]	; (1650 <Clock_Ip_InitClock+0x5a8>)
    1580:	5c9b      	ldrb	r3, [r3, r2]
    1582:	9302      	str	r3, [sp, #8]
    1584:	4933      	ldr	r1, [pc, #204]	; (1654 <Clock_Ip_InitClock+0x5ac>)
    1586:	9a02      	ldr	r2, [sp, #8]
    1588:	4613      	mov	r3, r2
    158a:	005b      	lsls	r3, r3, #1
    158c:	4413      	add	r3, r2
    158e:	009b      	lsls	r3, r3, #2
    1590:	440b      	add	r3, r1
    1592:	3304      	adds	r3, #4
    1594:	681b      	ldr	r3, [r3, #0]
    1596:	9a03      	ldr	r2, [sp, #12]
    1598:	3224      	adds	r2, #36	; 0x24
    159a:	0112      	lsls	r2, r2, #4
    159c:	9901      	ldr	r1, [sp, #4]
    159e:	440a      	add	r2, r1
    15a0:	3204      	adds	r2, #4
    15a2:	4610      	mov	r0, r2
    15a4:	4798      	blx	r3
    15a6:	9b03      	ldr	r3, [sp, #12]
    15a8:	3301      	adds	r3, #1
    15aa:	9303      	str	r3, [sp, #12]
    15ac:	9b01      	ldr	r3, [sp, #4]
    15ae:	7b9b      	ldrb	r3, [r3, #14]
    15b0:	461a      	mov	r2, r3
    15b2:	9b03      	ldr	r3, [sp, #12]
    15b4:	4293      	cmp	r3, r2
    15b6:	d3d3      	bcc.n	1560 <Clock_Ip_InitClock+0x4b8>
    15b8:	4b27      	ldr	r3, [pc, #156]	; (1658 <Clock_Ip_InitClock+0x5b0>)
    15ba:	2200      	movs	r2, #0
    15bc:	701a      	strb	r2, [r3, #0]
    15be:	4b26      	ldr	r3, [pc, #152]	; (1658 <Clock_Ip_InitClock+0x5b0>)
    15c0:	2200      	movs	r2, #0
    15c2:	705a      	strb	r2, [r3, #1]
    15c4:	4b24      	ldr	r3, [pc, #144]	; (1658 <Clock_Ip_InitClock+0x5b0>)
    15c6:	2201      	movs	r2, #1
    15c8:	709a      	strb	r2, [r3, #2]
    15ca:	4b23      	ldr	r3, [pc, #140]	; (1658 <Clock_Ip_InitClock+0x5b0>)
    15cc:	2200      	movs	r2, #0
    15ce:	70da      	strb	r2, [r3, #3]
    15d0:	f000 fa9c 	bl	1b0c <Clock_Ip_SetWaitStates>
    15d4:	2300      	movs	r3, #0
    15d6:	9303      	str	r3, [sp, #12]
    15d8:	e04c      	b.n	1674 <Clock_Ip_InitClock+0x5cc>
    15da:	9a01      	ldr	r2, [sp, #4]
    15dc:	9b03      	ldr	r3, [sp, #12]
    15de:	330d      	adds	r3, #13
    15e0:	00db      	lsls	r3, r3, #3
    15e2:	4413      	add	r3, r2
    15e4:	685b      	ldr	r3, [r3, #4]
    15e6:	4a1d      	ldr	r2, [pc, #116]	; (165c <Clock_Ip_InitClock+0x5b4>)
    15e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    15ec:	2b03      	cmp	r3, #3
    15ee:	d03b      	beq.n	1668 <Clock_Ip_InitClock+0x5c0>
    15f0:	9b01      	ldr	r3, [sp, #4]
    15f2:	9a03      	ldr	r2, [sp, #12]
    15f4:	320d      	adds	r2, #13
    15f6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    15fa:	490c      	ldr	r1, [pc, #48]	; (162c <Clock_Ip_InitClock+0x584>)
    15fc:	4613      	mov	r3, r2
    15fe:	00db      	lsls	r3, r3, #3
    1600:	4413      	add	r3, r2
    1602:	440b      	add	r3, r1
    1604:	3301      	adds	r3, #1
    1606:	781b      	ldrb	r3, [r3, #0]
    1608:	461a      	mov	r2, r3
    160a:	4b15      	ldr	r3, [pc, #84]	; (1660 <Clock_Ip_InitClock+0x5b8>)
    160c:	5c9b      	ldrb	r3, [r3, r2]
    160e:	9302      	str	r3, [sp, #8]
    1610:	4a14      	ldr	r2, [pc, #80]	; (1664 <Clock_Ip_InitClock+0x5bc>)
    1612:	9b02      	ldr	r3, [sp, #8]
    1614:	00db      	lsls	r3, r3, #3
    1616:	4413      	add	r3, r2
    1618:	685b      	ldr	r3, [r3, #4]
    161a:	9a03      	ldr	r2, [sp, #12]
    161c:	320d      	adds	r2, #13
    161e:	00d2      	lsls	r2, r2, #3
    1620:	9901      	ldr	r1, [sp, #4]
    1622:	440a      	add	r2, r1
    1624:	4610      	mov	r0, r2
    1626:	4798      	blx	r3
    1628:	e021      	b.n	166e <Clock_Ip_InitClock+0x5c6>
    162a:	bf00      	nop
    162c:	0000b634 	.word	0x0000b634
    1630:	0000b5a4 	.word	0x0000b5a4
    1634:	0000bb80 	.word	0x0000bb80
    1638:	0000b5f4 	.word	0x0000b5f4
    163c:	0000bc40 	.word	0x0000bc40
    1640:	0000b624 	.word	0x0000b624
    1644:	0000bc30 	.word	0x0000bc30
    1648:	0000b5b4 	.word	0x0000b5b4
    164c:	0000bb88 	.word	0x0000bb88
    1650:	0000b5e4 	.word	0x0000b5e4
    1654:	0000bbb0 	.word	0x0000bbb0
    1658:	1fff8b4c 	.word	0x1fff8b4c
    165c:	0000ba80 	.word	0x0000ba80
    1660:	0000b604 	.word	0x0000b604
    1664:	0000bc6c 	.word	0x0000bc6c
    1668:	4b3a      	ldr	r3, [pc, #232]	; (1754 <Clock_Ip_InitClock+0x6ac>)
    166a:	2201      	movs	r2, #1
    166c:	701a      	strb	r2, [r3, #0]
    166e:	9b03      	ldr	r3, [sp, #12]
    1670:	3301      	adds	r3, #1
    1672:	9303      	str	r3, [sp, #12]
    1674:	9b01      	ldr	r3, [sp, #4]
    1676:	7adb      	ldrb	r3, [r3, #11]
    1678:	461a      	mov	r2, r3
    167a:	9b03      	ldr	r3, [sp, #12]
    167c:	4293      	cmp	r3, r2
    167e:	d3ac      	bcc.n	15da <Clock_Ip_InitClock+0x532>
    1680:	4b34      	ldr	r3, [pc, #208]	; (1754 <Clock_Ip_InitClock+0x6ac>)
    1682:	781b      	ldrb	r3, [r3, #0]
    1684:	f083 0301 	eor.w	r3, r3, #1
    1688:	b2db      	uxtb	r3, r3
    168a:	2b00      	cmp	r3, #0
    168c:	d05e      	beq.n	174c <Clock_Ip_InitClock+0x6a4>
    168e:	2300      	movs	r3, #0
    1690:	9303      	str	r3, [sp, #12]
    1692:	e01f      	b.n	16d4 <Clock_Ip_InitClock+0x62c>
    1694:	9a01      	ldr	r2, [sp, #4]
    1696:	9b03      	ldr	r3, [sp, #12]
    1698:	334e      	adds	r3, #78	; 0x4e
    169a:	00db      	lsls	r3, r3, #3
    169c:	4413      	add	r3, r2
    169e:	685a      	ldr	r2, [r3, #4]
    16a0:	492d      	ldr	r1, [pc, #180]	; (1758 <Clock_Ip_InitClock+0x6b0>)
    16a2:	4613      	mov	r3, r2
    16a4:	00db      	lsls	r3, r3, #3
    16a6:	4413      	add	r3, r2
    16a8:	440b      	add	r3, r1
    16aa:	3301      	adds	r3, #1
    16ac:	781b      	ldrb	r3, [r3, #0]
    16ae:	461a      	mov	r2, r3
    16b0:	4b2a      	ldr	r3, [pc, #168]	; (175c <Clock_Ip_InitClock+0x6b4>)
    16b2:	5c9b      	ldrb	r3, [r3, r2]
    16b4:	9302      	str	r3, [sp, #8]
    16b6:	4a2a      	ldr	r2, [pc, #168]	; (1760 <Clock_Ip_InitClock+0x6b8>)
    16b8:	9b02      	ldr	r3, [sp, #8]
    16ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    16be:	9a03      	ldr	r2, [sp, #12]
    16c0:	324e      	adds	r2, #78	; 0x4e
    16c2:	00d2      	lsls	r2, r2, #3
    16c4:	9901      	ldr	r1, [sp, #4]
    16c6:	440a      	add	r2, r1
    16c8:	3204      	adds	r2, #4
    16ca:	4610      	mov	r0, r2
    16cc:	4798      	blx	r3
    16ce:	9b03      	ldr	r3, [sp, #12]
    16d0:	3301      	adds	r3, #1
    16d2:	9303      	str	r3, [sp, #12]
    16d4:	9b01      	ldr	r3, [sp, #4]
    16d6:	7c1b      	ldrb	r3, [r3, #16]
    16d8:	461a      	mov	r2, r3
    16da:	9b03      	ldr	r3, [sp, #12]
    16dc:	4293      	cmp	r3, r2
    16de:	d3d9      	bcc.n	1694 <Clock_Ip_InitClock+0x5ec>
    16e0:	2300      	movs	r3, #0
    16e2:	9303      	str	r3, [sp, #12]
    16e4:	e028      	b.n	1738 <Clock_Ip_InitClock+0x690>
    16e6:	9901      	ldr	r1, [sp, #4]
    16e8:	9a03      	ldr	r2, [sp, #12]
    16ea:	4613      	mov	r3, r2
    16ec:	009b      	lsls	r3, r3, #2
    16ee:	4413      	add	r3, r2
    16f0:	009b      	lsls	r3, r3, #2
    16f2:	440b      	add	r3, r1
    16f4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    16f8:	681a      	ldr	r2, [r3, #0]
    16fa:	4917      	ldr	r1, [pc, #92]	; (1758 <Clock_Ip_InitClock+0x6b0>)
    16fc:	4613      	mov	r3, r2
    16fe:	00db      	lsls	r3, r3, #3
    1700:	4413      	add	r3, r2
    1702:	440b      	add	r3, r1
    1704:	3301      	adds	r3, #1
    1706:	781b      	ldrb	r3, [r3, #0]
    1708:	461a      	mov	r2, r3
    170a:	4b16      	ldr	r3, [pc, #88]	; (1764 <Clock_Ip_InitClock+0x6bc>)
    170c:	5c9b      	ldrb	r3, [r3, r2]
    170e:	9302      	str	r3, [sp, #8]
    1710:	4a15      	ldr	r2, [pc, #84]	; (1768 <Clock_Ip_InitClock+0x6c0>)
    1712:	9b02      	ldr	r3, [sp, #8]
    1714:	011b      	lsls	r3, r3, #4
    1716:	4413      	add	r3, r2
    1718:	330c      	adds	r3, #12
    171a:	6819      	ldr	r1, [r3, #0]
    171c:	9a03      	ldr	r2, [sp, #12]
    171e:	4613      	mov	r3, r2
    1720:	009b      	lsls	r3, r3, #2
    1722:	4413      	add	r3, r2
    1724:	009b      	lsls	r3, r3, #2
    1726:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    172a:	9a01      	ldr	r2, [sp, #4]
    172c:	4413      	add	r3, r2
    172e:	4618      	mov	r0, r3
    1730:	4788      	blx	r1
    1732:	9b03      	ldr	r3, [sp, #12]
    1734:	3301      	adds	r3, #1
    1736:	9303      	str	r3, [sp, #12]
    1738:	9b01      	ldr	r3, [sp, #4]
    173a:	7c9b      	ldrb	r3, [r3, #18]
    173c:	461a      	mov	r2, r3
    173e:	9b03      	ldr	r3, [sp, #12]
    1740:	4293      	cmp	r3, r2
    1742:	d3d0      	bcc.n	16e6 <Clock_Ip_InitClock+0x63e>
    1744:	2104      	movs	r1, #4
    1746:	9801      	ldr	r0, [sp, #4]
    1748:	f002 ff48 	bl	45dc <Clock_Ip_Command>
    174c:	bf00      	nop
    174e:	b004      	add	sp, #16
    1750:	bd10      	pop	{r4, pc}
    1752:	bf00      	nop
    1754:	1fff8b4c 	.word	0x1fff8b4c
    1758:	0000b634 	.word	0x0000b634
    175c:	0000b5d4 	.word	0x0000b5d4
    1760:	0000bbbc 	.word	0x0000bbbc
    1764:	0000b624 	.word	0x0000b624
    1768:	0000bc30 	.word	0x0000bc30

0000176c <Clock_Ip_GetPllStatus>:
    176c:	b500      	push	{lr}
    176e:	b087      	sub	sp, #28
    1770:	2302      	movs	r3, #2
    1772:	9305      	str	r3, [sp, #20]
    1774:	2300      	movs	r3, #0
    1776:	9304      	str	r3, [sp, #16]
    1778:	e02c      	b.n	17d4 <Clock_Ip_GetPllStatus+0x68>
    177a:	4a36      	ldr	r2, [pc, #216]	; (1854 <Clock_Ip_GetPllStatus+0xe8>)
    177c:	9b04      	ldr	r3, [sp, #16]
    177e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1782:	4935      	ldr	r1, [pc, #212]	; (1858 <Clock_Ip_GetPllStatus+0xec>)
    1784:	4613      	mov	r3, r2
    1786:	00db      	lsls	r3, r3, #3
    1788:	4413      	add	r3, r2
    178a:	440b      	add	r3, r1
    178c:	3301      	adds	r3, #1
    178e:	781b      	ldrb	r3, [r3, #0]
    1790:	461a      	mov	r2, r3
    1792:	4b32      	ldr	r3, [pc, #200]	; (185c <Clock_Ip_GetPllStatus+0xf0>)
    1794:	5c9b      	ldrb	r3, [r3, r2]
    1796:	9303      	str	r3, [sp, #12]
    1798:	4931      	ldr	r1, [pc, #196]	; (1860 <Clock_Ip_GetPllStatus+0xf4>)
    179a:	9a03      	ldr	r2, [sp, #12]
    179c:	4613      	mov	r3, r2
    179e:	009b      	lsls	r3, r3, #2
    17a0:	4413      	add	r3, r2
    17a2:	009b      	lsls	r3, r3, #2
    17a4:	440b      	add	r3, r1
    17a6:	3308      	adds	r3, #8
    17a8:	681b      	ldr	r3, [r3, #0]
    17aa:	492a      	ldr	r1, [pc, #168]	; (1854 <Clock_Ip_GetPllStatus+0xe8>)
    17ac:	9a04      	ldr	r2, [sp, #16]
    17ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    17b2:	4610      	mov	r0, r2
    17b4:	4798      	blx	r3
    17b6:	9002      	str	r0, [sp, #8]
    17b8:	9b02      	ldr	r3, [sp, #8]
    17ba:	2b01      	cmp	r3, #1
    17bc:	d102      	bne.n	17c4 <Clock_Ip_GetPllStatus+0x58>
    17be:	2301      	movs	r3, #1
    17c0:	9305      	str	r3, [sp, #20]
    17c2:	e00d      	b.n	17e0 <Clock_Ip_GetPllStatus+0x74>
    17c4:	9b02      	ldr	r3, [sp, #8]
    17c6:	2b02      	cmp	r3, #2
    17c8:	d101      	bne.n	17ce <Clock_Ip_GetPllStatus+0x62>
    17ca:	2300      	movs	r3, #0
    17cc:	9305      	str	r3, [sp, #20]
    17ce:	9b04      	ldr	r3, [sp, #16]
    17d0:	3301      	adds	r3, #1
    17d2:	9304      	str	r3, [sp, #16]
    17d4:	4b23      	ldr	r3, [pc, #140]	; (1864 <Clock_Ip_GetPllStatus+0xf8>)
    17d6:	789b      	ldrb	r3, [r3, #2]
    17d8:	461a      	mov	r2, r3
    17da:	9b04      	ldr	r3, [sp, #16]
    17dc:	4293      	cmp	r3, r2
    17de:	d3cc      	bcc.n	177a <Clock_Ip_GetPllStatus+0xe>
    17e0:	9b05      	ldr	r3, [sp, #20]
    17e2:	2b00      	cmp	r3, #0
    17e4:	d130      	bne.n	1848 <Clock_Ip_GetPllStatus+0xdc>
    17e6:	2300      	movs	r3, #0
    17e8:	9304      	str	r3, [sp, #16]
    17ea:	e027      	b.n	183c <Clock_Ip_GetPllStatus+0xd0>
    17ec:	4a1e      	ldr	r2, [pc, #120]	; (1868 <Clock_Ip_GetPllStatus+0xfc>)
    17ee:	9b04      	ldr	r3, [sp, #16]
    17f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    17f4:	4918      	ldr	r1, [pc, #96]	; (1858 <Clock_Ip_GetPllStatus+0xec>)
    17f6:	4613      	mov	r3, r2
    17f8:	00db      	lsls	r3, r3, #3
    17fa:	4413      	add	r3, r2
    17fc:	440b      	add	r3, r1
    17fe:	3301      	adds	r3, #1
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	461a      	mov	r2, r3
    1804:	4b19      	ldr	r3, [pc, #100]	; (186c <Clock_Ip_GetPllStatus+0x100>)
    1806:	5c9b      	ldrb	r3, [r3, r2]
    1808:	9303      	str	r3, [sp, #12]
    180a:	4919      	ldr	r1, [pc, #100]	; (1870 <Clock_Ip_GetPllStatus+0x104>)
    180c:	9a03      	ldr	r2, [sp, #12]
    180e:	4613      	mov	r3, r2
    1810:	005b      	lsls	r3, r3, #1
    1812:	4413      	add	r3, r2
    1814:	009b      	lsls	r3, r3, #2
    1816:	440b      	add	r3, r1
    1818:	3308      	adds	r3, #8
    181a:	681b      	ldr	r3, [r3, #0]
    181c:	4912      	ldr	r1, [pc, #72]	; (1868 <Clock_Ip_GetPllStatus+0xfc>)
    181e:	9a04      	ldr	r2, [sp, #16]
    1820:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1824:	4610      	mov	r0, r2
    1826:	4798      	blx	r3
    1828:	9001      	str	r0, [sp, #4]
    182a:	9b01      	ldr	r3, [sp, #4]
    182c:	2b01      	cmp	r3, #1
    182e:	d102      	bne.n	1836 <Clock_Ip_GetPllStatus+0xca>
    1830:	2301      	movs	r3, #1
    1832:	9305      	str	r3, [sp, #20]
    1834:	e008      	b.n	1848 <Clock_Ip_GetPllStatus+0xdc>
    1836:	9b04      	ldr	r3, [sp, #16]
    1838:	3301      	adds	r3, #1
    183a:	9304      	str	r3, [sp, #16]
    183c:	4b09      	ldr	r3, [pc, #36]	; (1864 <Clock_Ip_GetPllStatus+0xf8>)
    183e:	78db      	ldrb	r3, [r3, #3]
    1840:	461a      	mov	r2, r3
    1842:	9b04      	ldr	r3, [sp, #16]
    1844:	4293      	cmp	r3, r2
    1846:	d3d1      	bcc.n	17ec <Clock_Ip_GetPllStatus+0x80>
    1848:	9b05      	ldr	r3, [sp, #20]
    184a:	4618      	mov	r0, r3
    184c:	b007      	add	sp, #28
    184e:	f85d fb04 	ldr.w	pc, [sp], #4
    1852:	bf00      	nop
    1854:	0000bb3c 	.word	0x0000bb3c
    1858:	0000b634 	.word	0x0000b634
    185c:	0000b5f4 	.word	0x0000b5f4
    1860:	0000bc40 	.word	0x0000bc40
    1864:	1fff8b4c 	.word	0x1fff8b4c
    1868:	0000bb40 	.word	0x0000bb40
    186c:	0000b5e4 	.word	0x0000b5e4
    1870:	0000bbb0 	.word	0x0000bbb0

00001874 <Clock_Ip_DistributePll>:
    1874:	b500      	push	{lr}
    1876:	b083      	sub	sp, #12
    1878:	4b55      	ldr	r3, [pc, #340]	; (19d0 <Clock_Ip_DistributePll+0x15c>)
    187a:	681b      	ldr	r3, [r3, #0]
    187c:	2b00      	cmp	r3, #0
    187e:	f000 80a2 	beq.w	19c6 <Clock_Ip_DistributePll+0x152>
    1882:	2300      	movs	r3, #0
    1884:	9301      	str	r3, [sp, #4]
    1886:	e02c      	b.n	18e2 <Clock_Ip_DistributePll+0x6e>
    1888:	4b51      	ldr	r3, [pc, #324]	; (19d0 <Clock_Ip_DistributePll+0x15c>)
    188a:	681a      	ldr	r2, [r3, #0]
    188c:	9b01      	ldr	r3, [sp, #4]
    188e:	330d      	adds	r3, #13
    1890:	00db      	lsls	r3, r3, #3
    1892:	4413      	add	r3, r2
    1894:	685b      	ldr	r3, [r3, #4]
    1896:	4a4f      	ldr	r2, [pc, #316]	; (19d4 <Clock_Ip_DistributePll+0x160>)
    1898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    189c:	2b03      	cmp	r3, #3
    189e:	d11d      	bne.n	18dc <Clock_Ip_DistributePll+0x68>
    18a0:	4b4b      	ldr	r3, [pc, #300]	; (19d0 <Clock_Ip_DistributePll+0x15c>)
    18a2:	681b      	ldr	r3, [r3, #0]
    18a4:	9a01      	ldr	r2, [sp, #4]
    18a6:	320d      	adds	r2, #13
    18a8:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    18ac:	494a      	ldr	r1, [pc, #296]	; (19d8 <Clock_Ip_DistributePll+0x164>)
    18ae:	4613      	mov	r3, r2
    18b0:	00db      	lsls	r3, r3, #3
    18b2:	4413      	add	r3, r2
    18b4:	440b      	add	r3, r1
    18b6:	3301      	adds	r3, #1
    18b8:	781b      	ldrb	r3, [r3, #0]
    18ba:	461a      	mov	r2, r3
    18bc:	4b47      	ldr	r3, [pc, #284]	; (19dc <Clock_Ip_DistributePll+0x168>)
    18be:	5c9b      	ldrb	r3, [r3, r2]
    18c0:	9300      	str	r3, [sp, #0]
    18c2:	4a47      	ldr	r2, [pc, #284]	; (19e0 <Clock_Ip_DistributePll+0x16c>)
    18c4:	9b00      	ldr	r3, [sp, #0]
    18c6:	00db      	lsls	r3, r3, #3
    18c8:	4413      	add	r3, r2
    18ca:	685b      	ldr	r3, [r3, #4]
    18cc:	4a40      	ldr	r2, [pc, #256]	; (19d0 <Clock_Ip_DistributePll+0x15c>)
    18ce:	6811      	ldr	r1, [r2, #0]
    18d0:	9a01      	ldr	r2, [sp, #4]
    18d2:	320d      	adds	r2, #13
    18d4:	00d2      	lsls	r2, r2, #3
    18d6:	440a      	add	r2, r1
    18d8:	4610      	mov	r0, r2
    18da:	4798      	blx	r3
    18dc:	9b01      	ldr	r3, [sp, #4]
    18de:	3301      	adds	r3, #1
    18e0:	9301      	str	r3, [sp, #4]
    18e2:	4b3b      	ldr	r3, [pc, #236]	; (19d0 <Clock_Ip_DistributePll+0x15c>)
    18e4:	681b      	ldr	r3, [r3, #0]
    18e6:	7adb      	ldrb	r3, [r3, #11]
    18e8:	461a      	mov	r2, r3
    18ea:	9b01      	ldr	r3, [sp, #4]
    18ec:	4293      	cmp	r3, r2
    18ee:	d3cb      	bcc.n	1888 <Clock_Ip_DistributePll+0x14>
    18f0:	4b3c      	ldr	r3, [pc, #240]	; (19e4 <Clock_Ip_DistributePll+0x170>)
    18f2:	781b      	ldrb	r3, [r3, #0]
    18f4:	2b00      	cmp	r3, #0
    18f6:	d066      	beq.n	19c6 <Clock_Ip_DistributePll+0x152>
    18f8:	2300      	movs	r3, #0
    18fa:	9301      	str	r3, [sp, #4]
    18fc:	e021      	b.n	1942 <Clock_Ip_DistributePll+0xce>
    18fe:	4b34      	ldr	r3, [pc, #208]	; (19d0 <Clock_Ip_DistributePll+0x15c>)
    1900:	681a      	ldr	r2, [r3, #0]
    1902:	9b01      	ldr	r3, [sp, #4]
    1904:	334e      	adds	r3, #78	; 0x4e
    1906:	00db      	lsls	r3, r3, #3
    1908:	4413      	add	r3, r2
    190a:	685a      	ldr	r2, [r3, #4]
    190c:	4932      	ldr	r1, [pc, #200]	; (19d8 <Clock_Ip_DistributePll+0x164>)
    190e:	4613      	mov	r3, r2
    1910:	00db      	lsls	r3, r3, #3
    1912:	4413      	add	r3, r2
    1914:	440b      	add	r3, r1
    1916:	3301      	adds	r3, #1
    1918:	781b      	ldrb	r3, [r3, #0]
    191a:	461a      	mov	r2, r3
    191c:	4b32      	ldr	r3, [pc, #200]	; (19e8 <Clock_Ip_DistributePll+0x174>)
    191e:	5c9b      	ldrb	r3, [r3, r2]
    1920:	9300      	str	r3, [sp, #0]
    1922:	4a32      	ldr	r2, [pc, #200]	; (19ec <Clock_Ip_DistributePll+0x178>)
    1924:	9b00      	ldr	r3, [sp, #0]
    1926:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    192a:	4a29      	ldr	r2, [pc, #164]	; (19d0 <Clock_Ip_DistributePll+0x15c>)
    192c:	6811      	ldr	r1, [r2, #0]
    192e:	9a01      	ldr	r2, [sp, #4]
    1930:	324e      	adds	r2, #78	; 0x4e
    1932:	00d2      	lsls	r2, r2, #3
    1934:	440a      	add	r2, r1
    1936:	3204      	adds	r2, #4
    1938:	4610      	mov	r0, r2
    193a:	4798      	blx	r3
    193c:	9b01      	ldr	r3, [sp, #4]
    193e:	3301      	adds	r3, #1
    1940:	9301      	str	r3, [sp, #4]
    1942:	4b23      	ldr	r3, [pc, #140]	; (19d0 <Clock_Ip_DistributePll+0x15c>)
    1944:	681b      	ldr	r3, [r3, #0]
    1946:	7c1b      	ldrb	r3, [r3, #16]
    1948:	461a      	mov	r2, r3
    194a:	9b01      	ldr	r3, [sp, #4]
    194c:	4293      	cmp	r3, r2
    194e:	d3d6      	bcc.n	18fe <Clock_Ip_DistributePll+0x8a>
    1950:	2300      	movs	r3, #0
    1952:	9301      	str	r3, [sp, #4]
    1954:	e02a      	b.n	19ac <Clock_Ip_DistributePll+0x138>
    1956:	4b1e      	ldr	r3, [pc, #120]	; (19d0 <Clock_Ip_DistributePll+0x15c>)
    1958:	6819      	ldr	r1, [r3, #0]
    195a:	9a01      	ldr	r2, [sp, #4]
    195c:	4613      	mov	r3, r2
    195e:	009b      	lsls	r3, r3, #2
    1960:	4413      	add	r3, r2
    1962:	009b      	lsls	r3, r3, #2
    1964:	440b      	add	r3, r1
    1966:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    196a:	681a      	ldr	r2, [r3, #0]
    196c:	491a      	ldr	r1, [pc, #104]	; (19d8 <Clock_Ip_DistributePll+0x164>)
    196e:	4613      	mov	r3, r2
    1970:	00db      	lsls	r3, r3, #3
    1972:	4413      	add	r3, r2
    1974:	440b      	add	r3, r1
    1976:	3301      	adds	r3, #1
    1978:	781b      	ldrb	r3, [r3, #0]
    197a:	461a      	mov	r2, r3
    197c:	4b1c      	ldr	r3, [pc, #112]	; (19f0 <Clock_Ip_DistributePll+0x17c>)
    197e:	5c9b      	ldrb	r3, [r3, r2]
    1980:	9300      	str	r3, [sp, #0]
    1982:	4a1c      	ldr	r2, [pc, #112]	; (19f4 <Clock_Ip_DistributePll+0x180>)
    1984:	9b00      	ldr	r3, [sp, #0]
    1986:	011b      	lsls	r3, r3, #4
    1988:	4413      	add	r3, r2
    198a:	330c      	adds	r3, #12
    198c:	6819      	ldr	r1, [r3, #0]
    198e:	4b10      	ldr	r3, [pc, #64]	; (19d0 <Clock_Ip_DistributePll+0x15c>)
    1990:	6818      	ldr	r0, [r3, #0]
    1992:	9a01      	ldr	r2, [sp, #4]
    1994:	4613      	mov	r3, r2
    1996:	009b      	lsls	r3, r3, #2
    1998:	4413      	add	r3, r2
    199a:	009b      	lsls	r3, r3, #2
    199c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    19a0:	4403      	add	r3, r0
    19a2:	4618      	mov	r0, r3
    19a4:	4788      	blx	r1
    19a6:	9b01      	ldr	r3, [sp, #4]
    19a8:	3301      	adds	r3, #1
    19aa:	9301      	str	r3, [sp, #4]
    19ac:	4b08      	ldr	r3, [pc, #32]	; (19d0 <Clock_Ip_DistributePll+0x15c>)
    19ae:	681b      	ldr	r3, [r3, #0]
    19b0:	7c9b      	ldrb	r3, [r3, #18]
    19b2:	461a      	mov	r2, r3
    19b4:	9b01      	ldr	r3, [sp, #4]
    19b6:	4293      	cmp	r3, r2
    19b8:	d3cd      	bcc.n	1956 <Clock_Ip_DistributePll+0xe2>
    19ba:	4b05      	ldr	r3, [pc, #20]	; (19d0 <Clock_Ip_DistributePll+0x15c>)
    19bc:	681b      	ldr	r3, [r3, #0]
    19be:	2104      	movs	r1, #4
    19c0:	4618      	mov	r0, r3
    19c2:	f002 fe0b 	bl	45dc <Clock_Ip_Command>
    19c6:	bf00      	nop
    19c8:	b003      	add	sp, #12
    19ca:	f85d fb04 	ldr.w	pc, [sp], #4
    19ce:	bf00      	nop
    19d0:	1fff8b44 	.word	0x1fff8b44
    19d4:	0000ba80 	.word	0x0000ba80
    19d8:	0000b634 	.word	0x0000b634
    19dc:	0000b604 	.word	0x0000b604
    19e0:	0000bc6c 	.word	0x0000bc6c
    19e4:	1fff8b4c 	.word	0x1fff8b4c
    19e8:	0000b5d4 	.word	0x0000b5d4
    19ec:	0000bbbc 	.word	0x0000bbbc
    19f0:	0000b624 	.word	0x0000b624
    19f4:	0000bc30 	.word	0x0000bc30

000019f8 <Clock_Ip_DisableClockMonitor>:
    19f8:	b500      	push	{lr}
    19fa:	b085      	sub	sp, #20
    19fc:	9001      	str	r0, [sp, #4]
    19fe:	490c      	ldr	r1, [pc, #48]	; (1a30 <Clock_Ip_DisableClockMonitor+0x38>)
    1a00:	9a01      	ldr	r2, [sp, #4]
    1a02:	4613      	mov	r3, r2
    1a04:	00db      	lsls	r3, r3, #3
    1a06:	4413      	add	r3, r2
    1a08:	440b      	add	r3, r1
    1a0a:	3301      	adds	r3, #1
    1a0c:	781b      	ldrb	r3, [r3, #0]
    1a0e:	461a      	mov	r2, r3
    1a10:	4b08      	ldr	r3, [pc, #32]	; (1a34 <Clock_Ip_DisableClockMonitor+0x3c>)
    1a12:	5c9b      	ldrb	r3, [r3, r2]
    1a14:	9303      	str	r3, [sp, #12]
    1a16:	4a08      	ldr	r2, [pc, #32]	; (1a38 <Clock_Ip_DisableClockMonitor+0x40>)
    1a18:	9b03      	ldr	r3, [sp, #12]
    1a1a:	011b      	lsls	r3, r3, #4
    1a1c:	4413      	add	r3, r2
    1a1e:	3308      	adds	r3, #8
    1a20:	681b      	ldr	r3, [r3, #0]
    1a22:	9801      	ldr	r0, [sp, #4]
    1a24:	4798      	blx	r3
    1a26:	bf00      	nop
    1a28:	b005      	add	sp, #20
    1a2a:	f85d fb04 	ldr.w	pc, [sp], #4
    1a2e:	bf00      	nop
    1a30:	0000b634 	.word	0x0000b634
    1a34:	0000b624 	.word	0x0000b624
    1a38:	0000bc30 	.word	0x0000bc30

00001a3c <Clock_Ip_InstallNotificationsCallback>:
    1a3c:	b082      	sub	sp, #8
    1a3e:	9001      	str	r0, [sp, #4]
    1a40:	4a02      	ldr	r2, [pc, #8]	; (1a4c <Clock_Ip_InstallNotificationsCallback+0x10>)
    1a42:	9b01      	ldr	r3, [sp, #4]
    1a44:	6013      	str	r3, [r2, #0]
    1a46:	bf00      	nop
    1a48:	b002      	add	sp, #8
    1a4a:	4770      	bx	lr
    1a4c:	1fff8b14 	.word	0x1fff8b14

00001a50 <Clock_Ip_DisableModuleClock>:
    1a50:	b500      	push	{lr}
    1a52:	b085      	sub	sp, #20
    1a54:	9001      	str	r0, [sp, #4]
    1a56:	490c      	ldr	r1, [pc, #48]	; (1a88 <Clock_Ip_DisableModuleClock+0x38>)
    1a58:	9a01      	ldr	r2, [sp, #4]
    1a5a:	4613      	mov	r3, r2
    1a5c:	00db      	lsls	r3, r3, #3
    1a5e:	4413      	add	r3, r2
    1a60:	440b      	add	r3, r1
    1a62:	3301      	adds	r3, #1
    1a64:	781b      	ldrb	r3, [r3, #0]
    1a66:	461a      	mov	r2, r3
    1a68:	4b08      	ldr	r3, [pc, #32]	; (1a8c <Clock_Ip_DisableModuleClock+0x3c>)
    1a6a:	5c9b      	ldrb	r3, [r3, r2]
    1a6c:	9303      	str	r3, [sp, #12]
    1a6e:	4a08      	ldr	r2, [pc, #32]	; (1a90 <Clock_Ip_DisableModuleClock+0x40>)
    1a70:	9b03      	ldr	r3, [sp, #12]
    1a72:	00db      	lsls	r3, r3, #3
    1a74:	4413      	add	r3, r2
    1a76:	685b      	ldr	r3, [r3, #4]
    1a78:	2101      	movs	r1, #1
    1a7a:	9801      	ldr	r0, [sp, #4]
    1a7c:	4798      	blx	r3
    1a7e:	bf00      	nop
    1a80:	b005      	add	sp, #20
    1a82:	f85d fb04 	ldr.w	pc, [sp], #4
    1a86:	bf00      	nop
    1a88:	0000b634 	.word	0x0000b634
    1a8c:	0000b5d4 	.word	0x0000b5d4
    1a90:	0000bbbc 	.word	0x0000bbbc

00001a94 <Clock_Ip_EnableModuleClock>:
    1a94:	b500      	push	{lr}
    1a96:	b085      	sub	sp, #20
    1a98:	9001      	str	r0, [sp, #4]
    1a9a:	490c      	ldr	r1, [pc, #48]	; (1acc <Clock_Ip_EnableModuleClock+0x38>)
    1a9c:	9a01      	ldr	r2, [sp, #4]
    1a9e:	4613      	mov	r3, r2
    1aa0:	00db      	lsls	r3, r3, #3
    1aa2:	4413      	add	r3, r2
    1aa4:	440b      	add	r3, r1
    1aa6:	3301      	adds	r3, #1
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	461a      	mov	r2, r3
    1aac:	4b08      	ldr	r3, [pc, #32]	; (1ad0 <Clock_Ip_EnableModuleClock+0x3c>)
    1aae:	5c9b      	ldrb	r3, [r3, r2]
    1ab0:	9303      	str	r3, [sp, #12]
    1ab2:	4a08      	ldr	r2, [pc, #32]	; (1ad4 <Clock_Ip_EnableModuleClock+0x40>)
    1ab4:	9b03      	ldr	r3, [sp, #12]
    1ab6:	00db      	lsls	r3, r3, #3
    1ab8:	4413      	add	r3, r2
    1aba:	685b      	ldr	r3, [r3, #4]
    1abc:	2100      	movs	r1, #0
    1abe:	9801      	ldr	r0, [sp, #4]
    1ac0:	4798      	blx	r3
    1ac2:	bf00      	nop
    1ac4:	b005      	add	sp, #20
    1ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    1aca:	bf00      	nop
    1acc:	0000b634 	.word	0x0000b634
    1ad0:	0000b5d4 	.word	0x0000b5d4
    1ad4:	0000bbbc 	.word	0x0000bbbc

00001ad8 <Clock_Ip_PowerModeChangeNotification>:
    1ad8:	b500      	push	{lr}
    1ada:	b083      	sub	sp, #12
    1adc:	9001      	str	r0, [sp, #4]
    1ade:	9100      	str	r1, [sp, #0]
    1ae0:	4b08      	ldr	r3, [pc, #32]	; (1b04 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    1ae2:	2200      	movs	r2, #0
    1ae4:	701a      	strb	r2, [r3, #0]
    1ae6:	4b08      	ldr	r3, [pc, #32]	; (1b08 <Clock_Ip_PowerModeChangeNotification+0x30>)
    1ae8:	681b      	ldr	r3, [r3, #0]
    1aea:	2102      	movs	r1, #2
    1aec:	4618      	mov	r0, r3
    1aee:	f002 fd75 	bl	45dc <Clock_Ip_Command>
    1af2:	9900      	ldr	r1, [sp, #0]
    1af4:	9801      	ldr	r0, [sp, #4]
    1af6:	f002 fc51 	bl	439c <Clock_Ip_ClockPowerModeChangeNotification>
    1afa:	bf00      	nop
    1afc:	b003      	add	sp, #12
    1afe:	f85d fb04 	ldr.w	pc, [sp], #4
    1b02:	bf00      	nop
    1b04:	1fff8b10 	.word	0x1fff8b10
    1b08:	1fff8b44 	.word	0x1fff8b44

00001b0c <Clock_Ip_SetWaitStates>:
    1b0c:	b082      	sub	sp, #8
    1b0e:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    1b12:	9301      	str	r3, [sp, #4]
    1b14:	4b06      	ldr	r3, [pc, #24]	; (1b30 <Clock_Ip_SetWaitStates+0x24>)
    1b16:	785b      	ldrb	r3, [r3, #1]
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d005      	beq.n	1b28 <Clock_Ip_SetWaitStates+0x1c>
    1b1c:	9b01      	ldr	r3, [sp, #4]
    1b1e:	3b01      	subs	r3, #1
    1b20:	9301      	str	r3, [sp, #4]
    1b22:	9b01      	ldr	r3, [sp, #4]
    1b24:	2b00      	cmp	r3, #0
    1b26:	d1f9      	bne.n	1b1c <Clock_Ip_SetWaitStates+0x10>
    1b28:	bf00      	nop
    1b2a:	b002      	add	sp, #8
    1b2c:	4770      	bx	lr
    1b2e:	bf00      	nop
    1b30:	1fff8b4c 	.word	0x1fff8b4c

00001b34 <Clock_Ip_ReportClockErrors>:
    1b34:	b500      	push	{lr}
    1b36:	b083      	sub	sp, #12
    1b38:	9001      	str	r0, [sp, #4]
    1b3a:	9100      	str	r1, [sp, #0]
    1b3c:	4b04      	ldr	r3, [pc, #16]	; (1b50 <Clock_Ip_ReportClockErrors+0x1c>)
    1b3e:	681b      	ldr	r3, [r3, #0]
    1b40:	9900      	ldr	r1, [sp, #0]
    1b42:	9801      	ldr	r0, [sp, #4]
    1b44:	4798      	blx	r3
    1b46:	bf00      	nop
    1b48:	b003      	add	sp, #12
    1b4a:	f85d fb04 	ldr.w	pc, [sp], #4
    1b4e:	bf00      	nop
    1b50:	1fff8b14 	.word	0x1fff8b14

00001b54 <Clock_Ip_StartTimeout>:
    1b54:	b500      	push	{lr}
    1b56:	b085      	sub	sp, #20
    1b58:	9003      	str	r0, [sp, #12]
    1b5a:	9102      	str	r1, [sp, #8]
    1b5c:	9201      	str	r2, [sp, #4]
    1b5e:	9300      	str	r3, [sp, #0]
    1b60:	2000      	movs	r0, #0
    1b62:	f7fe ffd0 	bl	b06 <OsIf_GetCounter>
    1b66:	4602      	mov	r2, r0
    1b68:	9b03      	ldr	r3, [sp, #12]
    1b6a:	601a      	str	r2, [r3, #0]
    1b6c:	9b02      	ldr	r3, [sp, #8]
    1b6e:	2200      	movs	r2, #0
    1b70:	601a      	str	r2, [r3, #0]
    1b72:	2100      	movs	r1, #0
    1b74:	9800      	ldr	r0, [sp, #0]
    1b76:	f7ff f812 	bl	b9e <OsIf_MicrosToTicks>
    1b7a:	4602      	mov	r2, r0
    1b7c:	9b01      	ldr	r3, [sp, #4]
    1b7e:	601a      	str	r2, [r3, #0]
    1b80:	bf00      	nop
    1b82:	b005      	add	sp, #20
    1b84:	f85d fb04 	ldr.w	pc, [sp], #4

00001b88 <Clock_Ip_TimeoutExpired>:
    1b88:	b500      	push	{lr}
    1b8a:	b087      	sub	sp, #28
    1b8c:	9003      	str	r0, [sp, #12]
    1b8e:	9102      	str	r1, [sp, #8]
    1b90:	9201      	str	r2, [sp, #4]
    1b92:	2300      	movs	r3, #0
    1b94:	f88d 3017 	strb.w	r3, [sp, #23]
    1b98:	2100      	movs	r1, #0
    1b9a:	9803      	ldr	r0, [sp, #12]
    1b9c:	f7fe ffcc 	bl	b38 <OsIf_GetElapsed>
    1ba0:	4602      	mov	r2, r0
    1ba2:	9b02      	ldr	r3, [sp, #8]
    1ba4:	681b      	ldr	r3, [r3, #0]
    1ba6:	441a      	add	r2, r3
    1ba8:	9b02      	ldr	r3, [sp, #8]
    1baa:	601a      	str	r2, [r3, #0]
    1bac:	9b02      	ldr	r3, [sp, #8]
    1bae:	681b      	ldr	r3, [r3, #0]
    1bb0:	9a01      	ldr	r2, [sp, #4]
    1bb2:	429a      	cmp	r2, r3
    1bb4:	d802      	bhi.n	1bbc <Clock_Ip_TimeoutExpired+0x34>
    1bb6:	2301      	movs	r3, #1
    1bb8:	f88d 3017 	strb.w	r3, [sp, #23]
    1bbc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1bc0:	4618      	mov	r0, r3
    1bc2:	b007      	add	sp, #28
    1bc4:	f85d fb04 	ldr.w	pc, [sp], #4

00001bc8 <Clock_Ip_Callback_DividerEmpty>:
    1bc8:	b082      	sub	sp, #8
    1bca:	9001      	str	r0, [sp, #4]
    1bcc:	bf00      	nop
    1bce:	b002      	add	sp, #8
    1bd0:	4770      	bx	lr

00001bd2 <Clock_Ip_SetScgAsyncDiv1>:
    1bd2:	b500      	push	{lr}
    1bd4:	b083      	sub	sp, #12
    1bd6:	9001      	str	r0, [sp, #4]
    1bd8:	9b01      	ldr	r3, [sp, #4]
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d002      	beq.n	1be4 <Clock_Ip_SetScgAsyncDiv1+0x12>
    1bde:	9801      	ldr	r0, [sp, #4]
    1be0:	f000 f8ad 	bl	1d3e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
    1be4:	bf00      	nop
    1be6:	b003      	add	sp, #12
    1be8:	f85d fb04 	ldr.w	pc, [sp], #4

00001bec <Clock_Ip_SetScgAsyncDiv2>:
    1bec:	b500      	push	{lr}
    1bee:	b083      	sub	sp, #12
    1bf0:	9001      	str	r0, [sp, #4]
    1bf2:	9b01      	ldr	r3, [sp, #4]
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d002      	beq.n	1bfe <Clock_Ip_SetScgAsyncDiv2+0x12>
    1bf8:	9801      	ldr	r0, [sp, #4]
    1bfa:	f000 f8cd 	bl	1d98 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
    1bfe:	bf00      	nop
    1c00:	b003      	add	sp, #12
    1c02:	f85d fb04 	ldr.w	pc, [sp], #4

00001c06 <Clock_Ip_SetScgRunDivcore>:
    1c06:	b500      	push	{lr}
    1c08:	b083      	sub	sp, #12
    1c0a:	9001      	str	r0, [sp, #4]
    1c0c:	9b01      	ldr	r3, [sp, #4]
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d002      	beq.n	1c18 <Clock_Ip_SetScgRunDivcore+0x12>
    1c12:	9801      	ldr	r0, [sp, #4]
    1c14:	f000 f8ee 	bl	1df4 <Clock_Ip_SetScgRunDivcore_TrustedCall>
    1c18:	bf00      	nop
    1c1a:	b003      	add	sp, #12
    1c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c20 <Clock_Ip_SetScgRunDivbus>:
    1c20:	b500      	push	{lr}
    1c22:	b083      	sub	sp, #12
    1c24:	9001      	str	r0, [sp, #4]
    1c26:	9b01      	ldr	r3, [sp, #4]
    1c28:	2b00      	cmp	r3, #0
    1c2a:	d002      	beq.n	1c32 <Clock_Ip_SetScgRunDivbus+0x12>
    1c2c:	9801      	ldr	r0, [sp, #4]
    1c2e:	f000 f8f9 	bl	1e24 <Clock_Ip_SetScgRunDivbus_TrustedCall>
    1c32:	bf00      	nop
    1c34:	b003      	add	sp, #12
    1c36:	f85d fb04 	ldr.w	pc, [sp], #4

00001c3a <Clock_Ip_SetScgRunDivslow>:
    1c3a:	b500      	push	{lr}
    1c3c:	b083      	sub	sp, #12
    1c3e:	9001      	str	r0, [sp, #4]
    1c40:	9b01      	ldr	r3, [sp, #4]
    1c42:	2b00      	cmp	r3, #0
    1c44:	d002      	beq.n	1c4c <Clock_Ip_SetScgRunDivslow+0x12>
    1c46:	9801      	ldr	r0, [sp, #4]
    1c48:	f000 f904 	bl	1e54 <Clock_Ip_SetScgRunDivslow_TrustedCall>
    1c4c:	bf00      	nop
    1c4e:	b003      	add	sp, #12
    1c50:	f85d fb04 	ldr.w	pc, [sp], #4

00001c54 <Clock_Ip_SetScgVlprDivcore>:
    1c54:	b500      	push	{lr}
    1c56:	b083      	sub	sp, #12
    1c58:	9001      	str	r0, [sp, #4]
    1c5a:	9b01      	ldr	r3, [sp, #4]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d002      	beq.n	1c66 <Clock_Ip_SetScgVlprDivcore+0x12>
    1c60:	9801      	ldr	r0, [sp, #4]
    1c62:	f000 f90f 	bl	1e84 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
    1c66:	bf00      	nop
    1c68:	b003      	add	sp, #12
    1c6a:	f85d fb04 	ldr.w	pc, [sp], #4

00001c6e <Clock_Ip_SetScgVlprDivbus>:
    1c6e:	b500      	push	{lr}
    1c70:	b083      	sub	sp, #12
    1c72:	9001      	str	r0, [sp, #4]
    1c74:	9b01      	ldr	r3, [sp, #4]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d002      	beq.n	1c80 <Clock_Ip_SetScgVlprDivbus+0x12>
    1c7a:	9801      	ldr	r0, [sp, #4]
    1c7c:	f000 f91a 	bl	1eb4 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
    1c80:	bf00      	nop
    1c82:	b003      	add	sp, #12
    1c84:	f85d fb04 	ldr.w	pc, [sp], #4

00001c88 <Clock_Ip_SetScgVlprDivslow>:
    1c88:	b500      	push	{lr}
    1c8a:	b083      	sub	sp, #12
    1c8c:	9001      	str	r0, [sp, #4]
    1c8e:	9b01      	ldr	r3, [sp, #4]
    1c90:	2b00      	cmp	r3, #0
    1c92:	d002      	beq.n	1c9a <Clock_Ip_SetScgVlprDivslow+0x12>
    1c94:	9801      	ldr	r0, [sp, #4]
    1c96:	f000 f925 	bl	1ee4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
    1c9a:	bf00      	nop
    1c9c:	b003      	add	sp, #12
    1c9e:	f85d fb04 	ldr.w	pc, [sp], #4

00001ca2 <Clock_Ip_SetScgHsrunDivcore>:
    1ca2:	b500      	push	{lr}
    1ca4:	b083      	sub	sp, #12
    1ca6:	9001      	str	r0, [sp, #4]
    1ca8:	9b01      	ldr	r3, [sp, #4]
    1caa:	2b00      	cmp	r3, #0
    1cac:	d002      	beq.n	1cb4 <Clock_Ip_SetScgHsrunDivcore+0x12>
    1cae:	9801      	ldr	r0, [sp, #4]
    1cb0:	f000 f930 	bl	1f14 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
    1cb4:	bf00      	nop
    1cb6:	b003      	add	sp, #12
    1cb8:	f85d fb04 	ldr.w	pc, [sp], #4

00001cbc <Clock_Ip_SetScgHsrunDivbus>:
    1cbc:	b500      	push	{lr}
    1cbe:	b083      	sub	sp, #12
    1cc0:	9001      	str	r0, [sp, #4]
    1cc2:	9b01      	ldr	r3, [sp, #4]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d002      	beq.n	1cce <Clock_Ip_SetScgHsrunDivbus+0x12>
    1cc8:	9801      	ldr	r0, [sp, #4]
    1cca:	f000 f93b 	bl	1f44 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
    1cce:	bf00      	nop
    1cd0:	b003      	add	sp, #12
    1cd2:	f85d fb04 	ldr.w	pc, [sp], #4

00001cd6 <Clock_Ip_SetScgHsrunDivslow>:
    1cd6:	b500      	push	{lr}
    1cd8:	b083      	sub	sp, #12
    1cda:	9001      	str	r0, [sp, #4]
    1cdc:	9b01      	ldr	r3, [sp, #4]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d002      	beq.n	1ce8 <Clock_Ip_SetScgHsrunDivslow+0x12>
    1ce2:	9801      	ldr	r0, [sp, #4]
    1ce4:	f000 f946 	bl	1f74 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
    1ce8:	bf00      	nop
    1cea:	b003      	add	sp, #12
    1cec:	f85d fb04 	ldr.w	pc, [sp], #4

00001cf0 <Clock_Ip_SetSimClkoutDiv>:
    1cf0:	b500      	push	{lr}
    1cf2:	b083      	sub	sp, #12
    1cf4:	9001      	str	r0, [sp, #4]
    1cf6:	9b01      	ldr	r3, [sp, #4]
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d002      	beq.n	1d02 <Clock_Ip_SetSimClkoutDiv+0x12>
    1cfc:	9801      	ldr	r0, [sp, #4]
    1cfe:	f000 f951 	bl	1fa4 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
    1d02:	bf00      	nop
    1d04:	b003      	add	sp, #12
    1d06:	f85d fb04 	ldr.w	pc, [sp], #4

00001d0a <Clock_Ip_SetPccPcdDivFrac>:
    1d0a:	b500      	push	{lr}
    1d0c:	b083      	sub	sp, #12
    1d0e:	9001      	str	r0, [sp, #4]
    1d10:	9b01      	ldr	r3, [sp, #4]
    1d12:	2b00      	cmp	r3, #0
    1d14:	d002      	beq.n	1d1c <Clock_Ip_SetPccPcdDivFrac+0x12>
    1d16:	9801      	ldr	r0, [sp, #4]
    1d18:	f000 f95e 	bl	1fd8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
    1d1c:	bf00      	nop
    1d1e:	b003      	add	sp, #12
    1d20:	f85d fb04 	ldr.w	pc, [sp], #4

00001d24 <Clock_Ip_SetSimTraceDivMul>:
    1d24:	b500      	push	{lr}
    1d26:	b083      	sub	sp, #12
    1d28:	9001      	str	r0, [sp, #4]
    1d2a:	9b01      	ldr	r3, [sp, #4]
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d002      	beq.n	1d36 <Clock_Ip_SetSimTraceDivMul+0x12>
    1d30:	9801      	ldr	r0, [sp, #4]
    1d32:	f000 f98b 	bl	204c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
    1d36:	bf00      	nop
    1d38:	b003      	add	sp, #12
    1d3a:	f85d fb04 	ldr.w	pc, [sp], #4

00001d3e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
    1d3e:	b086      	sub	sp, #24
    1d40:	9001      	str	r0, [sp, #4]
    1d42:	9b01      	ldr	r3, [sp, #4]
    1d44:	681a      	ldr	r2, [r3, #0]
    1d46:	4911      	ldr	r1, [pc, #68]	; (1d8c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    1d48:	4613      	mov	r3, r2
    1d4a:	00db      	lsls	r3, r3, #3
    1d4c:	4413      	add	r3, r2
    1d4e:	440b      	add	r3, r1
    1d50:	781b      	ldrb	r3, [r3, #0]
    1d52:	9305      	str	r3, [sp, #20]
    1d54:	9b01      	ldr	r3, [sp, #4]
    1d56:	685b      	ldr	r3, [r3, #4]
    1d58:	4a0d      	ldr	r2, [pc, #52]	; (1d90 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    1d5a:	5cd3      	ldrb	r3, [r2, r3]
    1d5c:	9304      	str	r3, [sp, #16]
    1d5e:	4a0d      	ldr	r2, [pc, #52]	; (1d94 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1d60:	9b05      	ldr	r3, [sp, #20]
    1d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d66:	681b      	ldr	r3, [r3, #0]
    1d68:	9303      	str	r3, [sp, #12]
    1d6a:	9b03      	ldr	r3, [sp, #12]
    1d6c:	f023 0307 	bic.w	r3, r3, #7
    1d70:	9303      	str	r3, [sp, #12]
    1d72:	9a03      	ldr	r2, [sp, #12]
    1d74:	9b04      	ldr	r3, [sp, #16]
    1d76:	4313      	orrs	r3, r2
    1d78:	9303      	str	r3, [sp, #12]
    1d7a:	4a06      	ldr	r2, [pc, #24]	; (1d94 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1d7c:	9b05      	ldr	r3, [sp, #20]
    1d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d82:	9a03      	ldr	r2, [sp, #12]
    1d84:	601a      	str	r2, [r3, #0]
    1d86:	bf00      	nop
    1d88:	b006      	add	sp, #24
    1d8a:	4770      	bx	lr
    1d8c:	0000b634 	.word	0x0000b634
    1d90:	0000ba2c 	.word	0x0000ba2c
    1d94:	0000ba70 	.word	0x0000ba70

00001d98 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
    1d98:	b086      	sub	sp, #24
    1d9a:	9001      	str	r0, [sp, #4]
    1d9c:	9b01      	ldr	r3, [sp, #4]
    1d9e:	681a      	ldr	r2, [r3, #0]
    1da0:	4911      	ldr	r1, [pc, #68]	; (1de8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    1da2:	4613      	mov	r3, r2
    1da4:	00db      	lsls	r3, r3, #3
    1da6:	4413      	add	r3, r2
    1da8:	440b      	add	r3, r1
    1daa:	781b      	ldrb	r3, [r3, #0]
    1dac:	9305      	str	r3, [sp, #20]
    1dae:	9b01      	ldr	r3, [sp, #4]
    1db0:	685b      	ldr	r3, [r3, #4]
    1db2:	4a0e      	ldr	r2, [pc, #56]	; (1dec <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    1db4:	5cd3      	ldrb	r3, [r2, r3]
    1db6:	9304      	str	r3, [sp, #16]
    1db8:	4a0d      	ldr	r2, [pc, #52]	; (1df0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1dba:	9b05      	ldr	r3, [sp, #20]
    1dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1dc0:	681b      	ldr	r3, [r3, #0]
    1dc2:	9303      	str	r3, [sp, #12]
    1dc4:	9b03      	ldr	r3, [sp, #12]
    1dc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1dca:	9303      	str	r3, [sp, #12]
    1dcc:	9b04      	ldr	r3, [sp, #16]
    1dce:	021b      	lsls	r3, r3, #8
    1dd0:	9a03      	ldr	r2, [sp, #12]
    1dd2:	4313      	orrs	r3, r2
    1dd4:	9303      	str	r3, [sp, #12]
    1dd6:	4a06      	ldr	r2, [pc, #24]	; (1df0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1dd8:	9b05      	ldr	r3, [sp, #20]
    1dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1dde:	9a03      	ldr	r2, [sp, #12]
    1de0:	601a      	str	r2, [r3, #0]
    1de2:	bf00      	nop
    1de4:	b006      	add	sp, #24
    1de6:	4770      	bx	lr
    1de8:	0000b634 	.word	0x0000b634
    1dec:	0000ba2c 	.word	0x0000ba2c
    1df0:	0000ba70 	.word	0x0000ba70

00001df4 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
    1df4:	b084      	sub	sp, #16
    1df6:	9001      	str	r0, [sp, #4]
    1df8:	4b09      	ldr	r3, [pc, #36]	; (1e20 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1dfa:	695b      	ldr	r3, [r3, #20]
    1dfc:	9303      	str	r3, [sp, #12]
    1dfe:	9b03      	ldr	r3, [sp, #12]
    1e00:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1e04:	9303      	str	r3, [sp, #12]
    1e06:	9b01      	ldr	r3, [sp, #4]
    1e08:	685b      	ldr	r3, [r3, #4]
    1e0a:	3b01      	subs	r3, #1
    1e0c:	041b      	lsls	r3, r3, #16
    1e0e:	9a03      	ldr	r2, [sp, #12]
    1e10:	4313      	orrs	r3, r2
    1e12:	9303      	str	r3, [sp, #12]
    1e14:	4a02      	ldr	r2, [pc, #8]	; (1e20 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1e16:	9b03      	ldr	r3, [sp, #12]
    1e18:	6153      	str	r3, [r2, #20]
    1e1a:	bf00      	nop
    1e1c:	b004      	add	sp, #16
    1e1e:	4770      	bx	lr
    1e20:	40064000 	.word	0x40064000

00001e24 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
    1e24:	b084      	sub	sp, #16
    1e26:	9001      	str	r0, [sp, #4]
    1e28:	4b09      	ldr	r3, [pc, #36]	; (1e50 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e2a:	695b      	ldr	r3, [r3, #20]
    1e2c:	9303      	str	r3, [sp, #12]
    1e2e:	9b03      	ldr	r3, [sp, #12]
    1e30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1e34:	9303      	str	r3, [sp, #12]
    1e36:	9b01      	ldr	r3, [sp, #4]
    1e38:	685b      	ldr	r3, [r3, #4]
    1e3a:	3b01      	subs	r3, #1
    1e3c:	011b      	lsls	r3, r3, #4
    1e3e:	9a03      	ldr	r2, [sp, #12]
    1e40:	4313      	orrs	r3, r2
    1e42:	9303      	str	r3, [sp, #12]
    1e44:	4a02      	ldr	r2, [pc, #8]	; (1e50 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e46:	9b03      	ldr	r3, [sp, #12]
    1e48:	6153      	str	r3, [r2, #20]
    1e4a:	bf00      	nop
    1e4c:	b004      	add	sp, #16
    1e4e:	4770      	bx	lr
    1e50:	40064000 	.word	0x40064000

00001e54 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
    1e54:	b084      	sub	sp, #16
    1e56:	9001      	str	r0, [sp, #4]
    1e58:	4b09      	ldr	r3, [pc, #36]	; (1e80 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1e5a:	695b      	ldr	r3, [r3, #20]
    1e5c:	9303      	str	r3, [sp, #12]
    1e5e:	9b03      	ldr	r3, [sp, #12]
    1e60:	f023 030f 	bic.w	r3, r3, #15
    1e64:	9303      	str	r3, [sp, #12]
    1e66:	9b01      	ldr	r3, [sp, #4]
    1e68:	685b      	ldr	r3, [r3, #4]
    1e6a:	3b01      	subs	r3, #1
    1e6c:	9a03      	ldr	r2, [sp, #12]
    1e6e:	4313      	orrs	r3, r2
    1e70:	9303      	str	r3, [sp, #12]
    1e72:	4a03      	ldr	r2, [pc, #12]	; (1e80 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1e74:	9b03      	ldr	r3, [sp, #12]
    1e76:	6153      	str	r3, [r2, #20]
    1e78:	bf00      	nop
    1e7a:	b004      	add	sp, #16
    1e7c:	4770      	bx	lr
    1e7e:	bf00      	nop
    1e80:	40064000 	.word	0x40064000

00001e84 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
    1e84:	b084      	sub	sp, #16
    1e86:	9001      	str	r0, [sp, #4]
    1e88:	4b09      	ldr	r3, [pc, #36]	; (1eb0 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1e8a:	699b      	ldr	r3, [r3, #24]
    1e8c:	9303      	str	r3, [sp, #12]
    1e8e:	9b03      	ldr	r3, [sp, #12]
    1e90:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1e94:	9303      	str	r3, [sp, #12]
    1e96:	9b01      	ldr	r3, [sp, #4]
    1e98:	685b      	ldr	r3, [r3, #4]
    1e9a:	3b01      	subs	r3, #1
    1e9c:	041b      	lsls	r3, r3, #16
    1e9e:	9a03      	ldr	r2, [sp, #12]
    1ea0:	4313      	orrs	r3, r2
    1ea2:	9303      	str	r3, [sp, #12]
    1ea4:	4a02      	ldr	r2, [pc, #8]	; (1eb0 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1ea6:	9b03      	ldr	r3, [sp, #12]
    1ea8:	6193      	str	r3, [r2, #24]
    1eaa:	bf00      	nop
    1eac:	b004      	add	sp, #16
    1eae:	4770      	bx	lr
    1eb0:	40064000 	.word	0x40064000

00001eb4 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
    1eb4:	b084      	sub	sp, #16
    1eb6:	9001      	str	r0, [sp, #4]
    1eb8:	4b09      	ldr	r3, [pc, #36]	; (1ee0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1eba:	699b      	ldr	r3, [r3, #24]
    1ebc:	9303      	str	r3, [sp, #12]
    1ebe:	9b03      	ldr	r3, [sp, #12]
    1ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1ec4:	9303      	str	r3, [sp, #12]
    1ec6:	9b01      	ldr	r3, [sp, #4]
    1ec8:	685b      	ldr	r3, [r3, #4]
    1eca:	3b01      	subs	r3, #1
    1ecc:	011b      	lsls	r3, r3, #4
    1ece:	9a03      	ldr	r2, [sp, #12]
    1ed0:	4313      	orrs	r3, r2
    1ed2:	9303      	str	r3, [sp, #12]
    1ed4:	4a02      	ldr	r2, [pc, #8]	; (1ee0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1ed6:	9b03      	ldr	r3, [sp, #12]
    1ed8:	6193      	str	r3, [r2, #24]
    1eda:	bf00      	nop
    1edc:	b004      	add	sp, #16
    1ede:	4770      	bx	lr
    1ee0:	40064000 	.word	0x40064000

00001ee4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
    1ee4:	b084      	sub	sp, #16
    1ee6:	9001      	str	r0, [sp, #4]
    1ee8:	4b09      	ldr	r3, [pc, #36]	; (1f10 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1eea:	699b      	ldr	r3, [r3, #24]
    1eec:	9303      	str	r3, [sp, #12]
    1eee:	9b03      	ldr	r3, [sp, #12]
    1ef0:	f023 030f 	bic.w	r3, r3, #15
    1ef4:	9303      	str	r3, [sp, #12]
    1ef6:	9b01      	ldr	r3, [sp, #4]
    1ef8:	685b      	ldr	r3, [r3, #4]
    1efa:	3b01      	subs	r3, #1
    1efc:	9a03      	ldr	r2, [sp, #12]
    1efe:	4313      	orrs	r3, r2
    1f00:	9303      	str	r3, [sp, #12]
    1f02:	4a03      	ldr	r2, [pc, #12]	; (1f10 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1f04:	9b03      	ldr	r3, [sp, #12]
    1f06:	6193      	str	r3, [r2, #24]
    1f08:	bf00      	nop
    1f0a:	b004      	add	sp, #16
    1f0c:	4770      	bx	lr
    1f0e:	bf00      	nop
    1f10:	40064000 	.word	0x40064000

00001f14 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
    1f14:	b084      	sub	sp, #16
    1f16:	9001      	str	r0, [sp, #4]
    1f18:	4b09      	ldr	r3, [pc, #36]	; (1f40 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1f1a:	69db      	ldr	r3, [r3, #28]
    1f1c:	9303      	str	r3, [sp, #12]
    1f1e:	9b03      	ldr	r3, [sp, #12]
    1f20:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1f24:	9303      	str	r3, [sp, #12]
    1f26:	9b01      	ldr	r3, [sp, #4]
    1f28:	685b      	ldr	r3, [r3, #4]
    1f2a:	3b01      	subs	r3, #1
    1f2c:	041b      	lsls	r3, r3, #16
    1f2e:	9a03      	ldr	r2, [sp, #12]
    1f30:	4313      	orrs	r3, r2
    1f32:	9303      	str	r3, [sp, #12]
    1f34:	4a02      	ldr	r2, [pc, #8]	; (1f40 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1f36:	9b03      	ldr	r3, [sp, #12]
    1f38:	61d3      	str	r3, [r2, #28]
    1f3a:	bf00      	nop
    1f3c:	b004      	add	sp, #16
    1f3e:	4770      	bx	lr
    1f40:	40064000 	.word	0x40064000

00001f44 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
    1f44:	b084      	sub	sp, #16
    1f46:	9001      	str	r0, [sp, #4]
    1f48:	4b09      	ldr	r3, [pc, #36]	; (1f70 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1f4a:	69db      	ldr	r3, [r3, #28]
    1f4c:	9303      	str	r3, [sp, #12]
    1f4e:	9b03      	ldr	r3, [sp, #12]
    1f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1f54:	9303      	str	r3, [sp, #12]
    1f56:	9b01      	ldr	r3, [sp, #4]
    1f58:	685b      	ldr	r3, [r3, #4]
    1f5a:	3b01      	subs	r3, #1
    1f5c:	011b      	lsls	r3, r3, #4
    1f5e:	9a03      	ldr	r2, [sp, #12]
    1f60:	4313      	orrs	r3, r2
    1f62:	9303      	str	r3, [sp, #12]
    1f64:	4a02      	ldr	r2, [pc, #8]	; (1f70 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1f66:	9b03      	ldr	r3, [sp, #12]
    1f68:	61d3      	str	r3, [r2, #28]
    1f6a:	bf00      	nop
    1f6c:	b004      	add	sp, #16
    1f6e:	4770      	bx	lr
    1f70:	40064000 	.word	0x40064000

00001f74 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
    1f74:	b084      	sub	sp, #16
    1f76:	9001      	str	r0, [sp, #4]
    1f78:	4b09      	ldr	r3, [pc, #36]	; (1fa0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1f7a:	69db      	ldr	r3, [r3, #28]
    1f7c:	9303      	str	r3, [sp, #12]
    1f7e:	9b03      	ldr	r3, [sp, #12]
    1f80:	f023 030f 	bic.w	r3, r3, #15
    1f84:	9303      	str	r3, [sp, #12]
    1f86:	9b01      	ldr	r3, [sp, #4]
    1f88:	685b      	ldr	r3, [r3, #4]
    1f8a:	3b01      	subs	r3, #1
    1f8c:	9a03      	ldr	r2, [sp, #12]
    1f8e:	4313      	orrs	r3, r2
    1f90:	9303      	str	r3, [sp, #12]
    1f92:	4a03      	ldr	r2, [pc, #12]	; (1fa0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1f94:	9b03      	ldr	r3, [sp, #12]
    1f96:	61d3      	str	r3, [r2, #28]
    1f98:	bf00      	nop
    1f9a:	b004      	add	sp, #16
    1f9c:	4770      	bx	lr
    1f9e:	bf00      	nop
    1fa0:	40064000 	.word	0x40064000

00001fa4 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
    1fa4:	b084      	sub	sp, #16
    1fa6:	9001      	str	r0, [sp, #4]
    1fa8:	4b0a      	ldr	r3, [pc, #40]	; (1fd4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    1faa:	685b      	ldr	r3, [r3, #4]
    1fac:	9303      	str	r3, [sp, #12]
    1fae:	9b03      	ldr	r3, [sp, #12]
    1fb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1fb4:	9303      	str	r3, [sp, #12]
    1fb6:	9b01      	ldr	r3, [sp, #4]
    1fb8:	685b      	ldr	r3, [r3, #4]
    1fba:	3b01      	subs	r3, #1
    1fbc:	021b      	lsls	r3, r3, #8
    1fbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    1fc2:	9a03      	ldr	r2, [sp, #12]
    1fc4:	4313      	orrs	r3, r2
    1fc6:	9303      	str	r3, [sp, #12]
    1fc8:	4a02      	ldr	r2, [pc, #8]	; (1fd4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    1fca:	9b03      	ldr	r3, [sp, #12]
    1fcc:	6053      	str	r3, [r2, #4]
    1fce:	bf00      	nop
    1fd0:	b004      	add	sp, #16
    1fd2:	4770      	bx	lr
    1fd4:	40048000 	.word	0x40048000

00001fd8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
    1fd8:	b084      	sub	sp, #16
    1fda:	9001      	str	r0, [sp, #4]
    1fdc:	4919      	ldr	r1, [pc, #100]	; (2044 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    1fde:	9b01      	ldr	r3, [sp, #4]
    1fe0:	681a      	ldr	r2, [r3, #0]
    1fe2:	4819      	ldr	r0, [pc, #100]	; (2048 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    1fe4:	4613      	mov	r3, r2
    1fe6:	00db      	lsls	r3, r3, #3
    1fe8:	4413      	add	r3, r2
    1fea:	4403      	add	r3, r0
    1fec:	3305      	adds	r3, #5
    1fee:	781b      	ldrb	r3, [r3, #0]
    1ff0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    1ff4:	9303      	str	r3, [sp, #12]
    1ff6:	9b03      	ldr	r3, [sp, #12]
    1ff8:	f023 030f 	bic.w	r3, r3, #15
    1ffc:	9303      	str	r3, [sp, #12]
    1ffe:	9b01      	ldr	r3, [sp, #4]
    2000:	685b      	ldr	r3, [r3, #4]
    2002:	3b01      	subs	r3, #1
    2004:	f003 0307 	and.w	r3, r3, #7
    2008:	9a03      	ldr	r2, [sp, #12]
    200a:	4313      	orrs	r3, r2
    200c:	9303      	str	r3, [sp, #12]
    200e:	9b01      	ldr	r3, [sp, #4]
    2010:	7a1b      	ldrb	r3, [r3, #8]
    2012:	3b01      	subs	r3, #1
    2014:	00db      	lsls	r3, r3, #3
    2016:	f003 0308 	and.w	r3, r3, #8
    201a:	9a03      	ldr	r2, [sp, #12]
    201c:	4313      	orrs	r3, r2
    201e:	9303      	str	r3, [sp, #12]
    2020:	4908      	ldr	r1, [pc, #32]	; (2044 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2022:	9b01      	ldr	r3, [sp, #4]
    2024:	681a      	ldr	r2, [r3, #0]
    2026:	4808      	ldr	r0, [pc, #32]	; (2048 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2028:	4613      	mov	r3, r2
    202a:	00db      	lsls	r3, r3, #3
    202c:	4413      	add	r3, r2
    202e:	4403      	add	r3, r0
    2030:	3305      	adds	r3, #5
    2032:	781b      	ldrb	r3, [r3, #0]
    2034:	461a      	mov	r2, r3
    2036:	9b03      	ldr	r3, [sp, #12]
    2038:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    203c:	bf00      	nop
    203e:	b004      	add	sp, #16
    2040:	4770      	bx	lr
    2042:	bf00      	nop
    2044:	40065000 	.word	0x40065000
    2048:	0000b634 	.word	0x0000b634

0000204c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
    204c:	b084      	sub	sp, #16
    204e:	9001      	str	r0, [sp, #4]
    2050:	4b10      	ldr	r3, [pc, #64]	; (2094 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2054:	4a0f      	ldr	r2, [pc, #60]	; (2094 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    205a:	6693      	str	r3, [r2, #104]	; 0x68
    205c:	4b0d      	ldr	r3, [pc, #52]	; (2094 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    205e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2060:	9303      	str	r3, [sp, #12]
    2062:	9b03      	ldr	r3, [sp, #12]
    2064:	f023 030f 	bic.w	r3, r3, #15
    2068:	9303      	str	r3, [sp, #12]
    206a:	9b01      	ldr	r3, [sp, #4]
    206c:	685b      	ldr	r3, [r3, #4]
    206e:	3b01      	subs	r3, #1
    2070:	005b      	lsls	r3, r3, #1
    2072:	f003 020e 	and.w	r2, r3, #14
    2076:	9b01      	ldr	r3, [sp, #4]
    2078:	7a1b      	ldrb	r3, [r3, #8]
    207a:	3b01      	subs	r3, #1
    207c:	f003 0301 	and.w	r3, r3, #1
    2080:	4313      	orrs	r3, r2
    2082:	9a03      	ldr	r2, [sp, #12]
    2084:	4313      	orrs	r3, r2
    2086:	9303      	str	r3, [sp, #12]
    2088:	4a02      	ldr	r2, [pc, #8]	; (2094 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    208a:	9b03      	ldr	r3, [sp, #12]
    208c:	6693      	str	r3, [r2, #104]	; 0x68
    208e:	bf00      	nop
    2090:	b004      	add	sp, #16
    2092:	4770      	bx	lr
    2094:	40048000 	.word	0x40048000

00002098 <Clock_Ip_Callback_DividerTriggerEmpty>:
    2098:	b082      	sub	sp, #8
    209a:	9001      	str	r0, [sp, #4]
    209c:	bf00      	nop
    209e:	b002      	add	sp, #8
    20a0:	4770      	bx	lr
	...

000020a4 <Clock_Ip_ExternalOscillatorEmpty>:
    20a4:	b082      	sub	sp, #8
    20a6:	9001      	str	r0, [sp, #4]
    20a8:	bf00      	nop
    20aa:	b002      	add	sp, #8
    20ac:	4770      	bx	lr

000020ae <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
    20ae:	b082      	sub	sp, #8
    20b0:	9001      	str	r0, [sp, #4]
    20b2:	bf00      	nop
    20b4:	b002      	add	sp, #8
    20b6:	4770      	bx	lr

000020b8 <Clock_Ip_ResetSOSC>:
    20b8:	b500      	push	{lr}
    20ba:	b083      	sub	sp, #12
    20bc:	9001      	str	r0, [sp, #4]
    20be:	9b01      	ldr	r3, [sp, #4]
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <Clock_Ip_ResetSOSC+0x12>
    20c4:	9801      	ldr	r0, [sp, #4]
    20c6:	f000 f86a 	bl	219e <Clock_Ip_ResetSOSC_TrustedCall>
    20ca:	bf00      	nop
    20cc:	b003      	add	sp, #12
    20ce:	f85d fb04 	ldr.w	pc, [sp], #4

000020d2 <Clock_Ip_SetSOSC>:
    20d2:	b500      	push	{lr}
    20d4:	b083      	sub	sp, #12
    20d6:	9001      	str	r0, [sp, #4]
    20d8:	9b01      	ldr	r3, [sp, #4]
    20da:	2b00      	cmp	r3, #0
    20dc:	d002      	beq.n	20e4 <Clock_Ip_SetSOSC+0x12>
    20de:	9801      	ldr	r0, [sp, #4]
    20e0:	f000 f884 	bl	21ec <Clock_Ip_SetSOSC_TrustedCall>
    20e4:	bf00      	nop
    20e6:	b003      	add	sp, #12
    20e8:	f85d fb04 	ldr.w	pc, [sp], #4

000020ec <Clock_Ip_CompleteSOSC>:
    20ec:	b500      	push	{lr}
    20ee:	b089      	sub	sp, #36	; 0x24
    20f0:	9001      	str	r0, [sp, #4]
    20f2:	2300      	movs	r3, #0
    20f4:	f88d 301f 	strb.w	r3, [sp, #31]
    20f8:	9b01      	ldr	r3, [sp, #4]
    20fa:	2b00      	cmp	r3, #0
    20fc:	d031      	beq.n	2162 <Clock_Ip_CompleteSOSC+0x76>
    20fe:	4b1b      	ldr	r3, [pc, #108]	; (216c <Clock_Ip_CompleteSOSC+0x80>)
    2100:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2104:	f003 0301 	and.w	r3, r3, #1
    2108:	2b00      	cmp	r3, #0
    210a:	d02a      	beq.n	2162 <Clock_Ip_CompleteSOSC+0x76>
    210c:	aa03      	add	r2, sp, #12
    210e:	a904      	add	r1, sp, #16
    2110:	a805      	add	r0, sp, #20
    2112:	f24c 3350 	movw	r3, #50000	; 0xc350
    2116:	f7ff fd1d 	bl	1b54 <Clock_Ip_StartTimeout>
    211a:	4b14      	ldr	r3, [pc, #80]	; (216c <Clock_Ip_CompleteSOSC+0x80>)
    211c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2120:	0e1b      	lsrs	r3, r3, #24
    2122:	f003 0301 	and.w	r3, r3, #1
    2126:	9306      	str	r3, [sp, #24]
    2128:	9a03      	ldr	r2, [sp, #12]
    212a:	a904      	add	r1, sp, #16
    212c:	ab05      	add	r3, sp, #20
    212e:	4618      	mov	r0, r3
    2130:	f7ff fd2a 	bl	1b88 <Clock_Ip_TimeoutExpired>
    2134:	4603      	mov	r3, r0
    2136:	f88d 301f 	strb.w	r3, [sp, #31]
    213a:	9b06      	ldr	r3, [sp, #24]
    213c:	2b00      	cmp	r3, #0
    213e:	d106      	bne.n	214e <Clock_Ip_CompleteSOSC+0x62>
    2140:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2144:	f083 0301 	eor.w	r3, r3, #1
    2148:	b2db      	uxtb	r3, r3
    214a:	2b00      	cmp	r3, #0
    214c:	d1e5      	bne.n	211a <Clock_Ip_CompleteSOSC+0x2e>
    214e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2152:	2b00      	cmp	r3, #0
    2154:	d005      	beq.n	2162 <Clock_Ip_CompleteSOSC+0x76>
    2156:	9b01      	ldr	r3, [sp, #4]
    2158:	681b      	ldr	r3, [r3, #0]
    215a:	4619      	mov	r1, r3
    215c:	2001      	movs	r0, #1
    215e:	f7ff fce9 	bl	1b34 <Clock_Ip_ReportClockErrors>
    2162:	bf00      	nop
    2164:	b009      	add	sp, #36	; 0x24
    2166:	f85d fb04 	ldr.w	pc, [sp], #4
    216a:	bf00      	nop
    216c:	40064000 	.word	0x40064000

00002170 <Clock_Ip_DisableSOSC>:
    2170:	b500      	push	{lr}
    2172:	b083      	sub	sp, #12
    2174:	9001      	str	r0, [sp, #4]
    2176:	9801      	ldr	r0, [sp, #4]
    2178:	f000 f8c0 	bl	22fc <Clock_Ip_DisableSOSC_TrustedCall>
    217c:	bf00      	nop
    217e:	b003      	add	sp, #12
    2180:	f85d fb04 	ldr.w	pc, [sp], #4

00002184 <Clock_Ip_EnableSOSC>:
    2184:	b500      	push	{lr}
    2186:	b083      	sub	sp, #12
    2188:	9001      	str	r0, [sp, #4]
    218a:	9b01      	ldr	r3, [sp, #4]
    218c:	2b00      	cmp	r3, #0
    218e:	d002      	beq.n	2196 <Clock_Ip_EnableSOSC+0x12>
    2190:	9801      	ldr	r0, [sp, #4]
    2192:	f000 f8c3 	bl	231c <Clock_Ip_EnableSOSC_TrustedCall>
    2196:	bf00      	nop
    2198:	b003      	add	sp, #12
    219a:	f85d fb04 	ldr.w	pc, [sp], #4

0000219e <Clock_Ip_ResetSOSC_TrustedCall>:
    219e:	b082      	sub	sp, #8
    21a0:	9001      	str	r0, [sp, #4]
    21a2:	4b11      	ldr	r3, [pc, #68]	; (21e8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21a8:	4a0f      	ldr	r2, [pc, #60]	; (21e8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    21ae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    21b2:	4b0d      	ldr	r3, [pc, #52]	; (21e8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21b8:	4a0b      	ldr	r2, [pc, #44]	; (21e8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    21be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    21c2:	4b09      	ldr	r3, [pc, #36]	; (21e8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21c8:	4a07      	ldr	r2, [pc, #28]	; (21e8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    21ce:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    21d2:	4b05      	ldr	r3, [pc, #20]	; (21e8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21d8:	4a03      	ldr	r2, [pc, #12]	; (21e8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21da:	f023 0301 	bic.w	r3, r3, #1
    21de:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    21e2:	bf00      	nop
    21e4:	b002      	add	sp, #8
    21e6:	4770      	bx	lr
    21e8:	40064000 	.word	0x40064000

000021ec <Clock_Ip_SetSOSC_TrustedCall>:
    21ec:	b082      	sub	sp, #8
    21ee:	9001      	str	r0, [sp, #4]
    21f0:	9b01      	ldr	r3, [sp, #4]
    21f2:	891b      	ldrh	r3, [r3, #8]
    21f4:	2b01      	cmp	r3, #1
    21f6:	d174      	bne.n	22e2 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
    21f8:	9b01      	ldr	r3, [sp, #4]
    21fa:	7bdb      	ldrb	r3, [r3, #15]
    21fc:	2b00      	cmp	r3, #0
    21fe:	d002      	beq.n	2206 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    2200:	2b01      	cmp	r3, #1
    2202:	d009      	beq.n	2218 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
    2204:	e011      	b.n	222a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
    2206:	4b39      	ldr	r3, [pc, #228]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2208:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    220c:	4a37      	ldr	r2, [pc, #220]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    220e:	f023 0308 	bic.w	r3, r3, #8
    2212:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2216:	e008      	b.n	222a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
    2218:	4b34      	ldr	r3, [pc, #208]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    221a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    221e:	4a33      	ldr	r2, [pc, #204]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2220:	f043 0308 	orr.w	r3, r3, #8
    2224:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2228:	bf00      	nop
    222a:	4b30      	ldr	r3, [pc, #192]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    222c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2230:	4a2e      	ldr	r2, [pc, #184]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2232:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2236:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    223a:	9b01      	ldr	r3, [sp, #4]
    223c:	685b      	ldr	r3, [r3, #4]
    223e:	4a2c      	ldr	r2, [pc, #176]	; (22f0 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2240:	4293      	cmp	r3, r2
    2242:	d90d      	bls.n	2260 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2244:	9b01      	ldr	r3, [sp, #4]
    2246:	685b      	ldr	r3, [r3, #4]
    2248:	4a2a      	ldr	r2, [pc, #168]	; (22f4 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    224a:	4293      	cmp	r3, r2
    224c:	d208      	bcs.n	2260 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    224e:	4b27      	ldr	r3, [pc, #156]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2250:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2254:	4a25      	ldr	r2, [pc, #148]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2256:	f043 0320 	orr.w	r3, r3, #32
    225a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    225e:	e007      	b.n	2270 <Clock_Ip_SetSOSC_TrustedCall+0x84>
    2260:	4b22      	ldr	r3, [pc, #136]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2262:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2266:	4a21      	ldr	r2, [pc, #132]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2268:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    226c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2270:	9b01      	ldr	r3, [sp, #4]
    2272:	7b1b      	ldrb	r3, [r3, #12]
    2274:	2b00      	cmp	r3, #0
    2276:	d108      	bne.n	228a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
    2278:	4b1c      	ldr	r3, [pc, #112]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    227a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    227e:	4a1b      	ldr	r2, [pc, #108]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2280:	f043 0304 	orr.w	r3, r3, #4
    2284:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2288:	e007      	b.n	229a <Clock_Ip_SetSOSC_TrustedCall+0xae>
    228a:	4b18      	ldr	r3, [pc, #96]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    228c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2290:	4a16      	ldr	r2, [pc, #88]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2292:	f023 0304 	bic.w	r3, r3, #4
    2296:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    229a:	9b01      	ldr	r3, [sp, #4]
    229c:	7c1b      	ldrb	r3, [r3, #16]
    229e:	2b02      	cmp	r3, #2
    22a0:	d011      	beq.n	22c6 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    22a2:	2b02      	cmp	r3, #2
    22a4:	dc14      	bgt.n	22d0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    22a6:	2b00      	cmp	r3, #0
    22a8:	d002      	beq.n	22b0 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    22aa:	2b01      	cmp	r3, #1
    22ac:	d005      	beq.n	22ba <Clock_Ip_SetSOSC_TrustedCall+0xce>
    22ae:	e00f      	b.n	22d0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    22b0:	4b0e      	ldr	r3, [pc, #56]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22b2:	2201      	movs	r2, #1
    22b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    22b8:	e014      	b.n	22e4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
    22ba:	4b0c      	ldr	r3, [pc, #48]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22bc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    22c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    22c4:	e00e      	b.n	22e4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
    22c6:	4b09      	ldr	r3, [pc, #36]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22c8:	4a0b      	ldr	r2, [pc, #44]	; (22f8 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    22ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    22ce:	e009      	b.n	22e4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
    22d0:	4b06      	ldr	r3, [pc, #24]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    22d6:	4a05      	ldr	r2, [pc, #20]	; (22ec <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22d8:	f043 0301 	orr.w	r3, r3, #1
    22dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    22e0:	e000      	b.n	22e4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
    22e2:	bf00      	nop
    22e4:	bf00      	nop
    22e6:	b002      	add	sp, #8
    22e8:	4770      	bx	lr
    22ea:	bf00      	nop
    22ec:	40064000 	.word	0x40064000
    22f0:	003d08ff 	.word	0x003d08ff
    22f4:	007a1200 	.word	0x007a1200
    22f8:	00030001 	.word	0x00030001

000022fc <Clock_Ip_DisableSOSC_TrustedCall>:
    22fc:	b082      	sub	sp, #8
    22fe:	9001      	str	r0, [sp, #4]
    2300:	4b05      	ldr	r3, [pc, #20]	; (2318 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2302:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2306:	4a04      	ldr	r2, [pc, #16]	; (2318 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2308:	f023 0301 	bic.w	r3, r3, #1
    230c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    2310:	bf00      	nop
    2312:	b002      	add	sp, #8
    2314:	4770      	bx	lr
    2316:	bf00      	nop
    2318:	40064000 	.word	0x40064000

0000231c <Clock_Ip_EnableSOSC_TrustedCall>:
    231c:	b082      	sub	sp, #8
    231e:	9001      	str	r0, [sp, #4]
    2320:	9b01      	ldr	r3, [sp, #4]
    2322:	891b      	ldrh	r3, [r3, #8]
    2324:	2b01      	cmp	r3, #1
    2326:	d107      	bne.n	2338 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    2328:	4b05      	ldr	r3, [pc, #20]	; (2340 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    232a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    232e:	4a04      	ldr	r2, [pc, #16]	; (2340 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2330:	f043 0301 	orr.w	r3, r3, #1
    2334:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    2338:	bf00      	nop
    233a:	b002      	add	sp, #8
    233c:	4770      	bx	lr
    233e:	bf00      	nop
    2340:	40064000 	.word	0x40064000

00002344 <Clock_Ip_CallbackFracDivEmpty>:
    2344:	b082      	sub	sp, #8
    2346:	9001      	str	r0, [sp, #4]
    2348:	bf00      	nop
    234a:	b002      	add	sp, #8
    234c:	4770      	bx	lr

0000234e <Clock_Ip_CallbackFracDivEmptyComplete>:
    234e:	b082      	sub	sp, #8
    2350:	9001      	str	r0, [sp, #4]
    2352:	2300      	movs	r3, #0
    2354:	4618      	mov	r0, r3
    2356:	b002      	add	sp, #8
    2358:	4770      	bx	lr

0000235a <Clock_Ip_SetExternalSignalFrequency>:
    235a:	b082      	sub	sp, #8
    235c:	9001      	str	r0, [sp, #4]
    235e:	9100      	str	r1, [sp, #0]
    2360:	bf00      	nop
    2362:	b002      	add	sp, #8
    2364:	4770      	bx	lr
	...

00002368 <Clock_Ip_ClockSetGateEmpty>:
    2368:	b082      	sub	sp, #8
    236a:	9001      	str	r0, [sp, #4]
    236c:	bf00      	nop
    236e:	b002      	add	sp, #8
    2370:	4770      	bx	lr

00002372 <Clock_Ip_ClockUpdateGateEmpty>:
    2372:	b082      	sub	sp, #8
    2374:	9001      	str	r0, [sp, #4]
    2376:	460b      	mov	r3, r1
    2378:	f88d 3003 	strb.w	r3, [sp, #3]
    237c:	bf00      	nop
    237e:	b002      	add	sp, #8
    2380:	4770      	bx	lr

00002382 <Clock_Ip_ClockSetSimLPO1KEnable>:
    2382:	b500      	push	{lr}
    2384:	b083      	sub	sp, #12
    2386:	9001      	str	r0, [sp, #4]
    2388:	9b01      	ldr	r3, [sp, #4]
    238a:	2b00      	cmp	r3, #0
    238c:	d002      	beq.n	2394 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    238e:	9801      	ldr	r0, [sp, #4]
    2390:	f000 f8e7 	bl	2562 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
    2394:	bf00      	nop
    2396:	b003      	add	sp, #12
    2398:	f85d fb04 	ldr.w	pc, [sp], #4

0000239c <Clock_Ip_ClockUpdateSimLPO1KEnable>:
    239c:	b500      	push	{lr}
    239e:	b085      	sub	sp, #20
    23a0:	9001      	str	r0, [sp, #4]
    23a2:	460b      	mov	r3, r1
    23a4:	f88d 3003 	strb.w	r3, [sp, #3]
    23a8:	9b01      	ldr	r3, [sp, #4]
    23aa:	9302      	str	r3, [sp, #8]
    23ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    23b0:	2b00      	cmp	r3, #0
    23b2:	d003      	beq.n	23bc <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    23b4:	2300      	movs	r3, #0
    23b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    23ba:	e002      	b.n	23c2 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    23bc:	2301      	movs	r3, #1
    23be:	f8ad 300c 	strh.w	r3, [sp, #12]
    23c2:	ab02      	add	r3, sp, #8
    23c4:	4618      	mov	r0, r3
    23c6:	f7ff ffdc 	bl	2382 <Clock_Ip_ClockSetSimLPO1KEnable>
    23ca:	bf00      	nop
    23cc:	b005      	add	sp, #20
    23ce:	f85d fb04 	ldr.w	pc, [sp], #4

000023d2 <Clock_Ip_ClockSetSimLPO32KEnable>:
    23d2:	b500      	push	{lr}
    23d4:	b083      	sub	sp, #12
    23d6:	9001      	str	r0, [sp, #4]
    23d8:	9b01      	ldr	r3, [sp, #4]
    23da:	2b00      	cmp	r3, #0
    23dc:	d002      	beq.n	23e4 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    23de:	9801      	ldr	r0, [sp, #4]
    23e0:	f000 f8d6 	bl	2590 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
    23e4:	bf00      	nop
    23e6:	b003      	add	sp, #12
    23e8:	f85d fb04 	ldr.w	pc, [sp], #4

000023ec <Clock_Ip_ClockUpdateSimLPO32KEnable>:
    23ec:	b500      	push	{lr}
    23ee:	b085      	sub	sp, #20
    23f0:	9001      	str	r0, [sp, #4]
    23f2:	460b      	mov	r3, r1
    23f4:	f88d 3003 	strb.w	r3, [sp, #3]
    23f8:	9b01      	ldr	r3, [sp, #4]
    23fa:	9302      	str	r3, [sp, #8]
    23fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2400:	2b00      	cmp	r3, #0
    2402:	d003      	beq.n	240c <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    2404:	2300      	movs	r3, #0
    2406:	f8ad 300c 	strh.w	r3, [sp, #12]
    240a:	e002      	b.n	2412 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    240c:	2301      	movs	r3, #1
    240e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2412:	ab02      	add	r3, sp, #8
    2414:	4618      	mov	r0, r3
    2416:	f7ff ffdc 	bl	23d2 <Clock_Ip_ClockSetSimLPO32KEnable>
    241a:	bf00      	nop
    241c:	b005      	add	sp, #20
    241e:	f85d fb04 	ldr.w	pc, [sp], #4

00002422 <Clock_Ip_ClockSetSimClkoutEnable>:
    2422:	b500      	push	{lr}
    2424:	b083      	sub	sp, #12
    2426:	9001      	str	r0, [sp, #4]
    2428:	9b01      	ldr	r3, [sp, #4]
    242a:	2b00      	cmp	r3, #0
    242c:	d002      	beq.n	2434 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    242e:	9801      	ldr	r0, [sp, #4]
    2430:	f000 f8c6 	bl	25c0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
    2434:	bf00      	nop
    2436:	b003      	add	sp, #12
    2438:	f85d fb04 	ldr.w	pc, [sp], #4

0000243c <Clock_Ip_ClockUpdateSimClkoutEnable>:
    243c:	b500      	push	{lr}
    243e:	b085      	sub	sp, #20
    2440:	9001      	str	r0, [sp, #4]
    2442:	460b      	mov	r3, r1
    2444:	f88d 3003 	strb.w	r3, [sp, #3]
    2448:	9b01      	ldr	r3, [sp, #4]
    244a:	9302      	str	r3, [sp, #8]
    244c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2450:	2b00      	cmp	r3, #0
    2452:	d003      	beq.n	245c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    2454:	2300      	movs	r3, #0
    2456:	f8ad 300c 	strh.w	r3, [sp, #12]
    245a:	e002      	b.n	2462 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    245c:	2301      	movs	r3, #1
    245e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2462:	ab02      	add	r3, sp, #8
    2464:	4618      	mov	r0, r3
    2466:	f7ff ffdc 	bl	2422 <Clock_Ip_ClockSetSimClkoutEnable>
    246a:	bf00      	nop
    246c:	b005      	add	sp, #20
    246e:	f85d fb04 	ldr.w	pc, [sp], #4

00002472 <Clock_Ip_ClockSetPccCgcEnable>:
    2472:	b500      	push	{lr}
    2474:	b083      	sub	sp, #12
    2476:	9001      	str	r0, [sp, #4]
    2478:	9b01      	ldr	r3, [sp, #4]
    247a:	2b00      	cmp	r3, #0
    247c:	d002      	beq.n	2484 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    247e:	9801      	ldr	r0, [sp, #4]
    2480:	f000 f8b6 	bl	25f0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
    2484:	bf00      	nop
    2486:	b003      	add	sp, #12
    2488:	f85d fb04 	ldr.w	pc, [sp], #4

0000248c <Clock_Ip_ClockUpdatePccCgcEnable>:
    248c:	b500      	push	{lr}
    248e:	b085      	sub	sp, #20
    2490:	9001      	str	r0, [sp, #4]
    2492:	460b      	mov	r3, r1
    2494:	f88d 3003 	strb.w	r3, [sp, #3]
    2498:	9b01      	ldr	r3, [sp, #4]
    249a:	9302      	str	r3, [sp, #8]
    249c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24a0:	2b00      	cmp	r3, #0
    24a2:	d003      	beq.n	24ac <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    24a4:	2300      	movs	r3, #0
    24a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    24aa:	e002      	b.n	24b2 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    24ac:	2301      	movs	r3, #1
    24ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    24b2:	ab02      	add	r3, sp, #8
    24b4:	4618      	mov	r0, r3
    24b6:	f7ff ffdc 	bl	2472 <Clock_Ip_ClockSetPccCgcEnable>
    24ba:	bf00      	nop
    24bc:	b005      	add	sp, #20
    24be:	f85d fb04 	ldr.w	pc, [sp], #4

000024c2 <Clock_Ip_ClockSetSimGate>:
    24c2:	b500      	push	{lr}
    24c4:	b083      	sub	sp, #12
    24c6:	9001      	str	r0, [sp, #4]
    24c8:	9b01      	ldr	r3, [sp, #4]
    24ca:	2b00      	cmp	r3, #0
    24cc:	d002      	beq.n	24d4 <Clock_Ip_ClockSetSimGate+0x12>
    24ce:	9801      	ldr	r0, [sp, #4]
    24d0:	f000 f8bc 	bl	264c <Clock_Ip_ClockSetSimGate_TrustedCall>
    24d4:	bf00      	nop
    24d6:	b003      	add	sp, #12
    24d8:	f85d fb04 	ldr.w	pc, [sp], #4

000024dc <Clock_Ip_ClockUpdateSimGate>:
    24dc:	b500      	push	{lr}
    24de:	b085      	sub	sp, #20
    24e0:	9001      	str	r0, [sp, #4]
    24e2:	460b      	mov	r3, r1
    24e4:	f88d 3003 	strb.w	r3, [sp, #3]
    24e8:	9b01      	ldr	r3, [sp, #4]
    24ea:	9302      	str	r3, [sp, #8]
    24ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24f0:	2b00      	cmp	r3, #0
    24f2:	d003      	beq.n	24fc <Clock_Ip_ClockUpdateSimGate+0x20>
    24f4:	2300      	movs	r3, #0
    24f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    24fa:	e002      	b.n	2502 <Clock_Ip_ClockUpdateSimGate+0x26>
    24fc:	2301      	movs	r3, #1
    24fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    2502:	ab02      	add	r3, sp, #8
    2504:	4618      	mov	r0, r3
    2506:	f7ff ffdc 	bl	24c2 <Clock_Ip_ClockSetSimGate>
    250a:	bf00      	nop
    250c:	b005      	add	sp, #20
    250e:	f85d fb04 	ldr.w	pc, [sp], #4

00002512 <Clock_Ip_ClockSetSimTraceEnable>:
    2512:	b500      	push	{lr}
    2514:	b083      	sub	sp, #12
    2516:	9001      	str	r0, [sp, #4]
    2518:	9b01      	ldr	r3, [sp, #4]
    251a:	2b00      	cmp	r3, #0
    251c:	d002      	beq.n	2524 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    251e:	9801      	ldr	r0, [sp, #4]
    2520:	f000 f8c0 	bl	26a4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
    2524:	bf00      	nop
    2526:	b003      	add	sp, #12
    2528:	f85d fb04 	ldr.w	pc, [sp], #4

0000252c <Clock_Ip_ClockUpdateSimTraceEnable>:
    252c:	b500      	push	{lr}
    252e:	b085      	sub	sp, #20
    2530:	9001      	str	r0, [sp, #4]
    2532:	460b      	mov	r3, r1
    2534:	f88d 3003 	strb.w	r3, [sp, #3]
    2538:	9b01      	ldr	r3, [sp, #4]
    253a:	9302      	str	r3, [sp, #8]
    253c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2540:	2b00      	cmp	r3, #0
    2542:	d003      	beq.n	254c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    2544:	2300      	movs	r3, #0
    2546:	f8ad 300c 	strh.w	r3, [sp, #12]
    254a:	e002      	b.n	2552 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    254c:	2301      	movs	r3, #1
    254e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2552:	ab02      	add	r3, sp, #8
    2554:	4618      	mov	r0, r3
    2556:	f7ff ffdc 	bl	2512 <Clock_Ip_ClockSetSimTraceEnable>
    255a:	bf00      	nop
    255c:	b005      	add	sp, #20
    255e:	f85d fb04 	ldr.w	pc, [sp], #4

00002562 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
    2562:	b084      	sub	sp, #16
    2564:	9001      	str	r0, [sp, #4]
    2566:	4b09      	ldr	r3, [pc, #36]	; (258c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2568:	691b      	ldr	r3, [r3, #16]
    256a:	9303      	str	r3, [sp, #12]
    256c:	9b03      	ldr	r3, [sp, #12]
    256e:	f023 0301 	bic.w	r3, r3, #1
    2572:	9303      	str	r3, [sp, #12]
    2574:	9b01      	ldr	r3, [sp, #4]
    2576:	889b      	ldrh	r3, [r3, #4]
    2578:	461a      	mov	r2, r3
    257a:	9b03      	ldr	r3, [sp, #12]
    257c:	4313      	orrs	r3, r2
    257e:	9303      	str	r3, [sp, #12]
    2580:	4a02      	ldr	r2, [pc, #8]	; (258c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2582:	9b03      	ldr	r3, [sp, #12]
    2584:	6113      	str	r3, [r2, #16]
    2586:	bf00      	nop
    2588:	b004      	add	sp, #16
    258a:	4770      	bx	lr
    258c:	40048000 	.word	0x40048000

00002590 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
    2590:	b084      	sub	sp, #16
    2592:	9001      	str	r0, [sp, #4]
    2594:	4b09      	ldr	r3, [pc, #36]	; (25bc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2596:	691b      	ldr	r3, [r3, #16]
    2598:	9303      	str	r3, [sp, #12]
    259a:	9b03      	ldr	r3, [sp, #12]
    259c:	f023 0302 	bic.w	r3, r3, #2
    25a0:	9303      	str	r3, [sp, #12]
    25a2:	9b01      	ldr	r3, [sp, #4]
    25a4:	889b      	ldrh	r3, [r3, #4]
    25a6:	005b      	lsls	r3, r3, #1
    25a8:	9a03      	ldr	r2, [sp, #12]
    25aa:	4313      	orrs	r3, r2
    25ac:	9303      	str	r3, [sp, #12]
    25ae:	4a03      	ldr	r2, [pc, #12]	; (25bc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    25b0:	9b03      	ldr	r3, [sp, #12]
    25b2:	6113      	str	r3, [r2, #16]
    25b4:	bf00      	nop
    25b6:	b004      	add	sp, #16
    25b8:	4770      	bx	lr
    25ba:	bf00      	nop
    25bc:	40048000 	.word	0x40048000

000025c0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
    25c0:	b084      	sub	sp, #16
    25c2:	9001      	str	r0, [sp, #4]
    25c4:	4b09      	ldr	r3, [pc, #36]	; (25ec <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    25c6:	685b      	ldr	r3, [r3, #4]
    25c8:	9303      	str	r3, [sp, #12]
    25ca:	9b03      	ldr	r3, [sp, #12]
    25cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    25d0:	9303      	str	r3, [sp, #12]
    25d2:	9b01      	ldr	r3, [sp, #4]
    25d4:	889b      	ldrh	r3, [r3, #4]
    25d6:	02db      	lsls	r3, r3, #11
    25d8:	9a03      	ldr	r2, [sp, #12]
    25da:	4313      	orrs	r3, r2
    25dc:	9303      	str	r3, [sp, #12]
    25de:	4a03      	ldr	r2, [pc, #12]	; (25ec <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    25e0:	9b03      	ldr	r3, [sp, #12]
    25e2:	6053      	str	r3, [r2, #4]
    25e4:	bf00      	nop
    25e6:	b004      	add	sp, #16
    25e8:	4770      	bx	lr
    25ea:	bf00      	nop
    25ec:	40048000 	.word	0x40048000

000025f0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
    25f0:	b084      	sub	sp, #16
    25f2:	9001      	str	r0, [sp, #4]
    25f4:	4913      	ldr	r1, [pc, #76]	; (2644 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    25f6:	9b01      	ldr	r3, [sp, #4]
    25f8:	681a      	ldr	r2, [r3, #0]
    25fa:	4813      	ldr	r0, [pc, #76]	; (2648 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    25fc:	4613      	mov	r3, r2
    25fe:	00db      	lsls	r3, r3, #3
    2600:	4413      	add	r3, r2
    2602:	4403      	add	r3, r0
    2604:	3306      	adds	r3, #6
    2606:	781b      	ldrb	r3, [r3, #0]
    2608:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    260c:	9303      	str	r3, [sp, #12]
    260e:	9b03      	ldr	r3, [sp, #12]
    2610:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2614:	9303      	str	r3, [sp, #12]
    2616:	9b01      	ldr	r3, [sp, #4]
    2618:	889b      	ldrh	r3, [r3, #4]
    261a:	079b      	lsls	r3, r3, #30
    261c:	9a03      	ldr	r2, [sp, #12]
    261e:	4313      	orrs	r3, r2
    2620:	9303      	str	r3, [sp, #12]
    2622:	4908      	ldr	r1, [pc, #32]	; (2644 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2624:	9b01      	ldr	r3, [sp, #4]
    2626:	681a      	ldr	r2, [r3, #0]
    2628:	4807      	ldr	r0, [pc, #28]	; (2648 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    262a:	4613      	mov	r3, r2
    262c:	00db      	lsls	r3, r3, #3
    262e:	4413      	add	r3, r2
    2630:	4403      	add	r3, r0
    2632:	3306      	adds	r3, #6
    2634:	781b      	ldrb	r3, [r3, #0]
    2636:	461a      	mov	r2, r3
    2638:	9b03      	ldr	r3, [sp, #12]
    263a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    263e:	bf00      	nop
    2640:	b004      	add	sp, #16
    2642:	4770      	bx	lr
    2644:	40065000 	.word	0x40065000
    2648:	0000b634 	.word	0x0000b634

0000264c <Clock_Ip_ClockSetSimGate_TrustedCall>:
    264c:	b086      	sub	sp, #24
    264e:	9001      	str	r0, [sp, #4]
    2650:	9b01      	ldr	r3, [sp, #4]
    2652:	889b      	ldrh	r3, [r3, #4]
    2654:	9305      	str	r3, [sp, #20]
    2656:	9b01      	ldr	r3, [sp, #4]
    2658:	681a      	ldr	r2, [r3, #0]
    265a:	4910      	ldr	r1, [pc, #64]	; (269c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    265c:	4613      	mov	r3, r2
    265e:	00db      	lsls	r3, r3, #3
    2660:	4413      	add	r3, r2
    2662:	440b      	add	r3, r1
    2664:	3306      	adds	r3, #6
    2666:	781b      	ldrb	r3, [r3, #0]
    2668:	9304      	str	r3, [sp, #16]
    266a:	4b0d      	ldr	r3, [pc, #52]	; (26a0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    266e:	9303      	str	r3, [sp, #12]
    2670:	2201      	movs	r2, #1
    2672:	9b04      	ldr	r3, [sp, #16]
    2674:	fa02 f303 	lsl.w	r3, r2, r3
    2678:	43db      	mvns	r3, r3
    267a:	9a03      	ldr	r2, [sp, #12]
    267c:	4013      	ands	r3, r2
    267e:	9303      	str	r3, [sp, #12]
    2680:	9a05      	ldr	r2, [sp, #20]
    2682:	9b04      	ldr	r3, [sp, #16]
    2684:	fa02 f303 	lsl.w	r3, r2, r3
    2688:	9a03      	ldr	r2, [sp, #12]
    268a:	4313      	orrs	r3, r2
    268c:	9303      	str	r3, [sp, #12]
    268e:	4a04      	ldr	r2, [pc, #16]	; (26a0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2690:	9b03      	ldr	r3, [sp, #12]
    2692:	6413      	str	r3, [r2, #64]	; 0x40
    2694:	bf00      	nop
    2696:	b006      	add	sp, #24
    2698:	4770      	bx	lr
    269a:	bf00      	nop
    269c:	0000b634 	.word	0x0000b634
    26a0:	40048000 	.word	0x40048000

000026a4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
    26a4:	b084      	sub	sp, #16
    26a6:	9001      	str	r0, [sp, #4]
    26a8:	4b0a      	ldr	r3, [pc, #40]	; (26d4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    26aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    26ac:	9303      	str	r3, [sp, #12]
    26ae:	9b01      	ldr	r3, [sp, #4]
    26b0:	889b      	ldrh	r3, [r3, #4]
    26b2:	2b01      	cmp	r3, #1
    26b4:	d104      	bne.n	26c0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    26b6:	9b03      	ldr	r3, [sp, #12]
    26b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    26bc:	9303      	str	r3, [sp, #12]
    26be:	e003      	b.n	26c8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    26c0:	9b03      	ldr	r3, [sp, #12]
    26c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    26c6:	9303      	str	r3, [sp, #12]
    26c8:	4a02      	ldr	r2, [pc, #8]	; (26d4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    26ca:	9b03      	ldr	r3, [sp, #12]
    26cc:	6693      	str	r3, [r2, #104]	; 0x68
    26ce:	bf00      	nop
    26d0:	b004      	add	sp, #16
    26d2:	4770      	bx	lr
    26d4:	40048000 	.word	0x40048000

000026d8 <Clock_Ip_InternalOscillatorEmpty>:
    26d8:	b082      	sub	sp, #8
    26da:	9001      	str	r0, [sp, #4]
    26dc:	bf00      	nop
    26de:	b002      	add	sp, #8
    26e0:	4770      	bx	lr

000026e2 <Clock_Ip_InternalOscillatorEmpty_Disable>:
    26e2:	b082      	sub	sp, #8
    26e4:	9001      	str	r0, [sp, #4]
    26e6:	bf00      	nop
    26e8:	b002      	add	sp, #8
    26ea:	4770      	bx	lr

000026ec <Clock_Ip_SetSirc>:
    26ec:	b500      	push	{lr}
    26ee:	b083      	sub	sp, #12
    26f0:	9001      	str	r0, [sp, #4]
    26f2:	9b01      	ldr	r3, [sp, #4]
    26f4:	2b00      	cmp	r3, #0
    26f6:	d002      	beq.n	26fe <Clock_Ip_SetSirc+0x12>
    26f8:	9801      	ldr	r0, [sp, #4]
    26fa:	f000 f8d1 	bl	28a0 <Clock_Ip_SetSirc_TrustedCall>
    26fe:	bf00      	nop
    2700:	b003      	add	sp, #12
    2702:	f85d fb04 	ldr.w	pc, [sp], #4

00002706 <Clock_Ip_EnableSirc>:
    2706:	b500      	push	{lr}
    2708:	b083      	sub	sp, #12
    270a:	9001      	str	r0, [sp, #4]
    270c:	9b01      	ldr	r3, [sp, #4]
    270e:	2b00      	cmp	r3, #0
    2710:	d002      	beq.n	2718 <Clock_Ip_EnableSirc+0x12>
    2712:	9801      	ldr	r0, [sp, #4]
    2714:	f000 f950 	bl	29b8 <Clock_Ip_EnableSirc_TrustedCall>
    2718:	bf00      	nop
    271a:	b003      	add	sp, #12
    271c:	f85d fb04 	ldr.w	pc, [sp], #4

00002720 <Clock_Ip_DisableSirc>:
    2720:	b500      	push	{lr}
    2722:	b083      	sub	sp, #12
    2724:	9001      	str	r0, [sp, #4]
    2726:	9801      	ldr	r0, [sp, #4]
    2728:	f000 f98e 	bl	2a48 <Clock_Ip_DisableSirc_TrustedCall>
    272c:	bf00      	nop
    272e:	b003      	add	sp, #12
    2730:	f85d fb04 	ldr.w	pc, [sp], #4

00002734 <Clock_Ip_SetSircVlp>:
    2734:	b500      	push	{lr}
    2736:	b083      	sub	sp, #12
    2738:	9001      	str	r0, [sp, #4]
    273a:	9b01      	ldr	r3, [sp, #4]
    273c:	2b00      	cmp	r3, #0
    273e:	d002      	beq.n	2746 <Clock_Ip_SetSircVlp+0x12>
    2740:	9801      	ldr	r0, [sp, #4]
    2742:	f000 f999 	bl	2a78 <Clock_Ip_SetSircVlp_TrustedCall>
    2746:	bf00      	nop
    2748:	b003      	add	sp, #12
    274a:	f85d fb04 	ldr.w	pc, [sp], #4

0000274e <Clock_Ip_EnableSircVlp>:
    274e:	b500      	push	{lr}
    2750:	b083      	sub	sp, #12
    2752:	9001      	str	r0, [sp, #4]
    2754:	9b01      	ldr	r3, [sp, #4]
    2756:	2b00      	cmp	r3, #0
    2758:	d002      	beq.n	2760 <Clock_Ip_EnableSircVlp+0x12>
    275a:	9801      	ldr	r0, [sp, #4]
    275c:	f000 f9b0 	bl	2ac0 <Clock_Ip_EnableSircVlp_TrustedCall>
    2760:	bf00      	nop
    2762:	b003      	add	sp, #12
    2764:	f85d fb04 	ldr.w	pc, [sp], #4

00002768 <Clock_Ip_DisableSircVlp>:
    2768:	b500      	push	{lr}
    276a:	b083      	sub	sp, #12
    276c:	9001      	str	r0, [sp, #4]
    276e:	9801      	ldr	r0, [sp, #4]
    2770:	f000 f9ba 	bl	2ae8 <Clock_Ip_DisableSircVlp_TrustedCall>
    2774:	bf00      	nop
    2776:	b003      	add	sp, #12
    2778:	f85d fb04 	ldr.w	pc, [sp], #4

0000277c <Clock_Ip_SetSircStop>:
    277c:	b500      	push	{lr}
    277e:	b083      	sub	sp, #12
    2780:	9001      	str	r0, [sp, #4]
    2782:	9b01      	ldr	r3, [sp, #4]
    2784:	2b00      	cmp	r3, #0
    2786:	d002      	beq.n	278e <Clock_Ip_SetSircStop+0x12>
    2788:	9801      	ldr	r0, [sp, #4]
    278a:	f000 f9bd 	bl	2b08 <Clock_Ip_SetSircStop_TrustedCall>
    278e:	bf00      	nop
    2790:	b003      	add	sp, #12
    2792:	f85d fb04 	ldr.w	pc, [sp], #4

00002796 <Clock_Ip_EnableSircStop>:
    2796:	b500      	push	{lr}
    2798:	b083      	sub	sp, #12
    279a:	9001      	str	r0, [sp, #4]
    279c:	9b01      	ldr	r3, [sp, #4]
    279e:	2b00      	cmp	r3, #0
    27a0:	d002      	beq.n	27a8 <Clock_Ip_EnableSircStop+0x12>
    27a2:	9801      	ldr	r0, [sp, #4]
    27a4:	f000 f9d4 	bl	2b50 <Clock_Ip_EnableSircStop_TrustedCall>
    27a8:	bf00      	nop
    27aa:	b003      	add	sp, #12
    27ac:	f85d fb04 	ldr.w	pc, [sp], #4

000027b0 <Clock_Ip_DisableSircStop>:
    27b0:	b500      	push	{lr}
    27b2:	b083      	sub	sp, #12
    27b4:	9001      	str	r0, [sp, #4]
    27b6:	9801      	ldr	r0, [sp, #4]
    27b8:	f000 f9de 	bl	2b78 <Clock_Ip_DisableSircStop_TrustedCall>
    27bc:	bf00      	nop
    27be:	b003      	add	sp, #12
    27c0:	f85d fb04 	ldr.w	pc, [sp], #4

000027c4 <SetInputSouceSytemClock>:
    27c4:	b500      	push	{lr}
    27c6:	b089      	sub	sp, #36	; 0x24
    27c8:	9001      	str	r0, [sp, #4]
    27ca:	2300      	movs	r3, #0
    27cc:	f88d 301f 	strb.w	r3, [sp, #31]
    27d0:	4b20      	ldr	r3, [pc, #128]	; (2854 <SetInputSouceSytemClock+0x90>)
    27d2:	695b      	ldr	r3, [r3, #20]
    27d4:	9306      	str	r3, [sp, #24]
    27d6:	9b06      	ldr	r3, [sp, #24]
    27d8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    27dc:	9306      	str	r3, [sp, #24]
    27de:	9b01      	ldr	r3, [sp, #4]
    27e0:	061b      	lsls	r3, r3, #24
    27e2:	9a06      	ldr	r2, [sp, #24]
    27e4:	4313      	orrs	r3, r2
    27e6:	9306      	str	r3, [sp, #24]
    27e8:	4a1a      	ldr	r2, [pc, #104]	; (2854 <SetInputSouceSytemClock+0x90>)
    27ea:	9b06      	ldr	r3, [sp, #24]
    27ec:	6153      	str	r3, [r2, #20]
    27ee:	aa02      	add	r2, sp, #8
    27f0:	a903      	add	r1, sp, #12
    27f2:	a804      	add	r0, sp, #16
    27f4:	f24c 3350 	movw	r3, #50000	; 0xc350
    27f8:	f7ff f9ac 	bl	1b54 <Clock_Ip_StartTimeout>
    27fc:	4b15      	ldr	r3, [pc, #84]	; (2854 <SetInputSouceSytemClock+0x90>)
    27fe:	691b      	ldr	r3, [r3, #16]
    2800:	0e1b      	lsrs	r3, r3, #24
    2802:	f003 030f 	and.w	r3, r3, #15
    2806:	9a01      	ldr	r2, [sp, #4]
    2808:	429a      	cmp	r2, r3
    280a:	bf0c      	ite	eq
    280c:	2301      	moveq	r3, #1
    280e:	2300      	movne	r3, #0
    2810:	b2db      	uxtb	r3, r3
    2812:	9305      	str	r3, [sp, #20]
    2814:	9a02      	ldr	r2, [sp, #8]
    2816:	a903      	add	r1, sp, #12
    2818:	ab04      	add	r3, sp, #16
    281a:	4618      	mov	r0, r3
    281c:	f7ff f9b4 	bl	1b88 <Clock_Ip_TimeoutExpired>
    2820:	4603      	mov	r3, r0
    2822:	f88d 301f 	strb.w	r3, [sp, #31]
    2826:	9b05      	ldr	r3, [sp, #20]
    2828:	2b00      	cmp	r3, #0
    282a:	d106      	bne.n	283a <SetInputSouceSytemClock+0x76>
    282c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2830:	f083 0301 	eor.w	r3, r3, #1
    2834:	b2db      	uxtb	r3, r3
    2836:	2b00      	cmp	r3, #0
    2838:	d1e0      	bne.n	27fc <SetInputSouceSytemClock+0x38>
    283a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    283e:	2b00      	cmp	r3, #0
    2840:	d003      	beq.n	284a <SetInputSouceSytemClock+0x86>
    2842:	2105      	movs	r1, #5
    2844:	2001      	movs	r0, #1
    2846:	f7ff f975 	bl	1b34 <Clock_Ip_ReportClockErrors>
    284a:	bf00      	nop
    284c:	b009      	add	sp, #36	; 0x24
    284e:	f85d fb04 	ldr.w	pc, [sp], #4
    2852:	bf00      	nop
    2854:	40064000 	.word	0x40064000

00002858 <Clock_Ip_SetFirc>:
    2858:	b500      	push	{lr}
    285a:	b083      	sub	sp, #12
    285c:	9001      	str	r0, [sp, #4]
    285e:	9b01      	ldr	r3, [sp, #4]
    2860:	2b00      	cmp	r3, #0
    2862:	d002      	beq.n	286a <Clock_Ip_SetFirc+0x12>
    2864:	9801      	ldr	r0, [sp, #4]
    2866:	f000 f997 	bl	2b98 <Clock_Ip_SetFirc_TrustedCall>
    286a:	bf00      	nop
    286c:	b003      	add	sp, #12
    286e:	f85d fb04 	ldr.w	pc, [sp], #4

00002872 <Clock_Ip_EnableFirc>:
    2872:	b500      	push	{lr}
    2874:	b083      	sub	sp, #12
    2876:	9001      	str	r0, [sp, #4]
    2878:	9b01      	ldr	r3, [sp, #4]
    287a:	2b00      	cmp	r3, #0
    287c:	d002      	beq.n	2884 <Clock_Ip_EnableFirc+0x12>
    287e:	9801      	ldr	r0, [sp, #4]
    2880:	f000 fa7e 	bl	2d80 <Clock_Ip_EnableFirc_TrustedCall>
    2884:	bf00      	nop
    2886:	b003      	add	sp, #12
    2888:	f85d fb04 	ldr.w	pc, [sp], #4

0000288c <Clock_Ip_DisableFirc>:
    288c:	b500      	push	{lr}
    288e:	b083      	sub	sp, #12
    2890:	9001      	str	r0, [sp, #4]
    2892:	9801      	ldr	r0, [sp, #4]
    2894:	f000 fab8 	bl	2e08 <Clock_Ip_DisableFirc_TrustedCall>
    2898:	bf00      	nop
    289a:	b003      	add	sp, #12
    289c:	f85d fb04 	ldr.w	pc, [sp], #4

000028a0 <Clock_Ip_SetSirc_TrustedCall>:
    28a0:	b500      	push	{lr}
    28a2:	b08b      	sub	sp, #44	; 0x2c
    28a4:	9001      	str	r0, [sp, #4]
    28a6:	2300      	movs	r3, #0
    28a8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    28ac:	9b01      	ldr	r3, [sp, #4]
    28ae:	2b00      	cmp	r3, #0
    28b0:	d10b      	bne.n	28ca <Clock_Ip_SetSirc_TrustedCall+0x2a>
    28b2:	2305      	movs	r3, #5
    28b4:	9302      	str	r3, [sp, #8]
    28b6:	2301      	movs	r3, #1
    28b8:	f88d 300f 	strb.w	r3, [sp, #15]
    28bc:	2301      	movs	r3, #1
    28be:	f8ad 300c 	strh.w	r3, [sp, #12]
    28c2:	2301      	movs	r3, #1
    28c4:	f88d 3010 	strb.w	r3, [sp, #16]
    28c8:	e00e      	b.n	28e8 <Clock_Ip_SetSirc_TrustedCall+0x48>
    28ca:	9b01      	ldr	r3, [sp, #4]
    28cc:	681b      	ldr	r3, [r3, #0]
    28ce:	9302      	str	r3, [sp, #8]
    28d0:	9b01      	ldr	r3, [sp, #4]
    28d2:	79db      	ldrb	r3, [r3, #7]
    28d4:	f88d 300f 	strb.w	r3, [sp, #15]
    28d8:	9b01      	ldr	r3, [sp, #4]
    28da:	889b      	ldrh	r3, [r3, #4]
    28dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    28e0:	9b01      	ldr	r3, [sp, #4]
    28e2:	7a1b      	ldrb	r3, [r3, #8]
    28e4:	f88d 3010 	strb.w	r3, [sp, #16]
    28e8:	4b32      	ldr	r3, [pc, #200]	; (29b4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    28ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    28ee:	4a31      	ldr	r2, [pc, #196]	; (29b4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    28f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    28f4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    28f8:	4b2e      	ldr	r3, [pc, #184]	; (29b4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    28fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    28fe:	4a2d      	ldr	r2, [pc, #180]	; (29b4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2900:	f023 0301 	bic.w	r3, r3, #1
    2904:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2908:	4b2a      	ldr	r3, [pc, #168]	; (29b4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    290a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    290e:	4a29      	ldr	r2, [pc, #164]	; (29b4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2910:	f023 0304 	bic.w	r3, r3, #4
    2914:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2918:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    291c:	2b01      	cmp	r3, #1
    291e:	d144      	bne.n	29aa <Clock_Ip_SetSirc_TrustedCall+0x10a>
    2920:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2924:	4a23      	ldr	r2, [pc, #140]	; (29b4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2926:	f003 0301 	and.w	r3, r3, #1
    292a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    292e:	4b21      	ldr	r3, [pc, #132]	; (29b4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2930:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2934:	4a1f      	ldr	r2, [pc, #124]	; (29b4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2936:	f043 0301 	orr.w	r3, r3, #1
    293a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    293e:	4b1d      	ldr	r3, [pc, #116]	; (29b4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2940:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2944:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2948:	009b      	lsls	r3, r3, #2
    294a:	f003 0304 	and.w	r3, r3, #4
    294e:	4919      	ldr	r1, [pc, #100]	; (29b4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2950:	4313      	orrs	r3, r2
    2952:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    2956:	aa05      	add	r2, sp, #20
    2958:	a906      	add	r1, sp, #24
    295a:	a807      	add	r0, sp, #28
    295c:	f24c 3350 	movw	r3, #50000	; 0xc350
    2960:	f7ff f8f8 	bl	1b54 <Clock_Ip_StartTimeout>
    2964:	4b13      	ldr	r3, [pc, #76]	; (29b4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    296a:	0e1b      	lsrs	r3, r3, #24
    296c:	f003 0301 	and.w	r3, r3, #1
    2970:	9308      	str	r3, [sp, #32]
    2972:	9a05      	ldr	r2, [sp, #20]
    2974:	a906      	add	r1, sp, #24
    2976:	ab07      	add	r3, sp, #28
    2978:	4618      	mov	r0, r3
    297a:	f7ff f905 	bl	1b88 <Clock_Ip_TimeoutExpired>
    297e:	4603      	mov	r3, r0
    2980:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    2984:	9b08      	ldr	r3, [sp, #32]
    2986:	2b00      	cmp	r3, #0
    2988:	d106      	bne.n	2998 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    298a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    298e:	f083 0301 	eor.w	r3, r3, #1
    2992:	b2db      	uxtb	r3, r3
    2994:	2b00      	cmp	r3, #0
    2996:	d1e5      	bne.n	2964 <Clock_Ip_SetSirc_TrustedCall+0xc4>
    2998:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    299c:	2b00      	cmp	r3, #0
    299e:	d004      	beq.n	29aa <Clock_Ip_SetSirc_TrustedCall+0x10a>
    29a0:	9b02      	ldr	r3, [sp, #8]
    29a2:	4619      	mov	r1, r3
    29a4:	2001      	movs	r0, #1
    29a6:	f7ff f8c5 	bl	1b34 <Clock_Ip_ReportClockErrors>
    29aa:	bf00      	nop
    29ac:	b00b      	add	sp, #44	; 0x2c
    29ae:	f85d fb04 	ldr.w	pc, [sp], #4
    29b2:	bf00      	nop
    29b4:	40064000 	.word	0x40064000

000029b8 <Clock_Ip_EnableSirc_TrustedCall>:
    29b8:	b500      	push	{lr}
    29ba:	b089      	sub	sp, #36	; 0x24
    29bc:	9001      	str	r0, [sp, #4]
    29be:	2300      	movs	r3, #0
    29c0:	f88d 301f 	strb.w	r3, [sp, #31]
    29c4:	4b1f      	ldr	r3, [pc, #124]	; (2a44 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29ca:	4a1e      	ldr	r2, [pc, #120]	; (2a44 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29cc:	f043 0301 	orr.w	r3, r3, #1
    29d0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    29d4:	4b1b      	ldr	r3, [pc, #108]	; (2a44 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29da:	4a1a      	ldr	r2, [pc, #104]	; (2a44 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29dc:	f043 0304 	orr.w	r3, r3, #4
    29e0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    29e4:	aa03      	add	r2, sp, #12
    29e6:	a904      	add	r1, sp, #16
    29e8:	a805      	add	r0, sp, #20
    29ea:	f24c 3350 	movw	r3, #50000	; 0xc350
    29ee:	f7ff f8b1 	bl	1b54 <Clock_Ip_StartTimeout>
    29f2:	4b14      	ldr	r3, [pc, #80]	; (2a44 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29f8:	0e1b      	lsrs	r3, r3, #24
    29fa:	f003 0301 	and.w	r3, r3, #1
    29fe:	9306      	str	r3, [sp, #24]
    2a00:	9a03      	ldr	r2, [sp, #12]
    2a02:	a904      	add	r1, sp, #16
    2a04:	ab05      	add	r3, sp, #20
    2a06:	4618      	mov	r0, r3
    2a08:	f7ff f8be 	bl	1b88 <Clock_Ip_TimeoutExpired>
    2a0c:	4603      	mov	r3, r0
    2a0e:	f88d 301f 	strb.w	r3, [sp, #31]
    2a12:	9b06      	ldr	r3, [sp, #24]
    2a14:	2b00      	cmp	r3, #0
    2a16:	d106      	bne.n	2a26 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    2a18:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a1c:	f083 0301 	eor.w	r3, r3, #1
    2a20:	b2db      	uxtb	r3, r3
    2a22:	2b00      	cmp	r3, #0
    2a24:	d1e5      	bne.n	29f2 <Clock_Ip_EnableSirc_TrustedCall+0x3a>
    2a26:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d005      	beq.n	2a3a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    2a2e:	9b01      	ldr	r3, [sp, #4]
    2a30:	681b      	ldr	r3, [r3, #0]
    2a32:	4619      	mov	r1, r3
    2a34:	2001      	movs	r0, #1
    2a36:	f7ff f87d 	bl	1b34 <Clock_Ip_ReportClockErrors>
    2a3a:	bf00      	nop
    2a3c:	b009      	add	sp, #36	; 0x24
    2a3e:	f85d fb04 	ldr.w	pc, [sp], #4
    2a42:	bf00      	nop
    2a44:	40064000 	.word	0x40064000

00002a48 <Clock_Ip_DisableSirc_TrustedCall>:
    2a48:	b082      	sub	sp, #8
    2a4a:	9001      	str	r0, [sp, #4]
    2a4c:	4b09      	ldr	r3, [pc, #36]	; (2a74 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a52:	4a08      	ldr	r2, [pc, #32]	; (2a74 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a54:	f023 0301 	bic.w	r3, r3, #1
    2a58:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2a5c:	4b05      	ldr	r3, [pc, #20]	; (2a74 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a62:	4a04      	ldr	r2, [pc, #16]	; (2a74 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a64:	f023 0304 	bic.w	r3, r3, #4
    2a68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2a6c:	bf00      	nop
    2a6e:	b002      	add	sp, #8
    2a70:	4770      	bx	lr
    2a72:	bf00      	nop
    2a74:	40064000 	.word	0x40064000

00002a78 <Clock_Ip_SetSircVlp_TrustedCall>:
    2a78:	b082      	sub	sp, #8
    2a7a:	9001      	str	r0, [sp, #4]
    2a7c:	4b0f      	ldr	r3, [pc, #60]	; (2abc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a82:	4a0e      	ldr	r2, [pc, #56]	; (2abc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2a88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2a8c:	4b0b      	ldr	r3, [pc, #44]	; (2abc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a92:	4a0a      	ldr	r2, [pc, #40]	; (2abc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a94:	f023 0304 	bic.w	r3, r3, #4
    2a98:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2a9c:	4b07      	ldr	r3, [pc, #28]	; (2abc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a9e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2aa2:	9b01      	ldr	r3, [sp, #4]
    2aa4:	7a1b      	ldrb	r3, [r3, #8]
    2aa6:	009b      	lsls	r3, r3, #2
    2aa8:	f003 0304 	and.w	r3, r3, #4
    2aac:	4903      	ldr	r1, [pc, #12]	; (2abc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2aae:	4313      	orrs	r3, r2
    2ab0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    2ab4:	bf00      	nop
    2ab6:	b002      	add	sp, #8
    2ab8:	4770      	bx	lr
    2aba:	bf00      	nop
    2abc:	40064000 	.word	0x40064000

00002ac0 <Clock_Ip_EnableSircVlp_TrustedCall>:
    2ac0:	b082      	sub	sp, #8
    2ac2:	9001      	str	r0, [sp, #4]
    2ac4:	9b01      	ldr	r3, [sp, #4]
    2ac6:	889b      	ldrh	r3, [r3, #4]
    2ac8:	2b01      	cmp	r3, #1
    2aca:	d107      	bne.n	2adc <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    2acc:	4b05      	ldr	r3, [pc, #20]	; (2ae4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ad2:	4a04      	ldr	r2, [pc, #16]	; (2ae4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2ad4:	f043 0304 	orr.w	r3, r3, #4
    2ad8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2adc:	bf00      	nop
    2ade:	b002      	add	sp, #8
    2ae0:	4770      	bx	lr
    2ae2:	bf00      	nop
    2ae4:	40064000 	.word	0x40064000

00002ae8 <Clock_Ip_DisableSircVlp_TrustedCall>:
    2ae8:	b082      	sub	sp, #8
    2aea:	9001      	str	r0, [sp, #4]
    2aec:	4b05      	ldr	r3, [pc, #20]	; (2b04 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2af2:	4a04      	ldr	r2, [pc, #16]	; (2b04 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2af4:	f023 0304 	bic.w	r3, r3, #4
    2af8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2afc:	bf00      	nop
    2afe:	b002      	add	sp, #8
    2b00:	4770      	bx	lr
    2b02:	bf00      	nop
    2b04:	40064000 	.word	0x40064000

00002b08 <Clock_Ip_SetSircStop_TrustedCall>:
    2b08:	b082      	sub	sp, #8
    2b0a:	9001      	str	r0, [sp, #4]
    2b0c:	4b0f      	ldr	r3, [pc, #60]	; (2b4c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b12:	4a0e      	ldr	r2, [pc, #56]	; (2b4c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2b18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b1c:	4b0b      	ldr	r3, [pc, #44]	; (2b4c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b22:	4a0a      	ldr	r2, [pc, #40]	; (2b4c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b24:	f023 0302 	bic.w	r3, r3, #2
    2b28:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b2c:	4b07      	ldr	r3, [pc, #28]	; (2b4c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b2e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2b32:	9b01      	ldr	r3, [sp, #4]
    2b34:	7a5b      	ldrb	r3, [r3, #9]
    2b36:	005b      	lsls	r3, r3, #1
    2b38:	f003 0302 	and.w	r3, r3, #2
    2b3c:	4903      	ldr	r1, [pc, #12]	; (2b4c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b3e:	4313      	orrs	r3, r2
    2b40:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    2b44:	bf00      	nop
    2b46:	b002      	add	sp, #8
    2b48:	4770      	bx	lr
    2b4a:	bf00      	nop
    2b4c:	40064000 	.word	0x40064000

00002b50 <Clock_Ip_EnableSircStop_TrustedCall>:
    2b50:	b082      	sub	sp, #8
    2b52:	9001      	str	r0, [sp, #4]
    2b54:	9b01      	ldr	r3, [sp, #4]
    2b56:	889b      	ldrh	r3, [r3, #4]
    2b58:	2b01      	cmp	r3, #1
    2b5a:	d107      	bne.n	2b6c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    2b5c:	4b05      	ldr	r3, [pc, #20]	; (2b74 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2b5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b62:	4a04      	ldr	r2, [pc, #16]	; (2b74 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2b64:	f043 0302 	orr.w	r3, r3, #2
    2b68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b6c:	bf00      	nop
    2b6e:	b002      	add	sp, #8
    2b70:	4770      	bx	lr
    2b72:	bf00      	nop
    2b74:	40064000 	.word	0x40064000

00002b78 <Clock_Ip_DisableSircStop_TrustedCall>:
    2b78:	b082      	sub	sp, #8
    2b7a:	9001      	str	r0, [sp, #4]
    2b7c:	4b05      	ldr	r3, [pc, #20]	; (2b94 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2b7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b82:	4a04      	ldr	r2, [pc, #16]	; (2b94 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2b84:	f023 0302 	bic.w	r3, r3, #2
    2b88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b8c:	bf00      	nop
    2b8e:	b002      	add	sp, #8
    2b90:	4770      	bx	lr
    2b92:	bf00      	nop
    2b94:	40064000 	.word	0x40064000

00002b98 <Clock_Ip_SetFirc_TrustedCall>:
    2b98:	b500      	push	{lr}
    2b9a:	b08b      	sub	sp, #44	; 0x2c
    2b9c:	9001      	str	r0, [sp, #4]
    2b9e:	9b01      	ldr	r3, [sp, #4]
    2ba0:	681a      	ldr	r2, [r3, #0]
    2ba2:	4975      	ldr	r1, [pc, #468]	; (2d78 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    2ba4:	4613      	mov	r3, r2
    2ba6:	00db      	lsls	r3, r3, #3
    2ba8:	4413      	add	r3, r2
    2baa:	440b      	add	r3, r1
    2bac:	781b      	ldrb	r3, [r3, #0]
    2bae:	9308      	str	r3, [sp, #32]
    2bb0:	2300      	movs	r3, #0
    2bb2:	f88d 301f 	strb.w	r3, [sp, #31]
    2bb6:	2300      	movs	r3, #0
    2bb8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    2bbc:	4b6f      	ldr	r3, [pc, #444]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2bc2:	4a6e      	ldr	r2, [pc, #440]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2bc8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2bcc:	4b6b      	ldr	r3, [pc, #428]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d07d      	beq.n	2cd6 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    2bda:	9b01      	ldr	r3, [sp, #4]
    2bdc:	79db      	ldrb	r3, [r3, #7]
    2bde:	461a      	mov	r2, r3
    2be0:	4b66      	ldr	r3, [pc, #408]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2be2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    2be6:	f003 0303 	and.w	r3, r3, #3
    2bea:	429a      	cmp	r2, r3
    2bec:	d10b      	bne.n	2c06 <Clock_Ip_SetFirc_TrustedCall+0x6e>
    2bee:	9b01      	ldr	r3, [sp, #4]
    2bf0:	799b      	ldrb	r3, [r3, #6]
    2bf2:	461a      	mov	r2, r3
    2bf4:	4b61      	ldr	r3, [pc, #388]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2bfa:	08db      	lsrs	r3, r3, #3
    2bfc:	f003 0301 	and.w	r3, r3, #1
    2c00:	429a      	cmp	r2, r3
    2c02:	f000 80b4 	beq.w	2d6e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2c06:	4b5d      	ldr	r3, [pc, #372]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c0c:	f003 0301 	and.w	r3, r3, #1
    2c10:	2b00      	cmp	r3, #0
    2c12:	d105      	bne.n	2c20 <Clock_Ip_SetFirc_TrustedCall+0x88>
    2c14:	2301      	movs	r3, #1
    2c16:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    2c1a:	2000      	movs	r0, #0
    2c1c:	f7ff fd66 	bl	26ec <Clock_Ip_SetSirc>
    2c20:	2002      	movs	r0, #2
    2c22:	f7ff fdcf 	bl	27c4 <SetInputSouceSytemClock>
    2c26:	4b55      	ldr	r3, [pc, #340]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c28:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c2c:	4a53      	ldr	r2, [pc, #332]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c2e:	f023 0301 	bic.w	r3, r3, #1
    2c32:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2c36:	9b01      	ldr	r3, [sp, #4]
    2c38:	889b      	ldrh	r3, [r3, #4]
    2c3a:	2b01      	cmp	r3, #1
    2c3c:	f040 8097 	bne.w	2d6e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2c40:	9b01      	ldr	r3, [sp, #4]
    2c42:	79db      	ldrb	r3, [r3, #7]
    2c44:	4a4d      	ldr	r2, [pc, #308]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c46:	f003 0303 	and.w	r3, r3, #3
    2c4a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2c4e:	4b4b      	ldr	r3, [pc, #300]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c50:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2c54:	9b01      	ldr	r3, [sp, #4]
    2c56:	799b      	ldrb	r3, [r3, #6]
    2c58:	00db      	lsls	r3, r3, #3
    2c5a:	f003 0308 	and.w	r3, r3, #8
    2c5e:	4313      	orrs	r3, r2
    2c60:	4a46      	ldr	r2, [pc, #280]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c62:	f043 0301 	orr.w	r3, r3, #1
    2c66:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2c6a:	aa03      	add	r2, sp, #12
    2c6c:	a904      	add	r1, sp, #16
    2c6e:	a805      	add	r0, sp, #20
    2c70:	f24c 3350 	movw	r3, #50000	; 0xc350
    2c74:	f7fe ff6e 	bl	1b54 <Clock_Ip_StartTimeout>
    2c78:	4b40      	ldr	r3, [pc, #256]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c7e:	0e1b      	lsrs	r3, r3, #24
    2c80:	f003 0301 	and.w	r3, r3, #1
    2c84:	9306      	str	r3, [sp, #24]
    2c86:	9a03      	ldr	r2, [sp, #12]
    2c88:	a904      	add	r1, sp, #16
    2c8a:	ab05      	add	r3, sp, #20
    2c8c:	4618      	mov	r0, r3
    2c8e:	f7fe ff7b 	bl	1b88 <Clock_Ip_TimeoutExpired>
    2c92:	4603      	mov	r3, r0
    2c94:	f88d 301f 	strb.w	r3, [sp, #31]
    2c98:	9b06      	ldr	r3, [sp, #24]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d106      	bne.n	2cac <Clock_Ip_SetFirc_TrustedCall+0x114>
    2c9e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2ca2:	f083 0301 	eor.w	r3, r3, #1
    2ca6:	b2db      	uxtb	r3, r3
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d1e5      	bne.n	2c78 <Clock_Ip_SetFirc_TrustedCall+0xe0>
    2cac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2cb0:	2b00      	cmp	r3, #0
    2cb2:	d005      	beq.n	2cc0 <Clock_Ip_SetFirc_TrustedCall+0x128>
    2cb4:	9b01      	ldr	r3, [sp, #4]
    2cb6:	681b      	ldr	r3, [r3, #0]
    2cb8:	4619      	mov	r1, r3
    2cba:	2001      	movs	r0, #1
    2cbc:	f7fe ff3a 	bl	1b34 <Clock_Ip_ReportClockErrors>
    2cc0:	2003      	movs	r0, #3
    2cc2:	f7ff fd7f 	bl	27c4 <SetInputSouceSytemClock>
    2cc6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2cca:	2b00      	cmp	r3, #0
    2ccc:	d04f      	beq.n	2d6e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2cce:	2002      	movs	r0, #2
    2cd0:	f7ff fd26 	bl	2720 <Clock_Ip_DisableSirc>
    2cd4:	e04b      	b.n	2d6e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2cd6:	4b29      	ldr	r3, [pc, #164]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cd8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2cdc:	4a27      	ldr	r2, [pc, #156]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cde:	f023 0301 	bic.w	r3, r3, #1
    2ce2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2ce6:	9b01      	ldr	r3, [sp, #4]
    2ce8:	889b      	ldrh	r3, [r3, #4]
    2cea:	2b01      	cmp	r3, #1
    2cec:	d13f      	bne.n	2d6e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2cee:	9b01      	ldr	r3, [sp, #4]
    2cf0:	79db      	ldrb	r3, [r3, #7]
    2cf2:	4a22      	ldr	r2, [pc, #136]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cf4:	f003 0303 	and.w	r3, r3, #3
    2cf8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2cfc:	4b1f      	ldr	r3, [pc, #124]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cfe:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2d02:	9b01      	ldr	r3, [sp, #4]
    2d04:	799b      	ldrb	r3, [r3, #6]
    2d06:	00db      	lsls	r3, r3, #3
    2d08:	f003 0308 	and.w	r3, r3, #8
    2d0c:	4313      	orrs	r3, r2
    2d0e:	4a1b      	ldr	r2, [pc, #108]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d10:	f043 0301 	orr.w	r3, r3, #1
    2d14:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2d18:	aa03      	add	r2, sp, #12
    2d1a:	a904      	add	r1, sp, #16
    2d1c:	a805      	add	r0, sp, #20
    2d1e:	f24c 3350 	movw	r3, #50000	; 0xc350
    2d22:	f7fe ff17 	bl	1b54 <Clock_Ip_StartTimeout>
    2d26:	4b15      	ldr	r3, [pc, #84]	; (2d7c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d28:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d2c:	0e1b      	lsrs	r3, r3, #24
    2d2e:	f003 0301 	and.w	r3, r3, #1
    2d32:	9306      	str	r3, [sp, #24]
    2d34:	9a03      	ldr	r2, [sp, #12]
    2d36:	a904      	add	r1, sp, #16
    2d38:	ab05      	add	r3, sp, #20
    2d3a:	4618      	mov	r0, r3
    2d3c:	f7fe ff24 	bl	1b88 <Clock_Ip_TimeoutExpired>
    2d40:	4603      	mov	r3, r0
    2d42:	f88d 301f 	strb.w	r3, [sp, #31]
    2d46:	9b06      	ldr	r3, [sp, #24]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d106      	bne.n	2d5a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    2d4c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d50:	f083 0301 	eor.w	r3, r3, #1
    2d54:	b2db      	uxtb	r3, r3
    2d56:	2b00      	cmp	r3, #0
    2d58:	d1e5      	bne.n	2d26 <Clock_Ip_SetFirc_TrustedCall+0x18e>
    2d5a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d005      	beq.n	2d6e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2d62:	9b01      	ldr	r3, [sp, #4]
    2d64:	681b      	ldr	r3, [r3, #0]
    2d66:	4619      	mov	r1, r3
    2d68:	2001      	movs	r0, #1
    2d6a:	f7fe fee3 	bl	1b34 <Clock_Ip_ReportClockErrors>
    2d6e:	bf00      	nop
    2d70:	b00b      	add	sp, #44	; 0x2c
    2d72:	f85d fb04 	ldr.w	pc, [sp], #4
    2d76:	bf00      	nop
    2d78:	0000b634 	.word	0x0000b634
    2d7c:	40064000 	.word	0x40064000

00002d80 <Clock_Ip_EnableFirc_TrustedCall>:
    2d80:	b500      	push	{lr}
    2d82:	b089      	sub	sp, #36	; 0x24
    2d84:	9001      	str	r0, [sp, #4]
    2d86:	2300      	movs	r3, #0
    2d88:	f88d 301f 	strb.w	r3, [sp, #31]
    2d8c:	9b01      	ldr	r3, [sp, #4]
    2d8e:	889b      	ldrh	r3, [r3, #4]
    2d90:	2b01      	cmp	r3, #1
    2d92:	d132      	bne.n	2dfa <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    2d94:	4b1b      	ldr	r3, [pc, #108]	; (2e04 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2d96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d9a:	4a1a      	ldr	r2, [pc, #104]	; (2e04 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2d9c:	f043 0301 	orr.w	r3, r3, #1
    2da0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2da4:	aa03      	add	r2, sp, #12
    2da6:	a904      	add	r1, sp, #16
    2da8:	a805      	add	r0, sp, #20
    2daa:	f24c 3350 	movw	r3, #50000	; 0xc350
    2dae:	f7fe fed1 	bl	1b54 <Clock_Ip_StartTimeout>
    2db2:	4b14      	ldr	r3, [pc, #80]	; (2e04 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2db4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2db8:	0e1b      	lsrs	r3, r3, #24
    2dba:	f003 0301 	and.w	r3, r3, #1
    2dbe:	9306      	str	r3, [sp, #24]
    2dc0:	9a03      	ldr	r2, [sp, #12]
    2dc2:	a904      	add	r1, sp, #16
    2dc4:	ab05      	add	r3, sp, #20
    2dc6:	4618      	mov	r0, r3
    2dc8:	f7fe fede 	bl	1b88 <Clock_Ip_TimeoutExpired>
    2dcc:	4603      	mov	r3, r0
    2dce:	f88d 301f 	strb.w	r3, [sp, #31]
    2dd2:	9b06      	ldr	r3, [sp, #24]
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d106      	bne.n	2de6 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    2dd8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2ddc:	f083 0301 	eor.w	r3, r3, #1
    2de0:	b2db      	uxtb	r3, r3
    2de2:	2b00      	cmp	r3, #0
    2de4:	d1e5      	bne.n	2db2 <Clock_Ip_EnableFirc_TrustedCall+0x32>
    2de6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2dea:	2b00      	cmp	r3, #0
    2dec:	d005      	beq.n	2dfa <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    2dee:	9b01      	ldr	r3, [sp, #4]
    2df0:	681b      	ldr	r3, [r3, #0]
    2df2:	4619      	mov	r1, r3
    2df4:	2001      	movs	r0, #1
    2df6:	f7fe fe9d 	bl	1b34 <Clock_Ip_ReportClockErrors>
    2dfa:	bf00      	nop
    2dfc:	b009      	add	sp, #36	; 0x24
    2dfe:	f85d fb04 	ldr.w	pc, [sp], #4
    2e02:	bf00      	nop
    2e04:	40064000 	.word	0x40064000

00002e08 <Clock_Ip_DisableFirc_TrustedCall>:
    2e08:	b082      	sub	sp, #8
    2e0a:	9001      	str	r0, [sp, #4]
    2e0c:	4b05      	ldr	r3, [pc, #20]	; (2e24 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2e12:	4a04      	ldr	r2, [pc, #16]	; (2e24 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e14:	f023 0301 	bic.w	r3, r3, #1
    2e18:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2e1c:	bf00      	nop
    2e1e:	b002      	add	sp, #8
    2e20:	4770      	bx	lr
    2e22:	bf00      	nop
    2e24:	40064000 	.word	0x40064000

00002e28 <Clock_Ip_ClockMonitorEmpty>:
    2e28:	b082      	sub	sp, #8
    2e2a:	9001      	str	r0, [sp, #4]
    2e2c:	bf00      	nop
    2e2e:	b002      	add	sp, #8
    2e30:	4770      	bx	lr

00002e32 <Clock_Ip_ClockMonitorEmpty_Set>:
    2e32:	b082      	sub	sp, #8
    2e34:	9001      	str	r0, [sp, #4]
    2e36:	9100      	str	r1, [sp, #0]
    2e38:	bf00      	nop
    2e3a:	b002      	add	sp, #8
    2e3c:	4770      	bx	lr

00002e3e <Clock_Ip_ClockMonitorEmpty_Disable>:
    2e3e:	b082      	sub	sp, #8
    2e40:	9001      	str	r0, [sp, #4]
    2e42:	bf00      	nop
    2e44:	b002      	add	sp, #8
    2e46:	4770      	bx	lr

00002e48 <Clock_Ip_CallbackPllEmpty>:
    2e48:	b082      	sub	sp, #8
    2e4a:	9001      	str	r0, [sp, #4]
    2e4c:	bf00      	nop
    2e4e:	b002      	add	sp, #8
    2e50:	4770      	bx	lr

00002e52 <Clock_Ip_CallbackPllEmptyComplete>:
    2e52:	b082      	sub	sp, #8
    2e54:	9001      	str	r0, [sp, #4]
    2e56:	2302      	movs	r3, #2
    2e58:	4618      	mov	r0, r3
    2e5a:	b002      	add	sp, #8
    2e5c:	4770      	bx	lr

00002e5e <Clock_Ip_CallbackPllEmptyDisable>:
    2e5e:	b082      	sub	sp, #8
    2e60:	9001      	str	r0, [sp, #4]
    2e62:	bf00      	nop
    2e64:	b002      	add	sp, #8
    2e66:	4770      	bx	lr

00002e68 <Clock_Ip_ResetSpll>:
    2e68:	b500      	push	{lr}
    2e6a:	b083      	sub	sp, #12
    2e6c:	9001      	str	r0, [sp, #4]
    2e6e:	9b01      	ldr	r3, [sp, #4]
    2e70:	2b00      	cmp	r3, #0
    2e72:	d002      	beq.n	2e7a <Clock_Ip_ResetSpll+0x12>
    2e74:	9801      	ldr	r0, [sp, #4]
    2e76:	f000 f870 	bl	2f5a <Clock_Ip_ResetSpll_TrustedCall>
    2e7a:	bf00      	nop
    2e7c:	b003      	add	sp, #12
    2e7e:	f85d fb04 	ldr.w	pc, [sp], #4

00002e82 <Clock_Ip_SetSpll>:
    2e82:	b500      	push	{lr}
    2e84:	b083      	sub	sp, #12
    2e86:	9001      	str	r0, [sp, #4]
    2e88:	9b01      	ldr	r3, [sp, #4]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d002      	beq.n	2e94 <Clock_Ip_SetSpll+0x12>
    2e8e:	9801      	ldr	r0, [sp, #4]
    2e90:	f000 f89a 	bl	2fc8 <Clock_Ip_SetSpll_TrustedCall>
    2e94:	bf00      	nop
    2e96:	b003      	add	sp, #12
    2e98:	f85d fb04 	ldr.w	pc, [sp], #4

00002e9c <Clock_Ip_CompleteSpll>:
    2e9c:	b500      	push	{lr}
    2e9e:	b089      	sub	sp, #36	; 0x24
    2ea0:	9001      	str	r0, [sp, #4]
    2ea2:	2301      	movs	r3, #1
    2ea4:	9307      	str	r3, [sp, #28]
    2ea6:	2300      	movs	r3, #0
    2ea8:	f88d 301b 	strb.w	r3, [sp, #27]
    2eac:	4b1e      	ldr	r3, [pc, #120]	; (2f28 <Clock_Ip_CompleteSpll+0x8c>)
    2eae:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2eb2:	f003 0301 	and.w	r3, r3, #1
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d02f      	beq.n	2f1a <Clock_Ip_CompleteSpll+0x7e>
    2eba:	aa02      	add	r2, sp, #8
    2ebc:	a903      	add	r1, sp, #12
    2ebe:	a804      	add	r0, sp, #16
    2ec0:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ec4:	f7fe fe46 	bl	1b54 <Clock_Ip_StartTimeout>
    2ec8:	4b17      	ldr	r3, [pc, #92]	; (2f28 <Clock_Ip_CompleteSpll+0x8c>)
    2eca:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2ece:	0e1b      	lsrs	r3, r3, #24
    2ed0:	f003 0301 	and.w	r3, r3, #1
    2ed4:	9305      	str	r3, [sp, #20]
    2ed6:	9a02      	ldr	r2, [sp, #8]
    2ed8:	a903      	add	r1, sp, #12
    2eda:	ab04      	add	r3, sp, #16
    2edc:	4618      	mov	r0, r3
    2ede:	f7fe fe53 	bl	1b88 <Clock_Ip_TimeoutExpired>
    2ee2:	4603      	mov	r3, r0
    2ee4:	f88d 301b 	strb.w	r3, [sp, #27]
    2ee8:	9b05      	ldr	r3, [sp, #20]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d106      	bne.n	2efc <Clock_Ip_CompleteSpll+0x60>
    2eee:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2ef2:	f083 0301 	eor.w	r3, r3, #1
    2ef6:	b2db      	uxtb	r3, r3
    2ef8:	2b00      	cmp	r3, #0
    2efa:	d1e5      	bne.n	2ec8 <Clock_Ip_CompleteSpll+0x2c>
    2efc:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f00:	f083 0301 	eor.w	r3, r3, #1
    2f04:	b2db      	uxtb	r3, r3
    2f06:	2b00      	cmp	r3, #0
    2f08:	d002      	beq.n	2f10 <Clock_Ip_CompleteSpll+0x74>
    2f0a:	2302      	movs	r3, #2
    2f0c:	9307      	str	r3, [sp, #28]
    2f0e:	e006      	b.n	2f1e <Clock_Ip_CompleteSpll+0x82>
    2f10:	9901      	ldr	r1, [sp, #4]
    2f12:	2001      	movs	r0, #1
    2f14:	f7fe fe0e 	bl	1b34 <Clock_Ip_ReportClockErrors>
    2f18:	e001      	b.n	2f1e <Clock_Ip_CompleteSpll+0x82>
    2f1a:	2300      	movs	r3, #0
    2f1c:	9307      	str	r3, [sp, #28]
    2f1e:	9b07      	ldr	r3, [sp, #28]
    2f20:	4618      	mov	r0, r3
    2f22:	b009      	add	sp, #36	; 0x24
    2f24:	f85d fb04 	ldr.w	pc, [sp], #4
    2f28:	40064000 	.word	0x40064000

00002f2c <Clock_Ip_DisableSpll>:
    2f2c:	b500      	push	{lr}
    2f2e:	b083      	sub	sp, #12
    2f30:	9001      	str	r0, [sp, #4]
    2f32:	9801      	ldr	r0, [sp, #4]
    2f34:	f000 f886 	bl	3044 <Clock_Ip_DisableSpll_TrustedCall>
    2f38:	bf00      	nop
    2f3a:	b003      	add	sp, #12
    2f3c:	f85d fb04 	ldr.w	pc, [sp], #4

00002f40 <Clock_Ip_EnableSpll>:
    2f40:	b500      	push	{lr}
    2f42:	b083      	sub	sp, #12
    2f44:	9001      	str	r0, [sp, #4]
    2f46:	9b01      	ldr	r3, [sp, #4]
    2f48:	2b00      	cmp	r3, #0
    2f4a:	d002      	beq.n	2f52 <Clock_Ip_EnableSpll+0x12>
    2f4c:	9801      	ldr	r0, [sp, #4]
    2f4e:	f000 f891 	bl	3074 <Clock_Ip_EnableSpll_TrustedCall>
    2f52:	bf00      	nop
    2f54:	b003      	add	sp, #12
    2f56:	f85d fb04 	ldr.w	pc, [sp], #4

00002f5a <Clock_Ip_ResetSpll_TrustedCall>:
    2f5a:	b082      	sub	sp, #8
    2f5c:	9001      	str	r0, [sp, #4]
    2f5e:	4b19      	ldr	r3, [pc, #100]	; (2fc4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f60:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f64:	4a17      	ldr	r2, [pc, #92]	; (2fc4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2f6a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    2f6e:	4b15      	ldr	r3, [pc, #84]	; (2fc4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f70:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f74:	4a13      	ldr	r2, [pc, #76]	; (2fc4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2f7a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    2f7e:	4b11      	ldr	r3, [pc, #68]	; (2fc4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f80:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f84:	4a0f      	ldr	r2, [pc, #60]	; (2fc4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f86:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2f8a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    2f8e:	4b0d      	ldr	r3, [pc, #52]	; (2fc4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f90:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f94:	4a0b      	ldr	r2, [pc, #44]	; (2fc4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f96:	f023 0301 	bic.w	r3, r3, #1
    2f9a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    2f9e:	4b09      	ldr	r3, [pc, #36]	; (2fc4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fa0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2fa4:	4a07      	ldr	r2, [pc, #28]	; (2fc4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2faa:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    2fae:	4b05      	ldr	r3, [pc, #20]	; (2fc4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fb0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2fb4:	4a03      	ldr	r2, [pc, #12]	; (2fc4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fb6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    2fba:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    2fbe:	bf00      	nop
    2fc0:	b002      	add	sp, #8
    2fc2:	4770      	bx	lr
    2fc4:	40064000 	.word	0x40064000

00002fc8 <Clock_Ip_SetSpll_TrustedCall>:
    2fc8:	b082      	sub	sp, #8
    2fca:	9001      	str	r0, [sp, #4]
    2fcc:	9b01      	ldr	r3, [sp, #4]
    2fce:	889b      	ldrh	r3, [r3, #4]
    2fd0:	2b01      	cmp	r3, #1
    2fd2:	d12f      	bne.n	3034 <Clock_Ip_SetSpll_TrustedCall+0x6c>
    2fd4:	4b1a      	ldr	r3, [pc, #104]	; (3040 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    2fd6:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    2fda:	9b01      	ldr	r3, [sp, #4]
    2fdc:	7b5b      	ldrb	r3, [r3, #13]
    2fde:	3b01      	subs	r3, #1
    2fe0:	021b      	lsls	r3, r3, #8
    2fe2:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
    2fe6:	9b01      	ldr	r3, [sp, #4]
    2fe8:	7d1b      	ldrb	r3, [r3, #20]
    2fea:	3b10      	subs	r3, #16
    2fec:	041b      	lsls	r3, r3, #16
    2fee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
    2ff2:	430b      	orrs	r3, r1
    2ff4:	4912      	ldr	r1, [pc, #72]	; (3040 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    2ff6:	4313      	orrs	r3, r2
    2ff8:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608
    2ffc:	9b01      	ldr	r3, [sp, #4]
    2ffe:	7fdb      	ldrb	r3, [r3, #31]
    3000:	2b02      	cmp	r3, #2
    3002:	d011      	beq.n	3028 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3004:	2b02      	cmp	r3, #2
    3006:	dc17      	bgt.n	3038 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3008:	2b00      	cmp	r3, #0
    300a:	d002      	beq.n	3012 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    300c:	2b01      	cmp	r3, #1
    300e:	d005      	beq.n	301c <Clock_Ip_SetSpll_TrustedCall+0x54>
    3010:	e012      	b.n	3038 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3012:	4b0b      	ldr	r3, [pc, #44]	; (3040 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3014:	2200      	movs	r2, #0
    3016:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    301a:	e00e      	b.n	303a <Clock_Ip_SetSpll_TrustedCall+0x72>
    301c:	4b08      	ldr	r3, [pc, #32]	; (3040 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    301e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3022:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    3026:	e008      	b.n	303a <Clock_Ip_SetSpll_TrustedCall+0x72>
    3028:	4b05      	ldr	r3, [pc, #20]	; (3040 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    302a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    302e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    3032:	e002      	b.n	303a <Clock_Ip_SetSpll_TrustedCall+0x72>
    3034:	bf00      	nop
    3036:	e000      	b.n	303a <Clock_Ip_SetSpll_TrustedCall+0x72>
    3038:	bf00      	nop
    303a:	bf00      	nop
    303c:	b002      	add	sp, #8
    303e:	4770      	bx	lr
    3040:	40064000 	.word	0x40064000

00003044 <Clock_Ip_DisableSpll_TrustedCall>:
    3044:	b082      	sub	sp, #8
    3046:	9001      	str	r0, [sp, #4]
    3048:	4b09      	ldr	r3, [pc, #36]	; (3070 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    304a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    304e:	4a08      	ldr	r2, [pc, #32]	; (3070 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3050:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3054:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    3058:	4b05      	ldr	r3, [pc, #20]	; (3070 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    305a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    305e:	4a04      	ldr	r2, [pc, #16]	; (3070 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3060:	f023 0301 	bic.w	r3, r3, #1
    3064:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    3068:	bf00      	nop
    306a:	b002      	add	sp, #8
    306c:	4770      	bx	lr
    306e:	bf00      	nop
    3070:	40064000 	.word	0x40064000

00003074 <Clock_Ip_EnableSpll_TrustedCall>:
    3074:	b082      	sub	sp, #8
    3076:	9001      	str	r0, [sp, #4]
    3078:	9b01      	ldr	r3, [sp, #4]
    307a:	889b      	ldrh	r3, [r3, #4]
    307c:	2b01      	cmp	r3, #1
    307e:	d107      	bne.n	3090 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    3080:	4b05      	ldr	r3, [pc, #20]	; (3098 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3082:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3086:	4a04      	ldr	r2, [pc, #16]	; (3098 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3088:	f043 0301 	orr.w	r3, r3, #1
    308c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    3090:	bf00      	nop
    3092:	b002      	add	sp, #8
    3094:	4770      	bx	lr
    3096:	bf00      	nop
    3098:	40064000 	.word	0x40064000

0000309c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
    309c:	b082      	sub	sp, #8
    309e:	9001      	str	r0, [sp, #4]
    30a0:	9100      	str	r1, [sp, #0]
    30a2:	bf00      	nop
    30a4:	b002      	add	sp, #8
    30a6:	4770      	bx	lr

000030a8 <Clock_Ip_CallbackSelectorEmpty>:
    30a8:	b082      	sub	sp, #8
    30aa:	9001      	str	r0, [sp, #4]
    30ac:	bf00      	nop
    30ae:	b002      	add	sp, #8
    30b0:	4770      	bx	lr

000030b2 <Clock_Ip_ResetScgRunSel>:
    30b2:	b500      	push	{lr}
    30b4:	b083      	sub	sp, #12
    30b6:	9001      	str	r0, [sp, #4]
    30b8:	9b01      	ldr	r3, [sp, #4]
    30ba:	2b00      	cmp	r3, #0
    30bc:	d002      	beq.n	30c4 <Clock_Ip_ResetScgRunSel+0x12>
    30be:	9801      	ldr	r0, [sp, #4]
    30c0:	f000 f8ee 	bl	32a0 <Clock_Ip_ResetScgRunSel_TrustedCall>
    30c4:	bf00      	nop
    30c6:	b003      	add	sp, #12
    30c8:	f85d fb04 	ldr.w	pc, [sp], #4

000030cc <Clock_Ip_SetScgRunSel>:
    30cc:	b500      	push	{lr}
    30ce:	b083      	sub	sp, #12
    30d0:	9001      	str	r0, [sp, #4]
    30d2:	9b01      	ldr	r3, [sp, #4]
    30d4:	2b00      	cmp	r3, #0
    30d6:	d002      	beq.n	30de <Clock_Ip_SetScgRunSel+0x12>
    30d8:	9801      	ldr	r0, [sp, #4]
    30da:	f000 f8ff 	bl	32dc <Clock_Ip_SetScgRunSel_TrustedCall>
    30de:	bf00      	nop
    30e0:	b003      	add	sp, #12
    30e2:	f85d fb04 	ldr.w	pc, [sp], #4

000030e6 <Clock_Ip_SetScgVlprSel>:
    30e6:	b500      	push	{lr}
    30e8:	b083      	sub	sp, #12
    30ea:	9001      	str	r0, [sp, #4]
    30ec:	9b01      	ldr	r3, [sp, #4]
    30ee:	2b00      	cmp	r3, #0
    30f0:	d002      	beq.n	30f8 <Clock_Ip_SetScgVlprSel+0x12>
    30f2:	9801      	ldr	r0, [sp, #4]
    30f4:	f000 f912 	bl	331c <Clock_Ip_SetScgVlprSel_TrustedCall>
    30f8:	bf00      	nop
    30fa:	b003      	add	sp, #12
    30fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003100 <Clock_Ip_ResetScgHsrunSel>:
    3100:	b500      	push	{lr}
    3102:	b083      	sub	sp, #12
    3104:	9001      	str	r0, [sp, #4]
    3106:	9b01      	ldr	r3, [sp, #4]
    3108:	2b00      	cmp	r3, #0
    310a:	d002      	beq.n	3112 <Clock_Ip_ResetScgHsrunSel+0x12>
    310c:	9801      	ldr	r0, [sp, #4]
    310e:	f000 f925 	bl	335c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
    3112:	bf00      	nop
    3114:	b003      	add	sp, #12
    3116:	f85d fb04 	ldr.w	pc, [sp], #4

0000311a <Clock_Ip_SetScgHsrunSel>:
    311a:	b500      	push	{lr}
    311c:	b083      	sub	sp, #12
    311e:	9001      	str	r0, [sp, #4]
    3120:	9b01      	ldr	r3, [sp, #4]
    3122:	2b00      	cmp	r3, #0
    3124:	d002      	beq.n	312c <Clock_Ip_SetScgHsrunSel+0x12>
    3126:	9801      	ldr	r0, [sp, #4]
    3128:	f000 f936 	bl	3398 <Clock_Ip_SetScgHsrunSel_TrustedCall>
    312c:	bf00      	nop
    312e:	b003      	add	sp, #12
    3130:	f85d fb04 	ldr.w	pc, [sp], #4

00003134 <Clock_Ip_ResetSimRtcSel>:
    3134:	b500      	push	{lr}
    3136:	b083      	sub	sp, #12
    3138:	9001      	str	r0, [sp, #4]
    313a:	9b01      	ldr	r3, [sp, #4]
    313c:	2b00      	cmp	r3, #0
    313e:	d002      	beq.n	3146 <Clock_Ip_ResetSimRtcSel+0x12>
    3140:	9801      	ldr	r0, [sp, #4]
    3142:	f000 f949 	bl	33d8 <Clock_Ip_ResetSimRtcSel_TrustedCall>
    3146:	bf00      	nop
    3148:	b003      	add	sp, #12
    314a:	f85d fb04 	ldr.w	pc, [sp], #4

0000314e <Clock_Ip_SetSimRtcSel>:
    314e:	b500      	push	{lr}
    3150:	b083      	sub	sp, #12
    3152:	9001      	str	r0, [sp, #4]
    3154:	9b01      	ldr	r3, [sp, #4]
    3156:	2b00      	cmp	r3, #0
    3158:	d002      	beq.n	3160 <Clock_Ip_SetSimRtcSel+0x12>
    315a:	9801      	ldr	r0, [sp, #4]
    315c:	f000 f958 	bl	3410 <Clock_Ip_SetSimRtcSel_TrustedCall>
    3160:	bf00      	nop
    3162:	b003      	add	sp, #12
    3164:	f85d fb04 	ldr.w	pc, [sp], #4

00003168 <Clock_Ip_ResetSimLpoSel>:
    3168:	b500      	push	{lr}
    316a:	b083      	sub	sp, #12
    316c:	9001      	str	r0, [sp, #4]
    316e:	9b01      	ldr	r3, [sp, #4]
    3170:	2b00      	cmp	r3, #0
    3172:	d002      	beq.n	317a <Clock_Ip_ResetSimLpoSel+0x12>
    3174:	9801      	ldr	r0, [sp, #4]
    3176:	f000 f969 	bl	344c <Clock_Ip_ResetSimLpoSel_TrustedCall>
    317a:	bf00      	nop
    317c:	b003      	add	sp, #12
    317e:	f85d fb04 	ldr.w	pc, [sp], #4

00003182 <Clock_Ip_SetSimLpoSel>:
    3182:	b500      	push	{lr}
    3184:	b083      	sub	sp, #12
    3186:	9001      	str	r0, [sp, #4]
    3188:	9b01      	ldr	r3, [sp, #4]
    318a:	2b00      	cmp	r3, #0
    318c:	d002      	beq.n	3194 <Clock_Ip_SetSimLpoSel+0x12>
    318e:	9801      	ldr	r0, [sp, #4]
    3190:	f000 f978 	bl	3484 <Clock_Ip_SetSimLpoSel_TrustedCall>
    3194:	bf00      	nop
    3196:	b003      	add	sp, #12
    3198:	f85d fb04 	ldr.w	pc, [sp], #4

0000319c <Clock_Ip_ResetScgClkoutSel>:
    319c:	b500      	push	{lr}
    319e:	b083      	sub	sp, #12
    31a0:	9001      	str	r0, [sp, #4]
    31a2:	9b01      	ldr	r3, [sp, #4]
    31a4:	2b00      	cmp	r3, #0
    31a6:	d002      	beq.n	31ae <Clock_Ip_ResetScgClkoutSel+0x12>
    31a8:	9801      	ldr	r0, [sp, #4]
    31aa:	f000 f989 	bl	34c0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
    31ae:	bf00      	nop
    31b0:	b003      	add	sp, #12
    31b2:	f85d fb04 	ldr.w	pc, [sp], #4

000031b6 <Clock_Ip_SetScgClkoutSel>:
    31b6:	b500      	push	{lr}
    31b8:	b083      	sub	sp, #12
    31ba:	9001      	str	r0, [sp, #4]
    31bc:	9b01      	ldr	r3, [sp, #4]
    31be:	2b00      	cmp	r3, #0
    31c0:	d002      	beq.n	31c8 <Clock_Ip_SetScgClkoutSel+0x12>
    31c2:	9801      	ldr	r0, [sp, #4]
    31c4:	f000 f998 	bl	34f8 <Clock_Ip_SetScgClkoutSel_TrustedCall>
    31c8:	bf00      	nop
    31ca:	b003      	add	sp, #12
    31cc:	f85d fb04 	ldr.w	pc, [sp], #4

000031d0 <Clock_Ip_ResetSimFtmoptSel>:
    31d0:	b500      	push	{lr}
    31d2:	b083      	sub	sp, #12
    31d4:	9001      	str	r0, [sp, #4]
    31d6:	9b01      	ldr	r3, [sp, #4]
    31d8:	2b00      	cmp	r3, #0
    31da:	d002      	beq.n	31e2 <Clock_Ip_ResetSimFtmoptSel+0x12>
    31dc:	9801      	ldr	r0, [sp, #4]
    31de:	f000 f9a9 	bl	3534 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
    31e2:	bf00      	nop
    31e4:	b003      	add	sp, #12
    31e6:	f85d fb04 	ldr.w	pc, [sp], #4

000031ea <Clock_Ip_SetSimFtmoptSel>:
    31ea:	b500      	push	{lr}
    31ec:	b083      	sub	sp, #12
    31ee:	9001      	str	r0, [sp, #4]
    31f0:	9b01      	ldr	r3, [sp, #4]
    31f2:	2b00      	cmp	r3, #0
    31f4:	d002      	beq.n	31fc <Clock_Ip_SetSimFtmoptSel+0x12>
    31f6:	9801      	ldr	r0, [sp, #4]
    31f8:	f000 f9e6 	bl	35c8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
    31fc:	bf00      	nop
    31fe:	b003      	add	sp, #12
    3200:	f85d fb04 	ldr.w	pc, [sp], #4

00003204 <Clock_Ip_ResetSimClkoutSel>:
    3204:	b500      	push	{lr}
    3206:	b083      	sub	sp, #12
    3208:	9001      	str	r0, [sp, #4]
    320a:	9b01      	ldr	r3, [sp, #4]
    320c:	2b00      	cmp	r3, #0
    320e:	d002      	beq.n	3216 <Clock_Ip_ResetSimClkoutSel+0x12>
    3210:	9801      	ldr	r0, [sp, #4]
    3212:	f000 fa25 	bl	3660 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
    3216:	bf00      	nop
    3218:	b003      	add	sp, #12
    321a:	f85d fb04 	ldr.w	pc, [sp], #4

0000321e <Clock_Ip_SetSimClkoutSel>:
    321e:	b500      	push	{lr}
    3220:	b083      	sub	sp, #12
    3222:	9001      	str	r0, [sp, #4]
    3224:	9b01      	ldr	r3, [sp, #4]
    3226:	2b00      	cmp	r3, #0
    3228:	d002      	beq.n	3230 <Clock_Ip_SetSimClkoutSel+0x12>
    322a:	9801      	ldr	r0, [sp, #4]
    322c:	f000 fa2a 	bl	3684 <Clock_Ip_SetSimClkoutSel_TrustedCall>
    3230:	bf00      	nop
    3232:	b003      	add	sp, #12
    3234:	f85d fb04 	ldr.w	pc, [sp], #4

00003238 <Clock_Ip_ResetPccPcsSelect>:
    3238:	b500      	push	{lr}
    323a:	b083      	sub	sp, #12
    323c:	9001      	str	r0, [sp, #4]
    323e:	9b01      	ldr	r3, [sp, #4]
    3240:	2b00      	cmp	r3, #0
    3242:	d002      	beq.n	324a <Clock_Ip_ResetPccPcsSelect+0x12>
    3244:	9801      	ldr	r0, [sp, #4]
    3246:	f000 fa3b 	bl	36c0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
    324a:	bf00      	nop
    324c:	b003      	add	sp, #12
    324e:	f85d fb04 	ldr.w	pc, [sp], #4

00003252 <Clock_Ip_SetPccPcsSelect>:
    3252:	b500      	push	{lr}
    3254:	b083      	sub	sp, #12
    3256:	9001      	str	r0, [sp, #4]
    3258:	9b01      	ldr	r3, [sp, #4]
    325a:	2b00      	cmp	r3, #0
    325c:	d002      	beq.n	3264 <Clock_Ip_SetPccPcsSelect+0x12>
    325e:	9801      	ldr	r0, [sp, #4]
    3260:	f000 fa56 	bl	3710 <Clock_Ip_SetPccPcsSelect_TrustedCall>
    3264:	bf00      	nop
    3266:	b003      	add	sp, #12
    3268:	f85d fb04 	ldr.w	pc, [sp], #4

0000326c <Clock_Ip_ResetSimTraceSel>:
    326c:	b500      	push	{lr}
    326e:	b083      	sub	sp, #12
    3270:	9001      	str	r0, [sp, #4]
    3272:	9b01      	ldr	r3, [sp, #4]
    3274:	2b00      	cmp	r3, #0
    3276:	d002      	beq.n	327e <Clock_Ip_ResetSimTraceSel+0x12>
    3278:	9801      	ldr	r0, [sp, #4]
    327a:	f000 fa79 	bl	3770 <Clock_Ip_ResetSimTraceSel_TrustedCall>
    327e:	bf00      	nop
    3280:	b003      	add	sp, #12
    3282:	f85d fb04 	ldr.w	pc, [sp], #4

00003286 <Clock_Ip_SetSimTraceSel>:
    3286:	b500      	push	{lr}
    3288:	b083      	sub	sp, #12
    328a:	9001      	str	r0, [sp, #4]
    328c:	9b01      	ldr	r3, [sp, #4]
    328e:	2b00      	cmp	r3, #0
    3290:	d002      	beq.n	3298 <Clock_Ip_SetSimTraceSel+0x12>
    3292:	9801      	ldr	r0, [sp, #4]
    3294:	f000 fa8a 	bl	37ac <Clock_Ip_SetSimTraceSel_TrustedCall>
    3298:	bf00      	nop
    329a:	b003      	add	sp, #12
    329c:	f85d fb04 	ldr.w	pc, [sp], #4

000032a0 <Clock_Ip_ResetScgRunSel_TrustedCall>:
    32a0:	b084      	sub	sp, #16
    32a2:	9001      	str	r0, [sp, #4]
    32a4:	4b0b      	ldr	r3, [pc, #44]	; (32d4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    32a6:	795b      	ldrb	r3, [r3, #5]
    32a8:	9303      	str	r3, [sp, #12]
    32aa:	4b0b      	ldr	r3, [pc, #44]	; (32d8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    32ac:	695b      	ldr	r3, [r3, #20]
    32ae:	9302      	str	r3, [sp, #8]
    32b0:	9b02      	ldr	r3, [sp, #8]
    32b2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    32b6:	9302      	str	r3, [sp, #8]
    32b8:	9b03      	ldr	r3, [sp, #12]
    32ba:	061b      	lsls	r3, r3, #24
    32bc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    32c0:	9a02      	ldr	r2, [sp, #8]
    32c2:	4313      	orrs	r3, r2
    32c4:	9302      	str	r3, [sp, #8]
    32c6:	4a04      	ldr	r2, [pc, #16]	; (32d8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    32c8:	9b02      	ldr	r3, [sp, #8]
    32ca:	6153      	str	r3, [r2, #20]
    32cc:	bf00      	nop
    32ce:	b004      	add	sp, #16
    32d0:	4770      	bx	lr
    32d2:	bf00      	nop
    32d4:	0000b99c 	.word	0x0000b99c
    32d8:	40064000 	.word	0x40064000

000032dc <Clock_Ip_SetScgRunSel_TrustedCall>:
    32dc:	b084      	sub	sp, #16
    32de:	9001      	str	r0, [sp, #4]
    32e0:	9b01      	ldr	r3, [sp, #4]
    32e2:	685b      	ldr	r3, [r3, #4]
    32e4:	4a0b      	ldr	r2, [pc, #44]	; (3314 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    32e6:	5cd3      	ldrb	r3, [r2, r3]
    32e8:	9303      	str	r3, [sp, #12]
    32ea:	4b0b      	ldr	r3, [pc, #44]	; (3318 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    32ec:	695b      	ldr	r3, [r3, #20]
    32ee:	9302      	str	r3, [sp, #8]
    32f0:	9b02      	ldr	r3, [sp, #8]
    32f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    32f6:	9302      	str	r3, [sp, #8]
    32f8:	9b03      	ldr	r3, [sp, #12]
    32fa:	061b      	lsls	r3, r3, #24
    32fc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3300:	9a02      	ldr	r2, [sp, #8]
    3302:	4313      	orrs	r3, r2
    3304:	9302      	str	r3, [sp, #8]
    3306:	4a04      	ldr	r2, [pc, #16]	; (3318 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3308:	9b02      	ldr	r3, [sp, #8]
    330a:	6153      	str	r3, [r2, #20]
    330c:	bf00      	nop
    330e:	b004      	add	sp, #16
    3310:	4770      	bx	lr
    3312:	bf00      	nop
    3314:	0000b99c 	.word	0x0000b99c
    3318:	40064000 	.word	0x40064000

0000331c <Clock_Ip_SetScgVlprSel_TrustedCall>:
    331c:	b084      	sub	sp, #16
    331e:	9001      	str	r0, [sp, #4]
    3320:	9b01      	ldr	r3, [sp, #4]
    3322:	685b      	ldr	r3, [r3, #4]
    3324:	4a0b      	ldr	r2, [pc, #44]	; (3354 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3326:	5cd3      	ldrb	r3, [r2, r3]
    3328:	9303      	str	r3, [sp, #12]
    332a:	4b0b      	ldr	r3, [pc, #44]	; (3358 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    332c:	699b      	ldr	r3, [r3, #24]
    332e:	9302      	str	r3, [sp, #8]
    3330:	9b02      	ldr	r3, [sp, #8]
    3332:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3336:	9302      	str	r3, [sp, #8]
    3338:	9b03      	ldr	r3, [sp, #12]
    333a:	061b      	lsls	r3, r3, #24
    333c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3340:	9a02      	ldr	r2, [sp, #8]
    3342:	4313      	orrs	r3, r2
    3344:	9302      	str	r3, [sp, #8]
    3346:	4a04      	ldr	r2, [pc, #16]	; (3358 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3348:	9b02      	ldr	r3, [sp, #8]
    334a:	6193      	str	r3, [r2, #24]
    334c:	bf00      	nop
    334e:	b004      	add	sp, #16
    3350:	4770      	bx	lr
    3352:	bf00      	nop
    3354:	0000b99c 	.word	0x0000b99c
    3358:	40064000 	.word	0x40064000

0000335c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:
    335c:	b084      	sub	sp, #16
    335e:	9001      	str	r0, [sp, #4]
    3360:	4b0b      	ldr	r3, [pc, #44]	; (3390 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    3362:	795b      	ldrb	r3, [r3, #5]
    3364:	9303      	str	r3, [sp, #12]
    3366:	4b0b      	ldr	r3, [pc, #44]	; (3394 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3368:	69db      	ldr	r3, [r3, #28]
    336a:	9302      	str	r3, [sp, #8]
    336c:	9b02      	ldr	r3, [sp, #8]
    336e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3372:	9302      	str	r3, [sp, #8]
    3374:	9b03      	ldr	r3, [sp, #12]
    3376:	061b      	lsls	r3, r3, #24
    3378:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    337c:	9a02      	ldr	r2, [sp, #8]
    337e:	4313      	orrs	r3, r2
    3380:	9302      	str	r3, [sp, #8]
    3382:	4a04      	ldr	r2, [pc, #16]	; (3394 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3384:	9b02      	ldr	r3, [sp, #8]
    3386:	61d3      	str	r3, [r2, #28]
    3388:	bf00      	nop
    338a:	b004      	add	sp, #16
    338c:	4770      	bx	lr
    338e:	bf00      	nop
    3390:	0000b99c 	.word	0x0000b99c
    3394:	40064000 	.word	0x40064000

00003398 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
    3398:	b084      	sub	sp, #16
    339a:	9001      	str	r0, [sp, #4]
    339c:	9b01      	ldr	r3, [sp, #4]
    339e:	685b      	ldr	r3, [r3, #4]
    33a0:	4a0b      	ldr	r2, [pc, #44]	; (33d0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    33a2:	5cd3      	ldrb	r3, [r2, r3]
    33a4:	9303      	str	r3, [sp, #12]
    33a6:	4b0b      	ldr	r3, [pc, #44]	; (33d4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    33a8:	69db      	ldr	r3, [r3, #28]
    33aa:	9302      	str	r3, [sp, #8]
    33ac:	9b02      	ldr	r3, [sp, #8]
    33ae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    33b2:	9302      	str	r3, [sp, #8]
    33b4:	9b03      	ldr	r3, [sp, #12]
    33b6:	061b      	lsls	r3, r3, #24
    33b8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    33bc:	9a02      	ldr	r2, [sp, #8]
    33be:	4313      	orrs	r3, r2
    33c0:	9302      	str	r3, [sp, #8]
    33c2:	4a04      	ldr	r2, [pc, #16]	; (33d4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    33c4:	9b02      	ldr	r3, [sp, #8]
    33c6:	61d3      	str	r3, [r2, #28]
    33c8:	bf00      	nop
    33ca:	b004      	add	sp, #16
    33cc:	4770      	bx	lr
    33ce:	bf00      	nop
    33d0:	0000b99c 	.word	0x0000b99c
    33d4:	40064000 	.word	0x40064000

000033d8 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
    33d8:	b084      	sub	sp, #16
    33da:	9001      	str	r0, [sp, #4]
    33dc:	4b0a      	ldr	r3, [pc, #40]	; (3408 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    33de:	7b9b      	ldrb	r3, [r3, #14]
    33e0:	9303      	str	r3, [sp, #12]
    33e2:	4b0a      	ldr	r3, [pc, #40]	; (340c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    33e4:	691b      	ldr	r3, [r3, #16]
    33e6:	9302      	str	r3, [sp, #8]
    33e8:	9b02      	ldr	r3, [sp, #8]
    33ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    33ee:	9302      	str	r3, [sp, #8]
    33f0:	9b03      	ldr	r3, [sp, #12]
    33f2:	011b      	lsls	r3, r3, #4
    33f4:	9a02      	ldr	r2, [sp, #8]
    33f6:	4313      	orrs	r3, r2
    33f8:	9302      	str	r3, [sp, #8]
    33fa:	4a04      	ldr	r2, [pc, #16]	; (340c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    33fc:	9b02      	ldr	r3, [sp, #8]
    33fe:	6113      	str	r3, [r2, #16]
    3400:	bf00      	nop
    3402:	b004      	add	sp, #16
    3404:	4770      	bx	lr
    3406:	bf00      	nop
    3408:	0000b944 	.word	0x0000b944
    340c:	40048000 	.word	0x40048000

00003410 <Clock_Ip_SetSimRtcSel_TrustedCall>:
    3410:	b084      	sub	sp, #16
    3412:	9001      	str	r0, [sp, #4]
    3414:	9b01      	ldr	r3, [sp, #4]
    3416:	685b      	ldr	r3, [r3, #4]
    3418:	4a0a      	ldr	r2, [pc, #40]	; (3444 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    341a:	5cd3      	ldrb	r3, [r2, r3]
    341c:	9303      	str	r3, [sp, #12]
    341e:	4b0a      	ldr	r3, [pc, #40]	; (3448 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3420:	691b      	ldr	r3, [r3, #16]
    3422:	9302      	str	r3, [sp, #8]
    3424:	9b02      	ldr	r3, [sp, #8]
    3426:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    342a:	9302      	str	r3, [sp, #8]
    342c:	9b03      	ldr	r3, [sp, #12]
    342e:	011b      	lsls	r3, r3, #4
    3430:	9a02      	ldr	r2, [sp, #8]
    3432:	4313      	orrs	r3, r2
    3434:	9302      	str	r3, [sp, #8]
    3436:	4a04      	ldr	r2, [pc, #16]	; (3448 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3438:	9b02      	ldr	r3, [sp, #8]
    343a:	6113      	str	r3, [r2, #16]
    343c:	bf00      	nop
    343e:	b004      	add	sp, #16
    3440:	4770      	bx	lr
    3442:	bf00      	nop
    3444:	0000b944 	.word	0x0000b944
    3448:	40048000 	.word	0x40048000

0000344c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
    344c:	b084      	sub	sp, #16
    344e:	9001      	str	r0, [sp, #4]
    3450:	4b0a      	ldr	r3, [pc, #40]	; (347c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3452:	785b      	ldrb	r3, [r3, #1]
    3454:	9303      	str	r3, [sp, #12]
    3456:	4b0a      	ldr	r3, [pc, #40]	; (3480 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3458:	691b      	ldr	r3, [r3, #16]
    345a:	9302      	str	r3, [sp, #8]
    345c:	9b02      	ldr	r3, [sp, #8]
    345e:	f023 030c 	bic.w	r3, r3, #12
    3462:	9302      	str	r3, [sp, #8]
    3464:	9b03      	ldr	r3, [sp, #12]
    3466:	009b      	lsls	r3, r3, #2
    3468:	9a02      	ldr	r2, [sp, #8]
    346a:	4313      	orrs	r3, r2
    346c:	9302      	str	r3, [sp, #8]
    346e:	4a04      	ldr	r2, [pc, #16]	; (3480 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3470:	9b02      	ldr	r3, [sp, #8]
    3472:	6113      	str	r3, [r2, #16]
    3474:	bf00      	nop
    3476:	b004      	add	sp, #16
    3478:	4770      	bx	lr
    347a:	bf00      	nop
    347c:	0000b9fc 	.word	0x0000b9fc
    3480:	40048000 	.word	0x40048000

00003484 <Clock_Ip_SetSimLpoSel_TrustedCall>:
    3484:	b084      	sub	sp, #16
    3486:	9001      	str	r0, [sp, #4]
    3488:	9b01      	ldr	r3, [sp, #4]
    348a:	685b      	ldr	r3, [r3, #4]
    348c:	4a0a      	ldr	r2, [pc, #40]	; (34b8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    348e:	5cd3      	ldrb	r3, [r2, r3]
    3490:	9303      	str	r3, [sp, #12]
    3492:	4b0a      	ldr	r3, [pc, #40]	; (34bc <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3494:	691b      	ldr	r3, [r3, #16]
    3496:	9302      	str	r3, [sp, #8]
    3498:	9b02      	ldr	r3, [sp, #8]
    349a:	f023 030c 	bic.w	r3, r3, #12
    349e:	9302      	str	r3, [sp, #8]
    34a0:	9b03      	ldr	r3, [sp, #12]
    34a2:	009b      	lsls	r3, r3, #2
    34a4:	9a02      	ldr	r2, [sp, #8]
    34a6:	4313      	orrs	r3, r2
    34a8:	9302      	str	r3, [sp, #8]
    34aa:	4a04      	ldr	r2, [pc, #16]	; (34bc <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    34ac:	9b02      	ldr	r3, [sp, #8]
    34ae:	6113      	str	r3, [r2, #16]
    34b0:	bf00      	nop
    34b2:	b004      	add	sp, #16
    34b4:	4770      	bx	lr
    34b6:	bf00      	nop
    34b8:	0000b9fc 	.word	0x0000b9fc
    34bc:	40048000 	.word	0x40048000

000034c0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
    34c0:	b084      	sub	sp, #16
    34c2:	9001      	str	r0, [sp, #4]
    34c4:	4b0a      	ldr	r3, [pc, #40]	; (34f0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    34c6:	795b      	ldrb	r3, [r3, #5]
    34c8:	9303      	str	r3, [sp, #12]
    34ca:	4b0a      	ldr	r3, [pc, #40]	; (34f4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    34cc:	6a1b      	ldr	r3, [r3, #32]
    34ce:	9302      	str	r3, [sp, #8]
    34d0:	9b02      	ldr	r3, [sp, #8]
    34d2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    34d6:	9302      	str	r3, [sp, #8]
    34d8:	9b03      	ldr	r3, [sp, #12]
    34da:	061b      	lsls	r3, r3, #24
    34dc:	9a02      	ldr	r2, [sp, #8]
    34de:	4313      	orrs	r3, r2
    34e0:	9302      	str	r3, [sp, #8]
    34e2:	4a04      	ldr	r2, [pc, #16]	; (34f4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    34e4:	9b02      	ldr	r3, [sp, #8]
    34e6:	6213      	str	r3, [r2, #32]
    34e8:	bf00      	nop
    34ea:	b004      	add	sp, #16
    34ec:	4770      	bx	lr
    34ee:	bf00      	nop
    34f0:	0000b99c 	.word	0x0000b99c
    34f4:	40064000 	.word	0x40064000

000034f8 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
    34f8:	b084      	sub	sp, #16
    34fa:	9001      	str	r0, [sp, #4]
    34fc:	9b01      	ldr	r3, [sp, #4]
    34fe:	685b      	ldr	r3, [r3, #4]
    3500:	4a0a      	ldr	r2, [pc, #40]	; (352c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3502:	5cd3      	ldrb	r3, [r2, r3]
    3504:	9303      	str	r3, [sp, #12]
    3506:	4b0a      	ldr	r3, [pc, #40]	; (3530 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3508:	6a1b      	ldr	r3, [r3, #32]
    350a:	9302      	str	r3, [sp, #8]
    350c:	9b02      	ldr	r3, [sp, #8]
    350e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3512:	9302      	str	r3, [sp, #8]
    3514:	9b03      	ldr	r3, [sp, #12]
    3516:	061b      	lsls	r3, r3, #24
    3518:	9a02      	ldr	r2, [sp, #8]
    351a:	4313      	orrs	r3, r2
    351c:	9302      	str	r3, [sp, #8]
    351e:	4a04      	ldr	r2, [pc, #16]	; (3530 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3520:	9b02      	ldr	r3, [sp, #8]
    3522:	6213      	str	r3, [r2, #32]
    3524:	bf00      	nop
    3526:	b004      	add	sp, #16
    3528:	4770      	bx	lr
    352a:	bf00      	nop
    352c:	0000b99c 	.word	0x0000b99c
    3530:	40064000 	.word	0x40064000

00003534 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
    3534:	b086      	sub	sp, #24
    3536:	9001      	str	r0, [sp, #4]
    3538:	4b20      	ldr	r3, [pc, #128]	; (35bc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    353a:	795b      	ldrb	r3, [r3, #5]
    353c:	9304      	str	r3, [sp, #16]
    353e:	9b01      	ldr	r3, [sp, #4]
    3540:	681a      	ldr	r2, [r3, #0]
    3542:	491f      	ldr	r1, [pc, #124]	; (35c0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3544:	4613      	mov	r3, r2
    3546:	00db      	lsls	r3, r3, #3
    3548:	4413      	add	r3, r2
    354a:	440b      	add	r3, r1
    354c:	781b      	ldrb	r3, [r3, #0]
    354e:	9303      	str	r3, [sp, #12]
    3550:	4b1c      	ldr	r3, [pc, #112]	; (35c4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3552:	68db      	ldr	r3, [r3, #12]
    3554:	9305      	str	r3, [sp, #20]
    3556:	9b03      	ldr	r3, [sp, #12]
    3558:	2b03      	cmp	r3, #3
    355a:	d813      	bhi.n	3584 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    355c:	9b03      	ldr	r3, [sp, #12]
    355e:	005b      	lsls	r3, r3, #1
    3560:	3318      	adds	r3, #24
    3562:	2203      	movs	r2, #3
    3564:	fa02 f303 	lsl.w	r3, r2, r3
    3568:	43db      	mvns	r3, r3
    356a:	9a05      	ldr	r2, [sp, #20]
    356c:	4013      	ands	r3, r2
    356e:	9305      	str	r3, [sp, #20]
    3570:	9b03      	ldr	r3, [sp, #12]
    3572:	005b      	lsls	r3, r3, #1
    3574:	3318      	adds	r3, #24
    3576:	9a04      	ldr	r2, [sp, #16]
    3578:	fa02 f303 	lsl.w	r3, r2, r3
    357c:	9a05      	ldr	r2, [sp, #20]
    357e:	4313      	orrs	r3, r2
    3580:	9305      	str	r3, [sp, #20]
    3582:	e014      	b.n	35ae <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    3584:	9b03      	ldr	r3, [sp, #12]
    3586:	3b04      	subs	r3, #4
    3588:	005b      	lsls	r3, r3, #1
    358a:	3310      	adds	r3, #16
    358c:	2203      	movs	r2, #3
    358e:	fa02 f303 	lsl.w	r3, r2, r3
    3592:	43db      	mvns	r3, r3
    3594:	9a05      	ldr	r2, [sp, #20]
    3596:	4013      	ands	r3, r2
    3598:	9305      	str	r3, [sp, #20]
    359a:	9b03      	ldr	r3, [sp, #12]
    359c:	3b04      	subs	r3, #4
    359e:	005b      	lsls	r3, r3, #1
    35a0:	3310      	adds	r3, #16
    35a2:	9a04      	ldr	r2, [sp, #16]
    35a4:	fa02 f303 	lsl.w	r3, r2, r3
    35a8:	9a05      	ldr	r2, [sp, #20]
    35aa:	4313      	orrs	r3, r2
    35ac:	9305      	str	r3, [sp, #20]
    35ae:	4a05      	ldr	r2, [pc, #20]	; (35c4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    35b0:	9b05      	ldr	r3, [sp, #20]
    35b2:	60d3      	str	r3, [r2, #12]
    35b4:	bf00      	nop
    35b6:	b006      	add	sp, #24
    35b8:	4770      	bx	lr
    35ba:	bf00      	nop
    35bc:	0000b944 	.word	0x0000b944
    35c0:	0000b634 	.word	0x0000b634
    35c4:	40048000 	.word	0x40048000

000035c8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
    35c8:	b086      	sub	sp, #24
    35ca:	9001      	str	r0, [sp, #4]
    35cc:	9b01      	ldr	r3, [sp, #4]
    35ce:	685b      	ldr	r3, [r3, #4]
    35d0:	4a20      	ldr	r2, [pc, #128]	; (3654 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    35d2:	5cd3      	ldrb	r3, [r2, r3]
    35d4:	9304      	str	r3, [sp, #16]
    35d6:	9b01      	ldr	r3, [sp, #4]
    35d8:	681a      	ldr	r2, [r3, #0]
    35da:	491f      	ldr	r1, [pc, #124]	; (3658 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    35dc:	4613      	mov	r3, r2
    35de:	00db      	lsls	r3, r3, #3
    35e0:	4413      	add	r3, r2
    35e2:	440b      	add	r3, r1
    35e4:	781b      	ldrb	r3, [r3, #0]
    35e6:	9303      	str	r3, [sp, #12]
    35e8:	4b1c      	ldr	r3, [pc, #112]	; (365c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    35ea:	68db      	ldr	r3, [r3, #12]
    35ec:	9305      	str	r3, [sp, #20]
    35ee:	9b03      	ldr	r3, [sp, #12]
    35f0:	2b03      	cmp	r3, #3
    35f2:	d813      	bhi.n	361c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    35f4:	9b03      	ldr	r3, [sp, #12]
    35f6:	005b      	lsls	r3, r3, #1
    35f8:	3318      	adds	r3, #24
    35fa:	2203      	movs	r2, #3
    35fc:	fa02 f303 	lsl.w	r3, r2, r3
    3600:	43db      	mvns	r3, r3
    3602:	9a05      	ldr	r2, [sp, #20]
    3604:	4013      	ands	r3, r2
    3606:	9305      	str	r3, [sp, #20]
    3608:	9b03      	ldr	r3, [sp, #12]
    360a:	005b      	lsls	r3, r3, #1
    360c:	3318      	adds	r3, #24
    360e:	9a04      	ldr	r2, [sp, #16]
    3610:	fa02 f303 	lsl.w	r3, r2, r3
    3614:	9a05      	ldr	r2, [sp, #20]
    3616:	4313      	orrs	r3, r2
    3618:	9305      	str	r3, [sp, #20]
    361a:	e014      	b.n	3646 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    361c:	9b03      	ldr	r3, [sp, #12]
    361e:	3b04      	subs	r3, #4
    3620:	005b      	lsls	r3, r3, #1
    3622:	3310      	adds	r3, #16
    3624:	2203      	movs	r2, #3
    3626:	fa02 f303 	lsl.w	r3, r2, r3
    362a:	43db      	mvns	r3, r3
    362c:	9a05      	ldr	r2, [sp, #20]
    362e:	4013      	ands	r3, r2
    3630:	9305      	str	r3, [sp, #20]
    3632:	9b03      	ldr	r3, [sp, #12]
    3634:	3b04      	subs	r3, #4
    3636:	005b      	lsls	r3, r3, #1
    3638:	3310      	adds	r3, #16
    363a:	9a04      	ldr	r2, [sp, #16]
    363c:	fa02 f303 	lsl.w	r3, r2, r3
    3640:	9a05      	ldr	r2, [sp, #20]
    3642:	4313      	orrs	r3, r2
    3644:	9305      	str	r3, [sp, #20]
    3646:	4a05      	ldr	r2, [pc, #20]	; (365c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3648:	9b05      	ldr	r3, [sp, #20]
    364a:	60d3      	str	r3, [r2, #12]
    364c:	bf00      	nop
    364e:	b006      	add	sp, #24
    3650:	4770      	bx	lr
    3652:	bf00      	nop
    3654:	0000b944 	.word	0x0000b944
    3658:	0000b634 	.word	0x0000b634
    365c:	40048000 	.word	0x40048000

00003660 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
    3660:	b084      	sub	sp, #16
    3662:	9001      	str	r0, [sp, #4]
    3664:	4b06      	ldr	r3, [pc, #24]	; (3680 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3666:	685b      	ldr	r3, [r3, #4]
    3668:	9303      	str	r3, [sp, #12]
    366a:	9b03      	ldr	r3, [sp, #12]
    366c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3670:	9303      	str	r3, [sp, #12]
    3672:	4a03      	ldr	r2, [pc, #12]	; (3680 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3674:	9b03      	ldr	r3, [sp, #12]
    3676:	6053      	str	r3, [r2, #4]
    3678:	bf00      	nop
    367a:	b004      	add	sp, #16
    367c:	4770      	bx	lr
    367e:	bf00      	nop
    3680:	40048000 	.word	0x40048000

00003684 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
    3684:	b084      	sub	sp, #16
    3686:	9001      	str	r0, [sp, #4]
    3688:	9b01      	ldr	r3, [sp, #4]
    368a:	685b      	ldr	r3, [r3, #4]
    368c:	4a0a      	ldr	r2, [pc, #40]	; (36b8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    368e:	5cd3      	ldrb	r3, [r2, r3]
    3690:	9303      	str	r3, [sp, #12]
    3692:	4b0a      	ldr	r3, [pc, #40]	; (36bc <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3694:	685b      	ldr	r3, [r3, #4]
    3696:	9302      	str	r3, [sp, #8]
    3698:	9b02      	ldr	r3, [sp, #8]
    369a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    369e:	9302      	str	r3, [sp, #8]
    36a0:	9b03      	ldr	r3, [sp, #12]
    36a2:	011b      	lsls	r3, r3, #4
    36a4:	9a02      	ldr	r2, [sp, #8]
    36a6:	4313      	orrs	r3, r2
    36a8:	9302      	str	r3, [sp, #8]
    36aa:	4a04      	ldr	r2, [pc, #16]	; (36bc <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    36ac:	9b02      	ldr	r3, [sp, #8]
    36ae:	6053      	str	r3, [r2, #4]
    36b0:	bf00      	nop
    36b2:	b004      	add	sp, #16
    36b4:	4770      	bx	lr
    36b6:	bf00      	nop
    36b8:	0000b944 	.word	0x0000b944
    36bc:	40048000 	.word	0x40048000

000036c0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
    36c0:	b084      	sub	sp, #16
    36c2:	9001      	str	r0, [sp, #4]
    36c4:	9b01      	ldr	r3, [sp, #4]
    36c6:	681a      	ldr	r2, [r3, #0]
    36c8:	490f      	ldr	r1, [pc, #60]	; (3708 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    36ca:	4613      	mov	r3, r2
    36cc:	00db      	lsls	r3, r3, #3
    36ce:	4413      	add	r3, r2
    36d0:	440b      	add	r3, r1
    36d2:	3304      	adds	r3, #4
    36d4:	781b      	ldrb	r3, [r3, #0]
    36d6:	9303      	str	r3, [sp, #12]
    36d8:	4a0c      	ldr	r2, [pc, #48]	; (370c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36da:	9b03      	ldr	r3, [sp, #12]
    36dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    36e0:	490a      	ldr	r1, [pc, #40]	; (370c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    36e6:	9b03      	ldr	r3, [sp, #12]
    36e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    36ec:	4a07      	ldr	r2, [pc, #28]	; (370c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36ee:	9b03      	ldr	r3, [sp, #12]
    36f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    36f4:	4905      	ldr	r1, [pc, #20]	; (370c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36f6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    36fa:	9b03      	ldr	r3, [sp, #12]
    36fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    3700:	bf00      	nop
    3702:	b004      	add	sp, #16
    3704:	4770      	bx	lr
    3706:	bf00      	nop
    3708:	0000b634 	.word	0x0000b634
    370c:	40065000 	.word	0x40065000

00003710 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
    3710:	b086      	sub	sp, #24
    3712:	9001      	str	r0, [sp, #4]
    3714:	9b01      	ldr	r3, [sp, #4]
    3716:	681a      	ldr	r2, [r3, #0]
    3718:	4912      	ldr	r1, [pc, #72]	; (3764 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    371a:	4613      	mov	r3, r2
    371c:	00db      	lsls	r3, r3, #3
    371e:	4413      	add	r3, r2
    3720:	440b      	add	r3, r1
    3722:	3304      	adds	r3, #4
    3724:	781b      	ldrb	r3, [r3, #0]
    3726:	9305      	str	r3, [sp, #20]
    3728:	9b01      	ldr	r3, [sp, #4]
    372a:	685b      	ldr	r3, [r3, #4]
    372c:	4a0e      	ldr	r2, [pc, #56]	; (3768 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    372e:	5cd3      	ldrb	r3, [r2, r3]
    3730:	9304      	str	r3, [sp, #16]
    3732:	4a0e      	ldr	r2, [pc, #56]	; (376c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3734:	9b05      	ldr	r3, [sp, #20]
    3736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    373a:	9303      	str	r3, [sp, #12]
    373c:	9b03      	ldr	r3, [sp, #12]
    373e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3742:	9303      	str	r3, [sp, #12]
    3744:	9b04      	ldr	r3, [sp, #16]
    3746:	061b      	lsls	r3, r3, #24
    3748:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    374c:	9a03      	ldr	r2, [sp, #12]
    374e:	4313      	orrs	r3, r2
    3750:	9303      	str	r3, [sp, #12]
    3752:	4906      	ldr	r1, [pc, #24]	; (376c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3754:	9b05      	ldr	r3, [sp, #20]
    3756:	9a03      	ldr	r2, [sp, #12]
    3758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    375c:	bf00      	nop
    375e:	b006      	add	sp, #24
    3760:	4770      	bx	lr
    3762:	bf00      	nop
    3764:	0000b634 	.word	0x0000b634
    3768:	0000b9cc 	.word	0x0000b9cc
    376c:	40065000 	.word	0x40065000

00003770 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
    3770:	b084      	sub	sp, #16
    3772:	9001      	str	r0, [sp, #4]
    3774:	4b0b      	ldr	r3, [pc, #44]	; (37a4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3776:	7f1b      	ldrb	r3, [r3, #28]
    3778:	9303      	str	r3, [sp, #12]
    377a:	4b0b      	ldr	r3, [pc, #44]	; (37a8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    377c:	685b      	ldr	r3, [r3, #4]
    377e:	9302      	str	r3, [sp, #8]
    3780:	9b02      	ldr	r3, [sp, #8]
    3782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3786:	9302      	str	r3, [sp, #8]
    3788:	9b03      	ldr	r3, [sp, #12]
    378a:	031b      	lsls	r3, r3, #12
    378c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3790:	9a02      	ldr	r2, [sp, #8]
    3792:	4313      	orrs	r3, r2
    3794:	9302      	str	r3, [sp, #8]
    3796:	4a04      	ldr	r2, [pc, #16]	; (37a8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3798:	9b02      	ldr	r3, [sp, #8]
    379a:	6053      	str	r3, [r2, #4]
    379c:	bf00      	nop
    379e:	b004      	add	sp, #16
    37a0:	4770      	bx	lr
    37a2:	bf00      	nop
    37a4:	0000b944 	.word	0x0000b944
    37a8:	40048000 	.word	0x40048000

000037ac <Clock_Ip_SetSimTraceSel_TrustedCall>:
    37ac:	b084      	sub	sp, #16
    37ae:	9001      	str	r0, [sp, #4]
    37b0:	9b01      	ldr	r3, [sp, #4]
    37b2:	685b      	ldr	r3, [r3, #4]
    37b4:	4a0b      	ldr	r2, [pc, #44]	; (37e4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    37b6:	5cd3      	ldrb	r3, [r2, r3]
    37b8:	9303      	str	r3, [sp, #12]
    37ba:	4b0b      	ldr	r3, [pc, #44]	; (37e8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    37bc:	685b      	ldr	r3, [r3, #4]
    37be:	9302      	str	r3, [sp, #8]
    37c0:	9b02      	ldr	r3, [sp, #8]
    37c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    37c6:	9302      	str	r3, [sp, #8]
    37c8:	9b03      	ldr	r3, [sp, #12]
    37ca:	031b      	lsls	r3, r3, #12
    37cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    37d0:	9a02      	ldr	r2, [sp, #8]
    37d2:	4313      	orrs	r3, r2
    37d4:	9302      	str	r3, [sp, #8]
    37d6:	4a04      	ldr	r2, [pc, #16]	; (37e8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    37d8:	9b02      	ldr	r3, [sp, #8]
    37da:	6053      	str	r3, [r2, #4]
    37dc:	bf00      	nop
    37de:	b004      	add	sp, #16
    37e0:	4770      	bx	lr
    37e2:	bf00      	nop
    37e4:	0000b944 	.word	0x0000b944
    37e8:	40048000 	.word	0x40048000

000037ec <DisableSafeClock>:
    37ec:	b500      	push	{lr}
    37ee:	b085      	sub	sp, #20
    37f0:	9001      	str	r0, [sp, #4]
    37f2:	2300      	movs	r3, #0
    37f4:	f88d 300b 	strb.w	r3, [sp, #11]
    37f8:	9b01      	ldr	r3, [sp, #4]
    37fa:	2b00      	cmp	r3, #0
    37fc:	d037      	beq.n	386e <DisableSafeClock+0x82>
    37fe:	2300      	movs	r3, #0
    3800:	9303      	str	r3, [sp, #12]
    3802:	e02b      	b.n	385c <DisableSafeClock+0x70>
    3804:	4b29      	ldr	r3, [pc, #164]	; (38ac <DisableSafeClock+0xc0>)
    3806:	6819      	ldr	r1, [r3, #0]
    3808:	9a03      	ldr	r2, [sp, #12]
    380a:	4613      	mov	r3, r2
    380c:	005b      	lsls	r3, r3, #1
    380e:	4413      	add	r3, r2
    3810:	009b      	lsls	r3, r3, #2
    3812:	440b      	add	r3, r1
    3814:	3314      	adds	r3, #20
    3816:	681b      	ldr	r3, [r3, #0]
    3818:	2b05      	cmp	r3, #5
    381a:	d11c      	bne.n	3856 <DisableSafeClock+0x6a>
    381c:	2301      	movs	r3, #1
    381e:	f88d 300b 	strb.w	r3, [sp, #11]
    3822:	4b22      	ldr	r3, [pc, #136]	; (38ac <DisableSafeClock+0xc0>)
    3824:	6819      	ldr	r1, [r3, #0]
    3826:	9a03      	ldr	r2, [sp, #12]
    3828:	4613      	mov	r3, r2
    382a:	005b      	lsls	r3, r3, #1
    382c:	4413      	add	r3, r2
    382e:	009b      	lsls	r3, r3, #2
    3830:	440b      	add	r3, r1
    3832:	3318      	adds	r3, #24
    3834:	881b      	ldrh	r3, [r3, #0]
    3836:	2b00      	cmp	r3, #0
    3838:	d118      	bne.n	386c <DisableSafeClock+0x80>
    383a:	4b1d      	ldr	r3, [pc, #116]	; (38b0 <DisableSafeClock+0xc4>)
    383c:	791b      	ldrb	r3, [r3, #4]
    383e:	4619      	mov	r1, r3
    3840:	4a1c      	ldr	r2, [pc, #112]	; (38b4 <DisableSafeClock+0xc8>)
    3842:	460b      	mov	r3, r1
    3844:	005b      	lsls	r3, r3, #1
    3846:	440b      	add	r3, r1
    3848:	009b      	lsls	r3, r3, #2
    384a:	4413      	add	r3, r2
    384c:	3308      	adds	r3, #8
    384e:	681b      	ldr	r3, [r3, #0]
    3850:	2005      	movs	r0, #5
    3852:	4798      	blx	r3
    3854:	e00a      	b.n	386c <DisableSafeClock+0x80>
    3856:	9b03      	ldr	r3, [sp, #12]
    3858:	3301      	adds	r3, #1
    385a:	9303      	str	r3, [sp, #12]
    385c:	4b13      	ldr	r3, [pc, #76]	; (38ac <DisableSafeClock+0xc0>)
    385e:	681b      	ldr	r3, [r3, #0]
    3860:	7a1b      	ldrb	r3, [r3, #8]
    3862:	461a      	mov	r2, r3
    3864:	9b03      	ldr	r3, [sp, #12]
    3866:	4293      	cmp	r3, r2
    3868:	d3cc      	bcc.n	3804 <DisableSafeClock+0x18>
    386a:	e000      	b.n	386e <DisableSafeClock+0x82>
    386c:	bf00      	nop
    386e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3872:	f083 0301 	eor.w	r3, r3, #1
    3876:	b2db      	uxtb	r3, r3
    3878:	2b00      	cmp	r3, #0
    387a:	d013      	beq.n	38a4 <DisableSafeClock+0xb8>
    387c:	4b0e      	ldr	r3, [pc, #56]	; (38b8 <DisableSafeClock+0xcc>)
    387e:	781b      	ldrb	r3, [r3, #0]
    3880:	f083 0301 	eor.w	r3, r3, #1
    3884:	b2db      	uxtb	r3, r3
    3886:	2b00      	cmp	r3, #0
    3888:	d00c      	beq.n	38a4 <DisableSafeClock+0xb8>
    388a:	4b09      	ldr	r3, [pc, #36]	; (38b0 <DisableSafeClock+0xc4>)
    388c:	791b      	ldrb	r3, [r3, #4]
    388e:	4619      	mov	r1, r3
    3890:	4a08      	ldr	r2, [pc, #32]	; (38b4 <DisableSafeClock+0xc8>)
    3892:	460b      	mov	r3, r1
    3894:	005b      	lsls	r3, r3, #1
    3896:	440b      	add	r3, r1
    3898:	009b      	lsls	r3, r3, #2
    389a:	4413      	add	r3, r2
    389c:	3308      	adds	r3, #8
    389e:	681b      	ldr	r3, [r3, #0]
    38a0:	2005      	movs	r0, #5
    38a2:	4798      	blx	r3
    38a4:	bf00      	nop
    38a6:	b005      	add	sp, #20
    38a8:	f85d fb04 	ldr.w	pc, [sp], #4
    38ac:	1fff8ba8 	.word	0x1fff8ba8
    38b0:	0000b5c4 	.word	0x0000b5c4
    38b4:	0000bbf4 	.word	0x0000bbf4
    38b8:	1fff8b18 	.word	0x1fff8b18

000038bc <SetFircToResetValue_TrustedCall>:
    38bc:	4b06      	ldr	r3, [pc, #24]	; (38d8 <SetFircToResetValue_TrustedCall+0x1c>)
    38be:	2200      	movs	r2, #0
    38c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    38c4:	4b04      	ldr	r3, [pc, #16]	; (38d8 <SetFircToResetValue_TrustedCall+0x1c>)
    38c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    38ca:	4a03      	ldr	r2, [pc, #12]	; (38d8 <SetFircToResetValue_TrustedCall+0x1c>)
    38cc:	f043 0301 	orr.w	r3, r3, #1
    38d0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    38d4:	bf00      	nop
    38d6:	4770      	bx	lr
    38d8:	40064000 	.word	0x40064000

000038dc <SetSimLpoclksRegister_TrustedCall>:
    38dc:	b084      	sub	sp, #16
    38de:	9001      	str	r0, [sp, #4]
    38e0:	2303      	movs	r3, #3
    38e2:	9303      	str	r3, [sp, #12]
    38e4:	2300      	movs	r3, #0
    38e6:	9302      	str	r3, [sp, #8]
    38e8:	e028      	b.n	393c <SetSimLpoclksRegister_TrustedCall+0x60>
    38ea:	9b01      	ldr	r3, [sp, #4]
    38ec:	9a02      	ldr	r2, [sp, #8]
    38ee:	320d      	adds	r2, #13
    38f0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    38f4:	2b28      	cmp	r3, #40	; 0x28
    38f6:	d10b      	bne.n	3910 <SetSimLpoclksRegister_TrustedCall+0x34>
    38f8:	9a01      	ldr	r2, [sp, #4]
    38fa:	9b02      	ldr	r3, [sp, #8]
    38fc:	330d      	adds	r3, #13
    38fe:	00db      	lsls	r3, r3, #3
    3900:	4413      	add	r3, r2
    3902:	685b      	ldr	r3, [r3, #4]
    3904:	4a2b      	ldr	r2, [pc, #172]	; (39b4 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3906:	5cd3      	ldrb	r3, [r2, r3]
    3908:	011b      	lsls	r3, r3, #4
    390a:	9a03      	ldr	r2, [sp, #12]
    390c:	4313      	orrs	r3, r2
    390e:	9303      	str	r3, [sp, #12]
    3910:	9b01      	ldr	r3, [sp, #4]
    3912:	9a02      	ldr	r2, [sp, #8]
    3914:	320d      	adds	r2, #13
    3916:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    391a:	2b29      	cmp	r3, #41	; 0x29
    391c:	d10b      	bne.n	3936 <SetSimLpoclksRegister_TrustedCall+0x5a>
    391e:	9a01      	ldr	r2, [sp, #4]
    3920:	9b02      	ldr	r3, [sp, #8]
    3922:	330d      	adds	r3, #13
    3924:	00db      	lsls	r3, r3, #3
    3926:	4413      	add	r3, r2
    3928:	685b      	ldr	r3, [r3, #4]
    392a:	4a23      	ldr	r2, [pc, #140]	; (39b8 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    392c:	5cd3      	ldrb	r3, [r2, r3]
    392e:	009b      	lsls	r3, r3, #2
    3930:	9a03      	ldr	r2, [sp, #12]
    3932:	4313      	orrs	r3, r2
    3934:	9303      	str	r3, [sp, #12]
    3936:	9b02      	ldr	r3, [sp, #8]
    3938:	3301      	adds	r3, #1
    393a:	9302      	str	r3, [sp, #8]
    393c:	9b01      	ldr	r3, [sp, #4]
    393e:	7adb      	ldrb	r3, [r3, #11]
    3940:	461a      	mov	r2, r3
    3942:	9b02      	ldr	r3, [sp, #8]
    3944:	4293      	cmp	r3, r2
    3946:	d3d0      	bcc.n	38ea <SetSimLpoclksRegister_TrustedCall+0xe>
    3948:	2300      	movs	r3, #0
    394a:	9302      	str	r3, [sp, #8]
    394c:	e026      	b.n	399c <SetSimLpoclksRegister_TrustedCall+0xc0>
    394e:	9a01      	ldr	r2, [sp, #4]
    3950:	9b02      	ldr	r3, [sp, #8]
    3952:	334e      	adds	r3, #78	; 0x4e
    3954:	00db      	lsls	r3, r3, #3
    3956:	4413      	add	r3, r2
    3958:	685b      	ldr	r3, [r3, #4]
    395a:	2b12      	cmp	r3, #18
    395c:	d109      	bne.n	3972 <SetSimLpoclksRegister_TrustedCall+0x96>
    395e:	9a01      	ldr	r2, [sp, #4]
    3960:	9b02      	ldr	r3, [sp, #8]
    3962:	334e      	adds	r3, #78	; 0x4e
    3964:	00db      	lsls	r3, r3, #3
    3966:	4413      	add	r3, r2
    3968:	891b      	ldrh	r3, [r3, #8]
    396a:	005b      	lsls	r3, r3, #1
    396c:	9a03      	ldr	r2, [sp, #12]
    396e:	4313      	orrs	r3, r2
    3970:	9303      	str	r3, [sp, #12]
    3972:	9a01      	ldr	r2, [sp, #4]
    3974:	9b02      	ldr	r3, [sp, #8]
    3976:	334e      	adds	r3, #78	; 0x4e
    3978:	00db      	lsls	r3, r3, #3
    397a:	4413      	add	r3, r2
    397c:	685b      	ldr	r3, [r3, #4]
    397e:	2b13      	cmp	r3, #19
    3980:	d109      	bne.n	3996 <SetSimLpoclksRegister_TrustedCall+0xba>
    3982:	9a01      	ldr	r2, [sp, #4]
    3984:	9b02      	ldr	r3, [sp, #8]
    3986:	334e      	adds	r3, #78	; 0x4e
    3988:	00db      	lsls	r3, r3, #3
    398a:	4413      	add	r3, r2
    398c:	891b      	ldrh	r3, [r3, #8]
    398e:	461a      	mov	r2, r3
    3990:	9b03      	ldr	r3, [sp, #12]
    3992:	4313      	orrs	r3, r2
    3994:	9303      	str	r3, [sp, #12]
    3996:	9b02      	ldr	r3, [sp, #8]
    3998:	3301      	adds	r3, #1
    399a:	9302      	str	r3, [sp, #8]
    399c:	9b01      	ldr	r3, [sp, #4]
    399e:	7c1b      	ldrb	r3, [r3, #16]
    39a0:	461a      	mov	r2, r3
    39a2:	9b02      	ldr	r3, [sp, #8]
    39a4:	4293      	cmp	r3, r2
    39a6:	d3d2      	bcc.n	394e <SetSimLpoclksRegister_TrustedCall+0x72>
    39a8:	4a04      	ldr	r2, [pc, #16]	; (39bc <SetSimLpoclksRegister_TrustedCall+0xe0>)
    39aa:	9b03      	ldr	r3, [sp, #12]
    39ac:	6113      	str	r3, [r2, #16]
    39ae:	bf00      	nop
    39b0:	b004      	add	sp, #16
    39b2:	4770      	bx	lr
    39b4:	0000b944 	.word	0x0000b944
    39b8:	0000b9fc 	.word	0x0000b9fc
    39bc:	40048000 	.word	0x40048000

000039c0 <Clock_Ip_SpecificPlatformInitClock>:
    39c0:	b500      	push	{lr}
    39c2:	b089      	sub	sp, #36	; 0x24
    39c4:	9001      	str	r0, [sp, #4]
    39c6:	2300      	movs	r3, #0
    39c8:	f88d 301f 	strb.w	r3, [sp, #31]
    39cc:	4a21      	ldr	r2, [pc, #132]	; (3a54 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    39ce:	9b01      	ldr	r3, [sp, #4]
    39d0:	6013      	str	r3, [r2, #0]
    39d2:	4b21      	ldr	r3, [pc, #132]	; (3a58 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    39d4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    39d8:	f003 0301 	and.w	r3, r3, #1
    39dc:	2b00      	cmp	r3, #0
    39de:	d12e      	bne.n	3a3e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    39e0:	4b1e      	ldr	r3, [pc, #120]	; (3a5c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    39e2:	2200      	movs	r2, #0
    39e4:	701a      	strb	r2, [r3, #0]
    39e6:	f7ff ff69 	bl	38bc <SetFircToResetValue_TrustedCall>
    39ea:	aa03      	add	r2, sp, #12
    39ec:	a904      	add	r1, sp, #16
    39ee:	a805      	add	r0, sp, #20
    39f0:	f24c 3350 	movw	r3, #50000	; 0xc350
    39f4:	f7fe f8ae 	bl	1b54 <Clock_Ip_StartTimeout>
    39f8:	4b17      	ldr	r3, [pc, #92]	; (3a58 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    39fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    39fe:	0e1b      	lsrs	r3, r3, #24
    3a00:	f003 0301 	and.w	r3, r3, #1
    3a04:	9306      	str	r3, [sp, #24]
    3a06:	9a03      	ldr	r2, [sp, #12]
    3a08:	a904      	add	r1, sp, #16
    3a0a:	ab05      	add	r3, sp, #20
    3a0c:	4618      	mov	r0, r3
    3a0e:	f7fe f8bb 	bl	1b88 <Clock_Ip_TimeoutExpired>
    3a12:	4603      	mov	r3, r0
    3a14:	f88d 301f 	strb.w	r3, [sp, #31]
    3a18:	9b06      	ldr	r3, [sp, #24]
    3a1a:	2b00      	cmp	r3, #0
    3a1c:	d106      	bne.n	3a2c <Clock_Ip_SpecificPlatformInitClock+0x6c>
    3a1e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a22:	f083 0301 	eor.w	r3, r3, #1
    3a26:	b2db      	uxtb	r3, r3
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d1e5      	bne.n	39f8 <Clock_Ip_SpecificPlatformInitClock+0x38>
    3a2c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a30:	2b00      	cmp	r3, #0
    3a32:	d007      	beq.n	3a44 <Clock_Ip_SpecificPlatformInitClock+0x84>
    3a34:	2105      	movs	r1, #5
    3a36:	2001      	movs	r0, #1
    3a38:	f7fe f87c 	bl	1b34 <Clock_Ip_ReportClockErrors>
    3a3c:	e002      	b.n	3a44 <Clock_Ip_SpecificPlatformInitClock+0x84>
    3a3e:	4b07      	ldr	r3, [pc, #28]	; (3a5c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3a40:	2201      	movs	r2, #1
    3a42:	701a      	strb	r2, [r3, #0]
    3a44:	9801      	ldr	r0, [sp, #4]
    3a46:	f7ff ff49 	bl	38dc <SetSimLpoclksRegister_TrustedCall>
    3a4a:	bf00      	nop
    3a4c:	b009      	add	sp, #36	; 0x24
    3a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    3a52:	bf00      	nop
    3a54:	1fff8ba8 	.word	0x1fff8ba8
    3a58:	40064000 	.word	0x40064000
    3a5c:	1fff8b18 	.word	0x1fff8b18

00003a60 <getFircConfig>:
    3a60:	b082      	sub	sp, #8
    3a62:	2300      	movs	r3, #0
    3a64:	9300      	str	r3, [sp, #0]
    3a66:	4b29      	ldr	r3, [pc, #164]	; (3b0c <getFircConfig+0xac>)
    3a68:	681b      	ldr	r3, [r3, #0]
    3a6a:	2b00      	cmp	r3, #0
    3a6c:	d024      	beq.n	3ab8 <getFircConfig+0x58>
    3a6e:	2300      	movs	r3, #0
    3a70:	9301      	str	r3, [sp, #4]
    3a72:	e01a      	b.n	3aaa <getFircConfig+0x4a>
    3a74:	4b25      	ldr	r3, [pc, #148]	; (3b0c <getFircConfig+0xac>)
    3a76:	6819      	ldr	r1, [r3, #0]
    3a78:	9a01      	ldr	r2, [sp, #4]
    3a7a:	4613      	mov	r3, r2
    3a7c:	005b      	lsls	r3, r3, #1
    3a7e:	4413      	add	r3, r2
    3a80:	009b      	lsls	r3, r3, #2
    3a82:	440b      	add	r3, r1
    3a84:	3314      	adds	r3, #20
    3a86:	681b      	ldr	r3, [r3, #0]
    3a88:	2b05      	cmp	r3, #5
    3a8a:	d10b      	bne.n	3aa4 <getFircConfig+0x44>
    3a8c:	4b1f      	ldr	r3, [pc, #124]	; (3b0c <getFircConfig+0xac>)
    3a8e:	6819      	ldr	r1, [r3, #0]
    3a90:	9a01      	ldr	r2, [sp, #4]
    3a92:	4613      	mov	r3, r2
    3a94:	005b      	lsls	r3, r3, #1
    3a96:	4413      	add	r3, r2
    3a98:	009b      	lsls	r3, r3, #2
    3a9a:	3310      	adds	r3, #16
    3a9c:	440b      	add	r3, r1
    3a9e:	3304      	adds	r3, #4
    3aa0:	9300      	str	r3, [sp, #0]
    3aa2:	e009      	b.n	3ab8 <getFircConfig+0x58>
    3aa4:	9b01      	ldr	r3, [sp, #4]
    3aa6:	3301      	adds	r3, #1
    3aa8:	9301      	str	r3, [sp, #4]
    3aaa:	4b18      	ldr	r3, [pc, #96]	; (3b0c <getFircConfig+0xac>)
    3aac:	681b      	ldr	r3, [r3, #0]
    3aae:	7a1b      	ldrb	r3, [r3, #8]
    3ab0:	461a      	mov	r2, r3
    3ab2:	9b01      	ldr	r3, [sp, #4]
    3ab4:	4293      	cmp	r3, r2
    3ab6:	d3dd      	bcc.n	3a74 <getFircConfig+0x14>
    3ab8:	9b00      	ldr	r3, [sp, #0]
    3aba:	2b00      	cmp	r3, #0
    3abc:	d121      	bne.n	3b02 <getFircConfig+0xa2>
    3abe:	4b14      	ldr	r3, [pc, #80]	; (3b10 <getFircConfig+0xb0>)
    3ac0:	9300      	str	r3, [sp, #0]
    3ac2:	4b13      	ldr	r3, [pc, #76]	; (3b10 <getFircConfig+0xb0>)
    3ac4:	2205      	movs	r2, #5
    3ac6:	601a      	str	r2, [r3, #0]
    3ac8:	4b12      	ldr	r3, [pc, #72]	; (3b14 <getFircConfig+0xb4>)
    3aca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ace:	b29b      	uxth	r3, r3
    3ad0:	f003 0301 	and.w	r3, r3, #1
    3ad4:	b29a      	uxth	r2, r3
    3ad6:	4b0e      	ldr	r3, [pc, #56]	; (3b10 <getFircConfig+0xb0>)
    3ad8:	809a      	strh	r2, [r3, #4]
    3ada:	4b0e      	ldr	r3, [pc, #56]	; (3b14 <getFircConfig+0xb4>)
    3adc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3ae0:	b2db      	uxtb	r3, r3
    3ae2:	f003 0303 	and.w	r3, r3, #3
    3ae6:	b2da      	uxtb	r2, r3
    3ae8:	4b09      	ldr	r3, [pc, #36]	; (3b10 <getFircConfig+0xb0>)
    3aea:	71da      	strb	r2, [r3, #7]
    3aec:	4b09      	ldr	r3, [pc, #36]	; (3b14 <getFircConfig+0xb4>)
    3aee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3af2:	b2db      	uxtb	r3, r3
    3af4:	10db      	asrs	r3, r3, #3
    3af6:	b2db      	uxtb	r3, r3
    3af8:	f003 0301 	and.w	r3, r3, #1
    3afc:	b2da      	uxtb	r2, r3
    3afe:	4b04      	ldr	r3, [pc, #16]	; (3b10 <getFircConfig+0xb0>)
    3b00:	719a      	strb	r2, [r3, #6]
    3b02:	9b00      	ldr	r3, [sp, #0]
    3b04:	4618      	mov	r0, r3
    3b06:	b002      	add	sp, #8
    3b08:	4770      	bx	lr
    3b0a:	bf00      	nop
    3b0c:	1fff8ba8 	.word	0x1fff8ba8
    3b10:	1fff8c14 	.word	0x1fff8c14
    3b14:	40064000 	.word	0x40064000

00003b18 <getSoscConfig>:
    3b18:	b082      	sub	sp, #8
    3b1a:	2300      	movs	r3, #0
    3b1c:	9300      	str	r3, [sp, #0]
    3b1e:	4b20      	ldr	r3, [pc, #128]	; (3ba0 <getSoscConfig+0x88>)
    3b20:	681b      	ldr	r3, [r3, #0]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d024      	beq.n	3b70 <getSoscConfig+0x58>
    3b26:	2300      	movs	r3, #0
    3b28:	9301      	str	r3, [sp, #4]
    3b2a:	e01a      	b.n	3b62 <getSoscConfig+0x4a>
    3b2c:	4b1c      	ldr	r3, [pc, #112]	; (3ba0 <getSoscConfig+0x88>)
    3b2e:	6819      	ldr	r1, [r3, #0]
    3b30:	9a01      	ldr	r2, [sp, #4]
    3b32:	4613      	mov	r3, r2
    3b34:	009b      	lsls	r3, r3, #2
    3b36:	4413      	add	r3, r2
    3b38:	009b      	lsls	r3, r3, #2
    3b3a:	440b      	add	r3, r1
    3b3c:	332c      	adds	r3, #44	; 0x2c
    3b3e:	681b      	ldr	r3, [r3, #0]
    3b40:	2b08      	cmp	r3, #8
    3b42:	d10b      	bne.n	3b5c <getSoscConfig+0x44>
    3b44:	4b16      	ldr	r3, [pc, #88]	; (3ba0 <getSoscConfig+0x88>)
    3b46:	6819      	ldr	r1, [r3, #0]
    3b48:	9a01      	ldr	r2, [sp, #4]
    3b4a:	4613      	mov	r3, r2
    3b4c:	009b      	lsls	r3, r3, #2
    3b4e:	4413      	add	r3, r2
    3b50:	009b      	lsls	r3, r3, #2
    3b52:	3328      	adds	r3, #40	; 0x28
    3b54:	440b      	add	r3, r1
    3b56:	3304      	adds	r3, #4
    3b58:	9300      	str	r3, [sp, #0]
    3b5a:	e009      	b.n	3b70 <getSoscConfig+0x58>
    3b5c:	9b01      	ldr	r3, [sp, #4]
    3b5e:	3301      	adds	r3, #1
    3b60:	9301      	str	r3, [sp, #4]
    3b62:	4b0f      	ldr	r3, [pc, #60]	; (3ba0 <getSoscConfig+0x88>)
    3b64:	681b      	ldr	r3, [r3, #0]
    3b66:	7a5b      	ldrb	r3, [r3, #9]
    3b68:	461a      	mov	r2, r3
    3b6a:	9b01      	ldr	r3, [sp, #4]
    3b6c:	4293      	cmp	r3, r2
    3b6e:	d3dd      	bcc.n	3b2c <getSoscConfig+0x14>
    3b70:	9b00      	ldr	r3, [sp, #0]
    3b72:	2b00      	cmp	r3, #0
    3b74:	d110      	bne.n	3b98 <getSoscConfig+0x80>
    3b76:	4b0b      	ldr	r3, [pc, #44]	; (3ba4 <getSoscConfig+0x8c>)
    3b78:	9300      	str	r3, [sp, #0]
    3b7a:	4b0a      	ldr	r3, [pc, #40]	; (3ba4 <getSoscConfig+0x8c>)
    3b7c:	2208      	movs	r2, #8
    3b7e:	601a      	str	r2, [r3, #0]
    3b80:	4b09      	ldr	r3, [pc, #36]	; (3ba8 <getSoscConfig+0x90>)
    3b82:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3b86:	b29b      	uxth	r3, r3
    3b88:	f003 0301 	and.w	r3, r3, #1
    3b8c:	b29a      	uxth	r2, r3
    3b8e:	4b05      	ldr	r3, [pc, #20]	; (3ba4 <getSoscConfig+0x8c>)
    3b90:	811a      	strh	r2, [r3, #8]
    3b92:	4b04      	ldr	r3, [pc, #16]	; (3ba4 <getSoscConfig+0x8c>)
    3b94:	4a05      	ldr	r2, [pc, #20]	; (3bac <getSoscConfig+0x94>)
    3b96:	605a      	str	r2, [r3, #4]
    3b98:	9b00      	ldr	r3, [sp, #0]
    3b9a:	4618      	mov	r0, r3
    3b9c:	b002      	add	sp, #8
    3b9e:	4770      	bx	lr
    3ba0:	1fff8ba8 	.word	0x1fff8ba8
    3ba4:	1fff8c20 	.word	0x1fff8c20
    3ba8:	40064000 	.word	0x40064000
    3bac:	02625a00 	.word	0x02625a00

00003bb0 <getSpllConfig>:
    3bb0:	b082      	sub	sp, #8
    3bb2:	2300      	movs	r3, #0
    3bb4:	9300      	str	r3, [sp, #0]
    3bb6:	4b28      	ldr	r3, [pc, #160]	; (3c58 <getSpllConfig+0xa8>)
    3bb8:	681b      	ldr	r3, [r3, #0]
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d023      	beq.n	3c06 <getSpllConfig+0x56>
    3bbe:	2300      	movs	r3, #0
    3bc0:	9301      	str	r3, [sp, #4]
    3bc2:	e019      	b.n	3bf8 <getSpllConfig+0x48>
    3bc4:	4b24      	ldr	r3, [pc, #144]	; (3c58 <getSpllConfig+0xa8>)
    3bc6:	6819      	ldr	r1, [r3, #0]
    3bc8:	9a01      	ldr	r2, [sp, #4]
    3bca:	4613      	mov	r3, r2
    3bcc:	009b      	lsls	r3, r3, #2
    3bce:	4413      	add	r3, r2
    3bd0:	00db      	lsls	r3, r3, #3
    3bd2:	440b      	add	r3, r1
    3bd4:	3340      	adds	r3, #64	; 0x40
    3bd6:	681b      	ldr	r3, [r3, #0]
    3bd8:	2b09      	cmp	r3, #9
    3bda:	d10a      	bne.n	3bf2 <getSpllConfig+0x42>
    3bdc:	4b1e      	ldr	r3, [pc, #120]	; (3c58 <getSpllConfig+0xa8>)
    3bde:	6819      	ldr	r1, [r3, #0]
    3be0:	9a01      	ldr	r2, [sp, #4]
    3be2:	4613      	mov	r3, r2
    3be4:	009b      	lsls	r3, r3, #2
    3be6:	4413      	add	r3, r2
    3be8:	00db      	lsls	r3, r3, #3
    3bea:	3340      	adds	r3, #64	; 0x40
    3bec:	440b      	add	r3, r1
    3bee:	9300      	str	r3, [sp, #0]
    3bf0:	e009      	b.n	3c06 <getSpllConfig+0x56>
    3bf2:	9b01      	ldr	r3, [sp, #4]
    3bf4:	3301      	adds	r3, #1
    3bf6:	9301      	str	r3, [sp, #4]
    3bf8:	4b17      	ldr	r3, [pc, #92]	; (3c58 <getSpllConfig+0xa8>)
    3bfa:	681b      	ldr	r3, [r3, #0]
    3bfc:	7a9b      	ldrb	r3, [r3, #10]
    3bfe:	461a      	mov	r2, r3
    3c00:	9b01      	ldr	r3, [sp, #4]
    3c02:	4293      	cmp	r3, r2
    3c04:	d3de      	bcc.n	3bc4 <getSpllConfig+0x14>
    3c06:	9b00      	ldr	r3, [sp, #0]
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d121      	bne.n	3c50 <getSpllConfig+0xa0>
    3c0c:	4b13      	ldr	r3, [pc, #76]	; (3c5c <getSpllConfig+0xac>)
    3c0e:	9300      	str	r3, [sp, #0]
    3c10:	4b12      	ldr	r3, [pc, #72]	; (3c5c <getSpllConfig+0xac>)
    3c12:	2209      	movs	r2, #9
    3c14:	601a      	str	r2, [r3, #0]
    3c16:	4b12      	ldr	r3, [pc, #72]	; (3c60 <getSpllConfig+0xb0>)
    3c18:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3c1c:	b29b      	uxth	r3, r3
    3c1e:	f003 0301 	and.w	r3, r3, #1
    3c22:	b29a      	uxth	r2, r3
    3c24:	4b0d      	ldr	r3, [pc, #52]	; (3c5c <getSpllConfig+0xac>)
    3c26:	809a      	strh	r2, [r3, #4]
    3c28:	4b0d      	ldr	r3, [pc, #52]	; (3c60 <getSpllConfig+0xb0>)
    3c2a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c2e:	0a1b      	lsrs	r3, r3, #8
    3c30:	b2db      	uxtb	r3, r3
    3c32:	f003 0307 	and.w	r3, r3, #7
    3c36:	b2da      	uxtb	r2, r3
    3c38:	4b08      	ldr	r3, [pc, #32]	; (3c5c <getSpllConfig+0xac>)
    3c3a:	735a      	strb	r2, [r3, #13]
    3c3c:	4b08      	ldr	r3, [pc, #32]	; (3c60 <getSpllConfig+0xb0>)
    3c3e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c42:	0c1b      	lsrs	r3, r3, #16
    3c44:	b2db      	uxtb	r3, r3
    3c46:	f003 031f 	and.w	r3, r3, #31
    3c4a:	b2da      	uxtb	r2, r3
    3c4c:	4b03      	ldr	r3, [pc, #12]	; (3c5c <getSpllConfig+0xac>)
    3c4e:	751a      	strb	r2, [r3, #20]
    3c50:	9b00      	ldr	r3, [sp, #0]
    3c52:	4618      	mov	r0, r3
    3c54:	b002      	add	sp, #8
    3c56:	4770      	bx	lr
    3c58:	1fff8ba8 	.word	0x1fff8ba8
    3c5c:	1fff8c34 	.word	0x1fff8c34
    3c60:	40064000 	.word	0x40064000

00003c64 <getSelectorConfig>:
    3c64:	b086      	sub	sp, #24
    3c66:	9001      	str	r0, [sp, #4]
    3c68:	2300      	movs	r3, #0
    3c6a:	9305      	str	r3, [sp, #20]
    3c6c:	9b01      	ldr	r3, [sp, #4]
    3c6e:	2b1b      	cmp	r3, #27
    3c70:	d00f      	beq.n	3c92 <getSelectorConfig+0x2e>
    3c72:	9b01      	ldr	r3, [sp, #4]
    3c74:	2b1b      	cmp	r3, #27
    3c76:	d80f      	bhi.n	3c98 <getSelectorConfig+0x34>
    3c78:	9b01      	ldr	r3, [sp, #4]
    3c7a:	2b19      	cmp	r3, #25
    3c7c:	d003      	beq.n	3c86 <getSelectorConfig+0x22>
    3c7e:	9b01      	ldr	r3, [sp, #4]
    3c80:	2b1a      	cmp	r3, #26
    3c82:	d003      	beq.n	3c8c <getSelectorConfig+0x28>
    3c84:	e008      	b.n	3c98 <getSelectorConfig+0x34>
    3c86:	2300      	movs	r3, #0
    3c88:	9304      	str	r3, [sp, #16]
    3c8a:	e008      	b.n	3c9e <getSelectorConfig+0x3a>
    3c8c:	2301      	movs	r3, #1
    3c8e:	9304      	str	r3, [sp, #16]
    3c90:	e005      	b.n	3c9e <getSelectorConfig+0x3a>
    3c92:	2302      	movs	r3, #2
    3c94:	9304      	str	r3, [sp, #16]
    3c96:	e002      	b.n	3c9e <getSelectorConfig+0x3a>
    3c98:	2300      	movs	r3, #0
    3c9a:	9304      	str	r3, [sp, #16]
    3c9c:	bf00      	nop
    3c9e:	4b36      	ldr	r3, [pc, #216]	; (3d78 <getSelectorConfig+0x114>)
    3ca0:	681b      	ldr	r3, [r3, #0]
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d01d      	beq.n	3ce2 <getSelectorConfig+0x7e>
    3ca6:	2300      	movs	r3, #0
    3ca8:	9303      	str	r3, [sp, #12]
    3caa:	e013      	b.n	3cd4 <getSelectorConfig+0x70>
    3cac:	4b32      	ldr	r3, [pc, #200]	; (3d78 <getSelectorConfig+0x114>)
    3cae:	681b      	ldr	r3, [r3, #0]
    3cb0:	9a03      	ldr	r2, [sp, #12]
    3cb2:	320d      	adds	r2, #13
    3cb4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3cb8:	9a01      	ldr	r2, [sp, #4]
    3cba:	429a      	cmp	r2, r3
    3cbc:	d107      	bne.n	3cce <getSelectorConfig+0x6a>
    3cbe:	4b2e      	ldr	r3, [pc, #184]	; (3d78 <getSelectorConfig+0x114>)
    3cc0:	681a      	ldr	r2, [r3, #0]
    3cc2:	9b03      	ldr	r3, [sp, #12]
    3cc4:	330d      	adds	r3, #13
    3cc6:	00db      	lsls	r3, r3, #3
    3cc8:	4413      	add	r3, r2
    3cca:	9305      	str	r3, [sp, #20]
    3ccc:	e009      	b.n	3ce2 <getSelectorConfig+0x7e>
    3cce:	9b03      	ldr	r3, [sp, #12]
    3cd0:	3301      	adds	r3, #1
    3cd2:	9303      	str	r3, [sp, #12]
    3cd4:	4b28      	ldr	r3, [pc, #160]	; (3d78 <getSelectorConfig+0x114>)
    3cd6:	681b      	ldr	r3, [r3, #0]
    3cd8:	7adb      	ldrb	r3, [r3, #11]
    3cda:	461a      	mov	r2, r3
    3cdc:	9b03      	ldr	r3, [sp, #12]
    3cde:	4293      	cmp	r3, r2
    3ce0:	d3e4      	bcc.n	3cac <getSelectorConfig+0x48>
    3ce2:	9b05      	ldr	r3, [sp, #20]
    3ce4:	2b00      	cmp	r3, #0
    3ce6:	d140      	bne.n	3d6a <getSelectorConfig+0x106>
    3ce8:	9b04      	ldr	r3, [sp, #16]
    3cea:	00db      	lsls	r3, r3, #3
    3cec:	4a23      	ldr	r2, [pc, #140]	; (3d7c <getSelectorConfig+0x118>)
    3cee:	4413      	add	r3, r2
    3cf0:	9305      	str	r3, [sp, #20]
    3cf2:	4922      	ldr	r1, [pc, #136]	; (3d7c <getSelectorConfig+0x118>)
    3cf4:	9b04      	ldr	r3, [sp, #16]
    3cf6:	9a01      	ldr	r2, [sp, #4]
    3cf8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    3cfc:	9b01      	ldr	r3, [sp, #4]
    3cfe:	2b1b      	cmp	r3, #27
    3d00:	d025      	beq.n	3d4e <getSelectorConfig+0xea>
    3d02:	9b01      	ldr	r3, [sp, #4]
    3d04:	2b1b      	cmp	r3, #27
    3d06:	d832      	bhi.n	3d6e <getSelectorConfig+0x10a>
    3d08:	9b01      	ldr	r3, [sp, #4]
    3d0a:	2b19      	cmp	r3, #25
    3d0c:	d003      	beq.n	3d16 <getSelectorConfig+0xb2>
    3d0e:	9b01      	ldr	r3, [sp, #4]
    3d10:	2b1a      	cmp	r3, #26
    3d12:	d00e      	beq.n	3d32 <getSelectorConfig+0xce>
    3d14:	e02b      	b.n	3d6e <getSelectorConfig+0x10a>
    3d16:	4b1a      	ldr	r3, [pc, #104]	; (3d80 <getSelectorConfig+0x11c>)
    3d18:	695b      	ldr	r3, [r3, #20]
    3d1a:	0e1b      	lsrs	r3, r3, #24
    3d1c:	f003 030f 	and.w	r3, r3, #15
    3d20:	4a18      	ldr	r2, [pc, #96]	; (3d84 <getSelectorConfig+0x120>)
    3d22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d26:	4915      	ldr	r1, [pc, #84]	; (3d7c <getSelectorConfig+0x118>)
    3d28:	9b04      	ldr	r3, [sp, #16]
    3d2a:	00db      	lsls	r3, r3, #3
    3d2c:	440b      	add	r3, r1
    3d2e:	605a      	str	r2, [r3, #4]
    3d30:	e01e      	b.n	3d70 <getSelectorConfig+0x10c>
    3d32:	4b13      	ldr	r3, [pc, #76]	; (3d80 <getSelectorConfig+0x11c>)
    3d34:	699b      	ldr	r3, [r3, #24]
    3d36:	0e1b      	lsrs	r3, r3, #24
    3d38:	f003 030f 	and.w	r3, r3, #15
    3d3c:	4a11      	ldr	r2, [pc, #68]	; (3d84 <getSelectorConfig+0x120>)
    3d3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d42:	490e      	ldr	r1, [pc, #56]	; (3d7c <getSelectorConfig+0x118>)
    3d44:	9b04      	ldr	r3, [sp, #16]
    3d46:	00db      	lsls	r3, r3, #3
    3d48:	440b      	add	r3, r1
    3d4a:	605a      	str	r2, [r3, #4]
    3d4c:	e010      	b.n	3d70 <getSelectorConfig+0x10c>
    3d4e:	4b0c      	ldr	r3, [pc, #48]	; (3d80 <getSelectorConfig+0x11c>)
    3d50:	69db      	ldr	r3, [r3, #28]
    3d52:	0e1b      	lsrs	r3, r3, #24
    3d54:	f003 030f 	and.w	r3, r3, #15
    3d58:	4a0a      	ldr	r2, [pc, #40]	; (3d84 <getSelectorConfig+0x120>)
    3d5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d5e:	4907      	ldr	r1, [pc, #28]	; (3d7c <getSelectorConfig+0x118>)
    3d60:	9b04      	ldr	r3, [sp, #16]
    3d62:	00db      	lsls	r3, r3, #3
    3d64:	440b      	add	r3, r1
    3d66:	605a      	str	r2, [r3, #4]
    3d68:	e002      	b.n	3d70 <getSelectorConfig+0x10c>
    3d6a:	bf00      	nop
    3d6c:	e000      	b.n	3d70 <getSelectorConfig+0x10c>
    3d6e:	bf00      	nop
    3d70:	9b05      	ldr	r3, [sp, #20]
    3d72:	4618      	mov	r0, r3
    3d74:	b006      	add	sp, #24
    3d76:	4770      	bx	lr
    3d78:	1fff8ba8 	.word	0x1fff8ba8
    3d7c:	1fff8c5c 	.word	0x1fff8c5c
    3d80:	40064000 	.word	0x40064000
    3d84:	0000bcc4 	.word	0x0000bcc4

00003d88 <getCoreDividerConfig>:
    3d88:	b086      	sub	sp, #24
    3d8a:	9001      	str	r0, [sp, #4]
    3d8c:	2300      	movs	r3, #0
    3d8e:	9305      	str	r3, [sp, #20]
    3d90:	2300      	movs	r3, #0
    3d92:	9304      	str	r3, [sp, #16]
    3d94:	9b01      	ldr	r3, [sp, #4]
    3d96:	2b1f      	cmp	r3, #31
    3d98:	d00f      	beq.n	3dba <getCoreDividerConfig+0x32>
    3d9a:	9b01      	ldr	r3, [sp, #4]
    3d9c:	2b1f      	cmp	r3, #31
    3d9e:	d80f      	bhi.n	3dc0 <getCoreDividerConfig+0x38>
    3da0:	9b01      	ldr	r3, [sp, #4]
    3da2:	2b1d      	cmp	r3, #29
    3da4:	d003      	beq.n	3dae <getCoreDividerConfig+0x26>
    3da6:	9b01      	ldr	r3, [sp, #4]
    3da8:	2b1e      	cmp	r3, #30
    3daa:	d003      	beq.n	3db4 <getCoreDividerConfig+0x2c>
    3dac:	e008      	b.n	3dc0 <getCoreDividerConfig+0x38>
    3dae:	2300      	movs	r3, #0
    3db0:	9304      	str	r3, [sp, #16]
    3db2:	e006      	b.n	3dc2 <getCoreDividerConfig+0x3a>
    3db4:	2301      	movs	r3, #1
    3db6:	9304      	str	r3, [sp, #16]
    3db8:	e003      	b.n	3dc2 <getCoreDividerConfig+0x3a>
    3dba:	2302      	movs	r3, #2
    3dbc:	9304      	str	r3, [sp, #16]
    3dbe:	e000      	b.n	3dc2 <getCoreDividerConfig+0x3a>
    3dc0:	bf00      	nop
    3dc2:	4b41      	ldr	r3, [pc, #260]	; (3ec8 <getCoreDividerConfig+0x140>)
    3dc4:	681b      	ldr	r3, [r3, #0]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d026      	beq.n	3e18 <getCoreDividerConfig+0x90>
    3dca:	2300      	movs	r3, #0
    3dcc:	9303      	str	r3, [sp, #12]
    3dce:	e01c      	b.n	3e0a <getCoreDividerConfig+0x82>
    3dd0:	4b3d      	ldr	r3, [pc, #244]	; (3ec8 <getCoreDividerConfig+0x140>)
    3dd2:	6819      	ldr	r1, [r3, #0]
    3dd4:	9a03      	ldr	r2, [sp, #12]
    3dd6:	4613      	mov	r3, r2
    3dd8:	005b      	lsls	r3, r3, #1
    3dda:	4413      	add	r3, r2
    3ddc:	009b      	lsls	r3, r3, #2
    3dde:	440b      	add	r3, r1
    3de0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3de4:	681b      	ldr	r3, [r3, #0]
    3de6:	9a01      	ldr	r2, [sp, #4]
    3de8:	429a      	cmp	r2, r3
    3dea:	d10b      	bne.n	3e04 <getCoreDividerConfig+0x7c>
    3dec:	4b36      	ldr	r3, [pc, #216]	; (3ec8 <getCoreDividerConfig+0x140>)
    3dee:	6819      	ldr	r1, [r3, #0]
    3df0:	9a03      	ldr	r2, [sp, #12]
    3df2:	4613      	mov	r3, r2
    3df4:	005b      	lsls	r3, r3, #1
    3df6:	4413      	add	r3, r2
    3df8:	009b      	lsls	r3, r3, #2
    3dfa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3dfe:	440b      	add	r3, r1
    3e00:	9305      	str	r3, [sp, #20]
    3e02:	e009      	b.n	3e18 <getCoreDividerConfig+0x90>
    3e04:	9b03      	ldr	r3, [sp, #12]
    3e06:	3301      	adds	r3, #1
    3e08:	9303      	str	r3, [sp, #12]
    3e0a:	4b2f      	ldr	r3, [pc, #188]	; (3ec8 <getCoreDividerConfig+0x140>)
    3e0c:	681b      	ldr	r3, [r3, #0]
    3e0e:	7b1b      	ldrb	r3, [r3, #12]
    3e10:	461a      	mov	r2, r3
    3e12:	9b03      	ldr	r3, [sp, #12]
    3e14:	4293      	cmp	r3, r2
    3e16:	d3db      	bcc.n	3dd0 <getCoreDividerConfig+0x48>
    3e18:	9b05      	ldr	r3, [sp, #20]
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d14d      	bne.n	3eba <getCoreDividerConfig+0x132>
    3e1e:	9a04      	ldr	r2, [sp, #16]
    3e20:	4613      	mov	r3, r2
    3e22:	005b      	lsls	r3, r3, #1
    3e24:	4413      	add	r3, r2
    3e26:	009b      	lsls	r3, r3, #2
    3e28:	4a28      	ldr	r2, [pc, #160]	; (3ecc <getCoreDividerConfig+0x144>)
    3e2a:	4413      	add	r3, r2
    3e2c:	9305      	str	r3, [sp, #20]
    3e2e:	4927      	ldr	r1, [pc, #156]	; (3ecc <getCoreDividerConfig+0x144>)
    3e30:	9a04      	ldr	r2, [sp, #16]
    3e32:	4613      	mov	r3, r2
    3e34:	005b      	lsls	r3, r3, #1
    3e36:	4413      	add	r3, r2
    3e38:	009b      	lsls	r3, r3, #2
    3e3a:	440b      	add	r3, r1
    3e3c:	9a01      	ldr	r2, [sp, #4]
    3e3e:	601a      	str	r2, [r3, #0]
    3e40:	9b01      	ldr	r3, [sp, #4]
    3e42:	2b1f      	cmp	r3, #31
    3e44:	d029      	beq.n	3e9a <getCoreDividerConfig+0x112>
    3e46:	9b01      	ldr	r3, [sp, #4]
    3e48:	2b1f      	cmp	r3, #31
    3e4a:	d838      	bhi.n	3ebe <getCoreDividerConfig+0x136>
    3e4c:	9b01      	ldr	r3, [sp, #4]
    3e4e:	2b1d      	cmp	r3, #29
    3e50:	d003      	beq.n	3e5a <getCoreDividerConfig+0xd2>
    3e52:	9b01      	ldr	r3, [sp, #4]
    3e54:	2b1e      	cmp	r3, #30
    3e56:	d010      	beq.n	3e7a <getCoreDividerConfig+0xf2>
    3e58:	e031      	b.n	3ebe <getCoreDividerConfig+0x136>
    3e5a:	4b1d      	ldr	r3, [pc, #116]	; (3ed0 <getCoreDividerConfig+0x148>)
    3e5c:	695b      	ldr	r3, [r3, #20]
    3e5e:	0c1b      	lsrs	r3, r3, #16
    3e60:	f003 030f 	and.w	r3, r3, #15
    3e64:	1c59      	adds	r1, r3, #1
    3e66:	4819      	ldr	r0, [pc, #100]	; (3ecc <getCoreDividerConfig+0x144>)
    3e68:	9a04      	ldr	r2, [sp, #16]
    3e6a:	4613      	mov	r3, r2
    3e6c:	005b      	lsls	r3, r3, #1
    3e6e:	4413      	add	r3, r2
    3e70:	009b      	lsls	r3, r3, #2
    3e72:	4403      	add	r3, r0
    3e74:	3304      	adds	r3, #4
    3e76:	6019      	str	r1, [r3, #0]
    3e78:	e022      	b.n	3ec0 <getCoreDividerConfig+0x138>
    3e7a:	4b15      	ldr	r3, [pc, #84]	; (3ed0 <getCoreDividerConfig+0x148>)
    3e7c:	699b      	ldr	r3, [r3, #24]
    3e7e:	0c1b      	lsrs	r3, r3, #16
    3e80:	f003 030f 	and.w	r3, r3, #15
    3e84:	1c59      	adds	r1, r3, #1
    3e86:	4811      	ldr	r0, [pc, #68]	; (3ecc <getCoreDividerConfig+0x144>)
    3e88:	9a04      	ldr	r2, [sp, #16]
    3e8a:	4613      	mov	r3, r2
    3e8c:	005b      	lsls	r3, r3, #1
    3e8e:	4413      	add	r3, r2
    3e90:	009b      	lsls	r3, r3, #2
    3e92:	4403      	add	r3, r0
    3e94:	3304      	adds	r3, #4
    3e96:	6019      	str	r1, [r3, #0]
    3e98:	e012      	b.n	3ec0 <getCoreDividerConfig+0x138>
    3e9a:	4b0d      	ldr	r3, [pc, #52]	; (3ed0 <getCoreDividerConfig+0x148>)
    3e9c:	69db      	ldr	r3, [r3, #28]
    3e9e:	0c1b      	lsrs	r3, r3, #16
    3ea0:	f003 030f 	and.w	r3, r3, #15
    3ea4:	1c59      	adds	r1, r3, #1
    3ea6:	4809      	ldr	r0, [pc, #36]	; (3ecc <getCoreDividerConfig+0x144>)
    3ea8:	9a04      	ldr	r2, [sp, #16]
    3eaa:	4613      	mov	r3, r2
    3eac:	005b      	lsls	r3, r3, #1
    3eae:	4413      	add	r3, r2
    3eb0:	009b      	lsls	r3, r3, #2
    3eb2:	4403      	add	r3, r0
    3eb4:	3304      	adds	r3, #4
    3eb6:	6019      	str	r1, [r3, #0]
    3eb8:	e002      	b.n	3ec0 <getCoreDividerConfig+0x138>
    3eba:	bf00      	nop
    3ebc:	e000      	b.n	3ec0 <getCoreDividerConfig+0x138>
    3ebe:	bf00      	nop
    3ec0:	9b05      	ldr	r3, [sp, #20]
    3ec2:	4618      	mov	r0, r3
    3ec4:	b006      	add	sp, #24
    3ec6:	4770      	bx	lr
    3ec8:	1fff8ba8 	.word	0x1fff8ba8
    3ecc:	1fff8c74 	.word	0x1fff8c74
    3ed0:	40064000 	.word	0x40064000

00003ed4 <getBusDividerConfig>:
    3ed4:	b086      	sub	sp, #24
    3ed6:	9001      	str	r0, [sp, #4]
    3ed8:	2300      	movs	r3, #0
    3eda:	9305      	str	r3, [sp, #20]
    3edc:	2300      	movs	r3, #0
    3ede:	9304      	str	r3, [sp, #16]
    3ee0:	9b01      	ldr	r3, [sp, #4]
    3ee2:	2b23      	cmp	r3, #35	; 0x23
    3ee4:	d00f      	beq.n	3f06 <getBusDividerConfig+0x32>
    3ee6:	9b01      	ldr	r3, [sp, #4]
    3ee8:	2b23      	cmp	r3, #35	; 0x23
    3eea:	d80f      	bhi.n	3f0c <getBusDividerConfig+0x38>
    3eec:	9b01      	ldr	r3, [sp, #4]
    3eee:	2b21      	cmp	r3, #33	; 0x21
    3ef0:	d003      	beq.n	3efa <getBusDividerConfig+0x26>
    3ef2:	9b01      	ldr	r3, [sp, #4]
    3ef4:	2b22      	cmp	r3, #34	; 0x22
    3ef6:	d003      	beq.n	3f00 <getBusDividerConfig+0x2c>
    3ef8:	e008      	b.n	3f0c <getBusDividerConfig+0x38>
    3efa:	2300      	movs	r3, #0
    3efc:	9304      	str	r3, [sp, #16]
    3efe:	e006      	b.n	3f0e <getBusDividerConfig+0x3a>
    3f00:	2301      	movs	r3, #1
    3f02:	9304      	str	r3, [sp, #16]
    3f04:	e003      	b.n	3f0e <getBusDividerConfig+0x3a>
    3f06:	2302      	movs	r3, #2
    3f08:	9304      	str	r3, [sp, #16]
    3f0a:	e000      	b.n	3f0e <getBusDividerConfig+0x3a>
    3f0c:	bf00      	nop
    3f0e:	4b41      	ldr	r3, [pc, #260]	; (4014 <getBusDividerConfig+0x140>)
    3f10:	681b      	ldr	r3, [r3, #0]
    3f12:	2b00      	cmp	r3, #0
    3f14:	d026      	beq.n	3f64 <getBusDividerConfig+0x90>
    3f16:	2300      	movs	r3, #0
    3f18:	9303      	str	r3, [sp, #12]
    3f1a:	e01c      	b.n	3f56 <getBusDividerConfig+0x82>
    3f1c:	4b3d      	ldr	r3, [pc, #244]	; (4014 <getBusDividerConfig+0x140>)
    3f1e:	6819      	ldr	r1, [r3, #0]
    3f20:	9a03      	ldr	r2, [sp, #12]
    3f22:	4613      	mov	r3, r2
    3f24:	005b      	lsls	r3, r3, #1
    3f26:	4413      	add	r3, r2
    3f28:	009b      	lsls	r3, r3, #2
    3f2a:	440b      	add	r3, r1
    3f2c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f30:	681b      	ldr	r3, [r3, #0]
    3f32:	9a01      	ldr	r2, [sp, #4]
    3f34:	429a      	cmp	r2, r3
    3f36:	d10b      	bne.n	3f50 <getBusDividerConfig+0x7c>
    3f38:	4b36      	ldr	r3, [pc, #216]	; (4014 <getBusDividerConfig+0x140>)
    3f3a:	6819      	ldr	r1, [r3, #0]
    3f3c:	9a03      	ldr	r2, [sp, #12]
    3f3e:	4613      	mov	r3, r2
    3f40:	005b      	lsls	r3, r3, #1
    3f42:	4413      	add	r3, r2
    3f44:	009b      	lsls	r3, r3, #2
    3f46:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f4a:	440b      	add	r3, r1
    3f4c:	9305      	str	r3, [sp, #20]
    3f4e:	e009      	b.n	3f64 <getBusDividerConfig+0x90>
    3f50:	9b03      	ldr	r3, [sp, #12]
    3f52:	3301      	adds	r3, #1
    3f54:	9303      	str	r3, [sp, #12]
    3f56:	4b2f      	ldr	r3, [pc, #188]	; (4014 <getBusDividerConfig+0x140>)
    3f58:	681b      	ldr	r3, [r3, #0]
    3f5a:	7b1b      	ldrb	r3, [r3, #12]
    3f5c:	461a      	mov	r2, r3
    3f5e:	9b03      	ldr	r3, [sp, #12]
    3f60:	4293      	cmp	r3, r2
    3f62:	d3db      	bcc.n	3f1c <getBusDividerConfig+0x48>
    3f64:	9b05      	ldr	r3, [sp, #20]
    3f66:	2b00      	cmp	r3, #0
    3f68:	d14d      	bne.n	4006 <getBusDividerConfig+0x132>
    3f6a:	9a04      	ldr	r2, [sp, #16]
    3f6c:	4613      	mov	r3, r2
    3f6e:	005b      	lsls	r3, r3, #1
    3f70:	4413      	add	r3, r2
    3f72:	009b      	lsls	r3, r3, #2
    3f74:	4a28      	ldr	r2, [pc, #160]	; (4018 <getBusDividerConfig+0x144>)
    3f76:	4413      	add	r3, r2
    3f78:	9305      	str	r3, [sp, #20]
    3f7a:	4927      	ldr	r1, [pc, #156]	; (4018 <getBusDividerConfig+0x144>)
    3f7c:	9a04      	ldr	r2, [sp, #16]
    3f7e:	4613      	mov	r3, r2
    3f80:	005b      	lsls	r3, r3, #1
    3f82:	4413      	add	r3, r2
    3f84:	009b      	lsls	r3, r3, #2
    3f86:	440b      	add	r3, r1
    3f88:	9a01      	ldr	r2, [sp, #4]
    3f8a:	601a      	str	r2, [r3, #0]
    3f8c:	9b01      	ldr	r3, [sp, #4]
    3f8e:	2b23      	cmp	r3, #35	; 0x23
    3f90:	d029      	beq.n	3fe6 <getBusDividerConfig+0x112>
    3f92:	9b01      	ldr	r3, [sp, #4]
    3f94:	2b23      	cmp	r3, #35	; 0x23
    3f96:	d838      	bhi.n	400a <getBusDividerConfig+0x136>
    3f98:	9b01      	ldr	r3, [sp, #4]
    3f9a:	2b21      	cmp	r3, #33	; 0x21
    3f9c:	d003      	beq.n	3fa6 <getBusDividerConfig+0xd2>
    3f9e:	9b01      	ldr	r3, [sp, #4]
    3fa0:	2b22      	cmp	r3, #34	; 0x22
    3fa2:	d010      	beq.n	3fc6 <getBusDividerConfig+0xf2>
    3fa4:	e031      	b.n	400a <getBusDividerConfig+0x136>
    3fa6:	4b1d      	ldr	r3, [pc, #116]	; (401c <getBusDividerConfig+0x148>)
    3fa8:	695b      	ldr	r3, [r3, #20]
    3faa:	091b      	lsrs	r3, r3, #4
    3fac:	f003 030f 	and.w	r3, r3, #15
    3fb0:	1c59      	adds	r1, r3, #1
    3fb2:	4819      	ldr	r0, [pc, #100]	; (4018 <getBusDividerConfig+0x144>)
    3fb4:	9a04      	ldr	r2, [sp, #16]
    3fb6:	4613      	mov	r3, r2
    3fb8:	005b      	lsls	r3, r3, #1
    3fba:	4413      	add	r3, r2
    3fbc:	009b      	lsls	r3, r3, #2
    3fbe:	4403      	add	r3, r0
    3fc0:	3304      	adds	r3, #4
    3fc2:	6019      	str	r1, [r3, #0]
    3fc4:	e022      	b.n	400c <getBusDividerConfig+0x138>
    3fc6:	4b15      	ldr	r3, [pc, #84]	; (401c <getBusDividerConfig+0x148>)
    3fc8:	699b      	ldr	r3, [r3, #24]
    3fca:	091b      	lsrs	r3, r3, #4
    3fcc:	f003 030f 	and.w	r3, r3, #15
    3fd0:	1c59      	adds	r1, r3, #1
    3fd2:	4811      	ldr	r0, [pc, #68]	; (4018 <getBusDividerConfig+0x144>)
    3fd4:	9a04      	ldr	r2, [sp, #16]
    3fd6:	4613      	mov	r3, r2
    3fd8:	005b      	lsls	r3, r3, #1
    3fda:	4413      	add	r3, r2
    3fdc:	009b      	lsls	r3, r3, #2
    3fde:	4403      	add	r3, r0
    3fe0:	3304      	adds	r3, #4
    3fe2:	6019      	str	r1, [r3, #0]
    3fe4:	e012      	b.n	400c <getBusDividerConfig+0x138>
    3fe6:	4b0d      	ldr	r3, [pc, #52]	; (401c <getBusDividerConfig+0x148>)
    3fe8:	69db      	ldr	r3, [r3, #28]
    3fea:	091b      	lsrs	r3, r3, #4
    3fec:	f003 030f 	and.w	r3, r3, #15
    3ff0:	1c59      	adds	r1, r3, #1
    3ff2:	4809      	ldr	r0, [pc, #36]	; (4018 <getBusDividerConfig+0x144>)
    3ff4:	9a04      	ldr	r2, [sp, #16]
    3ff6:	4613      	mov	r3, r2
    3ff8:	005b      	lsls	r3, r3, #1
    3ffa:	4413      	add	r3, r2
    3ffc:	009b      	lsls	r3, r3, #2
    3ffe:	4403      	add	r3, r0
    4000:	3304      	adds	r3, #4
    4002:	6019      	str	r1, [r3, #0]
    4004:	e002      	b.n	400c <getBusDividerConfig+0x138>
    4006:	bf00      	nop
    4008:	e000      	b.n	400c <getBusDividerConfig+0x138>
    400a:	bf00      	nop
    400c:	9b05      	ldr	r3, [sp, #20]
    400e:	4618      	mov	r0, r3
    4010:	b006      	add	sp, #24
    4012:	4770      	bx	lr
    4014:	1fff8ba8 	.word	0x1fff8ba8
    4018:	1fff8c98 	.word	0x1fff8c98
    401c:	40064000 	.word	0x40064000

00004020 <getSlowDividerConfig>:
    4020:	b086      	sub	sp, #24
    4022:	9001      	str	r0, [sp, #4]
    4024:	2300      	movs	r3, #0
    4026:	9305      	str	r3, [sp, #20]
    4028:	2300      	movs	r3, #0
    402a:	9304      	str	r3, [sp, #16]
    402c:	9b01      	ldr	r3, [sp, #4]
    402e:	2b27      	cmp	r3, #39	; 0x27
    4030:	d00f      	beq.n	4052 <getSlowDividerConfig+0x32>
    4032:	9b01      	ldr	r3, [sp, #4]
    4034:	2b27      	cmp	r3, #39	; 0x27
    4036:	d80f      	bhi.n	4058 <getSlowDividerConfig+0x38>
    4038:	9b01      	ldr	r3, [sp, #4]
    403a:	2b25      	cmp	r3, #37	; 0x25
    403c:	d003      	beq.n	4046 <getSlowDividerConfig+0x26>
    403e:	9b01      	ldr	r3, [sp, #4]
    4040:	2b26      	cmp	r3, #38	; 0x26
    4042:	d003      	beq.n	404c <getSlowDividerConfig+0x2c>
    4044:	e008      	b.n	4058 <getSlowDividerConfig+0x38>
    4046:	2300      	movs	r3, #0
    4048:	9304      	str	r3, [sp, #16]
    404a:	e006      	b.n	405a <getSlowDividerConfig+0x3a>
    404c:	2301      	movs	r3, #1
    404e:	9304      	str	r3, [sp, #16]
    4050:	e003      	b.n	405a <getSlowDividerConfig+0x3a>
    4052:	2302      	movs	r3, #2
    4054:	9304      	str	r3, [sp, #16]
    4056:	e000      	b.n	405a <getSlowDividerConfig+0x3a>
    4058:	bf00      	nop
    405a:	4b40      	ldr	r3, [pc, #256]	; (415c <getSlowDividerConfig+0x13c>)
    405c:	681b      	ldr	r3, [r3, #0]
    405e:	2b00      	cmp	r3, #0
    4060:	d026      	beq.n	40b0 <getSlowDividerConfig+0x90>
    4062:	2300      	movs	r3, #0
    4064:	9303      	str	r3, [sp, #12]
    4066:	e01c      	b.n	40a2 <getSlowDividerConfig+0x82>
    4068:	4b3c      	ldr	r3, [pc, #240]	; (415c <getSlowDividerConfig+0x13c>)
    406a:	6819      	ldr	r1, [r3, #0]
    406c:	9a03      	ldr	r2, [sp, #12]
    406e:	4613      	mov	r3, r2
    4070:	005b      	lsls	r3, r3, #1
    4072:	4413      	add	r3, r2
    4074:	009b      	lsls	r3, r3, #2
    4076:	440b      	add	r3, r1
    4078:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    407c:	681b      	ldr	r3, [r3, #0]
    407e:	9a01      	ldr	r2, [sp, #4]
    4080:	429a      	cmp	r2, r3
    4082:	d10b      	bne.n	409c <getSlowDividerConfig+0x7c>
    4084:	4b35      	ldr	r3, [pc, #212]	; (415c <getSlowDividerConfig+0x13c>)
    4086:	6819      	ldr	r1, [r3, #0]
    4088:	9a03      	ldr	r2, [sp, #12]
    408a:	4613      	mov	r3, r2
    408c:	005b      	lsls	r3, r3, #1
    408e:	4413      	add	r3, r2
    4090:	009b      	lsls	r3, r3, #2
    4092:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4096:	440b      	add	r3, r1
    4098:	9305      	str	r3, [sp, #20]
    409a:	e009      	b.n	40b0 <getSlowDividerConfig+0x90>
    409c:	9b03      	ldr	r3, [sp, #12]
    409e:	3301      	adds	r3, #1
    40a0:	9303      	str	r3, [sp, #12]
    40a2:	4b2e      	ldr	r3, [pc, #184]	; (415c <getSlowDividerConfig+0x13c>)
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	7b1b      	ldrb	r3, [r3, #12]
    40a8:	461a      	mov	r2, r3
    40aa:	9b03      	ldr	r3, [sp, #12]
    40ac:	4293      	cmp	r3, r2
    40ae:	d3db      	bcc.n	4068 <getSlowDividerConfig+0x48>
    40b0:	9b05      	ldr	r3, [sp, #20]
    40b2:	2b00      	cmp	r3, #0
    40b4:	d14a      	bne.n	414c <getSlowDividerConfig+0x12c>
    40b6:	9a04      	ldr	r2, [sp, #16]
    40b8:	4613      	mov	r3, r2
    40ba:	005b      	lsls	r3, r3, #1
    40bc:	4413      	add	r3, r2
    40be:	009b      	lsls	r3, r3, #2
    40c0:	4a27      	ldr	r2, [pc, #156]	; (4160 <getSlowDividerConfig+0x140>)
    40c2:	4413      	add	r3, r2
    40c4:	9305      	str	r3, [sp, #20]
    40c6:	4926      	ldr	r1, [pc, #152]	; (4160 <getSlowDividerConfig+0x140>)
    40c8:	9a04      	ldr	r2, [sp, #16]
    40ca:	4613      	mov	r3, r2
    40cc:	005b      	lsls	r3, r3, #1
    40ce:	4413      	add	r3, r2
    40d0:	009b      	lsls	r3, r3, #2
    40d2:	440b      	add	r3, r1
    40d4:	9a01      	ldr	r2, [sp, #4]
    40d6:	601a      	str	r2, [r3, #0]
    40d8:	9b01      	ldr	r3, [sp, #4]
    40da:	2b27      	cmp	r3, #39	; 0x27
    40dc:	d027      	beq.n	412e <getSlowDividerConfig+0x10e>
    40de:	9b01      	ldr	r3, [sp, #4]
    40e0:	2b27      	cmp	r3, #39	; 0x27
    40e2:	d835      	bhi.n	4150 <getSlowDividerConfig+0x130>
    40e4:	9b01      	ldr	r3, [sp, #4]
    40e6:	2b25      	cmp	r3, #37	; 0x25
    40e8:	d003      	beq.n	40f2 <getSlowDividerConfig+0xd2>
    40ea:	9b01      	ldr	r3, [sp, #4]
    40ec:	2b26      	cmp	r3, #38	; 0x26
    40ee:	d00f      	beq.n	4110 <getSlowDividerConfig+0xf0>
    40f0:	e02e      	b.n	4150 <getSlowDividerConfig+0x130>
    40f2:	4b1c      	ldr	r3, [pc, #112]	; (4164 <getSlowDividerConfig+0x144>)
    40f4:	695b      	ldr	r3, [r3, #20]
    40f6:	f003 030f 	and.w	r3, r3, #15
    40fa:	1c59      	adds	r1, r3, #1
    40fc:	4818      	ldr	r0, [pc, #96]	; (4160 <getSlowDividerConfig+0x140>)
    40fe:	9a04      	ldr	r2, [sp, #16]
    4100:	4613      	mov	r3, r2
    4102:	005b      	lsls	r3, r3, #1
    4104:	4413      	add	r3, r2
    4106:	009b      	lsls	r3, r3, #2
    4108:	4403      	add	r3, r0
    410a:	3304      	adds	r3, #4
    410c:	6019      	str	r1, [r3, #0]
    410e:	e020      	b.n	4152 <getSlowDividerConfig+0x132>
    4110:	4b14      	ldr	r3, [pc, #80]	; (4164 <getSlowDividerConfig+0x144>)
    4112:	699b      	ldr	r3, [r3, #24]
    4114:	f003 030f 	and.w	r3, r3, #15
    4118:	1c59      	adds	r1, r3, #1
    411a:	4811      	ldr	r0, [pc, #68]	; (4160 <getSlowDividerConfig+0x140>)
    411c:	9a04      	ldr	r2, [sp, #16]
    411e:	4613      	mov	r3, r2
    4120:	005b      	lsls	r3, r3, #1
    4122:	4413      	add	r3, r2
    4124:	009b      	lsls	r3, r3, #2
    4126:	4403      	add	r3, r0
    4128:	3304      	adds	r3, #4
    412a:	6019      	str	r1, [r3, #0]
    412c:	e011      	b.n	4152 <getSlowDividerConfig+0x132>
    412e:	4b0d      	ldr	r3, [pc, #52]	; (4164 <getSlowDividerConfig+0x144>)
    4130:	69db      	ldr	r3, [r3, #28]
    4132:	f003 030f 	and.w	r3, r3, #15
    4136:	1c59      	adds	r1, r3, #1
    4138:	4809      	ldr	r0, [pc, #36]	; (4160 <getSlowDividerConfig+0x140>)
    413a:	9a04      	ldr	r2, [sp, #16]
    413c:	4613      	mov	r3, r2
    413e:	005b      	lsls	r3, r3, #1
    4140:	4413      	add	r3, r2
    4142:	009b      	lsls	r3, r3, #2
    4144:	4403      	add	r3, r0
    4146:	3304      	adds	r3, #4
    4148:	6019      	str	r1, [r3, #0]
    414a:	e002      	b.n	4152 <getSlowDividerConfig+0x132>
    414c:	bf00      	nop
    414e:	e000      	b.n	4152 <getSlowDividerConfig+0x132>
    4150:	bf00      	nop
    4152:	9b05      	ldr	r3, [sp, #20]
    4154:	4618      	mov	r0, r3
    4156:	b006      	add	sp, #24
    4158:	4770      	bx	lr
    415a:	bf00      	nop
    415c:	1fff8ba8 	.word	0x1fff8ba8
    4160:	1fff8cbc 	.word	0x1fff8cbc
    4164:	40064000 	.word	0x40064000

00004168 <Clock_Ip_ClockInitializeObjects>:
    4168:	b500      	push	{lr}
    416a:	b083      	sub	sp, #12
    416c:	9001      	str	r0, [sp, #4]
    416e:	4b64      	ldr	r3, [pc, #400]	; (4300 <Clock_Ip_ClockInitializeObjects+0x198>)
    4170:	781b      	ldrb	r3, [r3, #0]
    4172:	f083 0301 	eor.w	r3, r3, #1
    4176:	b2db      	uxtb	r3, r3
    4178:	2b00      	cmp	r3, #0
    417a:	d05b      	beq.n	4234 <Clock_Ip_ClockInitializeObjects+0xcc>
    417c:	4b60      	ldr	r3, [pc, #384]	; (4300 <Clock_Ip_ClockInitializeObjects+0x198>)
    417e:	2201      	movs	r2, #1
    4180:	701a      	strb	r2, [r3, #0]
    4182:	4b60      	ldr	r3, [pc, #384]	; (4304 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4184:	785b      	ldrb	r3, [r3, #1]
    4186:	461a      	mov	r2, r3
    4188:	4613      	mov	r3, r2
    418a:	009b      	lsls	r3, r3, #2
    418c:	4413      	add	r3, r2
    418e:	009b      	lsls	r3, r3, #2
    4190:	4a5d      	ldr	r2, [pc, #372]	; (4308 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    4192:	4413      	add	r3, r2
    4194:	4a5d      	ldr	r2, [pc, #372]	; (430c <Clock_Ip_ClockInitializeObjects+0x1a4>)
    4196:	6013      	str	r3, [r2, #0]
    4198:	4b5d      	ldr	r3, [pc, #372]	; (4310 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    419a:	785b      	ldrb	r3, [r3, #1]
    419c:	461a      	mov	r2, r3
    419e:	4613      	mov	r3, r2
    41a0:	009b      	lsls	r3, r3, #2
    41a2:	4413      	add	r3, r2
    41a4:	009b      	lsls	r3, r3, #2
    41a6:	4a5b      	ldr	r2, [pc, #364]	; (4314 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    41a8:	4413      	add	r3, r2
    41aa:	4a5b      	ldr	r2, [pc, #364]	; (4318 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    41ac:	6013      	str	r3, [r2, #0]
    41ae:	4b5b      	ldr	r3, [pc, #364]	; (431c <Clock_Ip_ClockInitializeObjects+0x1b4>)
    41b0:	791b      	ldrb	r3, [r3, #4]
    41b2:	461a      	mov	r2, r3
    41b4:	4613      	mov	r3, r2
    41b6:	005b      	lsls	r3, r3, #1
    41b8:	4413      	add	r3, r2
    41ba:	009b      	lsls	r3, r3, #2
    41bc:	4a58      	ldr	r2, [pc, #352]	; (4320 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    41be:	4413      	add	r3, r2
    41c0:	4a58      	ldr	r2, [pc, #352]	; (4324 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    41c2:	6013      	str	r3, [r2, #0]
    41c4:	4b58      	ldr	r3, [pc, #352]	; (4328 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    41c6:	795b      	ldrb	r3, [r3, #5]
    41c8:	00db      	lsls	r3, r3, #3
    41ca:	4a58      	ldr	r2, [pc, #352]	; (432c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    41cc:	4413      	add	r3, r2
    41ce:	4a58      	ldr	r2, [pc, #352]	; (4330 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    41d0:	6013      	str	r3, [r2, #0]
    41d2:	4b55      	ldr	r3, [pc, #340]	; (4328 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    41d4:	79db      	ldrb	r3, [r3, #7]
    41d6:	00db      	lsls	r3, r3, #3
    41d8:	4a54      	ldr	r2, [pc, #336]	; (432c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    41da:	4413      	add	r3, r2
    41dc:	4a55      	ldr	r2, [pc, #340]	; (4334 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    41de:	6013      	str	r3, [r2, #0]
    41e0:	4b55      	ldr	r3, [pc, #340]	; (4338 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    41e2:	799b      	ldrb	r3, [r3, #6]
    41e4:	009b      	lsls	r3, r3, #2
    41e6:	4a55      	ldr	r2, [pc, #340]	; (433c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    41e8:	4413      	add	r3, r2
    41ea:	4a55      	ldr	r2, [pc, #340]	; (4340 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    41ec:	6013      	str	r3, [r2, #0]
    41ee:	4b52      	ldr	r3, [pc, #328]	; (4338 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    41f0:	7a1b      	ldrb	r3, [r3, #8]
    41f2:	009b      	lsls	r3, r3, #2
    41f4:	4a51      	ldr	r2, [pc, #324]	; (433c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    41f6:	4413      	add	r3, r2
    41f8:	4a52      	ldr	r2, [pc, #328]	; (4344 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    41fa:	6013      	str	r3, [r2, #0]
    41fc:	4b4e      	ldr	r3, [pc, #312]	; (4338 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    41fe:	7a5b      	ldrb	r3, [r3, #9]
    4200:	009b      	lsls	r3, r3, #2
    4202:	4a4e      	ldr	r2, [pc, #312]	; (433c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4204:	4413      	add	r3, r2
    4206:	4a50      	ldr	r2, [pc, #320]	; (4348 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4208:	6013      	str	r3, [r2, #0]
    420a:	4b4b      	ldr	r3, [pc, #300]	; (4338 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    420c:	7adb      	ldrb	r3, [r3, #11]
    420e:	009b      	lsls	r3, r3, #2
    4210:	4a4a      	ldr	r2, [pc, #296]	; (433c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4212:	4413      	add	r3, r2
    4214:	4a4d      	ldr	r2, [pc, #308]	; (434c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4216:	6013      	str	r3, [r2, #0]
    4218:	4b47      	ldr	r3, [pc, #284]	; (4338 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    421a:	7b1b      	ldrb	r3, [r3, #12]
    421c:	009b      	lsls	r3, r3, #2
    421e:	4a47      	ldr	r2, [pc, #284]	; (433c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4220:	4413      	add	r3, r2
    4222:	4a4b      	ldr	r2, [pc, #300]	; (4350 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4224:	6013      	str	r3, [r2, #0]
    4226:	4b44      	ldr	r3, [pc, #272]	; (4338 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4228:	7b9b      	ldrb	r3, [r3, #14]
    422a:	009b      	lsls	r3, r3, #2
    422c:	4a43      	ldr	r2, [pc, #268]	; (433c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    422e:	4413      	add	r3, r2
    4230:	4a48      	ldr	r2, [pc, #288]	; (4354 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    4232:	6013      	str	r3, [r2, #0]
    4234:	4b48      	ldr	r3, [pc, #288]	; (4358 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4236:	781b      	ldrb	r3, [r3, #0]
    4238:	2b00      	cmp	r3, #0
    423a:	d002      	beq.n	4242 <Clock_Ip_ClockInitializeObjects+0xda>
    423c:	9b01      	ldr	r3, [sp, #4]
    423e:	2b00      	cmp	r3, #0
    4240:	d003      	beq.n	424a <Clock_Ip_ClockInitializeObjects+0xe2>
    4242:	4b46      	ldr	r3, [pc, #280]	; (435c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4244:	781b      	ldrb	r3, [r3, #0]
    4246:	2b00      	cmp	r3, #0
    4248:	d056      	beq.n	42f8 <Clock_Ip_ClockInitializeObjects+0x190>
    424a:	f7ff fc09 	bl	3a60 <getFircConfig>
    424e:	4603      	mov	r3, r0
    4250:	4a43      	ldr	r2, [pc, #268]	; (4360 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    4252:	6013      	str	r3, [r2, #0]
    4254:	f7ff fc60 	bl	3b18 <getSoscConfig>
    4258:	4603      	mov	r3, r0
    425a:	4a42      	ldr	r2, [pc, #264]	; (4364 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    425c:	6013      	str	r3, [r2, #0]
    425e:	f7ff fca7 	bl	3bb0 <getSpllConfig>
    4262:	4603      	mov	r3, r0
    4264:	4a40      	ldr	r2, [pc, #256]	; (4368 <Clock_Ip_ClockInitializeObjects+0x200>)
    4266:	6013      	str	r3, [r2, #0]
    4268:	2019      	movs	r0, #25
    426a:	f7ff fcfb 	bl	3c64 <getSelectorConfig>
    426e:	4603      	mov	r3, r0
    4270:	4a3e      	ldr	r2, [pc, #248]	; (436c <Clock_Ip_ClockInitializeObjects+0x204>)
    4272:	6013      	str	r3, [r2, #0]
    4274:	201a      	movs	r0, #26
    4276:	f7ff fcf5 	bl	3c64 <getSelectorConfig>
    427a:	4603      	mov	r3, r0
    427c:	4a3c      	ldr	r2, [pc, #240]	; (4370 <Clock_Ip_ClockInitializeObjects+0x208>)
    427e:	6013      	str	r3, [r2, #0]
    4280:	201b      	movs	r0, #27
    4282:	f7ff fcef 	bl	3c64 <getSelectorConfig>
    4286:	4603      	mov	r3, r0
    4288:	4a3a      	ldr	r2, [pc, #232]	; (4374 <Clock_Ip_ClockInitializeObjects+0x20c>)
    428a:	6013      	str	r3, [r2, #0]
    428c:	201d      	movs	r0, #29
    428e:	f7ff fd7b 	bl	3d88 <getCoreDividerConfig>
    4292:	4603      	mov	r3, r0
    4294:	4a38      	ldr	r2, [pc, #224]	; (4378 <Clock_Ip_ClockInitializeObjects+0x210>)
    4296:	6013      	str	r3, [r2, #0]
    4298:	201e      	movs	r0, #30
    429a:	f7ff fd75 	bl	3d88 <getCoreDividerConfig>
    429e:	4603      	mov	r3, r0
    42a0:	4a36      	ldr	r2, [pc, #216]	; (437c <Clock_Ip_ClockInitializeObjects+0x214>)
    42a2:	6013      	str	r3, [r2, #0]
    42a4:	201f      	movs	r0, #31
    42a6:	f7ff fd6f 	bl	3d88 <getCoreDividerConfig>
    42aa:	4603      	mov	r3, r0
    42ac:	4a34      	ldr	r2, [pc, #208]	; (4380 <Clock_Ip_ClockInitializeObjects+0x218>)
    42ae:	6013      	str	r3, [r2, #0]
    42b0:	2021      	movs	r0, #33	; 0x21
    42b2:	f7ff fe0f 	bl	3ed4 <getBusDividerConfig>
    42b6:	4603      	mov	r3, r0
    42b8:	4a32      	ldr	r2, [pc, #200]	; (4384 <Clock_Ip_ClockInitializeObjects+0x21c>)
    42ba:	6013      	str	r3, [r2, #0]
    42bc:	2022      	movs	r0, #34	; 0x22
    42be:	f7ff fe09 	bl	3ed4 <getBusDividerConfig>
    42c2:	4603      	mov	r3, r0
    42c4:	4a30      	ldr	r2, [pc, #192]	; (4388 <Clock_Ip_ClockInitializeObjects+0x220>)
    42c6:	6013      	str	r3, [r2, #0]
    42c8:	2023      	movs	r0, #35	; 0x23
    42ca:	f7ff fe03 	bl	3ed4 <getBusDividerConfig>
    42ce:	4603      	mov	r3, r0
    42d0:	4a2e      	ldr	r2, [pc, #184]	; (438c <Clock_Ip_ClockInitializeObjects+0x224>)
    42d2:	6013      	str	r3, [r2, #0]
    42d4:	2025      	movs	r0, #37	; 0x25
    42d6:	f7ff fea3 	bl	4020 <getSlowDividerConfig>
    42da:	4603      	mov	r3, r0
    42dc:	4a2c      	ldr	r2, [pc, #176]	; (4390 <Clock_Ip_ClockInitializeObjects+0x228>)
    42de:	6013      	str	r3, [r2, #0]
    42e0:	2026      	movs	r0, #38	; 0x26
    42e2:	f7ff fe9d 	bl	4020 <getSlowDividerConfig>
    42e6:	4603      	mov	r3, r0
    42e8:	4a2a      	ldr	r2, [pc, #168]	; (4394 <Clock_Ip_ClockInitializeObjects+0x22c>)
    42ea:	6013      	str	r3, [r2, #0]
    42ec:	2027      	movs	r0, #39	; 0x27
    42ee:	f7ff fe97 	bl	4020 <getSlowDividerConfig>
    42f2:	4603      	mov	r3, r0
    42f4:	4a28      	ldr	r2, [pc, #160]	; (4398 <Clock_Ip_ClockInitializeObjects+0x230>)
    42f6:	6013      	str	r3, [r2, #0]
    42f8:	bf00      	nop
    42fa:	b003      	add	sp, #12
    42fc:	f85d fb04 	ldr.w	pc, [sp], #4
    4300:	1fff8ce0 	.word	0x1fff8ce0
    4304:	0000b5f4 	.word	0x0000b5f4
    4308:	0000bc40 	.word	0x0000bc40
    430c:	1fff8bac 	.word	0x1fff8bac
    4310:	0000b5b4 	.word	0x0000b5b4
    4314:	0000bb88 	.word	0x0000bb88
    4318:	1fff8bb0 	.word	0x1fff8bb0
    431c:	0000b5c4 	.word	0x0000b5c4
    4320:	0000bbf4 	.word	0x0000bbf4
    4324:	1fff8bb4 	.word	0x1fff8bb4
    4328:	0000b604 	.word	0x0000b604
    432c:	0000bc6c 	.word	0x0000bc6c
    4330:	1fff8bb8 	.word	0x1fff8bb8
    4334:	1fff8bf4 	.word	0x1fff8bf4
    4338:	0000b594 	.word	0x0000b594
    433c:	0000bb44 	.word	0x0000bb44
    4340:	1fff8bbc 	.word	0x1fff8bbc
    4344:	1fff8bf8 	.word	0x1fff8bf8
    4348:	1fff8bc0 	.word	0x1fff8bc0
    434c:	1fff8bfc 	.word	0x1fff8bfc
    4350:	1fff8bc4 	.word	0x1fff8bc4
    4354:	1fff8c00 	.word	0x1fff8c00
    4358:	1fff8b19 	.word	0x1fff8b19
    435c:	1fff8b10 	.word	0x1fff8b10
    4360:	1fff8bc8 	.word	0x1fff8bc8
    4364:	1fff8bcc 	.word	0x1fff8bcc
    4368:	1fff8bd0 	.word	0x1fff8bd0
    436c:	1fff8bd4 	.word	0x1fff8bd4
    4370:	1fff8bd8 	.word	0x1fff8bd8
    4374:	1fff8c04 	.word	0x1fff8c04
    4378:	1fff8bdc 	.word	0x1fff8bdc
    437c:	1fff8be0 	.word	0x1fff8be0
    4380:	1fff8c08 	.word	0x1fff8c08
    4384:	1fff8be4 	.word	0x1fff8be4
    4388:	1fff8be8 	.word	0x1fff8be8
    438c:	1fff8c0c 	.word	0x1fff8c0c
    4390:	1fff8bec 	.word	0x1fff8bec
    4394:	1fff8bf0 	.word	0x1fff8bf0
    4398:	1fff8c10 	.word	0x1fff8c10

0000439c <Clock_Ip_ClockPowerModeChangeNotification>:
    439c:	b500      	push	{lr}
    439e:	b083      	sub	sp, #12
    43a0:	9001      	str	r0, [sp, #4]
    43a2:	9100      	str	r1, [sp, #0]
    43a4:	9b01      	ldr	r3, [sp, #4]
    43a6:	2b03      	cmp	r3, #3
    43a8:	f000 8090 	beq.w	44cc <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    43ac:	9b01      	ldr	r3, [sp, #4]
    43ae:	2b03      	cmp	r3, #3
    43b0:	f200 80d3 	bhi.w	455a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    43b4:	9b01      	ldr	r3, [sp, #4]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d040      	beq.n	443c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    43ba:	9b01      	ldr	r3, [sp, #4]
    43bc:	3b01      	subs	r3, #1
    43be:	2b01      	cmp	r3, #1
    43c0:	f200 80cb 	bhi.w	455a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    43c4:	9b00      	ldr	r3, [sp, #0]
    43c6:	2b00      	cmp	r3, #0
    43c8:	f040 80c9 	bne.w	455e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
    43cc:	4b68      	ldr	r3, [pc, #416]	; (4570 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    43ce:	2200      	movs	r2, #0
    43d0:	701a      	strb	r2, [r3, #0]
    43d2:	4b68      	ldr	r3, [pc, #416]	; (4574 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    43d4:	681b      	ldr	r3, [r3, #0]
    43d6:	685b      	ldr	r3, [r3, #4]
    43d8:	4a67      	ldr	r2, [pc, #412]	; (4578 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    43da:	6812      	ldr	r2, [r2, #0]
    43dc:	4610      	mov	r0, r2
    43de:	4798      	blx	r3
    43e0:	4b66      	ldr	r3, [pc, #408]	; (457c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    43e2:	681b      	ldr	r3, [r3, #0]
    43e4:	681b      	ldr	r3, [r3, #0]
    43e6:	4a66      	ldr	r2, [pc, #408]	; (4580 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    43e8:	6812      	ldr	r2, [r2, #0]
    43ea:	4610      	mov	r0, r2
    43ec:	4798      	blx	r3
    43ee:	4b65      	ldr	r3, [pc, #404]	; (4584 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    43f0:	681b      	ldr	r3, [r3, #0]
    43f2:	681b      	ldr	r3, [r3, #0]
    43f4:	4a64      	ldr	r2, [pc, #400]	; (4588 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    43f6:	6812      	ldr	r2, [r2, #0]
    43f8:	4610      	mov	r0, r2
    43fa:	4798      	blx	r3
    43fc:	4b63      	ldr	r3, [pc, #396]	; (458c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    43fe:	681b      	ldr	r3, [r3, #0]
    4400:	681b      	ldr	r3, [r3, #0]
    4402:	4a63      	ldr	r2, [pc, #396]	; (4590 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4404:	6812      	ldr	r2, [r2, #0]
    4406:	4610      	mov	r0, r2
    4408:	4798      	blx	r3
    440a:	4b62      	ldr	r3, [pc, #392]	; (4594 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    440c:	681b      	ldr	r3, [r3, #0]
    440e:	691b      	ldr	r3, [r3, #16]
    4410:	4a61      	ldr	r2, [pc, #388]	; (4598 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4412:	6812      	ldr	r2, [r2, #0]
    4414:	6812      	ldr	r2, [r2, #0]
    4416:	4610      	mov	r0, r2
    4418:	4798      	blx	r3
    441a:	4b60      	ldr	r3, [pc, #384]	; (459c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    441c:	681b      	ldr	r3, [r3, #0]
    441e:	68db      	ldr	r3, [r3, #12]
    4420:	4a5f      	ldr	r2, [pc, #380]	; (45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4422:	6812      	ldr	r2, [r2, #0]
    4424:	6812      	ldr	r2, [r2, #0]
    4426:	4610      	mov	r0, r2
    4428:	4798      	blx	r3
    442a:	4b5e      	ldr	r3, [pc, #376]	; (45a4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    442c:	681b      	ldr	r3, [r3, #0]
    442e:	689b      	ldr	r3, [r3, #8]
    4430:	4a5d      	ldr	r2, [pc, #372]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4432:	6812      	ldr	r2, [r2, #0]
    4434:	6812      	ldr	r2, [r2, #0]
    4436:	4610      	mov	r0, r2
    4438:	4798      	blx	r3
    443a:	e090      	b.n	455e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
    443c:	9b00      	ldr	r3, [sp, #0]
    443e:	2b02      	cmp	r3, #2
    4440:	f040 808f 	bne.w	4562 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
    4444:	4b4a      	ldr	r3, [pc, #296]	; (4570 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4446:	2201      	movs	r2, #1
    4448:	701a      	strb	r2, [r3, #0]
    444a:	4b56      	ldr	r3, [pc, #344]	; (45a4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    444c:	681b      	ldr	r3, [r3, #0]
    444e:	685b      	ldr	r3, [r3, #4]
    4450:	4a55      	ldr	r2, [pc, #340]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4452:	6812      	ldr	r2, [r2, #0]
    4454:	4610      	mov	r0, r2
    4456:	4798      	blx	r3
    4458:	4b50      	ldr	r3, [pc, #320]	; (459c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    445a:	681b      	ldr	r3, [r3, #0]
    445c:	691b      	ldr	r3, [r3, #16]
    445e:	4a50      	ldr	r2, [pc, #320]	; (45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4460:	6812      	ldr	r2, [r2, #0]
    4462:	4610      	mov	r0, r2
    4464:	4798      	blx	r3
    4466:	4b4d      	ldr	r3, [pc, #308]	; (459c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4468:	681b      	ldr	r3, [r3, #0]
    446a:	689b      	ldr	r3, [r3, #8]
    446c:	4a4c      	ldr	r2, [pc, #304]	; (45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    446e:	6812      	ldr	r2, [r2, #0]
    4470:	4610      	mov	r0, r2
    4472:	4798      	blx	r3
    4474:	4b47      	ldr	r3, [pc, #284]	; (4594 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4476:	681b      	ldr	r3, [r3, #0]
    4478:	68db      	ldr	r3, [r3, #12]
    447a:	4a47      	ldr	r2, [pc, #284]	; (4598 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    447c:	6812      	ldr	r2, [r2, #0]
    447e:	4610      	mov	r0, r2
    4480:	4798      	blx	r3
    4482:	4b44      	ldr	r3, [pc, #272]	; (4594 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4484:	681b      	ldr	r3, [r3, #0]
    4486:	689b      	ldr	r3, [r3, #8]
    4488:	4a43      	ldr	r2, [pc, #268]	; (4598 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    448a:	6812      	ldr	r2, [r2, #0]
    448c:	6812      	ldr	r2, [r2, #0]
    448e:	4610      	mov	r0, r2
    4490:	4798      	blx	r3
    4492:	4b38      	ldr	r3, [pc, #224]	; (4574 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4494:	681b      	ldr	r3, [r3, #0]
    4496:	685b      	ldr	r3, [r3, #4]
    4498:	4a44      	ldr	r2, [pc, #272]	; (45ac <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    449a:	6812      	ldr	r2, [r2, #0]
    449c:	4610      	mov	r0, r2
    449e:	4798      	blx	r3
    44a0:	4b36      	ldr	r3, [pc, #216]	; (457c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    44a2:	681b      	ldr	r3, [r3, #0]
    44a4:	681b      	ldr	r3, [r3, #0]
    44a6:	4a42      	ldr	r2, [pc, #264]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    44a8:	6812      	ldr	r2, [r2, #0]
    44aa:	4610      	mov	r0, r2
    44ac:	4798      	blx	r3
    44ae:	4b35      	ldr	r3, [pc, #212]	; (4584 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    44b0:	681b      	ldr	r3, [r3, #0]
    44b2:	681b      	ldr	r3, [r3, #0]
    44b4:	4a3f      	ldr	r2, [pc, #252]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    44b6:	6812      	ldr	r2, [r2, #0]
    44b8:	4610      	mov	r0, r2
    44ba:	4798      	blx	r3
    44bc:	4b33      	ldr	r3, [pc, #204]	; (458c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    44be:	681b      	ldr	r3, [r3, #0]
    44c0:	681b      	ldr	r3, [r3, #0]
    44c2:	4a3d      	ldr	r2, [pc, #244]	; (45b8 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    44c4:	6812      	ldr	r2, [r2, #0]
    44c6:	4610      	mov	r0, r2
    44c8:	4798      	blx	r3
    44ca:	e04a      	b.n	4562 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
    44cc:	9b00      	ldr	r3, [sp, #0]
    44ce:	2b02      	cmp	r3, #2
    44d0:	d149      	bne.n	4566 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
    44d2:	4b27      	ldr	r3, [pc, #156]	; (4570 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    44d4:	2201      	movs	r2, #1
    44d6:	701a      	strb	r2, [r3, #0]
    44d8:	4b32      	ldr	r3, [pc, #200]	; (45a4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    44da:	681b      	ldr	r3, [r3, #0]
    44dc:	685b      	ldr	r3, [r3, #4]
    44de:	4a32      	ldr	r2, [pc, #200]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    44e0:	6812      	ldr	r2, [r2, #0]
    44e2:	4610      	mov	r0, r2
    44e4:	4798      	blx	r3
    44e6:	4b2d      	ldr	r3, [pc, #180]	; (459c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    44e8:	681b      	ldr	r3, [r3, #0]
    44ea:	691b      	ldr	r3, [r3, #16]
    44ec:	4a2c      	ldr	r2, [pc, #176]	; (45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    44ee:	6812      	ldr	r2, [r2, #0]
    44f0:	4610      	mov	r0, r2
    44f2:	4798      	blx	r3
    44f4:	4b29      	ldr	r3, [pc, #164]	; (459c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    44f6:	681b      	ldr	r3, [r3, #0]
    44f8:	689b      	ldr	r3, [r3, #8]
    44fa:	4a29      	ldr	r2, [pc, #164]	; (45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    44fc:	6812      	ldr	r2, [r2, #0]
    44fe:	4610      	mov	r0, r2
    4500:	4798      	blx	r3
    4502:	4b24      	ldr	r3, [pc, #144]	; (4594 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4504:	681b      	ldr	r3, [r3, #0]
    4506:	68db      	ldr	r3, [r3, #12]
    4508:	4a23      	ldr	r2, [pc, #140]	; (4598 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    450a:	6812      	ldr	r2, [r2, #0]
    450c:	4610      	mov	r0, r2
    450e:	4798      	blx	r3
    4510:	4b20      	ldr	r3, [pc, #128]	; (4594 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4512:	681b      	ldr	r3, [r3, #0]
    4514:	689b      	ldr	r3, [r3, #8]
    4516:	4a20      	ldr	r2, [pc, #128]	; (4598 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4518:	6812      	ldr	r2, [r2, #0]
    451a:	6812      	ldr	r2, [r2, #0]
    451c:	4610      	mov	r0, r2
    451e:	4798      	blx	r3
    4520:	4b26      	ldr	r3, [pc, #152]	; (45bc <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4522:	681b      	ldr	r3, [r3, #0]
    4524:	685b      	ldr	r3, [r3, #4]
    4526:	4a26      	ldr	r2, [pc, #152]	; (45c0 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4528:	6812      	ldr	r2, [r2, #0]
    452a:	4610      	mov	r0, r2
    452c:	4798      	blx	r3
    452e:	4b25      	ldr	r3, [pc, #148]	; (45c4 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4530:	681b      	ldr	r3, [r3, #0]
    4532:	681b      	ldr	r3, [r3, #0]
    4534:	4a24      	ldr	r2, [pc, #144]	; (45c8 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4536:	6812      	ldr	r2, [r2, #0]
    4538:	4610      	mov	r0, r2
    453a:	4798      	blx	r3
    453c:	4b23      	ldr	r3, [pc, #140]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    453e:	681b      	ldr	r3, [r3, #0]
    4540:	681b      	ldr	r3, [r3, #0]
    4542:	4a23      	ldr	r2, [pc, #140]	; (45d0 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4544:	6812      	ldr	r2, [r2, #0]
    4546:	4610      	mov	r0, r2
    4548:	4798      	blx	r3
    454a:	4b22      	ldr	r3, [pc, #136]	; (45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    454c:	681b      	ldr	r3, [r3, #0]
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	4a21      	ldr	r2, [pc, #132]	; (45d8 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4552:	6812      	ldr	r2, [r2, #0]
    4554:	4610      	mov	r0, r2
    4556:	4798      	blx	r3
    4558:	e005      	b.n	4566 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
    455a:	bf00      	nop
    455c:	e004      	b.n	4568 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
    455e:	bf00      	nop
    4560:	e002      	b.n	4568 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
    4562:	bf00      	nop
    4564:	e000      	b.n	4568 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
    4566:	bf00      	nop
    4568:	bf00      	nop
    456a:	b003      	add	sp, #12
    456c:	f85d fb04 	ldr.w	pc, [sp], #4
    4570:	1fff8b19 	.word	0x1fff8b19
    4574:	1fff8bb8 	.word	0x1fff8bb8
    4578:	1fff8bd8 	.word	0x1fff8bd8
    457c:	1fff8bbc 	.word	0x1fff8bbc
    4580:	1fff8be0 	.word	0x1fff8be0
    4584:	1fff8bc0 	.word	0x1fff8bc0
    4588:	1fff8be8 	.word	0x1fff8be8
    458c:	1fff8bc4 	.word	0x1fff8bc4
    4590:	1fff8bf0 	.word	0x1fff8bf0
    4594:	1fff8bac 	.word	0x1fff8bac
    4598:	1fff8bd0 	.word	0x1fff8bd0
    459c:	1fff8bb0 	.word	0x1fff8bb0
    45a0:	1fff8bcc 	.word	0x1fff8bcc
    45a4:	1fff8bb4 	.word	0x1fff8bb4
    45a8:	1fff8bc8 	.word	0x1fff8bc8
    45ac:	1fff8bd4 	.word	0x1fff8bd4
    45b0:	1fff8bdc 	.word	0x1fff8bdc
    45b4:	1fff8be4 	.word	0x1fff8be4
    45b8:	1fff8bec 	.word	0x1fff8bec
    45bc:	1fff8bf4 	.word	0x1fff8bf4
    45c0:	1fff8c04 	.word	0x1fff8c04
    45c4:	1fff8bf8 	.word	0x1fff8bf8
    45c8:	1fff8c08 	.word	0x1fff8c08
    45cc:	1fff8bfc 	.word	0x1fff8bfc
    45d0:	1fff8c0c 	.word	0x1fff8c0c
    45d4:	1fff8c00 	.word	0x1fff8c00
    45d8:	1fff8c10 	.word	0x1fff8c10

000045dc <Clock_Ip_Command>:
    45dc:	b500      	push	{lr}
    45de:	b083      	sub	sp, #12
    45e0:	9001      	str	r0, [sp, #4]
    45e2:	9100      	str	r1, [sp, #0]
    45e4:	9b00      	ldr	r3, [sp, #0]
    45e6:	2b04      	cmp	r3, #4
    45e8:	d010      	beq.n	460c <Clock_Ip_Command+0x30>
    45ea:	9b00      	ldr	r3, [sp, #0]
    45ec:	2b04      	cmp	r3, #4
    45ee:	d811      	bhi.n	4614 <Clock_Ip_Command+0x38>
    45f0:	9b00      	ldr	r3, [sp, #0]
    45f2:	2b01      	cmp	r3, #1
    45f4:	d006      	beq.n	4604 <Clock_Ip_Command+0x28>
    45f6:	9b00      	ldr	r3, [sp, #0]
    45f8:	2b02      	cmp	r3, #2
    45fa:	d10b      	bne.n	4614 <Clock_Ip_Command+0x38>
    45fc:	9801      	ldr	r0, [sp, #4]
    45fe:	f7ff fdb3 	bl	4168 <Clock_Ip_ClockInitializeObjects>
    4602:	e008      	b.n	4616 <Clock_Ip_Command+0x3a>
    4604:	9801      	ldr	r0, [sp, #4]
    4606:	f7ff f9db 	bl	39c0 <Clock_Ip_SpecificPlatformInitClock>
    460a:	e004      	b.n	4616 <Clock_Ip_Command+0x3a>
    460c:	9801      	ldr	r0, [sp, #4]
    460e:	f7ff f8ed 	bl	37ec <DisableSafeClock>
    4612:	e000      	b.n	4616 <Clock_Ip_Command+0x3a>
    4614:	bf00      	nop
    4616:	bf00      	nop
    4618:	b003      	add	sp, #12
    461a:	f85d fb04 	ldr.w	pc, [sp], #4
    461e:	bf00      	nop

00004620 <Mcu_Init>:
    4620:	b500      	push	{lr}
    4622:	b085      	sub	sp, #20
    4624:	9001      	str	r0, [sp, #4]
    4626:	4a20      	ldr	r2, [pc, #128]	; (46a8 <Mcu_Init+0x88>)
    4628:	9b01      	ldr	r3, [sp, #4]
    462a:	6013      	str	r3, [r2, #0]
    462c:	2300      	movs	r3, #0
    462e:	9303      	str	r3, [sp, #12]
    4630:	e010      	b.n	4654 <Mcu_Init+0x34>
    4632:	4b1d      	ldr	r3, [pc, #116]	; (46a8 <Mcu_Init+0x88>)
    4634:	681b      	ldr	r3, [r3, #0]
    4636:	6919      	ldr	r1, [r3, #16]
    4638:	9a03      	ldr	r2, [sp, #12]
    463a:	4613      	mov	r3, r2
    463c:	005b      	lsls	r3, r3, #1
    463e:	4413      	add	r3, r2
    4640:	009b      	lsls	r3, r3, #2
    4642:	440b      	add	r3, r1
    4644:	681b      	ldr	r3, [r3, #0]
    4646:	9a03      	ldr	r2, [sp, #12]
    4648:	b2d1      	uxtb	r1, r2
    464a:	4a18      	ldr	r2, [pc, #96]	; (46ac <Mcu_Init+0x8c>)
    464c:	54d1      	strb	r1, [r2, r3]
    464e:	9b03      	ldr	r3, [sp, #12]
    4650:	3301      	adds	r3, #1
    4652:	9303      	str	r3, [sp, #12]
    4654:	4b14      	ldr	r3, [pc, #80]	; (46a8 <Mcu_Init+0x88>)
    4656:	681b      	ldr	r3, [r3, #0]
    4658:	689b      	ldr	r3, [r3, #8]
    465a:	9a03      	ldr	r2, [sp, #12]
    465c:	429a      	cmp	r2, r3
    465e:	d3e8      	bcc.n	4632 <Mcu_Init+0x12>
    4660:	2300      	movs	r3, #0
    4662:	9303      	str	r3, [sp, #12]
    4664:	e010      	b.n	4688 <Mcu_Init+0x68>
    4666:	4b10      	ldr	r3, [pc, #64]	; (46a8 <Mcu_Init+0x88>)
    4668:	681b      	ldr	r3, [r3, #0]
    466a:	6959      	ldr	r1, [r3, #20]
    466c:	9a03      	ldr	r2, [sp, #12]
    466e:	4613      	mov	r3, r2
    4670:	01db      	lsls	r3, r3, #7
    4672:	1a9b      	subs	r3, r3, r2
    4674:	00db      	lsls	r3, r3, #3
    4676:	440b      	add	r3, r1
    4678:	681b      	ldr	r3, [r3, #0]
    467a:	9a03      	ldr	r2, [sp, #12]
    467c:	b2d1      	uxtb	r1, r2
    467e:	4a0c      	ldr	r2, [pc, #48]	; (46b0 <Mcu_Init+0x90>)
    4680:	54d1      	strb	r1, [r2, r3]
    4682:	9b03      	ldr	r3, [sp, #12]
    4684:	3301      	adds	r3, #1
    4686:	9303      	str	r3, [sp, #12]
    4688:	4b07      	ldr	r3, [pc, #28]	; (46a8 <Mcu_Init+0x88>)
    468a:	681b      	ldr	r3, [r3, #0]
    468c:	68db      	ldr	r3, [r3, #12]
    468e:	9a03      	ldr	r2, [sp, #12]
    4690:	429a      	cmp	r2, r3
    4692:	d3e8      	bcc.n	4666 <Mcu_Init+0x46>
    4694:	4b04      	ldr	r3, [pc, #16]	; (46a8 <Mcu_Init+0x88>)
    4696:	681b      	ldr	r3, [r3, #0]
    4698:	699b      	ldr	r3, [r3, #24]
    469a:	4618      	mov	r0, r3
    469c:	f000 f88a 	bl	47b4 <Mcu_Ipw_Init>
    46a0:	bf00      	nop
    46a2:	b005      	add	sp, #20
    46a4:	f85d fb04 	ldr.w	pc, [sp], #4
    46a8:	1fff8cec 	.word	0x1fff8cec
    46ac:	1fff8ce8 	.word	0x1fff8ce8
    46b0:	1fff8ce4 	.word	0x1fff8ce4

000046b4 <Mcu_InitRamSection>:
    46b4:	b084      	sub	sp, #16
    46b6:	9001      	str	r0, [sp, #4]
    46b8:	2301      	movs	r3, #1
    46ba:	f88d 300f 	strb.w	r3, [sp, #15]
    46be:	f89d 300f 	ldrb.w	r3, [sp, #15]
    46c2:	4618      	mov	r0, r3
    46c4:	b004      	add	sp, #16
    46c6:	4770      	bx	lr

000046c8 <Mcu_InitClock>:
    46c8:	b500      	push	{lr}
    46ca:	b085      	sub	sp, #20
    46cc:	9001      	str	r0, [sp, #4]
    46ce:	4a0e      	ldr	r2, [pc, #56]	; (4708 <Mcu_InitClock+0x40>)
    46d0:	9b01      	ldr	r3, [sp, #4]
    46d2:	4413      	add	r3, r2
    46d4:	781b      	ldrb	r3, [r3, #0]
    46d6:	f88d 300f 	strb.w	r3, [sp, #15]
    46da:	4b0c      	ldr	r3, [pc, #48]	; (470c <Mcu_InitClock+0x44>)
    46dc:	681b      	ldr	r3, [r3, #0]
    46de:	6959      	ldr	r1, [r3, #20]
    46e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    46e4:	4613      	mov	r3, r2
    46e6:	01db      	lsls	r3, r3, #7
    46e8:	1a9b      	subs	r3, r3, r2
    46ea:	00db      	lsls	r3, r3, #3
    46ec:	440b      	add	r3, r1
    46ee:	4618      	mov	r0, r3
    46f0:	f000 f86a 	bl	47c8 <Mcu_Ipw_InitClock>
    46f4:	2300      	movs	r3, #0
    46f6:	f88d 300e 	strb.w	r3, [sp, #14]
    46fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    46fe:	4618      	mov	r0, r3
    4700:	b005      	add	sp, #20
    4702:	f85d fb04 	ldr.w	pc, [sp], #4
    4706:	bf00      	nop
    4708:	1fff8ce4 	.word	0x1fff8ce4
    470c:	1fff8cec 	.word	0x1fff8cec

00004710 <Mcu_SetMode>:
    4710:	b500      	push	{lr}
    4712:	b085      	sub	sp, #20
    4714:	9001      	str	r0, [sp, #4]
    4716:	4a0d      	ldr	r2, [pc, #52]	; (474c <Mcu_SetMode+0x3c>)
    4718:	9b01      	ldr	r3, [sp, #4]
    471a:	4413      	add	r3, r2
    471c:	781b      	ldrb	r3, [r3, #0]
    471e:	f88d 300f 	strb.w	r3, [sp, #15]
    4722:	f004 fa13 	bl	8b4c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>
    4726:	4b0a      	ldr	r3, [pc, #40]	; (4750 <Mcu_SetMode+0x40>)
    4728:	681b      	ldr	r3, [r3, #0]
    472a:	6919      	ldr	r1, [r3, #16]
    472c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4730:	4613      	mov	r3, r2
    4732:	005b      	lsls	r3, r3, #1
    4734:	4413      	add	r3, r2
    4736:	009b      	lsls	r3, r3, #2
    4738:	440b      	add	r3, r1
    473a:	4618      	mov	r0, r3
    473c:	f000 f84e 	bl	47dc <Mcu_Ipw_SetMode>
    4740:	f004 fa30 	bl	8ba4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
    4744:	bf00      	nop
    4746:	b005      	add	sp, #20
    4748:	f85d fb04 	ldr.w	pc, [sp], #4
    474c:	1fff8ce8 	.word	0x1fff8ce8
    4750:	1fff8cec 	.word	0x1fff8cec

00004754 <Mcu_GetPllStatus>:
    4754:	b082      	sub	sp, #8
    4756:	2302      	movs	r3, #2
    4758:	9301      	str	r3, [sp, #4]
    475a:	9b01      	ldr	r3, [sp, #4]
    475c:	4618      	mov	r0, r3
    475e:	b002      	add	sp, #8
    4760:	4770      	bx	lr

00004762 <Mcu_GetResetReason>:
    4762:	b500      	push	{lr}
    4764:	b083      	sub	sp, #12
    4766:	f000 f843 	bl	47f0 <Mcu_Ipw_GetResetReason>
    476a:	9001      	str	r0, [sp, #4]
    476c:	9b01      	ldr	r3, [sp, #4]
    476e:	4618      	mov	r0, r3
    4770:	b003      	add	sp, #12
    4772:	f85d fb04 	ldr.w	pc, [sp], #4

00004776 <Mcu_GetResetRawValue>:
    4776:	b500      	push	{lr}
    4778:	b083      	sub	sp, #12
    477a:	f000 f83f 	bl	47fc <Mcu_Ipw_GetResetRawValue>
    477e:	9001      	str	r0, [sp, #4]
    4780:	9b01      	ldr	r3, [sp, #4]
    4782:	4618      	mov	r0, r3
    4784:	b003      	add	sp, #12
    4786:	f85d fb04 	ldr.w	pc, [sp], #4

0000478a <Mcu_SleepOnExit>:
    478a:	b500      	push	{lr}
    478c:	b083      	sub	sp, #12
    478e:	9001      	str	r0, [sp, #4]
    4790:	9801      	ldr	r0, [sp, #4]
    4792:	f000 f839 	bl	4808 <Mcu_Ipw_SleepOnExit>
    4796:	bf00      	nop
    4798:	b003      	add	sp, #12
    479a:	f85d fb04 	ldr.w	pc, [sp], #4

0000479e <Mcu_ClkSrcFailureNotification>:
    479e:	b082      	sub	sp, #8
    47a0:	9001      	str	r0, [sp, #4]
    47a2:	4b03      	ldr	r3, [pc, #12]	; (47b0 <Mcu_ClkSrcFailureNotification+0x12>)
    47a4:	681b      	ldr	r3, [r3, #0]
    47a6:	2b00      	cmp	r3, #0
    47a8:	bf00      	nop
    47aa:	b002      	add	sp, #8
    47ac:	4770      	bx	lr
    47ae:	bf00      	nop
    47b0:	1fff8cec 	.word	0x1fff8cec

000047b4 <Mcu_Ipw_Init>:
    47b4:	b500      	push	{lr}
    47b6:	b083      	sub	sp, #12
    47b8:	9001      	str	r0, [sp, #4]
    47ba:	9801      	ldr	r0, [sp, #4]
    47bc:	f000 f882 	bl	48c4 <Power_Ip_Init>
    47c0:	bf00      	nop
    47c2:	b003      	add	sp, #12
    47c4:	f85d fb04 	ldr.w	pc, [sp], #4

000047c8 <Mcu_Ipw_InitClock>:
    47c8:	b500      	push	{lr}
    47ca:	b083      	sub	sp, #12
    47cc:	9001      	str	r0, [sp, #4]
    47ce:	9801      	ldr	r0, [sp, #4]
    47d0:	f7fc fc6a 	bl	10a8 <Clock_Ip_InitClock>
    47d4:	bf00      	nop
    47d6:	b003      	add	sp, #12
    47d8:	f85d fb04 	ldr.w	pc, [sp], #4

000047dc <Mcu_Ipw_SetMode>:
    47dc:	b500      	push	{lr}
    47de:	b083      	sub	sp, #12
    47e0:	9001      	str	r0, [sp, #4]
    47e2:	9801      	ldr	r0, [sp, #4]
    47e4:	f000 f820 	bl	4828 <Power_Ip_SetMode>
    47e8:	bf00      	nop
    47ea:	b003      	add	sp, #12
    47ec:	f85d fb04 	ldr.w	pc, [sp], #4

000047f0 <Mcu_Ipw_GetResetReason>:
    47f0:	b508      	push	{r3, lr}
    47f2:	f000 f84f 	bl	4894 <Power_Ip_GetResetReason>
    47f6:	4603      	mov	r3, r0
    47f8:	4618      	mov	r0, r3
    47fa:	bd08      	pop	{r3, pc}

000047fc <Mcu_Ipw_GetResetRawValue>:
    47fc:	b508      	push	{r3, lr}
    47fe:	f000 f857 	bl	48b0 <Power_Ip_GetResetRawValue>
    4802:	4603      	mov	r3, r0
    4804:	4618      	mov	r0, r3
    4806:	bd08      	pop	{r3, pc}

00004808 <Mcu_Ipw_SleepOnExit>:
    4808:	b500      	push	{lr}
    480a:	b083      	sub	sp, #12
    480c:	9001      	str	r0, [sp, #4]
    480e:	9b01      	ldr	r3, [sp, #4]
    4810:	2b00      	cmp	r3, #0
    4812:	d102      	bne.n	481a <Mcu_Ipw_SleepOnExit+0x12>
    4814:	f000 f86c 	bl	48f0 <Power_Ip_DisableSleepOnExit>
    4818:	e001      	b.n	481e <Mcu_Ipw_SleepOnExit+0x16>
    481a:	f000 f86e 	bl	48fa <Power_Ip_EnableSleepOnExit>
    481e:	bf00      	nop
    4820:	b003      	add	sp, #12
    4822:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004828 <Power_Ip_SetMode>:
    4828:	b500      	push	{lr}
    482a:	b085      	sub	sp, #20
    482c:	9001      	str	r0, [sp, #4]
    482e:	9b01      	ldr	r3, [sp, #4]
    4830:	685b      	ldr	r3, [r3, #4]
    4832:	9302      	str	r3, [sp, #8]
    4834:	9802      	ldr	r0, [sp, #8]
    4836:	f000 f9f5 	bl	4c24 <Power_Ip_SMC_ModeCheckEntry>
    483a:	4603      	mov	r3, r0
    483c:	2b00      	cmp	r3, #0
    483e:	d002      	beq.n	4846 <Power_Ip_SetMode+0x1e>
    4840:	2301      	movs	r3, #1
    4842:	9303      	str	r3, [sp, #12]
    4844:	e003      	b.n	484e <Power_Ip_SetMode+0x26>
    4846:	9801      	ldr	r0, [sp, #4]
    4848:	f000 fa1e 	bl	4c88 <Power_Ip_SMC_ModeConfig>
    484c:	9003      	str	r0, [sp, #12]
    484e:	9b03      	ldr	r3, [sp, #12]
    4850:	2b01      	cmp	r3, #1
    4852:	d103      	bne.n	485c <Power_Ip_SetMode+0x34>
    4854:	21ff      	movs	r1, #255	; 0xff
    4856:	2003      	movs	r0, #3
    4858:	f000 f8f4 	bl	4a44 <Power_Ip_ReportPowerErrors>
    485c:	bf00      	nop
    485e:	b005      	add	sp, #20
    4860:	f85d fb04 	ldr.w	pc, [sp], #4

00004864 <Power_Ip_ConvertIntergeToResetType>:
    4864:	b084      	sub	sp, #16
    4866:	9001      	str	r0, [sp, #4]
    4868:	230c      	movs	r3, #12
    486a:	9303      	str	r3, [sp, #12]
    486c:	4a08      	ldr	r2, [pc, #32]	; (4890 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    486e:	9b01      	ldr	r3, [sp, #4]
    4870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4874:	2b0e      	cmp	r3, #14
    4876:	d805      	bhi.n	4884 <Power_Ip_ConvertIntergeToResetType+0x20>
    4878:	4a05      	ldr	r2, [pc, #20]	; (4890 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    487a:	9b01      	ldr	r3, [sp, #4]
    487c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4880:	9303      	str	r3, [sp, #12]
    4882:	e001      	b.n	4888 <Power_Ip_ConvertIntergeToResetType+0x24>
    4884:	230c      	movs	r3, #12
    4886:	9303      	str	r3, [sp, #12]
    4888:	9b03      	ldr	r3, [sp, #12]
    488a:	4618      	mov	r0, r3
    488c:	b004      	add	sp, #16
    488e:	4770      	bx	lr
    4890:	0000bce0 	.word	0x0000bce0

00004894 <Power_Ip_GetResetReason>:
    4894:	b500      	push	{lr}
    4896:	b083      	sub	sp, #12
    4898:	f000 f940 	bl	4b1c <Power_Ip_RCM_GetResetReason>
    489c:	9001      	str	r0, [sp, #4]
    489e:	9801      	ldr	r0, [sp, #4]
    48a0:	f7ff ffe0 	bl	4864 <Power_Ip_ConvertIntergeToResetType>
    48a4:	9000      	str	r0, [sp, #0]
    48a6:	9b00      	ldr	r3, [sp, #0]
    48a8:	4618      	mov	r0, r3
    48aa:	b003      	add	sp, #12
    48ac:	f85d fb04 	ldr.w	pc, [sp], #4

000048b0 <Power_Ip_GetResetRawValue>:
    48b0:	b500      	push	{lr}
    48b2:	b083      	sub	sp, #12
    48b4:	f000 f98a 	bl	4bcc <Power_Ip_RCM_GetResetRawValue>
    48b8:	9001      	str	r0, [sp, #4]
    48ba:	9b01      	ldr	r3, [sp, #4]
    48bc:	4618      	mov	r0, r3
    48be:	b003      	add	sp, #12
    48c0:	f85d fb04 	ldr.w	pc, [sp], #4

000048c4 <Power_Ip_Init>:
    48c4:	b500      	push	{lr}
    48c6:	b083      	sub	sp, #12
    48c8:	9001      	str	r0, [sp, #4]
    48ca:	9b01      	ldr	r3, [sp, #4]
    48cc:	681b      	ldr	r3, [r3, #0]
    48ce:	4618      	mov	r0, r3
    48d0:	f000 f90e 	bl	4af0 <Power_Ip_RCM_ResetInit>
    48d4:	9b01      	ldr	r3, [sp, #4]
    48d6:	685b      	ldr	r3, [r3, #4]
    48d8:	4618      	mov	r0, r3
    48da:	f000 f86d 	bl	49b8 <Power_Ip_PMC_PowerInit>
    48de:	9b01      	ldr	r3, [sp, #4]
    48e0:	689b      	ldr	r3, [r3, #8]
    48e2:	4618      	mov	r0, r3
    48e4:	f000 f990 	bl	4c08 <Power_Ip_SMC_AllowedModesConfig>
    48e8:	bf00      	nop
    48ea:	b003      	add	sp, #12
    48ec:	f85d fb04 	ldr.w	pc, [sp], #4

000048f0 <Power_Ip_DisableSleepOnExit>:
    48f0:	b508      	push	{r3, lr}
    48f2:	f000 f811 	bl	4918 <Power_Ip_CM4_DisableSleepOnExit>
    48f6:	bf00      	nop
    48f8:	bd08      	pop	{r3, pc}

000048fa <Power_Ip_EnableSleepOnExit>:
    48fa:	b508      	push	{r3, lr}
    48fc:	f000 f820 	bl	4940 <Power_Ip_CM4_EnableSleepOnExit>
    4900:	bf00      	nop
    4902:	bd08      	pop	{r3, pc}

00004904 <Power_Ip_InstallNotificationsCallback>:
    4904:	b082      	sub	sp, #8
    4906:	9001      	str	r0, [sp, #4]
    4908:	4a02      	ldr	r2, [pc, #8]	; (4914 <Power_Ip_InstallNotificationsCallback+0x10>)
    490a:	9b01      	ldr	r3, [sp, #4]
    490c:	6013      	str	r3, [r2, #0]
    490e:	bf00      	nop
    4910:	b002      	add	sp, #8
    4912:	4770      	bx	lr
    4914:	1fff8b1c 	.word	0x1fff8b1c

00004918 <Power_Ip_CM4_DisableSleepOnExit>:
    4918:	b082      	sub	sp, #8
    491a:	2300      	movs	r3, #0
    491c:	9301      	str	r3, [sp, #4]
    491e:	4b07      	ldr	r3, [pc, #28]	; (493c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4920:	681b      	ldr	r3, [r3, #0]
    4922:	685b      	ldr	r3, [r3, #4]
    4924:	9301      	str	r3, [sp, #4]
    4926:	9b01      	ldr	r3, [sp, #4]
    4928:	f023 0302 	bic.w	r3, r3, #2
    492c:	9301      	str	r3, [sp, #4]
    492e:	4b03      	ldr	r3, [pc, #12]	; (493c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4930:	681b      	ldr	r3, [r3, #0]
    4932:	9a01      	ldr	r2, [sp, #4]
    4934:	605a      	str	r2, [r3, #4]
    4936:	bf00      	nop
    4938:	b002      	add	sp, #8
    493a:	4770      	bx	lr
    493c:	1fff8b20 	.word	0x1fff8b20

00004940 <Power_Ip_CM4_EnableSleepOnExit>:
    4940:	b082      	sub	sp, #8
    4942:	2300      	movs	r3, #0
    4944:	9301      	str	r3, [sp, #4]
    4946:	4b07      	ldr	r3, [pc, #28]	; (4964 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4948:	681b      	ldr	r3, [r3, #0]
    494a:	685b      	ldr	r3, [r3, #4]
    494c:	9301      	str	r3, [sp, #4]
    494e:	9b01      	ldr	r3, [sp, #4]
    4950:	f043 0302 	orr.w	r3, r3, #2
    4954:	9301      	str	r3, [sp, #4]
    4956:	4b03      	ldr	r3, [pc, #12]	; (4964 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4958:	681b      	ldr	r3, [r3, #0]
    495a:	9a01      	ldr	r2, [sp, #4]
    495c:	605a      	str	r2, [r3, #4]
    495e:	bf00      	nop
    4960:	b002      	add	sp, #8
    4962:	4770      	bx	lr
    4964:	1fff8b20 	.word	0x1fff8b20

00004968 <Power_Ip_CM4_EnableDeepSleep>:
    4968:	b082      	sub	sp, #8
    496a:	2300      	movs	r3, #0
    496c:	9301      	str	r3, [sp, #4]
    496e:	4b07      	ldr	r3, [pc, #28]	; (498c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4970:	681b      	ldr	r3, [r3, #0]
    4972:	685b      	ldr	r3, [r3, #4]
    4974:	9301      	str	r3, [sp, #4]
    4976:	9b01      	ldr	r3, [sp, #4]
    4978:	f043 0304 	orr.w	r3, r3, #4
    497c:	9301      	str	r3, [sp, #4]
    497e:	4b03      	ldr	r3, [pc, #12]	; (498c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4980:	681b      	ldr	r3, [r3, #0]
    4982:	9a01      	ldr	r2, [sp, #4]
    4984:	605a      	str	r2, [r3, #4]
    4986:	bf00      	nop
    4988:	b002      	add	sp, #8
    498a:	4770      	bx	lr
    498c:	1fff8b20 	.word	0x1fff8b20

00004990 <Power_Ip_CM4_DisableDeepSleep>:
    4990:	b082      	sub	sp, #8
    4992:	2300      	movs	r3, #0
    4994:	9301      	str	r3, [sp, #4]
    4996:	4b07      	ldr	r3, [pc, #28]	; (49b4 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4998:	681b      	ldr	r3, [r3, #0]
    499a:	685b      	ldr	r3, [r3, #4]
    499c:	9301      	str	r3, [sp, #4]
    499e:	9b01      	ldr	r3, [sp, #4]
    49a0:	f023 0304 	bic.w	r3, r3, #4
    49a4:	9301      	str	r3, [sp, #4]
    49a6:	4b03      	ldr	r3, [pc, #12]	; (49b4 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    49a8:	681b      	ldr	r3, [r3, #0]
    49aa:	9a01      	ldr	r2, [sp, #4]
    49ac:	605a      	str	r2, [r3, #4]
    49ae:	bf00      	nop
    49b0:	b002      	add	sp, #8
    49b2:	4770      	bx	lr
    49b4:	1fff8b20 	.word	0x1fff8b20

000049b8 <Power_Ip_PMC_PowerInit>:
    49b8:	b084      	sub	sp, #16
    49ba:	9001      	str	r0, [sp, #4]
    49bc:	4b20      	ldr	r3, [pc, #128]	; (4a40 <Power_Ip_PMC_PowerInit+0x88>)
    49be:	781b      	ldrb	r3, [r3, #0]
    49c0:	f88d 300f 	strb.w	r3, [sp, #15]
    49c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    49c8:	f003 030f 	and.w	r3, r3, #15
    49cc:	f88d 300f 	strb.w	r3, [sp, #15]
    49d0:	9b01      	ldr	r3, [sp, #4]
    49d2:	781a      	ldrb	r2, [r3, #0]
    49d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    49d8:	4313      	orrs	r3, r2
    49da:	f88d 300f 	strb.w	r3, [sp, #15]
    49de:	4a18      	ldr	r2, [pc, #96]	; (4a40 <Power_Ip_PMC_PowerInit+0x88>)
    49e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    49e4:	7013      	strb	r3, [r2, #0]
    49e6:	4b16      	ldr	r3, [pc, #88]	; (4a40 <Power_Ip_PMC_PowerInit+0x88>)
    49e8:	785b      	ldrb	r3, [r3, #1]
    49ea:	f88d 300f 	strb.w	r3, [sp, #15]
    49ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    49f2:	f003 031f 	and.w	r3, r3, #31
    49f6:	f88d 300f 	strb.w	r3, [sp, #15]
    49fa:	9b01      	ldr	r3, [sp, #4]
    49fc:	785a      	ldrb	r2, [r3, #1]
    49fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a02:	4313      	orrs	r3, r2
    4a04:	f88d 300f 	strb.w	r3, [sp, #15]
    4a08:	4a0d      	ldr	r2, [pc, #52]	; (4a40 <Power_Ip_PMC_PowerInit+0x88>)
    4a0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a0e:	7053      	strb	r3, [r2, #1]
    4a10:	4b0b      	ldr	r3, [pc, #44]	; (4a40 <Power_Ip_PMC_PowerInit+0x88>)
    4a12:	789b      	ldrb	r3, [r3, #2]
    4a14:	f88d 300f 	strb.w	r3, [sp, #15]
    4a18:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    4a20:	f88d 300f 	strb.w	r3, [sp, #15]
    4a24:	9b01      	ldr	r3, [sp, #4]
    4a26:	789a      	ldrb	r2, [r3, #2]
    4a28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a2c:	4313      	orrs	r3, r2
    4a2e:	f88d 300f 	strb.w	r3, [sp, #15]
    4a32:	4a03      	ldr	r2, [pc, #12]	; (4a40 <Power_Ip_PMC_PowerInit+0x88>)
    4a34:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a38:	7093      	strb	r3, [r2, #2]
    4a3a:	bf00      	nop
    4a3c:	b004      	add	sp, #16
    4a3e:	4770      	bx	lr
    4a40:	4007d000 	.word	0x4007d000

00004a44 <Power_Ip_ReportPowerErrors>:
    4a44:	b500      	push	{lr}
    4a46:	b083      	sub	sp, #12
    4a48:	9001      	str	r0, [sp, #4]
    4a4a:	460b      	mov	r3, r1
    4a4c:	f88d 3003 	strb.w	r3, [sp, #3]
    4a50:	4b05      	ldr	r3, [pc, #20]	; (4a68 <Power_Ip_ReportPowerErrors+0x24>)
    4a52:	681b      	ldr	r3, [r3, #0]
    4a54:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4a58:	4611      	mov	r1, r2
    4a5a:	9801      	ldr	r0, [sp, #4]
    4a5c:	4798      	blx	r3
    4a5e:	bf00      	nop
    4a60:	b003      	add	sp, #12
    4a62:	f85d fb04 	ldr.w	pc, [sp], #4
    4a66:	bf00      	nop
    4a68:	1fff8b1c 	.word	0x1fff8b1c

00004a6c <Power_Ip_ReportPowerErrorsEmptyCallback>:
    4a6c:	b082      	sub	sp, #8
    4a6e:	9001      	str	r0, [sp, #4]
    4a70:	460b      	mov	r3, r1
    4a72:	f88d 3003 	strb.w	r3, [sp, #3]
    4a76:	bf00      	nop
    4a78:	b002      	add	sp, #8
    4a7a:	4770      	bx	lr

00004a7c <Power_Ip_StartTimeout>:
    4a7c:	b500      	push	{lr}
    4a7e:	b085      	sub	sp, #20
    4a80:	9003      	str	r0, [sp, #12]
    4a82:	9102      	str	r1, [sp, #8]
    4a84:	9201      	str	r2, [sp, #4]
    4a86:	9300      	str	r3, [sp, #0]
    4a88:	2000      	movs	r0, #0
    4a8a:	f7fc f83c 	bl	b06 <OsIf_GetCounter>
    4a8e:	4602      	mov	r2, r0
    4a90:	9b03      	ldr	r3, [sp, #12]
    4a92:	601a      	str	r2, [r3, #0]
    4a94:	9b02      	ldr	r3, [sp, #8]
    4a96:	2200      	movs	r2, #0
    4a98:	601a      	str	r2, [r3, #0]
    4a9a:	2100      	movs	r1, #0
    4a9c:	9800      	ldr	r0, [sp, #0]
    4a9e:	f7fc f87e 	bl	b9e <OsIf_MicrosToTicks>
    4aa2:	4602      	mov	r2, r0
    4aa4:	9b01      	ldr	r3, [sp, #4]
    4aa6:	601a      	str	r2, [r3, #0]
    4aa8:	bf00      	nop
    4aaa:	b005      	add	sp, #20
    4aac:	f85d fb04 	ldr.w	pc, [sp], #4

00004ab0 <Power_Ip_TimeoutExpired>:
    4ab0:	b500      	push	{lr}
    4ab2:	b087      	sub	sp, #28
    4ab4:	9003      	str	r0, [sp, #12]
    4ab6:	9102      	str	r1, [sp, #8]
    4ab8:	9201      	str	r2, [sp, #4]
    4aba:	2300      	movs	r3, #0
    4abc:	f88d 3017 	strb.w	r3, [sp, #23]
    4ac0:	2100      	movs	r1, #0
    4ac2:	9803      	ldr	r0, [sp, #12]
    4ac4:	f7fc f838 	bl	b38 <OsIf_GetElapsed>
    4ac8:	4602      	mov	r2, r0
    4aca:	9b02      	ldr	r3, [sp, #8]
    4acc:	681b      	ldr	r3, [r3, #0]
    4ace:	441a      	add	r2, r3
    4ad0:	9b02      	ldr	r3, [sp, #8]
    4ad2:	601a      	str	r2, [r3, #0]
    4ad4:	9b02      	ldr	r3, [sp, #8]
    4ad6:	681b      	ldr	r3, [r3, #0]
    4ad8:	9a01      	ldr	r2, [sp, #4]
    4ada:	429a      	cmp	r2, r3
    4adc:	d802      	bhi.n	4ae4 <Power_Ip_TimeoutExpired+0x34>
    4ade:	2301      	movs	r3, #1
    4ae0:	f88d 3017 	strb.w	r3, [sp, #23]
    4ae4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4ae8:	4618      	mov	r0, r3
    4aea:	b007      	add	sp, #28
    4aec:	f85d fb04 	ldr.w	pc, [sp], #4

00004af0 <Power_Ip_RCM_ResetInit>:
    4af0:	b082      	sub	sp, #8
    4af2:	9001      	str	r0, [sp, #4]
    4af4:	9b01      	ldr	r3, [sp, #4]
    4af6:	681a      	ldr	r2, [r3, #0]
    4af8:	4907      	ldr	r1, [pc, #28]	; (4b18 <Power_Ip_RCM_ResetInit+0x28>)
    4afa:	f641 7307 	movw	r3, #7943	; 0x1f07
    4afe:	4013      	ands	r3, r2
    4b00:	60cb      	str	r3, [r1, #12]
    4b02:	9b01      	ldr	r3, [sp, #4]
    4b04:	685a      	ldr	r2, [r3, #4]
    4b06:	4904      	ldr	r1, [pc, #16]	; (4b18 <Power_Ip_RCM_ResetInit+0x28>)
    4b08:	f642 73ff 	movw	r3, #12287	; 0x2fff
    4b0c:	4013      	ands	r3, r2
    4b0e:	61cb      	str	r3, [r1, #28]
    4b10:	bf00      	nop
    4b12:	b002      	add	sp, #8
    4b14:	4770      	bx	lr
    4b16:	bf00      	nop
    4b18:	4007f000 	.word	0x4007f000

00004b1c <Power_Ip_RCM_GetResetReason>:
    4b1c:	b088      	sub	sp, #32
    4b1e:	230c      	movs	r3, #12
    4b20:	9307      	str	r3, [sp, #28]
    4b22:	2300      	movs	r3, #0
    4b24:	9303      	str	r3, [sp, #12]
    4b26:	2300      	movs	r3, #0
    4b28:	9305      	str	r3, [sp, #20]
    4b2a:	2300      	movs	r3, #0
    4b2c:	9304      	str	r3, [sp, #16]
    4b2e:	4b25      	ldr	r3, [pc, #148]	; (4bc4 <Power_Ip_RCM_GetResetReason+0xa8>)
    4b30:	699a      	ldr	r2, [r3, #24]
    4b32:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b36:	4013      	ands	r3, r2
    4b38:	9303      	str	r3, [sp, #12]
    4b3a:	9b03      	ldr	r3, [sp, #12]
    4b3c:	2b00      	cmp	r3, #0
    4b3e:	d008      	beq.n	4b52 <Power_Ip_RCM_GetResetReason+0x36>
    4b40:	4920      	ldr	r1, [pc, #128]	; (4bc4 <Power_Ip_RCM_GetResetReason+0xa8>)
    4b42:	9a03      	ldr	r2, [sp, #12]
    4b44:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b48:	4013      	ands	r3, r2
    4b4a:	618b      	str	r3, [r1, #24]
    4b4c:	4a1e      	ldr	r2, [pc, #120]	; (4bc8 <Power_Ip_RCM_GetResetReason+0xac>)
    4b4e:	9b03      	ldr	r3, [sp, #12]
    4b50:	6013      	str	r3, [r2, #0]
    4b52:	4b1d      	ldr	r3, [pc, #116]	; (4bc8 <Power_Ip_RCM_GetResetReason+0xac>)
    4b54:	681b      	ldr	r3, [r3, #0]
    4b56:	9302      	str	r3, [sp, #8]
    4b58:	9a02      	ldr	r2, [sp, #8]
    4b5a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b5e:	4013      	ands	r3, r2
    4b60:	2b82      	cmp	r3, #130	; 0x82
    4b62:	d102      	bne.n	4b6a <Power_Ip_RCM_GetResetReason+0x4e>
    4b64:	2305      	movs	r3, #5
    4b66:	9307      	str	r3, [sp, #28]
    4b68:	e027      	b.n	4bba <Power_Ip_RCM_GetResetReason+0x9e>
    4b6a:	2300      	movs	r3, #0
    4b6c:	9306      	str	r3, [sp, #24]
    4b6e:	e021      	b.n	4bb4 <Power_Ip_RCM_GetResetReason+0x98>
    4b70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4b74:	9b06      	ldr	r3, [sp, #24]
    4b76:	fa22 f303 	lsr.w	r3, r2, r3
    4b7a:	9301      	str	r3, [sp, #4]
    4b7c:	9a01      	ldr	r2, [sp, #4]
    4b7e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    4b82:	4013      	ands	r3, r2
    4b84:	2b00      	cmp	r3, #0
    4b86:	d012      	beq.n	4bae <Power_Ip_RCM_GetResetReason+0x92>
    4b88:	9a01      	ldr	r2, [sp, #4]
    4b8a:	9b02      	ldr	r3, [sp, #8]
    4b8c:	4013      	ands	r3, r2
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d00a      	beq.n	4ba8 <Power_Ip_RCM_GetResetReason+0x8c>
    4b92:	9b05      	ldr	r3, [sp, #20]
    4b94:	9307      	str	r3, [sp, #28]
    4b96:	9b04      	ldr	r3, [sp, #16]
    4b98:	3301      	adds	r3, #1
    4b9a:	9304      	str	r3, [sp, #16]
    4b9c:	9b04      	ldr	r3, [sp, #16]
    4b9e:	2b01      	cmp	r3, #1
    4ba0:	d902      	bls.n	4ba8 <Power_Ip_RCM_GetResetReason+0x8c>
    4ba2:	230d      	movs	r3, #13
    4ba4:	9307      	str	r3, [sp, #28]
    4ba6:	e008      	b.n	4bba <Power_Ip_RCM_GetResetReason+0x9e>
    4ba8:	9b05      	ldr	r3, [sp, #20]
    4baa:	3301      	adds	r3, #1
    4bac:	9305      	str	r3, [sp, #20]
    4bae:	9b06      	ldr	r3, [sp, #24]
    4bb0:	3301      	adds	r3, #1
    4bb2:	9306      	str	r3, [sp, #24]
    4bb4:	9b06      	ldr	r3, [sp, #24]
    4bb6:	2b1f      	cmp	r3, #31
    4bb8:	d9da      	bls.n	4b70 <Power_Ip_RCM_GetResetReason+0x54>
    4bba:	9b07      	ldr	r3, [sp, #28]
    4bbc:	4618      	mov	r0, r3
    4bbe:	b008      	add	sp, #32
    4bc0:	4770      	bx	lr
    4bc2:	bf00      	nop
    4bc4:	4007f000 	.word	0x4007f000
    4bc8:	1fff8cf0 	.word	0x1fff8cf0

00004bcc <Power_Ip_RCM_GetResetRawValue>:
    4bcc:	b082      	sub	sp, #8
    4bce:	4b0c      	ldr	r3, [pc, #48]	; (4c00 <Power_Ip_RCM_GetResetRawValue+0x34>)
    4bd0:	699a      	ldr	r2, [r3, #24]
    4bd2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4bd6:	4013      	ands	r3, r2
    4bd8:	9301      	str	r3, [sp, #4]
    4bda:	9b01      	ldr	r3, [sp, #4]
    4bdc:	2b00      	cmp	r3, #0
    4bde:	d008      	beq.n	4bf2 <Power_Ip_RCM_GetResetRawValue+0x26>
    4be0:	4907      	ldr	r1, [pc, #28]	; (4c00 <Power_Ip_RCM_GetResetRawValue+0x34>)
    4be2:	9a01      	ldr	r2, [sp, #4]
    4be4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4be8:	4013      	ands	r3, r2
    4bea:	618b      	str	r3, [r1, #24]
    4bec:	4a05      	ldr	r2, [pc, #20]	; (4c04 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4bee:	9b01      	ldr	r3, [sp, #4]
    4bf0:	6013      	str	r3, [r2, #0]
    4bf2:	4b04      	ldr	r3, [pc, #16]	; (4c04 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4bf4:	681b      	ldr	r3, [r3, #0]
    4bf6:	9300      	str	r3, [sp, #0]
    4bf8:	9b00      	ldr	r3, [sp, #0]
    4bfa:	4618      	mov	r0, r3
    4bfc:	b002      	add	sp, #8
    4bfe:	4770      	bx	lr
    4c00:	4007f000 	.word	0x4007f000
    4c04:	1fff8cf0 	.word	0x1fff8cf0

00004c08 <Power_Ip_SMC_AllowedModesConfig>:
    4c08:	b082      	sub	sp, #8
    4c0a:	9001      	str	r0, [sp, #4]
    4c0c:	9b01      	ldr	r3, [sp, #4]
    4c0e:	681b      	ldr	r3, [r3, #0]
    4c10:	4a03      	ldr	r2, [pc, #12]	; (4c20 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    4c12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    4c16:	6093      	str	r3, [r2, #8]
    4c18:	bf00      	nop
    4c1a:	b002      	add	sp, #8
    4c1c:	4770      	bx	lr
    4c1e:	bf00      	nop
    4c20:	4007e000 	.word	0x4007e000

00004c24 <Power_Ip_SMC_ModeCheckEntry>:
    4c24:	b084      	sub	sp, #16
    4c26:	9001      	str	r0, [sp, #4]
    4c28:	2301      	movs	r3, #1
    4c2a:	9303      	str	r3, [sp, #12]
    4c2c:	4b15      	ldr	r3, [pc, #84]	; (4c84 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    4c2e:	695b      	ldr	r3, [r3, #20]
    4c30:	b2db      	uxtb	r3, r3
    4c32:	9302      	str	r3, [sp, #8]
    4c34:	9b01      	ldr	r3, [sp, #4]
    4c36:	2b02      	cmp	r3, #2
    4c38:	d012      	beq.n	4c60 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    4c3a:	9b01      	ldr	r3, [sp, #4]
    4c3c:	2b02      	cmp	r3, #2
    4c3e:	d818      	bhi.n	4c72 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    4c40:	9b01      	ldr	r3, [sp, #4]
    4c42:	2b00      	cmp	r3, #0
    4c44:	d003      	beq.n	4c4e <Power_Ip_SMC_ModeCheckEntry+0x2a>
    4c46:	9b01      	ldr	r3, [sp, #4]
    4c48:	2b01      	cmp	r3, #1
    4c4a:	d003      	beq.n	4c54 <Power_Ip_SMC_ModeCheckEntry+0x30>
    4c4c:	e011      	b.n	4c72 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    4c4e:	2300      	movs	r3, #0
    4c50:	9303      	str	r3, [sp, #12]
    4c52:	e013      	b.n	4c7c <Power_Ip_SMC_ModeCheckEntry+0x58>
    4c54:	9b02      	ldr	r3, [sp, #8]
    4c56:	2b01      	cmp	r3, #1
    4c58:	d10d      	bne.n	4c76 <Power_Ip_SMC_ModeCheckEntry+0x52>
    4c5a:	2300      	movs	r3, #0
    4c5c:	9303      	str	r3, [sp, #12]
    4c5e:	e00a      	b.n	4c76 <Power_Ip_SMC_ModeCheckEntry+0x52>
    4c60:	9b02      	ldr	r3, [sp, #8]
    4c62:	2b01      	cmp	r3, #1
    4c64:	d002      	beq.n	4c6c <Power_Ip_SMC_ModeCheckEntry+0x48>
    4c66:	9b02      	ldr	r3, [sp, #8]
    4c68:	2b10      	cmp	r3, #16
    4c6a:	d106      	bne.n	4c7a <Power_Ip_SMC_ModeCheckEntry+0x56>
    4c6c:	2300      	movs	r3, #0
    4c6e:	9303      	str	r3, [sp, #12]
    4c70:	e003      	b.n	4c7a <Power_Ip_SMC_ModeCheckEntry+0x56>
    4c72:	bf00      	nop
    4c74:	e002      	b.n	4c7c <Power_Ip_SMC_ModeCheckEntry+0x58>
    4c76:	bf00      	nop
    4c78:	e000      	b.n	4c7c <Power_Ip_SMC_ModeCheckEntry+0x58>
    4c7a:	bf00      	nop
    4c7c:	9b03      	ldr	r3, [sp, #12]
    4c7e:	4618      	mov	r0, r3
    4c80:	b004      	add	sp, #16
    4c82:	4770      	bx	lr
    4c84:	4007e000 	.word	0x4007e000

00004c88 <Power_Ip_SMC_ModeConfig>:
    4c88:	b500      	push	{lr}
    4c8a:	b08b      	sub	sp, #44	; 0x2c
    4c8c:	9001      	str	r0, [sp, #4]
    4c8e:	2300      	movs	r3, #0
    4c90:	9309      	str	r3, [sp, #36]	; 0x24
    4c92:	2300      	movs	r3, #0
    4c94:	9308      	str	r3, [sp, #32]
    4c96:	2300      	movs	r3, #0
    4c98:	f88d 301f 	strb.w	r3, [sp, #31]
    4c9c:	9b01      	ldr	r3, [sp, #4]
    4c9e:	685b      	ldr	r3, [r3, #4]
    4ca0:	9308      	str	r3, [sp, #32]
    4ca2:	9b08      	ldr	r3, [sp, #32]
    4ca4:	2b02      	cmp	r3, #2
    4ca6:	d076      	beq.n	4d96 <Power_Ip_SMC_ModeConfig+0x10e>
    4ca8:	9b08      	ldr	r3, [sp, #32]
    4caa:	2b02      	cmp	r3, #2
    4cac:	f200 80ab 	bhi.w	4e06 <Power_Ip_SMC_ModeConfig+0x17e>
    4cb0:	9b08      	ldr	r3, [sp, #32]
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	d003      	beq.n	4cbe <Power_Ip_SMC_ModeConfig+0x36>
    4cb6:	9b08      	ldr	r3, [sp, #32]
    4cb8:	2b01      	cmp	r3, #1
    4cba:	d034      	beq.n	4d26 <Power_Ip_SMC_ModeConfig+0x9e>
    4cbc:	e0a3      	b.n	4e06 <Power_Ip_SMC_ModeConfig+0x17e>
    4cbe:	4b58      	ldr	r3, [pc, #352]	; (4e20 <Power_Ip_SMC_ModeConfig+0x198>)
    4cc0:	68db      	ldr	r3, [r3, #12]
    4cc2:	9306      	str	r3, [sp, #24]
    4cc4:	9b06      	ldr	r3, [sp, #24]
    4cc6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4cca:	9306      	str	r3, [sp, #24]
    4ccc:	4a54      	ldr	r2, [pc, #336]	; (4e20 <Power_Ip_SMC_ModeConfig+0x198>)
    4cce:	9b06      	ldr	r3, [sp, #24]
    4cd0:	60d3      	str	r3, [r2, #12]
    4cd2:	aa02      	add	r2, sp, #8
    4cd4:	a903      	add	r1, sp, #12
    4cd6:	a804      	add	r0, sp, #16
    4cd8:	f24c 3350 	movw	r3, #50000	; 0xc350
    4cdc:	f7ff fece 	bl	4a7c <Power_Ip_StartTimeout>
    4ce0:	9a02      	ldr	r2, [sp, #8]
    4ce2:	a903      	add	r1, sp, #12
    4ce4:	ab04      	add	r3, sp, #16
    4ce6:	4618      	mov	r0, r3
    4ce8:	f7ff fee2 	bl	4ab0 <Power_Ip_TimeoutExpired>
    4cec:	4603      	mov	r3, r0
    4cee:	f88d 301f 	strb.w	r3, [sp, #31]
    4cf2:	4b4b      	ldr	r3, [pc, #300]	; (4e20 <Power_Ip_SMC_ModeConfig+0x198>)
    4cf4:	695b      	ldr	r3, [r3, #20]
    4cf6:	f003 0301 	and.w	r3, r3, #1
    4cfa:	9305      	str	r3, [sp, #20]
    4cfc:	9b05      	ldr	r3, [sp, #20]
    4cfe:	2b01      	cmp	r3, #1
    4d00:	d006      	beq.n	4d10 <Power_Ip_SMC_ModeConfig+0x88>
    4d02:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d06:	f083 0301 	eor.w	r3, r3, #1
    4d0a:	b2db      	uxtb	r3, r3
    4d0c:	2b00      	cmp	r3, #0
    4d0e:	d1e7      	bne.n	4ce0 <Power_Ip_SMC_ModeConfig+0x58>
    4d10:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d14:	2b00      	cmp	r3, #0
    4d16:	d079      	beq.n	4e0c <Power_Ip_SMC_ModeConfig+0x184>
    4d18:	2301      	movs	r3, #1
    4d1a:	9309      	str	r3, [sp, #36]	; 0x24
    4d1c:	21ff      	movs	r1, #255	; 0xff
    4d1e:	2000      	movs	r0, #0
    4d20:	f7ff fe90 	bl	4a44 <Power_Ip_ReportPowerErrors>
    4d24:	e072      	b.n	4e0c <Power_Ip_SMC_ModeConfig+0x184>
    4d26:	4b3e      	ldr	r3, [pc, #248]	; (4e20 <Power_Ip_SMC_ModeConfig+0x198>)
    4d28:	68db      	ldr	r3, [r3, #12]
    4d2a:	9306      	str	r3, [sp, #24]
    4d2c:	9b06      	ldr	r3, [sp, #24]
    4d2e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4d32:	9306      	str	r3, [sp, #24]
    4d34:	9b06      	ldr	r3, [sp, #24]
    4d36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    4d3a:	9306      	str	r3, [sp, #24]
    4d3c:	4a38      	ldr	r2, [pc, #224]	; (4e20 <Power_Ip_SMC_ModeConfig+0x198>)
    4d3e:	9b06      	ldr	r3, [sp, #24]
    4d40:	60d3      	str	r3, [r2, #12]
    4d42:	aa02      	add	r2, sp, #8
    4d44:	a903      	add	r1, sp, #12
    4d46:	a804      	add	r0, sp, #16
    4d48:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d4c:	f7ff fe96 	bl	4a7c <Power_Ip_StartTimeout>
    4d50:	9a02      	ldr	r2, [sp, #8]
    4d52:	a903      	add	r1, sp, #12
    4d54:	ab04      	add	r3, sp, #16
    4d56:	4618      	mov	r0, r3
    4d58:	f7ff feaa 	bl	4ab0 <Power_Ip_TimeoutExpired>
    4d5c:	4603      	mov	r3, r0
    4d5e:	f88d 301f 	strb.w	r3, [sp, #31]
    4d62:	4b2f      	ldr	r3, [pc, #188]	; (4e20 <Power_Ip_SMC_ModeConfig+0x198>)
    4d64:	695b      	ldr	r3, [r3, #20]
    4d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4d6a:	9305      	str	r3, [sp, #20]
    4d6c:	9b05      	ldr	r3, [sp, #20]
    4d6e:	2b80      	cmp	r3, #128	; 0x80
    4d70:	d006      	beq.n	4d80 <Power_Ip_SMC_ModeConfig+0xf8>
    4d72:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d76:	f083 0301 	eor.w	r3, r3, #1
    4d7a:	b2db      	uxtb	r3, r3
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d1e7      	bne.n	4d50 <Power_Ip_SMC_ModeConfig+0xc8>
    4d80:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d84:	2b00      	cmp	r3, #0
    4d86:	d043      	beq.n	4e10 <Power_Ip_SMC_ModeConfig+0x188>
    4d88:	2301      	movs	r3, #1
    4d8a:	9309      	str	r3, [sp, #36]	; 0x24
    4d8c:	21ff      	movs	r1, #255	; 0xff
    4d8e:	2000      	movs	r0, #0
    4d90:	f7ff fe58 	bl	4a44 <Power_Ip_ReportPowerErrors>
    4d94:	e03c      	b.n	4e10 <Power_Ip_SMC_ModeConfig+0x188>
    4d96:	4b22      	ldr	r3, [pc, #136]	; (4e20 <Power_Ip_SMC_ModeConfig+0x198>)
    4d98:	68db      	ldr	r3, [r3, #12]
    4d9a:	9306      	str	r3, [sp, #24]
    4d9c:	9b06      	ldr	r3, [sp, #24]
    4d9e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4da2:	9306      	str	r3, [sp, #24]
    4da4:	9b06      	ldr	r3, [sp, #24]
    4da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4daa:	9306      	str	r3, [sp, #24]
    4dac:	4a1c      	ldr	r2, [pc, #112]	; (4e20 <Power_Ip_SMC_ModeConfig+0x198>)
    4dae:	9b06      	ldr	r3, [sp, #24]
    4db0:	60d3      	str	r3, [r2, #12]
    4db2:	aa02      	add	r2, sp, #8
    4db4:	a903      	add	r1, sp, #12
    4db6:	a804      	add	r0, sp, #16
    4db8:	f24c 3350 	movw	r3, #50000	; 0xc350
    4dbc:	f7ff fe5e 	bl	4a7c <Power_Ip_StartTimeout>
    4dc0:	9a02      	ldr	r2, [sp, #8]
    4dc2:	a903      	add	r1, sp, #12
    4dc4:	ab04      	add	r3, sp, #16
    4dc6:	4618      	mov	r0, r3
    4dc8:	f7ff fe72 	bl	4ab0 <Power_Ip_TimeoutExpired>
    4dcc:	4603      	mov	r3, r0
    4dce:	f88d 301f 	strb.w	r3, [sp, #31]
    4dd2:	4b13      	ldr	r3, [pc, #76]	; (4e20 <Power_Ip_SMC_ModeConfig+0x198>)
    4dd4:	695b      	ldr	r3, [r3, #20]
    4dd6:	f003 0304 	and.w	r3, r3, #4
    4dda:	9305      	str	r3, [sp, #20]
    4ddc:	9b05      	ldr	r3, [sp, #20]
    4dde:	2b04      	cmp	r3, #4
    4de0:	d006      	beq.n	4df0 <Power_Ip_SMC_ModeConfig+0x168>
    4de2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4de6:	f083 0301 	eor.w	r3, r3, #1
    4dea:	b2db      	uxtb	r3, r3
    4dec:	2b00      	cmp	r3, #0
    4dee:	d1e7      	bne.n	4dc0 <Power_Ip_SMC_ModeConfig+0x138>
    4df0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4df4:	2b00      	cmp	r3, #0
    4df6:	d00d      	beq.n	4e14 <Power_Ip_SMC_ModeConfig+0x18c>
    4df8:	2301      	movs	r3, #1
    4dfa:	9309      	str	r3, [sp, #36]	; 0x24
    4dfc:	21ff      	movs	r1, #255	; 0xff
    4dfe:	2000      	movs	r0, #0
    4e00:	f7ff fe20 	bl	4a44 <Power_Ip_ReportPowerErrors>
    4e04:	e006      	b.n	4e14 <Power_Ip_SMC_ModeConfig+0x18c>
    4e06:	2301      	movs	r3, #1
    4e08:	9309      	str	r3, [sp, #36]	; 0x24
    4e0a:	e004      	b.n	4e16 <Power_Ip_SMC_ModeConfig+0x18e>
    4e0c:	bf00      	nop
    4e0e:	e002      	b.n	4e16 <Power_Ip_SMC_ModeConfig+0x18e>
    4e10:	bf00      	nop
    4e12:	e000      	b.n	4e16 <Power_Ip_SMC_ModeConfig+0x18e>
    4e14:	bf00      	nop
    4e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e18:	4618      	mov	r0, r3
    4e1a:	b00b      	add	sp, #44	; 0x2c
    4e1c:	f85d fb04 	ldr.w	pc, [sp], #4
    4e20:	4007e000 	.word	0x4007e000

00004e24 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    4e24:	b500      	push	{lr}
    4e26:	b085      	sub	sp, #20
    4e28:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    4e2a:	9b01      	ldr	r3, [sp, #4]
    4e2c:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    4e2e:	9803      	ldr	r0, [sp, #12]
    4e30:	f000 fbc8 	bl	55c4 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    4e34:	4a03      	ldr	r2, [pc, #12]	; (4e44 <Port_Init+0x20>)
    4e36:	9b03      	ldr	r3, [sp, #12]
    4e38:	6013      	str	r3, [r2, #0]
        }
    }
}
    4e3a:	bf00      	nop
    4e3c:	b005      	add	sp, #20
    4e3e:	f85d fb04 	ldr.w	pc, [sp], #4
    4e42:	bf00      	nop
    4e44:	1fff8cf4 	.word	0x1fff8cf4

00004e48 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    4e48:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    4e4a:	4b03      	ldr	r3, [pc, #12]	; (4e58 <Port_RefreshPortDirection+0x10>)
    4e4c:	681b      	ldr	r3, [r3, #0]
    4e4e:	4618      	mov	r0, r3
    4e50:	f000 fc10 	bl	5674 <Port_Ipw_RefreshPortDirection>
    }
}
    4e54:	bf00      	nop
    4e56:	bd08      	pop	{r3, pc}
    4e58:	1fff8cf4 	.word	0x1fff8cf4

00004e5c <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    4e5c:	b086      	sub	sp, #24
    4e5e:	9003      	str	r0, [sp, #12]
    4e60:	9102      	str	r1, [sp, #8]
    4e62:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    4e64:	23ff      	movs	r3, #255	; 0xff
    4e66:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    4e68:	9b03      	ldr	r3, [sp, #12]
    4e6a:	4a39      	ldr	r2, [pc, #228]	; (4f50 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    4e6c:	4293      	cmp	r3, r2
    4e6e:	d151      	bne.n	4f14 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    4e70:	9b02      	ldr	r3, [sp, #8]
    4e72:	2b10      	cmp	r3, #16
    4e74:	d867      	bhi.n	4f46 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    4e76:	a201      	add	r2, pc, #4	; (adr r2, 4e7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    4e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4e7c:	00004ec1 	.word	0x00004ec1
    4e80:	00004ecf 	.word	0x00004ecf
    4e84:	00004f47 	.word	0x00004f47
    4e88:	00004f47 	.word	0x00004f47
    4e8c:	00004f47 	.word	0x00004f47
    4e90:	00004f47 	.word	0x00004f47
    4e94:	00004f47 	.word	0x00004f47
    4e98:	00004f47 	.word	0x00004f47
    4e9c:	00004f47 	.word	0x00004f47
    4ea0:	00004f47 	.word	0x00004f47
    4ea4:	00004f47 	.word	0x00004f47
    4ea8:	00004f47 	.word	0x00004f47
    4eac:	00004f47 	.word	0x00004f47
    4eb0:	00004edd 	.word	0x00004edd
    4eb4:	00004eeb 	.word	0x00004eeb
    4eb8:	00004ef9 	.word	0x00004ef9
    4ebc:	00004f07 	.word	0x00004f07
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    4ec0:	2301      	movs	r3, #1
    4ec2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4ec4:	9a05      	ldr	r2, [sp, #20]
    4ec6:	9b01      	ldr	r3, [sp, #4]
    4ec8:	4313      	orrs	r3, r2
    4eca:	9305      	str	r3, [sp, #20]
                break;
    4ecc:	e03c      	b.n	4f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    4ece:	2302      	movs	r3, #2
    4ed0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4ed2:	9a05      	ldr	r2, [sp, #20]
    4ed4:	9b01      	ldr	r3, [sp, #4]
    4ed6:	4313      	orrs	r3, r2
    4ed8:	9305      	str	r3, [sp, #20]
                break;
    4eda:	e035      	b.n	4f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    4edc:	2304      	movs	r3, #4
    4ede:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4ee0:	9a05      	ldr	r2, [sp, #20]
    4ee2:	9b01      	ldr	r3, [sp, #4]
    4ee4:	4313      	orrs	r3, r2
    4ee6:	9305      	str	r3, [sp, #20]
                break;
    4ee8:	e02e      	b.n	4f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    4eea:	2308      	movs	r3, #8
    4eec:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4eee:	9a05      	ldr	r2, [sp, #20]
    4ef0:	9b01      	ldr	r3, [sp, #4]
    4ef2:	4313      	orrs	r3, r2
    4ef4:	9305      	str	r3, [sp, #20]
                break;
    4ef6:	e027      	b.n	4f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    4ef8:	230e      	movs	r3, #14
    4efa:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4efc:	9a05      	ldr	r2, [sp, #20]
    4efe:	9b01      	ldr	r3, [sp, #4]
    4f00:	4013      	ands	r3, r2
    4f02:	9305      	str	r3, [sp, #20]
                break;
    4f04:	e020      	b.n	4f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    4f06:	230d      	movs	r3, #13
    4f08:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f0a:	9a05      	ldr	r2, [sp, #20]
    4f0c:	9b01      	ldr	r3, [sp, #4]
    4f0e:	4013      	ands	r3, r2
    4f10:	9305      	str	r3, [sp, #20]
                break;
    4f12:	e019      	b.n	4f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    4f14:	9b03      	ldr	r3, [sp, #12]
    4f16:	4a0f      	ldr	r2, [pc, #60]	; (4f54 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    4f18:	4293      	cmp	r3, r2
    4f1a:	d115      	bne.n	4f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    4f1c:	9b02      	ldr	r3, [sp, #8]
    4f1e:	2b00      	cmp	r3, #0
    4f20:	d003      	beq.n	4f2a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    4f22:	9b02      	ldr	r3, [sp, #8]
    4f24:	2b01      	cmp	r3, #1
    4f26:	d007      	beq.n	4f38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    4f28:	e00e      	b.n	4f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    4f2a:	230b      	movs	r3, #11
    4f2c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f2e:	9a05      	ldr	r2, [sp, #20]
    4f30:	9b01      	ldr	r3, [sp, #4]
    4f32:	4013      	ands	r3, r2
    4f34:	9305      	str	r3, [sp, #20]
                break;
    4f36:	e007      	b.n	4f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    4f38:	2307      	movs	r3, #7
    4f3a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f3c:	9a05      	ldr	r2, [sp, #20]
    4f3e:	9b01      	ldr	r3, [sp, #4]
    4f40:	4013      	ands	r3, r2
    4f42:	9305      	str	r3, [sp, #20]
                break;
    4f44:	e000      	b.n	4f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    4f46:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    4f48:	9b05      	ldr	r3, [sp, #20]
}
    4f4a:	4618      	mov	r0, r3
    4f4c:	b006      	add	sp, #24
    4f4e:	4770      	bx	lr
    4f50:	4004a000 	.word	0x4004a000
    4f54:	4004b000 	.word	0x4004b000

00004f58 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    4f58:	b500      	push	{lr}
    4f5a:	b089      	sub	sp, #36	; 0x24
    4f5c:	9003      	str	r0, [sp, #12]
    4f5e:	9102      	str	r1, [sp, #8]
    4f60:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    4f62:	9b01      	ldr	r3, [sp, #4]
    4f64:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    4f66:	9b01      	ldr	r3, [sp, #4]
    4f68:	2b08      	cmp	r3, #8
    4f6a:	d121      	bne.n	4fb0 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    4f6c:	4b13      	ldr	r3, [pc, #76]	; (4fbc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4f6e:	685b      	ldr	r3, [r3, #4]
    4f70:	f003 030f 	and.w	r3, r3, #15
    4f74:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    4f76:	9a06      	ldr	r2, [sp, #24]
    4f78:	9902      	ldr	r1, [sp, #8]
    4f7a:	9803      	ldr	r0, [sp, #12]
    4f7c:	f7ff ff6e 	bl	4e5c <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    4f80:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    4f82:	9b05      	ldr	r3, [sp, #20]
    4f84:	2bff      	cmp	r3, #255	; 0xff
    4f86:	d011      	beq.n	4fac <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    4f88:	f004 f870 	bl	906c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    4f8c:	4b0b      	ldr	r3, [pc, #44]	; (4fbc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4f8e:	685b      	ldr	r3, [r3, #4]
    4f90:	4a0a      	ldr	r2, [pc, #40]	; (4fbc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4f92:	f023 030f 	bic.w	r3, r3, #15
    4f96:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    4f98:	4b08      	ldr	r3, [pc, #32]	; (4fbc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4f9a:	685a      	ldr	r2, [r3, #4]
    4f9c:	9b05      	ldr	r3, [sp, #20]
    4f9e:	f003 030f 	and.w	r3, r3, #15
    4fa2:	4906      	ldr	r1, [pc, #24]	; (4fbc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fa4:	4313      	orrs	r3, r2
    4fa6:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    4fa8:	f004 f88c 	bl	90c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    4fac:	2300      	movs	r3, #0
    4fae:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    4fb0:	9b07      	ldr	r3, [sp, #28]
}
    4fb2:	4618      	mov	r0, r3
    4fb4:	b009      	add	sp, #36	; 0x24
    4fb6:	f85d fb04 	ldr.w	pc, [sp], #4
    4fba:	bf00      	nop
    4fbc:	40048000 	.word	0x40048000

00004fc0 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    4fc0:	b500      	push	{lr}
    4fc2:	b087      	sub	sp, #28
    4fc4:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    4fc6:	2300      	movs	r3, #0
    4fc8:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    4fca:	2300      	movs	r3, #0
    4fcc:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    4fce:	2300      	movs	r3, #0
    4fd0:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    4fd2:	9b01      	ldr	r3, [sp, #4]
    4fd4:	68db      	ldr	r3, [r3, #12]
    4fd6:	2b02      	cmp	r3, #2
    4fd8:	d00a      	beq.n	4ff0 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    4fda:	9b05      	ldr	r3, [sp, #20]
    4fdc:	f043 0302 	orr.w	r3, r3, #2
    4fe0:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    4fe2:	9b01      	ldr	r3, [sp, #4]
    4fe4:	68db      	ldr	r3, [r3, #12]
    4fe6:	f003 0301 	and.w	r3, r3, #1
    4fea:	9a05      	ldr	r2, [sp, #20]
    4fec:	4313      	orrs	r3, r2
    4fee:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    4ff0:	9b01      	ldr	r3, [sp, #4]
    4ff2:	699b      	ldr	r3, [r3, #24]
    4ff4:	019b      	lsls	r3, r3, #6
    4ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4ffa:	9a05      	ldr	r2, [sp, #20]
    4ffc:	4313      	orrs	r3, r2
    4ffe:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5000:	9b01      	ldr	r3, [sp, #4]
    5002:	6a1b      	ldr	r3, [r3, #32]
    5004:	03db      	lsls	r3, r3, #15
    5006:	b29b      	uxth	r3, r3
    5008:	9a05      	ldr	r2, [sp, #20]
    500a:	4313      	orrs	r3, r2
    500c:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    500e:	9b01      	ldr	r3, [sp, #4]
    5010:	7f1b      	ldrb	r3, [r3, #28]
    5012:	2b00      	cmp	r3, #0
    5014:	d001      	beq.n	501a <Port_Ci_Port_Ip_PinInit+0x5a>
    5016:	2310      	movs	r3, #16
    5018:	e000      	b.n	501c <Port_Ci_Port_Ip_PinInit+0x5c>
    501a:	2300      	movs	r3, #0
    501c:	9a05      	ldr	r2, [sp, #20]
    501e:	4313      	orrs	r3, r2
    5020:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5022:	9b01      	ldr	r3, [sp, #4]
    5024:	691b      	ldr	r3, [r3, #16]
    5026:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5028:	9b01      	ldr	r3, [sp, #4]
    502a:	6818      	ldr	r0, [r3, #0]
    502c:	9b01      	ldr	r3, [sp, #4]
    502e:	689b      	ldr	r3, [r3, #8]
    5030:	9a04      	ldr	r2, [sp, #16]
    5032:	4619      	mov	r1, r3
    5034:	f7ff ff90 	bl	4f58 <Port_Ci_Port_Ip_ConfigureInterleave>
    5038:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    503a:	9b03      	ldr	r3, [sp, #12]
    503c:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    503e:	9b04      	ldr	r3, [sp, #16]
    5040:	021b      	lsls	r3, r3, #8
    5042:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5046:	9a05      	ldr	r2, [sp, #20]
    5048:	4313      	orrs	r3, r2
    504a:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    504c:	f003 fe74 	bl	8d38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5050:	9b01      	ldr	r3, [sp, #4]
    5052:	681b      	ldr	r3, [r3, #0]
    5054:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5058:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    505a:	9b01      	ldr	r3, [sp, #4]
    505c:	689b      	ldr	r3, [r3, #8]
    505e:	2201      	movs	r2, #1
    5060:	fa02 f303 	lsl.w	r3, r2, r3
    5064:	43db      	mvns	r3, r3
    5066:	9a02      	ldr	r2, [sp, #8]
    5068:	4013      	ands	r3, r2
    506a:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    506c:	9b01      	ldr	r3, [sp, #4]
    506e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5072:	2b00      	cmp	r3, #0
    5074:	d001      	beq.n	507a <Port_Ci_Port_Ip_PinInit+0xba>
    5076:	2201      	movs	r2, #1
    5078:	e000      	b.n	507c <Port_Ci_Port_Ip_PinInit+0xbc>
    507a:	2200      	movs	r2, #0
    507c:	9b01      	ldr	r3, [sp, #4]
    507e:	689b      	ldr	r3, [r3, #8]
    5080:	fa02 f303 	lsl.w	r3, r2, r3
    5084:	9a02      	ldr	r2, [sp, #8]
    5086:	4313      	orrs	r3, r2
    5088:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    508a:	9b01      	ldr	r3, [sp, #4]
    508c:	681b      	ldr	r3, [r3, #0]
    508e:	9a02      	ldr	r2, [sp, #8]
    5090:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5094:	f003 fe7c 	bl	8d90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5098:	9b04      	ldr	r3, [sp, #16]
    509a:	2b01      	cmp	r3, #1
    509c:	d16d      	bne.n	517a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    509e:	9b01      	ldr	r3, [sp, #4]
    50a0:	695b      	ldr	r3, [r3, #20]
    50a2:	2b02      	cmp	r3, #2
    50a4:	d138      	bne.n	5118 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    50a6:	9b01      	ldr	r3, [sp, #4]
    50a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    50ac:	2b01      	cmp	r3, #1
    50ae:	d10f      	bne.n	50d0 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    50b0:	f003 fe94 	bl	8ddc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    50b4:	9b01      	ldr	r3, [sp, #4]
    50b6:	685b      	ldr	r3, [r3, #4]
    50b8:	6859      	ldr	r1, [r3, #4]
    50ba:	9b01      	ldr	r3, [sp, #4]
    50bc:	689b      	ldr	r3, [r3, #8]
    50be:	2201      	movs	r2, #1
    50c0:	409a      	lsls	r2, r3
    50c2:	9b01      	ldr	r3, [sp, #4]
    50c4:	685b      	ldr	r3, [r3, #4]
    50c6:	430a      	orrs	r2, r1
    50c8:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    50ca:	f003 feb3 	bl	8e34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    50ce:	e013      	b.n	50f8 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    50d0:	9b01      	ldr	r3, [sp, #4]
    50d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    50d6:	2b00      	cmp	r3, #0
    50d8:	d10e      	bne.n	50f8 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    50da:	f003 fed1 	bl	8e80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    50de:	9b01      	ldr	r3, [sp, #4]
    50e0:	685b      	ldr	r3, [r3, #4]
    50e2:	6899      	ldr	r1, [r3, #8]
    50e4:	9b01      	ldr	r3, [sp, #4]
    50e6:	689b      	ldr	r3, [r3, #8]
    50e8:	2201      	movs	r2, #1
    50ea:	409a      	lsls	r2, r3
    50ec:	9b01      	ldr	r3, [sp, #4]
    50ee:	685b      	ldr	r3, [r3, #4]
    50f0:	430a      	orrs	r2, r1
    50f2:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    50f4:	f003 fef0 	bl	8ed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    50f8:	f003 ff14 	bl	8f24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    50fc:	9b01      	ldr	r3, [sp, #4]
    50fe:	685b      	ldr	r3, [r3, #4]
    5100:	6959      	ldr	r1, [r3, #20]
    5102:	9b01      	ldr	r3, [sp, #4]
    5104:	689b      	ldr	r3, [r3, #8]
    5106:	2201      	movs	r2, #1
    5108:	409a      	lsls	r2, r3
    510a:	9b01      	ldr	r3, [sp, #4]
    510c:	685b      	ldr	r3, [r3, #4]
    510e:	430a      	orrs	r2, r1
    5110:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5112:	f003 ff33 	bl	8f7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5116:	e030      	b.n	517a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5118:	f003 ff04 	bl	8f24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    511c:	9b01      	ldr	r3, [sp, #4]
    511e:	685b      	ldr	r3, [r3, #4]
    5120:	6959      	ldr	r1, [r3, #20]
    5122:	9b01      	ldr	r3, [sp, #4]
    5124:	689b      	ldr	r3, [r3, #8]
    5126:	2201      	movs	r2, #1
    5128:	fa02 f303 	lsl.w	r3, r2, r3
    512c:	43da      	mvns	r2, r3
    512e:	9b01      	ldr	r3, [sp, #4]
    5130:	685b      	ldr	r3, [r3, #4]
    5132:	400a      	ands	r2, r1
    5134:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5136:	f003 ff21 	bl	8f7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    513a:	f003 ff45 	bl	8fc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    513e:	9b01      	ldr	r3, [sp, #4]
    5140:	685b      	ldr	r3, [r3, #4]
    5142:	6999      	ldr	r1, [r3, #24]
    5144:	9b01      	ldr	r3, [sp, #4]
    5146:	689b      	ldr	r3, [r3, #8]
    5148:	2201      	movs	r2, #1
    514a:	fa02 f303 	lsl.w	r3, r2, r3
    514e:	43da      	mvns	r2, r3
    5150:	9b01      	ldr	r3, [sp, #4]
    5152:	685b      	ldr	r3, [r3, #4]
    5154:	400a      	ands	r2, r1
    5156:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5158:	9b01      	ldr	r3, [sp, #4]
    515a:	695b      	ldr	r3, [r3, #20]
    515c:	2b03      	cmp	r3, #3
    515e:	d10a      	bne.n	5176 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    5160:	9b01      	ldr	r3, [sp, #4]
    5162:	685b      	ldr	r3, [r3, #4]
    5164:	6999      	ldr	r1, [r3, #24]
    5166:	9b01      	ldr	r3, [sp, #4]
    5168:	689b      	ldr	r3, [r3, #8]
    516a:	2201      	movs	r2, #1
    516c:	409a      	lsls	r2, r3
    516e:	9b01      	ldr	r3, [sp, #4]
    5170:	685b      	ldr	r3, [r3, #4]
    5172:	430a      	orrs	r2, r1
    5174:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    5176:	f003 ff53 	bl	9020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    517a:	9b01      	ldr	r3, [sp, #4]
    517c:	681b      	ldr	r3, [r3, #0]
    517e:	9a01      	ldr	r2, [sp, #4]
    5180:	6892      	ldr	r2, [r2, #8]
    5182:	9905      	ldr	r1, [sp, #20]
    5184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5188:	bf00      	nop
    518a:	b007      	add	sp, #28
    518c:	f85d fb04 	ldr.w	pc, [sp], #4

00005190 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    5190:	b500      	push	{lr}
    5192:	b085      	sub	sp, #20
    5194:	9001      	str	r0, [sp, #4]
    5196:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    5198:	2300      	movs	r3, #0
    519a:	9303      	str	r3, [sp, #12]
    519c:	e00d      	b.n	51ba <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    519e:	9a03      	ldr	r2, [sp, #12]
    51a0:	4613      	mov	r3, r2
    51a2:	009b      	lsls	r3, r3, #2
    51a4:	4413      	add	r3, r2
    51a6:	00db      	lsls	r3, r3, #3
    51a8:	461a      	mov	r2, r3
    51aa:	9b00      	ldr	r3, [sp, #0]
    51ac:	4413      	add	r3, r2
    51ae:	4618      	mov	r0, r3
    51b0:	f7ff ff06 	bl	4fc0 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    51b4:	9b03      	ldr	r3, [sp, #12]
    51b6:	3301      	adds	r3, #1
    51b8:	9303      	str	r3, [sp, #12]
    51ba:	9a03      	ldr	r2, [sp, #12]
    51bc:	9b01      	ldr	r3, [sp, #4]
    51be:	429a      	cmp	r2, r3
    51c0:	d3ed      	bcc.n	519e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    51c2:	2300      	movs	r3, #0
}
    51c4:	4618      	mov	r0, r3
    51c6:	b005      	add	sp, #20
    51c8:	f85d fb04 	ldr.w	pc, [sp], #4

000051cc <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    51cc:	b500      	push	{lr}
    51ce:	b087      	sub	sp, #28
    51d0:	9003      	str	r0, [sp, #12]
    51d2:	9102      	str	r1, [sp, #8]
    51d4:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    51d6:	9a01      	ldr	r2, [sp, #4]
    51d8:	9902      	ldr	r1, [sp, #8]
    51da:	9803      	ldr	r0, [sp, #12]
    51dc:	f7ff febc 	bl	4f58 <Port_Ci_Port_Ip_ConfigureInterleave>
    51e0:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    51e2:	f003 ff95 	bl	9110 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    51e6:	9b03      	ldr	r3, [sp, #12]
    51e8:	9a02      	ldr	r2, [sp, #8]
    51ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    51ee:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    51f0:	9b04      	ldr	r3, [sp, #16]
    51f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    51f6:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    51f8:	9b05      	ldr	r3, [sp, #20]
    51fa:	021b      	lsls	r3, r3, #8
    51fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5200:	9a04      	ldr	r2, [sp, #16]
    5202:	4313      	orrs	r3, r2
    5204:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5206:	9b03      	ldr	r3, [sp, #12]
    5208:	9a02      	ldr	r2, [sp, #8]
    520a:	9904      	ldr	r1, [sp, #16]
    520c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5210:	f003 ffaa 	bl	9168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5214:	bf00      	nop
    5216:	b007      	add	sp, #28
    5218:	f85d fb04 	ldr.w	pc, [sp], #4

0000521c <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    521c:	b500      	push	{lr}
    521e:	b083      	sub	sp, #12
    5220:	9001      	str	r0, [sp, #4]
    5222:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5224:	f003 ffc6 	bl	91b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5228:	9b01      	ldr	r3, [sp, #4]
    522a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    522e:	2101      	movs	r1, #1
    5230:	9b00      	ldr	r3, [sp, #0]
    5232:	fa01 f303 	lsl.w	r3, r1, r3
    5236:	431a      	orrs	r2, r3
    5238:	9b01      	ldr	r3, [sp, #4]
    523a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    523e:	f003 ffe5 	bl	920c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    5242:	bf00      	nop
    5244:	b003      	add	sp, #12
    5246:	f85d fb04 	ldr.w	pc, [sp], #4

0000524a <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    524a:	b500      	push	{lr}
    524c:	b083      	sub	sp, #12
    524e:	9001      	str	r0, [sp, #4]
    5250:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    5252:	f004 f801 	bl	9258 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    5256:	9b01      	ldr	r3, [sp, #4]
    5258:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    525c:	2101      	movs	r1, #1
    525e:	9b00      	ldr	r3, [sp, #0]
    5260:	fa01 f303 	lsl.w	r3, r1, r3
    5264:	43db      	mvns	r3, r3
    5266:	401a      	ands	r2, r3
    5268:	9b01      	ldr	r3, [sp, #4]
    526a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    526e:	f004 f81f 	bl	92b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    5272:	bf00      	nop
    5274:	b003      	add	sp, #12
    5276:	f85d fb04 	ldr.w	pc, [sp], #4

0000527a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    527a:	b082      	sub	sp, #8
    527c:	9001      	str	r0, [sp, #4]
    527e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    5280:	9b00      	ldr	r3, [sp, #0]
    5282:	785b      	ldrb	r3, [r3, #1]
    5284:	f003 0201 	and.w	r2, r3, #1
    5288:	9b01      	ldr	r3, [sp, #4]
    528a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    528e:	9b00      	ldr	r3, [sp, #0]
    5290:	789b      	ldrb	r3, [r3, #2]
    5292:	f003 021f 	and.w	r2, r3, #31
    5296:	9b01      	ldr	r3, [sp, #4]
    5298:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    529c:	bf00      	nop
    529e:	b002      	add	sp, #8
    52a0:	4770      	bx	lr

000052a2 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    52a2:	b086      	sub	sp, #24
    52a4:	9003      	str	r0, [sp, #12]
    52a6:	9301      	str	r3, [sp, #4]
    52a8:	460b      	mov	r3, r1
    52aa:	f8ad 300a 	strh.w	r3, [sp, #10]
    52ae:	4613      	mov	r3, r2
    52b0:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    52b4:	2300      	movs	r3, #0
    52b6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    52ba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52be:	f043 0301 	orr.w	r3, r3, #1
    52c2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    52c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52ca:	f043 0302 	orr.w	r3, r3, #2
    52ce:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    52d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52d6:	f043 0310 	orr.w	r3, r3, #16
    52da:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    52de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    52e6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    52ea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    52f2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    52f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    52fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    5302:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5306:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    530a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    530e:	4013      	ands	r3, r2
    5310:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5314:	9b01      	ldr	r3, [sp, #4]
    5316:	2b00      	cmp	r3, #0
    5318:	d003      	beq.n	5322 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    531a:	9b01      	ldr	r3, [sp, #4]
    531c:	2b01      	cmp	r3, #1
    531e:	d00a      	beq.n	5336 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5320:	e013      	b.n	534a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    5322:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5326:	041a      	lsls	r2, r3, #16
    5328:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    532c:	431a      	orrs	r2, r3
    532e:	9b03      	ldr	r3, [sp, #12]
    5330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5334:	e009      	b.n	534a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5336:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    533a:	041a      	lsls	r2, r3, #16
    533c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5340:	431a      	orrs	r2, r3
    5342:	9b03      	ldr	r3, [sp, #12]
    5344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5348:	bf00      	nop
    }
}
    534a:	bf00      	nop
    534c:	b006      	add	sp, #24
    534e:	4770      	bx	lr

00005350 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5350:	b500      	push	{lr}
    5352:	b087      	sub	sp, #28
    5354:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5356:	9b01      	ldr	r3, [sp, #4]
    5358:	885b      	ldrh	r3, [r3, #2]
    535a:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    535e:	9b01      	ldr	r3, [sp, #4]
    5360:	689b      	ldr	r3, [r3, #8]
    5362:	7a1b      	ldrb	r3, [r3, #8]
    5364:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5368:	9b01      	ldr	r3, [sp, #4]
    536a:	689b      	ldr	r3, [r3, #8]
    536c:	681b      	ldr	r3, [r3, #0]
    536e:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    5370:	9b01      	ldr	r3, [sp, #4]
    5372:	689b      	ldr	r3, [r3, #8]
    5374:	685b      	ldr	r3, [r3, #4]
    5376:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5378:	2300      	movs	r3, #0
    537a:	f8ad 3016 	strh.w	r3, [sp, #22]
    537e:	e111      	b.n	55a4 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    5380:	9b02      	ldr	r3, [sp, #8]
    5382:	2b02      	cmp	r3, #2
    5384:	d169      	bne.n	545a <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    5386:	f89d 3013 	ldrb.w	r3, [sp, #19]
    538a:	2b01      	cmp	r3, #1
    538c:	d11a      	bne.n	53c4 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    538e:	9b01      	ldr	r3, [sp, #4]
    5390:	685a      	ldr	r2, [r3, #4]
    5392:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5396:	005b      	lsls	r3, r3, #1
    5398:	4413      	add	r3, r2
    539a:	881b      	ldrh	r3, [r3, #0]
    539c:	f003 021f 	and.w	r2, r3, #31
    53a0:	9b01      	ldr	r3, [sp, #4]
    53a2:	6859      	ldr	r1, [r3, #4]
    53a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53a8:	005b      	lsls	r3, r3, #1
    53aa:	440b      	add	r3, r1
    53ac:	881b      	ldrh	r3, [r3, #0]
    53ae:	095b      	lsrs	r3, r3, #5
    53b0:	b29b      	uxth	r3, r3
    53b2:	4619      	mov	r1, r3
    53b4:	4b81      	ldr	r3, [pc, #516]	; (55bc <Port_Ipw_Init_UnusedPins+0x26c>)
    53b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    53ba:	2101      	movs	r1, #1
    53bc:	fa01 f202 	lsl.w	r2, r1, r2
    53c0:	605a      	str	r2, [r3, #4]
    53c2:	e01d      	b.n	5400 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    53c4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    53c8:	2b00      	cmp	r3, #0
    53ca:	d119      	bne.n	5400 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    53cc:	9b01      	ldr	r3, [sp, #4]
    53ce:	685a      	ldr	r2, [r3, #4]
    53d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53d4:	005b      	lsls	r3, r3, #1
    53d6:	4413      	add	r3, r2
    53d8:	881b      	ldrh	r3, [r3, #0]
    53da:	f003 021f 	and.w	r2, r3, #31
    53de:	9b01      	ldr	r3, [sp, #4]
    53e0:	6859      	ldr	r1, [r3, #4]
    53e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53e6:	005b      	lsls	r3, r3, #1
    53e8:	440b      	add	r3, r1
    53ea:	881b      	ldrh	r3, [r3, #0]
    53ec:	095b      	lsrs	r3, r3, #5
    53ee:	b29b      	uxth	r3, r3
    53f0:	4619      	mov	r1, r3
    53f2:	4b72      	ldr	r3, [pc, #456]	; (55bc <Port_Ipw_Init_UnusedPins+0x26c>)
    53f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    53f8:	2101      	movs	r1, #1
    53fa:	fa01 f202 	lsl.w	r2, r1, r2
    53fe:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5400:	f003 ff7c 	bl	92fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5404:	9b01      	ldr	r3, [sp, #4]
    5406:	685a      	ldr	r2, [r3, #4]
    5408:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    540c:	005b      	lsls	r3, r3, #1
    540e:	4413      	add	r3, r2
    5410:	881b      	ldrh	r3, [r3, #0]
    5412:	095b      	lsrs	r3, r3, #5
    5414:	b29b      	uxth	r3, r3
    5416:	461a      	mov	r2, r3
    5418:	4b68      	ldr	r3, [pc, #416]	; (55bc <Port_Ipw_Init_UnusedPins+0x26c>)
    541a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    541e:	6959      	ldr	r1, [r3, #20]
    5420:	9b01      	ldr	r3, [sp, #4]
    5422:	685a      	ldr	r2, [r3, #4]
    5424:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5428:	005b      	lsls	r3, r3, #1
    542a:	4413      	add	r3, r2
    542c:	881b      	ldrh	r3, [r3, #0]
    542e:	f003 031f 	and.w	r3, r3, #31
    5432:	2201      	movs	r2, #1
    5434:	409a      	lsls	r2, r3
    5436:	9b01      	ldr	r3, [sp, #4]
    5438:	6858      	ldr	r0, [r3, #4]
    543a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    543e:	005b      	lsls	r3, r3, #1
    5440:	4403      	add	r3, r0
    5442:	881b      	ldrh	r3, [r3, #0]
    5444:	095b      	lsrs	r3, r3, #5
    5446:	b29b      	uxth	r3, r3
    5448:	4618      	mov	r0, r3
    544a:	4b5c      	ldr	r3, [pc, #368]	; (55bc <Port_Ipw_Init_UnusedPins+0x26c>)
    544c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5450:	430a      	orrs	r2, r1
    5452:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5454:	f003 ff7e 	bl	9354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5458:	e086      	b.n	5568 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    545a:	f003 ff4f 	bl	92fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    545e:	9b01      	ldr	r3, [sp, #4]
    5460:	685a      	ldr	r2, [r3, #4]
    5462:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5466:	005b      	lsls	r3, r3, #1
    5468:	4413      	add	r3, r2
    546a:	881b      	ldrh	r3, [r3, #0]
    546c:	095b      	lsrs	r3, r3, #5
    546e:	b29b      	uxth	r3, r3
    5470:	461a      	mov	r2, r3
    5472:	4b52      	ldr	r3, [pc, #328]	; (55bc <Port_Ipw_Init_UnusedPins+0x26c>)
    5474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5478:	6959      	ldr	r1, [r3, #20]
    547a:	9b01      	ldr	r3, [sp, #4]
    547c:	685a      	ldr	r2, [r3, #4]
    547e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5482:	005b      	lsls	r3, r3, #1
    5484:	4413      	add	r3, r2
    5486:	881b      	ldrh	r3, [r3, #0]
    5488:	f003 031f 	and.w	r3, r3, #31
    548c:	2201      	movs	r2, #1
    548e:	fa02 f303 	lsl.w	r3, r2, r3
    5492:	43da      	mvns	r2, r3
    5494:	9b01      	ldr	r3, [sp, #4]
    5496:	6858      	ldr	r0, [r3, #4]
    5498:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    549c:	005b      	lsls	r3, r3, #1
    549e:	4403      	add	r3, r0
    54a0:	881b      	ldrh	r3, [r3, #0]
    54a2:	095b      	lsrs	r3, r3, #5
    54a4:	b29b      	uxth	r3, r3
    54a6:	4618      	mov	r0, r3
    54a8:	4b44      	ldr	r3, [pc, #272]	; (55bc <Port_Ipw_Init_UnusedPins+0x26c>)
    54aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    54ae:	400a      	ands	r2, r1
    54b0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    54b2:	f003 ff4f 	bl	9354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    54b6:	f003 ff73 	bl	93a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    54ba:	9b01      	ldr	r3, [sp, #4]
    54bc:	685a      	ldr	r2, [r3, #4]
    54be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54c2:	005b      	lsls	r3, r3, #1
    54c4:	4413      	add	r3, r2
    54c6:	881b      	ldrh	r3, [r3, #0]
    54c8:	095b      	lsrs	r3, r3, #5
    54ca:	b29b      	uxth	r3, r3
    54cc:	461a      	mov	r2, r3
    54ce:	4b3b      	ldr	r3, [pc, #236]	; (55bc <Port_Ipw_Init_UnusedPins+0x26c>)
    54d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54d4:	6999      	ldr	r1, [r3, #24]
    54d6:	9b01      	ldr	r3, [sp, #4]
    54d8:	685a      	ldr	r2, [r3, #4]
    54da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54de:	005b      	lsls	r3, r3, #1
    54e0:	4413      	add	r3, r2
    54e2:	881b      	ldrh	r3, [r3, #0]
    54e4:	f003 031f 	and.w	r3, r3, #31
    54e8:	2201      	movs	r2, #1
    54ea:	fa02 f303 	lsl.w	r3, r2, r3
    54ee:	43da      	mvns	r2, r3
    54f0:	9b01      	ldr	r3, [sp, #4]
    54f2:	6858      	ldr	r0, [r3, #4]
    54f4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54f8:	005b      	lsls	r3, r3, #1
    54fa:	4403      	add	r3, r0
    54fc:	881b      	ldrh	r3, [r3, #0]
    54fe:	095b      	lsrs	r3, r3, #5
    5500:	b29b      	uxth	r3, r3
    5502:	4618      	mov	r0, r3
    5504:	4b2d      	ldr	r3, [pc, #180]	; (55bc <Port_Ipw_Init_UnusedPins+0x26c>)
    5506:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    550a:	400a      	ands	r2, r1
    550c:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    550e:	9b02      	ldr	r3, [sp, #8]
    5510:	2b03      	cmp	r3, #3
    5512:	d127      	bne.n	5564 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5514:	9b01      	ldr	r3, [sp, #4]
    5516:	685a      	ldr	r2, [r3, #4]
    5518:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    551c:	005b      	lsls	r3, r3, #1
    551e:	4413      	add	r3, r2
    5520:	881b      	ldrh	r3, [r3, #0]
    5522:	095b      	lsrs	r3, r3, #5
    5524:	b29b      	uxth	r3, r3
    5526:	461a      	mov	r2, r3
    5528:	4b24      	ldr	r3, [pc, #144]	; (55bc <Port_Ipw_Init_UnusedPins+0x26c>)
    552a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    552e:	6999      	ldr	r1, [r3, #24]
    5530:	9b01      	ldr	r3, [sp, #4]
    5532:	685a      	ldr	r2, [r3, #4]
    5534:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5538:	005b      	lsls	r3, r3, #1
    553a:	4413      	add	r3, r2
    553c:	881b      	ldrh	r3, [r3, #0]
    553e:	f003 031f 	and.w	r3, r3, #31
    5542:	2201      	movs	r2, #1
    5544:	409a      	lsls	r2, r3
    5546:	9b01      	ldr	r3, [sp, #4]
    5548:	6858      	ldr	r0, [r3, #4]
    554a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    554e:	005b      	lsls	r3, r3, #1
    5550:	4403      	add	r3, r0
    5552:	881b      	ldrh	r3, [r3, #0]
    5554:	095b      	lsrs	r3, r3, #5
    5556:	b29b      	uxth	r3, r3
    5558:	4618      	mov	r0, r3
    555a:	4b18      	ldr	r3, [pc, #96]	; (55bc <Port_Ipw_Init_UnusedPins+0x26c>)
    555c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5560:	430a      	orrs	r2, r1
    5562:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5564:	f003 ff48 	bl	93f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5568:	9b01      	ldr	r3, [sp, #4]
    556a:	685a      	ldr	r2, [r3, #4]
    556c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5570:	005b      	lsls	r3, r3, #1
    5572:	4413      	add	r3, r2
    5574:	881b      	ldrh	r3, [r3, #0]
    5576:	095b      	lsrs	r3, r3, #5
    5578:	b29b      	uxth	r3, r3
    557a:	461a      	mov	r2, r3
    557c:	4b10      	ldr	r3, [pc, #64]	; (55c0 <Port_Ipw_Init_UnusedPins+0x270>)
    557e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5582:	9a01      	ldr	r2, [sp, #4]
    5584:	6851      	ldr	r1, [r2, #4]
    5586:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    558a:	0052      	lsls	r2, r2, #1
    558c:	440a      	add	r2, r1
    558e:	8812      	ldrh	r2, [r2, #0]
    5590:	f002 021f 	and.w	r2, r2, #31
    5594:	9903      	ldr	r1, [sp, #12]
    5596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    559a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    559e:	3301      	adds	r3, #1
    55a0:	f8ad 3016 	strh.w	r3, [sp, #22]
    55a4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    55a8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    55ac:	429a      	cmp	r2, r3
    55ae:	f4ff aee7 	bcc.w	5380 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    55b2:	bf00      	nop
    55b4:	bf00      	nop
    55b6:	b007      	add	sp, #28
    55b8:	f85d fb04 	ldr.w	pc, [sp], #4
    55bc:	0000bd30 	.word	0x0000bd30
    55c0:	0000bd1c 	.word	0x0000bd1c

000055c4 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    55c4:	b500      	push	{lr}
    55c6:	b085      	sub	sp, #20
    55c8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    55ca:	9b01      	ldr	r3, [sp, #4]
    55cc:	7c1b      	ldrb	r3, [r3, #16]
    55ce:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    55d2:	2300      	movs	r3, #0
    55d4:	f8ad 300e 	strh.w	r3, [sp, #14]
    55d8:	e035      	b.n	5646 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    55da:	9b01      	ldr	r3, [sp, #4]
    55dc:	695a      	ldr	r2, [r3, #20]
    55de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    55e2:	00db      	lsls	r3, r3, #3
    55e4:	4413      	add	r3, r2
    55e6:	781b      	ldrb	r3, [r3, #0]
    55e8:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    55ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
    55f0:	4a1f      	ldr	r2, [pc, #124]	; (5670 <Port_Ipw_Init+0xac>)
    55f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    55f6:	9b01      	ldr	r3, [sp, #4]
    55f8:	695a      	ldr	r2, [r3, #20]
    55fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    55fe:	00db      	lsls	r3, r3, #3
    5600:	4413      	add	r3, r2
    5602:	4619      	mov	r1, r3
    5604:	f7ff fe39 	bl	527a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5608:	f004 f864 	bl	96d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    560c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5610:	4a17      	ldr	r2, [pc, #92]	; (5670 <Port_Ipw_Init+0xac>)
    5612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5616:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    561a:	9b01      	ldr	r3, [sp, #4]
    561c:	695a      	ldr	r2, [r3, #20]
    561e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5622:	00db      	lsls	r3, r3, #3
    5624:	4413      	add	r3, r2
    5626:	685a      	ldr	r2, [r3, #4]
    5628:	f89d 300c 	ldrb.w	r3, [sp, #12]
    562c:	4810      	ldr	r0, [pc, #64]	; (5670 <Port_Ipw_Init+0xac>)
    562e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5632:	430a      	orrs	r2, r1
    5634:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5638:	f004 f878 	bl	972c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    563c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5640:	3301      	adds	r3, #1
    5642:	f8ad 300e 	strh.w	r3, [sp, #14]
    5646:	f89d 300d 	ldrb.w	r3, [sp, #13]
    564a:	b29b      	uxth	r3, r3
    564c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5650:	429a      	cmp	r2, r3
    5652:	d3c2      	bcc.n	55da <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5654:	9b01      	ldr	r3, [sp, #4]
    5656:	6a1b      	ldr	r3, [r3, #32]
    5658:	4619      	mov	r1, r3
    565a:	2002      	movs	r0, #2
    565c:	f7ff fd98 	bl	5190 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5660:	9801      	ldr	r0, [sp, #4]
    5662:	f7ff fe75 	bl	5350 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5666:	bf00      	nop
    5668:	b005      	add	sp, #20
    566a:	f85d fb04 	ldr.w	pc, [sp], #4
    566e:	bf00      	nop
    5670:	0000bd1c 	.word	0x0000bd1c

00005674 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5674:	b500      	push	{lr}
    5676:	b085      	sub	sp, #20
    5678:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    567a:	9b01      	ldr	r3, [sp, #4]
    567c:	881b      	ldrh	r3, [r3, #0]
    567e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5682:	2300      	movs	r3, #0
    5684:	f8ad 300e 	strh.w	r3, [sp, #14]
    5688:	e0d2      	b.n	5830 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    568a:	9b01      	ldr	r3, [sp, #4]
    568c:	68d9      	ldr	r1, [r3, #12]
    568e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5692:	4613      	mov	r3, r2
    5694:	009b      	lsls	r3, r3, #2
    5696:	4413      	add	r3, r2
    5698:	009b      	lsls	r3, r3, #2
    569a:	440b      	add	r3, r1
    569c:	7c5b      	ldrb	r3, [r3, #17]
    569e:	f083 0301 	eor.w	r3, r3, #1
    56a2:	b2db      	uxtb	r3, r3
    56a4:	2b00      	cmp	r3, #0
    56a6:	f000 80be 	beq.w	5826 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    56aa:	9b01      	ldr	r3, [sp, #4]
    56ac:	68d9      	ldr	r1, [r3, #12]
    56ae:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56b2:	4613      	mov	r3, r2
    56b4:	009b      	lsls	r3, r3, #2
    56b6:	4413      	add	r3, r2
    56b8:	009b      	lsls	r3, r3, #2
    56ba:	440b      	add	r3, r1
    56bc:	7c1b      	ldrb	r3, [r3, #16]
    56be:	2b00      	cmp	r3, #0
    56c0:	f000 80b1 	beq.w	5826 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    56c4:	9b01      	ldr	r3, [sp, #4]
    56c6:	68d9      	ldr	r1, [r3, #12]
    56c8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56cc:	4613      	mov	r3, r2
    56ce:	009b      	lsls	r3, r3, #2
    56d0:	4413      	add	r3, r2
    56d2:	009b      	lsls	r3, r3, #2
    56d4:	440b      	add	r3, r1
    56d6:	881b      	ldrh	r3, [r3, #0]
    56d8:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    56dc:	9b01      	ldr	r3, [sp, #4]
    56de:	68d9      	ldr	r1, [r3, #12]
    56e0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56e4:	4613      	mov	r3, r2
    56e6:	009b      	lsls	r3, r3, #2
    56e8:	4413      	add	r3, r2
    56ea:	009b      	lsls	r3, r3, #2
    56ec:	440b      	add	r3, r1
    56ee:	68db      	ldr	r3, [r3, #12]
    56f0:	2b02      	cmp	r3, #2
    56f2:	d11d      	bne.n	5730 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    56f4:	f004 f936 	bl	9964 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    56f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    56fc:	095b      	lsrs	r3, r3, #5
    56fe:	b29b      	uxth	r3, r3
    5700:	461a      	mov	r2, r3
    5702:	4b51      	ldr	r3, [pc, #324]	; (5848 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5708:	6959      	ldr	r1, [r3, #20]
    570a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    570e:	f003 031f 	and.w	r3, r3, #31
    5712:	2201      	movs	r2, #1
    5714:	409a      	lsls	r2, r3
    5716:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    571a:	095b      	lsrs	r3, r3, #5
    571c:	b29b      	uxth	r3, r3
    571e:	4618      	mov	r0, r3
    5720:	4b49      	ldr	r3, [pc, #292]	; (5848 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5722:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5726:	430a      	orrs	r2, r1
    5728:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    572a:	f004 f947 	bl	99bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    572e:	e07a      	b.n	5826 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5730:	9b01      	ldr	r3, [sp, #4]
    5732:	68d9      	ldr	r1, [r3, #12]
    5734:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5738:	4613      	mov	r3, r2
    573a:	009b      	lsls	r3, r3, #2
    573c:	4413      	add	r3, r2
    573e:	009b      	lsls	r3, r3, #2
    5740:	440b      	add	r3, r1
    5742:	68db      	ldr	r3, [r3, #12]
    5744:	2b01      	cmp	r3, #1
    5746:	d00b      	beq.n	5760 <Port_Ipw_RefreshPortDirection+0xec>
    5748:	9b01      	ldr	r3, [sp, #4]
    574a:	68d9      	ldr	r1, [r3, #12]
    574c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5750:	4613      	mov	r3, r2
    5752:	009b      	lsls	r3, r3, #2
    5754:	4413      	add	r3, r2
    5756:	009b      	lsls	r3, r3, #2
    5758:	440b      	add	r3, r1
    575a:	68db      	ldr	r3, [r3, #12]
    575c:	2b03      	cmp	r3, #3
    575e:	d162      	bne.n	5826 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5760:	f004 f900 	bl	9964 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5764:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5768:	095b      	lsrs	r3, r3, #5
    576a:	b29b      	uxth	r3, r3
    576c:	461a      	mov	r2, r3
    576e:	4b36      	ldr	r3, [pc, #216]	; (5848 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5774:	6959      	ldr	r1, [r3, #20]
    5776:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    577a:	f003 031f 	and.w	r3, r3, #31
    577e:	2201      	movs	r2, #1
    5780:	fa02 f303 	lsl.w	r3, r2, r3
    5784:	43da      	mvns	r2, r3
    5786:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    578a:	095b      	lsrs	r3, r3, #5
    578c:	b29b      	uxth	r3, r3
    578e:	4618      	mov	r0, r3
    5790:	4b2d      	ldr	r3, [pc, #180]	; (5848 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5792:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5796:	400a      	ands	r2, r1
    5798:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    579a:	f004 f90f 	bl	99bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    579e:	f004 f933 	bl	9a08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    57a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57a6:	095b      	lsrs	r3, r3, #5
    57a8:	b29b      	uxth	r3, r3
    57aa:	461a      	mov	r2, r3
    57ac:	4b26      	ldr	r3, [pc, #152]	; (5848 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57b2:	6999      	ldr	r1, [r3, #24]
    57b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57b8:	f003 031f 	and.w	r3, r3, #31
    57bc:	2201      	movs	r2, #1
    57be:	fa02 f303 	lsl.w	r3, r2, r3
    57c2:	43da      	mvns	r2, r3
    57c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57c8:	095b      	lsrs	r3, r3, #5
    57ca:	b29b      	uxth	r3, r3
    57cc:	4618      	mov	r0, r3
    57ce:	4b1e      	ldr	r3, [pc, #120]	; (5848 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    57d4:	400a      	ands	r2, r1
    57d6:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    57d8:	9b01      	ldr	r3, [sp, #4]
    57da:	68d9      	ldr	r1, [r3, #12]
    57dc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    57e0:	4613      	mov	r3, r2
    57e2:	009b      	lsls	r3, r3, #2
    57e4:	4413      	add	r3, r2
    57e6:	009b      	lsls	r3, r3, #2
    57e8:	440b      	add	r3, r1
    57ea:	68db      	ldr	r3, [r3, #12]
    57ec:	2b03      	cmp	r3, #3
    57ee:	d118      	bne.n	5822 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    57f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57f4:	095b      	lsrs	r3, r3, #5
    57f6:	b29b      	uxth	r3, r3
    57f8:	461a      	mov	r2, r3
    57fa:	4b13      	ldr	r3, [pc, #76]	; (5848 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5800:	6999      	ldr	r1, [r3, #24]
    5802:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5806:	f003 031f 	and.w	r3, r3, #31
    580a:	2201      	movs	r2, #1
    580c:	409a      	lsls	r2, r3
    580e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5812:	095b      	lsrs	r3, r3, #5
    5814:	b29b      	uxth	r3, r3
    5816:	4618      	mov	r0, r3
    5818:	4b0b      	ldr	r3, [pc, #44]	; (5848 <Port_Ipw_RefreshPortDirection+0x1d4>)
    581a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    581e:	430a      	orrs	r2, r1
    5820:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5822:	f004 f91d 	bl	9a60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5826:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    582a:	3301      	adds	r3, #1
    582c:	f8ad 300e 	strh.w	r3, [sp, #14]
    5830:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5834:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5838:	429a      	cmp	r2, r3
    583a:	f4ff af26 	bcc.w	568a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    583e:	bf00      	nop
    5840:	bf00      	nop
    5842:	b005      	add	sp, #20
    5844:	f85d fb04 	ldr.w	pc, [sp], #4
    5848:	0000bd30 	.word	0x0000bd30

0000584c <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    584c:	b082      	sub	sp, #8
    584e:	9001      	str	r0, [sp, #4]
    5850:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    5852:	9b01      	ldr	r3, [sp, #4]
    5854:	681b      	ldr	r3, [r3, #0]
    5856:	f023 0207 	bic.w	r2, r3, #7
    585a:	9b00      	ldr	r3, [sp, #0]
    585c:	f003 0307 	and.w	r3, r3, #7
    5860:	431a      	orrs	r2, r3
    5862:	9b01      	ldr	r3, [sp, #4]
    5864:	601a      	str	r2, [r3, #0]
}
    5866:	bf00      	nop
    5868:	b002      	add	sp, #8
    586a:	4770      	bx	lr

0000586c <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    586c:	b082      	sub	sp, #8
    586e:	9001      	str	r0, [sp, #4]
    5870:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    5872:	9b01      	ldr	r3, [sp, #4]
    5874:	681b      	ldr	r3, [r3, #0]
    5876:	f023 0218 	bic.w	r2, r3, #24
    587a:	9b00      	ldr	r3, [sp, #0]
    587c:	00db      	lsls	r3, r3, #3
    587e:	f003 0318 	and.w	r3, r3, #24
    5882:	431a      	orrs	r2, r3
    5884:	9b01      	ldr	r3, [sp, #4]
    5886:	601a      	str	r2, [r3, #0]
}
    5888:	bf00      	nop
    588a:	b002      	add	sp, #8
    588c:	4770      	bx	lr

0000588e <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    588e:	b082      	sub	sp, #8
    5890:	9001      	str	r0, [sp, #4]
    5892:	460b      	mov	r3, r1
    5894:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    5898:	9b01      	ldr	r3, [sp, #4]
    589a:	681b      	ldr	r3, [r3, #0]
    589c:	f023 0320 	bic.w	r3, r3, #32
    58a0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    58a4:	2a00      	cmp	r2, #0
    58a6:	d001      	beq.n	58ac <Ftm_Pwm_Ip_SetCpwms+0x1e>
    58a8:	2220      	movs	r2, #32
    58aa:	e000      	b.n	58ae <Ftm_Pwm_Ip_SetCpwms+0x20>
    58ac:	2200      	movs	r2, #0
    58ae:	431a      	orrs	r2, r3
    58b0:	9b01      	ldr	r3, [sp, #4]
    58b2:	601a      	str	r2, [r3, #0]
}
    58b4:	bf00      	nop
    58b6:	b002      	add	sp, #8
    58b8:	4770      	bx	lr

000058ba <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    58ba:	b082      	sub	sp, #8
    58bc:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    58be:	9b01      	ldr	r3, [sp, #4]
    58c0:	681b      	ldr	r3, [r3, #0]
    58c2:	f003 0320 	and.w	r3, r3, #32
    58c6:	2b00      	cmp	r3, #0
    58c8:	bf14      	ite	ne
    58ca:	2301      	movne	r3, #1
    58cc:	2300      	moveq	r3, #0
    58ce:	b2db      	uxtb	r3, r3
}
    58d0:	4618      	mov	r0, r3
    58d2:	b002      	add	sp, #8
    58d4:	4770      	bx	lr

000058d6 <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    58d6:	b082      	sub	sp, #8
    58d8:	9001      	str	r0, [sp, #4]
    58da:	460b      	mov	r3, r1
    58dc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    58e0:	9b01      	ldr	r3, [sp, #4]
    58e2:	681b      	ldr	r3, [r3, #0]
    58e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    58e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    58ec:	2a00      	cmp	r2, #0
    58ee:	d002      	beq.n	58f6 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    58f0:	f44f 7280 	mov.w	r2, #256	; 0x100
    58f4:	e000      	b.n	58f8 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    58f6:	2200      	movs	r2, #0
    58f8:	431a      	orrs	r2, r3
    58fa:	9b01      	ldr	r3, [sp, #4]
    58fc:	601a      	str	r2, [r3, #0]
}
    58fe:	bf00      	nop
    5900:	b002      	add	sp, #8
    5902:	4770      	bx	lr

00005904 <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    5904:	b082      	sub	sp, #8
    5906:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    5908:	9b01      	ldr	r3, [sp, #4]
    590a:	681b      	ldr	r3, [r3, #0]
    590c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    5910:	9b01      	ldr	r3, [sp, #4]
    5912:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    5914:	bf00      	nop
    5916:	b002      	add	sp, #8
    5918:	4770      	bx	lr

0000591a <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    591a:	b082      	sub	sp, #8
    591c:	9001      	str	r0, [sp, #4]
    591e:	460b      	mov	r3, r1
    5920:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    5924:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5928:	3310      	adds	r3, #16
    592a:	2201      	movs	r2, #1
    592c:	409a      	lsls	r2, r3
    592e:	9b01      	ldr	r3, [sp, #4]
    5930:	681b      	ldr	r3, [r3, #0]
    5932:	431a      	orrs	r2, r3
    5934:	9b01      	ldr	r3, [sp, #4]
    5936:	601a      	str	r2, [r3, #0]
}
    5938:	bf00      	nop
    593a:	b002      	add	sp, #8
    593c:	4770      	bx	lr

0000593e <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    593e:	b082      	sub	sp, #8
    5940:	9001      	str	r0, [sp, #4]
    5942:	460b      	mov	r3, r1
    5944:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    5948:	9b01      	ldr	r3, [sp, #4]
    594a:	685b      	ldr	r3, [r3, #4]
    594c:	0c1b      	lsrs	r3, r3, #16
    594e:	041b      	lsls	r3, r3, #16
    5950:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5954:	431a      	orrs	r2, r3
    5956:	9b01      	ldr	r3, [sp, #4]
    5958:	605a      	str	r2, [r3, #4]
}
    595a:	bf00      	nop
    595c:	b002      	add	sp, #8
    595e:	4770      	bx	lr

00005960 <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    5960:	b082      	sub	sp, #8
    5962:	9001      	str	r0, [sp, #4]
    5964:	460b      	mov	r3, r1
    5966:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    596a:	9b01      	ldr	r3, [sp, #4]
    596c:	689b      	ldr	r3, [r3, #8]
    596e:	0c1b      	lsrs	r3, r3, #16
    5970:	041b      	lsls	r3, r3, #16
    5972:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5976:	431a      	orrs	r2, r3
    5978:	9b01      	ldr	r3, [sp, #4]
    597a:	609a      	str	r2, [r3, #8]
}
    597c:	bf00      	nop
    597e:	b002      	add	sp, #8
    5980:	4770      	bx	lr

00005982 <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    5982:	b084      	sub	sp, #16
    5984:	9001      	str	r0, [sp, #4]
    5986:	460b      	mov	r3, r1
    5988:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    598c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5990:	9a01      	ldr	r2, [sp, #4]
    5992:	3301      	adds	r3, #1
    5994:	00db      	lsls	r3, r3, #3
    5996:	4413      	add	r3, r2
    5998:	685b      	ldr	r3, [r3, #4]
    599a:	089b      	lsrs	r3, r3, #2
    599c:	b2db      	uxtb	r3, r3
    599e:	f003 0301 	and.w	r3, r3, #1
    59a2:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    59a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    59aa:	9a01      	ldr	r2, [sp, #4]
    59ac:	3301      	adds	r3, #1
    59ae:	00db      	lsls	r3, r3, #3
    59b0:	4413      	add	r3, r2
    59b2:	685b      	ldr	r3, [r3, #4]
    59b4:	08db      	lsrs	r3, r3, #3
    59b6:	b2db      	uxtb	r3, r3
    59b8:	005b      	lsls	r3, r3, #1
    59ba:	b2db      	uxtb	r3, r3
    59bc:	f003 0302 	and.w	r3, r3, #2
    59c0:	b2da      	uxtb	r2, r3
    59c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59c6:	4313      	orrs	r3, r2
    59c8:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    59cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    59d0:	4618      	mov	r0, r3
    59d2:	b004      	add	sp, #16
    59d4:	4770      	bx	lr

000059d6 <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    59d6:	b086      	sub	sp, #24
    59d8:	9003      	str	r0, [sp, #12]
    59da:	460b      	mov	r3, r1
    59dc:	9201      	str	r2, [sp, #4]
    59de:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    59e2:	9b01      	ldr	r3, [sp, #4]
    59e4:	009b      	lsls	r3, r3, #2
    59e6:	f003 0304 	and.w	r3, r3, #4
    59ea:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    59ec:	9b01      	ldr	r3, [sp, #4]
    59ee:	009b      	lsls	r3, r3, #2
    59f0:	f003 0308 	and.w	r3, r3, #8
    59f4:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    59f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    59fa:	9a03      	ldr	r2, [sp, #12]
    59fc:	3301      	adds	r3, #1
    59fe:	00db      	lsls	r3, r3, #3
    5a00:	4413      	add	r3, r2
    5a02:	685b      	ldr	r3, [r3, #4]
    5a04:	f023 0104 	bic.w	r1, r3, #4
    5a08:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a0c:	9a05      	ldr	r2, [sp, #20]
    5a0e:	430a      	orrs	r2, r1
    5a10:	9903      	ldr	r1, [sp, #12]
    5a12:	3301      	adds	r3, #1
    5a14:	00db      	lsls	r3, r3, #3
    5a16:	440b      	add	r3, r1
    5a18:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    5a1a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a1e:	9a03      	ldr	r2, [sp, #12]
    5a20:	3301      	adds	r3, #1
    5a22:	00db      	lsls	r3, r3, #3
    5a24:	4413      	add	r3, r2
    5a26:	685b      	ldr	r3, [r3, #4]
    5a28:	f023 0108 	bic.w	r1, r3, #8
    5a2c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a30:	9a04      	ldr	r2, [sp, #16]
    5a32:	430a      	orrs	r2, r1
    5a34:	9903      	ldr	r1, [sp, #12]
    5a36:	3301      	adds	r3, #1
    5a38:	00db      	lsls	r3, r3, #3
    5a3a:	440b      	add	r3, r1
    5a3c:	605a      	str	r2, [r3, #4]
}
    5a3e:	bf00      	nop
    5a40:	b006      	add	sp, #24
    5a42:	4770      	bx	lr

00005a44 <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    5a44:	b086      	sub	sp, #24
    5a46:	9003      	str	r0, [sp, #12]
    5a48:	460b      	mov	r3, r1
    5a4a:	9201      	str	r2, [sp, #4]
    5a4c:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    5a50:	9b01      	ldr	r3, [sp, #4]
    5a52:	009b      	lsls	r3, r3, #2
    5a54:	f003 0310 	and.w	r3, r3, #16
    5a58:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    5a5a:	9b01      	ldr	r3, [sp, #4]
    5a5c:	009b      	lsls	r3, r3, #2
    5a5e:	f003 0320 	and.w	r3, r3, #32
    5a62:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    5a64:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a68:	9a03      	ldr	r2, [sp, #12]
    5a6a:	3301      	adds	r3, #1
    5a6c:	00db      	lsls	r3, r3, #3
    5a6e:	4413      	add	r3, r2
    5a70:	685b      	ldr	r3, [r3, #4]
    5a72:	f023 0110 	bic.w	r1, r3, #16
    5a76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a7a:	9a05      	ldr	r2, [sp, #20]
    5a7c:	430a      	orrs	r2, r1
    5a7e:	9903      	ldr	r1, [sp, #12]
    5a80:	3301      	adds	r3, #1
    5a82:	00db      	lsls	r3, r3, #3
    5a84:	440b      	add	r3, r1
    5a86:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    5a88:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a8c:	9a03      	ldr	r2, [sp, #12]
    5a8e:	3301      	adds	r3, #1
    5a90:	00db      	lsls	r3, r3, #3
    5a92:	4413      	add	r3, r2
    5a94:	685b      	ldr	r3, [r3, #4]
    5a96:	f023 0120 	bic.w	r1, r3, #32
    5a9a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a9e:	9a04      	ldr	r2, [sp, #16]
    5aa0:	430a      	orrs	r2, r1
    5aa2:	9903      	ldr	r1, [sp, #12]
    5aa4:	3301      	adds	r3, #1
    5aa6:	00db      	lsls	r3, r3, #3
    5aa8:	440b      	add	r3, r1
    5aaa:	605a      	str	r2, [r3, #4]
}
    5aac:	bf00      	nop
    5aae:	b006      	add	sp, #24
    5ab0:	4770      	bx	lr

00005ab2 <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    5ab2:	b084      	sub	sp, #16
    5ab4:	9001      	str	r0, [sp, #4]
    5ab6:	460b      	mov	r3, r1
    5ab8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    5abc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ac0:	9a01      	ldr	r2, [sp, #4]
    5ac2:	3301      	adds	r3, #1
    5ac4:	00db      	lsls	r3, r3, #3
    5ac6:	4413      	add	r3, r2
    5ac8:	685b      	ldr	r3, [r3, #4]
    5aca:	091b      	lsrs	r3, r3, #4
    5acc:	b2db      	uxtb	r3, r3
    5ace:	f003 0301 	and.w	r3, r3, #1
    5ad2:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    5ad6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ada:	9a01      	ldr	r2, [sp, #4]
    5adc:	3301      	adds	r3, #1
    5ade:	00db      	lsls	r3, r3, #3
    5ae0:	4413      	add	r3, r2
    5ae2:	685b      	ldr	r3, [r3, #4]
    5ae4:	095b      	lsrs	r3, r3, #5
    5ae6:	b2db      	uxtb	r3, r3
    5ae8:	005b      	lsls	r3, r3, #1
    5aea:	b2db      	uxtb	r3, r3
    5aec:	f003 0302 	and.w	r3, r3, #2
    5af0:	b2da      	uxtb	r2, r3
    5af2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5af6:	4313      	orrs	r3, r2
    5af8:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    5afc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5b00:	4618      	mov	r0, r3
    5b02:	b004      	add	sp, #16
    5b04:	4770      	bx	lr

00005b06 <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    5b06:	b082      	sub	sp, #8
    5b08:	9001      	str	r0, [sp, #4]
    5b0a:	460b      	mov	r3, r1
    5b0c:	f88d 3003 	strb.w	r3, [sp, #3]
    5b10:	4613      	mov	r3, r2
    5b12:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    5b16:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b1a:	9a01      	ldr	r2, [sp, #4]
    5b1c:	3301      	adds	r3, #1
    5b1e:	00db      	lsls	r3, r3, #3
    5b20:	4413      	add	r3, r2
    5b22:	685b      	ldr	r3, [r3, #4]
    5b24:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    5b28:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5b2c:	2b00      	cmp	r3, #0
    5b2e:	d001      	beq.n	5b34 <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    5b30:	2140      	movs	r1, #64	; 0x40
    5b32:	e000      	b.n	5b36 <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    5b34:	2100      	movs	r1, #0
    5b36:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b3a:	430a      	orrs	r2, r1
    5b3c:	9901      	ldr	r1, [sp, #4]
    5b3e:	3301      	adds	r3, #1
    5b40:	00db      	lsls	r3, r3, #3
    5b42:	440b      	add	r3, r1
    5b44:	605a      	str	r2, [r3, #4]
}
    5b46:	bf00      	nop
    5b48:	b002      	add	sp, #8
    5b4a:	4770      	bx	lr

00005b4c <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    5b4c:	b082      	sub	sp, #8
    5b4e:	9001      	str	r0, [sp, #4]
    5b50:	460b      	mov	r3, r1
    5b52:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    5b56:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b5a:	9a01      	ldr	r2, [sp, #4]
    5b5c:	3301      	adds	r3, #1
    5b5e:	00db      	lsls	r3, r3, #3
    5b60:	4413      	add	r3, r2
    5b62:	685a      	ldr	r2, [r3, #4]
    5b64:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    5b6c:	9901      	ldr	r1, [sp, #4]
    5b6e:	3301      	adds	r3, #1
    5b70:	00db      	lsls	r3, r3, #3
    5b72:	440b      	add	r3, r1
    5b74:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    5b76:	bf00      	nop
    5b78:	b002      	add	sp, #8
    5b7a:	4770      	bx	lr

00005b7c <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    5b7c:	b082      	sub	sp, #8
    5b7e:	9001      	str	r0, [sp, #4]
    5b80:	460b      	mov	r3, r1
    5b82:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    5b86:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b8a:	9a01      	ldr	r2, [sp, #4]
    5b8c:	3301      	adds	r3, #1
    5b8e:	00db      	lsls	r3, r3, #3
    5b90:	4413      	add	r3, r2
    5b92:	685b      	ldr	r3, [r3, #4]
    5b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5b98:	2b00      	cmp	r3, #0
    5b9a:	bf14      	ite	ne
    5b9c:	2301      	movne	r3, #1
    5b9e:	2300      	moveq	r3, #0
    5ba0:	b2db      	uxtb	r3, r3
}
    5ba2:	4618      	mov	r0, r3
    5ba4:	b002      	add	sp, #8
    5ba6:	4770      	bx	lr

00005ba8 <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    5ba8:	b082      	sub	sp, #8
    5baa:	9001      	str	r0, [sp, #4]
    5bac:	460b      	mov	r3, r1
    5bae:	f88d 3003 	strb.w	r3, [sp, #3]
    5bb2:	4613      	mov	r3, r2
    5bb4:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    5bb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5bbc:	f8bd 2000 	ldrh.w	r2, [sp]
    5bc0:	9901      	ldr	r1, [sp, #4]
    5bc2:	3301      	adds	r3, #1
    5bc4:	00db      	lsls	r3, r3, #3
    5bc6:	440b      	add	r3, r1
    5bc8:	609a      	str	r2, [r3, #8]
}
    5bca:	bf00      	nop
    5bcc:	b002      	add	sp, #8
    5bce:	4770      	bx	lr

00005bd0 <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    5bd0:	b082      	sub	sp, #8
    5bd2:	9001      	str	r0, [sp, #4]
    5bd4:	460b      	mov	r3, r1
    5bd6:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    5bda:	9b01      	ldr	r3, [sp, #4]
    5bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5bde:	0c1b      	lsrs	r3, r3, #16
    5be0:	041b      	lsls	r3, r3, #16
    5be2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5be6:	431a      	orrs	r2, r3
    5be8:	9b01      	ldr	r3, [sp, #4]
    5bea:	64da      	str	r2, [r3, #76]	; 0x4c
}
    5bec:	bf00      	nop
    5bee:	b002      	add	sp, #8
    5bf0:	4770      	bx	lr

00005bf2 <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    5bf2:	b082      	sub	sp, #8
    5bf4:	9001      	str	r0, [sp, #4]
    5bf6:	460b      	mov	r3, r1
    5bf8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    5bfc:	9b01      	ldr	r3, [sp, #4]
    5bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5c00:	f023 0301 	bic.w	r3, r3, #1
    5c04:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5c08:	2a00      	cmp	r2, #0
    5c0a:	d001      	beq.n	5c10 <Ftm_Pwm_Ip_Enable+0x1e>
    5c0c:	2201      	movs	r2, #1
    5c0e:	e000      	b.n	5c12 <Ftm_Pwm_Ip_Enable+0x20>
    5c10:	2200      	movs	r2, #0
    5c12:	431a      	orrs	r2, r3
    5c14:	9b01      	ldr	r3, [sp, #4]
    5c16:	655a      	str	r2, [r3, #84]	; 0x54
}
    5c18:	bf00      	nop
    5c1a:	b002      	add	sp, #8
    5c1c:	4770      	bx	lr

00005c1e <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    5c1e:	b082      	sub	sp, #8
    5c20:	9001      	str	r0, [sp, #4]
    5c22:	460b      	mov	r3, r1
    5c24:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    5c28:	9b01      	ldr	r3, [sp, #4]
    5c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5c2c:	f023 0308 	bic.w	r3, r3, #8
    5c30:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5c34:	2a00      	cmp	r2, #0
    5c36:	d001      	beq.n	5c3c <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    5c38:	2208      	movs	r2, #8
    5c3a:	e000      	b.n	5c3e <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    5c3c:	2200      	movs	r2, #0
    5c3e:	431a      	orrs	r2, r3
    5c40:	9b01      	ldr	r3, [sp, #4]
    5c42:	655a      	str	r2, [r3, #84]	; 0x54
}
    5c44:	bf00      	nop
    5c46:	b002      	add	sp, #8
    5c48:	4770      	bx	lr

00005c4a <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    5c4a:	b082      	sub	sp, #8
    5c4c:	9001      	str	r0, [sp, #4]
    5c4e:	460b      	mov	r3, r1
    5c50:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    5c54:	9b01      	ldr	r3, [sp, #4]
    5c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5c58:	f023 0301 	bic.w	r3, r3, #1
    5c5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5c60:	2a00      	cmp	r2, #0
    5c62:	d001      	beq.n	5c68 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    5c64:	2201      	movs	r2, #1
    5c66:	e000      	b.n	5c6a <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    5c68:	2200      	movs	r2, #0
    5c6a:	431a      	orrs	r2, r3
    5c6c:	9b01      	ldr	r3, [sp, #4]
    5c6e:	659a      	str	r2, [r3, #88]	; 0x58
}
    5c70:	bf00      	nop
    5c72:	b002      	add	sp, #8
    5c74:	4770      	bx	lr

00005c76 <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    5c76:	b082      	sub	sp, #8
    5c78:	9001      	str	r0, [sp, #4]
    5c7a:	460b      	mov	r3, r1
    5c7c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    5c80:	9b01      	ldr	r3, [sp, #4]
    5c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5c84:	f023 0302 	bic.w	r3, r3, #2
    5c88:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5c8c:	2a00      	cmp	r2, #0
    5c8e:	d001      	beq.n	5c94 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    5c90:	2202      	movs	r2, #2
    5c92:	e000      	b.n	5c96 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    5c94:	2200      	movs	r2, #0
    5c96:	431a      	orrs	r2, r3
    5c98:	9b01      	ldr	r3, [sp, #4]
    5c9a:	659a      	str	r2, [r3, #88]	; 0x58
}
    5c9c:	bf00      	nop
    5c9e:	b002      	add	sp, #8
    5ca0:	4770      	bx	lr

00005ca2 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    5ca2:	b082      	sub	sp, #8
    5ca4:	9001      	str	r0, [sp, #4]
    5ca6:	460b      	mov	r3, r1
    5ca8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    5cac:	9b01      	ldr	r3, [sp, #4]
    5cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5cb0:	f023 0308 	bic.w	r3, r3, #8
    5cb4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5cb8:	2a00      	cmp	r2, #0
    5cba:	d001      	beq.n	5cc0 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    5cbc:	2208      	movs	r2, #8
    5cbe:	e000      	b.n	5cc2 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    5cc0:	2200      	movs	r2, #0
    5cc2:	431a      	orrs	r2, r3
    5cc4:	9b01      	ldr	r3, [sp, #4]
    5cc6:	659a      	str	r2, [r3, #88]	; 0x58
}
    5cc8:	bf00      	nop
    5cca:	b002      	add	sp, #8
    5ccc:	4770      	bx	lr

00005cce <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    5cce:	b082      	sub	sp, #8
    5cd0:	9001      	str	r0, [sp, #4]
    5cd2:	460b      	mov	r3, r1
    5cd4:	f88d 3003 	strb.w	r3, [sp, #3]
    5cd8:	4613      	mov	r3, r2
    5cda:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5cde:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5ce2:	2b00      	cmp	r3, #0
    5ce4:	d00a      	beq.n	5cfc <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    5ce6:	9b01      	ldr	r3, [sp, #4]
    5ce8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    5cea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5cee:	2110      	movs	r1, #16
    5cf0:	fa01 f303 	lsl.w	r3, r1, r3
    5cf4:	431a      	orrs	r2, r3
    5cf6:	9b01      	ldr	r3, [sp, #4]
    5cf8:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    5cfa:	e00a      	b.n	5d12 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    5cfc:	9b01      	ldr	r3, [sp, #4]
    5cfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    5d00:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5d04:	2110      	movs	r1, #16
    5d06:	fa01 f303 	lsl.w	r3, r1, r3
    5d0a:	43db      	mvns	r3, r3
    5d0c:	401a      	ands	r2, r3
    5d0e:	9b01      	ldr	r3, [sp, #4]
    5d10:	659a      	str	r2, [r3, #88]	; 0x58
}
    5d12:	bf00      	nop
    5d14:	b002      	add	sp, #8
    5d16:	4770      	bx	lr

00005d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    5d18:	b082      	sub	sp, #8
    5d1a:	9001      	str	r0, [sp, #4]
    5d1c:	460b      	mov	r3, r1
    5d1e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    5d22:	9b01      	ldr	r3, [sp, #4]
    5d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5d2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5d2e:	2a00      	cmp	r2, #0
    5d30:	d001      	beq.n	5d36 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    5d32:	2280      	movs	r2, #128	; 0x80
    5d34:	e000      	b.n	5d38 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    5d36:	2200      	movs	r2, #0
    5d38:	431a      	orrs	r2, r3
    5d3a:	9b01      	ldr	r3, [sp, #4]
    5d3c:	659a      	str	r2, [r3, #88]	; 0x58
}
    5d3e:	bf00      	nop
    5d40:	b002      	add	sp, #8
    5d42:	4770      	bx	lr

00005d44 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    5d44:	b084      	sub	sp, #16
    5d46:	9003      	str	r0, [sp, #12]
    5d48:	460b      	mov	r3, r1
    5d4a:	9201      	str	r2, [sp, #4]
    5d4c:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    5d50:	9b01      	ldr	r3, [sp, #4]
    5d52:	2b01      	cmp	r3, #1
    5d54:	d10a      	bne.n	5d6c <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    5d56:	9b03      	ldr	r3, [sp, #12]
    5d58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    5d5a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5d5e:	2101      	movs	r1, #1
    5d60:	fa01 f303 	lsl.w	r3, r1, r3
    5d64:	431a      	orrs	r2, r3
    5d66:	9b03      	ldr	r3, [sp, #12]
    5d68:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    5d6a:	e00a      	b.n	5d82 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    5d6c:	9b03      	ldr	r3, [sp, #12]
    5d6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    5d70:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5d74:	2101      	movs	r1, #1
    5d76:	fa01 f303 	lsl.w	r3, r1, r3
    5d7a:	43db      	mvns	r3, r3
    5d7c:	401a      	ands	r2, r3
    5d7e:	9b03      	ldr	r3, [sp, #12]
    5d80:	65da      	str	r2, [r3, #92]	; 0x5c
}
    5d82:	bf00      	nop
    5d84:	b004      	add	sp, #16
    5d86:	4770      	bx	lr

00005d88 <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    5d88:	b082      	sub	sp, #8
    5d8a:	9001      	str	r0, [sp, #4]
    5d8c:	460b      	mov	r3, r1
    5d8e:	f88d 3003 	strb.w	r3, [sp, #3]
    5d92:	4613      	mov	r3, r2
    5d94:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    5d98:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5d9c:	2b00      	cmp	r3, #0
    5d9e:	d00a      	beq.n	5db6 <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    5da0:	9b01      	ldr	r3, [sp, #4]
    5da2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5da4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5da8:	2101      	movs	r1, #1
    5daa:	fa01 f303 	lsl.w	r3, r1, r3
    5dae:	431a      	orrs	r2, r3
    5db0:	9b01      	ldr	r3, [sp, #4]
    5db2:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    5db4:	e00a      	b.n	5dcc <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    5db6:	9b01      	ldr	r3, [sp, #4]
    5db8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5dba:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5dbe:	2101      	movs	r1, #1
    5dc0:	fa01 f303 	lsl.w	r3, r1, r3
    5dc4:	43db      	mvns	r3, r3
    5dc6:	401a      	ands	r2, r3
    5dc8:	9b01      	ldr	r3, [sp, #4]
    5dca:	661a      	str	r2, [r3, #96]	; 0x60
}
    5dcc:	bf00      	nop
    5dce:	b002      	add	sp, #8
    5dd0:	4770      	bx	lr

00005dd2 <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    5dd2:	b082      	sub	sp, #8
    5dd4:	9001      	str	r0, [sp, #4]
    5dd6:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    5dd8:	9b01      	ldr	r3, [sp, #4]
    5dda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5ddc:	9b00      	ldr	r3, [sp, #0]
    5dde:	43db      	mvns	r3, r3
    5de0:	401a      	ands	r2, r3
    5de2:	9b00      	ldr	r3, [sp, #0]
    5de4:	431a      	orrs	r2, r3
    5de6:	9b01      	ldr	r3, [sp, #4]
    5de8:	661a      	str	r2, [r3, #96]	; 0x60
}
    5dea:	bf00      	nop
    5dec:	b002      	add	sp, #8
    5dee:	4770      	bx	lr

00005df0 <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    5df0:	b082      	sub	sp, #8
    5df2:	9001      	str	r0, [sp, #4]
    5df4:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    5df6:	9b01      	ldr	r3, [sp, #4]
    5df8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5dfa:	9b00      	ldr	r3, [sp, #0]
    5dfc:	43db      	mvns	r3, r3
    5dfe:	401a      	ands	r2, r3
    5e00:	9b01      	ldr	r3, [sp, #4]
    5e02:	661a      	str	r2, [r3, #96]	; 0x60
}
    5e04:	bf00      	nop
    5e06:	b002      	add	sp, #8
    5e08:	4770      	bx	lr

00005e0a <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    5e0a:	b082      	sub	sp, #8
    5e0c:	9001      	str	r0, [sp, #4]
    5e0e:	460b      	mov	r3, r1
    5e10:	f88d 3003 	strb.w	r3, [sp, #3]
    5e14:	4613      	mov	r3, r2
    5e16:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5e1a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d00b      	beq.n	5e3a <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5e22:	9b01      	ldr	r3, [sp, #4]
    5e24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5e26:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e2a:	00db      	lsls	r3, r3, #3
    5e2c:	2101      	movs	r1, #1
    5e2e:	fa01 f303 	lsl.w	r3, r1, r3
    5e32:	431a      	orrs	r2, r3
    5e34:	9b01      	ldr	r3, [sp, #4]
    5e36:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5e38:	e00b      	b.n	5e52 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5e3a:	9b01      	ldr	r3, [sp, #4]
    5e3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5e3e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e42:	00db      	lsls	r3, r3, #3
    5e44:	2101      	movs	r1, #1
    5e46:	fa01 f303 	lsl.w	r3, r1, r3
    5e4a:	43db      	mvns	r3, r3
    5e4c:	401a      	ands	r2, r3
    5e4e:	9b01      	ldr	r3, [sp, #4]
    5e50:	665a      	str	r2, [r3, #100]	; 0x64
}
    5e52:	bf00      	nop
    5e54:	b002      	add	sp, #8
    5e56:	4770      	bx	lr

00005e58 <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    5e58:	b082      	sub	sp, #8
    5e5a:	9001      	str	r0, [sp, #4]
    5e5c:	460b      	mov	r3, r1
    5e5e:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    5e62:	9b01      	ldr	r3, [sp, #4]
    5e64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5e66:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e6a:	00db      	lsls	r3, r3, #3
    5e6c:	fa22 f303 	lsr.w	r3, r2, r3
    5e70:	f003 0301 	and.w	r3, r3, #1
    5e74:	2b00      	cmp	r3, #0
    5e76:	bf14      	ite	ne
    5e78:	2301      	movne	r3, #1
    5e7a:	2300      	moveq	r3, #0
    5e7c:	b2db      	uxtb	r3, r3
}
    5e7e:	4618      	mov	r0, r3
    5e80:	b002      	add	sp, #8
    5e82:	4770      	bx	lr

00005e84 <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    5e84:	b082      	sub	sp, #8
    5e86:	9001      	str	r0, [sp, #4]
    5e88:	460b      	mov	r3, r1
    5e8a:	f88d 3003 	strb.w	r3, [sp, #3]
    5e8e:	4613      	mov	r3, r2
    5e90:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    5e94:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d00b      	beq.n	5eb4 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5e9c:	9b01      	ldr	r3, [sp, #4]
    5e9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5ea0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ea4:	00db      	lsls	r3, r3, #3
    5ea6:	2102      	movs	r1, #2
    5ea8:	fa01 f303 	lsl.w	r3, r1, r3
    5eac:	431a      	orrs	r2, r3
    5eae:	9b01      	ldr	r3, [sp, #4]
    5eb0:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5eb2:	e00b      	b.n	5ecc <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5eb4:	9b01      	ldr	r3, [sp, #4]
    5eb6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5eb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ebc:	00db      	lsls	r3, r3, #3
    5ebe:	2102      	movs	r1, #2
    5ec0:	fa01 f303 	lsl.w	r3, r1, r3
    5ec4:	43db      	mvns	r3, r3
    5ec6:	401a      	ands	r2, r3
    5ec8:	9b01      	ldr	r3, [sp, #4]
    5eca:	665a      	str	r2, [r3, #100]	; 0x64
}
    5ecc:	bf00      	nop
    5ece:	b002      	add	sp, #8
    5ed0:	4770      	bx	lr

00005ed2 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    5ed2:	b082      	sub	sp, #8
    5ed4:	9001      	str	r0, [sp, #4]
    5ed6:	460b      	mov	r3, r1
    5ed8:	f88d 3003 	strb.w	r3, [sp, #3]
    5edc:	4613      	mov	r3, r2
    5ede:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5ee2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5ee6:	2b00      	cmp	r3, #0
    5ee8:	d00b      	beq.n	5f02 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5eea:	9b01      	ldr	r3, [sp, #4]
    5eec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5eee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ef2:	00db      	lsls	r3, r3, #3
    5ef4:	2110      	movs	r1, #16
    5ef6:	fa01 f303 	lsl.w	r3, r1, r3
    5efa:	431a      	orrs	r2, r3
    5efc:	9b01      	ldr	r3, [sp, #4]
    5efe:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5f00:	e00b      	b.n	5f1a <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5f02:	9b01      	ldr	r3, [sp, #4]
    5f04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f06:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f0a:	00db      	lsls	r3, r3, #3
    5f0c:	2110      	movs	r1, #16
    5f0e:	fa01 f303 	lsl.w	r3, r1, r3
    5f12:	43db      	mvns	r3, r3
    5f14:	401a      	ands	r2, r3
    5f16:	9b01      	ldr	r3, [sp, #4]
    5f18:	665a      	str	r2, [r3, #100]	; 0x64
}
    5f1a:	bf00      	nop
    5f1c:	b002      	add	sp, #8
    5f1e:	4770      	bx	lr

00005f20 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    5f20:	b082      	sub	sp, #8
    5f22:	9001      	str	r0, [sp, #4]
    5f24:	460b      	mov	r3, r1
    5f26:	f88d 3003 	strb.w	r3, [sp, #3]
    5f2a:	4613      	mov	r3, r2
    5f2c:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5f30:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5f34:	2b00      	cmp	r3, #0
    5f36:	d00b      	beq.n	5f50 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5f38:	9b01      	ldr	r3, [sp, #4]
    5f3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f40:	00db      	lsls	r3, r3, #3
    5f42:	2120      	movs	r1, #32
    5f44:	fa01 f303 	lsl.w	r3, r1, r3
    5f48:	431a      	orrs	r2, r3
    5f4a:	9b01      	ldr	r3, [sp, #4]
    5f4c:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5f4e:	e00b      	b.n	5f68 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5f50:	9b01      	ldr	r3, [sp, #4]
    5f52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f54:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f58:	00db      	lsls	r3, r3, #3
    5f5a:	2120      	movs	r1, #32
    5f5c:	fa01 f303 	lsl.w	r3, r1, r3
    5f60:	43db      	mvns	r3, r3
    5f62:	401a      	ands	r2, r3
    5f64:	9b01      	ldr	r3, [sp, #4]
    5f66:	665a      	str	r2, [r3, #100]	; 0x64
}
    5f68:	bf00      	nop
    5f6a:	b002      	add	sp, #8
    5f6c:	4770      	bx	lr

00005f6e <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    5f6e:	b082      	sub	sp, #8
    5f70:	9001      	str	r0, [sp, #4]
    5f72:	460b      	mov	r3, r1
    5f74:	f88d 3003 	strb.w	r3, [sp, #3]
    5f78:	4613      	mov	r3, r2
    5f7a:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5f7e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5f82:	2b00      	cmp	r3, #0
    5f84:	d00b      	beq.n	5f9e <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5f86:	9b01      	ldr	r3, [sp, #4]
    5f88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f8e:	00db      	lsls	r3, r3, #3
    5f90:	2180      	movs	r1, #128	; 0x80
    5f92:	fa01 f303 	lsl.w	r3, r1, r3
    5f96:	431a      	orrs	r2, r3
    5f98:	9b01      	ldr	r3, [sp, #4]
    5f9a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5f9c:	e00b      	b.n	5fb6 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5f9e:	9b01      	ldr	r3, [sp, #4]
    5fa0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5fa2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5fa6:	00db      	lsls	r3, r3, #3
    5fa8:	2180      	movs	r1, #128	; 0x80
    5faa:	fa01 f303 	lsl.w	r3, r1, r3
    5fae:	43db      	mvns	r3, r3
    5fb0:	401a      	ands	r2, r3
    5fb2:	9b01      	ldr	r3, [sp, #4]
    5fb4:	665a      	str	r2, [r3, #100]	; 0x64
}
    5fb6:	bf00      	nop
    5fb8:	b002      	add	sp, #8
    5fba:	4770      	bx	lr

00005fbc <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    5fbc:	b082      	sub	sp, #8
    5fbe:	9001      	str	r0, [sp, #4]
    5fc0:	460b      	mov	r3, r1
    5fc2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    5fc6:	9b01      	ldr	r3, [sp, #4]
    5fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    5fca:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    5fce:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5fd6:	431a      	orrs	r2, r3
    5fd8:	9b01      	ldr	r3, [sp, #4]
    5fda:	669a      	str	r2, [r3, #104]	; 0x68
}
    5fdc:	bf00      	nop
    5fde:	b002      	add	sp, #8
    5fe0:	4770      	bx	lr

00005fe2 <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    5fe2:	b082      	sub	sp, #8
    5fe4:	9001      	str	r0, [sp, #4]
    5fe6:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    5fe8:	9b01      	ldr	r3, [sp, #4]
    5fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    5fec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    5ff0:	9b00      	ldr	r3, [sp, #0]
    5ff2:	b2db      	uxtb	r3, r3
    5ff4:	019b      	lsls	r3, r3, #6
    5ff6:	b2db      	uxtb	r3, r3
    5ff8:	431a      	orrs	r2, r3
    5ffa:	9b01      	ldr	r3, [sp, #4]
    5ffc:	669a      	str	r2, [r3, #104]	; 0x68
}
    5ffe:	bf00      	nop
    6000:	b002      	add	sp, #8
    6002:	4770      	bx	lr

00006004 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    6004:	b082      	sub	sp, #8
    6006:	9001      	str	r0, [sp, #4]
    6008:	460b      	mov	r3, r1
    600a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    600e:	9b01      	ldr	r3, [sp, #4]
    6010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    6012:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    6016:	f89d 3003 	ldrb.w	r3, [sp, #3]
    601a:	041b      	lsls	r3, r3, #16
    601c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    6020:	431a      	orrs	r2, r3
    6022:	9b01      	ldr	r3, [sp, #4]
    6024:	669a      	str	r2, [r3, #104]	; 0x68
}
    6026:	bf00      	nop
    6028:	b002      	add	sp, #8
    602a:	4770      	bx	lr

0000602c <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    602c:	b082      	sub	sp, #8
    602e:	9001      	str	r0, [sp, #4]
    6030:	460b      	mov	r3, r1
    6032:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    6036:	9b01      	ldr	r3, [sp, #4]
    6038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    603a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    603e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6042:	2a00      	cmp	r2, #0
    6044:	d001      	beq.n	604a <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    6046:	2240      	movs	r2, #64	; 0x40
    6048:	e000      	b.n	604c <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    604a:	2200      	movs	r2, #0
    604c:	431a      	orrs	r2, r3
    604e:	9b01      	ldr	r3, [sp, #4]
    6050:	66da      	str	r2, [r3, #108]	; 0x6c
}
    6052:	bf00      	nop
    6054:	b002      	add	sp, #8
    6056:	4770      	bx	lr

00006058 <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    6058:	b082      	sub	sp, #8
    605a:	9001      	str	r0, [sp, #4]
    605c:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    605e:	9b01      	ldr	r3, [sp, #4]
    6060:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    6062:	9b00      	ldr	r3, [sp, #0]
    6064:	43db      	mvns	r3, r3
    6066:	401a      	ands	r2, r3
    6068:	9b01      	ldr	r3, [sp, #4]
    606a:	66da      	str	r2, [r3, #108]	; 0x6c
}
    606c:	bf00      	nop
    606e:	b002      	add	sp, #8
    6070:	4770      	bx	lr

00006072 <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    6072:	b082      	sub	sp, #8
    6074:	9001      	str	r0, [sp, #4]
    6076:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    6078:	9b01      	ldr	r3, [sp, #4]
    607a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    607c:	9b00      	ldr	r3, [sp, #0]
    607e:	43db      	mvns	r3, r3
    6080:	401a      	ands	r2, r3
    6082:	9b00      	ldr	r3, [sp, #0]
    6084:	431a      	orrs	r2, r3
    6086:	9b01      	ldr	r3, [sp, #4]
    6088:	66da      	str	r2, [r3, #108]	; 0x6c
}
    608a:	bf00      	nop
    608c:	b002      	add	sp, #8
    608e:	4770      	bx	lr

00006090 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    6090:	b084      	sub	sp, #16
    6092:	9003      	str	r0, [sp, #12]
    6094:	460b      	mov	r3, r1
    6096:	9201      	str	r2, [sp, #4]
    6098:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    609c:	9b01      	ldr	r3, [sp, #4]
    609e:	2b00      	cmp	r3, #0
    60a0:	d10b      	bne.n	60ba <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    60a2:	9b03      	ldr	r3, [sp, #12]
    60a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    60a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    60aa:	2101      	movs	r1, #1
    60ac:	fa01 f303 	lsl.w	r3, r1, r3
    60b0:	43db      	mvns	r3, r3
    60b2:	401a      	ands	r2, r3
    60b4:	9b03      	ldr	r3, [sp, #12]
    60b6:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    60b8:	e009      	b.n	60ce <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    60ba:	9b03      	ldr	r3, [sp, #12]
    60bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    60be:	f89d 300b 	ldrb.w	r3, [sp, #11]
    60c2:	2101      	movs	r1, #1
    60c4:	fa01 f303 	lsl.w	r3, r1, r3
    60c8:	431a      	orrs	r2, r3
    60ca:	9b03      	ldr	r3, [sp, #12]
    60cc:	671a      	str	r2, [r3, #112]	; 0x70
}
    60ce:	bf00      	nop
    60d0:	b004      	add	sp, #16
    60d2:	4770      	bx	lr

000060d4 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    60d4:	b082      	sub	sp, #8
    60d6:	9001      	str	r0, [sp, #4]
    60d8:	460b      	mov	r3, r1
    60da:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    60de:	9b01      	ldr	r3, [sp, #4]
    60e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    60e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    60e6:	fa22 f303 	lsr.w	r3, r2, r3
    60ea:	f003 0301 	and.w	r3, r3, #1
    60ee:	2b01      	cmp	r3, #1
    60f0:	bf0c      	ite	eq
    60f2:	2301      	moveq	r3, #1
    60f4:	2300      	movne	r3, #0
    60f6:	b2db      	uxtb	r3, r3
}
    60f8:	4618      	mov	r0, r3
    60fa:	b002      	add	sp, #8
    60fc:	4770      	bx	lr

000060fe <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    60fe:	b082      	sub	sp, #8
    6100:	9001      	str	r0, [sp, #4]
    6102:	460b      	mov	r3, r1
    6104:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    6108:	9b01      	ldr	r3, [sp, #4]
    610a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    610e:	f023 021f 	bic.w	r2, r3, #31
    6112:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6116:	f003 031f 	and.w	r3, r3, #31
    611a:	431a      	orrs	r2, r3
    611c:	9b01      	ldr	r3, [sp, #4]
    611e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    6122:	bf00      	nop
    6124:	b002      	add	sp, #8
    6126:	4770      	bx	lr

00006128 <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    6128:	b082      	sub	sp, #8
    612a:	9001      	str	r0, [sp, #4]
    612c:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    612e:	9b01      	ldr	r3, [sp, #4]
    6130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    6134:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    6138:	9b00      	ldr	r3, [sp, #0]
    613a:	019b      	lsls	r3, r3, #6
    613c:	b2db      	uxtb	r3, r3
    613e:	431a      	orrs	r2, r3
    6140:	9b01      	ldr	r3, [sp, #4]
    6142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    6146:	bf00      	nop
    6148:	b002      	add	sp, #8
    614a:	4770      	bx	lr

0000614c <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    614c:	b082      	sub	sp, #8
    614e:	9001      	str	r0, [sp, #4]
    6150:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    6152:	9b01      	ldr	r3, [sp, #4]
    6154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    6158:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    615c:	9b00      	ldr	r3, [sp, #0]
    615e:	02db      	lsls	r3, r3, #11
    6160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    6164:	431a      	orrs	r2, r3
    6166:	9b01      	ldr	r3, [sp, #4]
    6168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    616c:	bf00      	nop
    616e:	b002      	add	sp, #8
    6170:	4770      	bx	lr

00006172 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    6172:	b082      	sub	sp, #8
    6174:	9001      	str	r0, [sp, #4]
    6176:	460b      	mov	r3, r1
    6178:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    617c:	9b01      	ldr	r3, [sp, #4]
    617e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6182:	f023 0301 	bic.w	r3, r3, #1
    6186:	f89d 2003 	ldrb.w	r2, [sp, #3]
    618a:	2a00      	cmp	r2, #0
    618c:	d001      	beq.n	6192 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    618e:	2201      	movs	r2, #1
    6190:	e000      	b.n	6194 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    6192:	2200      	movs	r2, #0
    6194:	431a      	orrs	r2, r3
    6196:	9b01      	ldr	r3, [sp, #4]
    6198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    619c:	bf00      	nop
    619e:	b002      	add	sp, #8
    61a0:	4770      	bx	lr

000061a2 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    61a2:	b082      	sub	sp, #8
    61a4:	9001      	str	r0, [sp, #4]
    61a6:	460b      	mov	r3, r1
    61a8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    61ac:	9b01      	ldr	r3, [sp, #4]
    61ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    61b2:	f023 0304 	bic.w	r3, r3, #4
    61b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    61ba:	2a00      	cmp	r2, #0
    61bc:	d001      	beq.n	61c2 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    61be:	2204      	movs	r2, #4
    61c0:	e000      	b.n	61c4 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    61c2:	2200      	movs	r2, #0
    61c4:	431a      	orrs	r2, r3
    61c6:	9b01      	ldr	r3, [sp, #4]
    61c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    61cc:	bf00      	nop
    61ce:	b002      	add	sp, #8
    61d0:	4770      	bx	lr

000061d2 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    61d2:	b082      	sub	sp, #8
    61d4:	9001      	str	r0, [sp, #4]
    61d6:	460b      	mov	r3, r1
    61d8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    61dc:	9b01      	ldr	r3, [sp, #4]
    61de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    61e2:	f023 0310 	bic.w	r3, r3, #16
    61e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    61ea:	2a00      	cmp	r2, #0
    61ec:	d001      	beq.n	61f2 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    61ee:	2210      	movs	r2, #16
    61f0:	e000      	b.n	61f4 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    61f2:	2200      	movs	r2, #0
    61f4:	431a      	orrs	r2, r3
    61f6:	9b01      	ldr	r3, [sp, #4]
    61f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    61fc:	bf00      	nop
    61fe:	b002      	add	sp, #8
    6200:	4770      	bx	lr

00006202 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    6202:	b082      	sub	sp, #8
    6204:	9001      	str	r0, [sp, #4]
    6206:	460b      	mov	r3, r1
    6208:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    620c:	9b01      	ldr	r3, [sp, #4]
    620e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6212:	f023 0320 	bic.w	r3, r3, #32
    6216:	f89d 2003 	ldrb.w	r2, [sp, #3]
    621a:	2a00      	cmp	r2, #0
    621c:	d001      	beq.n	6222 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    621e:	2220      	movs	r2, #32
    6220:	e000      	b.n	6224 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    6222:	2200      	movs	r2, #0
    6224:	431a      	orrs	r2, r3
    6226:	9b01      	ldr	r3, [sp, #4]
    6228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    622c:	bf00      	nop
    622e:	b002      	add	sp, #8
    6230:	4770      	bx	lr

00006232 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    6232:	b082      	sub	sp, #8
    6234:	9001      	str	r0, [sp, #4]
    6236:	460b      	mov	r3, r1
    6238:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    623c:	9b01      	ldr	r3, [sp, #4]
    623e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6246:	f89d 2003 	ldrb.w	r2, [sp, #3]
    624a:	2a00      	cmp	r2, #0
    624c:	d001      	beq.n	6252 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    624e:	2280      	movs	r2, #128	; 0x80
    6250:	e000      	b.n	6254 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    6252:	2200      	movs	r2, #0
    6254:	431a      	orrs	r2, r3
    6256:	9b01      	ldr	r3, [sp, #4]
    6258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    625c:	bf00      	nop
    625e:	b002      	add	sp, #8
    6260:	4770      	bx	lr

00006262 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    6262:	b082      	sub	sp, #8
    6264:	9001      	str	r0, [sp, #4]
    6266:	460b      	mov	r3, r1
    6268:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    626c:	9b01      	ldr	r3, [sp, #4]
    626e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6276:	f89d 2003 	ldrb.w	r2, [sp, #3]
    627a:	2a00      	cmp	r2, #0
    627c:	d002      	beq.n	6284 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    627e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6282:	e000      	b.n	6286 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    6284:	2200      	movs	r2, #0
    6286:	431a      	orrs	r2, r3
    6288:	9b01      	ldr	r3, [sp, #4]
    628a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    628e:	bf00      	nop
    6290:	b002      	add	sp, #8
    6292:	4770      	bx	lr

00006294 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    6294:	b082      	sub	sp, #8
    6296:	9001      	str	r0, [sp, #4]
    6298:	460b      	mov	r3, r1
    629a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    629e:	9b01      	ldr	r3, [sp, #4]
    62a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    62a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    62a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    62ac:	2a00      	cmp	r2, #0
    62ae:	d002      	beq.n	62b6 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    62b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    62b4:	e000      	b.n	62b8 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    62b6:	2200      	movs	r2, #0
    62b8:	431a      	orrs	r2, r3
    62ba:	9b01      	ldr	r3, [sp, #4]
    62bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    62c0:	bf00      	nop
    62c2:	b002      	add	sp, #8
    62c4:	4770      	bx	lr

000062c6 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    62c6:	b082      	sub	sp, #8
    62c8:	9001      	str	r0, [sp, #4]
    62ca:	460b      	mov	r3, r1
    62cc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    62d0:	9b01      	ldr	r3, [sp, #4]
    62d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    62d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    62da:	f89d 2003 	ldrb.w	r2, [sp, #3]
    62de:	2a00      	cmp	r2, #0
    62e0:	d002      	beq.n	62e8 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    62e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    62e6:	e000      	b.n	62ea <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    62e8:	2200      	movs	r2, #0
    62ea:	431a      	orrs	r2, r3
    62ec:	9b01      	ldr	r3, [sp, #4]
    62ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    62f2:	bf00      	nop
    62f4:	b002      	add	sp, #8
    62f6:	4770      	bx	lr

000062f8 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    62f8:	b082      	sub	sp, #8
    62fa:	9001      	str	r0, [sp, #4]
    62fc:	460b      	mov	r3, r1
    62fe:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    6302:	9b01      	ldr	r3, [sp, #4]
    6304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6308:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    630c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6310:	2a00      	cmp	r2, #0
    6312:	d002      	beq.n	631a <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    6314:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6318:	e000      	b.n	631c <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    631a:	2200      	movs	r2, #0
    631c:	431a      	orrs	r2, r3
    631e:	9b01      	ldr	r3, [sp, #4]
    6320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6324:	bf00      	nop
    6326:	b002      	add	sp, #8
    6328:	4770      	bx	lr

0000632a <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    632a:	b082      	sub	sp, #8
    632c:	9001      	str	r0, [sp, #4]
    632e:	460b      	mov	r3, r1
    6330:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    6334:	9b01      	ldr	r3, [sp, #4]
    6336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    633a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    633e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6342:	2a00      	cmp	r2, #0
    6344:	d002      	beq.n	634c <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    6346:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    634a:	e000      	b.n	634e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    634c:	2200      	movs	r2, #0
    634e:	431a      	orrs	r2, r3
    6350:	9b01      	ldr	r3, [sp, #4]
    6352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6356:	bf00      	nop
    6358:	b002      	add	sp, #8
    635a:	4770      	bx	lr

0000635c <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    635c:	b082      	sub	sp, #8
    635e:	9001      	str	r0, [sp, #4]
    6360:	460b      	mov	r3, r1
    6362:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    6366:	9b01      	ldr	r3, [sp, #4]
    6368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    636c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6370:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6374:	2a00      	cmp	r2, #0
    6376:	d002      	beq.n	637e <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    6378:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    637c:	e000      	b.n	6380 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    637e:	2200      	movs	r2, #0
    6380:	431a      	orrs	r2, r3
    6382:	9b01      	ldr	r3, [sp, #4]
    6384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6388:	bf00      	nop
    638a:	b002      	add	sp, #8
    638c:	4770      	bx	lr

0000638e <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    638e:	b082      	sub	sp, #8
    6390:	9001      	str	r0, [sp, #4]
    6392:	460b      	mov	r3, r1
    6394:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    6398:	9b01      	ldr	r3, [sp, #4]
    639a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    639e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    63a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    63a6:	2a00      	cmp	r2, #0
    63a8:	d002      	beq.n	63b0 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    63aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    63ae:	e000      	b.n	63b2 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    63b0:	2200      	movs	r2, #0
    63b2:	431a      	orrs	r2, r3
    63b4:	9b01      	ldr	r3, [sp, #4]
    63b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    63ba:	bf00      	nop
    63bc:	b002      	add	sp, #8
    63be:	4770      	bx	lr

000063c0 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    63c0:	b082      	sub	sp, #8
    63c2:	9001      	str	r0, [sp, #4]
    63c4:	460b      	mov	r3, r1
    63c6:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    63ca:	9b01      	ldr	r3, [sp, #4]
    63cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    63d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    63d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    63d8:	2a00      	cmp	r2, #0
    63da:	d002      	beq.n	63e2 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    63dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    63e0:	e000      	b.n	63e4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    63e2:	2200      	movs	r2, #0
    63e4:	431a      	orrs	r2, r3
    63e6:	9b01      	ldr	r3, [sp, #4]
    63e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    63ec:	bf00      	nop
    63ee:	b002      	add	sp, #8
    63f0:	4770      	bx	lr

000063f2 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    63f2:	b082      	sub	sp, #8
    63f4:	9001      	str	r0, [sp, #4]
    63f6:	460b      	mov	r3, r1
    63f8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    63fc:	9b01      	ldr	r3, [sp, #4]
    63fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6402:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    6406:	f89d 2003 	ldrb.w	r2, [sp, #3]
    640a:	2a00      	cmp	r2, #0
    640c:	d002      	beq.n	6414 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    640e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    6412:	e000      	b.n	6416 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    6414:	2200      	movs	r2, #0
    6416:	431a      	orrs	r2, r3
    6418:	9b01      	ldr	r3, [sp, #4]
    641a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    641e:	bf00      	nop
    6420:	b002      	add	sp, #8
    6422:	4770      	bx	lr

00006424 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    6424:	b084      	sub	sp, #16
    6426:	9001      	str	r0, [sp, #4]
    6428:	460b      	mov	r3, r1
    642a:	f88d 3003 	strb.w	r3, [sp, #3]
    642e:	4613      	mov	r3, r2
    6430:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    6434:	9b01      	ldr	r3, [sp, #4]
    6436:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    6438:	f89d 3003 	ldrb.w	r3, [sp, #3]
    643c:	fa22 f303 	lsr.w	r3, r2, r3
    6440:	b2db      	uxtb	r3, r3
    6442:	f003 0301 	and.w	r3, r3, #1
    6446:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    644a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    644e:	2b00      	cmp	r3, #0
    6450:	bf14      	ite	ne
    6452:	2301      	movne	r3, #1
    6454:	2300      	moveq	r3, #0
    6456:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    645a:	f89d 2002 	ldrb.w	r2, [sp, #2]
    645e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6462:	429a      	cmp	r2, r3
    6464:	d00d      	beq.n	6482 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    6466:	9b01      	ldr	r3, [sp, #4]
    6468:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    646c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6470:	3308      	adds	r3, #8
    6472:	2101      	movs	r1, #1
    6474:	fa01 f303 	lsl.w	r3, r1, r3
    6478:	431a      	orrs	r2, r3
    647a:	9b01      	ldr	r3, [sp, #4]
    647c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    6480:	e00d      	b.n	649e <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    6482:	9b01      	ldr	r3, [sp, #4]
    6484:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    6488:	f89d 3003 	ldrb.w	r3, [sp, #3]
    648c:	3308      	adds	r3, #8
    648e:	2101      	movs	r1, #1
    6490:	fa01 f303 	lsl.w	r3, r1, r3
    6494:	43db      	mvns	r3, r3
    6496:	401a      	ands	r2, r3
    6498:	9b01      	ldr	r3, [sp, #4]
    649a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    649e:	bf00      	nop
    64a0:	b004      	add	sp, #16
    64a2:	4770      	bx	lr

000064a4 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    64a4:	b082      	sub	sp, #8
    64a6:	9001      	str	r0, [sp, #4]
    64a8:	460b      	mov	r3, r1
    64aa:	f88d 3003 	strb.w	r3, [sp, #3]
    64ae:	4613      	mov	r3, r2
    64b0:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    64b4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    64b8:	2b00      	cmp	r3, #0
    64ba:	d00c      	beq.n	64d6 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    64bc:	9b01      	ldr	r3, [sp, #4]
    64be:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    64c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    64c6:	2101      	movs	r1, #1
    64c8:	fa01 f303 	lsl.w	r3, r1, r3
    64cc:	431a      	orrs	r2, r3
    64ce:	9b01      	ldr	r3, [sp, #4]
    64d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    64d4:	e00c      	b.n	64f0 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    64d6:	9b01      	ldr	r3, [sp, #4]
    64d8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    64dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    64e0:	2101      	movs	r1, #1
    64e2:	fa01 f303 	lsl.w	r3, r1, r3
    64e6:	43db      	mvns	r3, r3
    64e8:	401a      	ands	r2, r3
    64ea:	9b01      	ldr	r3, [sp, #4]
    64ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    64f0:	bf00      	nop
    64f2:	b002      	add	sp, #8
    64f4:	4770      	bx	lr

000064f6 <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    64f6:	b082      	sub	sp, #8
    64f8:	9001      	str	r0, [sp, #4]
    64fa:	460b      	mov	r3, r1
    64fc:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    6500:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    6504:	9b01      	ldr	r3, [sp, #4]
    6506:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    650a:	bf00      	nop
    650c:	b002      	add	sp, #8
    650e:	4770      	bx	lr

00006510 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    6510:	b082      	sub	sp, #8
    6512:	9001      	str	r0, [sp, #4]
    6514:	460b      	mov	r3, r1
    6516:	f88d 3003 	strb.w	r3, [sp, #3]
    651a:	4613      	mov	r3, r2
    651c:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    6520:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6524:	2b00      	cmp	r3, #0
    6526:	d00c      	beq.n	6542 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    6528:	9b01      	ldr	r3, [sp, #4]
    652a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    652e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6532:	2101      	movs	r1, #1
    6534:	fa01 f303 	lsl.w	r3, r1, r3
    6538:	431a      	orrs	r2, r3
    653a:	9b01      	ldr	r3, [sp, #4]
    653c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    6540:	e00c      	b.n	655c <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    6542:	9b01      	ldr	r3, [sp, #4]
    6544:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6548:	f89d 3003 	ldrb.w	r3, [sp, #3]
    654c:	2101      	movs	r1, #1
    654e:	fa01 f303 	lsl.w	r3, r1, r3
    6552:	43db      	mvns	r3, r3
    6554:	401a      	ands	r2, r3
    6556:	9b01      	ldr	r3, [sp, #4]
    6558:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    655c:	bf00      	nop
    655e:	b002      	add	sp, #8
    6560:	4770      	bx	lr

00006562 <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    6562:	b082      	sub	sp, #8
    6564:	9001      	str	r0, [sp, #4]
    6566:	460b      	mov	r3, r1
    6568:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    656c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6570:	2b00      	cmp	r3, #0
    6572:	d008      	beq.n	6586 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    6574:	9b01      	ldr	r3, [sp, #4]
    6576:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    657a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    657e:	9b01      	ldr	r3, [sp, #4]
    6580:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    6584:	e007      	b.n	6596 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    6586:	9b01      	ldr	r3, [sp, #4]
    6588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    658c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6590:	9b01      	ldr	r3, [sp, #4]
    6592:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    6596:	bf00      	nop
    6598:	b002      	add	sp, #8
    659a:	4770      	bx	lr

0000659c <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    659c:	b082      	sub	sp, #8
    659e:	9001      	str	r0, [sp, #4]
    65a0:	460b      	mov	r3, r1
    65a2:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    65a6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    65b0:	bf00      	nop
    65b2:	b002      	add	sp, #8
    65b4:	4770      	bx	lr

000065b6 <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    65b6:	b082      	sub	sp, #8
    65b8:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    65ba:	9b01      	ldr	r3, [sp, #4]
    65bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    65c0:	b29b      	uxth	r3, r3
}
    65c2:	4618      	mov	r0, r3
    65c4:	b002      	add	sp, #8
    65c6:	4770      	bx	lr

000065c8 <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    65c8:	b082      	sub	sp, #8
    65ca:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    65cc:	9b01      	ldr	r3, [sp, #4]
    65ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    65d0:	b29b      	uxth	r3, r3
}
    65d2:	4618      	mov	r0, r3
    65d4:	b002      	add	sp, #8
    65d6:	4770      	bx	lr

000065d8 <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    65d8:	b500      	push	{lr}
    65da:	b085      	sub	sp, #20
    65dc:	9001      	str	r0, [sp, #4]
    65de:	460b      	mov	r3, r1
    65e0:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    65e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    65e8:	085b      	lsrs	r3, r3, #1
    65ea:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    65ee:	9b01      	ldr	r3, [sp, #4]
    65f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    65f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    65f6:	00db      	lsls	r3, r3, #3
    65f8:	2101      	movs	r1, #1
    65fa:	fa01 f303 	lsl.w	r3, r1, r3
    65fe:	401a      	ands	r2, r3
    6600:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6604:	00db      	lsls	r3, r3, #3
    6606:	fa22 f303 	lsr.w	r3, r2, r3
    660a:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    660e:	9b01      	ldr	r3, [sp, #4]
    6610:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    6612:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6616:	00db      	lsls	r3, r3, #3
    6618:	2180      	movs	r1, #128	; 0x80
    661a:	fa01 f303 	lsl.w	r3, r1, r3
    661e:	401a      	ands	r2, r3
    6620:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6624:	00db      	lsls	r3, r3, #3
    6626:	fa22 f303 	lsr.w	r3, r2, r3
    662a:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    662e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    6632:	2b80      	cmp	r3, #128	; 0x80
    6634:	d101      	bne.n	663a <Ftm_Pwm_Ip_GetChannelMode+0x62>
    6636:	2301      	movs	r3, #1
    6638:	e000      	b.n	663c <Ftm_Pwm_Ip_GetChannelMode+0x64>
    663a:	2300      	movs	r3, #0
    663c:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    6640:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6644:	4619      	mov	r1, r3
    6646:	9801      	ldr	r0, [sp, #4]
    6648:	f7ff f99b 	bl	5982 <Ftm_Pwm_Ip_GetChnEdgeLevel>
    664c:	4603      	mov	r3, r0
    664e:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    6652:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6656:	4619      	mov	r1, r3
    6658:	9801      	ldr	r0, [sp, #4]
    665a:	f7ff fa2a 	bl	5ab2 <Ftm_Pwm_Ip_GetChnMode>
    665e:	4603      	mov	r3, r0
    6660:	009b      	lsls	r3, r3, #2
    6662:	b2da      	uxtb	r2, r3
    6664:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6668:	4313      	orrs	r3, r2
    666a:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    666e:	9801      	ldr	r0, [sp, #4]
    6670:	f7ff f923 	bl	58ba <Ftm_Pwm_Ip_GetCpwms>
    6674:	4603      	mov	r3, r0
    6676:	b2db      	uxtb	r3, r3
    6678:	011b      	lsls	r3, r3, #4
    667a:	b2da      	uxtb	r2, r3
    667c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6680:	4313      	orrs	r3, r2
    6682:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    6686:	f89d 300a 	ldrb.w	r3, [sp, #10]
    668a:	015b      	lsls	r3, r3, #5
    668c:	b2da      	uxtb	r2, r3
    668e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6692:	4313      	orrs	r3, r2
    6694:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    6698:	f89d 3009 	ldrb.w	r3, [sp, #9]
    669c:	019b      	lsls	r3, r3, #6
    669e:	b2da      	uxtb	r2, r3
    66a0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    66a4:	4313      	orrs	r3, r2
    66a6:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    66aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
    66ae:	2b62      	cmp	r3, #98	; 0x62
    66b0:	d055      	beq.n	675e <Ftm_Pwm_Ip_GetChannelMode+0x186>
    66b2:	2b62      	cmp	r3, #98	; 0x62
    66b4:	dc59      	bgt.n	676a <Ftm_Pwm_Ip_GetChannelMode+0x192>
    66b6:	2b22      	cmp	r3, #34	; 0x22
    66b8:	dc3c      	bgt.n	6734 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    66ba:	2b09      	cmp	r3, #9
    66bc:	db55      	blt.n	676a <Ftm_Pwm_Ip_GetChannelMode+0x192>
    66be:	3b09      	subs	r3, #9
    66c0:	2b19      	cmp	r3, #25
    66c2:	d852      	bhi.n	676a <Ftm_Pwm_Ip_GetChannelMode+0x192>
    66c4:	a201      	add	r2, pc, #4	; (adr r2, 66cc <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    66c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    66ca:	bf00      	nop
    66cc:	00006741 	.word	0x00006741
    66d0:	0000673b 	.word	0x0000673b
    66d4:	0000676b 	.word	0x0000676b
    66d8:	0000676b 	.word	0x0000676b
    66dc:	0000676b 	.word	0x0000676b
    66e0:	0000676b 	.word	0x0000676b
    66e4:	0000676b 	.word	0x0000676b
    66e8:	0000676b 	.word	0x0000676b
    66ec:	0000674d 	.word	0x0000674d
    66f0:	00006747 	.word	0x00006747
    66f4:	0000676b 	.word	0x0000676b
    66f8:	0000676b 	.word	0x0000676b
    66fc:	0000676b 	.word	0x0000676b
    6700:	0000676b 	.word	0x0000676b
    6704:	0000676b 	.word	0x0000676b
    6708:	0000676b 	.word	0x0000676b
    670c:	0000676b 	.word	0x0000676b
    6710:	0000676b 	.word	0x0000676b
    6714:	0000676b 	.word	0x0000676b
    6718:	0000676b 	.word	0x0000676b
    671c:	0000676b 	.word	0x0000676b
    6720:	0000676b 	.word	0x0000676b
    6724:	0000676b 	.word	0x0000676b
    6728:	0000676b 	.word	0x0000676b
    672c:	00006759 	.word	0x00006759
    6730:	00006753 	.word	0x00006753
    6734:	2b61      	cmp	r3, #97	; 0x61
    6736:	d015      	beq.n	6764 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    6738:	e017      	b.n	676a <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    673a:	230a      	movs	r3, #10
    673c:	9303      	str	r3, [sp, #12]
            break;
    673e:	e017      	b.n	6770 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    6740:	2309      	movs	r3, #9
    6742:	9303      	str	r3, [sp, #12]
            break;
    6744:	e014      	b.n	6770 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    6746:	2312      	movs	r3, #18
    6748:	9303      	str	r3, [sp, #12]
            break;
    674a:	e011      	b.n	6770 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    674c:	2311      	movs	r3, #17
    674e:	9303      	str	r3, [sp, #12]
            break;
    6750:	e00e      	b.n	6770 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    6752:	2322      	movs	r3, #34	; 0x22
    6754:	9303      	str	r3, [sp, #12]
            break;
    6756:	e00b      	b.n	6770 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    6758:	2321      	movs	r3, #33	; 0x21
    675a:	9303      	str	r3, [sp, #12]
            break;
    675c:	e008      	b.n	6770 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    675e:	2362      	movs	r3, #98	; 0x62
    6760:	9303      	str	r3, [sp, #12]
            break;
    6762:	e005      	b.n	6770 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    6764:	2361      	movs	r3, #97	; 0x61
    6766:	9303      	str	r3, [sp, #12]
            break;
    6768:	e002      	b.n	6770 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    676a:	23ff      	movs	r3, #255	; 0xff
    676c:	9303      	str	r3, [sp, #12]
            break;
    676e:	bf00      	nop
    }

    return ChMode; 
    6770:	9b03      	ldr	r3, [sp, #12]
}
    6772:	4618      	mov	r0, r3
    6774:	b005      	add	sp, #20
    6776:	f85d fb04 	ldr.w	pc, [sp], #4

0000677a <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    677a:	b082      	sub	sp, #8
    677c:	9001      	str	r0, [sp, #4]
    677e:	460b      	mov	r3, r1
    6780:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    6784:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6788:	2b00      	cmp	r3, #0
    678a:	d006      	beq.n	679a <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    678c:	9b01      	ldr	r3, [sp, #4]
    678e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6790:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    6794:	9b01      	ldr	r3, [sp, #4]
    6796:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    6798:	e00b      	b.n	67b2 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    679a:	9b01      	ldr	r3, [sp, #4]
    679c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    67a2:	2b00      	cmp	r3, #0
    67a4:	d005      	beq.n	67b2 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    67a6:	9b01      	ldr	r3, [sp, #4]
    67a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    67aa:	f043 0204 	orr.w	r2, r3, #4
    67ae:	9b01      	ldr	r3, [sp, #4]
    67b0:	655a      	str	r2, [r3, #84]	; 0x54
}
    67b2:	bf00      	nop
    67b4:	b002      	add	sp, #8
    67b6:	4770      	bx	lr

000067b8 <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    67b8:	b500      	push	{lr}
    67ba:	b085      	sub	sp, #20
    67bc:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    67be:	2100      	movs	r1, #0
    67c0:	9801      	ldr	r0, [sp, #4]
    67c2:	f7ff ffda 	bl	677a <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    67c6:	9b01      	ldr	r3, [sp, #4]
    67c8:	681a      	ldr	r2, [r3, #0]
    67ca:	9b01      	ldr	r3, [sp, #4]
    67cc:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    67ce:	9b01      	ldr	r3, [sp, #4]
    67d0:	2200      	movs	r2, #0
    67d2:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    67d4:	9b01      	ldr	r3, [sp, #4]
    67d6:	2200      	movs	r2, #0
    67d8:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    67da:	9b01      	ldr	r3, [sp, #4]
    67dc:	2200      	movs	r2, #0
    67de:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    67e0:	9b01      	ldr	r3, [sp, #4]
    67e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    67e4:	9b01      	ldr	r3, [sp, #4]
    67e6:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    67e8:	9b01      	ldr	r3, [sp, #4]
    67ea:	2204      	movs	r2, #4
    67ec:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    67ee:	9b01      	ldr	r3, [sp, #4]
    67f0:	2200      	movs	r2, #0
    67f2:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    67f4:	9b01      	ldr	r3, [sp, #4]
    67f6:	2200      	movs	r2, #0
    67f8:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    67fa:	9b01      	ldr	r3, [sp, #4]
    67fc:	2200      	movs	r2, #0
    67fe:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    6800:	9b01      	ldr	r3, [sp, #4]
    6802:	2200      	movs	r2, #0
    6804:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    6806:	9b01      	ldr	r3, [sp, #4]
    6808:	2200      	movs	r2, #0
    680a:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    680c:	9b01      	ldr	r3, [sp, #4]
    680e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    6810:	9b01      	ldr	r3, [sp, #4]
    6812:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    6814:	9b01      	ldr	r3, [sp, #4]
    6816:	2200      	movs	r2, #0
    6818:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    681a:	9b01      	ldr	r3, [sp, #4]
    681c:	2200      	movs	r2, #0
    681e:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    6820:	9b01      	ldr	r3, [sp, #4]
    6822:	2200      	movs	r2, #0
    6824:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    6826:	9b01      	ldr	r3, [sp, #4]
    6828:	2200      	movs	r2, #0
    682a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    682e:	9b01      	ldr	r3, [sp, #4]
    6830:	2200      	movs	r2, #0
    6832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    6836:	9b01      	ldr	r3, [sp, #4]
    6838:	2200      	movs	r2, #0
    683a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    683e:	9b01      	ldr	r3, [sp, #4]
    6840:	2200      	movs	r2, #0
    6842:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    6846:	9b01      	ldr	r3, [sp, #4]
    6848:	2200      	movs	r2, #0
    684a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    684e:	9b01      	ldr	r3, [sp, #4]
    6850:	2200      	movs	r2, #0
    6852:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    6856:	9b01      	ldr	r3, [sp, #4]
    6858:	2200      	movs	r2, #0
    685a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    685e:	2300      	movs	r3, #0
    6860:	f88d 300f 	strb.w	r3, [sp, #15]
    6864:	e014      	b.n	6890 <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    6866:	f89d 300f 	ldrb.w	r3, [sp, #15]
    686a:	9a01      	ldr	r2, [sp, #4]
    686c:	3301      	adds	r3, #1
    686e:	00db      	lsls	r3, r3, #3
    6870:	4413      	add	r3, r2
    6872:	2200      	movs	r2, #0
    6874:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    6876:	f89d 300f 	ldrb.w	r3, [sp, #15]
    687a:	9a01      	ldr	r2, [sp, #4]
    687c:	3301      	adds	r3, #1
    687e:	00db      	lsls	r3, r3, #3
    6880:	4413      	add	r3, r2
    6882:	2200      	movs	r2, #0
    6884:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    6886:	f89d 300f 	ldrb.w	r3, [sp, #15]
    688a:	3301      	adds	r3, #1
    688c:	f88d 300f 	strb.w	r3, [sp, #15]
    6890:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6894:	2b07      	cmp	r3, #7
    6896:	d9e6      	bls.n	6866 <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    6898:	bf00      	nop
    689a:	bf00      	nop
    689c:	b005      	add	sp, #20
    689e:	f85d fb04 	ldr.w	pc, [sp], #4

000068a2 <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    68a2:	b084      	sub	sp, #16
    68a4:	9001      	str	r0, [sp, #4]
    68a6:	460b      	mov	r3, r1
    68a8:	f88d 3003 	strb.w	r3, [sp, #3]
    68ac:	4613      	mov	r3, r2
    68ae:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    68b2:	2300      	movs	r3, #0
    68b4:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    68b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68ba:	2b01      	cmp	r3, #1
    68bc:	d806      	bhi.n	68cc <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    68be:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68c2:	2210      	movs	r2, #16
    68c4:	fa02 f303 	lsl.w	r3, r2, r3
    68c8:	9303      	str	r3, [sp, #12]
    68ca:	e013      	b.n	68f4 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    68cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68d0:	2b05      	cmp	r3, #5
    68d2:	d807      	bhi.n	68e4 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    68d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68d8:	3b02      	subs	r3, #2
    68da:	2201      	movs	r2, #1
    68dc:	fa02 f303 	lsl.w	r3, r2, r3
    68e0:	9303      	str	r3, [sp, #12]
    68e2:	e007      	b.n	68f4 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    68e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68e8:	3b06      	subs	r3, #6
    68ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    68ee:	fa02 f303 	lsl.w	r3, r2, r3
    68f2:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    68f4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    68f8:	2b00      	cmp	r3, #0
    68fa:	d006      	beq.n	690a <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    68fc:	9b01      	ldr	r3, [sp, #4]
    68fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    6900:	9b03      	ldr	r3, [sp, #12]
    6902:	431a      	orrs	r2, r3
    6904:	9b01      	ldr	r3, [sp, #4]
    6906:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    6908:	e006      	b.n	6918 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    690a:	9b01      	ldr	r3, [sp, #4]
    690c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    690e:	9b03      	ldr	r3, [sp, #12]
    6910:	43db      	mvns	r3, r3
    6912:	401a      	ands	r2, r3
    6914:	9b01      	ldr	r3, [sp, #4]
    6916:	66da      	str	r2, [r3, #108]	; 0x6c
}
    6918:	bf00      	nop
    691a:	b004      	add	sp, #16
    691c:	4770      	bx	lr

0000691e <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    691e:	b082      	sub	sp, #8
    6920:	9001      	str	r0, [sp, #4]
    6922:	9100      	str	r1, [sp, #0]
    6924:	9b00      	ldr	r3, [sp, #0]
    6926:	2b03      	cmp	r3, #3
    6928:	d82a      	bhi.n	6980 <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    692a:	a201      	add	r2, pc, #4	; (adr r2, 6930 <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6930:	00006941 	.word	0x00006941
    6934:	0000694f 	.word	0x0000694f
    6938:	00006961 	.word	0x00006961
    693c:	00006973 	.word	0x00006973
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    6940:	9b01      	ldr	r3, [sp, #4]
    6942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6944:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    6948:	9b01      	ldr	r3, [sp, #4]
    694a:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    694c:	e019      	b.n	6982 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    694e:	9b01      	ldr	r3, [sp, #4]
    6950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6952:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6956:	f043 0220 	orr.w	r2, r3, #32
    695a:	9b01      	ldr	r3, [sp, #4]
    695c:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    695e:	e010      	b.n	6982 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    6960:	9b01      	ldr	r3, [sp, #4]
    6962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6964:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6968:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    696c:	9b01      	ldr	r3, [sp, #4]
    696e:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    6970:	e007      	b.n	6982 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    6972:	9b01      	ldr	r3, [sp, #4]
    6974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6976:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    697a:	9b01      	ldr	r3, [sp, #4]
    697c:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    697e:	e000      	b.n	6982 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    6980:	bf00      	nop
    }
}
    6982:	bf00      	nop
    6984:	b002      	add	sp, #8
    6986:	4770      	bx	lr

00006988 <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    6988:	b082      	sub	sp, #8
    698a:	9001      	str	r0, [sp, #4]
    698c:	460b      	mov	r3, r1
    698e:	f88d 3003 	strb.w	r3, [sp, #3]
    6992:	4613      	mov	r3, r2
    6994:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    6998:	f89d 3002 	ldrb.w	r3, [sp, #2]
    699c:	2b00      	cmp	r3, #0
    699e:	d00b      	beq.n	69b8 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    69a0:	9b01      	ldr	r3, [sp, #4]
    69a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    69a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    69a8:	00db      	lsls	r3, r3, #3
    69aa:	2140      	movs	r1, #64	; 0x40
    69ac:	fa01 f303 	lsl.w	r3, r1, r3
    69b0:	431a      	orrs	r2, r3
    69b2:	9b01      	ldr	r3, [sp, #4]
    69b4:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    69b6:	e00b      	b.n	69d0 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    69b8:	9b01      	ldr	r3, [sp, #4]
    69ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    69bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    69c0:	00db      	lsls	r3, r3, #3
    69c2:	2140      	movs	r1, #64	; 0x40
    69c4:	fa01 f303 	lsl.w	r3, r1, r3
    69c8:	43db      	mvns	r3, r3
    69ca:	401a      	ands	r2, r3
    69cc:	9b01      	ldr	r3, [sp, #4]
    69ce:	665a      	str	r2, [r3, #100]	; 0x64
}
    69d0:	bf00      	nop
    69d2:	b002      	add	sp, #8
    69d4:	4770      	bx	lr

000069d6 <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    69d6:	b082      	sub	sp, #8
    69d8:	9001      	str	r0, [sp, #4]
    69da:	460b      	mov	r3, r1
    69dc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    69e0:	9b01      	ldr	r3, [sp, #4]
    69e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    69e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    69e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    69ec:	2a00      	cmp	r2, #0
    69ee:	d001      	beq.n	69f4 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    69f0:	2280      	movs	r2, #128	; 0x80
    69f2:	e000      	b.n	69f6 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    69f4:	2200      	movs	r2, #0
    69f6:	431a      	orrs	r2, r3
    69f8:	9b01      	ldr	r3, [sp, #4]
    69fa:	655a      	str	r2, [r3, #84]	; 0x54
}
    69fc:	bf00      	nop
    69fe:	b002      	add	sp, #8
    6a00:	4770      	bx	lr

00006a02 <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    6a02:	b082      	sub	sp, #8
    6a04:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    6a06:	9b01      	ldr	r3, [sp, #4]
    6a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    6a0e:	9b01      	ldr	r3, [sp, #4]
    6a10:	675a      	str	r2, [r3, #116]	; 0x74
}
    6a12:	bf00      	nop
    6a14:	b002      	add	sp, #8
    6a16:	4770      	bx	lr

00006a18 <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    6a18:	b082      	sub	sp, #8
    6a1a:	9001      	str	r0, [sp, #4]
    6a1c:	460b      	mov	r3, r1
    6a1e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    6a22:	9b01      	ldr	r3, [sp, #4]
    6a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6a26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    6a2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6a2e:	021b      	lsls	r3, r3, #8
    6a30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    6a34:	431a      	orrs	r2, r3
    6a36:	9b01      	ldr	r3, [sp, #4]
    6a38:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6a3a:	bf00      	nop
    6a3c:	b002      	add	sp, #8
    6a3e:	4770      	bx	lr

00006a40 <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    6a40:	b082      	sub	sp, #8
    6a42:	9001      	str	r0, [sp, #4]
    6a44:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    6a46:	9b01      	ldr	r3, [sp, #4]
    6a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6a4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6a4e:	9a00      	ldr	r2, [sp, #0]
    6a50:	2a00      	cmp	r2, #0
    6a52:	d002      	beq.n	6a5a <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    6a54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6a58:	e000      	b.n	6a5c <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    6a5a:	2200      	movs	r2, #0
    6a5c:	431a      	orrs	r2, r3
    6a5e:	9b01      	ldr	r3, [sp, #4]
    6a60:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6a62:	bf00      	nop
    6a64:	b002      	add	sp, #8
    6a66:	4770      	bx	lr

00006a68 <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    6a68:	b086      	sub	sp, #24
    6a6a:	9003      	str	r0, [sp, #12]
    6a6c:	460b      	mov	r3, r1
    6a6e:	9201      	str	r2, [sp, #4]
    6a70:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    6a74:	9b01      	ldr	r3, [sp, #4]
    6a76:	2b00      	cmp	r3, #0
    6a78:	bf14      	ite	ne
    6a7a:	2301      	movne	r3, #1
    6a7c:	2300      	moveq	r3, #0
    6a7e:	b2db      	uxtb	r3, r3
    6a80:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    6a82:	9b03      	ldr	r3, [sp, #12]
    6a84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6a88:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6a8c:	2101      	movs	r1, #1
    6a8e:	fa01 f303 	lsl.w	r3, r1, r3
    6a92:	43db      	mvns	r3, r3
    6a94:	401a      	ands	r2, r3
    6a96:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6a9a:	9905      	ldr	r1, [sp, #20]
    6a9c:	fa01 f303 	lsl.w	r3, r1, r3
    6aa0:	431a      	orrs	r2, r3
    6aa2:	9b03      	ldr	r3, [sp, #12]
    6aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    6aa8:	bf00      	nop
    6aaa:	b006      	add	sp, #24
    6aac:	4770      	bx	lr

00006aae <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    6aae:	b084      	sub	sp, #16
    6ab0:	9001      	str	r0, [sp, #4]
    6ab2:	460b      	mov	r3, r1
    6ab4:	f88d 3003 	strb.w	r3, [sp, #3]
    6ab8:	4613      	mov	r3, r2
    6aba:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    6abe:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6ac2:	2b00      	cmp	r3, #0
    6ac4:	d001      	beq.n	6aca <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    6ac6:	2301      	movs	r3, #1
    6ac8:	e000      	b.n	6acc <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    6aca:	2300      	movs	r3, #0
    6acc:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    6ace:	9b01      	ldr	r3, [sp, #4]
    6ad0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    6ad2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6ad6:	2101      	movs	r1, #1
    6ad8:	fa01 f303 	lsl.w	r3, r1, r3
    6adc:	43db      	mvns	r3, r3
    6ade:	401a      	ands	r2, r3
    6ae0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6ae4:	9903      	ldr	r1, [sp, #12]
    6ae6:	fa01 f303 	lsl.w	r3, r1, r3
    6aea:	431a      	orrs	r2, r3
    6aec:	9b01      	ldr	r3, [sp, #4]
    6aee:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6af0:	bf00      	nop
    6af2:	b004      	add	sp, #16
    6af4:	4770      	bx	lr

00006af6 <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    6af6:	b084      	sub	sp, #16
    6af8:	9001      	str	r0, [sp, #4]
    6afa:	460b      	mov	r3, r1
    6afc:	f88d 3003 	strb.w	r3, [sp, #3]
    6b00:	4613      	mov	r3, r2
    6b02:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    6b06:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d001      	beq.n	6b12 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    6b0e:	2301      	movs	r3, #1
    6b10:	e000      	b.n	6b14 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    6b12:	2300      	movs	r3, #0
    6b14:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    6b16:	9b01      	ldr	r3, [sp, #4]
    6b18:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    6b1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b1e:	2110      	movs	r1, #16
    6b20:	fa01 f303 	lsl.w	r3, r1, r3
    6b24:	43db      	mvns	r3, r3
    6b26:	401a      	ands	r2, r3
    6b28:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b2c:	9903      	ldr	r1, [sp, #12]
    6b2e:	fa01 f303 	lsl.w	r3, r1, r3
    6b32:	011b      	lsls	r3, r3, #4
    6b34:	431a      	orrs	r2, r3
    6b36:	9b01      	ldr	r3, [sp, #4]
    6b38:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6b3a:	bf00      	nop
    6b3c:	b004      	add	sp, #16
    6b3e:	4770      	bx	lr

00006b40 <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    6b40:	b082      	sub	sp, #8
    6b42:	9001      	str	r0, [sp, #4]
    6b44:	460b      	mov	r3, r1
    6b46:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    6b4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6b52:	409a      	lsls	r2, r3
    6b54:	9b01      	ldr	r3, [sp, #4]
    6b56:	6a1b      	ldr	r3, [r3, #32]
    6b58:	431a      	orrs	r2, r3
    6b5a:	9b01      	ldr	r3, [sp, #4]
    6b5c:	621a      	str	r2, [r3, #32]
}
    6b5e:	bf00      	nop
    6b60:	b002      	add	sp, #8
    6b62:	4770      	bx	lr

00006b64 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    6b64:	b084      	sub	sp, #16
    6b66:	4603      	mov	r3, r0
    6b68:	f88d 3007 	strb.w	r3, [sp, #7]
    6b6c:	460b      	mov	r3, r1
    6b6e:	f8ad 3004 	strh.w	r3, [sp, #4]
    6b72:	4613      	mov	r3, r2
    6b74:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    6b78:	2300      	movs	r3, #0
    6b7a:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    6b7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b82:	4a17      	ldr	r2, [pc, #92]	; (6be0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    6b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6b88:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6b8c:	429a      	cmp	r2, r3
    6b8e:	d107      	bne.n	6ba0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    6b90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b94:	4a12      	ldr	r2, [pc, #72]	; (6be0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    6b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6b9a:	f8ad 300e 	strh.w	r3, [sp, #14]
    6b9e:	e019      	b.n	6bd4 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    6ba0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d104      	bne.n	6bb2 <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    6ba8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6bac:	f8ad 300e 	strh.w	r3, [sp, #14]
    6bb0:	e010      	b.n	6bd4 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    6bb2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    6bb6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6bba:	4413      	add	r3, r2
    6bbc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6bc0:	4907      	ldr	r1, [pc, #28]	; (6be0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    6bc2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    6bc6:	fb93 f1f2 	sdiv	r1, r3, r2
    6bca:	fb01 f202 	mul.w	r2, r1, r2
    6bce:	1a9b      	subs	r3, r3, r2
    6bd0:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    6bd4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    6bd8:	4618      	mov	r0, r3
    6bda:	b004      	add	sp, #16
    6bdc:	4770      	bx	lr
    6bde:	bf00      	nop
    6be0:	1fff8cfc 	.word	0x1fff8cfc

00006be4 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    6be4:	b500      	push	{lr}
    6be6:	b085      	sub	sp, #20
    6be8:	4603      	mov	r3, r0
    6bea:	9100      	str	r1, [sp, #0]
    6bec:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6bf0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bf4:	4a40      	ldr	r2, [pc, #256]	; (6cf8 <Ftm_Pwm_Ip_InitPair+0x114>)
    6bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bfa:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    6bfc:	2300      	movs	r3, #0
    6bfe:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    6c02:	2300      	movs	r3, #0
    6c04:	f88d 300a 	strb.w	r3, [sp, #10]
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    6c08:	9b00      	ldr	r3, [sp, #0]
    6c0a:	781b      	ldrb	r3, [r3, #0]
    6c0c:	005b      	lsls	r3, r3, #1
    6c0e:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    6c12:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6c16:	3301      	adds	r3, #1
    6c18:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    6c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c20:	9a00      	ldr	r2, [sp, #0]
    6c22:	7812      	ldrb	r2, [r2, #0]
    6c24:	4610      	mov	r0, r2
    6c26:	9a00      	ldr	r2, [sp, #0]
    6c28:	8951      	ldrh	r1, [r2, #10]
    6c2a:	4a34      	ldr	r2, [pc, #208]	; (6cfc <Ftm_Pwm_Ip_InitPair+0x118>)
    6c2c:	009b      	lsls	r3, r3, #2
    6c2e:	4403      	add	r3, r0
    6c30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    6c34:	9b00      	ldr	r3, [sp, #0]
    6c36:	7819      	ldrb	r1, [r3, #0]
    6c38:	9b00      	ldr	r3, [sp, #0]
    6c3a:	789b      	ldrb	r3, [r3, #2]
    6c3c:	461a      	mov	r2, r3
    6c3e:	9803      	ldr	r0, [sp, #12]
    6c40:	f7ff f920 	bl	5e84 <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    6c44:	9b00      	ldr	r3, [sp, #0]
    6c46:	789b      	ldrb	r3, [r3, #2]
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d02f      	beq.n	6cac <Ftm_Pwm_Ip_InitPair+0xc8>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    6c4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6c50:	4619      	mov	r1, r3
    6c52:	9803      	ldr	r0, [sp, #12]
    6c54:	f7ff fa3e 	bl	60d4 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    6c58:	4603      	mov	r3, r0
    6c5a:	2b01      	cmp	r3, #1
    6c5c:	d113      	bne.n	6c86 <Ftm_Pwm_Ip_InitPair+0xa2>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    6c5e:	9b00      	ldr	r3, [sp, #0]
    6c60:	685b      	ldr	r3, [r3, #4]
    6c62:	2b01      	cmp	r3, #1
    6c64:	d107      	bne.n	6c76 <Ftm_Pwm_Ip_InitPair+0x92>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    6c66:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6c6a:	2200      	movs	r2, #0
    6c6c:	4619      	mov	r1, r3
    6c6e:	9803      	ldr	r0, [sp, #12]
    6c70:	f7ff fa0e 	bl	6090 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    6c74:	e01a      	b.n	6cac <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    6c76:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6c7a:	2201      	movs	r2, #1
    6c7c:	4619      	mov	r1, r3
    6c7e:	9803      	ldr	r0, [sp, #12]
    6c80:	f7ff fa06 	bl	6090 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    6c84:	e012      	b.n	6cac <Ftm_Pwm_Ip_InitPair+0xc8>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    6c86:	9b00      	ldr	r3, [sp, #0]
    6c88:	685b      	ldr	r3, [r3, #4]
    6c8a:	2b01      	cmp	r3, #1
    6c8c:	d107      	bne.n	6c9e <Ftm_Pwm_Ip_InitPair+0xba>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    6c8e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6c92:	2201      	movs	r2, #1
    6c94:	4619      	mov	r1, r3
    6c96:	9803      	ldr	r0, [sp, #12]
    6c98:	f7ff f9fa 	bl	6090 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    6c9c:	e006      	b.n	6cac <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    6c9e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6ca2:	2200      	movs	r2, #0
    6ca4:	4619      	mov	r1, r3
    6ca6:	9803      	ldr	r0, [sp, #12]
    6ca8:	f7ff f9f2 	bl	6090 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    6cac:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6cb0:	4619      	mov	r1, r3
    6cb2:	9803      	ldr	r0, [sp, #12]
    6cb4:	f7fe fe31 	bl	591a <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    6cb8:	9b00      	ldr	r3, [sp, #0]
    6cba:	7819      	ldrb	r1, [r3, #0]
    6cbc:	9b00      	ldr	r3, [sp, #0]
    6cbe:	7a5b      	ldrb	r3, [r3, #9]
    6cc0:	461a      	mov	r2, r3
    6cc2:	9803      	ldr	r0, [sp, #12]
    6cc4:	f7ff f92c 	bl	5f20 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    6cc8:	9b00      	ldr	r3, [sp, #0]
    6cca:	7819      	ldrb	r1, [r3, #0]
    6ccc:	9b00      	ldr	r3, [sp, #0]
    6cce:	785b      	ldrb	r3, [r3, #1]
    6cd0:	461a      	mov	r2, r3
    6cd2:	9803      	ldr	r0, [sp, #12]
    6cd4:	f7ff f8fd 	bl	5ed2 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    6cd8:	9b00      	ldr	r3, [sp, #0]
    6cda:	7a1a      	ldrb	r2, [r3, #8]
    6cdc:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6ce0:	4619      	mov	r1, r3
    6ce2:	9803      	ldr	r0, [sp, #12]
    6ce4:	f7ff fddd 	bl	68a2 <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    6ce8:	2101      	movs	r1, #1
    6cea:	9803      	ldr	r0, [sp, #12]
    6cec:	f7ff f814 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    6cf0:	bf00      	nop
    6cf2:	b005      	add	sp, #20
    6cf4:	f85d fb04 	ldr.w	pc, [sp], #4
    6cf8:	0000bd44 	.word	0x0000bd44
    6cfc:	1fff8d44 	.word	0x1fff8d44

00006d00 <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    6d00:	b500      	push	{lr}
    6d02:	b085      	sub	sp, #20
    6d04:	4603      	mov	r3, r0
    6d06:	460a      	mov	r2, r1
    6d08:	f88d 3007 	strb.w	r3, [sp, #7]
    6d0c:	4613      	mov	r3, r2
    6d0e:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6d12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d16:	4a0a      	ldr	r2, [pc, #40]	; (6d40 <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    6d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d1c:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    6d1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6d22:	2200      	movs	r2, #0
    6d24:	4619      	mov	r1, r3
    6d26:	9803      	ldr	r0, [sp, #12]
    6d28:	f7fe feed 	bl	5b06 <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    6d2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6d30:	4619      	mov	r1, r3
    6d32:	9803      	ldr	r0, [sp, #12]
    6d34:	f7fe ff0a 	bl	5b4c <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    6d38:	bf00      	nop
    6d3a:	b005      	add	sp, #20
    6d3c:	f85d fb04 	ldr.w	pc, [sp], #4
    6d40:	0000bd44 	.word	0x0000bd44

00006d44 <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    6d44:	b500      	push	{lr}
    6d46:	b085      	sub	sp, #20
    6d48:	4603      	mov	r3, r0
    6d4a:	9100      	str	r1, [sp, #0]
    6d4c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6d50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d54:	4a53      	ldr	r2, [pc, #332]	; (6ea4 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    6d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d5a:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    6d5c:	9b00      	ldr	r3, [sp, #0]
    6d5e:	681b      	ldr	r3, [r3, #0]
    6d60:	2b00      	cmp	r3, #0
    6d62:	d002      	beq.n	6d6a <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    6d64:	2b01      	cmp	r3, #1
    6d66:	d04c      	beq.n	6e02 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    6d68:	e097      	b.n	6e9a <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    6d6a:	9b00      	ldr	r3, [sp, #0]
    6d6c:	699b      	ldr	r3, [r3, #24]
    6d6e:	2b00      	cmp	r3, #0
    6d70:	bf14      	ite	ne
    6d72:	2301      	movne	r3, #1
    6d74:	2300      	moveq	r3, #0
    6d76:	b2db      	uxtb	r3, r3
    6d78:	4619      	mov	r1, r3
    6d7a:	9803      	ldr	r0, [sp, #12]
    6d7c:	f7ff faa3 	bl	62c6 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    6d80:	2100      	movs	r1, #0
    6d82:	9803      	ldr	r0, [sp, #12]
    6d84:	f7ff fb1c 	bl	63c0 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    6d88:	9b00      	ldr	r3, [sp, #0]
    6d8a:	691b      	ldr	r3, [r3, #16]
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	bf14      	ite	ne
    6d90:	2301      	movne	r3, #1
    6d92:	2300      	moveq	r3, #0
    6d94:	b2db      	uxtb	r3, r3
    6d96:	4619      	mov	r1, r3
    6d98:	9803      	ldr	r0, [sp, #12]
    6d9a:	f7ff faad 	bl	62f8 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    6d9e:	2100      	movs	r1, #0
    6da0:	9803      	ldr	r0, [sp, #12]
    6da2:	f7ff fb26 	bl	63f2 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    6da6:	9b00      	ldr	r3, [sp, #0]
    6da8:	695b      	ldr	r3, [r3, #20]
    6daa:	2b00      	cmp	r3, #0
    6dac:	bf14      	ite	ne
    6dae:	2301      	movne	r3, #1
    6db0:	2300      	moveq	r3, #0
    6db2:	b2db      	uxtb	r3, r3
    6db4:	4619      	mov	r1, r3
    6db6:	9803      	ldr	r0, [sp, #12]
    6db8:	f7ff fab7 	bl	632a <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    6dbc:	2100      	movs	r1, #0
    6dbe:	9803      	ldr	r0, [sp, #12]
    6dc0:	f7ff fb17 	bl	63f2 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6dc4:	9b00      	ldr	r3, [sp, #0]
    6dc6:	69db      	ldr	r3, [r3, #28]
    6dc8:	2b00      	cmp	r3, #0
    6dca:	bf14      	ite	ne
    6dcc:	2301      	movne	r3, #1
    6dce:	2300      	moveq	r3, #0
    6dd0:	b2db      	uxtb	r3, r3
    6dd2:	4619      	mov	r1, r3
    6dd4:	9803      	ldr	r0, [sp, #12]
    6dd6:	f7ff fa5d 	bl	6294 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    6dda:	2100      	movs	r1, #0
    6ddc:	9803      	ldr	r0, [sp, #12]
    6dde:	f7ff fad6 	bl	638e <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6de2:	9b00      	ldr	r3, [sp, #0]
    6de4:	6a1b      	ldr	r3, [r3, #32]
    6de6:	2b00      	cmp	r3, #0
    6de8:	bf14      	ite	ne
    6dea:	2301      	movne	r3, #1
    6dec:	2300      	moveq	r3, #0
    6dee:	b2db      	uxtb	r3, r3
    6df0:	4619      	mov	r1, r3
    6df2:	9803      	ldr	r0, [sp, #12]
    6df4:	f7ff fa35 	bl	6262 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    6df8:	2100      	movs	r1, #0
    6dfa:	9803      	ldr	r0, [sp, #12]
    6dfc:	f7ff faae 	bl	635c <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    6e00:	e04b      	b.n	6e9a <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    6e02:	2100      	movs	r1, #0
    6e04:	9803      	ldr	r0, [sp, #12]
    6e06:	f7ff fa5e 	bl	62c6 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    6e0a:	9b00      	ldr	r3, [sp, #0]
    6e0c:	699b      	ldr	r3, [r3, #24]
    6e0e:	2b00      	cmp	r3, #0
    6e10:	bf14      	ite	ne
    6e12:	2301      	movne	r3, #1
    6e14:	2300      	moveq	r3, #0
    6e16:	b2db      	uxtb	r3, r3
    6e18:	4619      	mov	r1, r3
    6e1a:	9803      	ldr	r0, [sp, #12]
    6e1c:	f7ff fad0 	bl	63c0 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    6e20:	2100      	movs	r1, #0
    6e22:	9803      	ldr	r0, [sp, #12]
    6e24:	f7ff fa68 	bl	62f8 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    6e28:	9b00      	ldr	r3, [sp, #0]
    6e2a:	691b      	ldr	r3, [r3, #16]
    6e2c:	2b00      	cmp	r3, #0
    6e2e:	bf14      	ite	ne
    6e30:	2301      	movne	r3, #1
    6e32:	2300      	moveq	r3, #0
    6e34:	b2db      	uxtb	r3, r3
    6e36:	4619      	mov	r1, r3
    6e38:	9803      	ldr	r0, [sp, #12]
    6e3a:	f7ff fada 	bl	63f2 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    6e3e:	2100      	movs	r1, #0
    6e40:	9803      	ldr	r0, [sp, #12]
    6e42:	f7ff fa72 	bl	632a <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    6e46:	9b00      	ldr	r3, [sp, #0]
    6e48:	695b      	ldr	r3, [r3, #20]
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	bf14      	ite	ne
    6e4e:	2301      	movne	r3, #1
    6e50:	2300      	moveq	r3, #0
    6e52:	b2db      	uxtb	r3, r3
    6e54:	4619      	mov	r1, r3
    6e56:	9803      	ldr	r0, [sp, #12]
    6e58:	f7ff facb 	bl	63f2 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    6e5c:	2100      	movs	r1, #0
    6e5e:	9803      	ldr	r0, [sp, #12]
    6e60:	f7ff fa18 	bl	6294 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6e64:	9b00      	ldr	r3, [sp, #0]
    6e66:	69db      	ldr	r3, [r3, #28]
    6e68:	2b00      	cmp	r3, #0
    6e6a:	bf14      	ite	ne
    6e6c:	2301      	movne	r3, #1
    6e6e:	2300      	moveq	r3, #0
    6e70:	b2db      	uxtb	r3, r3
    6e72:	4619      	mov	r1, r3
    6e74:	9803      	ldr	r0, [sp, #12]
    6e76:	f7ff fa8a 	bl	638e <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    6e7a:	2100      	movs	r1, #0
    6e7c:	9803      	ldr	r0, [sp, #12]
    6e7e:	f7ff f9f0 	bl	6262 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6e82:	9b00      	ldr	r3, [sp, #0]
    6e84:	6a1b      	ldr	r3, [r3, #32]
    6e86:	2b00      	cmp	r3, #0
    6e88:	bf14      	ite	ne
    6e8a:	2301      	movne	r3, #1
    6e8c:	2300      	moveq	r3, #0
    6e8e:	b2db      	uxtb	r3, r3
    6e90:	4619      	mov	r1, r3
    6e92:	9803      	ldr	r0, [sp, #12]
    6e94:	f7ff fa62 	bl	635c <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    6e98:	bf00      	nop
    }
}
    6e9a:	bf00      	nop
    6e9c:	b005      	add	sp, #20
    6e9e:	f85d fb04 	ldr.w	pc, [sp], #4
    6ea2:	bf00      	nop
    6ea4:	0000bd44 	.word	0x0000bd44

00006ea8 <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    6ea8:	b500      	push	{lr}
    6eaa:	b085      	sub	sp, #20
    6eac:	4603      	mov	r3, r0
    6eae:	9100      	str	r1, [sp, #0]
    6eb0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6eb8:	4a19      	ldr	r2, [pc, #100]	; (6f20 <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    6eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ebe:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6ec0:	9b00      	ldr	r3, [sp, #0]
    6ec2:	699b      	ldr	r3, [r3, #24]
    6ec4:	2b00      	cmp	r3, #0
    6ec6:	bf14      	ite	ne
    6ec8:	2301      	movne	r3, #1
    6eca:	2300      	moveq	r3, #0
    6ecc:	b2db      	uxtb	r3, r3
    6ece:	4619      	mov	r1, r3
    6ed0:	9803      	ldr	r0, [sp, #12]
    6ed2:	f7fe fee6 	bl	5ca2 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6ed6:	9b00      	ldr	r3, [sp, #0]
    6ed8:	691b      	ldr	r3, [r3, #16]
    6eda:	2b00      	cmp	r3, #0
    6edc:	bf14      	ite	ne
    6ede:	2301      	movne	r3, #1
    6ee0:	2300      	moveq	r3, #0
    6ee2:	b2db      	uxtb	r3, r3
    6ee4:	4619      	mov	r1, r3
    6ee6:	9803      	ldr	r0, [sp, #12]
    6ee8:	f7ff f973 	bl	61d2 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6eec:	9b00      	ldr	r3, [sp, #0]
    6eee:	695b      	ldr	r3, [r3, #20]
    6ef0:	2b00      	cmp	r3, #0
    6ef2:	bf14      	ite	ne
    6ef4:	2301      	movne	r3, #1
    6ef6:	2300      	moveq	r3, #0
    6ef8:	b2db      	uxtb	r3, r3
    6efa:	4619      	mov	r1, r3
    6efc:	9803      	ldr	r0, [sp, #12]
    6efe:	f7ff f980 	bl	6202 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6f02:	9b00      	ldr	r3, [sp, #0]
    6f04:	69db      	ldr	r3, [r3, #28]
    6f06:	2b00      	cmp	r3, #0
    6f08:	bf14      	ite	ne
    6f0a:	2301      	movne	r3, #1
    6f0c:	2300      	moveq	r3, #0
    6f0e:	b2db      	uxtb	r3, r3
    6f10:	4619      	mov	r1, r3
    6f12:	9803      	ldr	r0, [sp, #12]
    6f14:	f7ff f945 	bl	61a2 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    6f18:	bf00      	nop
    6f1a:	b005      	add	sp, #20
    6f1c:	f85d fb04 	ldr.w	pc, [sp], #4
    6f20:	0000bd44 	.word	0x0000bd44

00006f24 <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    6f24:	b500      	push	{lr}
    6f26:	b087      	sub	sp, #28
    6f28:	4603      	mov	r3, r0
    6f2a:	9100      	str	r1, [sp, #0]
    6f2c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6f30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f34:	4a42      	ldr	r2, [pc, #264]	; (7040 <Ftm_Pwm_Ip_UpdateSync+0x11c>)
    6f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f3a:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    6f3c:	2300      	movs	r3, #0
    6f3e:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    6f40:	2300      	movs	r3, #0
    6f42:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(SyncCfg != NULL_PTR);
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    6f46:	9b00      	ldr	r3, [sp, #0]
    6f48:	791b      	ldrb	r3, [r3, #4]
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	d107      	bne.n	6f5e <Ftm_Pwm_Ip_UpdateSync+0x3a>
    6f4e:	9b00      	ldr	r3, [sp, #0]
    6f50:	795b      	ldrb	r3, [r3, #5]
    6f52:	2b00      	cmp	r3, #0
    6f54:	d103      	bne.n	6f5e <Ftm_Pwm_Ip_UpdateSync+0x3a>
    6f56:	9b00      	ldr	r3, [sp, #0]
    6f58:	799b      	ldrb	r3, [r3, #6]
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	d001      	beq.n	6f62 <Ftm_Pwm_Ip_UpdateSync+0x3e>
    6f5e:	2301      	movs	r3, #1
    6f60:	e000      	b.n	6f64 <Ftm_Pwm_Ip_UpdateSync+0x40>
    6f62:	2300      	movs	r3, #0
    6f64:	f88d 300f 	strb.w	r3, [sp, #15]
    6f68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f6c:	f003 0301 	and.w	r3, r3, #1
    6f70:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    6f74:	9b00      	ldr	r3, [sp, #0]
    6f76:	681b      	ldr	r3, [r3, #0]
    6f78:	2b00      	cmp	r3, #0
    6f7a:	d105      	bne.n	6f88 <Ftm_Pwm_Ip_UpdateSync+0x64>
    6f7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f80:	2b00      	cmp	r3, #0
    6f82:	d001      	beq.n	6f88 <Ftm_Pwm_Ip_UpdateSync+0x64>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    6f84:	2301      	movs	r3, #1
    6f86:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    6f88:	9b00      	ldr	r3, [sp, #0]
    6f8a:	6a1b      	ldr	r3, [r3, #32]
    6f8c:	2b02      	cmp	r3, #2
    6f8e:	d101      	bne.n	6f94 <Ftm_Pwm_Ip_UpdateSync+0x70>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    6f90:	2301      	movs	r3, #1
    6f92:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    6f94:	9b05      	ldr	r3, [sp, #20]
    6f96:	2b00      	cmp	r3, #0
    6f98:	d14c      	bne.n	7034 <Ftm_Pwm_Ip_UpdateSync+0x110>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    6f9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f9e:	9900      	ldr	r1, [sp, #0]
    6fa0:	4618      	mov	r0, r3
    6fa2:	f7ff fecf 	bl	6d44 <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    6fa6:	2101      	movs	r1, #1
    6fa8:	9804      	ldr	r0, [sp, #16]
    6faa:	f7ff f942 	bl	6232 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    6fae:	9b00      	ldr	r3, [sp, #0]
    6fb0:	791b      	ldrb	r3, [r3, #4]
    6fb2:	461a      	mov	r2, r3
    6fb4:	2100      	movs	r1, #0
    6fb6:	9804      	ldr	r0, [sp, #16]
    6fb8:	f7fe fe89 	bl	5cce <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    6fbc:	9b00      	ldr	r3, [sp, #0]
    6fbe:	795b      	ldrb	r3, [r3, #5]
    6fc0:	461a      	mov	r2, r3
    6fc2:	2101      	movs	r1, #1
    6fc4:	9804      	ldr	r0, [sp, #16]
    6fc6:	f7fe fe82 	bl	5cce <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    6fca:	9b00      	ldr	r3, [sp, #0]
    6fcc:	799b      	ldrb	r3, [r3, #6]
    6fce:	461a      	mov	r2, r3
    6fd0:	2102      	movs	r1, #2
    6fd2:	9804      	ldr	r0, [sp, #16]
    6fd4:	f7fe fe7b 	bl	5cce <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    6fd8:	9b00      	ldr	r3, [sp, #0]
    6fda:	79db      	ldrb	r3, [r3, #7]
    6fdc:	4619      	mov	r1, r3
    6fde:	9804      	ldr	r0, [sp, #16]
    6fe0:	f7ff f8c7 	bl	6172 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    6fe4:	9b00      	ldr	r3, [sp, #0]
    6fe6:	7a1b      	ldrb	r3, [r3, #8]
    6fe8:	4619      	mov	r1, r3
    6fea:	9804      	ldr	r0, [sp, #16]
    6fec:	f7fe fe43 	bl	5c76 <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    6ff0:	9b00      	ldr	r3, [sp, #0]
    6ff2:	7a5b      	ldrb	r3, [r3, #9]
    6ff4:	4619      	mov	r1, r3
    6ff6:	9804      	ldr	r0, [sp, #16]
    6ff8:	f7fe fe27 	bl	5c4a <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    6ffc:	9b00      	ldr	r3, [sp, #0]
    6ffe:	7a9b      	ldrb	r3, [r3, #10]
    7000:	2b00      	cmp	r3, #0
    7002:	d005      	beq.n	7010 <Ftm_Pwm_Ip_UpdateSync+0xec>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    7004:	9b00      	ldr	r3, [sp, #0]
    7006:	899b      	ldrh	r3, [r3, #12]
    7008:	4619      	mov	r1, r3
    700a:	9804      	ldr	r0, [sp, #16]
    700c:	f7ff fac6 	bl	659c <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    7010:	9b00      	ldr	r3, [sp, #0]
    7012:	7a9b      	ldrb	r3, [r3, #10]
    7014:	4619      	mov	r1, r3
    7016:	9804      	ldr	r0, [sp, #16]
    7018:	f7ff faa3 	bl	6562 <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    701c:	9b00      	ldr	r3, [sp, #0]
    701e:	7b9b      	ldrb	r3, [r3, #14]
    7020:	4619      	mov	r1, r3
    7022:	9804      	ldr	r0, [sp, #16]
    7024:	f7ff f86b 	bl	60fe <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    7028:	f89d 3007 	ldrb.w	r3, [sp, #7]
    702c:	9900      	ldr	r1, [sp, #0]
    702e:	4618      	mov	r0, r3
    7030:	f7ff ff3a 	bl	6ea8 <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    7034:	9b05      	ldr	r3, [sp, #20]
}
    7036:	4618      	mov	r0, r3
    7038:	b007      	add	sp, #28
    703a:	f85d fb04 	ldr.w	pc, [sp], #4
    703e:	bf00      	nop
    7040:	0000bd44 	.word	0x0000bd44

00007044 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    7044:	b500      	push	{lr}
    7046:	b085      	sub	sp, #20
    7048:	4603      	mov	r3, r0
    704a:	9100      	str	r1, [sp, #0]
    704c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7050:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7054:	4a1f      	ldr	r2, [pc, #124]	; (70d4 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    7056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    705a:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    705c:	9803      	ldr	r0, [sp, #12]
    705e:	f7ff fbab 	bl	67b8 <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    7062:	2100      	movs	r1, #0
    7064:	9803      	ldr	r0, [sp, #12]
    7066:	f7fe fc01 	bl	586c <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    706a:	9803      	ldr	r0, [sp, #12]
    706c:	f7fe fc4a 	bl	5904 <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    7070:	9b00      	ldr	r3, [sp, #0]
    7072:	68db      	ldr	r3, [r3, #12]
    7074:	2b00      	cmp	r3, #0
    7076:	bf14      	ite	ne
    7078:	2301      	movne	r3, #1
    707a:	2300      	moveq	r3, #0
    707c:	b2db      	uxtb	r3, r3
    707e:	4619      	mov	r1, r3
    7080:	9803      	ldr	r0, [sp, #12]
    7082:	f7fe fc04 	bl	588e <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    7086:	2100      	movs	r1, #0
    7088:	9803      	ldr	r0, [sp, #12]
    708a:	f7fe fdb2 	bl	5bf2 <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    708e:	9b00      	ldr	r3, [sp, #0]
    7090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7092:	4619      	mov	r1, r3
    7094:	9803      	ldr	r0, [sp, #12]
    7096:	f7ff f847 	bl	6128 <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    709a:	9b00      	ldr	r3, [sp, #0]
    709c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    709e:	b2db      	uxtb	r3, r3
    70a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70a4:	b2db      	uxtb	r3, r3
    70a6:	4619      	mov	r1, r3
    70a8:	9803      	ldr	r0, [sp, #12]
    70aa:	f7fe ff87 	bl	5fbc <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    70ae:	9b00      	ldr	r3, [sp, #0]
    70b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    70b2:	099b      	lsrs	r3, r3, #6
    70b4:	b29b      	uxth	r3, r3
    70b6:	b2db      	uxtb	r3, r3
    70b8:	4619      	mov	r1, r3
    70ba:	9803      	ldr	r0, [sp, #12]
    70bc:	f7fe ffa2 	bl	6004 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    70c0:	9b00      	ldr	r3, [sp, #0]
    70c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    70c4:	4619      	mov	r1, r3
    70c6:	9803      	ldr	r0, [sp, #12]
    70c8:	f7fe ff8b 	bl	5fe2 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    70cc:	bf00      	nop
    70ce:	b005      	add	sp, #20
    70d0:	f85d fb04 	ldr.w	pc, [sp], #4
    70d4:	0000bd44 	.word	0x0000bd44

000070d8 <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    70d8:	b500      	push	{lr}
    70da:	b085      	sub	sp, #20
    70dc:	4603      	mov	r3, r0
    70de:	9100      	str	r1, [sp, #0]
    70e0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    70e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    70e8:	4a39      	ldr	r2, [pc, #228]	; (71d0 <Ftm_Pwm_Ip_InitInstance+0xf8>)
    70ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ee:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    70f0:	4b38      	ldr	r3, [pc, #224]	; (71d4 <Ftm_Pwm_Ip_InitInstance+0xfc>)
    70f2:	9302      	str	r3, [sp, #8]
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    70f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    70f8:	4619      	mov	r1, r3
    70fa:	9802      	ldr	r0, [sp, #8]
    70fc:	f7ff fd20 	bl	6b40 <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    7100:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7104:	9900      	ldr	r1, [sp, #0]
    7106:	4618      	mov	r0, r3
    7108:	f7ff ff9c 	bl	7044 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    710c:	9b00      	ldr	r3, [sp, #0]
    710e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    7110:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7114:	4611      	mov	r1, r2
    7116:	4618      	mov	r0, r3
    7118:	f7ff ff04 	bl	6f24 <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    711c:	2100      	movs	r1, #0
    711e:	9803      	ldr	r0, [sp, #12]
    7120:	f7fe fd56 	bl	5bd0 <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    7124:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7128:	9a00      	ldr	r2, [sp, #0]
    712a:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    712c:	4a2a      	ldr	r2, [pc, #168]	; (71d8 <Ftm_Pwm_Ip_InitInstance+0x100>)
    712e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    7132:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7136:	9a00      	ldr	r2, [sp, #0]
    7138:	6812      	ldr	r2, [r2, #0]
    713a:	4928      	ldr	r1, [pc, #160]	; (71dc <Ftm_Pwm_Ip_InitInstance+0x104>)
    713c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    7140:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7144:	9a00      	ldr	r2, [sp, #0]
    7146:	6852      	ldr	r2, [r2, #4]
    7148:	4925      	ldr	r1, [pc, #148]	; (71e0 <Ftm_Pwm_Ip_InitInstance+0x108>)
    714a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    714e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7152:	9a00      	ldr	r2, [sp, #0]
    7154:	6892      	ldr	r2, [r2, #8]
    7156:	4923      	ldr	r1, [pc, #140]	; (71e4 <Ftm_Pwm_Ip_InitInstance+0x10c>)
    7158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    715c:	9b00      	ldr	r3, [sp, #0]
    715e:	7c1b      	ldrb	r3, [r3, #16]
    7160:	2b00      	cmp	r3, #0
    7162:	d00e      	beq.n	7182 <Ftm_Pwm_Ip_InitInstance+0xaa>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    7164:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7168:	9a00      	ldr	r2, [sp, #0]
    716a:	6952      	ldr	r2, [r2, #20]
    716c:	491e      	ldr	r1, [pc, #120]	; (71e8 <Ftm_Pwm_Ip_InitInstance+0x110>)
    716e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    7172:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7176:	9a00      	ldr	r2, [sp, #0]
    7178:	6992      	ldr	r2, [r2, #24]
    717a:	491b      	ldr	r1, [pc, #108]	; (71e8 <Ftm_Pwm_Ip_InitInstance+0x110>)
    717c:	00db      	lsls	r3, r3, #3
    717e:	440b      	add	r3, r1
    7180:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    7182:	9b00      	ldr	r3, [sp, #0]
    7184:	68db      	ldr	r3, [r3, #12]
    7186:	2b01      	cmp	r3, #1
    7188:	d108      	bne.n	719c <Ftm_Pwm_Ip_InitInstance+0xc4>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    718a:	9b00      	ldr	r3, [sp, #0]
    718c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    718e:	085b      	lsrs	r3, r3, #1
    7190:	b29b      	uxth	r3, r3
    7192:	4619      	mov	r1, r3
    7194:	9803      	ldr	r0, [sp, #12]
    7196:	f7fe fbe3 	bl	5960 <Ftm_Pwm_Ip_SetMod>
    719a:	e007      	b.n	71ac <Ftm_Pwm_Ip_InitInstance+0xd4>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    719c:	9b00      	ldr	r3, [sp, #0]
    719e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    71a0:	3b01      	subs	r3, #1
    71a2:	b29b      	uxth	r3, r3
    71a4:	4619      	mov	r1, r3
    71a6:	9803      	ldr	r0, [sp, #12]
    71a8:	f7fe fbda 	bl	5960 <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    71ac:	9b00      	ldr	r3, [sp, #0]
    71ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    71b2:	4619      	mov	r1, r3
    71b4:	9803      	ldr	r0, [sp, #12]
    71b6:	f7fe ff39 	bl	602c <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    71ba:	9b00      	ldr	r3, [sp, #0]
    71bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    71be:	4619      	mov	r1, r3
    71c0:	9803      	ldr	r0, [sp, #12]
    71c2:	f7fe ffc3 	bl	614c <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    71c6:	bf00      	nop
    71c8:	b005      	add	sp, #20
    71ca:	f85d fb04 	ldr.w	pc, [sp], #4
    71ce:	bf00      	nop
    71d0:	0000bd44 	.word	0x0000bd44
    71d4:	40048000 	.word	0x40048000
    71d8:	1fff8cfc 	.word	0x1fff8cfc
    71dc:	1fff8ff4 	.word	0x1fff8ff4
    71e0:	1fff9004 	.word	0x1fff9004
    71e4:	1fff9014 	.word	0x1fff9014
    71e8:	1fff8ea4 	.word	0x1fff8ea4

000071ec <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    71ec:	b500      	push	{lr}
    71ee:	b085      	sub	sp, #20
    71f0:	4603      	mov	r3, r0
    71f2:	9100      	str	r1, [sp, #0]
    71f4:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    71f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71fc:	4a1a      	ldr	r2, [pc, #104]	; (7268 <Ftm_Pwm_Ip_InitInstanceStart+0x7c>)
    71fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7202:	9303      	str	r3, [sp, #12]
    DevAssert(NULL_PTR != UserInstCfg);
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    7204:	9b00      	ldr	r3, [sp, #0]
    7206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    720a:	4619      	mov	r1, r3
    720c:	9803      	ldr	r0, [sp, #12]
    720e:	f7ff fc03 	bl	6a18 <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    7212:	9b00      	ldr	r3, [sp, #0]
    7214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7216:	4619      	mov	r1, r3
    7218:	9803      	ldr	r0, [sp, #12]
    721a:	f7ff fc11 	bl	6a40 <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    721e:	9b00      	ldr	r3, [sp, #0]
    7220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7222:	4619      	mov	r1, r3
    7224:	9803      	ldr	r0, [sp, #12]
    7226:	f7ff fb7a 	bl	691e <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    722a:	2101      	movs	r1, #1
    722c:	9803      	ldr	r0, [sp, #12]
    722e:	f7fe fce0 	bl	5bf2 <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    7232:	2101      	movs	r1, #1
    7234:	9803      	ldr	r0, [sp, #12]
    7236:	f7fe fcf2 	bl	5c1e <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    723a:	9b00      	ldr	r3, [sp, #0]
    723c:	685b      	ldr	r3, [r3, #4]
    723e:	4619      	mov	r1, r3
    7240:	9803      	ldr	r0, [sp, #12]
    7242:	f7fe fb03 	bl	584c <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    7246:	9b00      	ldr	r3, [sp, #0]
    7248:	681b      	ldr	r3, [r3, #0]
    724a:	4619      	mov	r1, r3
    724c:	9803      	ldr	r0, [sp, #12]
    724e:	f7fe fb0d 	bl	586c <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    7252:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7256:	4a05      	ldr	r2, [pc, #20]	; (726c <Ftm_Pwm_Ip_InitInstanceStart+0x80>)
    7258:	2101      	movs	r1, #1
    725a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    725e:	bf00      	nop
    7260:	b005      	add	sp, #20
    7262:	f85d fb04 	ldr.w	pc, [sp], #4
    7266:	bf00      	nop
    7268:	0000bd44 	.word	0x0000bd44
    726c:	1fff8ec4 	.word	0x1fff8ec4

00007270 <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    7270:	b500      	push	{lr}
    7272:	b085      	sub	sp, #20
    7274:	4603      	mov	r3, r0
    7276:	9100      	str	r1, [sp, #0]
    7278:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    727c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7280:	4a37      	ldr	r2, [pc, #220]	; (7360 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    7282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7286:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    7288:	2300      	movs	r3, #0
    728a:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    728e:	2300      	movs	r3, #0
    7290:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    7294:	9b00      	ldr	r3, [sp, #0]
    7296:	781b      	ldrb	r3, [r3, #0]
    7298:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    729c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    72a0:	085b      	lsrs	r3, r3, #1
    72a2:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    72a6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    72aa:	2201      	movs	r2, #1
    72ac:	4619      	mov	r1, r3
    72ae:	9803      	ldr	r0, [sp, #12]
    72b0:	f7fe fe36 	bl	5f20 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    72b4:	f89d 300a 	ldrb.w	r3, [sp, #10]
    72b8:	2201      	movs	r2, #1
    72ba:	4619      	mov	r1, r3
    72bc:	9803      	ldr	r0, [sp, #12]
    72be:	f7ff fb63 	bl	6988 <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    72c2:	9b00      	ldr	r3, [sp, #0]
    72c4:	685b      	ldr	r3, [r3, #4]
    72c6:	2b22      	cmp	r3, #34	; 0x22
    72c8:	d003      	beq.n	72d2 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    72ca:	9b00      	ldr	r3, [sp, #0]
    72cc:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    72ce:	2b21      	cmp	r3, #33	; 0x21
    72d0:	d113      	bne.n	72fa <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    72d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    72d6:	005b      	lsls	r3, r3, #1
    72d8:	b2db      	uxtb	r3, r3
    72da:	3301      	adds	r3, #1
    72dc:	b2d9      	uxtb	r1, r3
    72de:	9b00      	ldr	r3, [sp, #0]
    72e0:	685b      	ldr	r3, [r3, #4]
    72e2:	461a      	mov	r2, r3
    72e4:	9803      	ldr	r0, [sp, #12]
    72e6:	f7fe fb76 	bl	59d6 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    72ea:	f89d 300a 	ldrb.w	r3, [sp, #10]
    72ee:	2201      	movs	r2, #1
    72f0:	4619      	mov	r1, r3
    72f2:	9803      	ldr	r0, [sp, #12]
    72f4:	f7fe fd89 	bl	5e0a <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    72f8:	e021      	b.n	733e <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    72fa:	9b00      	ldr	r3, [sp, #0]
    72fc:	685b      	ldr	r3, [r3, #4]
    72fe:	2b62      	cmp	r3, #98	; 0x62
    7300:	d003      	beq.n	730a <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    7302:	9b00      	ldr	r3, [sp, #0]
    7304:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    7306:	2b61      	cmp	r3, #97	; 0x61
    7308:	d119      	bne.n	733e <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    730a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    730e:	005b      	lsls	r3, r3, #1
    7310:	b2db      	uxtb	r3, r3
    7312:	3301      	adds	r3, #1
    7314:	b2d9      	uxtb	r1, r3
    7316:	9b00      	ldr	r3, [sp, #0]
    7318:	685b      	ldr	r3, [r3, #4]
    731a:	461a      	mov	r2, r3
    731c:	9803      	ldr	r0, [sp, #12]
    731e:	f7fe fb5a 	bl	59d6 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    7322:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7326:	2201      	movs	r2, #1
    7328:	4619      	mov	r1, r3
    732a:	9803      	ldr	r0, [sp, #12]
    732c:	f7fe fd6d 	bl	5e0a <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    7330:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7334:	2201      	movs	r2, #1
    7336:	4619      	mov	r1, r3
    7338:	9803      	ldr	r0, [sp, #12]
    733a:	f7fe fe18 	bl	5f6e <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    733e:	9b00      	ldr	r3, [sp, #0]
    7340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7342:	2b00      	cmp	r3, #0
    7344:	d007      	beq.n	7356 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    7346:	9b00      	ldr	r3, [sp, #0]
    7348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    734a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    734e:	4611      	mov	r1, r2
    7350:	4618      	mov	r0, r3
    7352:	f7ff fc47 	bl	6be4 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    7356:	bf00      	nop
    7358:	b005      	add	sp, #20
    735a:	f85d fb04 	ldr.w	pc, [sp], #4
    735e:	bf00      	nop
    7360:	0000bd44 	.word	0x0000bd44

00007364 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    7364:	b500      	push	{lr}
    7366:	b085      	sub	sp, #20
    7368:	4603      	mov	r3, r0
    736a:	9100      	str	r1, [sp, #0]
    736c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7370:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7374:	4a15      	ldr	r2, [pc, #84]	; (73cc <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    7376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    737a:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    737c:	9b00      	ldr	r3, [sp, #0]
    737e:	7819      	ldrb	r1, [r3, #0]
    7380:	9b00      	ldr	r3, [sp, #0]
    7382:	7ddb      	ldrb	r3, [r3, #23]
    7384:	461a      	mov	r2, r3
    7386:	9803      	ldr	r0, [sp, #12]
    7388:	f7ff fa8b 	bl	68a2 <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    738c:	9b00      	ldr	r3, [sp, #0]
    738e:	7819      	ldrb	r1, [r3, #0]
    7390:	9b00      	ldr	r3, [sp, #0]
    7392:	7e1b      	ldrb	r3, [r3, #24]
    7394:	461a      	mov	r2, r3
    7396:	9803      	ldr	r0, [sp, #12]
    7398:	f7ff f8ba 	bl	6510 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    739c:	9b00      	ldr	r3, [sp, #0]
    739e:	7819      	ldrb	r1, [r3, #0]
    73a0:	9b00      	ldr	r3, [sp, #0]
    73a2:	7d5b      	ldrb	r3, [r3, #21]
    73a4:	461a      	mov	r2, r3
    73a6:	9803      	ldr	r0, [sp, #12]
    73a8:	f7ff f87c 	bl	64a4 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    73ac:	9b00      	ldr	r3, [sp, #0]
    73ae:	7819      	ldrb	r1, [r3, #0]
    73b0:	9b00      	ldr	r3, [sp, #0]
    73b2:	7d9b      	ldrb	r3, [r3, #22]
    73b4:	461a      	mov	r2, r3
    73b6:	9803      	ldr	r0, [sp, #12]
    73b8:	f7ff f834 	bl	6424 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    73bc:	2101      	movs	r1, #1
    73be:	9803      	ldr	r0, [sp, #12]
    73c0:	f7fe fcaa 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    73c4:	bf00      	nop
    73c6:	b005      	add	sp, #20
    73c8:	f85d fb04 	ldr.w	pc, [sp], #4
    73cc:	0000bd44 	.word	0x0000bd44

000073d0 <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    73d0:	b500      	push	{lr}
    73d2:	b085      	sub	sp, #20
    73d4:	4603      	mov	r3, r0
    73d6:	9100      	str	r1, [sp, #0]
    73d8:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    73dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73e0:	4a48      	ldr	r2, [pc, #288]	; (7504 <Ftm_Pwm_Ip_InitChannel+0x134>)
    73e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73e6:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    73e8:	2300      	movs	r3, #0
    73ea:	f88d 300b 	strb.w	r3, [sp, #11]
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(NULL_PTR != UserChCfg);
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    73ee:	9b00      	ldr	r3, [sp, #0]
    73f0:	781b      	ldrb	r3, [r3, #0]
    73f2:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    73f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    73fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    73fe:	9900      	ldr	r1, [sp, #0]
    7400:	8b48      	ldrh	r0, [r1, #26]
    7402:	4941      	ldr	r1, [pc, #260]	; (7508 <Ftm_Pwm_Ip_InitChannel+0x138>)
    7404:	00d2      	lsls	r2, r2, #3
    7406:	4413      	add	r3, r2
    7408:	4602      	mov	r2, r0
    740a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    740e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7412:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7416:	9a00      	ldr	r2, [sp, #0]
    7418:	69d2      	ldr	r2, [r2, #28]
    741a:	483c      	ldr	r0, [pc, #240]	; (750c <Ftm_Pwm_Ip_InitChannel+0x13c>)
    741c:	00c9      	lsls	r1, r1, #3
    741e:	440b      	add	r3, r1
    7420:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    7424:	9b00      	ldr	r3, [sp, #0]
    7426:	6a1a      	ldr	r2, [r3, #32]
    7428:	f89d 300b 	ldrb.w	r3, [sp, #11]
    742c:	4619      	mov	r1, r3
    742e:	9803      	ldr	r0, [sp, #12]
    7430:	f7fe fe2e 	bl	6090 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    7434:	9b00      	ldr	r3, [sp, #0]
    7436:	69da      	ldr	r2, [r3, #28]
    7438:	f89d 300b 	ldrb.w	r3, [sp, #11]
    743c:	4619      	mov	r1, r3
    743e:	9803      	ldr	r0, [sp, #12]
    7440:	f7fe fc80 	bl	5d44 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    7444:	9b00      	ldr	r3, [sp, #0]
    7446:	685a      	ldr	r2, [r3, #4]
    7448:	f89d 300b 	ldrb.w	r3, [sp, #11]
    744c:	4619      	mov	r1, r3
    744e:	9803      	ldr	r0, [sp, #12]
    7450:	f7fe fac1 	bl	59d6 <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    7454:	9b00      	ldr	r3, [sp, #0]
    7456:	685a      	ldr	r2, [r3, #4]
    7458:	f89d 300b 	ldrb.w	r3, [sp, #11]
    745c:	4619      	mov	r1, r3
    745e:	9803      	ldr	r0, [sp, #12]
    7460:	f7fe faf0 	bl	5a44 <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    7464:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7468:	9900      	ldr	r1, [sp, #0]
    746a:	4618      	mov	r0, r3
    746c:	f7ff ff00 	bl	7270 <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    7470:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7474:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7478:	4923      	ldr	r1, [pc, #140]	; (7508 <Ftm_Pwm_Ip_InitChannel+0x138>)
    747a:	00d2      	lsls	r2, r2, #3
    747c:	4413      	add	r3, r2
    747e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    7482:	f89d 100b 	ldrb.w	r1, [sp, #11]
    7486:	f89d 0007 	ldrb.w	r0, [sp, #7]
    748a:	2301      	movs	r3, #1
    748c:	f000 f9c0 	bl	7810 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    7490:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7494:	9900      	ldr	r1, [sp, #0]
    7496:	4618      	mov	r0, r3
    7498:	f7ff ff64 	bl	7364 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    749c:	9b00      	ldr	r3, [sp, #0]
    749e:	7d1b      	ldrb	r3, [r3, #20]
    74a0:	2b00      	cmp	r3, #0
    74a2:	d005      	beq.n	74b0 <Ftm_Pwm_Ip_InitChannel+0xe0>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    74a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74a8:	4619      	mov	r1, r3
    74aa:	9803      	ldr	r0, [sp, #12]
    74ac:	f7fe fa35 	bl	591a <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    74b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    74b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74b8:	4915      	ldr	r1, [pc, #84]	; (7510 <Ftm_Pwm_Ip_InitChannel+0x140>)
    74ba:	00d2      	lsls	r2, r2, #3
    74bc:	4413      	add	r3, r2
    74be:	2201      	movs	r2, #1
    74c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    74c4:	9b00      	ldr	r3, [sp, #0]
    74c6:	7a1b      	ldrb	r3, [r3, #8]
    74c8:	2b00      	cmp	r3, #0
    74ca:	d016      	beq.n	74fa <Ftm_Pwm_Ip_InitChannel+0x12a>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    74cc:	f89d 1007 	ldrb.w	r1, [sp, #7]
    74d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74d4:	9a00      	ldr	r2, [sp, #0]
    74d6:	68d2      	ldr	r2, [r2, #12]
    74d8:	480e      	ldr	r0, [pc, #56]	; (7514 <Ftm_Pwm_Ip_InitChannel+0x144>)
    74da:	00c9      	lsls	r1, r1, #3
    74dc:	440b      	add	r3, r1
    74de:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    74e2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    74e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74ea:	9a00      	ldr	r2, [sp, #0]
    74ec:	6912      	ldr	r2, [r2, #16]
    74ee:	4809      	ldr	r0, [pc, #36]	; (7514 <Ftm_Pwm_Ip_InitChannel+0x144>)
    74f0:	00c9      	lsls	r1, r1, #3
    74f2:	440b      	add	r3, r1
    74f4:	00db      	lsls	r3, r3, #3
    74f6:	4403      	add	r3, r0
    74f8:	605a      	str	r2, [r3, #4]
    }

}
    74fa:	bf00      	nop
    74fc:	b005      	add	sp, #20
    74fe:	f85d fb04 	ldr.w	pc, [sp], #4
    7502:	bf00      	nop
    7504:	0000bd44 	.word	0x0000bd44
    7508:	1fff8d04 	.word	0x1fff8d04
    750c:	1fff8f74 	.word	0x1fff8f74
    7510:	1fff8ed4 	.word	0x1fff8ed4
    7514:	1fff8da4 	.word	0x1fff8da4

00007518 <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    7518:	b500      	push	{lr}
    751a:	b085      	sub	sp, #20
    751c:	4603      	mov	r3, r0
    751e:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7522:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7526:	4a17      	ldr	r2, [pc, #92]	; (7584 <Ftm_Pwm_Ip_DeInitInstance+0x6c>)
    7528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    752c:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    752e:	2100      	movs	r1, #0
    7530:	9803      	ldr	r0, [sp, #12]
    7532:	f7fe f99b 	bl	586c <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    7536:	2100      	movs	r1, #0
    7538:	9803      	ldr	r0, [sp, #12]
    753a:	f7fe fd63 	bl	6004 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    753e:	2101      	movs	r1, #1
    7540:	9803      	ldr	r0, [sp, #12]
    7542:	f7fe fd4e 	bl	5fe2 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    7546:	2100      	movs	r1, #0
    7548:	9803      	ldr	r0, [sp, #12]
    754a:	f7fe fd37 	bl	5fbc <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    754e:	2100      	movs	r1, #0
    7550:	9803      	ldr	r0, [sp, #12]
    7552:	f7fe fde9 	bl	6128 <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    7556:	2100      	movs	r1, #0
    7558:	9803      	ldr	r0, [sp, #12]
    755a:	f7fe f9bc 	bl	58d6 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    755e:	2100      	movs	r1, #0
    7560:	9803      	ldr	r0, [sp, #12]
    7562:	f7fe f9fd 	bl	5960 <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    7566:	2100      	movs	r1, #0
    7568:	9803      	ldr	r0, [sp, #12]
    756a:	f7fe f9e8 	bl	593e <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    756e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7572:	4a05      	ldr	r2, [pc, #20]	; (7588 <Ftm_Pwm_Ip_DeInitInstance+0x70>)
    7574:	2100      	movs	r1, #0
    7576:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    757a:	bf00      	nop
    757c:	b005      	add	sp, #20
    757e:	f85d fb04 	ldr.w	pc, [sp], #4
    7582:	bf00      	nop
    7584:	0000bd44 	.word	0x0000bd44
    7588:	1fff8ec4 	.word	0x1fff8ec4

0000758c <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    758c:	b500      	push	{lr}
    758e:	b085      	sub	sp, #20
    7590:	4603      	mov	r3, r0
    7592:	460a      	mov	r2, r1
    7594:	f88d 3007 	strb.w	r3, [sp, #7]
    7598:	4613      	mov	r3, r2
    759a:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    759e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75a2:	4a29      	ldr	r2, [pc, #164]	; (7648 <Ftm_Pwm_Ip_DeInitChannel+0xbc>)
    75a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75a8:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    75aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    75ae:	085b      	lsrs	r3, r3, #1
    75b0:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    75b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    75b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75bc:	4611      	mov	r1, r2
    75be:	4618      	mov	r0, r3
    75c0:	f7ff fb9e 	bl	6d00 <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    75c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    75c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    75cc:	491f      	ldr	r1, [pc, #124]	; (764c <Ftm_Pwm_Ip_DeInitChannel+0xc0>)
    75ce:	00d2      	lsls	r2, r2, #3
    75d0:	4413      	add	r3, r2
    75d2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    75d6:	f89d 1006 	ldrb.w	r1, [sp, #6]
    75da:	f89d 0007 	ldrb.w	r0, [sp, #7]
    75de:	2301      	movs	r3, #1
    75e0:	f000 fa4c 	bl	7a7c <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    75e4:	2100      	movs	r1, #0
    75e6:	9803      	ldr	r0, [sp, #12]
    75e8:	f7fe fb96 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    75ec:	2101      	movs	r1, #1
    75ee:	9803      	ldr	r0, [sp, #12]
    75f0:	f7fe fb57 	bl	5ca2 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    75f4:	2101      	movs	r1, #1
    75f6:	9803      	ldr	r0, [sp, #12]
    75f8:	f7fe fe65 	bl	62c6 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    75fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7600:	2200      	movs	r2, #0
    7602:	4619      	mov	r1, r3
    7604:	9803      	ldr	r0, [sp, #12]
    7606:	f7fe fbbf 	bl	5d88 <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    760a:	2101      	movs	r1, #1
    760c:	9803      	ldr	r0, [sp, #12]
    760e:	f7fe fb83 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    7612:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7616:	f89d 300b 	ldrb.w	r3, [sp, #11]
    761a:	005b      	lsls	r3, r3, #1
    761c:	490c      	ldr	r1, [pc, #48]	; (7650 <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    761e:	00d2      	lsls	r2, r2, #3
    7620:	440a      	add	r2, r1
    7622:	4413      	add	r3, r2
    7624:	2200      	movs	r2, #0
    7626:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    7628:	f89d 2007 	ldrb.w	r2, [sp, #7]
    762c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7630:	005b      	lsls	r3, r3, #1
    7632:	3301      	adds	r3, #1
    7634:	4906      	ldr	r1, [pc, #24]	; (7650 <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    7636:	00d2      	lsls	r2, r2, #3
    7638:	440a      	add	r2, r1
    763a:	4413      	add	r3, r2
    763c:	2200      	movs	r2, #0
    763e:	701a      	strb	r2, [r3, #0]

}
    7640:	bf00      	nop
    7642:	b005      	add	sp, #20
    7644:	f85d fb04 	ldr.w	pc, [sp], #4
    7648:	0000bd44 	.word	0x0000bd44
    764c:	1fff8f74 	.word	0x1fff8f74
    7650:	1fff8f54 	.word	0x1fff8f54

00007654 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    7654:	b500      	push	{lr}
    7656:	b085      	sub	sp, #20
    7658:	4603      	mov	r3, r0
    765a:	9100      	str	r1, [sp, #0]
    765c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7660:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7664:	4a15      	ldr	r2, [pc, #84]	; (76bc <Ftm_Pwm_Ip_InitChFault+0x68>)
    7666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    766a:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    766c:	9b00      	ldr	r3, [sp, #0]
    766e:	7819      	ldrb	r1, [r3, #0]
    7670:	9b00      	ldr	r3, [sp, #0]
    7672:	685b      	ldr	r3, [r3, #4]
    7674:	461a      	mov	r2, r3
    7676:	9803      	ldr	r0, [sp, #12]
    7678:	f7ff f9f6 	bl	6a68 <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    767c:	9b00      	ldr	r3, [sp, #0]
    767e:	7819      	ldrb	r1, [r3, #0]
    7680:	9b00      	ldr	r3, [sp, #0]
    7682:	7a1b      	ldrb	r3, [r3, #8]
    7684:	461a      	mov	r2, r3
    7686:	9803      	ldr	r0, [sp, #12]
    7688:	f7ff fa35 	bl	6af6 <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    768c:	9b00      	ldr	r3, [sp, #0]
    768e:	781b      	ldrb	r3, [r3, #0]
    7690:	2201      	movs	r2, #1
    7692:	4619      	mov	r1, r3
    7694:	9803      	ldr	r0, [sp, #12]
    7696:	f7ff fa0a 	bl	6aae <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    769a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    769e:	9a00      	ldr	r2, [sp, #0]
    76a0:	7812      	ldrb	r2, [r2, #0]
    76a2:	4610      	mov	r0, r2
    76a4:	9a00      	ldr	r2, [sp, #0]
    76a6:	68d2      	ldr	r2, [r2, #12]
    76a8:	4905      	ldr	r1, [pc, #20]	; (76c0 <Ftm_Pwm_Ip_InitChFault+0x6c>)
    76aa:	009b      	lsls	r3, r3, #2
    76ac:	4403      	add	r3, r0
    76ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76b2:	bf00      	nop
    76b4:	b005      	add	sp, #20
    76b6:	f85d fb04 	ldr.w	pc, [sp], #4
    76ba:	bf00      	nop
    76bc:	0000bd44 	.word	0x0000bd44
    76c0:	1fff8d64 	.word	0x1fff8d64

000076c4 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    76c4:	b500      	push	{lr}
    76c6:	b085      	sub	sp, #20
    76c8:	4603      	mov	r3, r0
    76ca:	9100      	str	r1, [sp, #0]
    76cc:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    76d0:	2300      	movs	r3, #0
    76d2:	f88d 300f 	strb.w	r3, [sp, #15]
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    76d6:	4b29      	ldr	r3, [pc, #164]	; (777c <Ftm_Pwm_Ip_Init+0xb8>)
    76d8:	2200      	movs	r2, #0
    76da:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    76dc:	9b00      	ldr	r3, [sp, #0]
    76de:	681a      	ldr	r2, [r3, #0]
    76e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76e4:	4611      	mov	r1, r2
    76e6:	4618      	mov	r0, r3
    76e8:	f7ff fcf6 	bl	70d8 <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    76ec:	2300      	movs	r3, #0
    76ee:	f88d 300f 	strb.w	r3, [sp, #15]
    76f2:	e011      	b.n	7718 <Ftm_Pwm_Ip_Init+0x54>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    76f4:	9b00      	ldr	r3, [sp, #0]
    76f6:	685a      	ldr	r2, [r3, #4]
    76f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    76fc:	009b      	lsls	r3, r3, #2
    76fe:	4413      	add	r3, r2
    7700:	681a      	ldr	r2, [r3, #0]
    7702:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7706:	4611      	mov	r1, r2
    7708:	4618      	mov	r0, r3
    770a:	f7ff fe61 	bl	73d0 <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    770e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7712:	3301      	adds	r3, #1
    7714:	f88d 300f 	strb.w	r3, [sp, #15]
    7718:	9b00      	ldr	r3, [sp, #0]
    771a:	7a1b      	ldrb	r3, [r3, #8]
    771c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7720:	429a      	cmp	r2, r3
    7722:	d3e7      	bcc.n	76f4 <Ftm_Pwm_Ip_Init+0x30>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    7724:	9b00      	ldr	r3, [sp, #0]
    7726:	7c1b      	ldrb	r3, [r3, #16]
    7728:	2b00      	cmp	r3, #0
    772a:	d01b      	beq.n	7764 <Ftm_Pwm_Ip_Init+0xa0>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    772c:	2300      	movs	r3, #0
    772e:	f88d 300f 	strb.w	r3, [sp, #15]
    7732:	e011      	b.n	7758 <Ftm_Pwm_Ip_Init+0x94>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    7734:	9b00      	ldr	r3, [sp, #0]
    7736:	68da      	ldr	r2, [r3, #12]
    7738:	f89d 300f 	ldrb.w	r3, [sp, #15]
    773c:	009b      	lsls	r3, r3, #2
    773e:	4413      	add	r3, r2
    7740:	681a      	ldr	r2, [r3, #0]
    7742:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7746:	4611      	mov	r1, r2
    7748:	4618      	mov	r0, r3
    774a:	f7ff ff83 	bl	7654 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    774e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7752:	3301      	adds	r3, #1
    7754:	f88d 300f 	strb.w	r3, [sp, #15]
    7758:	9b00      	ldr	r3, [sp, #0]
    775a:	7c1b      	ldrb	r3, [r3, #16]
    775c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7760:	429a      	cmp	r2, r3
    7762:	d3e7      	bcc.n	7734 <Ftm_Pwm_Ip_Init+0x70>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    7764:	9b00      	ldr	r3, [sp, #0]
    7766:	681a      	ldr	r2, [r3, #0]
    7768:	f89d 3007 	ldrb.w	r3, [sp, #7]
    776c:	4611      	mov	r1, r2
    776e:	4618      	mov	r0, r3
    7770:	f7ff fd3c 	bl	71ec <Ftm_Pwm_Ip_InitInstanceStart>
}
    7774:	bf00      	nop
    7776:	b005      	add	sp, #20
    7778:	f85d fb04 	ldr.w	pc, [sp], #4
    777c:	1fff8cf8 	.word	0x1fff8cf8

00007780 <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    7780:	b500      	push	{lr}
    7782:	b085      	sub	sp, #20
    7784:	4603      	mov	r3, r0
    7786:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    778a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    778e:	4a1e      	ldr	r2, [pc, #120]	; (7808 <Ftm_Pwm_Ip_DeInit+0x88>)
    7790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7794:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    7796:	2300      	movs	r3, #0
    7798:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    779c:	9802      	ldr	r0, [sp, #8]
    779e:	f7ff f80b 	bl	67b8 <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    77a2:	2300      	movs	r3, #0
    77a4:	f88d 300f 	strb.w	r3, [sp, #15]
    77a8:	e021      	b.n	77ee <Ftm_Pwm_Ip_DeInit+0x6e>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    77aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    77ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    77b2:	4916      	ldr	r1, [pc, #88]	; (780c <Ftm_Pwm_Ip_DeInit+0x8c>)
    77b4:	00d2      	lsls	r2, r2, #3
    77b6:	4413      	add	r3, r2
    77b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    77bc:	2b00      	cmp	r3, #0
    77be:	d011      	beq.n	77e4 <Ftm_Pwm_Ip_DeInit+0x64>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    77c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    77c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77c8:	4611      	mov	r1, r2
    77ca:	4618      	mov	r0, r3
    77cc:	f7ff fede 	bl	758c <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    77d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    77d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    77d8:	490c      	ldr	r1, [pc, #48]	; (780c <Ftm_Pwm_Ip_DeInit+0x8c>)
    77da:	00d2      	lsls	r2, r2, #3
    77dc:	4413      	add	r3, r2
    77de:	2200      	movs	r2, #0
    77e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    77e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    77e8:	3301      	adds	r3, #1
    77ea:	f88d 300f 	strb.w	r3, [sp, #15]
    77ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    77f2:	2b07      	cmp	r3, #7
    77f4:	d9d9      	bls.n	77aa <Ftm_Pwm_Ip_DeInit+0x2a>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    77f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77fa:	4618      	mov	r0, r3
    77fc:	f7ff fe8c 	bl	7518 <Ftm_Pwm_Ip_DeInitInstance>
}
    7800:	bf00      	nop
    7802:	b005      	add	sp, #20
    7804:	f85d fb04 	ldr.w	pc, [sp], #4
    7808:	0000bd44 	.word	0x0000bd44
    780c:	1fff8ed4 	.word	0x1fff8ed4

00007810 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    7810:	b510      	push	{r4, lr}
    7812:	b088      	sub	sp, #32
    7814:	4604      	mov	r4, r0
    7816:	4608      	mov	r0, r1
    7818:	4611      	mov	r1, r2
    781a:	461a      	mov	r2, r3
    781c:	4623      	mov	r3, r4
    781e:	f88d 300f 	strb.w	r3, [sp, #15]
    7822:	4603      	mov	r3, r0
    7824:	f88d 300e 	strb.w	r3, [sp, #14]
    7828:	460b      	mov	r3, r1
    782a:	f8ad 300c 	strh.w	r3, [sp, #12]
    782e:	4613      	mov	r3, r2
    7830:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7834:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7838:	4a54      	ldr	r2, [pc, #336]	; (798c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x17c>)
    783a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    783e:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    7840:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7844:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    7848:	f89d 300e 	ldrb.w	r3, [sp, #14]
    784c:	085b      	lsrs	r3, r3, #1
    784e:	f88d 3019 	strb.w	r3, [sp, #25]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    7852:	f002 fb69 	bl	9f28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    7856:	f89d 200f 	ldrb.w	r2, [sp, #15]
    785a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    785e:	494c      	ldr	r1, [pc, #304]	; (7990 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x180>)
    7860:	00d2      	lsls	r2, r2, #3
    7862:	4413      	add	r3, r2
    7864:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7868:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    786c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7870:	4619      	mov	r1, r3
    7872:	9807      	ldr	r0, [sp, #28]
    7874:	f7fe feb0 	bl	65d8 <Ftm_Pwm_Ip_GetChannelMode>
    7878:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    787a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    787e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7882:	4944      	ldr	r1, [pc, #272]	; (7994 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    7884:	00d2      	lsls	r2, r2, #3
    7886:	4413      	add	r3, r2
    7888:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    788c:	2b02      	cmp	r3, #2
    788e:	d111      	bne.n	78b4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xa4>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    7890:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7894:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7898:	493e      	ldr	r1, [pc, #248]	; (7994 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    789a:	00d2      	lsls	r2, r2, #3
    789c:	4413      	add	r3, r2
    789e:	2201      	movs	r2, #1
    78a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    78a4:	f89d 100e 	ldrb.w	r1, [sp, #14]
    78a8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    78ac:	2300      	movs	r3, #0
    78ae:	2200      	movs	r2, #0
    78b0:	f000 f8e4 	bl	7a7c <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    78b4:	9b05      	ldr	r3, [sp, #20]
    78b6:	2b0a      	cmp	r3, #10
    78b8:	d008      	beq.n	78cc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
    78ba:	9b05      	ldr	r3, [sp, #20]
    78bc:	2b09      	cmp	r3, #9
    78be:	d005      	beq.n	78cc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    78c0:	9b05      	ldr	r3, [sp, #20]
    78c2:	2b12      	cmp	r3, #18
    78c4:	d002      	beq.n	78cc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    78c6:	9b05      	ldr	r3, [sp, #20]
    78c8:	2b11      	cmp	r3, #17
    78ca:	d10c      	bne.n	78e6 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xd6>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    78cc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    78d0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    78d4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    78d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    78dc:	9300      	str	r3, [sp, #0]
    78de:	2300      	movs	r3, #0
    78e0:	f000 f992 	bl	7c08 <Ftm_Pwm_Ip_UpdatePwmChannel>
    78e4:	e04c      	b.n	7980 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    78e6:	9b05      	ldr	r3, [sp, #20]
    78e8:	2b22      	cmp	r3, #34	; 0x22
    78ea:	d008      	beq.n	78fe <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
    78ec:	9b05      	ldr	r3, [sp, #20]
    78ee:	2b62      	cmp	r3, #98	; 0x62
    78f0:	d005      	beq.n	78fe <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    78f2:	9b05      	ldr	r3, [sp, #20]
    78f4:	2b61      	cmp	r3, #97	; 0x61
    78f6:	d002      	beq.n	78fe <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    78f8:	9b05      	ldr	r3, [sp, #20]
    78fa:	2b21      	cmp	r3, #33	; 0x21
    78fc:	d140      	bne.n	7980 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    78fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7902:	f89d 3019 	ldrb.w	r3, [sp, #25]
    7906:	4924      	ldr	r1, [pc, #144]	; (7998 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    7908:	0092      	lsls	r2, r2, #2
    790a:	4413      	add	r3, r2
    790c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7910:	2b00      	cmp	r3, #0
    7912:	d10d      	bne.n	7930 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x120>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    7914:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    7918:	f89d 100e 	ldrb.w	r1, [sp, #14]
    791c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    7920:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7924:	9300      	str	r3, [sp, #0]
    7926:	4613      	mov	r3, r2
    7928:	2200      	movs	r2, #0
    792a:	f000 f96d 	bl	7c08 <Ftm_Pwm_Ip_UpdatePwmChannel>
    792e:	e027      	b.n	7980 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    7930:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7934:	f89d 3019 	ldrb.w	r3, [sp, #25]
    7938:	4917      	ldr	r1, [pc, #92]	; (7998 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    793a:	0092      	lsls	r2, r2, #2
    793c:	4413      	add	r3, r2
    793e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    7942:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    7946:	f89d 300f 	ldrb.w	r3, [sp, #15]
    794a:	4618      	mov	r0, r3
    794c:	f7ff f90a 	bl	6b64 <Ftm_Pwm_Ip_CalculatePhaseShift>
    7950:	4603      	mov	r3, r0
    7952:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    7956:	f89d 200f 	ldrb.w	r2, [sp, #15]
    795a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    795e:	490e      	ldr	r1, [pc, #56]	; (7998 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    7960:	0092      	lsls	r2, r2, #2
    7962:	4413      	add	r3, r2
    7964:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    7968:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    796c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7970:	f89d 000f 	ldrb.w	r0, [sp, #15]
    7974:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7978:	9300      	str	r3, [sp, #0]
    797a:	4623      	mov	r3, r4
    797c:	f000 f944 	bl	7c08 <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    7980:	f002 fafe 	bl	9f80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    7984:	bf00      	nop
    7986:	b008      	add	sp, #32
    7988:	bd10      	pop	{r4, pc}
    798a:	bf00      	nop
    798c:	0000bd44 	.word	0x0000bd44
    7990:	1fff8d04 	.word	0x1fff8d04
    7994:	1fff8ed4 	.word	0x1fff8ed4
    7998:	1fff8d44 	.word	0x1fff8d44

0000799c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    799c:	b510      	push	{r4, lr}
    799e:	b084      	sub	sp, #16
    79a0:	4604      	mov	r4, r0
    79a2:	4608      	mov	r0, r1
    79a4:	4611      	mov	r1, r2
    79a6:	461a      	mov	r2, r3
    79a8:	4623      	mov	r3, r4
    79aa:	f88d 3007 	strb.w	r3, [sp, #7]
    79ae:	4603      	mov	r3, r0
    79b0:	f88d 3006 	strb.w	r3, [sp, #6]
    79b4:	460b      	mov	r3, r1
    79b6:	f8ad 3004 	strh.w	r3, [sp, #4]
    79ba:	4613      	mov	r3, r2
    79bc:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    79c0:	2300      	movs	r3, #0
    79c2:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    79c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    79ca:	4a29      	ldr	r2, [pc, #164]	; (7a70 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd4>)
    79cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79d0:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    79d2:	f002 fafb 	bl	9fcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    79d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    79da:	f89d 3006 	ldrb.w	r3, [sp, #6]
    79de:	4925      	ldr	r1, [pc, #148]	; (7a74 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    79e0:	00d2      	lsls	r2, r2, #3
    79e2:	4413      	add	r3, r2
    79e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    79e8:	2b02      	cmp	r3, #2
    79ea:	d111      	bne.n	7a10 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x74>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    79ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
    79f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    79f4:	491f      	ldr	r1, [pc, #124]	; (7a74 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    79f6:	00d2      	lsls	r2, r2, #3
    79f8:	4413      	add	r3, r2
    79fa:	2201      	movs	r2, #1
    79fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    7a00:	f89d 1006 	ldrb.w	r1, [sp, #6]
    7a04:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7a08:	2300      	movs	r3, #0
    7a0a:	2200      	movs	r2, #0
    7a0c:	f000 f836 	bl	7a7c <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    7a10:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7a14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a18:	2200      	movs	r2, #0
    7a1a:	4618      	mov	r0, r3
    7a1c:	f000 f988 	bl	7d30 <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    7a20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a24:	4914      	ldr	r1, [pc, #80]	; (7a78 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xdc>)
    7a26:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7a2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    7a2e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7a32:	2b00      	cmp	r3, #0
    7a34:	d103      	bne.n	7a3e <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xa2>
    {
        TempDutyCycle = (uint16)0U;
    7a36:	2300      	movs	r3, #0
    7a38:	f8ad 300e 	strh.w	r3, [sp, #14]
    7a3c:	e003      	b.n	7a46 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xaa>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    7a3e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7a42:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    7a46:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7a4a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7a4e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    7a52:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7a56:	f7ff fedb 	bl	7810 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    7a5a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7a5e:	4619      	mov	r1, r3
    7a60:	9802      	ldr	r0, [sp, #8]
    7a62:	f7fe f959 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    7a66:	f002 fadd 	bl	a024 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    7a6a:	bf00      	nop
    7a6c:	b004      	add	sp, #16
    7a6e:	bd10      	pop	{r4, pc}
    7a70:	0000bd44 	.word	0x0000bd44
    7a74:	1fff8ed4 	.word	0x1fff8ed4
    7a78:	1fff8cfc 	.word	0x1fff8cfc

00007a7c <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    7a7c:	b500      	push	{lr}
    7a7e:	b089      	sub	sp, #36	; 0x24
    7a80:	9200      	str	r2, [sp, #0]
    7a82:	461a      	mov	r2, r3
    7a84:	4603      	mov	r3, r0
    7a86:	f88d 3007 	strb.w	r3, [sp, #7]
    7a8a:	460b      	mov	r3, r1
    7a8c:	f88d 3006 	strb.w	r3, [sp, #6]
    7a90:	4613      	mov	r3, r2
    7a92:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7a96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a9a:	4a58      	ldr	r2, [pc, #352]	; (7bfc <Ftm_Pwm_Ip_SwOutputControl+0x180>)
    7a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aa0:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    7aa2:	2300      	movs	r3, #0
    7aa4:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    7aa8:	2300      	movs	r3, #0
    7aaa:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    7aae:	2300      	movs	r3, #0
    7ab0:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    7ab4:	2300      	movs	r3, #0
    7ab6:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    7aba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7abe:	4619      	mov	r1, r3
    7ac0:	9805      	ldr	r0, [sp, #20]
    7ac2:	f7fe fd89 	bl	65d8 <Ftm_Pwm_Ip_GetChannelMode>
    7ac6:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    7ac8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7acc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7ad0:	494b      	ldr	r1, [pc, #300]	; (7c00 <Ftm_Pwm_Ip_SwOutputControl+0x184>)
    7ad2:	00d2      	lsls	r2, r2, #3
    7ad4:	4413      	add	r3, r2
    7ad6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    7ada:	2b02      	cmp	r3, #2
    7adc:	d109      	bne.n	7af2 <Ftm_Pwm_Ip_SwOutputControl+0x76>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    7ade:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7ae2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7ae6:	4947      	ldr	r1, [pc, #284]	; (7c04 <Ftm_Pwm_Ip_SwOutputControl+0x188>)
    7ae8:	00d2      	lsls	r2, r2, #3
    7aea:	4413      	add	r3, r2
    7aec:	2200      	movs	r2, #0
    7aee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    7af2:	9805      	ldr	r0, [sp, #20]
    7af4:	f7fe fd5f 	bl	65b6 <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    7af8:	4603      	mov	r3, r0
    7afa:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7afe:	9b03      	ldr	r3, [sp, #12]
    7b00:	2b22      	cmp	r3, #34	; 0x22
    7b02:	d008      	beq.n	7b16 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
    7b04:	9b03      	ldr	r3, [sp, #12]
    7b06:	2b62      	cmp	r3, #98	; 0x62
    7b08:	d005      	beq.n	7b16 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7b0a:	9b03      	ldr	r3, [sp, #12]
    7b0c:	2b61      	cmp	r3, #97	; 0x61
    7b0e:	d002      	beq.n	7b16 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7b10:	9b03      	ldr	r3, [sp, #12]
    7b12:	2b21      	cmp	r3, #33	; 0x21
    7b14:	d103      	bne.n	7b1e <Ftm_Pwm_Ip_SwOutputControl+0xa2>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    7b16:	2303      	movs	r3, #3
    7b18:	f8ad 301c 	strh.w	r3, [sp, #28]
    7b1c:	e002      	b.n	7b24 <Ftm_Pwm_Ip_SwOutputControl+0xa8>
    }
    else
    {
        ChannelMask = (uint16)1U;
    7b1e:	2301      	movs	r3, #1
    7b20:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    7b24:	9805      	ldr	r0, [sp, #20]
    7b26:	f7fe fd4f 	bl	65c8 <Ftm_Pwm_Ip_GetPolInstance>
    7b2a:	4603      	mov	r3, r0
    7b2c:	4619      	mov	r1, r3
    7b2e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7b32:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b36:	fa02 f303 	lsl.w	r3, r2, r3
    7b3a:	b29b      	uxth	r3, r3
    7b3c:	400b      	ands	r3, r1
    7b3e:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    7b42:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    7b46:	021b      	lsls	r3, r3, #8
    7b48:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    7b4c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7b50:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b54:	3308      	adds	r3, #8
    7b56:	fa02 f303 	lsl.w	r3, r2, r3
    7b5a:	b29b      	uxth	r3, r3
    7b5c:	43db      	mvns	r3, r3
    7b5e:	b29a      	uxth	r2, r3
    7b60:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7b64:	4013      	ands	r3, r2
    7b66:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    7b6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b6e:	2b00      	cmp	r3, #0
    7b70:	d027      	beq.n	7bc2 <Ftm_Pwm_Ip_SwOutputControl+0x146>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    7b72:	9b00      	ldr	r3, [sp, #0]
    7b74:	2b01      	cmp	r3, #1
    7b76:	d109      	bne.n	7b8c <Ftm_Pwm_Ip_SwOutputControl+0x110>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    7b78:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7b7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b80:	3308      	adds	r3, #8
    7b82:	fa02 f303 	lsl.w	r3, r2, r3
    7b86:	f8ad 301a 	strh.w	r3, [sp, #26]
    7b8a:	e002      	b.n	7b92 <Ftm_Pwm_Ip_SwOutputControl+0x116>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    7b8c:	2300      	movs	r3, #0
    7b8e:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    7b92:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    7b96:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    7b9a:	4053      	eors	r3, r2
    7b9c:	b29a      	uxth	r2, r3
    7b9e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7ba2:	4313      	orrs	r3, r2
    7ba4:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    7ba8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7bac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7bb0:	fa02 f303 	lsl.w	r3, r2, r3
    7bb4:	b29a      	uxth	r2, r3
    7bb6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7bba:	4313      	orrs	r3, r2
    7bbc:	f8ad 301e 	strh.w	r3, [sp, #30]
    7bc0:	e00d      	b.n	7bde <Ftm_Pwm_Ip_SwOutputControl+0x162>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    7bc2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7bc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7bca:	fa02 f303 	lsl.w	r3, r2, r3
    7bce:	b29b      	uxth	r3, r3
    7bd0:	43db      	mvns	r3, r3
    7bd2:	b29a      	uxth	r2, r3
    7bd4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7bd8:	4013      	ands	r3, r2
    7bda:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    7bde:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7be2:	4619      	mov	r1, r3
    7be4:	9805      	ldr	r0, [sp, #20]
    7be6:	f7fe fc86 	bl	64f6 <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    7bea:	2101      	movs	r1, #1
    7bec:	9805      	ldr	r0, [sp, #20]
    7bee:	f7fe f893 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    7bf2:	bf00      	nop
    7bf4:	b009      	add	sp, #36	; 0x24
    7bf6:	f85d fb04 	ldr.w	pc, [sp], #4
    7bfa:	bf00      	nop
    7bfc:	0000bd44 	.word	0x0000bd44
    7c00:	1fff8ed4 	.word	0x1fff8ed4
    7c04:	1fff8d04 	.word	0x1fff8d04

00007c08 <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    7c08:	b510      	push	{r4, lr}
    7c0a:	b086      	sub	sp, #24
    7c0c:	4604      	mov	r4, r0
    7c0e:	4608      	mov	r0, r1
    7c10:	4611      	mov	r1, r2
    7c12:	461a      	mov	r2, r3
    7c14:	4623      	mov	r3, r4
    7c16:	f88d 3007 	strb.w	r3, [sp, #7]
    7c1a:	4603      	mov	r3, r0
    7c1c:	f88d 3006 	strb.w	r3, [sp, #6]
    7c20:	460b      	mov	r3, r1
    7c22:	f8ad 3004 	strh.w	r3, [sp, #4]
    7c26:	4613      	mov	r3, r2
    7c28:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7c2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c30:	4a3d      	ldr	r2, [pc, #244]	; (7d28 <Ftm_Pwm_Ip_UpdatePwmChannel+0x120>)
    7c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c36:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    7c38:	2300      	movs	r3, #0
    7c3a:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    7c3c:	2300      	movs	r3, #0
    7c3e:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    7c42:	2300      	movs	r3, #0
    7c44:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    7c48:	2300      	movs	r3, #0
    7c4a:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    7c4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7c52:	085b      	lsrs	r3, r3, #1
    7c54:	f88d 3009 	strb.w	r3, [sp, #9]
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    7c58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c5c:	4a33      	ldr	r2, [pc, #204]	; (7d2c <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>)
    7c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7c62:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    7c66:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7c6a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7c6e:	429a      	cmp	r2, r3
    7c70:	d805      	bhi.n	7c7e <Ftm_Pwm_Ip_UpdatePwmChannel+0x76>
    7c72:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    7c76:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7c7a:	429a      	cmp	r2, r3
    7c7c:	d903      	bls.n	7c86 <Ftm_Pwm_Ip_UpdatePwmChannel+0x7e>
    7c7e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7c82:	2b00      	cmp	r3, #0
    7c84:	d108      	bne.n	7c98 <Ftm_Pwm_Ip_UpdatePwmChannel+0x90>
    {
        HwFirstEdge = FirstEdge;
    7c86:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7c8a:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    7c8e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7c92:	f8ad 3010 	strh.w	r3, [sp, #16]
    7c96:	e001      	b.n	7c9c <Ftm_Pwm_Ip_UpdatePwmChannel+0x94>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    7c98:	2301      	movs	r3, #1
    7c9a:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    7c9c:	9b05      	ldr	r3, [sp, #20]
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	d13e      	bne.n	7d20 <Ftm_Pwm_Ip_UpdatePwmChannel+0x118>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    7ca2:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7ca6:	4619      	mov	r1, r3
    7ca8:	9803      	ldr	r0, [sp, #12]
    7caa:	f7fe f8d5 	bl	5e58 <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    7cae:	4603      	mov	r3, r0
    7cb0:	2b00      	cmp	r3, #0
    7cb2:	d016      	beq.n	7ce2 <Ftm_Pwm_Ip_UpdatePwmChannel+0xda>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    7cb4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7cb8:	005b      	lsls	r3, r3, #1
    7cba:	b2db      	uxtb	r3, r3
    7cbc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    7cc0:	4619      	mov	r1, r3
    7cc2:	9803      	ldr	r0, [sp, #12]
    7cc4:	f7fd ff70 	bl	5ba8 <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    7cc8:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7ccc:	005b      	lsls	r3, r3, #1
    7cce:	b2db      	uxtb	r3, r3
    7cd0:	3301      	adds	r3, #1
    7cd2:	b2db      	uxtb	r3, r3
    7cd4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    7cd8:	4619      	mov	r1, r3
    7cda:	9803      	ldr	r0, [sp, #12]
    7cdc:	f7fd ff64 	bl	5ba8 <Ftm_Pwm_Ip_SetChnCountVal>
    7ce0:	e018      	b.n	7d14 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    7ce2:	9803      	ldr	r0, [sp, #12]
    7ce4:	f7fd fde9 	bl	58ba <Ftm_Pwm_Ip_GetCpwms>
    7ce8:	4603      	mov	r3, r0
    7cea:	2b01      	cmp	r3, #1
    7cec:	d10a      	bne.n	7d04 <Ftm_Pwm_Ip_UpdatePwmChannel+0xfc>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    7cee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    7cf2:	085b      	lsrs	r3, r3, #1
    7cf4:	b29a      	uxth	r2, r3
    7cf6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7cfa:	4619      	mov	r1, r3
    7cfc:	9803      	ldr	r0, [sp, #12]
    7cfe:	f7fd ff53 	bl	5ba8 <Ftm_Pwm_Ip_SetChnCountVal>
    7d02:	e007      	b.n	7d14 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    7d04:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    7d08:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d0c:	4619      	mov	r1, r3
    7d0e:	9803      	ldr	r0, [sp, #12]
    7d10:	f7fd ff4a 	bl	5ba8 <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    7d14:	f89d 3020 	ldrb.w	r3, [sp, #32]
    7d18:	4619      	mov	r1, r3
    7d1a:	9803      	ldr	r0, [sp, #12]
    7d1c:	f7fd fffc 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    7d20:	9b05      	ldr	r3, [sp, #20]
}
    7d22:	4618      	mov	r0, r3
    7d24:	b006      	add	sp, #24
    7d26:	bd10      	pop	{r4, pc}
    7d28:	0000bd44 	.word	0x0000bd44
    7d2c:	1fff8cfc 	.word	0x1fff8cfc

00007d30 <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    7d30:	b500      	push	{lr}
    7d32:	b085      	sub	sp, #20
    7d34:	4603      	mov	r3, r0
    7d36:	9100      	str	r1, [sp, #0]
    7d38:	f88d 3007 	strb.w	r3, [sp, #7]
    7d3c:	4613      	mov	r3, r2
    7d3e:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7d42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d46:	4a16      	ldr	r2, [pc, #88]	; (7da0 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x70>)
    7d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d4c:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    7d4e:	2300      	movs	r3, #0
    7d50:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    FtmPeriod = NewValue;
    7d52:	9b00      	ldr	r3, [sp, #0]
    7d54:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    7d56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d5a:	9a00      	ldr	r2, [sp, #0]
    7d5c:	b291      	uxth	r1, r2
    7d5e:	4a11      	ldr	r2, [pc, #68]	; (7da4 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x74>)
    7d60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    7d64:	9802      	ldr	r0, [sp, #8]
    7d66:	f7fd fda8 	bl	58ba <Ftm_Pwm_Ip_GetCpwms>
    7d6a:	4603      	mov	r3, r0
    7d6c:	2b01      	cmp	r3, #1
    7d6e:	d103      	bne.n	7d78 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x48>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    7d70:	9b03      	ldr	r3, [sp, #12]
    7d72:	085b      	lsrs	r3, r3, #1
    7d74:	9303      	str	r3, [sp, #12]
    7d76:	e002      	b.n	7d7e <Ftm_Pwm_Ip_UpdatePwmPeriod+0x4e>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    7d78:	9b03      	ldr	r3, [sp, #12]
    7d7a:	3b01      	subs	r3, #1
    7d7c:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    7d7e:	9b03      	ldr	r3, [sp, #12]
    7d80:	b29b      	uxth	r3, r3
    7d82:	4619      	mov	r1, r3
    7d84:	9802      	ldr	r0, [sp, #8]
    7d86:	f7fd fdeb 	bl	5960 <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    7d8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d8e:	4619      	mov	r1, r3
    7d90:	9802      	ldr	r0, [sp, #8]
    7d92:	f7fd ffc1 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    7d96:	2300      	movs	r3, #0
}
    7d98:	4618      	mov	r0, r3
    7d9a:	b005      	add	sp, #20
    7d9c:	f85d fb04 	ldr.w	pc, [sp], #4
    7da0:	0000bd44 	.word	0x0000bd44
    7da4:	1fff8cfc 	.word	0x1fff8cfc

00007da8 <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    7da8:	b500      	push	{lr}
    7daa:	b085      	sub	sp, #20
    7dac:	4603      	mov	r3, r0
    7dae:	460a      	mov	r2, r1
    7db0:	f88d 3007 	strb.w	r3, [sp, #7]
    7db4:	4613      	mov	r3, r2
    7db6:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7dba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7dbe:	4a0d      	ldr	r2, [pc, #52]	; (7df4 <Ftm_Pwm_Ip_GetOutputState+0x4c>)
    7dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dc4:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    7dc6:	f002 f9a5 	bl	a114 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    7dca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7dce:	4619      	mov	r1, r3
    7dd0:	9802      	ldr	r0, [sp, #8]
    7dd2:	f7fd fed3 	bl	5b7c <Ftm_Pwm_Ip_GetChOutputValue>
    7dd6:	4603      	mov	r3, r0
    7dd8:	2b00      	cmp	r3, #0
    7dda:	d002      	beq.n	7de2 <Ftm_Pwm_Ip_GetOutputState+0x3a>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    7ddc:	2301      	movs	r3, #1
    7dde:	9303      	str	r3, [sp, #12]
    7de0:	e001      	b.n	7de6 <Ftm_Pwm_Ip_GetOutputState+0x3e>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    7de2:	2300      	movs	r3, #0
    7de4:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    7de6:	f002 f9c1 	bl	a16c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    7dea:	9b03      	ldr	r3, [sp, #12]
}
    7dec:	4618      	mov	r0, r3
    7dee:	b005      	add	sp, #20
    7df0:	f85d fb04 	ldr.w	pc, [sp], #4
    7df4:	0000bd44 	.word	0x0000bd44

00007df8 <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    7df8:	b500      	push	{lr}
    7dfa:	b087      	sub	sp, #28
    7dfc:	4603      	mov	r3, r0
    7dfe:	9100      	str	r1, [sp, #0]
    7e00:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7e04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e08:	4a38      	ldr	r2, [pc, #224]	; (7eec <Ftm_Pwm_Ip_DisableNotification+0xf4>)
    7e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e0e:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    7e10:	9b00      	ldr	r3, [sp, #0]
    7e12:	f88d 3013 	strb.w	r3, [sp, #19]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    7e16:	f002 f9cf 	bl	a1b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    7e1a:	9b00      	ldr	r3, [sp, #0]
    7e1c:	2b00      	cmp	r3, #0
    7e1e:	d014      	beq.n	7e4a <Ftm_Pwm_Ip_DisableNotification+0x52>
    7e20:	9b00      	ldr	r3, [sp, #0]
    7e22:	2b01      	cmp	r3, #1
    7e24:	d011      	beq.n	7e4a <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    7e26:	9b00      	ldr	r3, [sp, #0]
    7e28:	2b02      	cmp	r3, #2
    7e2a:	d00e      	beq.n	7e4a <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    7e2c:	9b00      	ldr	r3, [sp, #0]
    7e2e:	2b03      	cmp	r3, #3
    7e30:	d00b      	beq.n	7e4a <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    7e32:	9b00      	ldr	r3, [sp, #0]
    7e34:	2b04      	cmp	r3, #4
    7e36:	d008      	beq.n	7e4a <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    7e38:	9b00      	ldr	r3, [sp, #0]
    7e3a:	2b05      	cmp	r3, #5
    7e3c:	d005      	beq.n	7e4a <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    7e3e:	9b00      	ldr	r3, [sp, #0]
    7e40:	2b06      	cmp	r3, #6
    7e42:	d002      	beq.n	7e4a <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    7e44:	9b00      	ldr	r3, [sp, #0]
    7e46:	2b07      	cmp	r3, #7
    7e48:	d136      	bne.n	7eb8 <Ftm_Pwm_Ip_DisableNotification+0xc0>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    7e4a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7e4e:	085b      	lsrs	r3, r3, #1
    7e50:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    7e54:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7e58:	4619      	mov	r1, r3
    7e5a:	9805      	ldr	r0, [sp, #20]
    7e5c:	f7fe fbbc 	bl	65d8 <Ftm_Pwm_Ip_GetChannelMode>
    7e60:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    7e62:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7e66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e6a:	4611      	mov	r1, r2
    7e6c:	4618      	mov	r0, r3
    7e6e:	f7fe ff47 	bl	6d00 <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7e72:	9b03      	ldr	r3, [sp, #12]
    7e74:	2b22      	cmp	r3, #34	; 0x22
    7e76:	d008      	beq.n	7e8a <Ftm_Pwm_Ip_DisableNotification+0x92>
    7e78:	9b03      	ldr	r3, [sp, #12]
    7e7a:	2b62      	cmp	r3, #98	; 0x62
    7e7c:	d005      	beq.n	7e8a <Ftm_Pwm_Ip_DisableNotification+0x92>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7e7e:	9b03      	ldr	r3, [sp, #12]
    7e80:	2b61      	cmp	r3, #97	; 0x61
    7e82:	d002      	beq.n	7e8a <Ftm_Pwm_Ip_DisableNotification+0x92>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7e84:	9b03      	ldr	r3, [sp, #12]
    7e86:	2b21      	cmp	r3, #33	; 0x21
    7e88:	d129      	bne.n	7ede <Ftm_Pwm_Ip_DisableNotification+0xe6>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    7e8a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7e8e:	005b      	lsls	r3, r3, #1
    7e90:	b2da      	uxtb	r2, r3
    7e92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e96:	4611      	mov	r1, r2
    7e98:	4618      	mov	r0, r3
    7e9a:	f7fe ff31 	bl	6d00 <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    7e9e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7ea2:	005b      	lsls	r3, r3, #1
    7ea4:	b2db      	uxtb	r3, r3
    7ea6:	3301      	adds	r3, #1
    7ea8:	b2da      	uxtb	r2, r3
    7eaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7eae:	4611      	mov	r1, r2
    7eb0:	4618      	mov	r0, r3
    7eb2:	f7fe ff25 	bl	6d00 <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7eb6:	e012      	b.n	7ede <Ftm_Pwm_Ip_DisableNotification+0xe6>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    7eb8:	9b00      	ldr	r3, [sp, #0]
    7eba:	2b0a      	cmp	r3, #10
    7ebc:	d107      	bne.n	7ece <Ftm_Pwm_Ip_DisableNotification+0xd6>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
    7ebe:	2100      	movs	r1, #0
    7ec0:	9805      	ldr	r0, [sp, #20]
    7ec2:	f7fe fd88 	bl	69d6 <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    7ec6:	9805      	ldr	r0, [sp, #20]
    7ec8:	f7fe fd9b 	bl	6a02 <Ftm_Pwm_Ip_ClearFaultFlag>
    7ecc:	e008      	b.n	7ee0 <Ftm_Pwm_Ip_DisableNotification+0xe8>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    7ece:	9805      	ldr	r0, [sp, #20]
    7ed0:	f7fd fd18 	bl	5904 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    7ed4:	2100      	movs	r1, #0
    7ed6:	9805      	ldr	r0, [sp, #20]
    7ed8:	f7fd fcfd 	bl	58d6 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    7edc:	e000      	b.n	7ee0 <Ftm_Pwm_Ip_DisableNotification+0xe8>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7ede:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
    7ee0:	f002 f996 	bl	a210 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
    7ee4:	bf00      	nop
    7ee6:	b007      	add	sp, #28
    7ee8:	f85d fb04 	ldr.w	pc, [sp], #4
    7eec:	0000bd44 	.word	0x0000bd44

00007ef0 <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
    7ef0:	b500      	push	{lr}
    7ef2:	b087      	sub	sp, #28
    7ef4:	4603      	mov	r3, r0
    7ef6:	460a      	mov	r2, r1
    7ef8:	f88d 3007 	strb.w	r3, [sp, #7]
    7efc:	4613      	mov	r3, r2
    7efe:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7f02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f06:	4a22      	ldr	r2, [pc, #136]	; (7f90 <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
    7f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f0c:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
    7f0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7f12:	085b      	lsrs	r3, r3, #1
    7f14:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    7f18:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7f1c:	4619      	mov	r1, r3
    7f1e:	9805      	ldr	r0, [sp, #20]
    7f20:	f7fe fb5a 	bl	65d8 <Ftm_Pwm_Ip_GetChannelMode>
    7f24:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
    7f26:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7f2a:	2201      	movs	r2, #1
    7f2c:	4619      	mov	r1, r3
    7f2e:	9805      	ldr	r0, [sp, #20]
    7f30:	f7fd fde9 	bl	5b06 <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7f34:	9b03      	ldr	r3, [sp, #12]
    7f36:	2b22      	cmp	r3, #34	; 0x22
    7f38:	d008      	beq.n	7f4c <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
    7f3a:	9b03      	ldr	r3, [sp, #12]
    7f3c:	2b62      	cmp	r3, #98	; 0x62
    7f3e:	d005      	beq.n	7f4c <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7f40:	9b03      	ldr	r3, [sp, #12]
    7f42:	2b61      	cmp	r3, #97	; 0x61
    7f44:	d002      	beq.n	7f4c <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7f46:	9b03      	ldr	r3, [sp, #12]
    7f48:	2b21      	cmp	r3, #33	; 0x21
    7f4a:	d11d      	bne.n	7f88 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
    7f4c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7f50:	005b      	lsls	r3, r3, #1
    7f52:	b2db      	uxtb	r3, r3
    7f54:	3301      	adds	r3, #1
    7f56:	b2db      	uxtb	r3, r3
    7f58:	4619      	mov	r1, r3
    7f5a:	9805      	ldr	r0, [sp, #20]
    7f5c:	f7fd fdf6 	bl	5b4c <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
    7f60:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7f64:	005b      	lsls	r3, r3, #1
    7f66:	b2db      	uxtb	r3, r3
    7f68:	2201      	movs	r2, #1
    7f6a:	4619      	mov	r1, r3
    7f6c:	9805      	ldr	r0, [sp, #20]
    7f6e:	f7fd fdca 	bl	5b06 <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
    7f72:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7f76:	005b      	lsls	r3, r3, #1
    7f78:	b2db      	uxtb	r3, r3
    7f7a:	3301      	adds	r3, #1
    7f7c:	b2db      	uxtb	r3, r3
    7f7e:	2201      	movs	r2, #1
    7f80:	4619      	mov	r1, r3
    7f82:	9805      	ldr	r0, [sp, #20]
    7f84:	f7fd fdbf 	bl	5b06 <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
    7f88:	bf00      	nop
    7f8a:	b007      	add	sp, #28
    7f8c:	f85d fb04 	ldr.w	pc, [sp], #4
    7f90:	0000bd44 	.word	0x0000bd44

00007f94 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
    7f94:	b500      	push	{lr}
    7f96:	b085      	sub	sp, #20
    7f98:	4603      	mov	r3, r0
    7f9a:	9100      	str	r1, [sp, #0]
    7f9c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7fa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7fa4:	4a23      	ldr	r2, [pc, #140]	; (8034 <Ftm_Pwm_Ip_EnableNotification+0xa0>)
    7fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7faa:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
    7fac:	9b00      	ldr	r3, [sp, #0]
    7fae:	f88d 300b 	strb.w	r3, [sp, #11]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
    7fb2:	f002 f953 	bl	a25c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    7fb6:	9b00      	ldr	r3, [sp, #0]
    7fb8:	2b00      	cmp	r3, #0
    7fba:	d014      	beq.n	7fe6 <Ftm_Pwm_Ip_EnableNotification+0x52>
    7fbc:	9b00      	ldr	r3, [sp, #0]
    7fbe:	2b01      	cmp	r3, #1
    7fc0:	d011      	beq.n	7fe6 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    7fc2:	9b00      	ldr	r3, [sp, #0]
    7fc4:	2b02      	cmp	r3, #2
    7fc6:	d00e      	beq.n	7fe6 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    7fc8:	9b00      	ldr	r3, [sp, #0]
    7fca:	2b03      	cmp	r3, #3
    7fcc:	d00b      	beq.n	7fe6 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    7fce:	9b00      	ldr	r3, [sp, #0]
    7fd0:	2b04      	cmp	r3, #4
    7fd2:	d008      	beq.n	7fe6 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    7fd4:	9b00      	ldr	r3, [sp, #0]
    7fd6:	2b05      	cmp	r3, #5
    7fd8:	d005      	beq.n	7fe6 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    7fda:	9b00      	ldr	r3, [sp, #0]
    7fdc:	2b06      	cmp	r3, #6
    7fde:	d002      	beq.n	7fe6 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    7fe0:	9b00      	ldr	r3, [sp, #0]
    7fe2:	2b07      	cmp	r3, #7
    7fe4:	d10e      	bne.n	8004 <Ftm_Pwm_Ip_EnableNotification+0x70>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
    7fe6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7fea:	4619      	mov	r1, r3
    7fec:	9803      	ldr	r0, [sp, #12]
    7fee:	f7fd fdad 	bl	5b4c <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
    7ff2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7ff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ffa:	4611      	mov	r1, r2
    7ffc:	4618      	mov	r0, r3
    7ffe:	f7ff ff77 	bl	7ef0 <Ftm_Pwm_Ip_SetNormalNotificationCase>
    8002:	e011      	b.n	8028 <Ftm_Pwm_Ip_EnableNotification+0x94>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    8004:	9b00      	ldr	r3, [sp, #0]
    8006:	2b0a      	cmp	r3, #10
    8008:	d107      	bne.n	801a <Ftm_Pwm_Ip_EnableNotification+0x86>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    800a:	9803      	ldr	r0, [sp, #12]
    800c:	f7fe fcf9 	bl	6a02 <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
    8010:	2101      	movs	r1, #1
    8012:	9803      	ldr	r0, [sp, #12]
    8014:	f7fe fcdf 	bl	69d6 <Ftm_Pwm_Ip_SetFaultInterruptEnable>
    8018:	e006      	b.n	8028 <Ftm_Pwm_Ip_EnableNotification+0x94>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    801a:	9803      	ldr	r0, [sp, #12]
    801c:	f7fd fc72 	bl	5904 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
    8020:	2101      	movs	r1, #1
    8022:	9803      	ldr	r0, [sp, #12]
    8024:	f7fd fc57 	bl	58d6 <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
    8028:	f002 f944 	bl	a2b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
    802c:	bf00      	nop
    802e:	b005      	add	sp, #20
    8030:	f85d fb04 	ldr.w	pc, [sp], #4
    8034:	0000bd44 	.word	0x0000bd44

00008038 <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
    8038:	b500      	push	{lr}
    803a:	b085      	sub	sp, #20
    803c:	4603      	mov	r3, r0
    803e:	9100      	str	r1, [sp, #0]
    8040:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8044:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8048:	4a0c      	ldr	r2, [pc, #48]	; (807c <Ftm_Pwm_Ip_SetPowerState+0x44>)
    804a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    804e:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
    8050:	9b00      	ldr	r3, [sp, #0]
    8052:	2b01      	cmp	r3, #1
    8054:	d104      	bne.n	8060 <Ftm_Pwm_Ip_SetPowerState+0x28>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    8056:	2100      	movs	r1, #0
    8058:	9803      	ldr	r0, [sp, #12]
    805a:	f7fd fc07 	bl	586c <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
    805e:	e008      	b.n	8072 <Ftm_Pwm_Ip_SetPowerState+0x3a>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    8060:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8064:	4a06      	ldr	r2, [pc, #24]	; (8080 <Ftm_Pwm_Ip_SetPowerState+0x48>)
    8066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    806a:	4619      	mov	r1, r3
    806c:	9803      	ldr	r0, [sp, #12]
    806e:	f7fd fbfd 	bl	586c <Ftm_Pwm_Ip_SetClockSource>
}
    8072:	bf00      	nop
    8074:	b005      	add	sp, #20
    8076:	f85d fb04 	ldr.w	pc, [sp], #4
    807a:	bf00      	nop
    807c:	0000bd44 	.word	0x0000bd44
    8080:	1fff8ff4 	.word	0x1fff8ff4

00008084 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
    8084:	b500      	push	{lr}
    8086:	b085      	sub	sp, #20
    8088:	4603      	mov	r3, r0
    808a:	9100      	str	r1, [sp, #0]
    808c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8090:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8094:	4a0e      	ldr	r2, [pc, #56]	; (80d0 <Ftm_Pwm_Ip_SetClockMode+0x4c>)
    8096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    809a:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
    809c:	9b00      	ldr	r3, [sp, #0]
    809e:	2b01      	cmp	r3, #1
    80a0:	d109      	bne.n	80b6 <Ftm_Pwm_Ip_SetClockMode+0x32>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
    80a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80a6:	4a0b      	ldr	r2, [pc, #44]	; (80d4 <Ftm_Pwm_Ip_SetClockMode+0x50>)
    80a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80ac:	4619      	mov	r1, r3
    80ae:	9803      	ldr	r0, [sp, #12]
    80b0:	f7fd fbcc 	bl	584c <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
    80b4:	e008      	b.n	80c8 <Ftm_Pwm_Ip_SetClockMode+0x44>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    80b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80ba:	4a07      	ldr	r2, [pc, #28]	; (80d8 <Ftm_Pwm_Ip_SetClockMode+0x54>)
    80bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80c0:	4619      	mov	r1, r3
    80c2:	9803      	ldr	r0, [sp, #12]
    80c4:	f7fd fbc2 	bl	584c <Ftm_Pwm_Ip_SetClockPs>
}
    80c8:	bf00      	nop
    80ca:	b005      	add	sp, #20
    80cc:	f85d fb04 	ldr.w	pc, [sp], #4
    80d0:	0000bd44 	.word	0x0000bd44
    80d4:	1fff9014 	.word	0x1fff9014
    80d8:	1fff9004 	.word	0x1fff9004

000080dc <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
    80dc:	b500      	push	{lr}
    80de:	b085      	sub	sp, #20
    80e0:	4603      	mov	r3, r0
    80e2:	460a      	mov	r2, r1
    80e4:	f88d 3007 	strb.w	r3, [sp, #7]
    80e8:	4613      	mov	r3, r2
    80ea:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    80ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80f2:	4a07      	ldr	r2, [pc, #28]	; (8110 <Ftm_Pwm_Ip_ResetCounter+0x34>)
    80f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80f8:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
    80fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    80fe:	4619      	mov	r1, r3
    8100:	9803      	ldr	r0, [sp, #12]
    8102:	f7fe f8ae 	bl	6262 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
    8106:	bf00      	nop
    8108:	b005      	add	sp, #20
    810a:	f85d fb04 	ldr.w	pc, [sp], #4
    810e:	bf00      	nop
    8110:	0000bd44 	.word	0x0000bd44

00008114 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
    8114:	b084      	sub	sp, #16
    8116:	4603      	mov	r3, r0
    8118:	460a      	mov	r2, r1
    811a:	f88d 3007 	strb.w	r3, [sp, #7]
    811e:	4613      	mov	r3, r2
    8120:	f88d 3006 	strb.w	r3, [sp, #6]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
    8124:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8128:	f89d 3006 	ldrb.w	r3, [sp, #6]
    812c:	4905      	ldr	r1, [pc, #20]	; (8144 <Ftm_Pwm_Ip_GetChannelState+0x30>)
    812e:	00d2      	lsls	r2, r2, #3
    8130:	4413      	add	r3, r2
    8132:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    8136:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
    813a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    813e:	4618      	mov	r0, r3
    8140:	b004      	add	sp, #16
    8142:	4770      	bx	lr
    8144:	1fff8d04 	.word	0x1fff8d04

00008148 <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
    8148:	b500      	push	{lr}
    814a:	b087      	sub	sp, #28
    814c:	9202      	str	r2, [sp, #8]
    814e:	9301      	str	r3, [sp, #4]
    8150:	4603      	mov	r3, r0
    8152:	f88d 300f 	strb.w	r3, [sp, #15]
    8156:	460b      	mov	r3, r1
    8158:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    815c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8160:	4a1f      	ldr	r2, [pc, #124]	; (81e0 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x98>)
    8162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8166:	9304      	str	r3, [sp, #16]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
    8168:	2300      	movs	r3, #0
    816a:	f88d 3017 	strb.w	r3, [sp, #23]
    816e:	e026      	b.n	81be <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x76>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
    8170:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8174:	9a02      	ldr	r2, [sp, #8]
    8176:	4413      	add	r3, r2
    8178:	7819      	ldrb	r1, [r3, #0]
    817a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    817e:	005b      	lsls	r3, r3, #1
    8180:	9a01      	ldr	r2, [sp, #4]
    8182:	4413      	add	r3, r2
    8184:	881b      	ldrh	r3, [r3, #0]
    8186:	461a      	mov	r2, r3
    8188:	9804      	ldr	r0, [sp, #16]
    818a:	f7fd fd0d 	bl	5ba8 <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
    818e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8192:	005b      	lsls	r3, r3, #1
    8194:	9a01      	ldr	r2, [sp, #4]
    8196:	441a      	add	r2, r3
    8198:	f89d 300f 	ldrb.w	r3, [sp, #15]
    819c:	f89d 1017 	ldrb.w	r1, [sp, #23]
    81a0:	9802      	ldr	r0, [sp, #8]
    81a2:	4401      	add	r1, r0
    81a4:	7809      	ldrb	r1, [r1, #0]
    81a6:	4608      	mov	r0, r1
    81a8:	8811      	ldrh	r1, [r2, #0]
    81aa:	4a0e      	ldr	r2, [pc, #56]	; (81e4 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9c>)
    81ac:	00db      	lsls	r3, r3, #3
    81ae:	4403      	add	r3, r0
    81b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
    81b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    81b8:	3301      	adds	r3, #1
    81ba:	f88d 3017 	strb.w	r3, [sp, #23]
    81be:	f89d 2017 	ldrb.w	r2, [sp, #23]
    81c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    81c6:	429a      	cmp	r2, r3
    81c8:	d3d2      	bcc.n	8170 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x28>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    81ca:	f89d 3020 	ldrb.w	r3, [sp, #32]
    81ce:	4619      	mov	r1, r3
    81d0:	9804      	ldr	r0, [sp, #16]
    81d2:	f7fd fda1 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    81d6:	bf00      	nop
    81d8:	b007      	add	sp, #28
    81da:	f85d fb04 	ldr.w	pc, [sp], #4
    81de:	bf00      	nop
    81e0:	0000bd44 	.word	0x0000bd44
    81e4:	1fff8d04 	.word	0x1fff8d04

000081e8 <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
    81e8:	b500      	push	{lr}
    81ea:	b085      	sub	sp, #20
    81ec:	4603      	mov	r3, r0
    81ee:	9100      	str	r1, [sp, #0]
    81f0:	f88d 3007 	strb.w	r3, [sp, #7]
    81f4:	4613      	mov	r3, r2
    81f6:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    81fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    81fe:	4a0b      	ldr	r2, [pc, #44]	; (822c <Ftm_Pwm_Ip_MaskOutputChannels+0x44>)
    8200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8204:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
    8206:	f002 f8cd 	bl	a3a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
    820a:	9900      	ldr	r1, [sp, #0]
    820c:	9803      	ldr	r0, [sp, #12]
    820e:	f7fd fde0 	bl	5dd2 <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    8212:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8216:	4619      	mov	r1, r3
    8218:	9803      	ldr	r0, [sp, #12]
    821a:	f7fd fd7d 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
    821e:	f002 f8ed 	bl	a3fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
    8222:	bf00      	nop
    8224:	b005      	add	sp, #20
    8226:	f85d fb04 	ldr.w	pc, [sp], #4
    822a:	bf00      	nop
    822c:	0000bd44 	.word	0x0000bd44

00008230 <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
    8230:	b500      	push	{lr}
    8232:	b085      	sub	sp, #20
    8234:	4603      	mov	r3, r0
    8236:	9100      	str	r1, [sp, #0]
    8238:	f88d 3007 	strb.w	r3, [sp, #7]
    823c:	4613      	mov	r3, r2
    823e:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8242:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8246:	4a0b      	ldr	r2, [pc, #44]	; (8274 <Ftm_Pwm_Ip_UnMaskOutputChannels+0x44>)
    8248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    824c:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
    824e:	f002 f8fb 	bl	a448 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
    8252:	9900      	ldr	r1, [sp, #0]
    8254:	9803      	ldr	r0, [sp, #12]
    8256:	f7fd fdcb 	bl	5df0 <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    825a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    825e:	4619      	mov	r1, r3
    8260:	9803      	ldr	r0, [sp, #12]
    8262:	f7fd fd59 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
    8266:	f002 f91b 	bl	a4a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
    826a:	bf00      	nop
    826c:	b005      	add	sp, #20
    826e:	f85d fb04 	ldr.w	pc, [sp], #4
    8272:	bf00      	nop
    8274:	0000bd44 	.word	0x0000bd44

00008278 <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
    8278:	b510      	push	{r4, lr}
    827a:	b084      	sub	sp, #16
    827c:	4604      	mov	r4, r0
    827e:	4608      	mov	r0, r1
    8280:	4611      	mov	r1, r2
    8282:	461a      	mov	r2, r3
    8284:	4623      	mov	r3, r4
    8286:	f88d 3007 	strb.w	r3, [sp, #7]
    828a:	4603      	mov	r3, r0
    828c:	f88d 3006 	strb.w	r3, [sp, #6]
    8290:	460b      	mov	r3, r1
    8292:	f8ad 3004 	strh.w	r3, [sp, #4]
    8296:	4613      	mov	r3, r2
    8298:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    829c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82a0:	4a2e      	ldr	r2, [pc, #184]	; (835c <Ftm_Pwm_Ip_SetPhaseShift+0xe4>)
    82a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82a6:	9303      	str	r3, [sp, #12]
    {
        RetVal = FALSE;
    }
    DevAssert(RetVal != FALSE);
#endif
    PairChId = Channel >> 1U;
    82a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    82ac:	085b      	lsrs	r3, r3, #1
    82ae:	f88d 300b 	strb.w	r3, [sp, #11]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    82b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82b6:	492a      	ldr	r1, [pc, #168]	; (8360 <Ftm_Pwm_Ip_SetPhaseShift+0xe8>)
    82b8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    82bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
    82c0:	f002 f914 	bl	a4ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    82c4:	9803      	ldr	r0, [sp, #12]
    82c6:	f7fd faf8 	bl	58ba <Ftm_Pwm_Ip_GetCpwms>
    82ca:	4603      	mov	r3, r0
    82cc:	2b01      	cmp	r3, #1
    82ce:	d108      	bne.n	82e2 <Ftm_Pwm_Ip_SetPhaseShift+0x6a>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
    82d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    82d4:	085b      	lsrs	r3, r3, #1
    82d6:	b29b      	uxth	r3, r3
    82d8:	4619      	mov	r1, r3
    82da:	9803      	ldr	r0, [sp, #12]
    82dc:	f7fd fb40 	bl	5960 <Ftm_Pwm_Ip_SetMod>
    82e0:	e007      	b.n	82f2 <Ftm_Pwm_Ip_SetPhaseShift+0x7a>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
    82e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    82e6:	3b01      	subs	r3, #1
    82e8:	b29b      	uxth	r3, r3
    82ea:	4619      	mov	r1, r3
    82ec:	9803      	ldr	r0, [sp, #12]
    82ee:	f7fd fb37 	bl	5960 <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
    82f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    82f6:	005b      	lsls	r3, r3, #1
    82f8:	b2db      	uxtb	r3, r3
    82fa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    82fe:	4619      	mov	r1, r3
    8300:	9803      	ldr	r0, [sp, #12]
    8302:	f7fd fc51 	bl	5ba8 <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
    8306:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    830a:	085b      	lsrs	r3, r3, #1
    830c:	f8ad 3008 	strh.w	r3, [sp, #8]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
    8310:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8314:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8318:	4912      	ldr	r1, [pc, #72]	; (8364 <Ftm_Pwm_Ip_SetPhaseShift+0xec>)
    831a:	00d2      	lsls	r2, r2, #3
    831c:	4413      	add	r3, r2
    831e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    8322:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
    8326:	f89d 300b 	ldrb.w	r3, [sp, #11]
    832a:	005b      	lsls	r3, r3, #1
    832c:	b2db      	uxtb	r3, r3
    832e:	3301      	adds	r3, #1
    8330:	b2d9      	uxtb	r1, r3
    8332:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    8336:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    833a:	4413      	add	r3, r2
    833c:	b29b      	uxth	r3, r3
    833e:	461a      	mov	r2, r3
    8340:	9803      	ldr	r0, [sp, #12]
    8342:	f7fd fc31 	bl	5ba8 <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    8346:	f89d 3018 	ldrb.w	r3, [sp, #24]
    834a:	4619      	mov	r1, r3
    834c:	9803      	ldr	r0, [sp, #12]
    834e:	f7fd fce3 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
    8352:	f002 f8f7 	bl	a544 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
    8356:	bf00      	nop
    8358:	b004      	add	sp, #16
    835a:	bd10      	pop	{r4, pc}
    835c:	0000bd44 	.word	0x0000bd44
    8360:	1fff8cfc 	.word	0x1fff8cfc
    8364:	1fff8d04 	.word	0x1fff8d04

00008368 <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
    8368:	b510      	push	{r4, lr}
    836a:	b086      	sub	sp, #24
    836c:	4604      	mov	r4, r0
    836e:	4608      	mov	r0, r1
    8370:	4611      	mov	r1, r2
    8372:	461a      	mov	r2, r3
    8374:	4623      	mov	r3, r4
    8376:	f88d 300f 	strb.w	r3, [sp, #15]
    837a:	4603      	mov	r3, r0
    837c:	f88d 300e 	strb.w	r3, [sp, #14]
    8380:	460b      	mov	r3, r1
    8382:	f8ad 300c 	strh.w	r3, [sp, #12]
    8386:	4613      	mov	r3, r2
    8388:	f8ad 300a 	strh.w	r3, [sp, #10]
        }
    }
    DevAssert(RetVal != FALSE);

#endif
    PairId = Channel >> 1U;
    838c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8390:	085b      	lsrs	r3, r3, #1
    8392:	f88d 3016 	strb.w	r3, [sp, #22]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
    8396:	f89d 200f 	ldrb.w	r2, [sp, #15]
    839a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    839e:	492d      	ldr	r1, [pc, #180]	; (8454 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xec>)
    83a0:	0092      	lsls	r2, r2, #2
    83a2:	4413      	add	r3, r2
    83a4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    83a8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    83ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    83b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    83b4:	4928      	ldr	r1, [pc, #160]	; (8458 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf0>)
    83b6:	00d2      	lsls	r2, r2, #3
    83b8:	4413      	add	r3, r2
    83ba:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    83be:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
    83c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    83c6:	f8ad 3014 	strh.w	r3, [sp, #20]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
    83ca:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    83ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    83d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83d6:	4618      	mov	r0, r3
    83d8:	f7fe fbc4 	bl	6b64 <Ftm_Pwm_Ip_CalculatePhaseShift>
    83dc:	4603      	mov	r3, r0
    83de:	f8ad 3012 	strh.w	r3, [sp, #18]

    if (TRUE == SyncUpdate)
    83e2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    83e6:	2b00      	cmp	r3, #0
    83e8:	d003      	beq.n	83f2 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x8a>
    {
        SoftwareTrigger = FALSE;
    83ea:	2300      	movs	r3, #0
    83ec:	f88d 3017 	strb.w	r3, [sp, #23]
    83f0:	e002      	b.n	83f8 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
    }
    else
    {
        SoftwareTrigger = TRUE;
    83f2:	2301      	movs	r3, #1
    83f4:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    83f8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    83fc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8400:	4916      	ldr	r1, [pc, #88]	; (845c <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    8402:	00d2      	lsls	r2, r2, #3
    8404:	4413      	add	r3, r2
    8406:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    840a:	2b02      	cmp	r3, #2
    840c:	d111      	bne.n	8432 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xca>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    840e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8412:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8416:	4911      	ldr	r1, [pc, #68]	; (845c <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    8418:	00d2      	lsls	r2, r2, #3
    841a:	4413      	add	r3, r2
    841c:	2201      	movs	r2, #1
    841e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    8422:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8426:	f89d 000f 	ldrb.w	r0, [sp, #15]
    842a:	2300      	movs	r3, #0
    842c:	2200      	movs	r2, #0
    842e:	f7ff fb25 	bl	7a7c <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    8432:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    8436:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    843a:	f89d 100e 	ldrb.w	r1, [sp, #14]
    843e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8442:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8446:	9300      	str	r3, [sp, #0]
    8448:	4623      	mov	r3, r4
    844a:	f7ff fbdd 	bl	7c08 <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
    844e:	bf00      	nop
    8450:	b006      	add	sp, #24
    8452:	bd10      	pop	{r4, pc}
    8454:	1fff8d44 	.word	0x1fff8d44
    8458:	1fff8d04 	.word	0x1fff8d04
    845c:	1fff8ed4 	.word	0x1fff8ed4

00008460 <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
    8460:	b500      	push	{lr}
    8462:	b085      	sub	sp, #20
    8464:	4603      	mov	r3, r0
    8466:	9100      	str	r1, [sp, #0]
    8468:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    846c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8470:	4a07      	ldr	r2, [pc, #28]	; (8490 <Ftm_Pwm_Ip_DisableTrigger+0x30>)
    8472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8476:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
    8478:	f002 f88a 	bl	a590 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
    847c:	9900      	ldr	r1, [sp, #0]
    847e:	9803      	ldr	r0, [sp, #12]
    8480:	f7fd fdea 	bl	6058 <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
    8484:	f002 f8b0 	bl	a5e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
    8488:	bf00      	nop
    848a:	b005      	add	sp, #20
    848c:	f85d fb04 	ldr.w	pc, [sp], #4
    8490:	0000bd44 	.word	0x0000bd44

00008494 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
    8494:	b500      	push	{lr}
    8496:	b085      	sub	sp, #20
    8498:	4603      	mov	r3, r0
    849a:	9100      	str	r1, [sp, #0]
    849c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    84a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    84a4:	4a07      	ldr	r2, [pc, #28]	; (84c4 <Ftm_Pwm_Ip_EnableTrigger+0x30>)
    84a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84aa:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
    84ac:	f002 f8c2 	bl	a634 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
    84b0:	9900      	ldr	r1, [sp, #0]
    84b2:	9803      	ldr	r0, [sp, #12]
    84b4:	f7fd fddd 	bl	6072 <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
    84b8:	f002 f8e8 	bl	a68c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
    84bc:	bf00      	nop
    84be:	b005      	add	sp, #20
    84c0:	f85d fb04 	ldr.w	pc, [sp], #4
    84c4:	0000bd44 	.word	0x0000bd44

000084c8 <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
    84c8:	b500      	push	{lr}
    84ca:	b085      	sub	sp, #20
    84cc:	4603      	mov	r3, r0
    84ce:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    84d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    84d6:	4a08      	ldr	r2, [pc, #32]	; (84f8 <Ftm_Pwm_Ip_SyncUpdate+0x30>)
    84d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84dc:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
    84de:	f002 f8fb 	bl	a6d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    84e2:	2101      	movs	r1, #1
    84e4:	9803      	ldr	r0, [sp, #12]
    84e6:	f7fd fc17 	bl	5d18 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
    84ea:	f002 f921 	bl	a730 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
    84ee:	bf00      	nop
    84f0:	b005      	add	sp, #20
    84f2:	f85d fb04 	ldr.w	pc, [sp], #4
    84f6:	bf00      	nop
    84f8:	0000bd44 	.word	0x0000bd44

000084fc <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
    84fc:	b500      	push	{lr}
    84fe:	b085      	sub	sp, #20
    8500:	4603      	mov	r3, r0
    8502:	f88d 3007 	strb.w	r3, [sp, #7]
    8506:	460b      	mov	r3, r1
    8508:	f88d 3006 	strb.w	r3, [sp, #6]
    850c:	4613      	mov	r3, r2
    850e:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8512:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8516:	4a17      	ldr	r2, [pc, #92]	; (8574 <Ftm_Pwm_Ip_SetChannelDeadTime+0x78>)
    8518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    851c:	9303      	str	r3, [sp, #12]
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
    851e:	f002 f92d 	bl	a77c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
    8522:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8526:	2b3f      	cmp	r3, #63	; 0x3f
    8528:	d80b      	bhi.n	8542 <Ftm_Pwm_Ip_SetChannelDeadTime+0x46>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
    852a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    852e:	b2db      	uxtb	r3, r3
    8530:	4619      	mov	r1, r3
    8532:	9803      	ldr	r0, [sp, #12]
    8534:	f7fd fd42 	bl	5fbc <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    8538:	2100      	movs	r1, #0
    853a:	9803      	ldr	r0, [sp, #12]
    853c:	f7fd fd62 	bl	6004 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    8540:	e012      	b.n	8568 <Ftm_Pwm_Ip_SetChannelDeadTime+0x6c>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
    8542:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8546:	b2db      	uxtb	r3, r3
    8548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    854c:	b2db      	uxtb	r3, r3
    854e:	4619      	mov	r1, r3
    8550:	9803      	ldr	r0, [sp, #12]
    8552:	f7fd fd33 	bl	5fbc <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
    8556:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    855a:	099b      	lsrs	r3, r3, #6
    855c:	b29b      	uxth	r3, r3
    855e:	b2db      	uxtb	r3, r3
    8560:	4619      	mov	r1, r3
    8562:	9803      	ldr	r0, [sp, #12]
    8564:	f7fd fd4e 	bl	6004 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
    8568:	f002 f934 	bl	a7d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
    856c:	bf00      	nop
    856e:	b005      	add	sp, #20
    8570:	f85d fb04 	ldr.w	pc, [sp], #4
    8574:	0000bd44 	.word	0x0000bd44

00008578 <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
    8578:	b082      	sub	sp, #8
    857a:	9001      	str	r0, [sp, #4]
    857c:	460b      	mov	r3, r1
    857e:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
    8582:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
    8586:	4618      	mov	r0, r3
    8588:	b002      	add	sp, #8
    858a:	4770      	bx	lr

0000858c <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
    858c:	b510      	push	{r4, lr}
    858e:	b084      	sub	sp, #16
    8590:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    8592:	2300      	movs	r3, #0
    8594:	9302      	str	r3, [sp, #8]
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
    8596:	493e      	ldr	r1, [pc, #248]	; (8690 <Pwm_Init+0x104>)
    8598:	9a02      	ldr	r2, [sp, #8]
    859a:	4613      	mov	r3, r2
    859c:	009b      	lsls	r3, r3, #2
    859e:	4413      	add	r3, r2
    85a0:	009b      	lsls	r3, r3, #2
    85a2:	440b      	add	r3, r1
    85a4:	9a01      	ldr	r2, [sp, #4]
    85a6:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    85a8:	2300      	movs	r3, #0
    85aa:	f88d 300f 	strb.w	r3, [sp, #15]
    85ae:	e017      	b.n	85e0 <Pwm_Init+0x54>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
    85b0:	4937      	ldr	r1, [pc, #220]	; (8690 <Pwm_Init+0x104>)
    85b2:	9a02      	ldr	r2, [sp, #8]
    85b4:	4613      	mov	r3, r2
    85b6:	009b      	lsls	r3, r3, #2
    85b8:	4413      	add	r3, r2
    85ba:	009b      	lsls	r3, r3, #2
    85bc:	440b      	add	r3, r1
    85be:	681b      	ldr	r3, [r3, #0]
    85c0:	68d9      	ldr	r1, [r3, #12]
    85c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    85c6:	4613      	mov	r3, r2
    85c8:	005b      	lsls	r3, r3, #1
    85ca:	4413      	add	r3, r2
    85cc:	009b      	lsls	r3, r3, #2
    85ce:	440b      	add	r3, r1
    85d0:	4618      	mov	r0, r3
    85d2:	f000 f985 	bl	88e0 <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    85d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    85da:	3301      	adds	r3, #1
    85dc:	f88d 300f 	strb.w	r3, [sp, #15]
    85e0:	492b      	ldr	r1, [pc, #172]	; (8690 <Pwm_Init+0x104>)
    85e2:	9a02      	ldr	r2, [sp, #8]
    85e4:	4613      	mov	r3, r2
    85e6:	009b      	lsls	r3, r3, #2
    85e8:	4413      	add	r3, r2
    85ea:	009b      	lsls	r3, r3, #2
    85ec:	440b      	add	r3, r1
    85ee:	681b      	ldr	r3, [r3, #0]
    85f0:	7a1b      	ldrb	r3, [r3, #8]
    85f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    85f6:	429a      	cmp	r2, r3
    85f8:	d3da      	bcc.n	85b0 <Pwm_Init+0x24>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    85fa:	2300      	movs	r3, #0
    85fc:	f88d 300f 	strb.w	r3, [sp, #15]
    8600:	e034      	b.n	866c <Pwm_Init+0xe0>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
    8602:	4923      	ldr	r1, [pc, #140]	; (8690 <Pwm_Init+0x104>)
    8604:	9a02      	ldr	r2, [sp, #8]
    8606:	4613      	mov	r3, r2
    8608:	009b      	lsls	r3, r3, #2
    860a:	4413      	add	r3, r2
    860c:	009b      	lsls	r3, r3, #2
    860e:	440b      	add	r3, r1
    8610:	681b      	ldr	r3, [r3, #0]
    8612:	6859      	ldr	r1, [r3, #4]
    8614:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8618:	f89d 000f 	ldrb.w	r0, [sp, #15]
    861c:	4613      	mov	r3, r2
    861e:	005b      	lsls	r3, r3, #1
    8620:	4413      	add	r3, r2
    8622:	00db      	lsls	r3, r3, #3
    8624:	4419      	add	r1, r3
    8626:	4c1a      	ldr	r4, [pc, #104]	; (8690 <Pwm_Init+0x104>)
    8628:	9a02      	ldr	r2, [sp, #8]
    862a:	4613      	mov	r3, r2
    862c:	009b      	lsls	r3, r3, #2
    862e:	4413      	add	r3, r2
    8630:	4403      	add	r3, r0
    8632:	3302      	adds	r3, #2
    8634:	009b      	lsls	r3, r3, #2
    8636:	4423      	add	r3, r4
    8638:	6059      	str	r1, [r3, #4]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
    863a:	4915      	ldr	r1, [pc, #84]	; (8690 <Pwm_Init+0x104>)
    863c:	9a02      	ldr	r2, [sp, #8]
    863e:	4613      	mov	r3, r2
    8640:	009b      	lsls	r3, r3, #2
    8642:	4413      	add	r3, r2
    8644:	009b      	lsls	r3, r3, #2
    8646:	440b      	add	r3, r1
    8648:	681b      	ldr	r3, [r3, #0]
    864a:	6859      	ldr	r1, [r3, #4]
    864c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8650:	4613      	mov	r3, r2
    8652:	005b      	lsls	r3, r3, #1
    8654:	4413      	add	r3, r2
    8656:	00db      	lsls	r3, r3, #3
    8658:	3308      	adds	r3, #8
    865a:	440b      	add	r3, r1
    865c:	4618      	mov	r0, r3
    865e:	f000 f91d 	bl	889c <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    8662:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8666:	3301      	adds	r3, #1
    8668:	f88d 300f 	strb.w	r3, [sp, #15]
    866c:	4908      	ldr	r1, [pc, #32]	; (8690 <Pwm_Init+0x104>)
    866e:	9a02      	ldr	r2, [sp, #8]
    8670:	4613      	mov	r3, r2
    8672:	009b      	lsls	r3, r3, #2
    8674:	4413      	add	r3, r2
    8676:	009b      	lsls	r3, r3, #2
    8678:	440b      	add	r3, r1
    867a:	681b      	ldr	r3, [r3, #0]
    867c:	781b      	ldrb	r3, [r3, #0]
    867e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8682:	429a      	cmp	r2, r3
    8684:	d3bd      	bcc.n	8602 <Pwm_Init+0x76>
#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
#endif
}
    8686:	bf00      	nop
    8688:	bf00      	nop
    868a:	b004      	add	sp, #16
    868c:	bd10      	pop	{r4, pc}
    868e:	bf00      	nop
    8690:	1fff8b24 	.word	0x1fff8b24

00008694 <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
    8694:	b500      	push	{lr}
    8696:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    8698:	2300      	movs	r3, #0
    869a:	9302      	str	r3, [sp, #8]
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    869c:	2300      	movs	r3, #0
    869e:	f88d 300f 	strb.w	r3, [sp, #15]
    86a2:	e02a      	b.n	86fa <Pwm_DeInit+0x66>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
    86a4:	4945      	ldr	r1, [pc, #276]	; (87bc <Pwm_DeInit+0x128>)
    86a6:	9a02      	ldr	r2, [sp, #8]
    86a8:	4613      	mov	r3, r2
    86aa:	009b      	lsls	r3, r3, #2
    86ac:	4413      	add	r3, r2
    86ae:	009b      	lsls	r3, r3, #2
    86b0:	440b      	add	r3, r1
    86b2:	330c      	adds	r3, #12
    86b4:	6819      	ldr	r1, [r3, #0]
    86b6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    86ba:	4613      	mov	r3, r2
    86bc:	005b      	lsls	r3, r3, #1
    86be:	4413      	add	r3, r2
    86c0:	00db      	lsls	r3, r3, #3
    86c2:	440b      	add	r3, r1
    86c4:	f103 0008 	add.w	r0, r3, #8
    86c8:	493c      	ldr	r1, [pc, #240]	; (87bc <Pwm_DeInit+0x128>)
    86ca:	9a02      	ldr	r2, [sp, #8]
    86cc:	4613      	mov	r3, r2
    86ce:	009b      	lsls	r3, r3, #2
    86d0:	4413      	add	r3, r2
    86d2:	009b      	lsls	r3, r3, #2
    86d4:	440b      	add	r3, r1
    86d6:	330c      	adds	r3, #12
    86d8:	6819      	ldr	r1, [r3, #0]
    86da:	f89d 200f 	ldrb.w	r2, [sp, #15]
    86de:	4613      	mov	r3, r2
    86e0:	005b      	lsls	r3, r3, #1
    86e2:	4413      	add	r3, r2
    86e4:	00db      	lsls	r3, r3, #3
    86e6:	440b      	add	r3, r1
    86e8:	695b      	ldr	r3, [r3, #20]
    86ea:	4619      	mov	r1, r3
    86ec:	f000 f94e 	bl	898c <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    86f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    86f4:	3301      	adds	r3, #1
    86f6:	f88d 300f 	strb.w	r3, [sp, #15]
    86fa:	4930      	ldr	r1, [pc, #192]	; (87bc <Pwm_DeInit+0x128>)
    86fc:	9a02      	ldr	r2, [sp, #8]
    86fe:	4613      	mov	r3, r2
    8700:	009b      	lsls	r3, r3, #2
    8702:	4413      	add	r3, r2
    8704:	009b      	lsls	r3, r3, #2
    8706:	440b      	add	r3, r1
    8708:	681b      	ldr	r3, [r3, #0]
    870a:	781b      	ldrb	r3, [r3, #0]
    870c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8710:	429a      	cmp	r2, r3
    8712:	d3c7      	bcc.n	86a4 <Pwm_DeInit+0x10>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
    8714:	4929      	ldr	r1, [pc, #164]	; (87bc <Pwm_DeInit+0x128>)
    8716:	9a02      	ldr	r2, [sp, #8]
    8718:	4613      	mov	r3, r2
    871a:	009b      	lsls	r3, r3, #2
    871c:	4413      	add	r3, r2
    871e:	009b      	lsls	r3, r3, #2
    8720:	440b      	add	r3, r1
    8722:	681b      	ldr	r3, [r3, #0]
    8724:	9301      	str	r3, [sp, #4]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    8726:	2300      	movs	r3, #0
    8728:	f88d 300f 	strb.w	r3, [sp, #15]
    872c:	e010      	b.n	8750 <Pwm_DeInit+0xbc>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
    872e:	9b01      	ldr	r3, [sp, #4]
    8730:	68d9      	ldr	r1, [r3, #12]
    8732:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8736:	4613      	mov	r3, r2
    8738:	005b      	lsls	r3, r3, #1
    873a:	4413      	add	r3, r2
    873c:	009b      	lsls	r3, r3, #2
    873e:	440b      	add	r3, r1
    8740:	4618      	mov	r0, r3
    8742:	f000 f943 	bl	89cc <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    8746:	f89d 300f 	ldrb.w	r3, [sp, #15]
    874a:	3301      	adds	r3, #1
    874c:	f88d 300f 	strb.w	r3, [sp, #15]
    8750:	491a      	ldr	r1, [pc, #104]	; (87bc <Pwm_DeInit+0x128>)
    8752:	9a02      	ldr	r2, [sp, #8]
    8754:	4613      	mov	r3, r2
    8756:	009b      	lsls	r3, r3, #2
    8758:	4413      	add	r3, r2
    875a:	009b      	lsls	r3, r3, #2
    875c:	440b      	add	r3, r1
    875e:	681b      	ldr	r3, [r3, #0]
    8760:	7a1b      	ldrb	r3, [r3, #8]
    8762:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8766:	429a      	cmp	r2, r3
    8768:	d3e1      	bcc.n	872e <Pwm_DeInit+0x9a>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
    876a:	4914      	ldr	r1, [pc, #80]	; (87bc <Pwm_DeInit+0x128>)
    876c:	9a02      	ldr	r2, [sp, #8]
    876e:	4613      	mov	r3, r2
    8770:	009b      	lsls	r3, r3, #2
    8772:	4413      	add	r3, r2
    8774:	009b      	lsls	r3, r3, #2
    8776:	440b      	add	r3, r1
    8778:	2200      	movs	r2, #0
    877a:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    877c:	2300      	movs	r3, #0
    877e:	f88d 300f 	strb.w	r3, [sp, #15]
    8782:	e011      	b.n	87a8 <Pwm_DeInit+0x114>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
    8784:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8788:	480c      	ldr	r0, [pc, #48]	; (87bc <Pwm_DeInit+0x128>)
    878a:	9a02      	ldr	r2, [sp, #8]
    878c:	4613      	mov	r3, r2
    878e:	009b      	lsls	r3, r3, #2
    8790:	4413      	add	r3, r2
    8792:	440b      	add	r3, r1
    8794:	3302      	adds	r3, #2
    8796:	009b      	lsls	r3, r3, #2
    8798:	4403      	add	r3, r0
    879a:	2200      	movs	r2, #0
    879c:	605a      	str	r2, [r3, #4]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    879e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    87a2:	3301      	adds	r3, #1
    87a4:	f88d 300f 	strb.w	r3, [sp, #15]
    87a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    87ac:	2b00      	cmp	r3, #0
    87ae:	d0e9      	beq.n	8784 <Pwm_DeInit+0xf0>
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
#endif

}
    87b0:	bf00      	nop
    87b2:	bf00      	nop
    87b4:	b005      	add	sp, #20
    87b6:	f85d fb04 	ldr.w	pc, [sp], #4
    87ba:	bf00      	nop
    87bc:	1fff8b24 	.word	0x1fff8b24

000087c0 <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
    87c0:	b500      	push	{lr}
    87c2:	b087      	sub	sp, #28
    87c4:	4603      	mov	r3, r0
    87c6:	460a      	mov	r2, r1
    87c8:	f88d 3007 	strb.w	r3, [sp, #7]
    87cc:	4613      	mov	r3, r2
    87ce:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
    87d2:	2300      	movs	r3, #0
    87d4:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    87d8:	2300      	movs	r3, #0
    87da:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    87dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    87e0:	4619      	mov	r1, r3
    87e2:	9804      	ldr	r0, [sp, #16]
    87e4:	f7ff fec8 	bl	8578 <Pwm_GetPartitionChannelIdx>
    87e8:	4603      	mov	r3, r0
    87ea:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    87ee:	490f      	ldr	r1, [pc, #60]	; (882c <Pwm_SetDutyCycle+0x6c>)
    87f0:	9a04      	ldr	r2, [sp, #16]
    87f2:	4613      	mov	r3, r2
    87f4:	009b      	lsls	r3, r3, #2
    87f6:	4413      	add	r3, r2
    87f8:	009b      	lsls	r3, r3, #2
    87fa:	440b      	add	r3, r1
    87fc:	330c      	adds	r3, #12
    87fe:	6819      	ldr	r1, [r3, #0]
    8800:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8804:	4613      	mov	r3, r2
    8806:	005b      	lsls	r3, r3, #1
    8808:	4413      	add	r3, r2
    880a:	00db      	lsls	r3, r3, #3
    880c:	440b      	add	r3, r1
    880e:	f103 0208 	add.w	r2, r3, #8
    8812:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8816:	4611      	mov	r1, r2
    8818:	4618      	mov	r0, r3
    881a:	f000 f8f3 	bl	8a04 <Pwm_Ipw_SetDutyCycle>
    881e:	4603      	mov	r3, r0
    8820:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    8824:	bf00      	nop
    8826:	b007      	add	sp, #28
    8828:	f85d fb04 	ldr.w	pc, [sp], #4
    882c:	1fff8b24 	.word	0x1fff8b24

00008830 <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
    8830:	b500      	push	{lr}
    8832:	b085      	sub	sp, #20
    8834:	4603      	mov	r3, r0
    8836:	f88d 3007 	strb.w	r3, [sp, #7]
    883a:	460b      	mov	r3, r1
    883c:	f8ad 3004 	strh.w	r3, [sp, #4]
    8840:	4613      	mov	r3, r2
    8842:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    8846:	2300      	movs	r3, #0
    8848:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    884a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    884e:	4619      	mov	r1, r3
    8850:	9803      	ldr	r0, [sp, #12]
    8852:	f7ff fe91 	bl	8578 <Pwm_GetPartitionChannelIdx>
    8856:	4603      	mov	r3, r0
    8858:	f88d 300b 	strb.w	r3, [sp, #11]
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    885c:	490e      	ldr	r1, [pc, #56]	; (8898 <Pwm_SetPeriodAndDuty+0x68>)
    885e:	9a03      	ldr	r2, [sp, #12]
    8860:	4613      	mov	r3, r2
    8862:	009b      	lsls	r3, r3, #2
    8864:	4413      	add	r3, r2
    8866:	009b      	lsls	r3, r3, #2
    8868:	440b      	add	r3, r1
    886a:	330c      	adds	r3, #12
    886c:	6819      	ldr	r1, [r3, #0]
    886e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8872:	4613      	mov	r3, r2
    8874:	005b      	lsls	r3, r3, #1
    8876:	4413      	add	r3, r2
    8878:	00db      	lsls	r3, r3, #3
    887a:	440b      	add	r3, r1
    887c:	f103 0208 	add.w	r2, r3, #8
    8880:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    8884:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8888:	4618      	mov	r0, r3
    888a:	f000 f907 	bl	8a9c <Pwm_Ipw_SetPeriodAndDuty>
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    888e:	bf00      	nop
    8890:	b005      	add	sp, #20
    8892:	f85d fb04 	ldr.w	pc, [sp], #4
    8896:	bf00      	nop
    8898:	1fff8b24 	.word	0x1fff8b24

0000889c <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
    889c:	b410      	push	{r4}
    889e:	b083      	sub	sp, #12
    88a0:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
    88a2:	9b01      	ldr	r3, [sp, #4]
    88a4:	681b      	ldr	r3, [r3, #0]
    88a6:	2b00      	cmp	r3, #0
    88a8:	d010      	beq.n	88cc <Pwm_Ipw_Init+0x30>
    88aa:	2b01      	cmp	r3, #1
    88ac:	d110      	bne.n	88d0 <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
    88ae:	9b01      	ldr	r3, [sp, #4]
    88b0:	7a1b      	ldrb	r3, [r3, #8]
    88b2:	461c      	mov	r4, r3
    88b4:	9b01      	ldr	r3, [sp, #4]
    88b6:	685b      	ldr	r3, [r3, #4]
    88b8:	781b      	ldrb	r3, [r3, #0]
    88ba:	4618      	mov	r0, r3
    88bc:	9b01      	ldr	r3, [sp, #4]
    88be:	8959      	ldrh	r1, [r3, #10]
    88c0:	4a06      	ldr	r2, [pc, #24]	; (88dc <Pwm_Ipw_Init+0x40>)
    88c2:	00e3      	lsls	r3, r4, #3
    88c4:	4403      	add	r3, r0
    88c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    88ca:	e002      	b.n	88d2 <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    88cc:	bf00      	nop
    88ce:	e000      	b.n	88d2 <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
    88d0:	bf00      	nop
    }
}
    88d2:	bf00      	nop
    88d4:	b003      	add	sp, #12
    88d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    88da:	4770      	bx	lr
    88dc:	1fff90a4 	.word	0x1fff90a4

000088e0 <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    88e0:	b500      	push	{lr}
    88e2:	b085      	sub	sp, #20
    88e4:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
    88e6:	2300      	movs	r3, #0
    88e8:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
    88ec:	2300      	movs	r3, #0
    88ee:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
    88f2:	9b01      	ldr	r3, [sp, #4]
    88f4:	685b      	ldr	r3, [r3, #4]
    88f6:	2b00      	cmp	r3, #0
    88f8:	d03c      	beq.n	8974 <Pwm_Ipw_InitInstance+0x94>
    88fa:	2b01      	cmp	r3, #1
    88fc:	d13c      	bne.n	8978 <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    88fe:	9b01      	ldr	r3, [sp, #4]
    8900:	689b      	ldr	r3, [r3, #8]
    8902:	2b00      	cmp	r3, #0
    8904:	d03a      	beq.n	897c <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
    8906:	9b01      	ldr	r3, [sp, #4]
    8908:	781a      	ldrb	r2, [r3, #0]
    890a:	9b01      	ldr	r3, [sp, #4]
    890c:	689b      	ldr	r3, [r3, #8]
    890e:	4619      	mov	r1, r3
    8910:	4610      	mov	r0, r2
    8912:	f7fe fed7 	bl	76c4 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    8916:	2300      	movs	r3, #0
    8918:	f88d 300f 	strb.w	r3, [sp, #15]
    891c:	e022      	b.n	8964 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
    891e:	9b01      	ldr	r3, [sp, #4]
    8920:	689b      	ldr	r3, [r3, #8]
    8922:	685a      	ldr	r2, [r3, #4]
    8924:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8928:	009b      	lsls	r3, r3, #2
    892a:	4413      	add	r3, r2
    892c:	681b      	ldr	r3, [r3, #0]
    892e:	781b      	ldrb	r3, [r3, #0]
    8930:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
    8934:	9b01      	ldr	r3, [sp, #4]
    8936:	689b      	ldr	r3, [r3, #8]
    8938:	685a      	ldr	r2, [r3, #4]
    893a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    893e:	009b      	lsls	r3, r3, #2
    8940:	4413      	add	r3, r2
    8942:	681a      	ldr	r2, [r3, #0]
    8944:	9b01      	ldr	r3, [sp, #4]
    8946:	781b      	ldrb	r3, [r3, #0]
    8948:	4619      	mov	r1, r3
    894a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    894e:	6a12      	ldr	r2, [r2, #32]
    8950:	480d      	ldr	r0, [pc, #52]	; (8988 <Pwm_Ipw_InitInstance+0xa8>)
    8952:	00c9      	lsls	r1, r1, #3
    8954:	440b      	add	r3, r1
    8956:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    895a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    895e:	3301      	adds	r3, #1
    8960:	f88d 300f 	strb.w	r3, [sp, #15]
    8964:	9b01      	ldr	r3, [sp, #4]
    8966:	689b      	ldr	r3, [r3, #8]
    8968:	7a1b      	ldrb	r3, [r3, #8]
    896a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    896e:	429a      	cmp	r2, r3
    8970:	d3d5      	bcc.n	891e <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
    8972:	e003      	b.n	897c <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    8974:	bf00      	nop
    8976:	e002      	b.n	897e <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
    8978:	bf00      	nop
    897a:	e000      	b.n	897e <Pwm_Ipw_InitInstance+0x9e>
            break;
    897c:	bf00      	nop
    }
}
    897e:	bf00      	nop
    8980:	b005      	add	sp, #20
    8982:	f85d fb04 	ldr.w	pc, [sp], #4
    8986:	bf00      	nop
    8988:	1fff9024 	.word	0x1fff9024

0000898c <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
    898c:	b082      	sub	sp, #8
    898e:	9001      	str	r0, [sp, #4]
    8990:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
    8992:	9b01      	ldr	r3, [sp, #4]
    8994:	681b      	ldr	r3, [r3, #0]
    8996:	2b00      	cmp	r3, #0
    8998:	d00f      	beq.n	89ba <Pwm_Ipw_DeInit+0x2e>
    899a:	2b01      	cmp	r3, #1
    899c:	d10f      	bne.n	89be <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    899e:	9b01      	ldr	r3, [sp, #4]
    89a0:	7a1b      	ldrb	r3, [r3, #8]
    89a2:	4618      	mov	r0, r3
    89a4:	9b01      	ldr	r3, [sp, #4]
    89a6:	685b      	ldr	r3, [r3, #4]
    89a8:	781b      	ldrb	r3, [r3, #0]
    89aa:	4619      	mov	r1, r3
    89ac:	4a06      	ldr	r2, [pc, #24]	; (89c8 <Pwm_Ipw_DeInit+0x3c>)
    89ae:	00c3      	lsls	r3, r0, #3
    89b0:	440b      	add	r3, r1
    89b2:	2100      	movs	r1, #0
    89b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    89b8:	e002      	b.n	89c0 <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    89ba:	bf00      	nop
    89bc:	e000      	b.n	89c0 <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
    89be:	bf00      	nop
    }
    (void) ChannelIdleState;

}
    89c0:	bf00      	nop
    89c2:	b002      	add	sp, #8
    89c4:	4770      	bx	lr
    89c6:	bf00      	nop
    89c8:	1fff90a4 	.word	0x1fff90a4

000089cc <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    89cc:	b500      	push	{lr}
    89ce:	b083      	sub	sp, #12
    89d0:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
    89d2:	9b01      	ldr	r3, [sp, #4]
    89d4:	685b      	ldr	r3, [r3, #4]
    89d6:	2b00      	cmp	r3, #0
    89d8:	d00b      	beq.n	89f2 <Pwm_Ipw_DeInitInstance+0x26>
    89da:	2b01      	cmp	r3, #1
    89dc:	d10b      	bne.n	89f6 <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    89de:	9b01      	ldr	r3, [sp, #4]
    89e0:	689b      	ldr	r3, [r3, #8]
    89e2:	2b00      	cmp	r3, #0
    89e4:	d009      	beq.n	89fa <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
    89e6:	9b01      	ldr	r3, [sp, #4]
    89e8:	781b      	ldrb	r3, [r3, #0]
    89ea:	4618      	mov	r0, r3
    89ec:	f7fe fec8 	bl	7780 <Ftm_Pwm_Ip_DeInit>
            }
            break;
    89f0:	e003      	b.n	89fa <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    89f2:	bf00      	nop
    89f4:	e002      	b.n	89fc <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
    89f6:	bf00      	nop
    89f8:	e000      	b.n	89fc <Pwm_Ipw_DeInitInstance+0x30>
            break;
    89fa:	bf00      	nop
    }
}
    89fc:	bf00      	nop
    89fe:	b003      	add	sp, #12
    8a00:	f85d fb04 	ldr.w	pc, [sp], #4

00008a04 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
    8a04:	b500      	push	{lr}
    8a06:	b085      	sub	sp, #20
    8a08:	4603      	mov	r3, r0
    8a0a:	9100      	str	r1, [sp, #0]
    8a0c:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
    8a10:	2300      	movs	r3, #0
    8a12:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    8a16:	2300      	movs	r3, #0
    8a18:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
    8a1c:	9b00      	ldr	r3, [sp, #0]
    8a1e:	681b      	ldr	r3, [r3, #0]
    8a20:	2b00      	cmp	r3, #0
    8a22:	d02c      	beq.n	8a7e <Pwm_Ipw_SetDutyCycle+0x7a>
    8a24:	2b01      	cmp	r3, #1
    8a26:	d12c      	bne.n	8a82 <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    8a28:	9b00      	ldr	r3, [sp, #0]
    8a2a:	685b      	ldr	r3, [r3, #4]
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	d02a      	beq.n	8a86 <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
    8a30:	9b00      	ldr	r3, [sp, #0]
    8a32:	7a1b      	ldrb	r3, [r3, #8]
    8a34:	461a      	mov	r2, r3
    8a36:	4b17      	ldr	r3, [pc, #92]	; (8a94 <Pwm_Ipw_SetDutyCycle+0x90>)
    8a38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    8a3c:	461a      	mov	r2, r3
    8a3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a42:	fb02 f303 	mul.w	r3, r2, r3
    8a46:	0bdb      	lsrs	r3, r3, #15
    8a48:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    8a4c:	9b00      	ldr	r3, [sp, #0]
    8a4e:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    8a50:	9b00      	ldr	r3, [sp, #0]
    8a52:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    8a54:	7819      	ldrb	r1, [r3, #0]
    8a56:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    8a5a:	2301      	movs	r3, #1
    8a5c:	f7fe fed8 	bl	7810 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    8a60:	9b00      	ldr	r3, [sp, #0]
    8a62:	7a1b      	ldrb	r3, [r3, #8]
    8a64:	4618      	mov	r0, r3
    8a66:	9b00      	ldr	r3, [sp, #0]
    8a68:	685b      	ldr	r3, [r3, #4]
    8a6a:	781b      	ldrb	r3, [r3, #0]
    8a6c:	461a      	mov	r2, r3
    8a6e:	490a      	ldr	r1, [pc, #40]	; (8a98 <Pwm_Ipw_SetDutyCycle+0x94>)
    8a70:	00c3      	lsls	r3, r0, #3
    8a72:	4413      	add	r3, r2
    8a74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8a78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    8a7c:	e003      	b.n	8a86 <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    8a7e:	bf00      	nop
    8a80:	e002      	b.n	8a88 <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
    8a82:	bf00      	nop
    8a84:	e000      	b.n	8a88 <Pwm_Ipw_SetDutyCycle+0x84>
            break;
    8a86:	bf00      	nop
    }

    return RetVal;
    8a88:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8a8c:	4618      	mov	r0, r3
    8a8e:	b005      	add	sp, #20
    8a90:	f85d fb04 	ldr.w	pc, [sp], #4
    8a94:	1fff8cfc 	.word	0x1fff8cfc
    8a98:	1fff90a4 	.word	0x1fff90a4

00008a9c <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
    8a9c:	b510      	push	{r4, lr}
    8a9e:	b086      	sub	sp, #24
    8aa0:	4603      	mov	r3, r0
    8aa2:	9202      	str	r2, [sp, #8]
    8aa4:	f8ad 300e 	strh.w	r3, [sp, #14]
    8aa8:	460b      	mov	r3, r1
    8aaa:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    8aae:	2300      	movs	r3, #0
    8ab0:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
    8ab4:	9b02      	ldr	r3, [sp, #8]
    8ab6:	681b      	ldr	r3, [r3, #0]
    8ab8:	2b00      	cmp	r3, #0
    8aba:	d02a      	beq.n	8b12 <Pwm_Ipw_SetPeriodAndDuty+0x76>
    8abc:	2b01      	cmp	r3, #1
    8abe:	d12a      	bne.n	8b16 <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    8ac0:	9b02      	ldr	r3, [sp, #8]
    8ac2:	685b      	ldr	r3, [r3, #4]
    8ac4:	2b00      	cmp	r3, #0
    8ac6:	d028      	beq.n	8b1a <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
    8ac8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8acc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    8ad0:	fb02 f303 	mul.w	r3, r2, r3
    8ad4:	0bdb      	lsrs	r3, r3, #15
    8ad6:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    8ada:	9b02      	ldr	r3, [sp, #8]
    8adc:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    8ade:	9b02      	ldr	r3, [sp, #8]
    8ae0:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    8ae2:	7819      	ldrb	r1, [r3, #0]
    8ae4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8ae8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8aec:	2401      	movs	r4, #1
    8aee:	9400      	str	r4, [sp, #0]
    8af0:	f7fe ff54 	bl	799c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    8af4:	9b02      	ldr	r3, [sp, #8]
    8af6:	7a1b      	ldrb	r3, [r3, #8]
    8af8:	4618      	mov	r0, r3
    8afa:	9b02      	ldr	r3, [sp, #8]
    8afc:	685b      	ldr	r3, [r3, #4]
    8afe:	781b      	ldrb	r3, [r3, #0]
    8b00:	461a      	mov	r2, r3
    8b02:	4908      	ldr	r1, [pc, #32]	; (8b24 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
    8b04:	00c3      	lsls	r3, r0, #3
    8b06:	4413      	add	r3, r2
    8b08:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    8b0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    8b10:	e003      	b.n	8b1a <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    8b12:	bf00      	nop
    8b14:	e002      	b.n	8b1c <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
    8b16:	bf00      	nop
    8b18:	e000      	b.n	8b1c <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
    8b1a:	bf00      	nop
    }
}
    8b1c:	bf00      	nop
    8b1e:	b006      	add	sp, #24
    8b20:	bd10      	pop	{r4, pc}
    8b22:	bf00      	nop
    8b24:	1fff90a4 	.word	0x1fff90a4

00008b28 <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
    8b28:	b084      	sub	sp, #16
    8b2a:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
    8b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8b30:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
    8b32:	9b01      	ldr	r3, [sp, #4]
    8b34:	681b      	ldr	r3, [r3, #0]
    8b36:	2b01      	cmp	r3, #1
    8b38:	d103      	bne.n	8b42 <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
    8b3a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    8b3e:	9303      	str	r3, [sp, #12]
            break;
    8b40:	e000      	b.n	8b44 <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
    8b42:	bf00      	nop
    }

    return RetVal;
    8b44:	9b03      	ldr	r3, [sp, #12]
}
    8b46:	4618      	mov	r0, r3
    8b48:	b004      	add	sp, #16
    8b4a:	4770      	bx	lr

00008b4c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
    8b4c:	b500      	push	{lr}
    8b4e:	b083      	sub	sp, #12
    8b50:	f7f7 ffb0 	bl	ab4 <Sys_GetCoreID>
    8b54:	4603      	mov	r3, r0
    8b56:	9301      	str	r3, [sp, #4]
    8b58:	4a10      	ldr	r2, [pc, #64]	; (8b9c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8b5a:	9b01      	ldr	r3, [sp, #4]
    8b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b60:	2b00      	cmp	r3, #0
    8b62:	d10d      	bne.n	8b80 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    8b64:	f7f7 fec4 	bl	8f0 <Mcu_schm_read_msr>
    8b68:	9000      	str	r0, [sp, #0]
    8b6a:	9b00      	ldr	r3, [sp, #0]
    8b6c:	f003 0301 	and.w	r3, r3, #1
    8b70:	2b00      	cmp	r3, #0
    8b72:	d100      	bne.n	8b76 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
    8b74:	b672      	cpsid	i
    8b76:	490a      	ldr	r1, [pc, #40]	; (8ba0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    8b78:	9b01      	ldr	r3, [sp, #4]
    8b7a:	9a00      	ldr	r2, [sp, #0]
    8b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8b80:	4a06      	ldr	r2, [pc, #24]	; (8b9c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8b82:	9b01      	ldr	r3, [sp, #4]
    8b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b88:	1c5a      	adds	r2, r3, #1
    8b8a:	4904      	ldr	r1, [pc, #16]	; (8b9c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8b8c:	9b01      	ldr	r3, [sp, #4]
    8b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8b92:	bf00      	nop
    8b94:	b003      	add	sp, #12
    8b96:	f85d fb04 	ldr.w	pc, [sp], #4
    8b9a:	bf00      	nop
    8b9c:	1fff90e8 	.word	0x1fff90e8
    8ba0:	1fff90e4 	.word	0x1fff90e4

00008ba4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:
    8ba4:	b500      	push	{lr}
    8ba6:	b083      	sub	sp, #12
    8ba8:	f7f7 ff84 	bl	ab4 <Sys_GetCoreID>
    8bac:	4603      	mov	r3, r0
    8bae:	9301      	str	r3, [sp, #4]
    8bb0:	4a0d      	ldr	r2, [pc, #52]	; (8be8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    8bb2:	9b01      	ldr	r3, [sp, #4]
    8bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bb8:	1e5a      	subs	r2, r3, #1
    8bba:	490b      	ldr	r1, [pc, #44]	; (8be8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    8bbc:	9b01      	ldr	r3, [sp, #4]
    8bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8bc2:	4a0a      	ldr	r2, [pc, #40]	; (8bec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    8bc4:	9b01      	ldr	r3, [sp, #4]
    8bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bca:	f003 0301 	and.w	r3, r3, #1
    8bce:	2b00      	cmp	r3, #0
    8bd0:	d106      	bne.n	8be0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    8bd2:	4a05      	ldr	r2, [pc, #20]	; (8be8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    8bd4:	9b01      	ldr	r3, [sp, #4]
    8bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bda:	2b00      	cmp	r3, #0
    8bdc:	d100      	bne.n	8be0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    8bde:	b662      	cpsie	i
    8be0:	bf00      	nop
    8be2:	b003      	add	sp, #12
    8be4:	f85d fb04 	ldr.w	pc, [sp], #4
    8be8:	1fff90e8 	.word	0x1fff90e8
    8bec:	1fff90e4 	.word	0x1fff90e4

00008bf0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:
    8bf0:	b500      	push	{lr}
    8bf2:	b083      	sub	sp, #12
    8bf4:	f7f7 ff5e 	bl	ab4 <Sys_GetCoreID>
    8bf8:	4603      	mov	r3, r0
    8bfa:	9301      	str	r3, [sp, #4]
    8bfc:	4a10      	ldr	r2, [pc, #64]	; (8c40 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8bfe:	9b01      	ldr	r3, [sp, #4]
    8c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c04:	2b00      	cmp	r3, #0
    8c06:	d10d      	bne.n	8c24 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    8c08:	f7f7 fe72 	bl	8f0 <Mcu_schm_read_msr>
    8c0c:	9000      	str	r0, [sp, #0]
    8c0e:	9b00      	ldr	r3, [sp, #0]
    8c10:	f003 0301 	and.w	r3, r3, #1
    8c14:	2b00      	cmp	r3, #0
    8c16:	d100      	bne.n	8c1a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
    8c18:	b672      	cpsid	i
    8c1a:	490a      	ldr	r1, [pc, #40]	; (8c44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    8c1c:	9b01      	ldr	r3, [sp, #4]
    8c1e:	9a00      	ldr	r2, [sp, #0]
    8c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8c24:	4a06      	ldr	r2, [pc, #24]	; (8c40 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8c26:	9b01      	ldr	r3, [sp, #4]
    8c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c2c:	1c5a      	adds	r2, r3, #1
    8c2e:	4904      	ldr	r1, [pc, #16]	; (8c40 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8c30:	9b01      	ldr	r3, [sp, #4]
    8c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8c36:	bf00      	nop
    8c38:	b003      	add	sp, #12
    8c3a:	f85d fb04 	ldr.w	pc, [sp], #4
    8c3e:	bf00      	nop
    8c40:	1fff90f0 	.word	0x1fff90f0
    8c44:	1fff90ec 	.word	0x1fff90ec

00008c48 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:
    8c48:	b500      	push	{lr}
    8c4a:	b083      	sub	sp, #12
    8c4c:	f7f7 ff32 	bl	ab4 <Sys_GetCoreID>
    8c50:	4603      	mov	r3, r0
    8c52:	9301      	str	r3, [sp, #4]
    8c54:	4a0d      	ldr	r2, [pc, #52]	; (8c8c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8c56:	9b01      	ldr	r3, [sp, #4]
    8c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c5c:	1e5a      	subs	r2, r3, #1
    8c5e:	490b      	ldr	r1, [pc, #44]	; (8c8c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8c60:	9b01      	ldr	r3, [sp, #4]
    8c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8c66:	4a0a      	ldr	r2, [pc, #40]	; (8c90 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    8c68:	9b01      	ldr	r3, [sp, #4]
    8c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c6e:	f003 0301 	and.w	r3, r3, #1
    8c72:	2b00      	cmp	r3, #0
    8c74:	d106      	bne.n	8c84 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    8c76:	4a05      	ldr	r2, [pc, #20]	; (8c8c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8c78:	9b01      	ldr	r3, [sp, #4]
    8c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c7e:	2b00      	cmp	r3, #0
    8c80:	d100      	bne.n	8c84 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    8c82:	b662      	cpsie	i
    8c84:	bf00      	nop
    8c86:	b003      	add	sp, #12
    8c88:	f85d fb04 	ldr.w	pc, [sp], #4
    8c8c:	1fff90f0 	.word	0x1fff90f0
    8c90:	1fff90ec 	.word	0x1fff90ec

00008c94 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:
    8c94:	b500      	push	{lr}
    8c96:	b083      	sub	sp, #12
    8c98:	f7f7 ff0c 	bl	ab4 <Sys_GetCoreID>
    8c9c:	4603      	mov	r3, r0
    8c9e:	9301      	str	r3, [sp, #4]
    8ca0:	4a10      	ldr	r2, [pc, #64]	; (8ce4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8ca2:	9b01      	ldr	r3, [sp, #4]
    8ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ca8:	2b00      	cmp	r3, #0
    8caa:	d10d      	bne.n	8cc8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    8cac:	f7f7 fe20 	bl	8f0 <Mcu_schm_read_msr>
    8cb0:	9000      	str	r0, [sp, #0]
    8cb2:	9b00      	ldr	r3, [sp, #0]
    8cb4:	f003 0301 	and.w	r3, r3, #1
    8cb8:	2b00      	cmp	r3, #0
    8cba:	d100      	bne.n	8cbe <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
    8cbc:	b672      	cpsid	i
    8cbe:	490a      	ldr	r1, [pc, #40]	; (8ce8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    8cc0:	9b01      	ldr	r3, [sp, #4]
    8cc2:	9a00      	ldr	r2, [sp, #0]
    8cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8cc8:	4a06      	ldr	r2, [pc, #24]	; (8ce4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8cca:	9b01      	ldr	r3, [sp, #4]
    8ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cd0:	1c5a      	adds	r2, r3, #1
    8cd2:	4904      	ldr	r1, [pc, #16]	; (8ce4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8cd4:	9b01      	ldr	r3, [sp, #4]
    8cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8cda:	bf00      	nop
    8cdc:	b003      	add	sp, #12
    8cde:	f85d fb04 	ldr.w	pc, [sp], #4
    8ce2:	bf00      	nop
    8ce4:	1fff90f8 	.word	0x1fff90f8
    8ce8:	1fff90f4 	.word	0x1fff90f4

00008cec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:
    8cec:	b500      	push	{lr}
    8cee:	b083      	sub	sp, #12
    8cf0:	f7f7 fee0 	bl	ab4 <Sys_GetCoreID>
    8cf4:	4603      	mov	r3, r0
    8cf6:	9301      	str	r3, [sp, #4]
    8cf8:	4a0d      	ldr	r2, [pc, #52]	; (8d30 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8cfa:	9b01      	ldr	r3, [sp, #4]
    8cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d00:	1e5a      	subs	r2, r3, #1
    8d02:	490b      	ldr	r1, [pc, #44]	; (8d30 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8d04:	9b01      	ldr	r3, [sp, #4]
    8d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8d0a:	4a0a      	ldr	r2, [pc, #40]	; (8d34 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    8d0c:	9b01      	ldr	r3, [sp, #4]
    8d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d12:	f003 0301 	and.w	r3, r3, #1
    8d16:	2b00      	cmp	r3, #0
    8d18:	d106      	bne.n	8d28 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    8d1a:	4a05      	ldr	r2, [pc, #20]	; (8d30 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8d1c:	9b01      	ldr	r3, [sp, #4]
    8d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d22:	2b00      	cmp	r3, #0
    8d24:	d100      	bne.n	8d28 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    8d26:	b662      	cpsie	i
    8d28:	bf00      	nop
    8d2a:	b003      	add	sp, #12
    8d2c:	f85d fb04 	ldr.w	pc, [sp], #4
    8d30:	1fff90f8 	.word	0x1fff90f8
    8d34:	1fff90f4 	.word	0x1fff90f4

00008d38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
    8d38:	b500      	push	{lr}
    8d3a:	b083      	sub	sp, #12
    8d3c:	f7f7 feba 	bl	ab4 <Sys_GetCoreID>
    8d40:	4603      	mov	r3, r0
    8d42:	9301      	str	r3, [sp, #4]
    8d44:	4a10      	ldr	r2, [pc, #64]	; (8d88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8d46:	9b01      	ldr	r3, [sp, #4]
    8d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d4c:	2b00      	cmp	r3, #0
    8d4e:	d10d      	bne.n	8d6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    8d50:	f7f7 fdd7 	bl	902 <Port_schm_read_msr>
    8d54:	9000      	str	r0, [sp, #0]
    8d56:	9b00      	ldr	r3, [sp, #0]
    8d58:	f003 0301 	and.w	r3, r3, #1
    8d5c:	2b00      	cmp	r3, #0
    8d5e:	d100      	bne.n	8d62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
    8d60:	b672      	cpsid	i
    8d62:	490a      	ldr	r1, [pc, #40]	; (8d8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    8d64:	9b01      	ldr	r3, [sp, #4]
    8d66:	9a00      	ldr	r2, [sp, #0]
    8d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8d6c:	4a06      	ldr	r2, [pc, #24]	; (8d88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8d6e:	9b01      	ldr	r3, [sp, #4]
    8d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d74:	1c5a      	adds	r2, r3, #1
    8d76:	4904      	ldr	r1, [pc, #16]	; (8d88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8d78:	9b01      	ldr	r3, [sp, #4]
    8d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8d7e:	bf00      	nop
    8d80:	b003      	add	sp, #12
    8d82:	f85d fb04 	ldr.w	pc, [sp], #4
    8d86:	bf00      	nop
    8d88:	1fff9100 	.word	0x1fff9100
    8d8c:	1fff90fc 	.word	0x1fff90fc

00008d90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:
    8d90:	b500      	push	{lr}
    8d92:	b083      	sub	sp, #12
    8d94:	f7f7 fe8e 	bl	ab4 <Sys_GetCoreID>
    8d98:	4603      	mov	r3, r0
    8d9a:	9301      	str	r3, [sp, #4]
    8d9c:	4a0d      	ldr	r2, [pc, #52]	; (8dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8d9e:	9b01      	ldr	r3, [sp, #4]
    8da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8da4:	1e5a      	subs	r2, r3, #1
    8da6:	490b      	ldr	r1, [pc, #44]	; (8dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8da8:	9b01      	ldr	r3, [sp, #4]
    8daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8dae:	4a0a      	ldr	r2, [pc, #40]	; (8dd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    8db0:	9b01      	ldr	r3, [sp, #4]
    8db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8db6:	f003 0301 	and.w	r3, r3, #1
    8dba:	2b00      	cmp	r3, #0
    8dbc:	d106      	bne.n	8dcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    8dbe:	4a05      	ldr	r2, [pc, #20]	; (8dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8dc0:	9b01      	ldr	r3, [sp, #4]
    8dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dc6:	2b00      	cmp	r3, #0
    8dc8:	d100      	bne.n	8dcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    8dca:	b662      	cpsie	i
    8dcc:	bf00      	nop
    8dce:	b003      	add	sp, #12
    8dd0:	f85d fb04 	ldr.w	pc, [sp], #4
    8dd4:	1fff9100 	.word	0x1fff9100
    8dd8:	1fff90fc 	.word	0x1fff90fc

00008ddc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:
    8ddc:	b500      	push	{lr}
    8dde:	b083      	sub	sp, #12
    8de0:	f7f7 fe68 	bl	ab4 <Sys_GetCoreID>
    8de4:	4603      	mov	r3, r0
    8de6:	9301      	str	r3, [sp, #4]
    8de8:	4a10      	ldr	r2, [pc, #64]	; (8e2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8dea:	9b01      	ldr	r3, [sp, #4]
    8dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8df0:	2b00      	cmp	r3, #0
    8df2:	d10d      	bne.n	8e10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    8df4:	f7f7 fd85 	bl	902 <Port_schm_read_msr>
    8df8:	9000      	str	r0, [sp, #0]
    8dfa:	9b00      	ldr	r3, [sp, #0]
    8dfc:	f003 0301 	and.w	r3, r3, #1
    8e00:	2b00      	cmp	r3, #0
    8e02:	d100      	bne.n	8e06 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
    8e04:	b672      	cpsid	i
    8e06:	490a      	ldr	r1, [pc, #40]	; (8e30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    8e08:	9b01      	ldr	r3, [sp, #4]
    8e0a:	9a00      	ldr	r2, [sp, #0]
    8e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8e10:	4a06      	ldr	r2, [pc, #24]	; (8e2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8e12:	9b01      	ldr	r3, [sp, #4]
    8e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e18:	1c5a      	adds	r2, r3, #1
    8e1a:	4904      	ldr	r1, [pc, #16]	; (8e2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8e1c:	9b01      	ldr	r3, [sp, #4]
    8e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8e22:	bf00      	nop
    8e24:	b003      	add	sp, #12
    8e26:	f85d fb04 	ldr.w	pc, [sp], #4
    8e2a:	bf00      	nop
    8e2c:	1fff9108 	.word	0x1fff9108
    8e30:	1fff9104 	.word	0x1fff9104

00008e34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:
    8e34:	b500      	push	{lr}
    8e36:	b083      	sub	sp, #12
    8e38:	f7f7 fe3c 	bl	ab4 <Sys_GetCoreID>
    8e3c:	4603      	mov	r3, r0
    8e3e:	9301      	str	r3, [sp, #4]
    8e40:	4a0d      	ldr	r2, [pc, #52]	; (8e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8e42:	9b01      	ldr	r3, [sp, #4]
    8e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e48:	1e5a      	subs	r2, r3, #1
    8e4a:	490b      	ldr	r1, [pc, #44]	; (8e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8e4c:	9b01      	ldr	r3, [sp, #4]
    8e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8e52:	4a0a      	ldr	r2, [pc, #40]	; (8e7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    8e54:	9b01      	ldr	r3, [sp, #4]
    8e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e5a:	f003 0301 	and.w	r3, r3, #1
    8e5e:	2b00      	cmp	r3, #0
    8e60:	d106      	bne.n	8e70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    8e62:	4a05      	ldr	r2, [pc, #20]	; (8e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8e64:	9b01      	ldr	r3, [sp, #4]
    8e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e6a:	2b00      	cmp	r3, #0
    8e6c:	d100      	bne.n	8e70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    8e6e:	b662      	cpsie	i
    8e70:	bf00      	nop
    8e72:	b003      	add	sp, #12
    8e74:	f85d fb04 	ldr.w	pc, [sp], #4
    8e78:	1fff9108 	.word	0x1fff9108
    8e7c:	1fff9104 	.word	0x1fff9104

00008e80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:
    8e80:	b500      	push	{lr}
    8e82:	b083      	sub	sp, #12
    8e84:	f7f7 fe16 	bl	ab4 <Sys_GetCoreID>
    8e88:	4603      	mov	r3, r0
    8e8a:	9301      	str	r3, [sp, #4]
    8e8c:	4a10      	ldr	r2, [pc, #64]	; (8ed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8e8e:	9b01      	ldr	r3, [sp, #4]
    8e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e94:	2b00      	cmp	r3, #0
    8e96:	d10d      	bne.n	8eb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    8e98:	f7f7 fd33 	bl	902 <Port_schm_read_msr>
    8e9c:	9000      	str	r0, [sp, #0]
    8e9e:	9b00      	ldr	r3, [sp, #0]
    8ea0:	f003 0301 	and.w	r3, r3, #1
    8ea4:	2b00      	cmp	r3, #0
    8ea6:	d100      	bne.n	8eaa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
    8ea8:	b672      	cpsid	i
    8eaa:	490a      	ldr	r1, [pc, #40]	; (8ed4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    8eac:	9b01      	ldr	r3, [sp, #4]
    8eae:	9a00      	ldr	r2, [sp, #0]
    8eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8eb4:	4a06      	ldr	r2, [pc, #24]	; (8ed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8eb6:	9b01      	ldr	r3, [sp, #4]
    8eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ebc:	1c5a      	adds	r2, r3, #1
    8ebe:	4904      	ldr	r1, [pc, #16]	; (8ed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8ec0:	9b01      	ldr	r3, [sp, #4]
    8ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8ec6:	bf00      	nop
    8ec8:	b003      	add	sp, #12
    8eca:	f85d fb04 	ldr.w	pc, [sp], #4
    8ece:	bf00      	nop
    8ed0:	1fff9110 	.word	0x1fff9110
    8ed4:	1fff910c 	.word	0x1fff910c

00008ed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:
    8ed8:	b500      	push	{lr}
    8eda:	b083      	sub	sp, #12
    8edc:	f7f7 fdea 	bl	ab4 <Sys_GetCoreID>
    8ee0:	4603      	mov	r3, r0
    8ee2:	9301      	str	r3, [sp, #4]
    8ee4:	4a0d      	ldr	r2, [pc, #52]	; (8f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8ee6:	9b01      	ldr	r3, [sp, #4]
    8ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eec:	1e5a      	subs	r2, r3, #1
    8eee:	490b      	ldr	r1, [pc, #44]	; (8f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8ef0:	9b01      	ldr	r3, [sp, #4]
    8ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8ef6:	4a0a      	ldr	r2, [pc, #40]	; (8f20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    8ef8:	9b01      	ldr	r3, [sp, #4]
    8efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8efe:	f003 0301 	and.w	r3, r3, #1
    8f02:	2b00      	cmp	r3, #0
    8f04:	d106      	bne.n	8f14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    8f06:	4a05      	ldr	r2, [pc, #20]	; (8f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8f08:	9b01      	ldr	r3, [sp, #4]
    8f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f0e:	2b00      	cmp	r3, #0
    8f10:	d100      	bne.n	8f14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    8f12:	b662      	cpsie	i
    8f14:	bf00      	nop
    8f16:	b003      	add	sp, #12
    8f18:	f85d fb04 	ldr.w	pc, [sp], #4
    8f1c:	1fff9110 	.word	0x1fff9110
    8f20:	1fff910c 	.word	0x1fff910c

00008f24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:
    8f24:	b500      	push	{lr}
    8f26:	b083      	sub	sp, #12
    8f28:	f7f7 fdc4 	bl	ab4 <Sys_GetCoreID>
    8f2c:	4603      	mov	r3, r0
    8f2e:	9301      	str	r3, [sp, #4]
    8f30:	4a10      	ldr	r2, [pc, #64]	; (8f74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8f32:	9b01      	ldr	r3, [sp, #4]
    8f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f38:	2b00      	cmp	r3, #0
    8f3a:	d10d      	bne.n	8f58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    8f3c:	f7f7 fce1 	bl	902 <Port_schm_read_msr>
    8f40:	9000      	str	r0, [sp, #0]
    8f42:	9b00      	ldr	r3, [sp, #0]
    8f44:	f003 0301 	and.w	r3, r3, #1
    8f48:	2b00      	cmp	r3, #0
    8f4a:	d100      	bne.n	8f4e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
    8f4c:	b672      	cpsid	i
    8f4e:	490a      	ldr	r1, [pc, #40]	; (8f78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    8f50:	9b01      	ldr	r3, [sp, #4]
    8f52:	9a00      	ldr	r2, [sp, #0]
    8f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8f58:	4a06      	ldr	r2, [pc, #24]	; (8f74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8f5a:	9b01      	ldr	r3, [sp, #4]
    8f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f60:	1c5a      	adds	r2, r3, #1
    8f62:	4904      	ldr	r1, [pc, #16]	; (8f74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8f64:	9b01      	ldr	r3, [sp, #4]
    8f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8f6a:	bf00      	nop
    8f6c:	b003      	add	sp, #12
    8f6e:	f85d fb04 	ldr.w	pc, [sp], #4
    8f72:	bf00      	nop
    8f74:	1fff9118 	.word	0x1fff9118
    8f78:	1fff9114 	.word	0x1fff9114

00008f7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:
    8f7c:	b500      	push	{lr}
    8f7e:	b083      	sub	sp, #12
    8f80:	f7f7 fd98 	bl	ab4 <Sys_GetCoreID>
    8f84:	4603      	mov	r3, r0
    8f86:	9301      	str	r3, [sp, #4]
    8f88:	4a0d      	ldr	r2, [pc, #52]	; (8fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    8f8a:	9b01      	ldr	r3, [sp, #4]
    8f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f90:	1e5a      	subs	r2, r3, #1
    8f92:	490b      	ldr	r1, [pc, #44]	; (8fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    8f94:	9b01      	ldr	r3, [sp, #4]
    8f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8f9a:	4a0a      	ldr	r2, [pc, #40]	; (8fc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    8f9c:	9b01      	ldr	r3, [sp, #4]
    8f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fa2:	f003 0301 	and.w	r3, r3, #1
    8fa6:	2b00      	cmp	r3, #0
    8fa8:	d106      	bne.n	8fb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    8faa:	4a05      	ldr	r2, [pc, #20]	; (8fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    8fac:	9b01      	ldr	r3, [sp, #4]
    8fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fb2:	2b00      	cmp	r3, #0
    8fb4:	d100      	bne.n	8fb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    8fb6:	b662      	cpsie	i
    8fb8:	bf00      	nop
    8fba:	b003      	add	sp, #12
    8fbc:	f85d fb04 	ldr.w	pc, [sp], #4
    8fc0:	1fff9118 	.word	0x1fff9118
    8fc4:	1fff9114 	.word	0x1fff9114

00008fc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:
    8fc8:	b500      	push	{lr}
    8fca:	b083      	sub	sp, #12
    8fcc:	f7f7 fd72 	bl	ab4 <Sys_GetCoreID>
    8fd0:	4603      	mov	r3, r0
    8fd2:	9301      	str	r3, [sp, #4]
    8fd4:	4a10      	ldr	r2, [pc, #64]	; (9018 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    8fd6:	9b01      	ldr	r3, [sp, #4]
    8fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fdc:	2b00      	cmp	r3, #0
    8fde:	d10d      	bne.n	8ffc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    8fe0:	f7f7 fc8f 	bl	902 <Port_schm_read_msr>
    8fe4:	9000      	str	r0, [sp, #0]
    8fe6:	9b00      	ldr	r3, [sp, #0]
    8fe8:	f003 0301 	and.w	r3, r3, #1
    8fec:	2b00      	cmp	r3, #0
    8fee:	d100      	bne.n	8ff2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
    8ff0:	b672      	cpsid	i
    8ff2:	490a      	ldr	r1, [pc, #40]	; (901c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    8ff4:	9b01      	ldr	r3, [sp, #4]
    8ff6:	9a00      	ldr	r2, [sp, #0]
    8ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8ffc:	4a06      	ldr	r2, [pc, #24]	; (9018 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    8ffe:	9b01      	ldr	r3, [sp, #4]
    9000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9004:	1c5a      	adds	r2, r3, #1
    9006:	4904      	ldr	r1, [pc, #16]	; (9018 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    9008:	9b01      	ldr	r3, [sp, #4]
    900a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    900e:	bf00      	nop
    9010:	b003      	add	sp, #12
    9012:	f85d fb04 	ldr.w	pc, [sp], #4
    9016:	bf00      	nop
    9018:	1fff9120 	.word	0x1fff9120
    901c:	1fff911c 	.word	0x1fff911c

00009020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:
    9020:	b500      	push	{lr}
    9022:	b083      	sub	sp, #12
    9024:	f7f7 fd46 	bl	ab4 <Sys_GetCoreID>
    9028:	4603      	mov	r3, r0
    902a:	9301      	str	r3, [sp, #4]
    902c:	4a0d      	ldr	r2, [pc, #52]	; (9064 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    902e:	9b01      	ldr	r3, [sp, #4]
    9030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9034:	1e5a      	subs	r2, r3, #1
    9036:	490b      	ldr	r1, [pc, #44]	; (9064 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    9038:	9b01      	ldr	r3, [sp, #4]
    903a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    903e:	4a0a      	ldr	r2, [pc, #40]	; (9068 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    9040:	9b01      	ldr	r3, [sp, #4]
    9042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9046:	f003 0301 	and.w	r3, r3, #1
    904a:	2b00      	cmp	r3, #0
    904c:	d106      	bne.n	905c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    904e:	4a05      	ldr	r2, [pc, #20]	; (9064 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    9050:	9b01      	ldr	r3, [sp, #4]
    9052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9056:	2b00      	cmp	r3, #0
    9058:	d100      	bne.n	905c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    905a:	b662      	cpsie	i
    905c:	bf00      	nop
    905e:	b003      	add	sp, #12
    9060:	f85d fb04 	ldr.w	pc, [sp], #4
    9064:	1fff9120 	.word	0x1fff9120
    9068:	1fff911c 	.word	0x1fff911c

0000906c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:
    906c:	b500      	push	{lr}
    906e:	b083      	sub	sp, #12
    9070:	f7f7 fd20 	bl	ab4 <Sys_GetCoreID>
    9074:	4603      	mov	r3, r0
    9076:	9301      	str	r3, [sp, #4]
    9078:	4a10      	ldr	r2, [pc, #64]	; (90bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    907a:	9b01      	ldr	r3, [sp, #4]
    907c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9080:	2b00      	cmp	r3, #0
    9082:	d10d      	bne.n	90a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    9084:	f7f7 fc3d 	bl	902 <Port_schm_read_msr>
    9088:	9000      	str	r0, [sp, #0]
    908a:	9b00      	ldr	r3, [sp, #0]
    908c:	f003 0301 	and.w	r3, r3, #1
    9090:	2b00      	cmp	r3, #0
    9092:	d100      	bne.n	9096 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
    9094:	b672      	cpsid	i
    9096:	490a      	ldr	r1, [pc, #40]	; (90c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    9098:	9b01      	ldr	r3, [sp, #4]
    909a:	9a00      	ldr	r2, [sp, #0]
    909c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    90a0:	4a06      	ldr	r2, [pc, #24]	; (90bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    90a2:	9b01      	ldr	r3, [sp, #4]
    90a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90a8:	1c5a      	adds	r2, r3, #1
    90aa:	4904      	ldr	r1, [pc, #16]	; (90bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    90ac:	9b01      	ldr	r3, [sp, #4]
    90ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    90b2:	bf00      	nop
    90b4:	b003      	add	sp, #12
    90b6:	f85d fb04 	ldr.w	pc, [sp], #4
    90ba:	bf00      	nop
    90bc:	1fff9128 	.word	0x1fff9128
    90c0:	1fff9124 	.word	0x1fff9124

000090c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:
    90c4:	b500      	push	{lr}
    90c6:	b083      	sub	sp, #12
    90c8:	f7f7 fcf4 	bl	ab4 <Sys_GetCoreID>
    90cc:	4603      	mov	r3, r0
    90ce:	9301      	str	r3, [sp, #4]
    90d0:	4a0d      	ldr	r2, [pc, #52]	; (9108 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    90d2:	9b01      	ldr	r3, [sp, #4]
    90d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90d8:	1e5a      	subs	r2, r3, #1
    90da:	490b      	ldr	r1, [pc, #44]	; (9108 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    90dc:	9b01      	ldr	r3, [sp, #4]
    90de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    90e2:	4a0a      	ldr	r2, [pc, #40]	; (910c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    90e4:	9b01      	ldr	r3, [sp, #4]
    90e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90ea:	f003 0301 	and.w	r3, r3, #1
    90ee:	2b00      	cmp	r3, #0
    90f0:	d106      	bne.n	9100 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    90f2:	4a05      	ldr	r2, [pc, #20]	; (9108 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    90f4:	9b01      	ldr	r3, [sp, #4]
    90f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90fa:	2b00      	cmp	r3, #0
    90fc:	d100      	bne.n	9100 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    90fe:	b662      	cpsie	i
    9100:	bf00      	nop
    9102:	b003      	add	sp, #12
    9104:	f85d fb04 	ldr.w	pc, [sp], #4
    9108:	1fff9128 	.word	0x1fff9128
    910c:	1fff9124 	.word	0x1fff9124

00009110 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:
    9110:	b500      	push	{lr}
    9112:	b083      	sub	sp, #12
    9114:	f7f7 fcce 	bl	ab4 <Sys_GetCoreID>
    9118:	4603      	mov	r3, r0
    911a:	9301      	str	r3, [sp, #4]
    911c:	4a10      	ldr	r2, [pc, #64]	; (9160 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    911e:	9b01      	ldr	r3, [sp, #4]
    9120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9124:	2b00      	cmp	r3, #0
    9126:	d10d      	bne.n	9144 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    9128:	f7f7 fbeb 	bl	902 <Port_schm_read_msr>
    912c:	9000      	str	r0, [sp, #0]
    912e:	9b00      	ldr	r3, [sp, #0]
    9130:	f003 0301 	and.w	r3, r3, #1
    9134:	2b00      	cmp	r3, #0
    9136:	d100      	bne.n	913a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
    9138:	b672      	cpsid	i
    913a:	490a      	ldr	r1, [pc, #40]	; (9164 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    913c:	9b01      	ldr	r3, [sp, #4]
    913e:	9a00      	ldr	r2, [sp, #0]
    9140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9144:	4a06      	ldr	r2, [pc, #24]	; (9160 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    9146:	9b01      	ldr	r3, [sp, #4]
    9148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    914c:	1c5a      	adds	r2, r3, #1
    914e:	4904      	ldr	r1, [pc, #16]	; (9160 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    9150:	9b01      	ldr	r3, [sp, #4]
    9152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9156:	bf00      	nop
    9158:	b003      	add	sp, #12
    915a:	f85d fb04 	ldr.w	pc, [sp], #4
    915e:	bf00      	nop
    9160:	1fff9130 	.word	0x1fff9130
    9164:	1fff912c 	.word	0x1fff912c

00009168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:
    9168:	b500      	push	{lr}
    916a:	b083      	sub	sp, #12
    916c:	f7f7 fca2 	bl	ab4 <Sys_GetCoreID>
    9170:	4603      	mov	r3, r0
    9172:	9301      	str	r3, [sp, #4]
    9174:	4a0d      	ldr	r2, [pc, #52]	; (91ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    9176:	9b01      	ldr	r3, [sp, #4]
    9178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    917c:	1e5a      	subs	r2, r3, #1
    917e:	490b      	ldr	r1, [pc, #44]	; (91ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    9180:	9b01      	ldr	r3, [sp, #4]
    9182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9186:	4a0a      	ldr	r2, [pc, #40]	; (91b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    9188:	9b01      	ldr	r3, [sp, #4]
    918a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    918e:	f003 0301 	and.w	r3, r3, #1
    9192:	2b00      	cmp	r3, #0
    9194:	d106      	bne.n	91a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    9196:	4a05      	ldr	r2, [pc, #20]	; (91ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    9198:	9b01      	ldr	r3, [sp, #4]
    919a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    919e:	2b00      	cmp	r3, #0
    91a0:	d100      	bne.n	91a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    91a2:	b662      	cpsie	i
    91a4:	bf00      	nop
    91a6:	b003      	add	sp, #12
    91a8:	f85d fb04 	ldr.w	pc, [sp], #4
    91ac:	1fff9130 	.word	0x1fff9130
    91b0:	1fff912c 	.word	0x1fff912c

000091b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:
    91b4:	b500      	push	{lr}
    91b6:	b083      	sub	sp, #12
    91b8:	f7f7 fc7c 	bl	ab4 <Sys_GetCoreID>
    91bc:	4603      	mov	r3, r0
    91be:	9301      	str	r3, [sp, #4]
    91c0:	4a10      	ldr	r2, [pc, #64]	; (9204 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    91c2:	9b01      	ldr	r3, [sp, #4]
    91c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91c8:	2b00      	cmp	r3, #0
    91ca:	d10d      	bne.n	91e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    91cc:	f7f7 fb99 	bl	902 <Port_schm_read_msr>
    91d0:	9000      	str	r0, [sp, #0]
    91d2:	9b00      	ldr	r3, [sp, #0]
    91d4:	f003 0301 	and.w	r3, r3, #1
    91d8:	2b00      	cmp	r3, #0
    91da:	d100      	bne.n	91de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
    91dc:	b672      	cpsid	i
    91de:	490a      	ldr	r1, [pc, #40]	; (9208 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    91e0:	9b01      	ldr	r3, [sp, #4]
    91e2:	9a00      	ldr	r2, [sp, #0]
    91e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    91e8:	4a06      	ldr	r2, [pc, #24]	; (9204 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    91ea:	9b01      	ldr	r3, [sp, #4]
    91ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91f0:	1c5a      	adds	r2, r3, #1
    91f2:	4904      	ldr	r1, [pc, #16]	; (9204 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    91f4:	9b01      	ldr	r3, [sp, #4]
    91f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    91fa:	bf00      	nop
    91fc:	b003      	add	sp, #12
    91fe:	f85d fb04 	ldr.w	pc, [sp], #4
    9202:	bf00      	nop
    9204:	1fff9138 	.word	0x1fff9138
    9208:	1fff9134 	.word	0x1fff9134

0000920c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:
    920c:	b500      	push	{lr}
    920e:	b083      	sub	sp, #12
    9210:	f7f7 fc50 	bl	ab4 <Sys_GetCoreID>
    9214:	4603      	mov	r3, r0
    9216:	9301      	str	r3, [sp, #4]
    9218:	4a0d      	ldr	r2, [pc, #52]	; (9250 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    921a:	9b01      	ldr	r3, [sp, #4]
    921c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9220:	1e5a      	subs	r2, r3, #1
    9222:	490b      	ldr	r1, [pc, #44]	; (9250 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    9224:	9b01      	ldr	r3, [sp, #4]
    9226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    922a:	4a0a      	ldr	r2, [pc, #40]	; (9254 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    922c:	9b01      	ldr	r3, [sp, #4]
    922e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9232:	f003 0301 	and.w	r3, r3, #1
    9236:	2b00      	cmp	r3, #0
    9238:	d106      	bne.n	9248 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    923a:	4a05      	ldr	r2, [pc, #20]	; (9250 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    923c:	9b01      	ldr	r3, [sp, #4]
    923e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9242:	2b00      	cmp	r3, #0
    9244:	d100      	bne.n	9248 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    9246:	b662      	cpsie	i
    9248:	bf00      	nop
    924a:	b003      	add	sp, #12
    924c:	f85d fb04 	ldr.w	pc, [sp], #4
    9250:	1fff9138 	.word	0x1fff9138
    9254:	1fff9134 	.word	0x1fff9134

00009258 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:
    9258:	b500      	push	{lr}
    925a:	b083      	sub	sp, #12
    925c:	f7f7 fc2a 	bl	ab4 <Sys_GetCoreID>
    9260:	4603      	mov	r3, r0
    9262:	9301      	str	r3, [sp, #4]
    9264:	4a10      	ldr	r2, [pc, #64]	; (92a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    9266:	9b01      	ldr	r3, [sp, #4]
    9268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    926c:	2b00      	cmp	r3, #0
    926e:	d10d      	bne.n	928c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    9270:	f7f7 fb47 	bl	902 <Port_schm_read_msr>
    9274:	9000      	str	r0, [sp, #0]
    9276:	9b00      	ldr	r3, [sp, #0]
    9278:	f003 0301 	and.w	r3, r3, #1
    927c:	2b00      	cmp	r3, #0
    927e:	d100      	bne.n	9282 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
    9280:	b672      	cpsid	i
    9282:	490a      	ldr	r1, [pc, #40]	; (92ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    9284:	9b01      	ldr	r3, [sp, #4]
    9286:	9a00      	ldr	r2, [sp, #0]
    9288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    928c:	4a06      	ldr	r2, [pc, #24]	; (92a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    928e:	9b01      	ldr	r3, [sp, #4]
    9290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9294:	1c5a      	adds	r2, r3, #1
    9296:	4904      	ldr	r1, [pc, #16]	; (92a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    9298:	9b01      	ldr	r3, [sp, #4]
    929a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    929e:	bf00      	nop
    92a0:	b003      	add	sp, #12
    92a2:	f85d fb04 	ldr.w	pc, [sp], #4
    92a6:	bf00      	nop
    92a8:	1fff9140 	.word	0x1fff9140
    92ac:	1fff913c 	.word	0x1fff913c

000092b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:
    92b0:	b500      	push	{lr}
    92b2:	b083      	sub	sp, #12
    92b4:	f7f7 fbfe 	bl	ab4 <Sys_GetCoreID>
    92b8:	4603      	mov	r3, r0
    92ba:	9301      	str	r3, [sp, #4]
    92bc:	4a0d      	ldr	r2, [pc, #52]	; (92f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    92be:	9b01      	ldr	r3, [sp, #4]
    92c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92c4:	1e5a      	subs	r2, r3, #1
    92c6:	490b      	ldr	r1, [pc, #44]	; (92f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    92c8:	9b01      	ldr	r3, [sp, #4]
    92ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    92ce:	4a0a      	ldr	r2, [pc, #40]	; (92f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    92d0:	9b01      	ldr	r3, [sp, #4]
    92d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92d6:	f003 0301 	and.w	r3, r3, #1
    92da:	2b00      	cmp	r3, #0
    92dc:	d106      	bne.n	92ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    92de:	4a05      	ldr	r2, [pc, #20]	; (92f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    92e0:	9b01      	ldr	r3, [sp, #4]
    92e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92e6:	2b00      	cmp	r3, #0
    92e8:	d100      	bne.n	92ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    92ea:	b662      	cpsie	i
    92ec:	bf00      	nop
    92ee:	b003      	add	sp, #12
    92f0:	f85d fb04 	ldr.w	pc, [sp], #4
    92f4:	1fff9140 	.word	0x1fff9140
    92f8:	1fff913c 	.word	0x1fff913c

000092fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:
    92fc:	b500      	push	{lr}
    92fe:	b083      	sub	sp, #12
    9300:	f7f7 fbd8 	bl	ab4 <Sys_GetCoreID>
    9304:	4603      	mov	r3, r0
    9306:	9301      	str	r3, [sp, #4]
    9308:	4a10      	ldr	r2, [pc, #64]	; (934c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    930a:	9b01      	ldr	r3, [sp, #4]
    930c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9310:	2b00      	cmp	r3, #0
    9312:	d10d      	bne.n	9330 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    9314:	f7f7 faf5 	bl	902 <Port_schm_read_msr>
    9318:	9000      	str	r0, [sp, #0]
    931a:	9b00      	ldr	r3, [sp, #0]
    931c:	f003 0301 	and.w	r3, r3, #1
    9320:	2b00      	cmp	r3, #0
    9322:	d100      	bne.n	9326 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
    9324:	b672      	cpsid	i
    9326:	490a      	ldr	r1, [pc, #40]	; (9350 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    9328:	9b01      	ldr	r3, [sp, #4]
    932a:	9a00      	ldr	r2, [sp, #0]
    932c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9330:	4a06      	ldr	r2, [pc, #24]	; (934c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    9332:	9b01      	ldr	r3, [sp, #4]
    9334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9338:	1c5a      	adds	r2, r3, #1
    933a:	4904      	ldr	r1, [pc, #16]	; (934c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    933c:	9b01      	ldr	r3, [sp, #4]
    933e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9342:	bf00      	nop
    9344:	b003      	add	sp, #12
    9346:	f85d fb04 	ldr.w	pc, [sp], #4
    934a:	bf00      	nop
    934c:	1fff9148 	.word	0x1fff9148
    9350:	1fff9144 	.word	0x1fff9144

00009354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:
    9354:	b500      	push	{lr}
    9356:	b083      	sub	sp, #12
    9358:	f7f7 fbac 	bl	ab4 <Sys_GetCoreID>
    935c:	4603      	mov	r3, r0
    935e:	9301      	str	r3, [sp, #4]
    9360:	4a0d      	ldr	r2, [pc, #52]	; (9398 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    9362:	9b01      	ldr	r3, [sp, #4]
    9364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9368:	1e5a      	subs	r2, r3, #1
    936a:	490b      	ldr	r1, [pc, #44]	; (9398 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    936c:	9b01      	ldr	r3, [sp, #4]
    936e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9372:	4a0a      	ldr	r2, [pc, #40]	; (939c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    9374:	9b01      	ldr	r3, [sp, #4]
    9376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    937a:	f003 0301 	and.w	r3, r3, #1
    937e:	2b00      	cmp	r3, #0
    9380:	d106      	bne.n	9390 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    9382:	4a05      	ldr	r2, [pc, #20]	; (9398 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    9384:	9b01      	ldr	r3, [sp, #4]
    9386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    938a:	2b00      	cmp	r3, #0
    938c:	d100      	bne.n	9390 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    938e:	b662      	cpsie	i
    9390:	bf00      	nop
    9392:	b003      	add	sp, #12
    9394:	f85d fb04 	ldr.w	pc, [sp], #4
    9398:	1fff9148 	.word	0x1fff9148
    939c:	1fff9144 	.word	0x1fff9144

000093a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:
    93a0:	b500      	push	{lr}
    93a2:	b083      	sub	sp, #12
    93a4:	f7f7 fb86 	bl	ab4 <Sys_GetCoreID>
    93a8:	4603      	mov	r3, r0
    93aa:	9301      	str	r3, [sp, #4]
    93ac:	4a10      	ldr	r2, [pc, #64]	; (93f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    93ae:	9b01      	ldr	r3, [sp, #4]
    93b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93b4:	2b00      	cmp	r3, #0
    93b6:	d10d      	bne.n	93d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    93b8:	f7f7 faa3 	bl	902 <Port_schm_read_msr>
    93bc:	9000      	str	r0, [sp, #0]
    93be:	9b00      	ldr	r3, [sp, #0]
    93c0:	f003 0301 	and.w	r3, r3, #1
    93c4:	2b00      	cmp	r3, #0
    93c6:	d100      	bne.n	93ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
    93c8:	b672      	cpsid	i
    93ca:	490a      	ldr	r1, [pc, #40]	; (93f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    93cc:	9b01      	ldr	r3, [sp, #4]
    93ce:	9a00      	ldr	r2, [sp, #0]
    93d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    93d4:	4a06      	ldr	r2, [pc, #24]	; (93f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    93d6:	9b01      	ldr	r3, [sp, #4]
    93d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93dc:	1c5a      	adds	r2, r3, #1
    93de:	4904      	ldr	r1, [pc, #16]	; (93f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    93e0:	9b01      	ldr	r3, [sp, #4]
    93e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    93e6:	bf00      	nop
    93e8:	b003      	add	sp, #12
    93ea:	f85d fb04 	ldr.w	pc, [sp], #4
    93ee:	bf00      	nop
    93f0:	1fff9150 	.word	0x1fff9150
    93f4:	1fff914c 	.word	0x1fff914c

000093f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:
    93f8:	b500      	push	{lr}
    93fa:	b083      	sub	sp, #12
    93fc:	f7f7 fb5a 	bl	ab4 <Sys_GetCoreID>
    9400:	4603      	mov	r3, r0
    9402:	9301      	str	r3, [sp, #4]
    9404:	4a0d      	ldr	r2, [pc, #52]	; (943c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    9406:	9b01      	ldr	r3, [sp, #4]
    9408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    940c:	1e5a      	subs	r2, r3, #1
    940e:	490b      	ldr	r1, [pc, #44]	; (943c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    9410:	9b01      	ldr	r3, [sp, #4]
    9412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9416:	4a0a      	ldr	r2, [pc, #40]	; (9440 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    9418:	9b01      	ldr	r3, [sp, #4]
    941a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    941e:	f003 0301 	and.w	r3, r3, #1
    9422:	2b00      	cmp	r3, #0
    9424:	d106      	bne.n	9434 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    9426:	4a05      	ldr	r2, [pc, #20]	; (943c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    9428:	9b01      	ldr	r3, [sp, #4]
    942a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    942e:	2b00      	cmp	r3, #0
    9430:	d100      	bne.n	9434 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    9432:	b662      	cpsie	i
    9434:	bf00      	nop
    9436:	b003      	add	sp, #12
    9438:	f85d fb04 	ldr.w	pc, [sp], #4
    943c:	1fff9150 	.word	0x1fff9150
    9440:	1fff914c 	.word	0x1fff914c

00009444 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:
    9444:	b500      	push	{lr}
    9446:	b083      	sub	sp, #12
    9448:	f7f7 fb34 	bl	ab4 <Sys_GetCoreID>
    944c:	4603      	mov	r3, r0
    944e:	9301      	str	r3, [sp, #4]
    9450:	4a10      	ldr	r2, [pc, #64]	; (9494 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    9452:	9b01      	ldr	r3, [sp, #4]
    9454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9458:	2b00      	cmp	r3, #0
    945a:	d10d      	bne.n	9478 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    945c:	f7f7 fa51 	bl	902 <Port_schm_read_msr>
    9460:	9000      	str	r0, [sp, #0]
    9462:	9b00      	ldr	r3, [sp, #0]
    9464:	f003 0301 	and.w	r3, r3, #1
    9468:	2b00      	cmp	r3, #0
    946a:	d100      	bne.n	946e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
    946c:	b672      	cpsid	i
    946e:	490a      	ldr	r1, [pc, #40]	; (9498 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    9470:	9b01      	ldr	r3, [sp, #4]
    9472:	9a00      	ldr	r2, [sp, #0]
    9474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9478:	4a06      	ldr	r2, [pc, #24]	; (9494 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    947a:	9b01      	ldr	r3, [sp, #4]
    947c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9480:	1c5a      	adds	r2, r3, #1
    9482:	4904      	ldr	r1, [pc, #16]	; (9494 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    9484:	9b01      	ldr	r3, [sp, #4]
    9486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    948a:	bf00      	nop
    948c:	b003      	add	sp, #12
    948e:	f85d fb04 	ldr.w	pc, [sp], #4
    9492:	bf00      	nop
    9494:	1fff9158 	.word	0x1fff9158
    9498:	1fff9154 	.word	0x1fff9154

0000949c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:
    949c:	b500      	push	{lr}
    949e:	b083      	sub	sp, #12
    94a0:	f7f7 fb08 	bl	ab4 <Sys_GetCoreID>
    94a4:	4603      	mov	r3, r0
    94a6:	9301      	str	r3, [sp, #4]
    94a8:	4a0d      	ldr	r2, [pc, #52]	; (94e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    94aa:	9b01      	ldr	r3, [sp, #4]
    94ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94b0:	1e5a      	subs	r2, r3, #1
    94b2:	490b      	ldr	r1, [pc, #44]	; (94e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    94b4:	9b01      	ldr	r3, [sp, #4]
    94b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    94ba:	4a0a      	ldr	r2, [pc, #40]	; (94e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    94bc:	9b01      	ldr	r3, [sp, #4]
    94be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94c2:	f003 0301 	and.w	r3, r3, #1
    94c6:	2b00      	cmp	r3, #0
    94c8:	d106      	bne.n	94d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    94ca:	4a05      	ldr	r2, [pc, #20]	; (94e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    94cc:	9b01      	ldr	r3, [sp, #4]
    94ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94d2:	2b00      	cmp	r3, #0
    94d4:	d100      	bne.n	94d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    94d6:	b662      	cpsie	i
    94d8:	bf00      	nop
    94da:	b003      	add	sp, #12
    94dc:	f85d fb04 	ldr.w	pc, [sp], #4
    94e0:	1fff9158 	.word	0x1fff9158
    94e4:	1fff9154 	.word	0x1fff9154

000094e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:
    94e8:	b500      	push	{lr}
    94ea:	b083      	sub	sp, #12
    94ec:	f7f7 fae2 	bl	ab4 <Sys_GetCoreID>
    94f0:	4603      	mov	r3, r0
    94f2:	9301      	str	r3, [sp, #4]
    94f4:	4a10      	ldr	r2, [pc, #64]	; (9538 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    94f6:	9b01      	ldr	r3, [sp, #4]
    94f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94fc:	2b00      	cmp	r3, #0
    94fe:	d10d      	bne.n	951c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    9500:	f7f7 f9ff 	bl	902 <Port_schm_read_msr>
    9504:	9000      	str	r0, [sp, #0]
    9506:	9b00      	ldr	r3, [sp, #0]
    9508:	f003 0301 	and.w	r3, r3, #1
    950c:	2b00      	cmp	r3, #0
    950e:	d100      	bne.n	9512 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
    9510:	b672      	cpsid	i
    9512:	490a      	ldr	r1, [pc, #40]	; (953c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    9514:	9b01      	ldr	r3, [sp, #4]
    9516:	9a00      	ldr	r2, [sp, #0]
    9518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    951c:	4a06      	ldr	r2, [pc, #24]	; (9538 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    951e:	9b01      	ldr	r3, [sp, #4]
    9520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9524:	1c5a      	adds	r2, r3, #1
    9526:	4904      	ldr	r1, [pc, #16]	; (9538 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    9528:	9b01      	ldr	r3, [sp, #4]
    952a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    952e:	bf00      	nop
    9530:	b003      	add	sp, #12
    9532:	f85d fb04 	ldr.w	pc, [sp], #4
    9536:	bf00      	nop
    9538:	1fff9160 	.word	0x1fff9160
    953c:	1fff915c 	.word	0x1fff915c

00009540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:
    9540:	b500      	push	{lr}
    9542:	b083      	sub	sp, #12
    9544:	f7f7 fab6 	bl	ab4 <Sys_GetCoreID>
    9548:	4603      	mov	r3, r0
    954a:	9301      	str	r3, [sp, #4]
    954c:	4a0d      	ldr	r2, [pc, #52]	; (9584 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    954e:	9b01      	ldr	r3, [sp, #4]
    9550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9554:	1e5a      	subs	r2, r3, #1
    9556:	490b      	ldr	r1, [pc, #44]	; (9584 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    9558:	9b01      	ldr	r3, [sp, #4]
    955a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    955e:	4a0a      	ldr	r2, [pc, #40]	; (9588 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    9560:	9b01      	ldr	r3, [sp, #4]
    9562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9566:	f003 0301 	and.w	r3, r3, #1
    956a:	2b00      	cmp	r3, #0
    956c:	d106      	bne.n	957c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    956e:	4a05      	ldr	r2, [pc, #20]	; (9584 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    9570:	9b01      	ldr	r3, [sp, #4]
    9572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9576:	2b00      	cmp	r3, #0
    9578:	d100      	bne.n	957c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    957a:	b662      	cpsie	i
    957c:	bf00      	nop
    957e:	b003      	add	sp, #12
    9580:	f85d fb04 	ldr.w	pc, [sp], #4
    9584:	1fff9160 	.word	0x1fff9160
    9588:	1fff915c 	.word	0x1fff915c

0000958c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:
    958c:	b500      	push	{lr}
    958e:	b083      	sub	sp, #12
    9590:	f7f7 fa90 	bl	ab4 <Sys_GetCoreID>
    9594:	4603      	mov	r3, r0
    9596:	9301      	str	r3, [sp, #4]
    9598:	4a10      	ldr	r2, [pc, #64]	; (95dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    959a:	9b01      	ldr	r3, [sp, #4]
    959c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95a0:	2b00      	cmp	r3, #0
    95a2:	d10d      	bne.n	95c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    95a4:	f7f7 f9ad 	bl	902 <Port_schm_read_msr>
    95a8:	9000      	str	r0, [sp, #0]
    95aa:	9b00      	ldr	r3, [sp, #0]
    95ac:	f003 0301 	and.w	r3, r3, #1
    95b0:	2b00      	cmp	r3, #0
    95b2:	d100      	bne.n	95b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
    95b4:	b672      	cpsid	i
    95b6:	490a      	ldr	r1, [pc, #40]	; (95e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    95b8:	9b01      	ldr	r3, [sp, #4]
    95ba:	9a00      	ldr	r2, [sp, #0]
    95bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    95c0:	4a06      	ldr	r2, [pc, #24]	; (95dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    95c2:	9b01      	ldr	r3, [sp, #4]
    95c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95c8:	1c5a      	adds	r2, r3, #1
    95ca:	4904      	ldr	r1, [pc, #16]	; (95dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    95cc:	9b01      	ldr	r3, [sp, #4]
    95ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    95d2:	bf00      	nop
    95d4:	b003      	add	sp, #12
    95d6:	f85d fb04 	ldr.w	pc, [sp], #4
    95da:	bf00      	nop
    95dc:	1fff9168 	.word	0x1fff9168
    95e0:	1fff9164 	.word	0x1fff9164

000095e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:
    95e4:	b500      	push	{lr}
    95e6:	b083      	sub	sp, #12
    95e8:	f7f7 fa64 	bl	ab4 <Sys_GetCoreID>
    95ec:	4603      	mov	r3, r0
    95ee:	9301      	str	r3, [sp, #4]
    95f0:	4a0d      	ldr	r2, [pc, #52]	; (9628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    95f2:	9b01      	ldr	r3, [sp, #4]
    95f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95f8:	1e5a      	subs	r2, r3, #1
    95fa:	490b      	ldr	r1, [pc, #44]	; (9628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    95fc:	9b01      	ldr	r3, [sp, #4]
    95fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9602:	4a0a      	ldr	r2, [pc, #40]	; (962c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    9604:	9b01      	ldr	r3, [sp, #4]
    9606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    960a:	f003 0301 	and.w	r3, r3, #1
    960e:	2b00      	cmp	r3, #0
    9610:	d106      	bne.n	9620 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    9612:	4a05      	ldr	r2, [pc, #20]	; (9628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    9614:	9b01      	ldr	r3, [sp, #4]
    9616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    961a:	2b00      	cmp	r3, #0
    961c:	d100      	bne.n	9620 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    961e:	b662      	cpsie	i
    9620:	bf00      	nop
    9622:	b003      	add	sp, #12
    9624:	f85d fb04 	ldr.w	pc, [sp], #4
    9628:	1fff9168 	.word	0x1fff9168
    962c:	1fff9164 	.word	0x1fff9164

00009630 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:
    9630:	b500      	push	{lr}
    9632:	b083      	sub	sp, #12
    9634:	f7f7 fa3e 	bl	ab4 <Sys_GetCoreID>
    9638:	4603      	mov	r3, r0
    963a:	9301      	str	r3, [sp, #4]
    963c:	4a10      	ldr	r2, [pc, #64]	; (9680 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    963e:	9b01      	ldr	r3, [sp, #4]
    9640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9644:	2b00      	cmp	r3, #0
    9646:	d10d      	bne.n	9664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    9648:	f7f7 f95b 	bl	902 <Port_schm_read_msr>
    964c:	9000      	str	r0, [sp, #0]
    964e:	9b00      	ldr	r3, [sp, #0]
    9650:	f003 0301 	and.w	r3, r3, #1
    9654:	2b00      	cmp	r3, #0
    9656:	d100      	bne.n	965a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
    9658:	b672      	cpsid	i
    965a:	490a      	ldr	r1, [pc, #40]	; (9684 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    965c:	9b01      	ldr	r3, [sp, #4]
    965e:	9a00      	ldr	r2, [sp, #0]
    9660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9664:	4a06      	ldr	r2, [pc, #24]	; (9680 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    9666:	9b01      	ldr	r3, [sp, #4]
    9668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    966c:	1c5a      	adds	r2, r3, #1
    966e:	4904      	ldr	r1, [pc, #16]	; (9680 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    9670:	9b01      	ldr	r3, [sp, #4]
    9672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9676:	bf00      	nop
    9678:	b003      	add	sp, #12
    967a:	f85d fb04 	ldr.w	pc, [sp], #4
    967e:	bf00      	nop
    9680:	1fff9170 	.word	0x1fff9170
    9684:	1fff916c 	.word	0x1fff916c

00009688 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:
    9688:	b500      	push	{lr}
    968a:	b083      	sub	sp, #12
    968c:	f7f7 fa12 	bl	ab4 <Sys_GetCoreID>
    9690:	4603      	mov	r3, r0
    9692:	9301      	str	r3, [sp, #4]
    9694:	4a0d      	ldr	r2, [pc, #52]	; (96cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    9696:	9b01      	ldr	r3, [sp, #4]
    9698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    969c:	1e5a      	subs	r2, r3, #1
    969e:	490b      	ldr	r1, [pc, #44]	; (96cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    96a0:	9b01      	ldr	r3, [sp, #4]
    96a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    96a6:	4a0a      	ldr	r2, [pc, #40]	; (96d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    96a8:	9b01      	ldr	r3, [sp, #4]
    96aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ae:	f003 0301 	and.w	r3, r3, #1
    96b2:	2b00      	cmp	r3, #0
    96b4:	d106      	bne.n	96c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    96b6:	4a05      	ldr	r2, [pc, #20]	; (96cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    96b8:	9b01      	ldr	r3, [sp, #4]
    96ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96be:	2b00      	cmp	r3, #0
    96c0:	d100      	bne.n	96c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    96c2:	b662      	cpsie	i
    96c4:	bf00      	nop
    96c6:	b003      	add	sp, #12
    96c8:	f85d fb04 	ldr.w	pc, [sp], #4
    96cc:	1fff9170 	.word	0x1fff9170
    96d0:	1fff916c 	.word	0x1fff916c

000096d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:
    96d4:	b500      	push	{lr}
    96d6:	b083      	sub	sp, #12
    96d8:	f7f7 f9ec 	bl	ab4 <Sys_GetCoreID>
    96dc:	4603      	mov	r3, r0
    96de:	9301      	str	r3, [sp, #4]
    96e0:	4a10      	ldr	r2, [pc, #64]	; (9724 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    96e2:	9b01      	ldr	r3, [sp, #4]
    96e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96e8:	2b00      	cmp	r3, #0
    96ea:	d10d      	bne.n	9708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    96ec:	f7f7 f909 	bl	902 <Port_schm_read_msr>
    96f0:	9000      	str	r0, [sp, #0]
    96f2:	9b00      	ldr	r3, [sp, #0]
    96f4:	f003 0301 	and.w	r3, r3, #1
    96f8:	2b00      	cmp	r3, #0
    96fa:	d100      	bne.n	96fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
    96fc:	b672      	cpsid	i
    96fe:	490a      	ldr	r1, [pc, #40]	; (9728 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    9700:	9b01      	ldr	r3, [sp, #4]
    9702:	9a00      	ldr	r2, [sp, #0]
    9704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9708:	4a06      	ldr	r2, [pc, #24]	; (9724 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    970a:	9b01      	ldr	r3, [sp, #4]
    970c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9710:	1c5a      	adds	r2, r3, #1
    9712:	4904      	ldr	r1, [pc, #16]	; (9724 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    9714:	9b01      	ldr	r3, [sp, #4]
    9716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    971a:	bf00      	nop
    971c:	b003      	add	sp, #12
    971e:	f85d fb04 	ldr.w	pc, [sp], #4
    9722:	bf00      	nop
    9724:	1fff9178 	.word	0x1fff9178
    9728:	1fff9174 	.word	0x1fff9174

0000972c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:
    972c:	b500      	push	{lr}
    972e:	b083      	sub	sp, #12
    9730:	f7f7 f9c0 	bl	ab4 <Sys_GetCoreID>
    9734:	4603      	mov	r3, r0
    9736:	9301      	str	r3, [sp, #4]
    9738:	4a0d      	ldr	r2, [pc, #52]	; (9770 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    973a:	9b01      	ldr	r3, [sp, #4]
    973c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9740:	1e5a      	subs	r2, r3, #1
    9742:	490b      	ldr	r1, [pc, #44]	; (9770 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9744:	9b01      	ldr	r3, [sp, #4]
    9746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    974a:	4a0a      	ldr	r2, [pc, #40]	; (9774 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    974c:	9b01      	ldr	r3, [sp, #4]
    974e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9752:	f003 0301 	and.w	r3, r3, #1
    9756:	2b00      	cmp	r3, #0
    9758:	d106      	bne.n	9768 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    975a:	4a05      	ldr	r2, [pc, #20]	; (9770 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    975c:	9b01      	ldr	r3, [sp, #4]
    975e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9762:	2b00      	cmp	r3, #0
    9764:	d100      	bne.n	9768 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    9766:	b662      	cpsie	i
    9768:	bf00      	nop
    976a:	b003      	add	sp, #12
    976c:	f85d fb04 	ldr.w	pc, [sp], #4
    9770:	1fff9178 	.word	0x1fff9178
    9774:	1fff9174 	.word	0x1fff9174

00009778 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:
    9778:	b500      	push	{lr}
    977a:	b083      	sub	sp, #12
    977c:	f7f7 f99a 	bl	ab4 <Sys_GetCoreID>
    9780:	4603      	mov	r3, r0
    9782:	9301      	str	r3, [sp, #4]
    9784:	4a10      	ldr	r2, [pc, #64]	; (97c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    9786:	9b01      	ldr	r3, [sp, #4]
    9788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    978c:	2b00      	cmp	r3, #0
    978e:	d10d      	bne.n	97ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    9790:	f7f7 f8b7 	bl	902 <Port_schm_read_msr>
    9794:	9000      	str	r0, [sp, #0]
    9796:	9b00      	ldr	r3, [sp, #0]
    9798:	f003 0301 	and.w	r3, r3, #1
    979c:	2b00      	cmp	r3, #0
    979e:	d100      	bne.n	97a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
    97a0:	b672      	cpsid	i
    97a2:	490a      	ldr	r1, [pc, #40]	; (97cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    97a4:	9b01      	ldr	r3, [sp, #4]
    97a6:	9a00      	ldr	r2, [sp, #0]
    97a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    97ac:	4a06      	ldr	r2, [pc, #24]	; (97c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    97ae:	9b01      	ldr	r3, [sp, #4]
    97b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97b4:	1c5a      	adds	r2, r3, #1
    97b6:	4904      	ldr	r1, [pc, #16]	; (97c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    97b8:	9b01      	ldr	r3, [sp, #4]
    97ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    97be:	bf00      	nop
    97c0:	b003      	add	sp, #12
    97c2:	f85d fb04 	ldr.w	pc, [sp], #4
    97c6:	bf00      	nop
    97c8:	1fff9180 	.word	0x1fff9180
    97cc:	1fff917c 	.word	0x1fff917c

000097d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:
    97d0:	b500      	push	{lr}
    97d2:	b083      	sub	sp, #12
    97d4:	f7f7 f96e 	bl	ab4 <Sys_GetCoreID>
    97d8:	4603      	mov	r3, r0
    97da:	9301      	str	r3, [sp, #4]
    97dc:	4a0d      	ldr	r2, [pc, #52]	; (9814 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    97de:	9b01      	ldr	r3, [sp, #4]
    97e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e4:	1e5a      	subs	r2, r3, #1
    97e6:	490b      	ldr	r1, [pc, #44]	; (9814 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    97e8:	9b01      	ldr	r3, [sp, #4]
    97ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    97ee:	4a0a      	ldr	r2, [pc, #40]	; (9818 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    97f0:	9b01      	ldr	r3, [sp, #4]
    97f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97f6:	f003 0301 	and.w	r3, r3, #1
    97fa:	2b00      	cmp	r3, #0
    97fc:	d106      	bne.n	980c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    97fe:	4a05      	ldr	r2, [pc, #20]	; (9814 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    9800:	9b01      	ldr	r3, [sp, #4]
    9802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9806:	2b00      	cmp	r3, #0
    9808:	d100      	bne.n	980c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    980a:	b662      	cpsie	i
    980c:	bf00      	nop
    980e:	b003      	add	sp, #12
    9810:	f85d fb04 	ldr.w	pc, [sp], #4
    9814:	1fff9180 	.word	0x1fff9180
    9818:	1fff917c 	.word	0x1fff917c

0000981c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:
    981c:	b500      	push	{lr}
    981e:	b083      	sub	sp, #12
    9820:	f7f7 f948 	bl	ab4 <Sys_GetCoreID>
    9824:	4603      	mov	r3, r0
    9826:	9301      	str	r3, [sp, #4]
    9828:	4a10      	ldr	r2, [pc, #64]	; (986c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    982a:	9b01      	ldr	r3, [sp, #4]
    982c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9830:	2b00      	cmp	r3, #0
    9832:	d10d      	bne.n	9850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    9834:	f7f7 f865 	bl	902 <Port_schm_read_msr>
    9838:	9000      	str	r0, [sp, #0]
    983a:	9b00      	ldr	r3, [sp, #0]
    983c:	f003 0301 	and.w	r3, r3, #1
    9840:	2b00      	cmp	r3, #0
    9842:	d100      	bne.n	9846 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
    9844:	b672      	cpsid	i
    9846:	490a      	ldr	r1, [pc, #40]	; (9870 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    9848:	9b01      	ldr	r3, [sp, #4]
    984a:	9a00      	ldr	r2, [sp, #0]
    984c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9850:	4a06      	ldr	r2, [pc, #24]	; (986c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    9852:	9b01      	ldr	r3, [sp, #4]
    9854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9858:	1c5a      	adds	r2, r3, #1
    985a:	4904      	ldr	r1, [pc, #16]	; (986c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    985c:	9b01      	ldr	r3, [sp, #4]
    985e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9862:	bf00      	nop
    9864:	b003      	add	sp, #12
    9866:	f85d fb04 	ldr.w	pc, [sp], #4
    986a:	bf00      	nop
    986c:	1fff9188 	.word	0x1fff9188
    9870:	1fff9184 	.word	0x1fff9184

00009874 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:
    9874:	b500      	push	{lr}
    9876:	b083      	sub	sp, #12
    9878:	f7f7 f91c 	bl	ab4 <Sys_GetCoreID>
    987c:	4603      	mov	r3, r0
    987e:	9301      	str	r3, [sp, #4]
    9880:	4a0d      	ldr	r2, [pc, #52]	; (98b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    9882:	9b01      	ldr	r3, [sp, #4]
    9884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9888:	1e5a      	subs	r2, r3, #1
    988a:	490b      	ldr	r1, [pc, #44]	; (98b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    988c:	9b01      	ldr	r3, [sp, #4]
    988e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9892:	4a0a      	ldr	r2, [pc, #40]	; (98bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    9894:	9b01      	ldr	r3, [sp, #4]
    9896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    989a:	f003 0301 	and.w	r3, r3, #1
    989e:	2b00      	cmp	r3, #0
    98a0:	d106      	bne.n	98b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    98a2:	4a05      	ldr	r2, [pc, #20]	; (98b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    98a4:	9b01      	ldr	r3, [sp, #4]
    98a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98aa:	2b00      	cmp	r3, #0
    98ac:	d100      	bne.n	98b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    98ae:	b662      	cpsie	i
    98b0:	bf00      	nop
    98b2:	b003      	add	sp, #12
    98b4:	f85d fb04 	ldr.w	pc, [sp], #4
    98b8:	1fff9188 	.word	0x1fff9188
    98bc:	1fff9184 	.word	0x1fff9184

000098c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:
    98c0:	b500      	push	{lr}
    98c2:	b083      	sub	sp, #12
    98c4:	f7f7 f8f6 	bl	ab4 <Sys_GetCoreID>
    98c8:	4603      	mov	r3, r0
    98ca:	9301      	str	r3, [sp, #4]
    98cc:	4a10      	ldr	r2, [pc, #64]	; (9910 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    98ce:	9b01      	ldr	r3, [sp, #4]
    98d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98d4:	2b00      	cmp	r3, #0
    98d6:	d10d      	bne.n	98f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    98d8:	f7f7 f813 	bl	902 <Port_schm_read_msr>
    98dc:	9000      	str	r0, [sp, #0]
    98de:	9b00      	ldr	r3, [sp, #0]
    98e0:	f003 0301 	and.w	r3, r3, #1
    98e4:	2b00      	cmp	r3, #0
    98e6:	d100      	bne.n	98ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
    98e8:	b672      	cpsid	i
    98ea:	490a      	ldr	r1, [pc, #40]	; (9914 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    98ec:	9b01      	ldr	r3, [sp, #4]
    98ee:	9a00      	ldr	r2, [sp, #0]
    98f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    98f4:	4a06      	ldr	r2, [pc, #24]	; (9910 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    98f6:	9b01      	ldr	r3, [sp, #4]
    98f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98fc:	1c5a      	adds	r2, r3, #1
    98fe:	4904      	ldr	r1, [pc, #16]	; (9910 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    9900:	9b01      	ldr	r3, [sp, #4]
    9902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9906:	bf00      	nop
    9908:	b003      	add	sp, #12
    990a:	f85d fb04 	ldr.w	pc, [sp], #4
    990e:	bf00      	nop
    9910:	1fff9190 	.word	0x1fff9190
    9914:	1fff918c 	.word	0x1fff918c

00009918 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:
    9918:	b500      	push	{lr}
    991a:	b083      	sub	sp, #12
    991c:	f7f7 f8ca 	bl	ab4 <Sys_GetCoreID>
    9920:	4603      	mov	r3, r0
    9922:	9301      	str	r3, [sp, #4]
    9924:	4a0d      	ldr	r2, [pc, #52]	; (995c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    9926:	9b01      	ldr	r3, [sp, #4]
    9928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    992c:	1e5a      	subs	r2, r3, #1
    992e:	490b      	ldr	r1, [pc, #44]	; (995c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    9930:	9b01      	ldr	r3, [sp, #4]
    9932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9936:	4a0a      	ldr	r2, [pc, #40]	; (9960 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    9938:	9b01      	ldr	r3, [sp, #4]
    993a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    993e:	f003 0301 	and.w	r3, r3, #1
    9942:	2b00      	cmp	r3, #0
    9944:	d106      	bne.n	9954 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    9946:	4a05      	ldr	r2, [pc, #20]	; (995c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    9948:	9b01      	ldr	r3, [sp, #4]
    994a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    994e:	2b00      	cmp	r3, #0
    9950:	d100      	bne.n	9954 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    9952:	b662      	cpsie	i
    9954:	bf00      	nop
    9956:	b003      	add	sp, #12
    9958:	f85d fb04 	ldr.w	pc, [sp], #4
    995c:	1fff9190 	.word	0x1fff9190
    9960:	1fff918c 	.word	0x1fff918c

00009964 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:
    9964:	b500      	push	{lr}
    9966:	b083      	sub	sp, #12
    9968:	f7f7 f8a4 	bl	ab4 <Sys_GetCoreID>
    996c:	4603      	mov	r3, r0
    996e:	9301      	str	r3, [sp, #4]
    9970:	4a10      	ldr	r2, [pc, #64]	; (99b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    9972:	9b01      	ldr	r3, [sp, #4]
    9974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9978:	2b00      	cmp	r3, #0
    997a:	d10d      	bne.n	9998 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    997c:	f7f6 ffc1 	bl	902 <Port_schm_read_msr>
    9980:	9000      	str	r0, [sp, #0]
    9982:	9b00      	ldr	r3, [sp, #0]
    9984:	f003 0301 	and.w	r3, r3, #1
    9988:	2b00      	cmp	r3, #0
    998a:	d100      	bne.n	998e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
    998c:	b672      	cpsid	i
    998e:	490a      	ldr	r1, [pc, #40]	; (99b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    9990:	9b01      	ldr	r3, [sp, #4]
    9992:	9a00      	ldr	r2, [sp, #0]
    9994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9998:	4a06      	ldr	r2, [pc, #24]	; (99b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    999a:	9b01      	ldr	r3, [sp, #4]
    999c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a0:	1c5a      	adds	r2, r3, #1
    99a2:	4904      	ldr	r1, [pc, #16]	; (99b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    99a4:	9b01      	ldr	r3, [sp, #4]
    99a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    99aa:	bf00      	nop
    99ac:	b003      	add	sp, #12
    99ae:	f85d fb04 	ldr.w	pc, [sp], #4
    99b2:	bf00      	nop
    99b4:	1fff9198 	.word	0x1fff9198
    99b8:	1fff9194 	.word	0x1fff9194

000099bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:
    99bc:	b500      	push	{lr}
    99be:	b083      	sub	sp, #12
    99c0:	f7f7 f878 	bl	ab4 <Sys_GetCoreID>
    99c4:	4603      	mov	r3, r0
    99c6:	9301      	str	r3, [sp, #4]
    99c8:	4a0d      	ldr	r2, [pc, #52]	; (9a00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    99ca:	9b01      	ldr	r3, [sp, #4]
    99cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99d0:	1e5a      	subs	r2, r3, #1
    99d2:	490b      	ldr	r1, [pc, #44]	; (9a00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    99d4:	9b01      	ldr	r3, [sp, #4]
    99d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    99da:	4a0a      	ldr	r2, [pc, #40]	; (9a04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    99dc:	9b01      	ldr	r3, [sp, #4]
    99de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99e2:	f003 0301 	and.w	r3, r3, #1
    99e6:	2b00      	cmp	r3, #0
    99e8:	d106      	bne.n	99f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    99ea:	4a05      	ldr	r2, [pc, #20]	; (9a00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    99ec:	9b01      	ldr	r3, [sp, #4]
    99ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99f2:	2b00      	cmp	r3, #0
    99f4:	d100      	bne.n	99f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    99f6:	b662      	cpsie	i
    99f8:	bf00      	nop
    99fa:	b003      	add	sp, #12
    99fc:	f85d fb04 	ldr.w	pc, [sp], #4
    9a00:	1fff9198 	.word	0x1fff9198
    9a04:	1fff9194 	.word	0x1fff9194

00009a08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:
    9a08:	b500      	push	{lr}
    9a0a:	b083      	sub	sp, #12
    9a0c:	f7f7 f852 	bl	ab4 <Sys_GetCoreID>
    9a10:	4603      	mov	r3, r0
    9a12:	9301      	str	r3, [sp, #4]
    9a14:	4a10      	ldr	r2, [pc, #64]	; (9a58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9a16:	9b01      	ldr	r3, [sp, #4]
    9a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a1c:	2b00      	cmp	r3, #0
    9a1e:	d10d      	bne.n	9a3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    9a20:	f7f6 ff6f 	bl	902 <Port_schm_read_msr>
    9a24:	9000      	str	r0, [sp, #0]
    9a26:	9b00      	ldr	r3, [sp, #0]
    9a28:	f003 0301 	and.w	r3, r3, #1
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d100      	bne.n	9a32 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
    9a30:	b672      	cpsid	i
    9a32:	490a      	ldr	r1, [pc, #40]	; (9a5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    9a34:	9b01      	ldr	r3, [sp, #4]
    9a36:	9a00      	ldr	r2, [sp, #0]
    9a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9a3c:	4a06      	ldr	r2, [pc, #24]	; (9a58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9a3e:	9b01      	ldr	r3, [sp, #4]
    9a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a44:	1c5a      	adds	r2, r3, #1
    9a46:	4904      	ldr	r1, [pc, #16]	; (9a58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9a48:	9b01      	ldr	r3, [sp, #4]
    9a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9a4e:	bf00      	nop
    9a50:	b003      	add	sp, #12
    9a52:	f85d fb04 	ldr.w	pc, [sp], #4
    9a56:	bf00      	nop
    9a58:	1fff91a0 	.word	0x1fff91a0
    9a5c:	1fff919c 	.word	0x1fff919c

00009a60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:
    9a60:	b500      	push	{lr}
    9a62:	b083      	sub	sp, #12
    9a64:	f7f7 f826 	bl	ab4 <Sys_GetCoreID>
    9a68:	4603      	mov	r3, r0
    9a6a:	9301      	str	r3, [sp, #4]
    9a6c:	4a0d      	ldr	r2, [pc, #52]	; (9aa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9a6e:	9b01      	ldr	r3, [sp, #4]
    9a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a74:	1e5a      	subs	r2, r3, #1
    9a76:	490b      	ldr	r1, [pc, #44]	; (9aa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9a78:	9b01      	ldr	r3, [sp, #4]
    9a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9a7e:	4a0a      	ldr	r2, [pc, #40]	; (9aa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    9a80:	9b01      	ldr	r3, [sp, #4]
    9a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a86:	f003 0301 	and.w	r3, r3, #1
    9a8a:	2b00      	cmp	r3, #0
    9a8c:	d106      	bne.n	9a9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    9a8e:	4a05      	ldr	r2, [pc, #20]	; (9aa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9a90:	9b01      	ldr	r3, [sp, #4]
    9a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a96:	2b00      	cmp	r3, #0
    9a98:	d100      	bne.n	9a9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    9a9a:	b662      	cpsie	i
    9a9c:	bf00      	nop
    9a9e:	b003      	add	sp, #12
    9aa0:	f85d fb04 	ldr.w	pc, [sp], #4
    9aa4:	1fff91a0 	.word	0x1fff91a0
    9aa8:	1fff919c 	.word	0x1fff919c

00009aac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:
    9aac:	b500      	push	{lr}
    9aae:	b083      	sub	sp, #12
    9ab0:	f7f7 f800 	bl	ab4 <Sys_GetCoreID>
    9ab4:	4603      	mov	r3, r0
    9ab6:	9301      	str	r3, [sp, #4]
    9ab8:	4a10      	ldr	r2, [pc, #64]	; (9afc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9aba:	9b01      	ldr	r3, [sp, #4]
    9abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ac0:	2b00      	cmp	r3, #0
    9ac2:	d10d      	bne.n	9ae0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    9ac4:	f7f6 ff1d 	bl	902 <Port_schm_read_msr>
    9ac8:	9000      	str	r0, [sp, #0]
    9aca:	9b00      	ldr	r3, [sp, #0]
    9acc:	f003 0301 	and.w	r3, r3, #1
    9ad0:	2b00      	cmp	r3, #0
    9ad2:	d100      	bne.n	9ad6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
    9ad4:	b672      	cpsid	i
    9ad6:	490a      	ldr	r1, [pc, #40]	; (9b00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    9ad8:	9b01      	ldr	r3, [sp, #4]
    9ada:	9a00      	ldr	r2, [sp, #0]
    9adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9ae0:	4a06      	ldr	r2, [pc, #24]	; (9afc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9ae2:	9b01      	ldr	r3, [sp, #4]
    9ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ae8:	1c5a      	adds	r2, r3, #1
    9aea:	4904      	ldr	r1, [pc, #16]	; (9afc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9aec:	9b01      	ldr	r3, [sp, #4]
    9aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9af2:	bf00      	nop
    9af4:	b003      	add	sp, #12
    9af6:	f85d fb04 	ldr.w	pc, [sp], #4
    9afa:	bf00      	nop
    9afc:	1fff91a8 	.word	0x1fff91a8
    9b00:	1fff91a4 	.word	0x1fff91a4

00009b04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:
    9b04:	b500      	push	{lr}
    9b06:	b083      	sub	sp, #12
    9b08:	f7f6 ffd4 	bl	ab4 <Sys_GetCoreID>
    9b0c:	4603      	mov	r3, r0
    9b0e:	9301      	str	r3, [sp, #4]
    9b10:	4a0d      	ldr	r2, [pc, #52]	; (9b48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9b12:	9b01      	ldr	r3, [sp, #4]
    9b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b18:	1e5a      	subs	r2, r3, #1
    9b1a:	490b      	ldr	r1, [pc, #44]	; (9b48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9b1c:	9b01      	ldr	r3, [sp, #4]
    9b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9b22:	4a0a      	ldr	r2, [pc, #40]	; (9b4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    9b24:	9b01      	ldr	r3, [sp, #4]
    9b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b2a:	f003 0301 	and.w	r3, r3, #1
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d106      	bne.n	9b40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    9b32:	4a05      	ldr	r2, [pc, #20]	; (9b48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9b34:	9b01      	ldr	r3, [sp, #4]
    9b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b3a:	2b00      	cmp	r3, #0
    9b3c:	d100      	bne.n	9b40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    9b3e:	b662      	cpsie	i
    9b40:	bf00      	nop
    9b42:	b003      	add	sp, #12
    9b44:	f85d fb04 	ldr.w	pc, [sp], #4
    9b48:	1fff91a8 	.word	0x1fff91a8
    9b4c:	1fff91a4 	.word	0x1fff91a4

00009b50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:
    9b50:	b500      	push	{lr}
    9b52:	b083      	sub	sp, #12
    9b54:	f7f6 ffae 	bl	ab4 <Sys_GetCoreID>
    9b58:	4603      	mov	r3, r0
    9b5a:	9301      	str	r3, [sp, #4]
    9b5c:	4a10      	ldr	r2, [pc, #64]	; (9ba0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9b5e:	9b01      	ldr	r3, [sp, #4]
    9b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b64:	2b00      	cmp	r3, #0
    9b66:	d10d      	bne.n	9b84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    9b68:	f7f6 fecb 	bl	902 <Port_schm_read_msr>
    9b6c:	9000      	str	r0, [sp, #0]
    9b6e:	9b00      	ldr	r3, [sp, #0]
    9b70:	f003 0301 	and.w	r3, r3, #1
    9b74:	2b00      	cmp	r3, #0
    9b76:	d100      	bne.n	9b7a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
    9b78:	b672      	cpsid	i
    9b7a:	490a      	ldr	r1, [pc, #40]	; (9ba4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    9b7c:	9b01      	ldr	r3, [sp, #4]
    9b7e:	9a00      	ldr	r2, [sp, #0]
    9b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9b84:	4a06      	ldr	r2, [pc, #24]	; (9ba0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9b86:	9b01      	ldr	r3, [sp, #4]
    9b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b8c:	1c5a      	adds	r2, r3, #1
    9b8e:	4904      	ldr	r1, [pc, #16]	; (9ba0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9b90:	9b01      	ldr	r3, [sp, #4]
    9b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9b96:	bf00      	nop
    9b98:	b003      	add	sp, #12
    9b9a:	f85d fb04 	ldr.w	pc, [sp], #4
    9b9e:	bf00      	nop
    9ba0:	1fff91b0 	.word	0x1fff91b0
    9ba4:	1fff91ac 	.word	0x1fff91ac

00009ba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:
    9ba8:	b500      	push	{lr}
    9baa:	b083      	sub	sp, #12
    9bac:	f7f6 ff82 	bl	ab4 <Sys_GetCoreID>
    9bb0:	4603      	mov	r3, r0
    9bb2:	9301      	str	r3, [sp, #4]
    9bb4:	4a0d      	ldr	r2, [pc, #52]	; (9bec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    9bb6:	9b01      	ldr	r3, [sp, #4]
    9bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bbc:	1e5a      	subs	r2, r3, #1
    9bbe:	490b      	ldr	r1, [pc, #44]	; (9bec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    9bc0:	9b01      	ldr	r3, [sp, #4]
    9bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9bc6:	4a0a      	ldr	r2, [pc, #40]	; (9bf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    9bc8:	9b01      	ldr	r3, [sp, #4]
    9bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bce:	f003 0301 	and.w	r3, r3, #1
    9bd2:	2b00      	cmp	r3, #0
    9bd4:	d106      	bne.n	9be4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    9bd6:	4a05      	ldr	r2, [pc, #20]	; (9bec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    9bd8:	9b01      	ldr	r3, [sp, #4]
    9bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bde:	2b00      	cmp	r3, #0
    9be0:	d100      	bne.n	9be4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    9be2:	b662      	cpsie	i
    9be4:	bf00      	nop
    9be6:	b003      	add	sp, #12
    9be8:	f85d fb04 	ldr.w	pc, [sp], #4
    9bec:	1fff91b0 	.word	0x1fff91b0
    9bf0:	1fff91ac 	.word	0x1fff91ac

00009bf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:
    9bf4:	b500      	push	{lr}
    9bf6:	b083      	sub	sp, #12
    9bf8:	f7f6 ff5c 	bl	ab4 <Sys_GetCoreID>
    9bfc:	4603      	mov	r3, r0
    9bfe:	9301      	str	r3, [sp, #4]
    9c00:	4a10      	ldr	r2, [pc, #64]	; (9c44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9c02:	9b01      	ldr	r3, [sp, #4]
    9c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c08:	2b00      	cmp	r3, #0
    9c0a:	d10d      	bne.n	9c28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    9c0c:	f7f6 fe79 	bl	902 <Port_schm_read_msr>
    9c10:	9000      	str	r0, [sp, #0]
    9c12:	9b00      	ldr	r3, [sp, #0]
    9c14:	f003 0301 	and.w	r3, r3, #1
    9c18:	2b00      	cmp	r3, #0
    9c1a:	d100      	bne.n	9c1e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
    9c1c:	b672      	cpsid	i
    9c1e:	490a      	ldr	r1, [pc, #40]	; (9c48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    9c20:	9b01      	ldr	r3, [sp, #4]
    9c22:	9a00      	ldr	r2, [sp, #0]
    9c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9c28:	4a06      	ldr	r2, [pc, #24]	; (9c44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9c2a:	9b01      	ldr	r3, [sp, #4]
    9c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c30:	1c5a      	adds	r2, r3, #1
    9c32:	4904      	ldr	r1, [pc, #16]	; (9c44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9c34:	9b01      	ldr	r3, [sp, #4]
    9c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9c3a:	bf00      	nop
    9c3c:	b003      	add	sp, #12
    9c3e:	f85d fb04 	ldr.w	pc, [sp], #4
    9c42:	bf00      	nop
    9c44:	1fff91b8 	.word	0x1fff91b8
    9c48:	1fff91b4 	.word	0x1fff91b4

00009c4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:
    9c4c:	b500      	push	{lr}
    9c4e:	b083      	sub	sp, #12
    9c50:	f7f6 ff30 	bl	ab4 <Sys_GetCoreID>
    9c54:	4603      	mov	r3, r0
    9c56:	9301      	str	r3, [sp, #4]
    9c58:	4a0d      	ldr	r2, [pc, #52]	; (9c90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9c5a:	9b01      	ldr	r3, [sp, #4]
    9c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c60:	1e5a      	subs	r2, r3, #1
    9c62:	490b      	ldr	r1, [pc, #44]	; (9c90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9c64:	9b01      	ldr	r3, [sp, #4]
    9c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9c6a:	4a0a      	ldr	r2, [pc, #40]	; (9c94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    9c6c:	9b01      	ldr	r3, [sp, #4]
    9c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c72:	f003 0301 	and.w	r3, r3, #1
    9c76:	2b00      	cmp	r3, #0
    9c78:	d106      	bne.n	9c88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    9c7a:	4a05      	ldr	r2, [pc, #20]	; (9c90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9c7c:	9b01      	ldr	r3, [sp, #4]
    9c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c82:	2b00      	cmp	r3, #0
    9c84:	d100      	bne.n	9c88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    9c86:	b662      	cpsie	i
    9c88:	bf00      	nop
    9c8a:	b003      	add	sp, #12
    9c8c:	f85d fb04 	ldr.w	pc, [sp], #4
    9c90:	1fff91b8 	.word	0x1fff91b8
    9c94:	1fff91b4 	.word	0x1fff91b4

00009c98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:
    9c98:	b500      	push	{lr}
    9c9a:	b083      	sub	sp, #12
    9c9c:	f7f6 ff0a 	bl	ab4 <Sys_GetCoreID>
    9ca0:	4603      	mov	r3, r0
    9ca2:	9301      	str	r3, [sp, #4]
    9ca4:	4a10      	ldr	r2, [pc, #64]	; (9ce8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    9ca6:	9b01      	ldr	r3, [sp, #4]
    9ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cac:	2b00      	cmp	r3, #0
    9cae:	d10d      	bne.n	9ccc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    9cb0:	f7f6 fe27 	bl	902 <Port_schm_read_msr>
    9cb4:	9000      	str	r0, [sp, #0]
    9cb6:	9b00      	ldr	r3, [sp, #0]
    9cb8:	f003 0301 	and.w	r3, r3, #1
    9cbc:	2b00      	cmp	r3, #0
    9cbe:	d100      	bne.n	9cc2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
    9cc0:	b672      	cpsid	i
    9cc2:	490a      	ldr	r1, [pc, #40]	; (9cec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    9cc4:	9b01      	ldr	r3, [sp, #4]
    9cc6:	9a00      	ldr	r2, [sp, #0]
    9cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9ccc:	4a06      	ldr	r2, [pc, #24]	; (9ce8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    9cce:	9b01      	ldr	r3, [sp, #4]
    9cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cd4:	1c5a      	adds	r2, r3, #1
    9cd6:	4904      	ldr	r1, [pc, #16]	; (9ce8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    9cd8:	9b01      	ldr	r3, [sp, #4]
    9cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9cde:	bf00      	nop
    9ce0:	b003      	add	sp, #12
    9ce2:	f85d fb04 	ldr.w	pc, [sp], #4
    9ce6:	bf00      	nop
    9ce8:	1fff91c0 	.word	0x1fff91c0
    9cec:	1fff91bc 	.word	0x1fff91bc

00009cf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:
    9cf0:	b500      	push	{lr}
    9cf2:	b083      	sub	sp, #12
    9cf4:	f7f6 fede 	bl	ab4 <Sys_GetCoreID>
    9cf8:	4603      	mov	r3, r0
    9cfa:	9301      	str	r3, [sp, #4]
    9cfc:	4a0d      	ldr	r2, [pc, #52]	; (9d34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9cfe:	9b01      	ldr	r3, [sp, #4]
    9d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d04:	1e5a      	subs	r2, r3, #1
    9d06:	490b      	ldr	r1, [pc, #44]	; (9d34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9d08:	9b01      	ldr	r3, [sp, #4]
    9d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9d0e:	4a0a      	ldr	r2, [pc, #40]	; (9d38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    9d10:	9b01      	ldr	r3, [sp, #4]
    9d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d16:	f003 0301 	and.w	r3, r3, #1
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d106      	bne.n	9d2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    9d1e:	4a05      	ldr	r2, [pc, #20]	; (9d34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9d20:	9b01      	ldr	r3, [sp, #4]
    9d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d26:	2b00      	cmp	r3, #0
    9d28:	d100      	bne.n	9d2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    9d2a:	b662      	cpsie	i
    9d2c:	bf00      	nop
    9d2e:	b003      	add	sp, #12
    9d30:	f85d fb04 	ldr.w	pc, [sp], #4
    9d34:	1fff91c0 	.word	0x1fff91c0
    9d38:	1fff91bc 	.word	0x1fff91bc

00009d3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:
    9d3c:	b500      	push	{lr}
    9d3e:	b083      	sub	sp, #12
    9d40:	f7f6 feb8 	bl	ab4 <Sys_GetCoreID>
    9d44:	4603      	mov	r3, r0
    9d46:	9301      	str	r3, [sp, #4]
    9d48:	4a10      	ldr	r2, [pc, #64]	; (9d8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9d4a:	9b01      	ldr	r3, [sp, #4]
    9d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d50:	2b00      	cmp	r3, #0
    9d52:	d10d      	bne.n	9d70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    9d54:	f7f6 fdd5 	bl	902 <Port_schm_read_msr>
    9d58:	9000      	str	r0, [sp, #0]
    9d5a:	9b00      	ldr	r3, [sp, #0]
    9d5c:	f003 0301 	and.w	r3, r3, #1
    9d60:	2b00      	cmp	r3, #0
    9d62:	d100      	bne.n	9d66 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
    9d64:	b672      	cpsid	i
    9d66:	490a      	ldr	r1, [pc, #40]	; (9d90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    9d68:	9b01      	ldr	r3, [sp, #4]
    9d6a:	9a00      	ldr	r2, [sp, #0]
    9d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9d70:	4a06      	ldr	r2, [pc, #24]	; (9d8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9d72:	9b01      	ldr	r3, [sp, #4]
    9d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d78:	1c5a      	adds	r2, r3, #1
    9d7a:	4904      	ldr	r1, [pc, #16]	; (9d8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9d7c:	9b01      	ldr	r3, [sp, #4]
    9d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9d82:	bf00      	nop
    9d84:	b003      	add	sp, #12
    9d86:	f85d fb04 	ldr.w	pc, [sp], #4
    9d8a:	bf00      	nop
    9d8c:	1fff91c8 	.word	0x1fff91c8
    9d90:	1fff91c4 	.word	0x1fff91c4

00009d94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:
    9d94:	b500      	push	{lr}
    9d96:	b083      	sub	sp, #12
    9d98:	f7f6 fe8c 	bl	ab4 <Sys_GetCoreID>
    9d9c:	4603      	mov	r3, r0
    9d9e:	9301      	str	r3, [sp, #4]
    9da0:	4a0d      	ldr	r2, [pc, #52]	; (9dd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9da2:	9b01      	ldr	r3, [sp, #4]
    9da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9da8:	1e5a      	subs	r2, r3, #1
    9daa:	490b      	ldr	r1, [pc, #44]	; (9dd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9dac:	9b01      	ldr	r3, [sp, #4]
    9dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9db2:	4a0a      	ldr	r2, [pc, #40]	; (9ddc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    9db4:	9b01      	ldr	r3, [sp, #4]
    9db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dba:	f003 0301 	and.w	r3, r3, #1
    9dbe:	2b00      	cmp	r3, #0
    9dc0:	d106      	bne.n	9dd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    9dc2:	4a05      	ldr	r2, [pc, #20]	; (9dd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9dc4:	9b01      	ldr	r3, [sp, #4]
    9dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dca:	2b00      	cmp	r3, #0
    9dcc:	d100      	bne.n	9dd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    9dce:	b662      	cpsie	i
    9dd0:	bf00      	nop
    9dd2:	b003      	add	sp, #12
    9dd4:	f85d fb04 	ldr.w	pc, [sp], #4
    9dd8:	1fff91c8 	.word	0x1fff91c8
    9ddc:	1fff91c4 	.word	0x1fff91c4

00009de0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:
    9de0:	b500      	push	{lr}
    9de2:	b083      	sub	sp, #12
    9de4:	f7f6 fe66 	bl	ab4 <Sys_GetCoreID>
    9de8:	4603      	mov	r3, r0
    9dea:	9301      	str	r3, [sp, #4]
    9dec:	4a10      	ldr	r2, [pc, #64]	; (9e30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9dee:	9b01      	ldr	r3, [sp, #4]
    9df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9df4:	2b00      	cmp	r3, #0
    9df6:	d10d      	bne.n	9e14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    9df8:	f7f6 fd83 	bl	902 <Port_schm_read_msr>
    9dfc:	9000      	str	r0, [sp, #0]
    9dfe:	9b00      	ldr	r3, [sp, #0]
    9e00:	f003 0301 	and.w	r3, r3, #1
    9e04:	2b00      	cmp	r3, #0
    9e06:	d100      	bne.n	9e0a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
    9e08:	b672      	cpsid	i
    9e0a:	490a      	ldr	r1, [pc, #40]	; (9e34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    9e0c:	9b01      	ldr	r3, [sp, #4]
    9e0e:	9a00      	ldr	r2, [sp, #0]
    9e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9e14:	4a06      	ldr	r2, [pc, #24]	; (9e30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9e16:	9b01      	ldr	r3, [sp, #4]
    9e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e1c:	1c5a      	adds	r2, r3, #1
    9e1e:	4904      	ldr	r1, [pc, #16]	; (9e30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9e20:	9b01      	ldr	r3, [sp, #4]
    9e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9e26:	bf00      	nop
    9e28:	b003      	add	sp, #12
    9e2a:	f85d fb04 	ldr.w	pc, [sp], #4
    9e2e:	bf00      	nop
    9e30:	1fff91d0 	.word	0x1fff91d0
    9e34:	1fff91cc 	.word	0x1fff91cc

00009e38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:
    9e38:	b500      	push	{lr}
    9e3a:	b083      	sub	sp, #12
    9e3c:	f7f6 fe3a 	bl	ab4 <Sys_GetCoreID>
    9e40:	4603      	mov	r3, r0
    9e42:	9301      	str	r3, [sp, #4]
    9e44:	4a0d      	ldr	r2, [pc, #52]	; (9e7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9e46:	9b01      	ldr	r3, [sp, #4]
    9e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e4c:	1e5a      	subs	r2, r3, #1
    9e4e:	490b      	ldr	r1, [pc, #44]	; (9e7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9e50:	9b01      	ldr	r3, [sp, #4]
    9e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9e56:	4a0a      	ldr	r2, [pc, #40]	; (9e80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    9e58:	9b01      	ldr	r3, [sp, #4]
    9e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e5e:	f003 0301 	and.w	r3, r3, #1
    9e62:	2b00      	cmp	r3, #0
    9e64:	d106      	bne.n	9e74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    9e66:	4a05      	ldr	r2, [pc, #20]	; (9e7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9e68:	9b01      	ldr	r3, [sp, #4]
    9e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d100      	bne.n	9e74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    9e72:	b662      	cpsie	i
    9e74:	bf00      	nop
    9e76:	b003      	add	sp, #12
    9e78:	f85d fb04 	ldr.w	pc, [sp], #4
    9e7c:	1fff91d0 	.word	0x1fff91d0
    9e80:	1fff91cc 	.word	0x1fff91cc

00009e84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:
    9e84:	b500      	push	{lr}
    9e86:	b083      	sub	sp, #12
    9e88:	f7f6 fe14 	bl	ab4 <Sys_GetCoreID>
    9e8c:	4603      	mov	r3, r0
    9e8e:	9301      	str	r3, [sp, #4]
    9e90:	4a10      	ldr	r2, [pc, #64]	; (9ed4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9e92:	9b01      	ldr	r3, [sp, #4]
    9e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e98:	2b00      	cmp	r3, #0
    9e9a:	d10d      	bne.n	9eb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    9e9c:	f7f6 fd31 	bl	902 <Port_schm_read_msr>
    9ea0:	9000      	str	r0, [sp, #0]
    9ea2:	9b00      	ldr	r3, [sp, #0]
    9ea4:	f003 0301 	and.w	r3, r3, #1
    9ea8:	2b00      	cmp	r3, #0
    9eaa:	d100      	bne.n	9eae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
    9eac:	b672      	cpsid	i
    9eae:	490a      	ldr	r1, [pc, #40]	; (9ed8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    9eb0:	9b01      	ldr	r3, [sp, #4]
    9eb2:	9a00      	ldr	r2, [sp, #0]
    9eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9eb8:	4a06      	ldr	r2, [pc, #24]	; (9ed4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9eba:	9b01      	ldr	r3, [sp, #4]
    9ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ec0:	1c5a      	adds	r2, r3, #1
    9ec2:	4904      	ldr	r1, [pc, #16]	; (9ed4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9ec4:	9b01      	ldr	r3, [sp, #4]
    9ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9eca:	bf00      	nop
    9ecc:	b003      	add	sp, #12
    9ece:	f85d fb04 	ldr.w	pc, [sp], #4
    9ed2:	bf00      	nop
    9ed4:	1fff91d8 	.word	0x1fff91d8
    9ed8:	1fff91d4 	.word	0x1fff91d4

00009edc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:
    9edc:	b500      	push	{lr}
    9ede:	b083      	sub	sp, #12
    9ee0:	f7f6 fde8 	bl	ab4 <Sys_GetCoreID>
    9ee4:	4603      	mov	r3, r0
    9ee6:	9301      	str	r3, [sp, #4]
    9ee8:	4a0d      	ldr	r2, [pc, #52]	; (9f20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9eea:	9b01      	ldr	r3, [sp, #4]
    9eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ef0:	1e5a      	subs	r2, r3, #1
    9ef2:	490b      	ldr	r1, [pc, #44]	; (9f20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9ef4:	9b01      	ldr	r3, [sp, #4]
    9ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9efa:	4a0a      	ldr	r2, [pc, #40]	; (9f24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    9efc:	9b01      	ldr	r3, [sp, #4]
    9efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f02:	f003 0301 	and.w	r3, r3, #1
    9f06:	2b00      	cmp	r3, #0
    9f08:	d106      	bne.n	9f18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    9f0a:	4a05      	ldr	r2, [pc, #20]	; (9f20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9f0c:	9b01      	ldr	r3, [sp, #4]
    9f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f12:	2b00      	cmp	r3, #0
    9f14:	d100      	bne.n	9f18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    9f16:	b662      	cpsie	i
    9f18:	bf00      	nop
    9f1a:	b003      	add	sp, #12
    9f1c:	f85d fb04 	ldr.w	pc, [sp], #4
    9f20:	1fff91d8 	.word	0x1fff91d8
    9f24:	1fff91d4 	.word	0x1fff91d4

00009f28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
    9f28:	b500      	push	{lr}
    9f2a:	b083      	sub	sp, #12
    9f2c:	f7f6 fdc2 	bl	ab4 <Sys_GetCoreID>
    9f30:	4603      	mov	r3, r0
    9f32:	9301      	str	r3, [sp, #4]
    9f34:	4a10      	ldr	r2, [pc, #64]	; (9f78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
    9f36:	9b01      	ldr	r3, [sp, #4]
    9f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f3c:	2b00      	cmp	r3, #0
    9f3e:	d10d      	bne.n	9f5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    9f40:	f7f6 fce8 	bl	914 <Pwm_schm_read_msr>
    9f44:	9000      	str	r0, [sp, #0]
    9f46:	9b00      	ldr	r3, [sp, #0]
    9f48:	f003 0301 	and.w	r3, r3, #1
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	d100      	bne.n	9f52 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
    9f50:	b672      	cpsid	i
    9f52:	490a      	ldr	r1, [pc, #40]	; (9f7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
    9f54:	9b01      	ldr	r3, [sp, #4]
    9f56:	9a00      	ldr	r2, [sp, #0]
    9f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9f5c:	4a06      	ldr	r2, [pc, #24]	; (9f78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
    9f5e:	9b01      	ldr	r3, [sp, #4]
    9f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f64:	1c5a      	adds	r2, r3, #1
    9f66:	4904      	ldr	r1, [pc, #16]	; (9f78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
    9f68:	9b01      	ldr	r3, [sp, #4]
    9f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9f6e:	bf00      	nop
    9f70:	b003      	add	sp, #12
    9f72:	f85d fb04 	ldr.w	pc, [sp], #4
    9f76:	bf00      	nop
    9f78:	1fff91e0 	.word	0x1fff91e0
    9f7c:	1fff91dc 	.word	0x1fff91dc

00009f80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:
    9f80:	b500      	push	{lr}
    9f82:	b083      	sub	sp, #12
    9f84:	f7f6 fd96 	bl	ab4 <Sys_GetCoreID>
    9f88:	4603      	mov	r3, r0
    9f8a:	9301      	str	r3, [sp, #4]
    9f8c:	4a0d      	ldr	r2, [pc, #52]	; (9fc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
    9f8e:	9b01      	ldr	r3, [sp, #4]
    9f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f94:	1e5a      	subs	r2, r3, #1
    9f96:	490b      	ldr	r1, [pc, #44]	; (9fc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
    9f98:	9b01      	ldr	r3, [sp, #4]
    9f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9f9e:	4a0a      	ldr	r2, [pc, #40]	; (9fc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
    9fa0:	9b01      	ldr	r3, [sp, #4]
    9fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fa6:	f003 0301 	and.w	r3, r3, #1
    9faa:	2b00      	cmp	r3, #0
    9fac:	d106      	bne.n	9fbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    9fae:	4a05      	ldr	r2, [pc, #20]	; (9fc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
    9fb0:	9b01      	ldr	r3, [sp, #4]
    9fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fb6:	2b00      	cmp	r3, #0
    9fb8:	d100      	bne.n	9fbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    9fba:	b662      	cpsie	i
    9fbc:	bf00      	nop
    9fbe:	b003      	add	sp, #12
    9fc0:	f85d fb04 	ldr.w	pc, [sp], #4
    9fc4:	1fff91e0 	.word	0x1fff91e0
    9fc8:	1fff91dc 	.word	0x1fff91dc

00009fcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:
    9fcc:	b500      	push	{lr}
    9fce:	b083      	sub	sp, #12
    9fd0:	f7f6 fd70 	bl	ab4 <Sys_GetCoreID>
    9fd4:	4603      	mov	r3, r0
    9fd6:	9301      	str	r3, [sp, #4]
    9fd8:	4a10      	ldr	r2, [pc, #64]	; (a01c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
    9fda:	9b01      	ldr	r3, [sp, #4]
    9fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fe0:	2b00      	cmp	r3, #0
    9fe2:	d10d      	bne.n	a000 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    9fe4:	f7f6 fc96 	bl	914 <Pwm_schm_read_msr>
    9fe8:	9000      	str	r0, [sp, #0]
    9fea:	9b00      	ldr	r3, [sp, #0]
    9fec:	f003 0301 	and.w	r3, r3, #1
    9ff0:	2b00      	cmp	r3, #0
    9ff2:	d100      	bne.n	9ff6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
    9ff4:	b672      	cpsid	i
    9ff6:	490a      	ldr	r1, [pc, #40]	; (a020 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
    9ff8:	9b01      	ldr	r3, [sp, #4]
    9ffa:	9a00      	ldr	r2, [sp, #0]
    9ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a000:	4a06      	ldr	r2, [pc, #24]	; (a01c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
    a002:	9b01      	ldr	r3, [sp, #4]
    a004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a008:	1c5a      	adds	r2, r3, #1
    a00a:	4904      	ldr	r1, [pc, #16]	; (a01c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
    a00c:	9b01      	ldr	r3, [sp, #4]
    a00e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a012:	bf00      	nop
    a014:	b003      	add	sp, #12
    a016:	f85d fb04 	ldr.w	pc, [sp], #4
    a01a:	bf00      	nop
    a01c:	1fff91e8 	.word	0x1fff91e8
    a020:	1fff91e4 	.word	0x1fff91e4

0000a024 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:
    a024:	b500      	push	{lr}
    a026:	b083      	sub	sp, #12
    a028:	f7f6 fd44 	bl	ab4 <Sys_GetCoreID>
    a02c:	4603      	mov	r3, r0
    a02e:	9301      	str	r3, [sp, #4]
    a030:	4a0d      	ldr	r2, [pc, #52]	; (a068 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
    a032:	9b01      	ldr	r3, [sp, #4]
    a034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a038:	1e5a      	subs	r2, r3, #1
    a03a:	490b      	ldr	r1, [pc, #44]	; (a068 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
    a03c:	9b01      	ldr	r3, [sp, #4]
    a03e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a042:	4a0a      	ldr	r2, [pc, #40]	; (a06c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
    a044:	9b01      	ldr	r3, [sp, #4]
    a046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a04a:	f003 0301 	and.w	r3, r3, #1
    a04e:	2b00      	cmp	r3, #0
    a050:	d106      	bne.n	a060 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    a052:	4a05      	ldr	r2, [pc, #20]	; (a068 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
    a054:	9b01      	ldr	r3, [sp, #4]
    a056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a05a:	2b00      	cmp	r3, #0
    a05c:	d100      	bne.n	a060 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    a05e:	b662      	cpsie	i
    a060:	bf00      	nop
    a062:	b003      	add	sp, #12
    a064:	f85d fb04 	ldr.w	pc, [sp], #4
    a068:	1fff91e8 	.word	0x1fff91e8
    a06c:	1fff91e4 	.word	0x1fff91e4

0000a070 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:
    a070:	b500      	push	{lr}
    a072:	b083      	sub	sp, #12
    a074:	f7f6 fd1e 	bl	ab4 <Sys_GetCoreID>
    a078:	4603      	mov	r3, r0
    a07a:	9301      	str	r3, [sp, #4]
    a07c:	4a10      	ldr	r2, [pc, #64]	; (a0c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
    a07e:	9b01      	ldr	r3, [sp, #4]
    a080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a084:	2b00      	cmp	r3, #0
    a086:	d10d      	bne.n	a0a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    a088:	f7f6 fc44 	bl	914 <Pwm_schm_read_msr>
    a08c:	9000      	str	r0, [sp, #0]
    a08e:	9b00      	ldr	r3, [sp, #0]
    a090:	f003 0301 	and.w	r3, r3, #1
    a094:	2b00      	cmp	r3, #0
    a096:	d100      	bne.n	a09a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
    a098:	b672      	cpsid	i
    a09a:	490a      	ldr	r1, [pc, #40]	; (a0c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
    a09c:	9b01      	ldr	r3, [sp, #4]
    a09e:	9a00      	ldr	r2, [sp, #0]
    a0a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a0a4:	4a06      	ldr	r2, [pc, #24]	; (a0c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
    a0a6:	9b01      	ldr	r3, [sp, #4]
    a0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ac:	1c5a      	adds	r2, r3, #1
    a0ae:	4904      	ldr	r1, [pc, #16]	; (a0c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
    a0b0:	9b01      	ldr	r3, [sp, #4]
    a0b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a0b6:	bf00      	nop
    a0b8:	b003      	add	sp, #12
    a0ba:	f85d fb04 	ldr.w	pc, [sp], #4
    a0be:	bf00      	nop
    a0c0:	1fff91f0 	.word	0x1fff91f0
    a0c4:	1fff91ec 	.word	0x1fff91ec

0000a0c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:
    a0c8:	b500      	push	{lr}
    a0ca:	b083      	sub	sp, #12
    a0cc:	f7f6 fcf2 	bl	ab4 <Sys_GetCoreID>
    a0d0:	4603      	mov	r3, r0
    a0d2:	9301      	str	r3, [sp, #4]
    a0d4:	4a0d      	ldr	r2, [pc, #52]	; (a10c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
    a0d6:	9b01      	ldr	r3, [sp, #4]
    a0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0dc:	1e5a      	subs	r2, r3, #1
    a0de:	490b      	ldr	r1, [pc, #44]	; (a10c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
    a0e0:	9b01      	ldr	r3, [sp, #4]
    a0e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a0e6:	4a0a      	ldr	r2, [pc, #40]	; (a110 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
    a0e8:	9b01      	ldr	r3, [sp, #4]
    a0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ee:	f003 0301 	and.w	r3, r3, #1
    a0f2:	2b00      	cmp	r3, #0
    a0f4:	d106      	bne.n	a104 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    a0f6:	4a05      	ldr	r2, [pc, #20]	; (a10c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
    a0f8:	9b01      	ldr	r3, [sp, #4]
    a0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0fe:	2b00      	cmp	r3, #0
    a100:	d100      	bne.n	a104 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    a102:	b662      	cpsie	i
    a104:	bf00      	nop
    a106:	b003      	add	sp, #12
    a108:	f85d fb04 	ldr.w	pc, [sp], #4
    a10c:	1fff91f0 	.word	0x1fff91f0
    a110:	1fff91ec 	.word	0x1fff91ec

0000a114 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:
    a114:	b500      	push	{lr}
    a116:	b083      	sub	sp, #12
    a118:	f7f6 fccc 	bl	ab4 <Sys_GetCoreID>
    a11c:	4603      	mov	r3, r0
    a11e:	9301      	str	r3, [sp, #4]
    a120:	4a10      	ldr	r2, [pc, #64]	; (a164 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
    a122:	9b01      	ldr	r3, [sp, #4]
    a124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a128:	2b00      	cmp	r3, #0
    a12a:	d10d      	bne.n	a148 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    a12c:	f7f6 fbf2 	bl	914 <Pwm_schm_read_msr>
    a130:	9000      	str	r0, [sp, #0]
    a132:	9b00      	ldr	r3, [sp, #0]
    a134:	f003 0301 	and.w	r3, r3, #1
    a138:	2b00      	cmp	r3, #0
    a13a:	d100      	bne.n	a13e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
    a13c:	b672      	cpsid	i
    a13e:	490a      	ldr	r1, [pc, #40]	; (a168 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
    a140:	9b01      	ldr	r3, [sp, #4]
    a142:	9a00      	ldr	r2, [sp, #0]
    a144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a148:	4a06      	ldr	r2, [pc, #24]	; (a164 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
    a14a:	9b01      	ldr	r3, [sp, #4]
    a14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a150:	1c5a      	adds	r2, r3, #1
    a152:	4904      	ldr	r1, [pc, #16]	; (a164 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
    a154:	9b01      	ldr	r3, [sp, #4]
    a156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a15a:	bf00      	nop
    a15c:	b003      	add	sp, #12
    a15e:	f85d fb04 	ldr.w	pc, [sp], #4
    a162:	bf00      	nop
    a164:	1fff91f8 	.word	0x1fff91f8
    a168:	1fff91f4 	.word	0x1fff91f4

0000a16c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:
    a16c:	b500      	push	{lr}
    a16e:	b083      	sub	sp, #12
    a170:	f7f6 fca0 	bl	ab4 <Sys_GetCoreID>
    a174:	4603      	mov	r3, r0
    a176:	9301      	str	r3, [sp, #4]
    a178:	4a0d      	ldr	r2, [pc, #52]	; (a1b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
    a17a:	9b01      	ldr	r3, [sp, #4]
    a17c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a180:	1e5a      	subs	r2, r3, #1
    a182:	490b      	ldr	r1, [pc, #44]	; (a1b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
    a184:	9b01      	ldr	r3, [sp, #4]
    a186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a18a:	4a0a      	ldr	r2, [pc, #40]	; (a1b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
    a18c:	9b01      	ldr	r3, [sp, #4]
    a18e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a192:	f003 0301 	and.w	r3, r3, #1
    a196:	2b00      	cmp	r3, #0
    a198:	d106      	bne.n	a1a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    a19a:	4a05      	ldr	r2, [pc, #20]	; (a1b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
    a19c:	9b01      	ldr	r3, [sp, #4]
    a19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1a2:	2b00      	cmp	r3, #0
    a1a4:	d100      	bne.n	a1a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    a1a6:	b662      	cpsie	i
    a1a8:	bf00      	nop
    a1aa:	b003      	add	sp, #12
    a1ac:	f85d fb04 	ldr.w	pc, [sp], #4
    a1b0:	1fff91f8 	.word	0x1fff91f8
    a1b4:	1fff91f4 	.word	0x1fff91f4

0000a1b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:
    a1b8:	b500      	push	{lr}
    a1ba:	b083      	sub	sp, #12
    a1bc:	f7f6 fc7a 	bl	ab4 <Sys_GetCoreID>
    a1c0:	4603      	mov	r3, r0
    a1c2:	9301      	str	r3, [sp, #4]
    a1c4:	4a10      	ldr	r2, [pc, #64]	; (a208 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
    a1c6:	9b01      	ldr	r3, [sp, #4]
    a1c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1cc:	2b00      	cmp	r3, #0
    a1ce:	d10d      	bne.n	a1ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    a1d0:	f7f6 fba0 	bl	914 <Pwm_schm_read_msr>
    a1d4:	9000      	str	r0, [sp, #0]
    a1d6:	9b00      	ldr	r3, [sp, #0]
    a1d8:	f003 0301 	and.w	r3, r3, #1
    a1dc:	2b00      	cmp	r3, #0
    a1de:	d100      	bne.n	a1e2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
    a1e0:	b672      	cpsid	i
    a1e2:	490a      	ldr	r1, [pc, #40]	; (a20c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
    a1e4:	9b01      	ldr	r3, [sp, #4]
    a1e6:	9a00      	ldr	r2, [sp, #0]
    a1e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a1ec:	4a06      	ldr	r2, [pc, #24]	; (a208 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
    a1ee:	9b01      	ldr	r3, [sp, #4]
    a1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1f4:	1c5a      	adds	r2, r3, #1
    a1f6:	4904      	ldr	r1, [pc, #16]	; (a208 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
    a1f8:	9b01      	ldr	r3, [sp, #4]
    a1fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a1fe:	bf00      	nop
    a200:	b003      	add	sp, #12
    a202:	f85d fb04 	ldr.w	pc, [sp], #4
    a206:	bf00      	nop
    a208:	1fff9200 	.word	0x1fff9200
    a20c:	1fff91fc 	.word	0x1fff91fc

0000a210 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:
    a210:	b500      	push	{lr}
    a212:	b083      	sub	sp, #12
    a214:	f7f6 fc4e 	bl	ab4 <Sys_GetCoreID>
    a218:	4603      	mov	r3, r0
    a21a:	9301      	str	r3, [sp, #4]
    a21c:	4a0d      	ldr	r2, [pc, #52]	; (a254 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
    a21e:	9b01      	ldr	r3, [sp, #4]
    a220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a224:	1e5a      	subs	r2, r3, #1
    a226:	490b      	ldr	r1, [pc, #44]	; (a254 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
    a228:	9b01      	ldr	r3, [sp, #4]
    a22a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a22e:	4a0a      	ldr	r2, [pc, #40]	; (a258 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
    a230:	9b01      	ldr	r3, [sp, #4]
    a232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a236:	f003 0301 	and.w	r3, r3, #1
    a23a:	2b00      	cmp	r3, #0
    a23c:	d106      	bne.n	a24c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    a23e:	4a05      	ldr	r2, [pc, #20]	; (a254 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
    a240:	9b01      	ldr	r3, [sp, #4]
    a242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a246:	2b00      	cmp	r3, #0
    a248:	d100      	bne.n	a24c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    a24a:	b662      	cpsie	i
    a24c:	bf00      	nop
    a24e:	b003      	add	sp, #12
    a250:	f85d fb04 	ldr.w	pc, [sp], #4
    a254:	1fff9200 	.word	0x1fff9200
    a258:	1fff91fc 	.word	0x1fff91fc

0000a25c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:
    a25c:	b500      	push	{lr}
    a25e:	b083      	sub	sp, #12
    a260:	f7f6 fc28 	bl	ab4 <Sys_GetCoreID>
    a264:	4603      	mov	r3, r0
    a266:	9301      	str	r3, [sp, #4]
    a268:	4a10      	ldr	r2, [pc, #64]	; (a2ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
    a26a:	9b01      	ldr	r3, [sp, #4]
    a26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a270:	2b00      	cmp	r3, #0
    a272:	d10d      	bne.n	a290 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    a274:	f7f6 fb4e 	bl	914 <Pwm_schm_read_msr>
    a278:	9000      	str	r0, [sp, #0]
    a27a:	9b00      	ldr	r3, [sp, #0]
    a27c:	f003 0301 	and.w	r3, r3, #1
    a280:	2b00      	cmp	r3, #0
    a282:	d100      	bne.n	a286 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
    a284:	b672      	cpsid	i
    a286:	490a      	ldr	r1, [pc, #40]	; (a2b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
    a288:	9b01      	ldr	r3, [sp, #4]
    a28a:	9a00      	ldr	r2, [sp, #0]
    a28c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a290:	4a06      	ldr	r2, [pc, #24]	; (a2ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
    a292:	9b01      	ldr	r3, [sp, #4]
    a294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a298:	1c5a      	adds	r2, r3, #1
    a29a:	4904      	ldr	r1, [pc, #16]	; (a2ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
    a29c:	9b01      	ldr	r3, [sp, #4]
    a29e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a2a2:	bf00      	nop
    a2a4:	b003      	add	sp, #12
    a2a6:	f85d fb04 	ldr.w	pc, [sp], #4
    a2aa:	bf00      	nop
    a2ac:	1fff9208 	.word	0x1fff9208
    a2b0:	1fff9204 	.word	0x1fff9204

0000a2b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:
    a2b4:	b500      	push	{lr}
    a2b6:	b083      	sub	sp, #12
    a2b8:	f7f6 fbfc 	bl	ab4 <Sys_GetCoreID>
    a2bc:	4603      	mov	r3, r0
    a2be:	9301      	str	r3, [sp, #4]
    a2c0:	4a0d      	ldr	r2, [pc, #52]	; (a2f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
    a2c2:	9b01      	ldr	r3, [sp, #4]
    a2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2c8:	1e5a      	subs	r2, r3, #1
    a2ca:	490b      	ldr	r1, [pc, #44]	; (a2f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
    a2cc:	9b01      	ldr	r3, [sp, #4]
    a2ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a2d2:	4a0a      	ldr	r2, [pc, #40]	; (a2fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
    a2d4:	9b01      	ldr	r3, [sp, #4]
    a2d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2da:	f003 0301 	and.w	r3, r3, #1
    a2de:	2b00      	cmp	r3, #0
    a2e0:	d106      	bne.n	a2f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    a2e2:	4a05      	ldr	r2, [pc, #20]	; (a2f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
    a2e4:	9b01      	ldr	r3, [sp, #4]
    a2e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2ea:	2b00      	cmp	r3, #0
    a2ec:	d100      	bne.n	a2f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    a2ee:	b662      	cpsie	i
    a2f0:	bf00      	nop
    a2f2:	b003      	add	sp, #12
    a2f4:	f85d fb04 	ldr.w	pc, [sp], #4
    a2f8:	1fff9208 	.word	0x1fff9208
    a2fc:	1fff9204 	.word	0x1fff9204

0000a300 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:
    a300:	b500      	push	{lr}
    a302:	b083      	sub	sp, #12
    a304:	f7f6 fbd6 	bl	ab4 <Sys_GetCoreID>
    a308:	4603      	mov	r3, r0
    a30a:	9301      	str	r3, [sp, #4]
    a30c:	4a10      	ldr	r2, [pc, #64]	; (a350 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
    a30e:	9b01      	ldr	r3, [sp, #4]
    a310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a314:	2b00      	cmp	r3, #0
    a316:	d10d      	bne.n	a334 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    a318:	f7f6 fafc 	bl	914 <Pwm_schm_read_msr>
    a31c:	9000      	str	r0, [sp, #0]
    a31e:	9b00      	ldr	r3, [sp, #0]
    a320:	f003 0301 	and.w	r3, r3, #1
    a324:	2b00      	cmp	r3, #0
    a326:	d100      	bne.n	a32a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
    a328:	b672      	cpsid	i
    a32a:	490a      	ldr	r1, [pc, #40]	; (a354 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
    a32c:	9b01      	ldr	r3, [sp, #4]
    a32e:	9a00      	ldr	r2, [sp, #0]
    a330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a334:	4a06      	ldr	r2, [pc, #24]	; (a350 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
    a336:	9b01      	ldr	r3, [sp, #4]
    a338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a33c:	1c5a      	adds	r2, r3, #1
    a33e:	4904      	ldr	r1, [pc, #16]	; (a350 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
    a340:	9b01      	ldr	r3, [sp, #4]
    a342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a346:	bf00      	nop
    a348:	b003      	add	sp, #12
    a34a:	f85d fb04 	ldr.w	pc, [sp], #4
    a34e:	bf00      	nop
    a350:	1fff9210 	.word	0x1fff9210
    a354:	1fff920c 	.word	0x1fff920c

0000a358 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:
    a358:	b500      	push	{lr}
    a35a:	b083      	sub	sp, #12
    a35c:	f7f6 fbaa 	bl	ab4 <Sys_GetCoreID>
    a360:	4603      	mov	r3, r0
    a362:	9301      	str	r3, [sp, #4]
    a364:	4a0d      	ldr	r2, [pc, #52]	; (a39c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
    a366:	9b01      	ldr	r3, [sp, #4]
    a368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a36c:	1e5a      	subs	r2, r3, #1
    a36e:	490b      	ldr	r1, [pc, #44]	; (a39c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
    a370:	9b01      	ldr	r3, [sp, #4]
    a372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a376:	4a0a      	ldr	r2, [pc, #40]	; (a3a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
    a378:	9b01      	ldr	r3, [sp, #4]
    a37a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a37e:	f003 0301 	and.w	r3, r3, #1
    a382:	2b00      	cmp	r3, #0
    a384:	d106      	bne.n	a394 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    a386:	4a05      	ldr	r2, [pc, #20]	; (a39c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
    a388:	9b01      	ldr	r3, [sp, #4]
    a38a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a38e:	2b00      	cmp	r3, #0
    a390:	d100      	bne.n	a394 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    a392:	b662      	cpsie	i
    a394:	bf00      	nop
    a396:	b003      	add	sp, #12
    a398:	f85d fb04 	ldr.w	pc, [sp], #4
    a39c:	1fff9210 	.word	0x1fff9210
    a3a0:	1fff920c 	.word	0x1fff920c

0000a3a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:
    a3a4:	b500      	push	{lr}
    a3a6:	b083      	sub	sp, #12
    a3a8:	f7f6 fb84 	bl	ab4 <Sys_GetCoreID>
    a3ac:	4603      	mov	r3, r0
    a3ae:	9301      	str	r3, [sp, #4]
    a3b0:	4a10      	ldr	r2, [pc, #64]	; (a3f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
    a3b2:	9b01      	ldr	r3, [sp, #4]
    a3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3b8:	2b00      	cmp	r3, #0
    a3ba:	d10d      	bne.n	a3d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    a3bc:	f7f6 faaa 	bl	914 <Pwm_schm_read_msr>
    a3c0:	9000      	str	r0, [sp, #0]
    a3c2:	9b00      	ldr	r3, [sp, #0]
    a3c4:	f003 0301 	and.w	r3, r3, #1
    a3c8:	2b00      	cmp	r3, #0
    a3ca:	d100      	bne.n	a3ce <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
    a3cc:	b672      	cpsid	i
    a3ce:	490a      	ldr	r1, [pc, #40]	; (a3f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
    a3d0:	9b01      	ldr	r3, [sp, #4]
    a3d2:	9a00      	ldr	r2, [sp, #0]
    a3d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a3d8:	4a06      	ldr	r2, [pc, #24]	; (a3f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
    a3da:	9b01      	ldr	r3, [sp, #4]
    a3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3e0:	1c5a      	adds	r2, r3, #1
    a3e2:	4904      	ldr	r1, [pc, #16]	; (a3f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
    a3e4:	9b01      	ldr	r3, [sp, #4]
    a3e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a3ea:	bf00      	nop
    a3ec:	b003      	add	sp, #12
    a3ee:	f85d fb04 	ldr.w	pc, [sp], #4
    a3f2:	bf00      	nop
    a3f4:	1fff9218 	.word	0x1fff9218
    a3f8:	1fff9214 	.word	0x1fff9214

0000a3fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:
    a3fc:	b500      	push	{lr}
    a3fe:	b083      	sub	sp, #12
    a400:	f7f6 fb58 	bl	ab4 <Sys_GetCoreID>
    a404:	4603      	mov	r3, r0
    a406:	9301      	str	r3, [sp, #4]
    a408:	4a0d      	ldr	r2, [pc, #52]	; (a440 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
    a40a:	9b01      	ldr	r3, [sp, #4]
    a40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a410:	1e5a      	subs	r2, r3, #1
    a412:	490b      	ldr	r1, [pc, #44]	; (a440 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
    a414:	9b01      	ldr	r3, [sp, #4]
    a416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a41a:	4a0a      	ldr	r2, [pc, #40]	; (a444 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
    a41c:	9b01      	ldr	r3, [sp, #4]
    a41e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a422:	f003 0301 	and.w	r3, r3, #1
    a426:	2b00      	cmp	r3, #0
    a428:	d106      	bne.n	a438 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    a42a:	4a05      	ldr	r2, [pc, #20]	; (a440 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
    a42c:	9b01      	ldr	r3, [sp, #4]
    a42e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a432:	2b00      	cmp	r3, #0
    a434:	d100      	bne.n	a438 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    a436:	b662      	cpsie	i
    a438:	bf00      	nop
    a43a:	b003      	add	sp, #12
    a43c:	f85d fb04 	ldr.w	pc, [sp], #4
    a440:	1fff9218 	.word	0x1fff9218
    a444:	1fff9214 	.word	0x1fff9214

0000a448 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:
    a448:	b500      	push	{lr}
    a44a:	b083      	sub	sp, #12
    a44c:	f7f6 fb32 	bl	ab4 <Sys_GetCoreID>
    a450:	4603      	mov	r3, r0
    a452:	9301      	str	r3, [sp, #4]
    a454:	4a10      	ldr	r2, [pc, #64]	; (a498 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
    a456:	9b01      	ldr	r3, [sp, #4]
    a458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a45c:	2b00      	cmp	r3, #0
    a45e:	d10d      	bne.n	a47c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    a460:	f7f6 fa58 	bl	914 <Pwm_schm_read_msr>
    a464:	9000      	str	r0, [sp, #0]
    a466:	9b00      	ldr	r3, [sp, #0]
    a468:	f003 0301 	and.w	r3, r3, #1
    a46c:	2b00      	cmp	r3, #0
    a46e:	d100      	bne.n	a472 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
    a470:	b672      	cpsid	i
    a472:	490a      	ldr	r1, [pc, #40]	; (a49c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
    a474:	9b01      	ldr	r3, [sp, #4]
    a476:	9a00      	ldr	r2, [sp, #0]
    a478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a47c:	4a06      	ldr	r2, [pc, #24]	; (a498 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
    a47e:	9b01      	ldr	r3, [sp, #4]
    a480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a484:	1c5a      	adds	r2, r3, #1
    a486:	4904      	ldr	r1, [pc, #16]	; (a498 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
    a488:	9b01      	ldr	r3, [sp, #4]
    a48a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a48e:	bf00      	nop
    a490:	b003      	add	sp, #12
    a492:	f85d fb04 	ldr.w	pc, [sp], #4
    a496:	bf00      	nop
    a498:	1fff9220 	.word	0x1fff9220
    a49c:	1fff921c 	.word	0x1fff921c

0000a4a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:
    a4a0:	b500      	push	{lr}
    a4a2:	b083      	sub	sp, #12
    a4a4:	f7f6 fb06 	bl	ab4 <Sys_GetCoreID>
    a4a8:	4603      	mov	r3, r0
    a4aa:	9301      	str	r3, [sp, #4]
    a4ac:	4a0d      	ldr	r2, [pc, #52]	; (a4e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
    a4ae:	9b01      	ldr	r3, [sp, #4]
    a4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4b4:	1e5a      	subs	r2, r3, #1
    a4b6:	490b      	ldr	r1, [pc, #44]	; (a4e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
    a4b8:	9b01      	ldr	r3, [sp, #4]
    a4ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a4be:	4a0a      	ldr	r2, [pc, #40]	; (a4e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
    a4c0:	9b01      	ldr	r3, [sp, #4]
    a4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4c6:	f003 0301 	and.w	r3, r3, #1
    a4ca:	2b00      	cmp	r3, #0
    a4cc:	d106      	bne.n	a4dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    a4ce:	4a05      	ldr	r2, [pc, #20]	; (a4e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
    a4d0:	9b01      	ldr	r3, [sp, #4]
    a4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4d6:	2b00      	cmp	r3, #0
    a4d8:	d100      	bne.n	a4dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    a4da:	b662      	cpsie	i
    a4dc:	bf00      	nop
    a4de:	b003      	add	sp, #12
    a4e0:	f85d fb04 	ldr.w	pc, [sp], #4
    a4e4:	1fff9220 	.word	0x1fff9220
    a4e8:	1fff921c 	.word	0x1fff921c

0000a4ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:
    a4ec:	b500      	push	{lr}
    a4ee:	b083      	sub	sp, #12
    a4f0:	f7f6 fae0 	bl	ab4 <Sys_GetCoreID>
    a4f4:	4603      	mov	r3, r0
    a4f6:	9301      	str	r3, [sp, #4]
    a4f8:	4a10      	ldr	r2, [pc, #64]	; (a53c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
    a4fa:	9b01      	ldr	r3, [sp, #4]
    a4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a500:	2b00      	cmp	r3, #0
    a502:	d10d      	bne.n	a520 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    a504:	f7f6 fa06 	bl	914 <Pwm_schm_read_msr>
    a508:	9000      	str	r0, [sp, #0]
    a50a:	9b00      	ldr	r3, [sp, #0]
    a50c:	f003 0301 	and.w	r3, r3, #1
    a510:	2b00      	cmp	r3, #0
    a512:	d100      	bne.n	a516 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
    a514:	b672      	cpsid	i
    a516:	490a      	ldr	r1, [pc, #40]	; (a540 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
    a518:	9b01      	ldr	r3, [sp, #4]
    a51a:	9a00      	ldr	r2, [sp, #0]
    a51c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a520:	4a06      	ldr	r2, [pc, #24]	; (a53c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
    a522:	9b01      	ldr	r3, [sp, #4]
    a524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a528:	1c5a      	adds	r2, r3, #1
    a52a:	4904      	ldr	r1, [pc, #16]	; (a53c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
    a52c:	9b01      	ldr	r3, [sp, #4]
    a52e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a532:	bf00      	nop
    a534:	b003      	add	sp, #12
    a536:	f85d fb04 	ldr.w	pc, [sp], #4
    a53a:	bf00      	nop
    a53c:	1fff9228 	.word	0x1fff9228
    a540:	1fff9224 	.word	0x1fff9224

0000a544 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:
    a544:	b500      	push	{lr}
    a546:	b083      	sub	sp, #12
    a548:	f7f6 fab4 	bl	ab4 <Sys_GetCoreID>
    a54c:	4603      	mov	r3, r0
    a54e:	9301      	str	r3, [sp, #4]
    a550:	4a0d      	ldr	r2, [pc, #52]	; (a588 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
    a552:	9b01      	ldr	r3, [sp, #4]
    a554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a558:	1e5a      	subs	r2, r3, #1
    a55a:	490b      	ldr	r1, [pc, #44]	; (a588 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
    a55c:	9b01      	ldr	r3, [sp, #4]
    a55e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a562:	4a0a      	ldr	r2, [pc, #40]	; (a58c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
    a564:	9b01      	ldr	r3, [sp, #4]
    a566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a56a:	f003 0301 	and.w	r3, r3, #1
    a56e:	2b00      	cmp	r3, #0
    a570:	d106      	bne.n	a580 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    a572:	4a05      	ldr	r2, [pc, #20]	; (a588 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
    a574:	9b01      	ldr	r3, [sp, #4]
    a576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a57a:	2b00      	cmp	r3, #0
    a57c:	d100      	bne.n	a580 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    a57e:	b662      	cpsie	i
    a580:	bf00      	nop
    a582:	b003      	add	sp, #12
    a584:	f85d fb04 	ldr.w	pc, [sp], #4
    a588:	1fff9228 	.word	0x1fff9228
    a58c:	1fff9224 	.word	0x1fff9224

0000a590 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:
    a590:	b500      	push	{lr}
    a592:	b083      	sub	sp, #12
    a594:	f7f6 fa8e 	bl	ab4 <Sys_GetCoreID>
    a598:	4603      	mov	r3, r0
    a59a:	9301      	str	r3, [sp, #4]
    a59c:	4a10      	ldr	r2, [pc, #64]	; (a5e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
    a59e:	9b01      	ldr	r3, [sp, #4]
    a5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5a4:	2b00      	cmp	r3, #0
    a5a6:	d10d      	bne.n	a5c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    a5a8:	f7f6 f9b4 	bl	914 <Pwm_schm_read_msr>
    a5ac:	9000      	str	r0, [sp, #0]
    a5ae:	9b00      	ldr	r3, [sp, #0]
    a5b0:	f003 0301 	and.w	r3, r3, #1
    a5b4:	2b00      	cmp	r3, #0
    a5b6:	d100      	bne.n	a5ba <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
    a5b8:	b672      	cpsid	i
    a5ba:	490a      	ldr	r1, [pc, #40]	; (a5e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
    a5bc:	9b01      	ldr	r3, [sp, #4]
    a5be:	9a00      	ldr	r2, [sp, #0]
    a5c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a5c4:	4a06      	ldr	r2, [pc, #24]	; (a5e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
    a5c6:	9b01      	ldr	r3, [sp, #4]
    a5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5cc:	1c5a      	adds	r2, r3, #1
    a5ce:	4904      	ldr	r1, [pc, #16]	; (a5e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
    a5d0:	9b01      	ldr	r3, [sp, #4]
    a5d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a5d6:	bf00      	nop
    a5d8:	b003      	add	sp, #12
    a5da:	f85d fb04 	ldr.w	pc, [sp], #4
    a5de:	bf00      	nop
    a5e0:	1fff9230 	.word	0x1fff9230
    a5e4:	1fff922c 	.word	0x1fff922c

0000a5e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:
    a5e8:	b500      	push	{lr}
    a5ea:	b083      	sub	sp, #12
    a5ec:	f7f6 fa62 	bl	ab4 <Sys_GetCoreID>
    a5f0:	4603      	mov	r3, r0
    a5f2:	9301      	str	r3, [sp, #4]
    a5f4:	4a0d      	ldr	r2, [pc, #52]	; (a62c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
    a5f6:	9b01      	ldr	r3, [sp, #4]
    a5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5fc:	1e5a      	subs	r2, r3, #1
    a5fe:	490b      	ldr	r1, [pc, #44]	; (a62c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
    a600:	9b01      	ldr	r3, [sp, #4]
    a602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a606:	4a0a      	ldr	r2, [pc, #40]	; (a630 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
    a608:	9b01      	ldr	r3, [sp, #4]
    a60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a60e:	f003 0301 	and.w	r3, r3, #1
    a612:	2b00      	cmp	r3, #0
    a614:	d106      	bne.n	a624 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    a616:	4a05      	ldr	r2, [pc, #20]	; (a62c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
    a618:	9b01      	ldr	r3, [sp, #4]
    a61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a61e:	2b00      	cmp	r3, #0
    a620:	d100      	bne.n	a624 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    a622:	b662      	cpsie	i
    a624:	bf00      	nop
    a626:	b003      	add	sp, #12
    a628:	f85d fb04 	ldr.w	pc, [sp], #4
    a62c:	1fff9230 	.word	0x1fff9230
    a630:	1fff922c 	.word	0x1fff922c

0000a634 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:
    a634:	b500      	push	{lr}
    a636:	b083      	sub	sp, #12
    a638:	f7f6 fa3c 	bl	ab4 <Sys_GetCoreID>
    a63c:	4603      	mov	r3, r0
    a63e:	9301      	str	r3, [sp, #4]
    a640:	4a10      	ldr	r2, [pc, #64]	; (a684 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
    a642:	9b01      	ldr	r3, [sp, #4]
    a644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a648:	2b00      	cmp	r3, #0
    a64a:	d10d      	bne.n	a668 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    a64c:	f7f6 f962 	bl	914 <Pwm_schm_read_msr>
    a650:	9000      	str	r0, [sp, #0]
    a652:	9b00      	ldr	r3, [sp, #0]
    a654:	f003 0301 	and.w	r3, r3, #1
    a658:	2b00      	cmp	r3, #0
    a65a:	d100      	bne.n	a65e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
    a65c:	b672      	cpsid	i
    a65e:	490a      	ldr	r1, [pc, #40]	; (a688 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
    a660:	9b01      	ldr	r3, [sp, #4]
    a662:	9a00      	ldr	r2, [sp, #0]
    a664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a668:	4a06      	ldr	r2, [pc, #24]	; (a684 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
    a66a:	9b01      	ldr	r3, [sp, #4]
    a66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a670:	1c5a      	adds	r2, r3, #1
    a672:	4904      	ldr	r1, [pc, #16]	; (a684 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
    a674:	9b01      	ldr	r3, [sp, #4]
    a676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a67a:	bf00      	nop
    a67c:	b003      	add	sp, #12
    a67e:	f85d fb04 	ldr.w	pc, [sp], #4
    a682:	bf00      	nop
    a684:	1fff9238 	.word	0x1fff9238
    a688:	1fff9234 	.word	0x1fff9234

0000a68c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:
    a68c:	b500      	push	{lr}
    a68e:	b083      	sub	sp, #12
    a690:	f7f6 fa10 	bl	ab4 <Sys_GetCoreID>
    a694:	4603      	mov	r3, r0
    a696:	9301      	str	r3, [sp, #4]
    a698:	4a0d      	ldr	r2, [pc, #52]	; (a6d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
    a69a:	9b01      	ldr	r3, [sp, #4]
    a69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6a0:	1e5a      	subs	r2, r3, #1
    a6a2:	490b      	ldr	r1, [pc, #44]	; (a6d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
    a6a4:	9b01      	ldr	r3, [sp, #4]
    a6a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a6aa:	4a0a      	ldr	r2, [pc, #40]	; (a6d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
    a6ac:	9b01      	ldr	r3, [sp, #4]
    a6ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6b2:	f003 0301 	and.w	r3, r3, #1
    a6b6:	2b00      	cmp	r3, #0
    a6b8:	d106      	bne.n	a6c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    a6ba:	4a05      	ldr	r2, [pc, #20]	; (a6d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
    a6bc:	9b01      	ldr	r3, [sp, #4]
    a6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6c2:	2b00      	cmp	r3, #0
    a6c4:	d100      	bne.n	a6c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    a6c6:	b662      	cpsie	i
    a6c8:	bf00      	nop
    a6ca:	b003      	add	sp, #12
    a6cc:	f85d fb04 	ldr.w	pc, [sp], #4
    a6d0:	1fff9238 	.word	0x1fff9238
    a6d4:	1fff9234 	.word	0x1fff9234

0000a6d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:
    a6d8:	b500      	push	{lr}
    a6da:	b083      	sub	sp, #12
    a6dc:	f7f6 f9ea 	bl	ab4 <Sys_GetCoreID>
    a6e0:	4603      	mov	r3, r0
    a6e2:	9301      	str	r3, [sp, #4]
    a6e4:	4a10      	ldr	r2, [pc, #64]	; (a728 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
    a6e6:	9b01      	ldr	r3, [sp, #4]
    a6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6ec:	2b00      	cmp	r3, #0
    a6ee:	d10d      	bne.n	a70c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    a6f0:	f7f6 f910 	bl	914 <Pwm_schm_read_msr>
    a6f4:	9000      	str	r0, [sp, #0]
    a6f6:	9b00      	ldr	r3, [sp, #0]
    a6f8:	f003 0301 	and.w	r3, r3, #1
    a6fc:	2b00      	cmp	r3, #0
    a6fe:	d100      	bne.n	a702 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
    a700:	b672      	cpsid	i
    a702:	490a      	ldr	r1, [pc, #40]	; (a72c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
    a704:	9b01      	ldr	r3, [sp, #4]
    a706:	9a00      	ldr	r2, [sp, #0]
    a708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a70c:	4a06      	ldr	r2, [pc, #24]	; (a728 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
    a70e:	9b01      	ldr	r3, [sp, #4]
    a710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a714:	1c5a      	adds	r2, r3, #1
    a716:	4904      	ldr	r1, [pc, #16]	; (a728 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
    a718:	9b01      	ldr	r3, [sp, #4]
    a71a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a71e:	bf00      	nop
    a720:	b003      	add	sp, #12
    a722:	f85d fb04 	ldr.w	pc, [sp], #4
    a726:	bf00      	nop
    a728:	1fff9240 	.word	0x1fff9240
    a72c:	1fff923c 	.word	0x1fff923c

0000a730 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:
    a730:	b500      	push	{lr}
    a732:	b083      	sub	sp, #12
    a734:	f7f6 f9be 	bl	ab4 <Sys_GetCoreID>
    a738:	4603      	mov	r3, r0
    a73a:	9301      	str	r3, [sp, #4]
    a73c:	4a0d      	ldr	r2, [pc, #52]	; (a774 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
    a73e:	9b01      	ldr	r3, [sp, #4]
    a740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a744:	1e5a      	subs	r2, r3, #1
    a746:	490b      	ldr	r1, [pc, #44]	; (a774 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
    a748:	9b01      	ldr	r3, [sp, #4]
    a74a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a74e:	4a0a      	ldr	r2, [pc, #40]	; (a778 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
    a750:	9b01      	ldr	r3, [sp, #4]
    a752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a756:	f003 0301 	and.w	r3, r3, #1
    a75a:	2b00      	cmp	r3, #0
    a75c:	d106      	bne.n	a76c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    a75e:	4a05      	ldr	r2, [pc, #20]	; (a774 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
    a760:	9b01      	ldr	r3, [sp, #4]
    a762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a766:	2b00      	cmp	r3, #0
    a768:	d100      	bne.n	a76c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    a76a:	b662      	cpsie	i
    a76c:	bf00      	nop
    a76e:	b003      	add	sp, #12
    a770:	f85d fb04 	ldr.w	pc, [sp], #4
    a774:	1fff9240 	.word	0x1fff9240
    a778:	1fff923c 	.word	0x1fff923c

0000a77c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:
    a77c:	b500      	push	{lr}
    a77e:	b083      	sub	sp, #12
    a780:	f7f6 f998 	bl	ab4 <Sys_GetCoreID>
    a784:	4603      	mov	r3, r0
    a786:	9301      	str	r3, [sp, #4]
    a788:	4a10      	ldr	r2, [pc, #64]	; (a7cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
    a78a:	9b01      	ldr	r3, [sp, #4]
    a78c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a790:	2b00      	cmp	r3, #0
    a792:	d10d      	bne.n	a7b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    a794:	f7f6 f8be 	bl	914 <Pwm_schm_read_msr>
    a798:	9000      	str	r0, [sp, #0]
    a79a:	9b00      	ldr	r3, [sp, #0]
    a79c:	f003 0301 	and.w	r3, r3, #1
    a7a0:	2b00      	cmp	r3, #0
    a7a2:	d100      	bne.n	a7a6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
    a7a4:	b672      	cpsid	i
    a7a6:	490a      	ldr	r1, [pc, #40]	; (a7d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
    a7a8:	9b01      	ldr	r3, [sp, #4]
    a7aa:	9a00      	ldr	r2, [sp, #0]
    a7ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a7b0:	4a06      	ldr	r2, [pc, #24]	; (a7cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
    a7b2:	9b01      	ldr	r3, [sp, #4]
    a7b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7b8:	1c5a      	adds	r2, r3, #1
    a7ba:	4904      	ldr	r1, [pc, #16]	; (a7cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
    a7bc:	9b01      	ldr	r3, [sp, #4]
    a7be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a7c2:	bf00      	nop
    a7c4:	b003      	add	sp, #12
    a7c6:	f85d fb04 	ldr.w	pc, [sp], #4
    a7ca:	bf00      	nop
    a7cc:	1fff9248 	.word	0x1fff9248
    a7d0:	1fff9244 	.word	0x1fff9244

0000a7d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:
    a7d4:	b500      	push	{lr}
    a7d6:	b083      	sub	sp, #12
    a7d8:	f7f6 f96c 	bl	ab4 <Sys_GetCoreID>
    a7dc:	4603      	mov	r3, r0
    a7de:	9301      	str	r3, [sp, #4]
    a7e0:	4a0d      	ldr	r2, [pc, #52]	; (a818 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
    a7e2:	9b01      	ldr	r3, [sp, #4]
    a7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7e8:	1e5a      	subs	r2, r3, #1
    a7ea:	490b      	ldr	r1, [pc, #44]	; (a818 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
    a7ec:	9b01      	ldr	r3, [sp, #4]
    a7ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a7f2:	4a0a      	ldr	r2, [pc, #40]	; (a81c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
    a7f4:	9b01      	ldr	r3, [sp, #4]
    a7f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7fa:	f003 0301 	and.w	r3, r3, #1
    a7fe:	2b00      	cmp	r3, #0
    a800:	d106      	bne.n	a810 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    a802:	4a05      	ldr	r2, [pc, #20]	; (a818 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
    a804:	9b01      	ldr	r3, [sp, #4]
    a806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a80a:	2b00      	cmp	r3, #0
    a80c:	d100      	bne.n	a810 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    a80e:	b662      	cpsie	i
    a810:	bf00      	nop
    a812:	b003      	add	sp, #12
    a814:	f85d fb04 	ldr.w	pc, [sp], #4
    a818:	1fff9248 	.word	0x1fff9248
    a81c:	1fff9244 	.word	0x1fff9244

0000a820 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:
    a820:	b500      	push	{lr}
    a822:	b083      	sub	sp, #12
    a824:	f7f6 f946 	bl	ab4 <Sys_GetCoreID>
    a828:	4603      	mov	r3, r0
    a82a:	9301      	str	r3, [sp, #4]
    a82c:	4a10      	ldr	r2, [pc, #64]	; (a870 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
    a82e:	9b01      	ldr	r3, [sp, #4]
    a830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a834:	2b00      	cmp	r3, #0
    a836:	d10d      	bne.n	a854 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    a838:	f7f6 f86c 	bl	914 <Pwm_schm_read_msr>
    a83c:	9000      	str	r0, [sp, #0]
    a83e:	9b00      	ldr	r3, [sp, #0]
    a840:	f003 0301 	and.w	r3, r3, #1
    a844:	2b00      	cmp	r3, #0
    a846:	d100      	bne.n	a84a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
    a848:	b672      	cpsid	i
    a84a:	490a      	ldr	r1, [pc, #40]	; (a874 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
    a84c:	9b01      	ldr	r3, [sp, #4]
    a84e:	9a00      	ldr	r2, [sp, #0]
    a850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a854:	4a06      	ldr	r2, [pc, #24]	; (a870 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
    a856:	9b01      	ldr	r3, [sp, #4]
    a858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a85c:	1c5a      	adds	r2, r3, #1
    a85e:	4904      	ldr	r1, [pc, #16]	; (a870 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
    a860:	9b01      	ldr	r3, [sp, #4]
    a862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a866:	bf00      	nop
    a868:	b003      	add	sp, #12
    a86a:	f85d fb04 	ldr.w	pc, [sp], #4
    a86e:	bf00      	nop
    a870:	1fff9250 	.word	0x1fff9250
    a874:	1fff924c 	.word	0x1fff924c

0000a878 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:
    a878:	b500      	push	{lr}
    a87a:	b083      	sub	sp, #12
    a87c:	f7f6 f91a 	bl	ab4 <Sys_GetCoreID>
    a880:	4603      	mov	r3, r0
    a882:	9301      	str	r3, [sp, #4]
    a884:	4a0d      	ldr	r2, [pc, #52]	; (a8bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
    a886:	9b01      	ldr	r3, [sp, #4]
    a888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a88c:	1e5a      	subs	r2, r3, #1
    a88e:	490b      	ldr	r1, [pc, #44]	; (a8bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
    a890:	9b01      	ldr	r3, [sp, #4]
    a892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a896:	4a0a      	ldr	r2, [pc, #40]	; (a8c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
    a898:	9b01      	ldr	r3, [sp, #4]
    a89a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a89e:	f003 0301 	and.w	r3, r3, #1
    a8a2:	2b00      	cmp	r3, #0
    a8a4:	d106      	bne.n	a8b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    a8a6:	4a05      	ldr	r2, [pc, #20]	; (a8bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
    a8a8:	9b01      	ldr	r3, [sp, #4]
    a8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	d100      	bne.n	a8b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    a8b2:	b662      	cpsie	i
    a8b4:	bf00      	nop
    a8b6:	b003      	add	sp, #12
    a8b8:	f85d fb04 	ldr.w	pc, [sp], #4
    a8bc:	1fff9250 	.word	0x1fff9250
    a8c0:	1fff924c 	.word	0x1fff924c

0000a8c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:
    a8c4:	b500      	push	{lr}
    a8c6:	b083      	sub	sp, #12
    a8c8:	f7f6 f8f4 	bl	ab4 <Sys_GetCoreID>
    a8cc:	4603      	mov	r3, r0
    a8ce:	9301      	str	r3, [sp, #4]
    a8d0:	4a10      	ldr	r2, [pc, #64]	; (a914 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
    a8d2:	9b01      	ldr	r3, [sp, #4]
    a8d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8d8:	2b00      	cmp	r3, #0
    a8da:	d10d      	bne.n	a8f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    a8dc:	f7f6 f81a 	bl	914 <Pwm_schm_read_msr>
    a8e0:	9000      	str	r0, [sp, #0]
    a8e2:	9b00      	ldr	r3, [sp, #0]
    a8e4:	f003 0301 	and.w	r3, r3, #1
    a8e8:	2b00      	cmp	r3, #0
    a8ea:	d100      	bne.n	a8ee <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
    a8ec:	b672      	cpsid	i
    a8ee:	490a      	ldr	r1, [pc, #40]	; (a918 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
    a8f0:	9b01      	ldr	r3, [sp, #4]
    a8f2:	9a00      	ldr	r2, [sp, #0]
    a8f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a8f8:	4a06      	ldr	r2, [pc, #24]	; (a914 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
    a8fa:	9b01      	ldr	r3, [sp, #4]
    a8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a900:	1c5a      	adds	r2, r3, #1
    a902:	4904      	ldr	r1, [pc, #16]	; (a914 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
    a904:	9b01      	ldr	r3, [sp, #4]
    a906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a90a:	bf00      	nop
    a90c:	b003      	add	sp, #12
    a90e:	f85d fb04 	ldr.w	pc, [sp], #4
    a912:	bf00      	nop
    a914:	1fff9258 	.word	0x1fff9258
    a918:	1fff9254 	.word	0x1fff9254

0000a91c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:
    a91c:	b500      	push	{lr}
    a91e:	b083      	sub	sp, #12
    a920:	f7f6 f8c8 	bl	ab4 <Sys_GetCoreID>
    a924:	4603      	mov	r3, r0
    a926:	9301      	str	r3, [sp, #4]
    a928:	4a0d      	ldr	r2, [pc, #52]	; (a960 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
    a92a:	9b01      	ldr	r3, [sp, #4]
    a92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a930:	1e5a      	subs	r2, r3, #1
    a932:	490b      	ldr	r1, [pc, #44]	; (a960 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
    a934:	9b01      	ldr	r3, [sp, #4]
    a936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a93a:	4a0a      	ldr	r2, [pc, #40]	; (a964 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
    a93c:	9b01      	ldr	r3, [sp, #4]
    a93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a942:	f003 0301 	and.w	r3, r3, #1
    a946:	2b00      	cmp	r3, #0
    a948:	d106      	bne.n	a958 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    a94a:	4a05      	ldr	r2, [pc, #20]	; (a960 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
    a94c:	9b01      	ldr	r3, [sp, #4]
    a94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a952:	2b00      	cmp	r3, #0
    a954:	d100      	bne.n	a958 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    a956:	b662      	cpsie	i
    a958:	bf00      	nop
    a95a:	b003      	add	sp, #12
    a95c:	f85d fb04 	ldr.w	pc, [sp], #4
    a960:	1fff9258 	.word	0x1fff9258
    a964:	1fff9254 	.word	0x1fff9254

0000a968 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:
    a968:	b500      	push	{lr}
    a96a:	b083      	sub	sp, #12
    a96c:	f7f6 f8a2 	bl	ab4 <Sys_GetCoreID>
    a970:	4603      	mov	r3, r0
    a972:	9301      	str	r3, [sp, #4]
    a974:	4a10      	ldr	r2, [pc, #64]	; (a9b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
    a976:	9b01      	ldr	r3, [sp, #4]
    a978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a97c:	2b00      	cmp	r3, #0
    a97e:	d10d      	bne.n	a99c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    a980:	f7f5 ffc8 	bl	914 <Pwm_schm_read_msr>
    a984:	9000      	str	r0, [sp, #0]
    a986:	9b00      	ldr	r3, [sp, #0]
    a988:	f003 0301 	and.w	r3, r3, #1
    a98c:	2b00      	cmp	r3, #0
    a98e:	d100      	bne.n	a992 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
    a990:	b672      	cpsid	i
    a992:	490a      	ldr	r1, [pc, #40]	; (a9bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
    a994:	9b01      	ldr	r3, [sp, #4]
    a996:	9a00      	ldr	r2, [sp, #0]
    a998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a99c:	4a06      	ldr	r2, [pc, #24]	; (a9b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
    a99e:	9b01      	ldr	r3, [sp, #4]
    a9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9a4:	1c5a      	adds	r2, r3, #1
    a9a6:	4904      	ldr	r1, [pc, #16]	; (a9b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
    a9a8:	9b01      	ldr	r3, [sp, #4]
    a9aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a9ae:	bf00      	nop
    a9b0:	b003      	add	sp, #12
    a9b2:	f85d fb04 	ldr.w	pc, [sp], #4
    a9b6:	bf00      	nop
    a9b8:	1fff9260 	.word	0x1fff9260
    a9bc:	1fff925c 	.word	0x1fff925c

0000a9c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:
    a9c0:	b500      	push	{lr}
    a9c2:	b083      	sub	sp, #12
    a9c4:	f7f6 f876 	bl	ab4 <Sys_GetCoreID>
    a9c8:	4603      	mov	r3, r0
    a9ca:	9301      	str	r3, [sp, #4]
    a9cc:	4a0d      	ldr	r2, [pc, #52]	; (aa04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
    a9ce:	9b01      	ldr	r3, [sp, #4]
    a9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9d4:	1e5a      	subs	r2, r3, #1
    a9d6:	490b      	ldr	r1, [pc, #44]	; (aa04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
    a9d8:	9b01      	ldr	r3, [sp, #4]
    a9da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a9de:	4a0a      	ldr	r2, [pc, #40]	; (aa08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
    a9e0:	9b01      	ldr	r3, [sp, #4]
    a9e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9e6:	f003 0301 	and.w	r3, r3, #1
    a9ea:	2b00      	cmp	r3, #0
    a9ec:	d106      	bne.n	a9fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    a9ee:	4a05      	ldr	r2, [pc, #20]	; (aa04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
    a9f0:	9b01      	ldr	r3, [sp, #4]
    a9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9f6:	2b00      	cmp	r3, #0
    a9f8:	d100      	bne.n	a9fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    a9fa:	b662      	cpsie	i
    a9fc:	bf00      	nop
    a9fe:	b003      	add	sp, #12
    aa00:	f85d fb04 	ldr.w	pc, [sp], #4
    aa04:	1fff9260 	.word	0x1fff9260
    aa08:	1fff925c 	.word	0x1fff925c

0000aa0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:
    aa0c:	b500      	push	{lr}
    aa0e:	b083      	sub	sp, #12
    aa10:	f7f6 f850 	bl	ab4 <Sys_GetCoreID>
    aa14:	4603      	mov	r3, r0
    aa16:	9301      	str	r3, [sp, #4]
    aa18:	4a10      	ldr	r2, [pc, #64]	; (aa5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
    aa1a:	9b01      	ldr	r3, [sp, #4]
    aa1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa20:	2b00      	cmp	r3, #0
    aa22:	d10d      	bne.n	aa40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    aa24:	f7f5 ff76 	bl	914 <Pwm_schm_read_msr>
    aa28:	9000      	str	r0, [sp, #0]
    aa2a:	9b00      	ldr	r3, [sp, #0]
    aa2c:	f003 0301 	and.w	r3, r3, #1
    aa30:	2b00      	cmp	r3, #0
    aa32:	d100      	bne.n	aa36 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
    aa34:	b672      	cpsid	i
    aa36:	490a      	ldr	r1, [pc, #40]	; (aa60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
    aa38:	9b01      	ldr	r3, [sp, #4]
    aa3a:	9a00      	ldr	r2, [sp, #0]
    aa3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aa40:	4a06      	ldr	r2, [pc, #24]	; (aa5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
    aa42:	9b01      	ldr	r3, [sp, #4]
    aa44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa48:	1c5a      	adds	r2, r3, #1
    aa4a:	4904      	ldr	r1, [pc, #16]	; (aa5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
    aa4c:	9b01      	ldr	r3, [sp, #4]
    aa4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aa52:	bf00      	nop
    aa54:	b003      	add	sp, #12
    aa56:	f85d fb04 	ldr.w	pc, [sp], #4
    aa5a:	bf00      	nop
    aa5c:	1fff9268 	.word	0x1fff9268
    aa60:	1fff9264 	.word	0x1fff9264

0000aa64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:
    aa64:	b500      	push	{lr}
    aa66:	b083      	sub	sp, #12
    aa68:	f7f6 f824 	bl	ab4 <Sys_GetCoreID>
    aa6c:	4603      	mov	r3, r0
    aa6e:	9301      	str	r3, [sp, #4]
    aa70:	4a0d      	ldr	r2, [pc, #52]	; (aaa8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
    aa72:	9b01      	ldr	r3, [sp, #4]
    aa74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa78:	1e5a      	subs	r2, r3, #1
    aa7a:	490b      	ldr	r1, [pc, #44]	; (aaa8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
    aa7c:	9b01      	ldr	r3, [sp, #4]
    aa7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aa82:	4a0a      	ldr	r2, [pc, #40]	; (aaac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
    aa84:	9b01      	ldr	r3, [sp, #4]
    aa86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa8a:	f003 0301 	and.w	r3, r3, #1
    aa8e:	2b00      	cmp	r3, #0
    aa90:	d106      	bne.n	aaa0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    aa92:	4a05      	ldr	r2, [pc, #20]	; (aaa8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
    aa94:	9b01      	ldr	r3, [sp, #4]
    aa96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa9a:	2b00      	cmp	r3, #0
    aa9c:	d100      	bne.n	aaa0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    aa9e:	b662      	cpsie	i
    aaa0:	bf00      	nop
    aaa2:	b003      	add	sp, #12
    aaa4:	f85d fb04 	ldr.w	pc, [sp], #4
    aaa8:	1fff9268 	.word	0x1fff9268
    aaac:	1fff9264 	.word	0x1fff9264

0000aab0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:
    aab0:	b500      	push	{lr}
    aab2:	b083      	sub	sp, #12
    aab4:	f7f5 fffe 	bl	ab4 <Sys_GetCoreID>
    aab8:	4603      	mov	r3, r0
    aaba:	9301      	str	r3, [sp, #4]
    aabc:	4a10      	ldr	r2, [pc, #64]	; (ab00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
    aabe:	9b01      	ldr	r3, [sp, #4]
    aac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aac4:	2b00      	cmp	r3, #0
    aac6:	d10d      	bne.n	aae4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    aac8:	f7f5 ff24 	bl	914 <Pwm_schm_read_msr>
    aacc:	9000      	str	r0, [sp, #0]
    aace:	9b00      	ldr	r3, [sp, #0]
    aad0:	f003 0301 	and.w	r3, r3, #1
    aad4:	2b00      	cmp	r3, #0
    aad6:	d100      	bne.n	aada <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
    aad8:	b672      	cpsid	i
    aada:	490a      	ldr	r1, [pc, #40]	; (ab04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
    aadc:	9b01      	ldr	r3, [sp, #4]
    aade:	9a00      	ldr	r2, [sp, #0]
    aae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aae4:	4a06      	ldr	r2, [pc, #24]	; (ab00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
    aae6:	9b01      	ldr	r3, [sp, #4]
    aae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaec:	1c5a      	adds	r2, r3, #1
    aaee:	4904      	ldr	r1, [pc, #16]	; (ab00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
    aaf0:	9b01      	ldr	r3, [sp, #4]
    aaf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aaf6:	bf00      	nop
    aaf8:	b003      	add	sp, #12
    aafa:	f85d fb04 	ldr.w	pc, [sp], #4
    aafe:	bf00      	nop
    ab00:	1fff9270 	.word	0x1fff9270
    ab04:	1fff926c 	.word	0x1fff926c

0000ab08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:
    ab08:	b500      	push	{lr}
    ab0a:	b083      	sub	sp, #12
    ab0c:	f7f5 ffd2 	bl	ab4 <Sys_GetCoreID>
    ab10:	4603      	mov	r3, r0
    ab12:	9301      	str	r3, [sp, #4]
    ab14:	4a0d      	ldr	r2, [pc, #52]	; (ab4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
    ab16:	9b01      	ldr	r3, [sp, #4]
    ab18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab1c:	1e5a      	subs	r2, r3, #1
    ab1e:	490b      	ldr	r1, [pc, #44]	; (ab4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
    ab20:	9b01      	ldr	r3, [sp, #4]
    ab22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ab26:	4a0a      	ldr	r2, [pc, #40]	; (ab50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
    ab28:	9b01      	ldr	r3, [sp, #4]
    ab2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab2e:	f003 0301 	and.w	r3, r3, #1
    ab32:	2b00      	cmp	r3, #0
    ab34:	d106      	bne.n	ab44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    ab36:	4a05      	ldr	r2, [pc, #20]	; (ab4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
    ab38:	9b01      	ldr	r3, [sp, #4]
    ab3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab3e:	2b00      	cmp	r3, #0
    ab40:	d100      	bne.n	ab44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    ab42:	b662      	cpsie	i
    ab44:	bf00      	nop
    ab46:	b003      	add	sp, #12
    ab48:	f85d fb04 	ldr.w	pc, [sp], #4
    ab4c:	1fff9270 	.word	0x1fff9270
    ab50:	1fff926c 	.word	0x1fff926c

0000ab54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:
    ab54:	b500      	push	{lr}
    ab56:	b083      	sub	sp, #12
    ab58:	f7f5 ffac 	bl	ab4 <Sys_GetCoreID>
    ab5c:	4603      	mov	r3, r0
    ab5e:	9301      	str	r3, [sp, #4]
    ab60:	4a10      	ldr	r2, [pc, #64]	; (aba4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
    ab62:	9b01      	ldr	r3, [sp, #4]
    ab64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab68:	2b00      	cmp	r3, #0
    ab6a:	d10d      	bne.n	ab88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    ab6c:	f7f5 fed2 	bl	914 <Pwm_schm_read_msr>
    ab70:	9000      	str	r0, [sp, #0]
    ab72:	9b00      	ldr	r3, [sp, #0]
    ab74:	f003 0301 	and.w	r3, r3, #1
    ab78:	2b00      	cmp	r3, #0
    ab7a:	d100      	bne.n	ab7e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
    ab7c:	b672      	cpsid	i
    ab7e:	490a      	ldr	r1, [pc, #40]	; (aba8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
    ab80:	9b01      	ldr	r3, [sp, #4]
    ab82:	9a00      	ldr	r2, [sp, #0]
    ab84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ab88:	4a06      	ldr	r2, [pc, #24]	; (aba4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
    ab8a:	9b01      	ldr	r3, [sp, #4]
    ab8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab90:	1c5a      	adds	r2, r3, #1
    ab92:	4904      	ldr	r1, [pc, #16]	; (aba4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
    ab94:	9b01      	ldr	r3, [sp, #4]
    ab96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ab9a:	bf00      	nop
    ab9c:	b003      	add	sp, #12
    ab9e:	f85d fb04 	ldr.w	pc, [sp], #4
    aba2:	bf00      	nop
    aba4:	1fff9278 	.word	0x1fff9278
    aba8:	1fff9274 	.word	0x1fff9274

0000abac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:
    abac:	b500      	push	{lr}
    abae:	b083      	sub	sp, #12
    abb0:	f7f5 ff80 	bl	ab4 <Sys_GetCoreID>
    abb4:	4603      	mov	r3, r0
    abb6:	9301      	str	r3, [sp, #4]
    abb8:	4a0d      	ldr	r2, [pc, #52]	; (abf0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
    abba:	9b01      	ldr	r3, [sp, #4]
    abbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abc0:	1e5a      	subs	r2, r3, #1
    abc2:	490b      	ldr	r1, [pc, #44]	; (abf0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
    abc4:	9b01      	ldr	r3, [sp, #4]
    abc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    abca:	4a0a      	ldr	r2, [pc, #40]	; (abf4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
    abcc:	9b01      	ldr	r3, [sp, #4]
    abce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abd2:	f003 0301 	and.w	r3, r3, #1
    abd6:	2b00      	cmp	r3, #0
    abd8:	d106      	bne.n	abe8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    abda:	4a05      	ldr	r2, [pc, #20]	; (abf0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
    abdc:	9b01      	ldr	r3, [sp, #4]
    abde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abe2:	2b00      	cmp	r3, #0
    abe4:	d100      	bne.n	abe8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    abe6:	b662      	cpsie	i
    abe8:	bf00      	nop
    abea:	b003      	add	sp, #12
    abec:	f85d fb04 	ldr.w	pc, [sp], #4
    abf0:	1fff9278 	.word	0x1fff9278
    abf4:	1fff9274 	.word	0x1fff9274

0000abf8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:
    abf8:	b500      	push	{lr}
    abfa:	b083      	sub	sp, #12
    abfc:	f7f5 ff5a 	bl	ab4 <Sys_GetCoreID>
    ac00:	4603      	mov	r3, r0
    ac02:	9301      	str	r3, [sp, #4]
    ac04:	4a10      	ldr	r2, [pc, #64]	; (ac48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
    ac06:	9b01      	ldr	r3, [sp, #4]
    ac08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac0c:	2b00      	cmp	r3, #0
    ac0e:	d10d      	bne.n	ac2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    ac10:	f7f5 fe80 	bl	914 <Pwm_schm_read_msr>
    ac14:	9000      	str	r0, [sp, #0]
    ac16:	9b00      	ldr	r3, [sp, #0]
    ac18:	f003 0301 	and.w	r3, r3, #1
    ac1c:	2b00      	cmp	r3, #0
    ac1e:	d100      	bne.n	ac22 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
    ac20:	b672      	cpsid	i
    ac22:	490a      	ldr	r1, [pc, #40]	; (ac4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
    ac24:	9b01      	ldr	r3, [sp, #4]
    ac26:	9a00      	ldr	r2, [sp, #0]
    ac28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ac2c:	4a06      	ldr	r2, [pc, #24]	; (ac48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
    ac2e:	9b01      	ldr	r3, [sp, #4]
    ac30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac34:	1c5a      	adds	r2, r3, #1
    ac36:	4904      	ldr	r1, [pc, #16]	; (ac48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
    ac38:	9b01      	ldr	r3, [sp, #4]
    ac3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ac3e:	bf00      	nop
    ac40:	b003      	add	sp, #12
    ac42:	f85d fb04 	ldr.w	pc, [sp], #4
    ac46:	bf00      	nop
    ac48:	1fff9280 	.word	0x1fff9280
    ac4c:	1fff927c 	.word	0x1fff927c

0000ac50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:
    ac50:	b500      	push	{lr}
    ac52:	b083      	sub	sp, #12
    ac54:	f7f5 ff2e 	bl	ab4 <Sys_GetCoreID>
    ac58:	4603      	mov	r3, r0
    ac5a:	9301      	str	r3, [sp, #4]
    ac5c:	4a0d      	ldr	r2, [pc, #52]	; (ac94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
    ac5e:	9b01      	ldr	r3, [sp, #4]
    ac60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac64:	1e5a      	subs	r2, r3, #1
    ac66:	490b      	ldr	r1, [pc, #44]	; (ac94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
    ac68:	9b01      	ldr	r3, [sp, #4]
    ac6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ac6e:	4a0a      	ldr	r2, [pc, #40]	; (ac98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
    ac70:	9b01      	ldr	r3, [sp, #4]
    ac72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac76:	f003 0301 	and.w	r3, r3, #1
    ac7a:	2b00      	cmp	r3, #0
    ac7c:	d106      	bne.n	ac8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    ac7e:	4a05      	ldr	r2, [pc, #20]	; (ac94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
    ac80:	9b01      	ldr	r3, [sp, #4]
    ac82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac86:	2b00      	cmp	r3, #0
    ac88:	d100      	bne.n	ac8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    ac8a:	b662      	cpsie	i
    ac8c:	bf00      	nop
    ac8e:	b003      	add	sp, #12
    ac90:	f85d fb04 	ldr.w	pc, [sp], #4
    ac94:	1fff9280 	.word	0x1fff9280
    ac98:	1fff927c 	.word	0x1fff927c

0000ac9c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:
    ac9c:	b500      	push	{lr}
    ac9e:	b083      	sub	sp, #12
    aca0:	f7f5 ff08 	bl	ab4 <Sys_GetCoreID>
    aca4:	4603      	mov	r3, r0
    aca6:	9301      	str	r3, [sp, #4]
    aca8:	4a10      	ldr	r2, [pc, #64]	; (acec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
    acaa:	9b01      	ldr	r3, [sp, #4]
    acac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acb0:	2b00      	cmp	r3, #0
    acb2:	d10d      	bne.n	acd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    acb4:	f7f5 fe2e 	bl	914 <Pwm_schm_read_msr>
    acb8:	9000      	str	r0, [sp, #0]
    acba:	9b00      	ldr	r3, [sp, #0]
    acbc:	f003 0301 	and.w	r3, r3, #1
    acc0:	2b00      	cmp	r3, #0
    acc2:	d100      	bne.n	acc6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
    acc4:	b672      	cpsid	i
    acc6:	490a      	ldr	r1, [pc, #40]	; (acf0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
    acc8:	9b01      	ldr	r3, [sp, #4]
    acca:	9a00      	ldr	r2, [sp, #0]
    accc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    acd0:	4a06      	ldr	r2, [pc, #24]	; (acec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
    acd2:	9b01      	ldr	r3, [sp, #4]
    acd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acd8:	1c5a      	adds	r2, r3, #1
    acda:	4904      	ldr	r1, [pc, #16]	; (acec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
    acdc:	9b01      	ldr	r3, [sp, #4]
    acde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ace2:	bf00      	nop
    ace4:	b003      	add	sp, #12
    ace6:	f85d fb04 	ldr.w	pc, [sp], #4
    acea:	bf00      	nop
    acec:	1fff9288 	.word	0x1fff9288
    acf0:	1fff9284 	.word	0x1fff9284

0000acf4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:
    acf4:	b500      	push	{lr}
    acf6:	b083      	sub	sp, #12
    acf8:	f7f5 fedc 	bl	ab4 <Sys_GetCoreID>
    acfc:	4603      	mov	r3, r0
    acfe:	9301      	str	r3, [sp, #4]
    ad00:	4a0d      	ldr	r2, [pc, #52]	; (ad38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
    ad02:	9b01      	ldr	r3, [sp, #4]
    ad04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad08:	1e5a      	subs	r2, r3, #1
    ad0a:	490b      	ldr	r1, [pc, #44]	; (ad38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
    ad0c:	9b01      	ldr	r3, [sp, #4]
    ad0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ad12:	4a0a      	ldr	r2, [pc, #40]	; (ad3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
    ad14:	9b01      	ldr	r3, [sp, #4]
    ad16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad1a:	f003 0301 	and.w	r3, r3, #1
    ad1e:	2b00      	cmp	r3, #0
    ad20:	d106      	bne.n	ad30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    ad22:	4a05      	ldr	r2, [pc, #20]	; (ad38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
    ad24:	9b01      	ldr	r3, [sp, #4]
    ad26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad2a:	2b00      	cmp	r3, #0
    ad2c:	d100      	bne.n	ad30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    ad2e:	b662      	cpsie	i
    ad30:	bf00      	nop
    ad32:	b003      	add	sp, #12
    ad34:	f85d fb04 	ldr.w	pc, [sp], #4
    ad38:	1fff9288 	.word	0x1fff9288
    ad3c:	1fff9284 	.word	0x1fff9284

0000ad40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:
    ad40:	b500      	push	{lr}
    ad42:	b083      	sub	sp, #12
    ad44:	f7f5 feb6 	bl	ab4 <Sys_GetCoreID>
    ad48:	4603      	mov	r3, r0
    ad4a:	9301      	str	r3, [sp, #4]
    ad4c:	4a10      	ldr	r2, [pc, #64]	; (ad90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
    ad4e:	9b01      	ldr	r3, [sp, #4]
    ad50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad54:	2b00      	cmp	r3, #0
    ad56:	d10d      	bne.n	ad74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    ad58:	f7f5 fddc 	bl	914 <Pwm_schm_read_msr>
    ad5c:	9000      	str	r0, [sp, #0]
    ad5e:	9b00      	ldr	r3, [sp, #0]
    ad60:	f003 0301 	and.w	r3, r3, #1
    ad64:	2b00      	cmp	r3, #0
    ad66:	d100      	bne.n	ad6a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
    ad68:	b672      	cpsid	i
    ad6a:	490a      	ldr	r1, [pc, #40]	; (ad94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
    ad6c:	9b01      	ldr	r3, [sp, #4]
    ad6e:	9a00      	ldr	r2, [sp, #0]
    ad70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ad74:	4a06      	ldr	r2, [pc, #24]	; (ad90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
    ad76:	9b01      	ldr	r3, [sp, #4]
    ad78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad7c:	1c5a      	adds	r2, r3, #1
    ad7e:	4904      	ldr	r1, [pc, #16]	; (ad90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
    ad80:	9b01      	ldr	r3, [sp, #4]
    ad82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ad86:	bf00      	nop
    ad88:	b003      	add	sp, #12
    ad8a:	f85d fb04 	ldr.w	pc, [sp], #4
    ad8e:	bf00      	nop
    ad90:	1fff9290 	.word	0x1fff9290
    ad94:	1fff928c 	.word	0x1fff928c

0000ad98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:
    ad98:	b500      	push	{lr}
    ad9a:	b083      	sub	sp, #12
    ad9c:	f7f5 fe8a 	bl	ab4 <Sys_GetCoreID>
    ada0:	4603      	mov	r3, r0
    ada2:	9301      	str	r3, [sp, #4]
    ada4:	4a0d      	ldr	r2, [pc, #52]	; (addc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
    ada6:	9b01      	ldr	r3, [sp, #4]
    ada8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adac:	1e5a      	subs	r2, r3, #1
    adae:	490b      	ldr	r1, [pc, #44]	; (addc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
    adb0:	9b01      	ldr	r3, [sp, #4]
    adb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    adb6:	4a0a      	ldr	r2, [pc, #40]	; (ade0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
    adb8:	9b01      	ldr	r3, [sp, #4]
    adba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adbe:	f003 0301 	and.w	r3, r3, #1
    adc2:	2b00      	cmp	r3, #0
    adc4:	d106      	bne.n	add4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    adc6:	4a05      	ldr	r2, [pc, #20]	; (addc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
    adc8:	9b01      	ldr	r3, [sp, #4]
    adca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adce:	2b00      	cmp	r3, #0
    add0:	d100      	bne.n	add4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    add2:	b662      	cpsie	i
    add4:	bf00      	nop
    add6:	b003      	add	sp, #12
    add8:	f85d fb04 	ldr.w	pc, [sp], #4
    addc:	1fff9290 	.word	0x1fff9290
    ade0:	1fff928c 	.word	0x1fff928c

0000ade4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:
    ade4:	b500      	push	{lr}
    ade6:	b083      	sub	sp, #12
    ade8:	f7f5 fe64 	bl	ab4 <Sys_GetCoreID>
    adec:	4603      	mov	r3, r0
    adee:	9301      	str	r3, [sp, #4]
    adf0:	4a10      	ldr	r2, [pc, #64]	; (ae34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
    adf2:	9b01      	ldr	r3, [sp, #4]
    adf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adf8:	2b00      	cmp	r3, #0
    adfa:	d10d      	bne.n	ae18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    adfc:	f7f5 fd8a 	bl	914 <Pwm_schm_read_msr>
    ae00:	9000      	str	r0, [sp, #0]
    ae02:	9b00      	ldr	r3, [sp, #0]
    ae04:	f003 0301 	and.w	r3, r3, #1
    ae08:	2b00      	cmp	r3, #0
    ae0a:	d100      	bne.n	ae0e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
    ae0c:	b672      	cpsid	i
    ae0e:	490a      	ldr	r1, [pc, #40]	; (ae38 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
    ae10:	9b01      	ldr	r3, [sp, #4]
    ae12:	9a00      	ldr	r2, [sp, #0]
    ae14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ae18:	4a06      	ldr	r2, [pc, #24]	; (ae34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
    ae1a:	9b01      	ldr	r3, [sp, #4]
    ae1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae20:	1c5a      	adds	r2, r3, #1
    ae22:	4904      	ldr	r1, [pc, #16]	; (ae34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
    ae24:	9b01      	ldr	r3, [sp, #4]
    ae26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ae2a:	bf00      	nop
    ae2c:	b003      	add	sp, #12
    ae2e:	f85d fb04 	ldr.w	pc, [sp], #4
    ae32:	bf00      	nop
    ae34:	1fff9298 	.word	0x1fff9298
    ae38:	1fff9294 	.word	0x1fff9294

0000ae3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:
    ae3c:	b500      	push	{lr}
    ae3e:	b083      	sub	sp, #12
    ae40:	f7f5 fe38 	bl	ab4 <Sys_GetCoreID>
    ae44:	4603      	mov	r3, r0
    ae46:	9301      	str	r3, [sp, #4]
    ae48:	4a0d      	ldr	r2, [pc, #52]	; (ae80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
    ae4a:	9b01      	ldr	r3, [sp, #4]
    ae4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae50:	1e5a      	subs	r2, r3, #1
    ae52:	490b      	ldr	r1, [pc, #44]	; (ae80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
    ae54:	9b01      	ldr	r3, [sp, #4]
    ae56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ae5a:	4a0a      	ldr	r2, [pc, #40]	; (ae84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
    ae5c:	9b01      	ldr	r3, [sp, #4]
    ae5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae62:	f003 0301 	and.w	r3, r3, #1
    ae66:	2b00      	cmp	r3, #0
    ae68:	d106      	bne.n	ae78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    ae6a:	4a05      	ldr	r2, [pc, #20]	; (ae80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
    ae6c:	9b01      	ldr	r3, [sp, #4]
    ae6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae72:	2b00      	cmp	r3, #0
    ae74:	d100      	bne.n	ae78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    ae76:	b662      	cpsie	i
    ae78:	bf00      	nop
    ae7a:	b003      	add	sp, #12
    ae7c:	f85d fb04 	ldr.w	pc, [sp], #4
    ae80:	1fff9298 	.word	0x1fff9298
    ae84:	1fff9294 	.word	0x1fff9294

0000ae88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:
    ae88:	b500      	push	{lr}
    ae8a:	b083      	sub	sp, #12
    ae8c:	f7f5 fe12 	bl	ab4 <Sys_GetCoreID>
    ae90:	4603      	mov	r3, r0
    ae92:	9301      	str	r3, [sp, #4]
    ae94:	4a10      	ldr	r2, [pc, #64]	; (aed8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
    ae96:	9b01      	ldr	r3, [sp, #4]
    ae98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae9c:	2b00      	cmp	r3, #0
    ae9e:	d10d      	bne.n	aebc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    aea0:	f7f5 fd38 	bl	914 <Pwm_schm_read_msr>
    aea4:	9000      	str	r0, [sp, #0]
    aea6:	9b00      	ldr	r3, [sp, #0]
    aea8:	f003 0301 	and.w	r3, r3, #1
    aeac:	2b00      	cmp	r3, #0
    aeae:	d100      	bne.n	aeb2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
    aeb0:	b672      	cpsid	i
    aeb2:	490a      	ldr	r1, [pc, #40]	; (aedc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
    aeb4:	9b01      	ldr	r3, [sp, #4]
    aeb6:	9a00      	ldr	r2, [sp, #0]
    aeb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aebc:	4a06      	ldr	r2, [pc, #24]	; (aed8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
    aebe:	9b01      	ldr	r3, [sp, #4]
    aec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aec4:	1c5a      	adds	r2, r3, #1
    aec6:	4904      	ldr	r1, [pc, #16]	; (aed8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
    aec8:	9b01      	ldr	r3, [sp, #4]
    aeca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aece:	bf00      	nop
    aed0:	b003      	add	sp, #12
    aed2:	f85d fb04 	ldr.w	pc, [sp], #4
    aed6:	bf00      	nop
    aed8:	1fff92a0 	.word	0x1fff92a0
    aedc:	1fff929c 	.word	0x1fff929c

0000aee0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:
    aee0:	b500      	push	{lr}
    aee2:	b083      	sub	sp, #12
    aee4:	f7f5 fde6 	bl	ab4 <Sys_GetCoreID>
    aee8:	4603      	mov	r3, r0
    aeea:	9301      	str	r3, [sp, #4]
    aeec:	4a0d      	ldr	r2, [pc, #52]	; (af24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
    aeee:	9b01      	ldr	r3, [sp, #4]
    aef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aef4:	1e5a      	subs	r2, r3, #1
    aef6:	490b      	ldr	r1, [pc, #44]	; (af24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
    aef8:	9b01      	ldr	r3, [sp, #4]
    aefa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aefe:	4a0a      	ldr	r2, [pc, #40]	; (af28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
    af00:	9b01      	ldr	r3, [sp, #4]
    af02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af06:	f003 0301 	and.w	r3, r3, #1
    af0a:	2b00      	cmp	r3, #0
    af0c:	d106      	bne.n	af1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    af0e:	4a05      	ldr	r2, [pc, #20]	; (af24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
    af10:	9b01      	ldr	r3, [sp, #4]
    af12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af16:	2b00      	cmp	r3, #0
    af18:	d100      	bne.n	af1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    af1a:	b662      	cpsie	i
    af1c:	bf00      	nop
    af1e:	b003      	add	sp, #12
    af20:	f85d fb04 	ldr.w	pc, [sp], #4
    af24:	1fff92a0 	.word	0x1fff92a0
    af28:	1fff929c 	.word	0x1fff929c

0000af2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:
    af2c:	b500      	push	{lr}
    af2e:	b083      	sub	sp, #12
    af30:	f7f5 fdc0 	bl	ab4 <Sys_GetCoreID>
    af34:	4603      	mov	r3, r0
    af36:	9301      	str	r3, [sp, #4]
    af38:	4a10      	ldr	r2, [pc, #64]	; (af7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
    af3a:	9b01      	ldr	r3, [sp, #4]
    af3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af40:	2b00      	cmp	r3, #0
    af42:	d10d      	bne.n	af60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    af44:	f7f5 fce6 	bl	914 <Pwm_schm_read_msr>
    af48:	9000      	str	r0, [sp, #0]
    af4a:	9b00      	ldr	r3, [sp, #0]
    af4c:	f003 0301 	and.w	r3, r3, #1
    af50:	2b00      	cmp	r3, #0
    af52:	d100      	bne.n	af56 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
    af54:	b672      	cpsid	i
    af56:	490a      	ldr	r1, [pc, #40]	; (af80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
    af58:	9b01      	ldr	r3, [sp, #4]
    af5a:	9a00      	ldr	r2, [sp, #0]
    af5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    af60:	4a06      	ldr	r2, [pc, #24]	; (af7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
    af62:	9b01      	ldr	r3, [sp, #4]
    af64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af68:	1c5a      	adds	r2, r3, #1
    af6a:	4904      	ldr	r1, [pc, #16]	; (af7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
    af6c:	9b01      	ldr	r3, [sp, #4]
    af6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    af72:	bf00      	nop
    af74:	b003      	add	sp, #12
    af76:	f85d fb04 	ldr.w	pc, [sp], #4
    af7a:	bf00      	nop
    af7c:	1fff92a8 	.word	0x1fff92a8
    af80:	1fff92a4 	.word	0x1fff92a4

0000af84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:
    af84:	b500      	push	{lr}
    af86:	b083      	sub	sp, #12
    af88:	f7f5 fd94 	bl	ab4 <Sys_GetCoreID>
    af8c:	4603      	mov	r3, r0
    af8e:	9301      	str	r3, [sp, #4]
    af90:	4a0d      	ldr	r2, [pc, #52]	; (afc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
    af92:	9b01      	ldr	r3, [sp, #4]
    af94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af98:	1e5a      	subs	r2, r3, #1
    af9a:	490b      	ldr	r1, [pc, #44]	; (afc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
    af9c:	9b01      	ldr	r3, [sp, #4]
    af9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    afa2:	4a0a      	ldr	r2, [pc, #40]	; (afcc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
    afa4:	9b01      	ldr	r3, [sp, #4]
    afa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afaa:	f003 0301 	and.w	r3, r3, #1
    afae:	2b00      	cmp	r3, #0
    afb0:	d106      	bne.n	afc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    afb2:	4a05      	ldr	r2, [pc, #20]	; (afc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
    afb4:	9b01      	ldr	r3, [sp, #4]
    afb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afba:	2b00      	cmp	r3, #0
    afbc:	d100      	bne.n	afc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    afbe:	b662      	cpsie	i
    afc0:	bf00      	nop
    afc2:	b003      	add	sp, #12
    afc4:	f85d fb04 	ldr.w	pc, [sp], #4
    afc8:	1fff92a8 	.word	0x1fff92a8
    afcc:	1fff92a4 	.word	0x1fff92a4

0000afd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:
    afd0:	b500      	push	{lr}
    afd2:	b083      	sub	sp, #12
    afd4:	f7f5 fd6e 	bl	ab4 <Sys_GetCoreID>
    afd8:	4603      	mov	r3, r0
    afda:	9301      	str	r3, [sp, #4]
    afdc:	4a10      	ldr	r2, [pc, #64]	; (b020 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
    afde:	9b01      	ldr	r3, [sp, #4]
    afe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afe4:	2b00      	cmp	r3, #0
    afe6:	d10d      	bne.n	b004 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    afe8:	f7f5 fc94 	bl	914 <Pwm_schm_read_msr>
    afec:	9000      	str	r0, [sp, #0]
    afee:	9b00      	ldr	r3, [sp, #0]
    aff0:	f003 0301 	and.w	r3, r3, #1
    aff4:	2b00      	cmp	r3, #0
    aff6:	d100      	bne.n	affa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
    aff8:	b672      	cpsid	i
    affa:	490a      	ldr	r1, [pc, #40]	; (b024 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
    affc:	9b01      	ldr	r3, [sp, #4]
    affe:	9a00      	ldr	r2, [sp, #0]
    b000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b004:	4a06      	ldr	r2, [pc, #24]	; (b020 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
    b006:	9b01      	ldr	r3, [sp, #4]
    b008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b00c:	1c5a      	adds	r2, r3, #1
    b00e:	4904      	ldr	r1, [pc, #16]	; (b020 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
    b010:	9b01      	ldr	r3, [sp, #4]
    b012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b016:	bf00      	nop
    b018:	b003      	add	sp, #12
    b01a:	f85d fb04 	ldr.w	pc, [sp], #4
    b01e:	bf00      	nop
    b020:	1fff92b0 	.word	0x1fff92b0
    b024:	1fff92ac 	.word	0x1fff92ac

0000b028 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:
    b028:	b500      	push	{lr}
    b02a:	b083      	sub	sp, #12
    b02c:	f7f5 fd42 	bl	ab4 <Sys_GetCoreID>
    b030:	4603      	mov	r3, r0
    b032:	9301      	str	r3, [sp, #4]
    b034:	4a0d      	ldr	r2, [pc, #52]	; (b06c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
    b036:	9b01      	ldr	r3, [sp, #4]
    b038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b03c:	1e5a      	subs	r2, r3, #1
    b03e:	490b      	ldr	r1, [pc, #44]	; (b06c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
    b040:	9b01      	ldr	r3, [sp, #4]
    b042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b046:	4a0a      	ldr	r2, [pc, #40]	; (b070 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
    b048:	9b01      	ldr	r3, [sp, #4]
    b04a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b04e:	f003 0301 	and.w	r3, r3, #1
    b052:	2b00      	cmp	r3, #0
    b054:	d106      	bne.n	b064 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    b056:	4a05      	ldr	r2, [pc, #20]	; (b06c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
    b058:	9b01      	ldr	r3, [sp, #4]
    b05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b05e:	2b00      	cmp	r3, #0
    b060:	d100      	bne.n	b064 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    b062:	b662      	cpsie	i
    b064:	bf00      	nop
    b066:	b003      	add	sp, #12
    b068:	f85d fb04 	ldr.w	pc, [sp], #4
    b06c:	1fff92b0 	.word	0x1fff92b0
    b070:	1fff92ac 	.word	0x1fff92ac

0000b074 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:
    b074:	b500      	push	{lr}
    b076:	b083      	sub	sp, #12
    b078:	f7f5 fd1c 	bl	ab4 <Sys_GetCoreID>
    b07c:	4603      	mov	r3, r0
    b07e:	9301      	str	r3, [sp, #4]
    b080:	4a10      	ldr	r2, [pc, #64]	; (b0c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
    b082:	9b01      	ldr	r3, [sp, #4]
    b084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b088:	2b00      	cmp	r3, #0
    b08a:	d10d      	bne.n	b0a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    b08c:	f7f5 fc42 	bl	914 <Pwm_schm_read_msr>
    b090:	9000      	str	r0, [sp, #0]
    b092:	9b00      	ldr	r3, [sp, #0]
    b094:	f003 0301 	and.w	r3, r3, #1
    b098:	2b00      	cmp	r3, #0
    b09a:	d100      	bne.n	b09e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
    b09c:	b672      	cpsid	i
    b09e:	490a      	ldr	r1, [pc, #40]	; (b0c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
    b0a0:	9b01      	ldr	r3, [sp, #4]
    b0a2:	9a00      	ldr	r2, [sp, #0]
    b0a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b0a8:	4a06      	ldr	r2, [pc, #24]	; (b0c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
    b0aa:	9b01      	ldr	r3, [sp, #4]
    b0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0b0:	1c5a      	adds	r2, r3, #1
    b0b2:	4904      	ldr	r1, [pc, #16]	; (b0c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
    b0b4:	9b01      	ldr	r3, [sp, #4]
    b0b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b0ba:	bf00      	nop
    b0bc:	b003      	add	sp, #12
    b0be:	f85d fb04 	ldr.w	pc, [sp], #4
    b0c2:	bf00      	nop
    b0c4:	1fff92b8 	.word	0x1fff92b8
    b0c8:	1fff92b4 	.word	0x1fff92b4

0000b0cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:
    b0cc:	b500      	push	{lr}
    b0ce:	b083      	sub	sp, #12
    b0d0:	f7f5 fcf0 	bl	ab4 <Sys_GetCoreID>
    b0d4:	4603      	mov	r3, r0
    b0d6:	9301      	str	r3, [sp, #4]
    b0d8:	4a0d      	ldr	r2, [pc, #52]	; (b110 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
    b0da:	9b01      	ldr	r3, [sp, #4]
    b0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0e0:	1e5a      	subs	r2, r3, #1
    b0e2:	490b      	ldr	r1, [pc, #44]	; (b110 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
    b0e4:	9b01      	ldr	r3, [sp, #4]
    b0e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b0ea:	4a0a      	ldr	r2, [pc, #40]	; (b114 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
    b0ec:	9b01      	ldr	r3, [sp, #4]
    b0ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0f2:	f003 0301 	and.w	r3, r3, #1
    b0f6:	2b00      	cmp	r3, #0
    b0f8:	d106      	bne.n	b108 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    b0fa:	4a05      	ldr	r2, [pc, #20]	; (b110 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
    b0fc:	9b01      	ldr	r3, [sp, #4]
    b0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b102:	2b00      	cmp	r3, #0
    b104:	d100      	bne.n	b108 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    b106:	b662      	cpsie	i
    b108:	bf00      	nop
    b10a:	b003      	add	sp, #12
    b10c:	f85d fb04 	ldr.w	pc, [sp], #4
    b110:	1fff92b8 	.word	0x1fff92b8
    b114:	1fff92b4 	.word	0x1fff92b4

0000b118 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:
    b118:	b500      	push	{lr}
    b11a:	b083      	sub	sp, #12
    b11c:	f7f5 fcca 	bl	ab4 <Sys_GetCoreID>
    b120:	4603      	mov	r3, r0
    b122:	9301      	str	r3, [sp, #4]
    b124:	4a10      	ldr	r2, [pc, #64]	; (b168 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
    b126:	9b01      	ldr	r3, [sp, #4]
    b128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b12c:	2b00      	cmp	r3, #0
    b12e:	d10d      	bne.n	b14c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    b130:	f7f5 fbf0 	bl	914 <Pwm_schm_read_msr>
    b134:	9000      	str	r0, [sp, #0]
    b136:	9b00      	ldr	r3, [sp, #0]
    b138:	f003 0301 	and.w	r3, r3, #1
    b13c:	2b00      	cmp	r3, #0
    b13e:	d100      	bne.n	b142 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
    b140:	b672      	cpsid	i
    b142:	490a      	ldr	r1, [pc, #40]	; (b16c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
    b144:	9b01      	ldr	r3, [sp, #4]
    b146:	9a00      	ldr	r2, [sp, #0]
    b148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b14c:	4a06      	ldr	r2, [pc, #24]	; (b168 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
    b14e:	9b01      	ldr	r3, [sp, #4]
    b150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b154:	1c5a      	adds	r2, r3, #1
    b156:	4904      	ldr	r1, [pc, #16]	; (b168 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
    b158:	9b01      	ldr	r3, [sp, #4]
    b15a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b15e:	bf00      	nop
    b160:	b003      	add	sp, #12
    b162:	f85d fb04 	ldr.w	pc, [sp], #4
    b166:	bf00      	nop
    b168:	1fff92c0 	.word	0x1fff92c0
    b16c:	1fff92bc 	.word	0x1fff92bc

0000b170 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:
    b170:	b500      	push	{lr}
    b172:	b083      	sub	sp, #12
    b174:	f7f5 fc9e 	bl	ab4 <Sys_GetCoreID>
    b178:	4603      	mov	r3, r0
    b17a:	9301      	str	r3, [sp, #4]
    b17c:	4a0d      	ldr	r2, [pc, #52]	; (b1b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
    b17e:	9b01      	ldr	r3, [sp, #4]
    b180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b184:	1e5a      	subs	r2, r3, #1
    b186:	490b      	ldr	r1, [pc, #44]	; (b1b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
    b188:	9b01      	ldr	r3, [sp, #4]
    b18a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b18e:	4a0a      	ldr	r2, [pc, #40]	; (b1b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
    b190:	9b01      	ldr	r3, [sp, #4]
    b192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b196:	f003 0301 	and.w	r3, r3, #1
    b19a:	2b00      	cmp	r3, #0
    b19c:	d106      	bne.n	b1ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    b19e:	4a05      	ldr	r2, [pc, #20]	; (b1b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
    b1a0:	9b01      	ldr	r3, [sp, #4]
    b1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1a6:	2b00      	cmp	r3, #0
    b1a8:	d100      	bne.n	b1ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    b1aa:	b662      	cpsie	i
    b1ac:	bf00      	nop
    b1ae:	b003      	add	sp, #12
    b1b0:	f85d fb04 	ldr.w	pc, [sp], #4
    b1b4:	1fff92c0 	.word	0x1fff92c0
    b1b8:	1fff92bc 	.word	0x1fff92bc

0000b1bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:
    b1bc:	b500      	push	{lr}
    b1be:	b083      	sub	sp, #12
    b1c0:	f7f5 fc78 	bl	ab4 <Sys_GetCoreID>
    b1c4:	4603      	mov	r3, r0
    b1c6:	9301      	str	r3, [sp, #4]
    b1c8:	4a10      	ldr	r2, [pc, #64]	; (b20c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
    b1ca:	9b01      	ldr	r3, [sp, #4]
    b1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1d0:	2b00      	cmp	r3, #0
    b1d2:	d10d      	bne.n	b1f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    b1d4:	f7f5 fb9e 	bl	914 <Pwm_schm_read_msr>
    b1d8:	9000      	str	r0, [sp, #0]
    b1da:	9b00      	ldr	r3, [sp, #0]
    b1dc:	f003 0301 	and.w	r3, r3, #1
    b1e0:	2b00      	cmp	r3, #0
    b1e2:	d100      	bne.n	b1e6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
    b1e4:	b672      	cpsid	i
    b1e6:	490a      	ldr	r1, [pc, #40]	; (b210 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
    b1e8:	9b01      	ldr	r3, [sp, #4]
    b1ea:	9a00      	ldr	r2, [sp, #0]
    b1ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b1f0:	4a06      	ldr	r2, [pc, #24]	; (b20c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
    b1f2:	9b01      	ldr	r3, [sp, #4]
    b1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1f8:	1c5a      	adds	r2, r3, #1
    b1fa:	4904      	ldr	r1, [pc, #16]	; (b20c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
    b1fc:	9b01      	ldr	r3, [sp, #4]
    b1fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b202:	bf00      	nop
    b204:	b003      	add	sp, #12
    b206:	f85d fb04 	ldr.w	pc, [sp], #4
    b20a:	bf00      	nop
    b20c:	1fff92c8 	.word	0x1fff92c8
    b210:	1fff92c4 	.word	0x1fff92c4

0000b214 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:
    b214:	b500      	push	{lr}
    b216:	b083      	sub	sp, #12
    b218:	f7f5 fc4c 	bl	ab4 <Sys_GetCoreID>
    b21c:	4603      	mov	r3, r0
    b21e:	9301      	str	r3, [sp, #4]
    b220:	4a0d      	ldr	r2, [pc, #52]	; (b258 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
    b222:	9b01      	ldr	r3, [sp, #4]
    b224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b228:	1e5a      	subs	r2, r3, #1
    b22a:	490b      	ldr	r1, [pc, #44]	; (b258 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
    b22c:	9b01      	ldr	r3, [sp, #4]
    b22e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b232:	4a0a      	ldr	r2, [pc, #40]	; (b25c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
    b234:	9b01      	ldr	r3, [sp, #4]
    b236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b23a:	f003 0301 	and.w	r3, r3, #1
    b23e:	2b00      	cmp	r3, #0
    b240:	d106      	bne.n	b250 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    b242:	4a05      	ldr	r2, [pc, #20]	; (b258 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
    b244:	9b01      	ldr	r3, [sp, #4]
    b246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b24a:	2b00      	cmp	r3, #0
    b24c:	d100      	bne.n	b250 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    b24e:	b662      	cpsie	i
    b250:	bf00      	nop
    b252:	b003      	add	sp, #12
    b254:	f85d fb04 	ldr.w	pc, [sp], #4
    b258:	1fff92c8 	.word	0x1fff92c8
    b25c:	1fff92c4 	.word	0x1fff92c4

0000b260 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:
    b260:	b500      	push	{lr}
    b262:	b083      	sub	sp, #12
    b264:	f7f5 fc26 	bl	ab4 <Sys_GetCoreID>
    b268:	4603      	mov	r3, r0
    b26a:	9301      	str	r3, [sp, #4]
    b26c:	4a10      	ldr	r2, [pc, #64]	; (b2b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
    b26e:	9b01      	ldr	r3, [sp, #4]
    b270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b274:	2b00      	cmp	r3, #0
    b276:	d10d      	bne.n	b294 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    b278:	f7f5 fb4c 	bl	914 <Pwm_schm_read_msr>
    b27c:	9000      	str	r0, [sp, #0]
    b27e:	9b00      	ldr	r3, [sp, #0]
    b280:	f003 0301 	and.w	r3, r3, #1
    b284:	2b00      	cmp	r3, #0
    b286:	d100      	bne.n	b28a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
    b288:	b672      	cpsid	i
    b28a:	490a      	ldr	r1, [pc, #40]	; (b2b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
    b28c:	9b01      	ldr	r3, [sp, #4]
    b28e:	9a00      	ldr	r2, [sp, #0]
    b290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b294:	4a06      	ldr	r2, [pc, #24]	; (b2b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
    b296:	9b01      	ldr	r3, [sp, #4]
    b298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b29c:	1c5a      	adds	r2, r3, #1
    b29e:	4904      	ldr	r1, [pc, #16]	; (b2b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
    b2a0:	9b01      	ldr	r3, [sp, #4]
    b2a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b2a6:	bf00      	nop
    b2a8:	b003      	add	sp, #12
    b2aa:	f85d fb04 	ldr.w	pc, [sp], #4
    b2ae:	bf00      	nop
    b2b0:	1fff92d0 	.word	0x1fff92d0
    b2b4:	1fff92cc 	.word	0x1fff92cc

0000b2b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:
    b2b8:	b500      	push	{lr}
    b2ba:	b083      	sub	sp, #12
    b2bc:	f7f5 fbfa 	bl	ab4 <Sys_GetCoreID>
    b2c0:	4603      	mov	r3, r0
    b2c2:	9301      	str	r3, [sp, #4]
    b2c4:	4a0d      	ldr	r2, [pc, #52]	; (b2fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
    b2c6:	9b01      	ldr	r3, [sp, #4]
    b2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2cc:	1e5a      	subs	r2, r3, #1
    b2ce:	490b      	ldr	r1, [pc, #44]	; (b2fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
    b2d0:	9b01      	ldr	r3, [sp, #4]
    b2d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b2d6:	4a0a      	ldr	r2, [pc, #40]	; (b300 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
    b2d8:	9b01      	ldr	r3, [sp, #4]
    b2da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2de:	f003 0301 	and.w	r3, r3, #1
    b2e2:	2b00      	cmp	r3, #0
    b2e4:	d106      	bne.n	b2f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    b2e6:	4a05      	ldr	r2, [pc, #20]	; (b2fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
    b2e8:	9b01      	ldr	r3, [sp, #4]
    b2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2ee:	2b00      	cmp	r3, #0
    b2f0:	d100      	bne.n	b2f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    b2f2:	b662      	cpsie	i
    b2f4:	bf00      	nop
    b2f6:	b003      	add	sp, #12
    b2f8:	f85d fb04 	ldr.w	pc, [sp], #4
    b2fc:	1fff92d0 	.word	0x1fff92d0
    b300:	1fff92cc 	.word	0x1fff92cc

0000b304 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:
    b304:	b500      	push	{lr}
    b306:	b083      	sub	sp, #12
    b308:	f7f5 fbd4 	bl	ab4 <Sys_GetCoreID>
    b30c:	4603      	mov	r3, r0
    b30e:	9301      	str	r3, [sp, #4]
    b310:	4a10      	ldr	r2, [pc, #64]	; (b354 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
    b312:	9b01      	ldr	r3, [sp, #4]
    b314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b318:	2b00      	cmp	r3, #0
    b31a:	d10d      	bne.n	b338 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    b31c:	f7f5 fafa 	bl	914 <Pwm_schm_read_msr>
    b320:	9000      	str	r0, [sp, #0]
    b322:	9b00      	ldr	r3, [sp, #0]
    b324:	f003 0301 	and.w	r3, r3, #1
    b328:	2b00      	cmp	r3, #0
    b32a:	d100      	bne.n	b32e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
    b32c:	b672      	cpsid	i
    b32e:	490a      	ldr	r1, [pc, #40]	; (b358 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
    b330:	9b01      	ldr	r3, [sp, #4]
    b332:	9a00      	ldr	r2, [sp, #0]
    b334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b338:	4a06      	ldr	r2, [pc, #24]	; (b354 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
    b33a:	9b01      	ldr	r3, [sp, #4]
    b33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b340:	1c5a      	adds	r2, r3, #1
    b342:	4904      	ldr	r1, [pc, #16]	; (b354 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
    b344:	9b01      	ldr	r3, [sp, #4]
    b346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b34a:	bf00      	nop
    b34c:	b003      	add	sp, #12
    b34e:	f85d fb04 	ldr.w	pc, [sp], #4
    b352:	bf00      	nop
    b354:	1fff92d8 	.word	0x1fff92d8
    b358:	1fff92d4 	.word	0x1fff92d4

0000b35c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:
    b35c:	b500      	push	{lr}
    b35e:	b083      	sub	sp, #12
    b360:	f7f5 fba8 	bl	ab4 <Sys_GetCoreID>
    b364:	4603      	mov	r3, r0
    b366:	9301      	str	r3, [sp, #4]
    b368:	4a0d      	ldr	r2, [pc, #52]	; (b3a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
    b36a:	9b01      	ldr	r3, [sp, #4]
    b36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b370:	1e5a      	subs	r2, r3, #1
    b372:	490b      	ldr	r1, [pc, #44]	; (b3a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
    b374:	9b01      	ldr	r3, [sp, #4]
    b376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b37a:	4a0a      	ldr	r2, [pc, #40]	; (b3a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
    b37c:	9b01      	ldr	r3, [sp, #4]
    b37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b382:	f003 0301 	and.w	r3, r3, #1
    b386:	2b00      	cmp	r3, #0
    b388:	d106      	bne.n	b398 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    b38a:	4a05      	ldr	r2, [pc, #20]	; (b3a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
    b38c:	9b01      	ldr	r3, [sp, #4]
    b38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b392:	2b00      	cmp	r3, #0
    b394:	d100      	bne.n	b398 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    b396:	b662      	cpsie	i
    b398:	bf00      	nop
    b39a:	b003      	add	sp, #12
    b39c:	f85d fb04 	ldr.w	pc, [sp], #4
    b3a0:	1fff92d8 	.word	0x1fff92d8
    b3a4:	1fff92d4 	.word	0x1fff92d4

0000b3a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:
    b3a8:	b500      	push	{lr}
    b3aa:	b083      	sub	sp, #12
    b3ac:	f7f5 fb82 	bl	ab4 <Sys_GetCoreID>
    b3b0:	4603      	mov	r3, r0
    b3b2:	9301      	str	r3, [sp, #4]
    b3b4:	4a10      	ldr	r2, [pc, #64]	; (b3f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
    b3b6:	9b01      	ldr	r3, [sp, #4]
    b3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3bc:	2b00      	cmp	r3, #0
    b3be:	d10d      	bne.n	b3dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    b3c0:	f7f5 faa8 	bl	914 <Pwm_schm_read_msr>
    b3c4:	9000      	str	r0, [sp, #0]
    b3c6:	9b00      	ldr	r3, [sp, #0]
    b3c8:	f003 0301 	and.w	r3, r3, #1
    b3cc:	2b00      	cmp	r3, #0
    b3ce:	d100      	bne.n	b3d2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
    b3d0:	b672      	cpsid	i
    b3d2:	490a      	ldr	r1, [pc, #40]	; (b3fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
    b3d4:	9b01      	ldr	r3, [sp, #4]
    b3d6:	9a00      	ldr	r2, [sp, #0]
    b3d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b3dc:	4a06      	ldr	r2, [pc, #24]	; (b3f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
    b3de:	9b01      	ldr	r3, [sp, #4]
    b3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3e4:	1c5a      	adds	r2, r3, #1
    b3e6:	4904      	ldr	r1, [pc, #16]	; (b3f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
    b3e8:	9b01      	ldr	r3, [sp, #4]
    b3ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b3ee:	bf00      	nop
    b3f0:	b003      	add	sp, #12
    b3f2:	f85d fb04 	ldr.w	pc, [sp], #4
    b3f6:	bf00      	nop
    b3f8:	1fff92e0 	.word	0x1fff92e0
    b3fc:	1fff92dc 	.word	0x1fff92dc

0000b400 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:
    b400:	b500      	push	{lr}
    b402:	b083      	sub	sp, #12
    b404:	f7f5 fb56 	bl	ab4 <Sys_GetCoreID>
    b408:	4603      	mov	r3, r0
    b40a:	9301      	str	r3, [sp, #4]
    b40c:	4a0d      	ldr	r2, [pc, #52]	; (b444 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
    b40e:	9b01      	ldr	r3, [sp, #4]
    b410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b414:	1e5a      	subs	r2, r3, #1
    b416:	490b      	ldr	r1, [pc, #44]	; (b444 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
    b418:	9b01      	ldr	r3, [sp, #4]
    b41a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b41e:	4a0a      	ldr	r2, [pc, #40]	; (b448 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
    b420:	9b01      	ldr	r3, [sp, #4]
    b422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b426:	f003 0301 	and.w	r3, r3, #1
    b42a:	2b00      	cmp	r3, #0
    b42c:	d106      	bne.n	b43c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    b42e:	4a05      	ldr	r2, [pc, #20]	; (b444 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
    b430:	9b01      	ldr	r3, [sp, #4]
    b432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b436:	2b00      	cmp	r3, #0
    b438:	d100      	bne.n	b43c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    b43a:	b662      	cpsie	i
    b43c:	bf00      	nop
    b43e:	b003      	add	sp, #12
    b440:	f85d fb04 	ldr.w	pc, [sp], #4
    b444:	1fff92e0 	.word	0x1fff92e0
    b448:	1fff92dc 	.word	0x1fff92dc

0000b44c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:
    b44c:	b500      	push	{lr}
    b44e:	b083      	sub	sp, #12
    b450:	f7f5 fb30 	bl	ab4 <Sys_GetCoreID>
    b454:	4603      	mov	r3, r0
    b456:	9301      	str	r3, [sp, #4]
    b458:	4a10      	ldr	r2, [pc, #64]	; (b49c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
    b45a:	9b01      	ldr	r3, [sp, #4]
    b45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b460:	2b00      	cmp	r3, #0
    b462:	d10d      	bne.n	b480 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    b464:	f7f5 fa56 	bl	914 <Pwm_schm_read_msr>
    b468:	9000      	str	r0, [sp, #0]
    b46a:	9b00      	ldr	r3, [sp, #0]
    b46c:	f003 0301 	and.w	r3, r3, #1
    b470:	2b00      	cmp	r3, #0
    b472:	d100      	bne.n	b476 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
    b474:	b672      	cpsid	i
    b476:	490a      	ldr	r1, [pc, #40]	; (b4a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
    b478:	9b01      	ldr	r3, [sp, #4]
    b47a:	9a00      	ldr	r2, [sp, #0]
    b47c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b480:	4a06      	ldr	r2, [pc, #24]	; (b49c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
    b482:	9b01      	ldr	r3, [sp, #4]
    b484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b488:	1c5a      	adds	r2, r3, #1
    b48a:	4904      	ldr	r1, [pc, #16]	; (b49c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
    b48c:	9b01      	ldr	r3, [sp, #4]
    b48e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b492:	bf00      	nop
    b494:	b003      	add	sp, #12
    b496:	f85d fb04 	ldr.w	pc, [sp], #4
    b49a:	bf00      	nop
    b49c:	1fff92e8 	.word	0x1fff92e8
    b4a0:	1fff92e4 	.word	0x1fff92e4

0000b4a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:
    b4a4:	b500      	push	{lr}
    b4a6:	b083      	sub	sp, #12
    b4a8:	f7f5 fb04 	bl	ab4 <Sys_GetCoreID>
    b4ac:	4603      	mov	r3, r0
    b4ae:	9301      	str	r3, [sp, #4]
    b4b0:	4a0d      	ldr	r2, [pc, #52]	; (b4e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
    b4b2:	9b01      	ldr	r3, [sp, #4]
    b4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4b8:	1e5a      	subs	r2, r3, #1
    b4ba:	490b      	ldr	r1, [pc, #44]	; (b4e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
    b4bc:	9b01      	ldr	r3, [sp, #4]
    b4be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b4c2:	4a0a      	ldr	r2, [pc, #40]	; (b4ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
    b4c4:	9b01      	ldr	r3, [sp, #4]
    b4c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4ca:	f003 0301 	and.w	r3, r3, #1
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d106      	bne.n	b4e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    b4d2:	4a05      	ldr	r2, [pc, #20]	; (b4e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
    b4d4:	9b01      	ldr	r3, [sp, #4]
    b4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4da:	2b00      	cmp	r3, #0
    b4dc:	d100      	bne.n	b4e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    b4de:	b662      	cpsie	i
    b4e0:	bf00      	nop
    b4e2:	b003      	add	sp, #12
    b4e4:	f85d fb04 	ldr.w	pc, [sp], #4
    b4e8:	1fff92e8 	.word	0x1fff92e8
    b4ec:	1fff92e4 	.word	0x1fff92e4

0000b4f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:
    b4f0:	b500      	push	{lr}
    b4f2:	b083      	sub	sp, #12
    b4f4:	f7f5 fade 	bl	ab4 <Sys_GetCoreID>
    b4f8:	4603      	mov	r3, r0
    b4fa:	9301      	str	r3, [sp, #4]
    b4fc:	4a10      	ldr	r2, [pc, #64]	; (b540 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
    b4fe:	9b01      	ldr	r3, [sp, #4]
    b500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b504:	2b00      	cmp	r3, #0
    b506:	d10d      	bne.n	b524 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    b508:	f7f5 fa04 	bl	914 <Pwm_schm_read_msr>
    b50c:	9000      	str	r0, [sp, #0]
    b50e:	9b00      	ldr	r3, [sp, #0]
    b510:	f003 0301 	and.w	r3, r3, #1
    b514:	2b00      	cmp	r3, #0
    b516:	d100      	bne.n	b51a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
    b518:	b672      	cpsid	i
    b51a:	490a      	ldr	r1, [pc, #40]	; (b544 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
    b51c:	9b01      	ldr	r3, [sp, #4]
    b51e:	9a00      	ldr	r2, [sp, #0]
    b520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b524:	4a06      	ldr	r2, [pc, #24]	; (b540 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
    b526:	9b01      	ldr	r3, [sp, #4]
    b528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b52c:	1c5a      	adds	r2, r3, #1
    b52e:	4904      	ldr	r1, [pc, #16]	; (b540 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
    b530:	9b01      	ldr	r3, [sp, #4]
    b532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b536:	bf00      	nop
    b538:	b003      	add	sp, #12
    b53a:	f85d fb04 	ldr.w	pc, [sp], #4
    b53e:	bf00      	nop
    b540:	1fff92f0 	.word	0x1fff92f0
    b544:	1fff92ec 	.word	0x1fff92ec

0000b548 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:
    b548:	b500      	push	{lr}
    b54a:	b083      	sub	sp, #12
    b54c:	f7f5 fab2 	bl	ab4 <Sys_GetCoreID>
    b550:	4603      	mov	r3, r0
    b552:	9301      	str	r3, [sp, #4]
    b554:	4a0d      	ldr	r2, [pc, #52]	; (b58c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
    b556:	9b01      	ldr	r3, [sp, #4]
    b558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b55c:	1e5a      	subs	r2, r3, #1
    b55e:	490b      	ldr	r1, [pc, #44]	; (b58c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
    b560:	9b01      	ldr	r3, [sp, #4]
    b562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b566:	4a0a      	ldr	r2, [pc, #40]	; (b590 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
    b568:	9b01      	ldr	r3, [sp, #4]
    b56a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b56e:	f003 0301 	and.w	r3, r3, #1
    b572:	2b00      	cmp	r3, #0
    b574:	d106      	bne.n	b584 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    b576:	4a05      	ldr	r2, [pc, #20]	; (b58c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
    b578:	9b01      	ldr	r3, [sp, #4]
    b57a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b57e:	2b00      	cmp	r3, #0
    b580:	d100      	bne.n	b584 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    b582:	b662      	cpsie	i
    b584:	bf00      	nop
    b586:	b003      	add	sp, #12
    b588:	f85d fb04 	ldr.w	pc, [sp], #4
    b58c:	1fff92f0 	.word	0x1fff92f0
    b590:	1fff92ec 	.word	0x1fff92ec

0000b594 <Clock_Ip_au8DividerCallbackIndex>:
    b594:	0e0d0c00 06030201 0a070409 000b0805     ................

0000b5a4 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000b5b4 <Clock_Ip_au8XoscCallbackIndex>:
    b5b4:	00000100 00000000 00000000 00000000     ................

0000b5c4 <Clock_Ip_au8IrcoscCallbackIndex>:
    b5c4:	03020100 00000004 00000000 00000000     ................

0000b5d4 <Clock_Ip_au8GateCallbackIndex>:
    b5d4:	06010200 01040301 00000500 00000000     ................

0000b5e4 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000b5f4 <Clock_Ip_au8PllCallbackIndex>:
    b5f4:	00000100 00000000 00000000 00000000     ................

0000b604 <Clock_Ip_au8SelectorCallbackIndex>:
    b604:	0a090800 03020109 07060504 00000000     ................

0000b614 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000b624 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000b634 <Clock_Ip_au8ClockFeatures>:
	...
    b644:	01000000 00000000 00000000 00000002     ................
    b654:	00000000 00000300 00000000 00040000     ................
    b664:	00000000 05000000 00000000 00000000     ................
    b674:	00000006 00000000 00000100 00000000     ................
    b684:	00010000 00000000 04000000 00000000     ................
    b694:	00000000 00000005 00000001 00000401     ................
    b6a4:	00000200 00050100 00030000 04020000     ................
    b6b4:	04000000 02000000 00000005 00000005     ................
    b6c4:	00000403 00000600 00050300 00070000     ................
    b6d4:	05000000 00000000 00000000 00000006     ................
	...
    b714:	00050000 00000000 06000000 00000100     ................
    b724:	00000000 00030007 00000000 00000000     ................
    b734:	00000000 00060000 00000000 07000000     ................
    b744:	00000100 00000000 00030008 00000000     ................
	...
    b75c:	00090000 00000000 0a000000 00000100     ................
    b76c:	00000000 0003000b 00000000 00000000     ................
    b77c:	00000000 000c0000 00000000 0d000000     ................
    b78c:	00000100 00000000 0003000e 00000000     ................
    b79c:	00000800 00000000 00090000 00000000     ................
    b7ac:	0a000000 00000000 00000000 0000000b     ................
    b7bc:	00000000 00000b01 00000000 000b0200     ................
    b7cc:	00000000 0b030000 00000000 00000000     ................
	...
    b7e4:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    b7f4:	01000000 00000000 00000000 00000007     ................
    b804:	00007300 00000700 00320000 00090000     .s........2.....
    b814:	02000000 07000000 00000000 00000021     ............!...
    b824:	00000009 00000400 00000900 00030000     ................
    b834:	00070000 61000000 07000000 00000000     .......a........
    b844:	00000024 00000007 00002500 00000700     $........%......
    b854:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    b864:	00000000 00000020 38000004 00003800     .... ......8.8..
    b874:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    b884:	04000000 00260000 00000026 66000004     ......&.&......f
    b894:	00006600 00000400 00370037 00040000     .f......7.7.....
    b8a4:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    b8b4:	2e000004 00002e00 00000200 00404040     ............@@@.
    b8c4:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    b8d4:	0000006b 6c000004 00006c00 00000900     k......l.l......
    b8e4:	00010000 00090000 00000000 07000000     ................
    b8f4:	00000000 00000036 00000007 00003100     ....6........1..
    b904:	00000700 00490000 00070000 4a000000     ......I........J
    b914:	07000000 00000000 0000004b 00000007     ........K.......
    b924:	00004c00 00000700 004d0000 00070000     .L........M.....
    b934:	3d000000 03000000 00000000 00000000     ...=............

0000b944 <Clock_Ip_au16SelectorEntryHardwareValue>:
    b944:	01010a03 01010001 04040002 02000603     ................
    b954:	00010810 02020100 00000000 00000007     ................
    b964:	00000009 00000000 00000c0e 00000000     ................
	...

0000b99c <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    b99c:	00020000 00000300 00000601 00000000     ................
	...

0000b9cc <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    b9cc:	00000700 00000000 02020000 01010303     ................
    b9dc:	03020606 00000000 00000000 00000000     ................
	...

0000b9fc <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    b9fc:	00000001 00000000 02020000 01010303     ................
    ba0c:	03020606 00000000 00000000 00000000     ................
	...

0000ba2c <Clock_Ip_au8DividerValueHardwareValue>:
    ba2c:	00020100 00000003 00000004 00000000     ................
    ba3c:	00000005 00000000 00000000 00000000     ................
    ba4c:	00000006 00000000 00000000 00000000     ................
	...
    ba6c:	00000007                                ....

0000ba70 <Clock_Ip_apxScgPeriphAsyncDivs>:
    ba70:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000ba80 <Clock_Ip_aeSourceTypeClockName>:
    ba80:	00000000 00000001 00000001 00000001     ................
    ba90:	00000001 00000001 00000001 00000001     ................
    baa0:	00000002 00000003 00000001 00000001     ................
    bab0:	00000001 00000001 00000002 00000002     ................
    bac0:	00000003 00000003 00000001 00000001     ................
    bad0:	00000004 00000004 00000004 00000004     ................
	...

0000bb3c <Clock_Ip_aeHwPllName>:
    bb3c:	00000009                                ....

0000bb40 <Clock_Ip_aeHwDfsName>:
    bb40:	00000057                                W...

0000bb44 <Clock_Ip_axDividerCallbacks>:
    bb44:	00001bc9 00001bd3 00001bed 00001c07     ................
    bb54:	00001c21 00001c3b 00001c55 00001c6f     !...;...U...o...
    bb64:	00001c89 00001ca3 00001cbd 00001cd7     ................
    bb74:	00001cf1 00001d0b 00001d25              ........%...

0000bb80 <Clock_Ip_axDividerTriggerCallbacks>:
    bb80:	00002099 00002099                       . ... ..

0000bb88 <Clock_Ip_axExtOscCallbacks>:
    bb88:	000020a5 000020a5 000020a5 000020af     . ... ... ... ..
    bb98:	000020a5 000020b9 000020d3 000020ed     . ... ... ... ..
    bba8:	00002171 00002185                       q!...!..

0000bbb0 <Clock_Ip_axFracDivCallbacks>:
    bbb0:	00002345 00002345 0000234f              E#..E#..O#..

0000bbbc <Clock_Ip_axGateCallbacks>:
    bbbc:	00002369 00002373 00002473 0000248d     i#..s#..s$...$..
    bbcc:	00002423 0000243d 000023d3 000023ed     #$..=$...#...#..
    bbdc:	00002383 0000239d 000024c3 000024dd     .#...#...$...$..
    bbec:	00002513 0000252d                       .%..-%..

0000bbf4 <Clock_Ip_axIntOscCallbacks>:
    bbf4:	000026d9 000026d9 000026e3 000026ed     .&...&...&...&..
    bc04:	00002707 00002721 00002735 0000274f     .'..!'..5'..O'..
    bc14:	00002769 0000277d 00002797 000027b1     i'..}'...'...'..
    bc24:	00002859 00002873 0000288d              Y(..s(...(..

0000bc30 <Clock_Ip_axCmuCallbacks>:
    bc30:	00002e29 00002e33 00002e3f 00002e29     )...3...?...)...

0000bc40 <Clock_Ip_axPllCallbacks>:
    bc40:	00002e49 00002e49 00002e53 00002e49     I...I...S...I...
    bc50:	00002e5f 00002e69 00002e83 00002e9d     _...i...........
    bc60:	00002f41 00002f2d                       A/..-/..

0000bc68 <Clock_Ip_axPcfsCallbacks>:
    bc68:	0000309d                                .0..

0000bc6c <Clock_Ip_axSelectorCallbacks>:
    bc6c:	000030a9 000030a9 000030b3 000030cd     .0...0...0...0..
    bc7c:	000030a9 000030e7 00003101 0000311b     .0...0...1...1..
    bc8c:	00003135 0000314f 00003169 00003183     51..O1..i1...1..
    bc9c:	0000319d 000031b7 000031d1 000031eb     .1...1...1...1..
    bcac:	00003205 0000321f 00003239 00003253     .2...2..92..S2..
    bcbc:	0000326d 00003287                       m2...2..

0000bcc4 <ClockSource>:
    bcc4:	00000000 00000008 00000002 00000005     ................
	...
    bcdc:	00000009                                ....

0000bce0 <ResetReasonArray>:
    bce0:	00000000 00000001 00000002 00000003     ................
    bcf0:	00000004 00000005 00000006 00000007     ................
    bd00:	00000008 00000009 0000000a 0000000b     ................
    bd10:	0000000c 0000000d 0000000e              ............

0000bd1c <Port_au32PortCiPortBaseAddr>:
    bd1c:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    bd2c:	4004d000                                ...@

0000bd30 <Port_au32PortCiGpioBaseAddr>:
    bd30:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    bd40:	400ff100                                ...@

0000bd44 <Ftm_Pwm_Ip_aFtmBase>:
    bd44:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

0000bd54 <Mcu_aClockConfigPB>:
	...
    bd5c:	1c000101 04000010 01000029 00000005     ........).......
    bd6c:	00000001 00000000 00000057 00000000     ........W.......
    bd7c:	00000000 00000008 007a1200 00000001     ..........z.....
    bd8c:	00000001 00000000 00000057 00000000     ........W.......
    bd9c:	00000057 00000000 00000000 00000000     W...............
	...
    bdbc:	00000019 00000005 0000001a 00000002     ................
    bdcc:	0000001b 00000005 0000002a 00000005     ........*.......
    bddc:	00000028 0000000e 00000029 00000001     (.......).......
    bdec:	00000056 0000001c 00000032 0000002a     V.......2...*...
    bdfc:	0000002b 00000014 0000002c 00000014     +.......,.......
    be0c:	0000002d 00000014 0000002e 00000014     -...............
    be1c:	0000003f 00000000 00000040 00000000     ?.......@.......
    be2c:	00000041 00000000 00000042 00000000     A.......B.......
    be3c:	00000031 00000000 00000045 00000000     1.......E.......
    be4c:	00000046 00000000 00000047 00000000     F.......G.......
    be5c:	00000044 00000000 00000030 00000000     D.......0.......
    be6c:	0000003d 00000000 00000043 00000000     =.......C.......
    be7c:	00000049 00000000 0000004a 00000000     I.......J.......
    be8c:	0000004b 00000000 00000048 00000000     K.......H.......
    be9c:	0000000c 00000001 00000000 0000000d     ................
    beac:	00000002 00000000 0000000e 00000001     ................
    bebc:	00000000 0000000f 00000001 00000000     ................
    becc:	0000001d 00000001 00000000 0000001e     ................
    bedc:	00000008 00000000 0000001f 00000001     ................
    beec:	00000000 00000021 00000001 00000000     ....!...........
    befc:	00000022 00000002 00000000 00000023     "...........#...
    bf0c:	00000001 00000000 00000025 00000003     ........%.......
    bf1c:	00000000 00000026 00000004 00000000     ....&...........
    bf2c:	00000027 00000002 00000000 00000032     '...........2...
    bf3c:	00000001 00000000 00000048 00000001     ........H.......
    bf4c:	00000001 00000056 00000001 00000001     ....V...........
    bf5c:	00000057 00000000 00000000 00000057     W...........W...
	...
    bf74:	00000057 00000000 00000000 00000057     W...........W...
	...
    bf8c:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    bfa8:	00000014 00007d00 00000015 00007d00     .....}.......}..
    bfb8:	00000016 00007d00 00000017 00008000     .....}..........
    bfc8:	00000012 00000001 00000013 00000001     ................
    bfd8:	00000030 00000000 00000031 00000000     0.......1.......
    bfe8:	00000032 00000000 00000033 00000000     2.......3.......
    bff8:	00000034 00000000 00000035 00000001     4.......5.......
    c008:	00000036 00000000 00000037 00000001     6.......7.......
    c018:	00000038 00000001 00000039 00000000     8.......9.......
    c028:	0000003a 00000000 0000003b 00000000     :.......;.......
    c038:	0000003c 00000000 0000003d 00000000     <.......=.......
    c048:	0000003e 00000000 0000003f 00000001     >.......?.......
    c058:	00000040 00000000 00000041 00000000     @.......A.......
    c068:	00000042 00000000 00000043 00000000     B.......C.......
    c078:	00000044 00000000 00000045 00000000     D.......E.......
    c088:	00000046 00000000 00000047 00000000     F.......G.......
    c098:	00000048 00000000 00000049 00000000     H.......I.......
    c0a8:	0000004a 00000000 0000004b 00000000     J.......K.......
    c0b8:	0000004c 00000001 0000004d 00000001     L.......M.......
    c0c8:	0000004e 00000000 0000004f 00000000     N.......O.......
    c0d8:	00000050 00000001 00000051 00000001     P.......Q.......
    c0e8:	00000052 00000001 00000053 00000001     R.......S.......
    c0f8:	00000054 00000001 00000055 00000000     T.......U.......
    c108:	00000056 00000001 00000057 00000000     V.......W.......
    c118:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0000c14c <Ftm_Pwm_Ip_SyncCfg0>:
	...
    c168:	00000003 00000003                       ........

0000c170 <Ftm_Pwm_Ip_InstCfg0>:
    c170:	00000001 00000007 00000000 00000000     ................
	...
    c1a4:	0000927c 00000001 00000000 00000000     |...............
    c1b4:	00000000 0000c14c                       ....L...

0000c1bc <Ftm_Pwm_Ip_I0_ChPair0>:
    c1bc:	00010100 00000000 01770100              ..........w.

0000c1c8 <Ftm_Pwm_Ip_I0_Ch0>:
    c1c8:	00000000 0000000a 00000000 00000000     ................
    c1d8:	00000000 00000001 493e0000 00000000     ..........>I....
    c1e8:	00000000 0000c1bc                       ........

0000c1f0 <Ftm_Pwm_Ip_I0_ChArray>:
    c1f0:	0000c1c8                                ....

0000c1f4 <Ftm_Pwm_Ip_UserCfg0>:
    c1f4:	0000c170 0000c1f0 00000001 00000000     p...............
    c204:	00000000                                ....

0000c208 <Mcu_Config>:
    c208:	0000005a 00000000 00000001 00000001     Z...............
    c218:	0000c398 0000bd54 0000c3a4              ....T.......

0000c224 <OsIf_xPredefinedConfig>:
    c224:	00000000 02dc6c00                       .....l..

0000c22c <OsIf_apxPredefinedConfig>:
    c22c:	0000c224                                $...

0000c230 <g_pin_mux_InitConfigArr>:
    c230:	4004c000 00000000 0000000f 00000002     ...@............
    c240:	00000002 00000002 00000000 00000000     ................
	...
    c258:	4004c000 00000000 00000010 00000002     ...@............
    c268:	00000002 00000002 00000000 00000000     ................
	...

0000c280 <au8Port_PartitionList>:
    c280:	00000001                                ....

0000c284 <au32Port_PinToPartitionMap>:
    c284:	00000001 00000001                       ........

0000c28c <Port_au16NoUnUsedPadsArrayDefault>:
    c28c:	00010000 00030002 00070006 00090008     ................
    c29c:	000c000b 000e000d 0010000f 00200011     .............. .
    c2ac:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    c2bc:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    c2cc:	00400031 00420041 00460043 00480047     1.@.A.B.C.F.G.H.
    c2dc:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    c2ec:	00600051 00620061 00640063 00660065     Q.`.a.b.c.d.e.f.
    c2fc:	00680067 006a0069 006c006b 006e006d     g.h.i.j.k.l.m.n.
    c30c:	00800071 00820081 00840083 00860085     q...............
    c31c:	00880087 008a0089 008c008b 008e008d     ................
    c32c:	0090008f                                ....

0000c330 <Port_UnUsedPin>:
    c330:	00000100 00000001 00000000              ............

0000c33c <Port_aPinConfigDefault>:
    c33c:	0000006f 00000200 00000000 00000002     o...............
    c34c:	00010000 00000070 00000200 00000000     ....p...........
    c35c:	00000002 00010000                       ........

0000c364 <Port_Config>:
    c364:	00520002 0000c28c 0000c330 0000c33c     ..R.....0...<...
	...
    c37c:	0000c284 0000c280 0000c230              ........0...

0000c388 <Power_Ip_RCM_ConfigPB>:
	...

0000c390 <Power_Ip_PMC_ConfigPB>:
    c390:	00000000                                ....

0000c394 <Power_Ip_SMC_ConfigPB>:
    c394:	00000000                                ....

0000c398 <Power_Ip_aModeConfigPB>:
	...

0000c3a4 <Power_Ip_HwIPsConfigPB>:
    c3a4:	0000c388 0000c390 0000c394              ............

0000c3b0 <Pwm_Channels_PB>:
	...
    c3b8:	00000001 0000c1c8 40000000 00000001     ...........@....

0000c3c8 <Pwm_Instances_PB>:
    c3c8:	00000000 00000001 0000c1f4              ............

0000c3d4 <Pwm_Config>:
    c3d4:	00000001 0000c3b0 00000001 0000c3c8     ................

0000c3e4 <__INIT_TABLE>:
    c3e4:	00000002 	.word	0x00000002
    c3e8:	1fff8b10 	.word	0x1fff8b10
    c3ec:	0000c40c 	.word	0x0000c40c
    c3f0:	0000c434 	.word	0x0000c434
    c3f4:	1fff8800 	.word	0x1fff8800
    c3f8:	00000000 	.word	0x00000000
    c3fc:	00000310 	.word	0x00000310

0000c400 <__ZERO_TABLE>:
    c400:	00000001 	.word	0x00000001
    c404:	1fff8b40 	.word	0x1fff8b40
    c408:	1fff9300 	.word	0x1fff9300
