
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000ad7 	.word	0x00000ad7
  10:	00000ad9 	.word	0x00000ad9
  14:	00000adb 	.word	0x00000adb
  18:	00000add 	.word	0x00000add
	...
  2c:	00000adf 	.word	0x00000adf
  30:	00000ae1 	.word	0x00000ae1
  34:	00000000 	.word	0x00000000
  38:	00000ae3 	.word	0x00000ae3
  3c:	00000ae5 	.word	0x00000ae5
  40:	00000ae7 	.word	0x00000ae7
  44:	00000ae7 	.word	0x00000ae7
  48:	00000ae7 	.word	0x00000ae7
  4c:	00000ae7 	.word	0x00000ae7
  50:	00000ae7 	.word	0x00000ae7
  54:	00000ae7 	.word	0x00000ae7
  58:	00000ae7 	.word	0x00000ae7
  5c:	00000ae7 	.word	0x00000ae7
  60:	00000ae7 	.word	0x00000ae7
  64:	00000ae7 	.word	0x00000ae7
  68:	00000ae7 	.word	0x00000ae7
  6c:	00000ae7 	.word	0x00000ae7
  70:	00000ae7 	.word	0x00000ae7
  74:	00000ae7 	.word	0x00000ae7
  78:	00000ae7 	.word	0x00000ae7
  7c:	00000ae7 	.word	0x00000ae7
  80:	00000ae7 	.word	0x00000ae7
  84:	00000ae7 	.word	0x00000ae7
  88:	00000ae7 	.word	0x00000ae7
  8c:	00000ae7 	.word	0x00000ae7
  90:	00000ae7 	.word	0x00000ae7
  94:	00000ae7 	.word	0x00000ae7
  98:	00000ae7 	.word	0x00000ae7
  9c:	00000ae7 	.word	0x00000ae7
  a0:	00000ae7 	.word	0x00000ae7
  a4:	00000ae7 	.word	0x00000ae7
  a8:	00000ae7 	.word	0x00000ae7
  ac:	00000ae7 	.word	0x00000ae7
  b0:	00000ae7 	.word	0x00000ae7
  b4:	00000ae7 	.word	0x00000ae7
  b8:	00000ae7 	.word	0x00000ae7
  bc:	00000ae7 	.word	0x00000ae7
  c0:	00000ae7 	.word	0x00000ae7
  c4:	00000ae7 	.word	0x00000ae7
  c8:	00000ae7 	.word	0x00000ae7
  cc:	00000ae7 	.word	0x00000ae7
  d0:	00000ae7 	.word	0x00000ae7
  d4:	00000ae7 	.word	0x00000ae7
  d8:	00000ae7 	.word	0x00000ae7
  dc:	00000ae7 	.word	0x00000ae7
  e0:	00000ae7 	.word	0x00000ae7
  e4:	00000ae7 	.word	0x00000ae7
  e8:	00000ae7 	.word	0x00000ae7
  ec:	00000ae7 	.word	0x00000ae7
  f0:	00000ae7 	.word	0x00000ae7
  f4:	00000ae7 	.word	0x00000ae7
  f8:	00000ae7 	.word	0x00000ae7
  fc:	00000ae7 	.word	0x00000ae7
 100:	00000ae7 	.word	0x00000ae7
 104:	00000ae7 	.word	0x00000ae7
 108:	00000ae7 	.word	0x00000ae7
 10c:	00000ae7 	.word	0x00000ae7
 110:	00000ae7 	.word	0x00000ae7
 114:	00000ae7 	.word	0x00000ae7
 118:	00000ae7 	.word	0x00000ae7
 11c:	00000ae7 	.word	0x00000ae7
 120:	00000ae7 	.word	0x00000ae7
 124:	00000ae7 	.word	0x00000ae7
 128:	00000ae7 	.word	0x00000ae7
 12c:	00000ae7 	.word	0x00000ae7
 130:	00000ae7 	.word	0x00000ae7
 134:	00000ae7 	.word	0x00000ae7
 138:	00000ae7 	.word	0x00000ae7
 13c:	00000ae7 	.word	0x00000ae7
 140:	00000ae7 	.word	0x00000ae7
 144:	00000ae7 	.word	0x00000ae7
 148:	00000ae7 	.word	0x00000ae7
 14c:	00000ae7 	.word	0x00000ae7
 150:	00000ae7 	.word	0x00000ae7
 154:	00000ae7 	.word	0x00000ae7
 158:	00000ae7 	.word	0x00000ae7
 15c:	00000ae7 	.word	0x00000ae7
 160:	00000ae7 	.word	0x00000ae7
 164:	00000ae7 	.word	0x00000ae7
 168:	00000ae7 	.word	0x00000ae7
 16c:	00000ae7 	.word	0x00000ae7
 170:	00000ae7 	.word	0x00000ae7
 174:	00000ae7 	.word	0x00000ae7
 178:	00000ae7 	.word	0x00000ae7
 17c:	00000ae7 	.word	0x00000ae7
 180:	00000ae7 	.word	0x00000ae7
 184:	00000ae7 	.word	0x00000ae7
 188:	00000ae7 	.word	0x00000ae7
 18c:	00000ae7 	.word	0x00000ae7
 190:	00000ae7 	.word	0x00000ae7
 194:	00000ae7 	.word	0x00000ae7
 198:	00000ae7 	.word	0x00000ae7
 19c:	00000ae7 	.word	0x00000ae7
 1a0:	00000ae7 	.word	0x00000ae7
 1a4:	00000ae7 	.word	0x00000ae7
 1a8:	00000ae7 	.word	0x00000ae7
 1ac:	00000ae7 	.word	0x00000ae7
 1b0:	00000ae7 	.word	0x00000ae7
 1b4:	00000ae7 	.word	0x00000ae7
 1b8:	00000ae7 	.word	0x00000ae7
 1bc:	00000ae7 	.word	0x00000ae7
 1c0:	00000ae7 	.word	0x00000ae7
 1c4:	00000ae7 	.word	0x00000ae7
 1c8:	00000ae7 	.word	0x00000ae7
 1cc:	00000ae7 	.word	0x00000ae7
 1d0:	00000ae7 	.word	0x00000ae7
 1d4:	00000ae7 	.word	0x00000ae7
 1d8:	00000ae7 	.word	0x00000ae7
 1dc:	00000ae7 	.word	0x00000ae7
 1e0:	00000ae7 	.word	0x00000ae7
 1e4:	00000ae7 	.word	0x00000ae7
 1e8:	00000ae7 	.word	0x00000ae7
 1ec:	00000ae7 	.word	0x00000ae7
 1f0:	00000ae7 	.word	0x00000ae7
 1f4:	00000ae7 	.word	0x00000ae7
 1f8:	00000ae7 	.word	0x00000ae7
 1fc:	00000ae7 	.word	0x00000ae7
 200:	00000ae7 	.word	0x00000ae7
 204:	00000ae7 	.word	0x00000ae7
 208:	00000ae7 	.word	0x00000ae7
 20c:	00000ae7 	.word	0x00000ae7
 210:	00000ae7 	.word	0x00000ae7
 214:	00000ae7 	.word	0x00000ae7
 218:	00000ae7 	.word	0x00000ae7
 21c:	00000ae7 	.word	0x00000ae7
 220:	00000ae7 	.word	0x00000ae7
 224:	00000ae7 	.word	0x00000ae7
 228:	00000ae7 	.word	0x00000ae7
 22c:	00000ae7 	.word	0x00000ae7
 230:	00000ae7 	.word	0x00000ae7
 234:	00000ae7 	.word	0x00000ae7
 238:	00000ae7 	.word	0x00000ae7
 23c:	00000ae7 	.word	0x00000ae7
 240:	00000ae7 	.word	0x00000ae7
 244:	00000ae7 	.word	0x00000ae7
 248:	00000ae7 	.word	0x00000ae7
 24c:	00000ae7 	.word	0x00000ae7
 250:	00000ae7 	.word	0x00000ae7
 254:	00000ae7 	.word	0x00000ae7
 258:	00000ae7 	.word	0x00000ae7
 25c:	00000ae7 	.word	0x00000ae7
 260:	00000ae7 	.word	0x00000ae7
 264:	00000ae7 	.word	0x00000ae7
 268:	00000ae7 	.word	0x00000ae7
 26c:	00000ae7 	.word	0x00000ae7
 270:	00000ae7 	.word	0x00000ae7
 274:	00000ae7 	.word	0x00000ae7
 278:	00000ae7 	.word	0x00000ae7
 27c:	00000ae7 	.word	0x00000ae7
 280:	00000ae7 	.word	0x00000ae7
 284:	00000ae7 	.word	0x00000ae7
 288:	00000ae7 	.word	0x00000ae7
 28c:	00000ae7 	.word	0x00000ae7
 290:	00000ae7 	.word	0x00000ae7
 294:	00000ae7 	.word	0x00000ae7
 298:	00000ae7 	.word	0x00000ae7
 29c:	00000ae7 	.word	0x00000ae7
 2a0:	00000ae7 	.word	0x00000ae7
 2a4:	00000ae7 	.word	0x00000ae7
 2a8:	00000ae7 	.word	0x00000ae7
 2ac:	00000ae7 	.word	0x00000ae7
 2b0:	00000ae7 	.word	0x00000ae7
 2b4:	00000ae7 	.word	0x00000ae7
 2b8:	00000ae7 	.word	0x00000ae7
 2bc:	00000ae7 	.word	0x00000ae7
 2c0:	00000ae7 	.word	0x00000ae7
 2c4:	00000ae7 	.word	0x00000ae7
 2c8:	00000ae7 	.word	0x00000ae7
 2cc:	00000ae7 	.word	0x00000ae7
 2d0:	00000ae7 	.word	0x00000ae7
 2d4:	00000ae7 	.word	0x00000ae7
 2d8:	00000ae7 	.word	0x00000ae7
 2dc:	00000ae7 	.word	0x00000ae7
 2e0:	00000ae7 	.word	0x00000ae7
 2e4:	00000ae7 	.word	0x00000ae7
 2e8:	00000ae7 	.word	0x00000ae7
 2ec:	00000ae7 	.word	0x00000ae7
 2f0:	00000ae7 	.word	0x00000ae7
 2f4:	00000ae7 	.word	0x00000ae7
 2f8:	00000ae7 	.word	0x00000ae7
 2fc:	00000ae7 	.word	0x00000ae7
 300:	00000ae7 	.word	0x00000ae7
 304:	00000ae7 	.word	0x00000ae7
 308:	00000ae7 	.word	0x00000ae7
 30c:	00000ae7 	.word	0x00000ae7

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fa5f 	bl	944 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb1e 	bl	acc <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff92f4 	.word	0x1fff92f4

000004c8 <SystemInit>:
     4c8:	b508      	push	{r3, lr}
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88
     4de:	f3bf 8f4f 	dsb	sy
     4e2:	f3bf 8f6f 	isb	sy
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c
     590:	f3bf 8f4f 	dsb	sy
     594:	f3bf 8f6f 	isb	sy
     598:	2000      	movs	r0, #0
     59a:	f000 fa69 	bl	a70 <sys_m4_cache_init>
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0xac>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0xac>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0xb0>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0xb0>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0xa6>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0xe4>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x24>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0xdc>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0xd6>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0xd2>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0xd2>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0xca>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0xca>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0xb8>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0xb4>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0xe8>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0x70>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0xce>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0xce>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0x9e>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0xc6>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0xc6>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x6>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x6>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0x9e>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0x70>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();
     8b2:	f000 f80f 	bl	8d4 <EcuM_Init>

    // RED RGB LED - FTM0 - CH0
    Pwm_SetPeriodAndDuty( PwmChannel_0, 37500, 0x4000 );    // Duty cycle of 50%: 0x4000
     8b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     8ba:	f249 217c 	movw	r1, #37500	; 0x927c
     8be:	2000      	movs	r0, #0
     8c0:	f007 ffc4 	bl	884c <Pwm_SetPeriodAndDuty>
    // BLUE RGB LED - FTM2 - CH0
    Pwm_SetPeriodAndDuty( PwmChannel_1, 37500, 0x4000 );    // Duty cycle of 50%: 0x4000
     8c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     8c8:	f249 217c 	movw	r1, #37500	; 0x927c
     8cc:	2001      	movs	r0, #1
     8ce:	f007 ffbd 	bl	884c <Pwm_SetPeriodAndDuty>

    while( 1u )
     8d2:	e7fe      	b.n	8d2 <main+0x22>

000008d4 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8d4:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     8d6:	480a      	ldr	r0, [pc, #40]	; (900 <EcuM_Init+0x2c>)
     8d8:	f003 feb0 	bl	463c <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     8dc:	2000      	movs	r0, #0
     8de:	f003 ff01 	bl	46e4 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     8e2:	2000      	movs	r0, #0
     8e4:	f003 ff22 	bl	472c <Mcu_SetMode>
    OsIf_Init(NULL_PTR);
     8e8:	2000      	movs	r0, #0
     8ea:	f000 f911 	bl	b10 <OsIf_Init>
    /*Apply all the Pin Port microcontroller configuration, for this case
    Port Pin D0 (FTM2-CH0), D15 (FTM0-CH1), D16 (FTM0-CH0) are configured as output*/
    Port_Init( &Port_Config );
     8ee:	4805      	ldr	r0, [pc, #20]	; (904 <EcuM_Init+0x30>)
     8f0:	f004 faa6 	bl	4e40 <Port_Init>
    Pwm_Init( &Pwm_Config );
     8f4:	4804      	ldr	r0, [pc, #16]	; (908 <EcuM_Init+0x34>)
     8f6:	f007 fe57 	bl	85a8 <Pwm_Init>
}
     8fa:	bf00      	nop
     8fc:	bd08      	pop	{r3, pc}
     8fe:	bf00      	nop
     900:	0000c2c8 	.word	0x0000c2c8
     904:	0000c424 	.word	0x0000c424
     908:	0000c4b8 	.word	0x0000c4b8

0000090c <Mcu_schm_read_msr>:
     90c:	b410      	push	{r4}
     90e:	f3ef 8310 	mrs	r3, PRIMASK
     912:	461c      	mov	r4, r3
     914:	4623      	mov	r3, r4
     916:	4618      	mov	r0, r3
     918:	f85d 4b04 	ldr.w	r4, [sp], #4
     91c:	4770      	bx	lr

0000091e <Port_schm_read_msr>:
     91e:	b410      	push	{r4}
     920:	f3ef 8310 	mrs	r3, PRIMASK
     924:	461c      	mov	r4, r3
     926:	4623      	mov	r3, r4
     928:	4618      	mov	r0, r3
     92a:	f85d 4b04 	ldr.w	r4, [sp], #4
     92e:	4770      	bx	lr

00000930 <Pwm_schm_read_msr>:
     930:	b410      	push	{r4}
     932:	f3ef 8310 	mrs	r3, PRIMASK
     936:	461c      	mov	r4, r3
     938:	4623      	mov	r3, r4
     93a:	4618      	mov	r0, r3
     93c:	f85d 4b04 	ldr.w	r4, [sp], #4
     940:	4770      	bx	lr
	...

00000944 <init_data_bss>:
     944:	b08a      	sub	sp, #40	; 0x28
     946:	2300      	movs	r3, #0
     948:	9307      	str	r3, [sp, #28]
     94a:	2300      	movs	r3, #0
     94c:	9306      	str	r3, [sp, #24]
     94e:	2300      	movs	r3, #0
     950:	9309      	str	r3, [sp, #36]	; 0x24
     952:	2300      	movs	r3, #0
     954:	9308      	str	r3, [sp, #32]
     956:	4b44      	ldr	r3, [pc, #272]	; (a68 <init_data_bss+0x124>)
     958:	9305      	str	r3, [sp, #20]
     95a:	4b44      	ldr	r3, [pc, #272]	; (a6c <init_data_bss+0x128>)
     95c:	9304      	str	r3, [sp, #16]
     95e:	9b05      	ldr	r3, [sp, #20]
     960:	681b      	ldr	r3, [r3, #0]
     962:	9307      	str	r3, [sp, #28]
     964:	9b05      	ldr	r3, [sp, #20]
     966:	3304      	adds	r3, #4
     968:	9305      	str	r3, [sp, #20]
     96a:	9b05      	ldr	r3, [sp, #20]
     96c:	9303      	str	r3, [sp, #12]
     96e:	2300      	movs	r3, #0
     970:	9309      	str	r3, [sp, #36]	; 0x24
     972:	e03d      	b.n	9f0 <init_data_bss+0xac>
     974:	9a09      	ldr	r2, [sp, #36]	; 0x24
     976:	4613      	mov	r3, r2
     978:	005b      	lsls	r3, r3, #1
     97a:	4413      	add	r3, r2
     97c:	009b      	lsls	r3, r3, #2
     97e:	461a      	mov	r2, r3
     980:	9b03      	ldr	r3, [sp, #12]
     982:	4413      	add	r3, r2
     984:	685b      	ldr	r3, [r3, #4]
     986:	9300      	str	r3, [sp, #0]
     988:	9a09      	ldr	r2, [sp, #36]	; 0x24
     98a:	4613      	mov	r3, r2
     98c:	005b      	lsls	r3, r3, #1
     98e:	4413      	add	r3, r2
     990:	009b      	lsls	r3, r3, #2
     992:	461a      	mov	r2, r3
     994:	9b03      	ldr	r3, [sp, #12]
     996:	4413      	add	r3, r2
     998:	681b      	ldr	r3, [r3, #0]
     99a:	9301      	str	r3, [sp, #4]
     99c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     99e:	4613      	mov	r3, r2
     9a0:	005b      	lsls	r3, r3, #1
     9a2:	4413      	add	r3, r2
     9a4:	009b      	lsls	r3, r3, #2
     9a6:	461a      	mov	r2, r3
     9a8:	9b03      	ldr	r3, [sp, #12]
     9aa:	4413      	add	r3, r2
     9ac:	689b      	ldr	r3, [r3, #8]
     9ae:	4619      	mov	r1, r3
     9b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9b2:	4613      	mov	r3, r2
     9b4:	005b      	lsls	r3, r3, #1
     9b6:	4413      	add	r3, r2
     9b8:	009b      	lsls	r3, r3, #2
     9ba:	461a      	mov	r2, r3
     9bc:	9b03      	ldr	r3, [sp, #12]
     9be:	4413      	add	r3, r2
     9c0:	685b      	ldr	r3, [r3, #4]
     9c2:	1acb      	subs	r3, r1, r3
     9c4:	9306      	str	r3, [sp, #24]
     9c6:	2300      	movs	r3, #0
     9c8:	9308      	str	r3, [sp, #32]
     9ca:	e00a      	b.n	9e2 <init_data_bss+0x9e>
     9cc:	9a00      	ldr	r2, [sp, #0]
     9ce:	9b08      	ldr	r3, [sp, #32]
     9d0:	441a      	add	r2, r3
     9d2:	9901      	ldr	r1, [sp, #4]
     9d4:	9b08      	ldr	r3, [sp, #32]
     9d6:	440b      	add	r3, r1
     9d8:	7812      	ldrb	r2, [r2, #0]
     9da:	701a      	strb	r2, [r3, #0]
     9dc:	9b08      	ldr	r3, [sp, #32]
     9de:	3301      	adds	r3, #1
     9e0:	9308      	str	r3, [sp, #32]
     9e2:	9a08      	ldr	r2, [sp, #32]
     9e4:	9b06      	ldr	r3, [sp, #24]
     9e6:	429a      	cmp	r2, r3
     9e8:	d3f0      	bcc.n	9cc <init_data_bss+0x88>
     9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
     9ec:	3301      	adds	r3, #1
     9ee:	9309      	str	r3, [sp, #36]	; 0x24
     9f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9f2:	9b07      	ldr	r3, [sp, #28]
     9f4:	429a      	cmp	r2, r3
     9f6:	d3bd      	bcc.n	974 <init_data_bss+0x30>
     9f8:	9b04      	ldr	r3, [sp, #16]
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	9307      	str	r3, [sp, #28]
     9fe:	9b04      	ldr	r3, [sp, #16]
     a00:	3304      	adds	r3, #4
     a02:	9304      	str	r3, [sp, #16]
     a04:	9b04      	ldr	r3, [sp, #16]
     a06:	9302      	str	r3, [sp, #8]
     a08:	2300      	movs	r3, #0
     a0a:	9309      	str	r3, [sp, #36]	; 0x24
     a0c:	e024      	b.n	a58 <init_data_bss+0x114>
     a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a10:	00db      	lsls	r3, r3, #3
     a12:	9a02      	ldr	r2, [sp, #8]
     a14:	4413      	add	r3, r2
     a16:	681b      	ldr	r3, [r3, #0]
     a18:	9301      	str	r3, [sp, #4]
     a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a1c:	00db      	lsls	r3, r3, #3
     a1e:	9a02      	ldr	r2, [sp, #8]
     a20:	4413      	add	r3, r2
     a22:	685b      	ldr	r3, [r3, #4]
     a24:	4619      	mov	r1, r3
     a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a28:	00db      	lsls	r3, r3, #3
     a2a:	9a02      	ldr	r2, [sp, #8]
     a2c:	4413      	add	r3, r2
     a2e:	681b      	ldr	r3, [r3, #0]
     a30:	1acb      	subs	r3, r1, r3
     a32:	9306      	str	r3, [sp, #24]
     a34:	2300      	movs	r3, #0
     a36:	9308      	str	r3, [sp, #32]
     a38:	e007      	b.n	a4a <init_data_bss+0x106>
     a3a:	9a01      	ldr	r2, [sp, #4]
     a3c:	9b08      	ldr	r3, [sp, #32]
     a3e:	4413      	add	r3, r2
     a40:	2200      	movs	r2, #0
     a42:	701a      	strb	r2, [r3, #0]
     a44:	9b08      	ldr	r3, [sp, #32]
     a46:	3301      	adds	r3, #1
     a48:	9308      	str	r3, [sp, #32]
     a4a:	9a08      	ldr	r2, [sp, #32]
     a4c:	9b06      	ldr	r3, [sp, #24]
     a4e:	429a      	cmp	r2, r3
     a50:	d3f3      	bcc.n	a3a <init_data_bss+0xf6>
     a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a54:	3301      	adds	r3, #1
     a56:	9309      	str	r3, [sp, #36]	; 0x24
     a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a5a:	9b07      	ldr	r3, [sp, #28]
     a5c:	429a      	cmp	r2, r3
     a5e:	d3d6      	bcc.n	a0e <init_data_bss+0xca>
     a60:	bf00      	nop
     a62:	bf00      	nop
     a64:	b00a      	add	sp, #40	; 0x28
     a66:	4770      	bx	lr
     a68:	0000c4c8 	.word	0x0000c4c8
     a6c:	0000c4e4 	.word	0x0000c4e4

00000a70 <sys_m4_cache_init>:
     a70:	b084      	sub	sp, #16
     a72:	4603      	mov	r3, r0
     a74:	f88d 3007 	strb.w	r3, [sp, #7]
     a78:	2300      	movs	r3, #0
     a7a:	f88d 300f 	strb.w	r3, [sp, #15]
     a7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a82:	2b00      	cmp	r3, #0
     a84:	d118      	bne.n	ab8 <sys_m4_cache_init+0x48>
     a86:	4b10      	ldr	r3, [pc, #64]	; (ac8 <sys_m4_cache_init+0x58>)
     a88:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     a8c:	601a      	str	r2, [r3, #0]
     a8e:	4b0e      	ldr	r3, [pc, #56]	; (ac8 <sys_m4_cache_init+0x58>)
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	4a0d      	ldr	r2, [pc, #52]	; (ac8 <sys_m4_cache_init+0x58>)
     a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a98:	6013      	str	r3, [r2, #0]
     a9a:	bf00      	nop
     a9c:	4b0a      	ldr	r3, [pc, #40]	; (ac8 <sys_m4_cache_init+0x58>)
     a9e:	681b      	ldr	r3, [r3, #0]
     aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     aa8:	d0f8      	beq.n	a9c <sys_m4_cache_init+0x2c>
     aaa:	4b07      	ldr	r3, [pc, #28]	; (ac8 <sys_m4_cache_init+0x58>)
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	4a06      	ldr	r2, [pc, #24]	; (ac8 <sys_m4_cache_init+0x58>)
     ab0:	f043 0301 	orr.w	r3, r3, #1
     ab4:	6013      	str	r3, [r2, #0]
     ab6:	e002      	b.n	abe <sys_m4_cache_init+0x4e>
     ab8:	2301      	movs	r3, #1
     aba:	f88d 300f 	strb.w	r3, [sp, #15]
     abe:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ac2:	4618      	mov	r0, r3
     ac4:	b004      	add	sp, #16
     ac6:	4770      	bx	lr
     ac8:	e0082000 	.word	0xe0082000

00000acc <startup_go_to_user_mode>:
     acc:	bf00      	nop
     ace:	4770      	bx	lr

00000ad0 <Sys_GetCoreID>:
     ad0:	2300      	movs	r3, #0
     ad2:	4618      	mov	r0, r3
     ad4:	4770      	bx	lr

00000ad6 <HardFault_Handler>:
     ad6:	e7fe      	b.n	ad6 <HardFault_Handler>

00000ad8 <MemManage_Handler>:
     ad8:	e7fe      	b.n	ad8 <MemManage_Handler>

00000ada <BusFault_Handler>:
     ada:	e7fe      	b.n	ada <BusFault_Handler>

00000adc <UsageFault_Handler>:
     adc:	e7fe      	b.n	adc <UsageFault_Handler>

00000ade <SVC_Handler>:
     ade:	e7fe      	b.n	ade <SVC_Handler>

00000ae0 <DebugMon_Handler>:
     ae0:	e7fe      	b.n	ae0 <DebugMon_Handler>

00000ae2 <PendSV_Handler>:
     ae2:	e7fe      	b.n	ae2 <PendSV_Handler>

00000ae4 <SysTick_Handler>:
     ae4:	e7fe      	b.n	ae4 <SysTick_Handler>

00000ae6 <undefined_handler>:
     ae6:	e7fe      	b.n	ae6 <undefined_handler>

00000ae8 <OsIf_Timer_Dummy_GetCounter>:
     ae8:	2300      	movs	r3, #0
     aea:	4618      	mov	r0, r3
     aec:	4770      	bx	lr

00000aee <OsIf_Timer_Dummy_GetElapsed>:
     aee:	b082      	sub	sp, #8
     af0:	9001      	str	r0, [sp, #4]
     af2:	2301      	movs	r3, #1
     af4:	4618      	mov	r0, r3
     af6:	b002      	add	sp, #8
     af8:	4770      	bx	lr

00000afa <OsIf_Timer_Dummy_SetTimerFrequency>:
     afa:	b082      	sub	sp, #8
     afc:	9001      	str	r0, [sp, #4]
     afe:	bf00      	nop
     b00:	b002      	add	sp, #8
     b02:	4770      	bx	lr

00000b04 <OsIf_Timer_Dummy_MicrosToTicks>:
     b04:	b082      	sub	sp, #8
     b06:	9001      	str	r0, [sp, #4]
     b08:	9b01      	ldr	r3, [sp, #4]
     b0a:	4618      	mov	r0, r3
     b0c:	b002      	add	sp, #8
     b0e:	4770      	bx	lr

00000b10 <OsIf_Init>:
     b10:	b500      	push	{lr}
     b12:	b083      	sub	sp, #12
     b14:	9001      	str	r0, [sp, #4]
     b16:	f000 f86d 	bl	bf4 <OsIf_Timer_System_Init>
     b1a:	bf00      	nop
     b1c:	b003      	add	sp, #12
     b1e:	f85d fb04 	ldr.w	pc, [sp], #4

00000b22 <OsIf_GetCounter>:
     b22:	b500      	push	{lr}
     b24:	b085      	sub	sp, #20
     b26:	9001      	str	r0, [sp, #4]
     b28:	2300      	movs	r3, #0
     b2a:	9303      	str	r3, [sp, #12]
     b2c:	9b01      	ldr	r3, [sp, #4]
     b2e:	2b00      	cmp	r3, #0
     b30:	d003      	beq.n	b3a <OsIf_GetCounter+0x18>
     b32:	9b01      	ldr	r3, [sp, #4]
     b34:	2b01      	cmp	r3, #1
     b36:	d004      	beq.n	b42 <OsIf_GetCounter+0x20>
     b38:	e007      	b.n	b4a <OsIf_GetCounter+0x28>
     b3a:	f7ff ffd5 	bl	ae8 <OsIf_Timer_Dummy_GetCounter>
     b3e:	9003      	str	r0, [sp, #12]
     b40:	e003      	b.n	b4a <OsIf_GetCounter+0x28>
     b42:	f000 f873 	bl	c2c <OsIf_Timer_System_GetCounter>
     b46:	9003      	str	r0, [sp, #12]
     b48:	bf00      	nop
     b4a:	9b03      	ldr	r3, [sp, #12]
     b4c:	4618      	mov	r0, r3
     b4e:	b005      	add	sp, #20
     b50:	f85d fb04 	ldr.w	pc, [sp], #4

00000b54 <OsIf_GetElapsed>:
     b54:	b500      	push	{lr}
     b56:	b085      	sub	sp, #20
     b58:	9001      	str	r0, [sp, #4]
     b5a:	9100      	str	r1, [sp, #0]
     b5c:	2300      	movs	r3, #0
     b5e:	9303      	str	r3, [sp, #12]
     b60:	9b00      	ldr	r3, [sp, #0]
     b62:	2b00      	cmp	r3, #0
     b64:	d003      	beq.n	b6e <OsIf_GetElapsed+0x1a>
     b66:	9b00      	ldr	r3, [sp, #0]
     b68:	2b01      	cmp	r3, #1
     b6a:	d005      	beq.n	b78 <OsIf_GetElapsed+0x24>
     b6c:	e009      	b.n	b82 <OsIf_GetElapsed+0x2e>
     b6e:	9801      	ldr	r0, [sp, #4]
     b70:	f7ff ffbd 	bl	aee <OsIf_Timer_Dummy_GetElapsed>
     b74:	9003      	str	r0, [sp, #12]
     b76:	e004      	b.n	b82 <OsIf_GetElapsed+0x2e>
     b78:	9801      	ldr	r0, [sp, #4]
     b7a:	f000 f865 	bl	c48 <OsIf_Timer_System_GetElapsed>
     b7e:	9003      	str	r0, [sp, #12]
     b80:	bf00      	nop
     b82:	9b03      	ldr	r3, [sp, #12]
     b84:	4618      	mov	r0, r3
     b86:	b005      	add	sp, #20
     b88:	f85d fb04 	ldr.w	pc, [sp], #4

00000b8c <OsIf_SetTimerFrequency>:
     b8c:	b500      	push	{lr}
     b8e:	b083      	sub	sp, #12
     b90:	9001      	str	r0, [sp, #4]
     b92:	9100      	str	r1, [sp, #0]
     b94:	9b00      	ldr	r3, [sp, #0]
     b96:	2b00      	cmp	r3, #0
     b98:	d003      	beq.n	ba2 <OsIf_SetTimerFrequency+0x16>
     b9a:	9b00      	ldr	r3, [sp, #0]
     b9c:	2b01      	cmp	r3, #1
     b9e:	d004      	beq.n	baa <OsIf_SetTimerFrequency+0x1e>
     ba0:	e007      	b.n	bb2 <OsIf_SetTimerFrequency+0x26>
     ba2:	9801      	ldr	r0, [sp, #4]
     ba4:	f7ff ffa9 	bl	afa <OsIf_Timer_Dummy_SetTimerFrequency>
     ba8:	e003      	b.n	bb2 <OsIf_SetTimerFrequency+0x26>
     baa:	9801      	ldr	r0, [sp, #4]
     bac:	f000 f85c 	bl	c68 <OsIf_Timer_System_SetTimerFrequency>
     bb0:	bf00      	nop
     bb2:	bf00      	nop
     bb4:	b003      	add	sp, #12
     bb6:	f85d fb04 	ldr.w	pc, [sp], #4

00000bba <OsIf_MicrosToTicks>:
     bba:	b500      	push	{lr}
     bbc:	b085      	sub	sp, #20
     bbe:	9001      	str	r0, [sp, #4]
     bc0:	9100      	str	r1, [sp, #0]
     bc2:	2300      	movs	r3, #0
     bc4:	9303      	str	r3, [sp, #12]
     bc6:	9b00      	ldr	r3, [sp, #0]
     bc8:	2b00      	cmp	r3, #0
     bca:	d003      	beq.n	bd4 <OsIf_MicrosToTicks+0x1a>
     bcc:	9b00      	ldr	r3, [sp, #0]
     bce:	2b01      	cmp	r3, #1
     bd0:	d005      	beq.n	bde <OsIf_MicrosToTicks+0x24>
     bd2:	e009      	b.n	be8 <OsIf_MicrosToTicks+0x2e>
     bd4:	9801      	ldr	r0, [sp, #4]
     bd6:	f7ff ff95 	bl	b04 <OsIf_Timer_Dummy_MicrosToTicks>
     bda:	9003      	str	r0, [sp, #12]
     bdc:	e004      	b.n	be8 <OsIf_MicrosToTicks+0x2e>
     bde:	9801      	ldr	r0, [sp, #4]
     be0:	f000 f850 	bl	c84 <OsIf_Timer_System_MicrosToTicks>
     be4:	9003      	str	r0, [sp, #12]
     be6:	bf00      	nop
     be8:	9b03      	ldr	r3, [sp, #12]
     bea:	4618      	mov	r0, r3
     bec:	b005      	add	sp, #20
     bee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000bf4 <OsIf_Timer_System_Init>:
     bf4:	b500      	push	{lr}
     bf6:	b083      	sub	sp, #12
     bf8:	2300      	movs	r3, #0
     bfa:	9301      	str	r3, [sp, #4]
     bfc:	4a09      	ldr	r2, [pc, #36]	; (c24 <OsIf_Timer_System_Init+0x30>)
     bfe:	9b01      	ldr	r3, [sp, #4]
     c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     c04:	685a      	ldr	r2, [r3, #4]
     c06:	4908      	ldr	r1, [pc, #32]	; (c28 <OsIf_Timer_System_Init+0x34>)
     c08:	9b01      	ldr	r3, [sp, #4]
     c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     c0e:	4a06      	ldr	r2, [pc, #24]	; (c28 <OsIf_Timer_System_Init+0x34>)
     c10:	9b01      	ldr	r3, [sp, #4]
     c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     c16:	4618      	mov	r0, r3
     c18:	f000 f868 	bl	cec <OsIf_Timer_System_Internal_Init>
     c1c:	bf00      	nop
     c1e:	b003      	add	sp, #12
     c20:	f85d fb04 	ldr.w	pc, [sp], #4
     c24:	0000c2ec 	.word	0x0000c2ec
     c28:	1fff8b40 	.word	0x1fff8b40

00000c2c <OsIf_Timer_System_GetCounter>:
     c2c:	b500      	push	{lr}
     c2e:	b083      	sub	sp, #12
     c30:	2300      	movs	r3, #0
     c32:	9301      	str	r3, [sp, #4]
     c34:	2300      	movs	r3, #0
     c36:	9300      	str	r3, [sp, #0]
     c38:	f000 f86c 	bl	d14 <OsIf_Timer_System_Internal_GetCounter>
     c3c:	9001      	str	r0, [sp, #4]
     c3e:	9b01      	ldr	r3, [sp, #4]
     c40:	4618      	mov	r0, r3
     c42:	b003      	add	sp, #12
     c44:	f85d fb04 	ldr.w	pc, [sp], #4

00000c48 <OsIf_Timer_System_GetElapsed>:
     c48:	b500      	push	{lr}
     c4a:	b085      	sub	sp, #20
     c4c:	9001      	str	r0, [sp, #4]
     c4e:	2300      	movs	r3, #0
     c50:	9303      	str	r3, [sp, #12]
     c52:	2300      	movs	r3, #0
     c54:	9302      	str	r3, [sp, #8]
     c56:	9801      	ldr	r0, [sp, #4]
     c58:	f000 f864 	bl	d24 <OsIf_Timer_System_Internal_GetElapsed>
     c5c:	9003      	str	r0, [sp, #12]
     c5e:	9b03      	ldr	r3, [sp, #12]
     c60:	4618      	mov	r0, r3
     c62:	b005      	add	sp, #20
     c64:	f85d fb04 	ldr.w	pc, [sp], #4

00000c68 <OsIf_Timer_System_SetTimerFrequency>:
     c68:	b084      	sub	sp, #16
     c6a:	9001      	str	r0, [sp, #4]
     c6c:	2300      	movs	r3, #0
     c6e:	9303      	str	r3, [sp, #12]
     c70:	4903      	ldr	r1, [pc, #12]	; (c80 <OsIf_Timer_System_SetTimerFrequency+0x18>)
     c72:	9b03      	ldr	r3, [sp, #12]
     c74:	9a01      	ldr	r2, [sp, #4]
     c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     c7a:	bf00      	nop
     c7c:	b004      	add	sp, #16
     c7e:	4770      	bx	lr
     c80:	1fff8b40 	.word	0x1fff8b40

00000c84 <OsIf_Timer_System_MicrosToTicks>:
     c84:	b5f0      	push	{r4, r5, r6, r7, lr}
     c86:	b087      	sub	sp, #28
     c88:	9001      	str	r0, [sp, #4]
     c8a:	2100      	movs	r1, #0
     c8c:	9105      	str	r1, [sp, #20]
     c8e:	2100      	movs	r1, #0
     c90:	9104      	str	r1, [sp, #16]
     c92:	9901      	ldr	r1, [sp, #4]
     c94:	2000      	movs	r0, #0
     c96:	460e      	mov	r6, r1
     c98:	4607      	mov	r7, r0
     c9a:	4812      	ldr	r0, [pc, #72]	; (ce4 <OsIf_Timer_System_MicrosToTicks+0x60>)
     c9c:	9904      	ldr	r1, [sp, #16]
     c9e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
     ca2:	2000      	movs	r0, #0
     ca4:	460c      	mov	r4, r1
     ca6:	4605      	mov	r5, r0
     ca8:	fb04 f007 	mul.w	r0, r4, r7
     cac:	fb06 f105 	mul.w	r1, r6, r5
     cb0:	4401      	add	r1, r0
     cb2:	fba6 2304 	umull	r2, r3, r6, r4
     cb6:	4419      	add	r1, r3
     cb8:	460b      	mov	r3, r1
     cba:	e9cd 2302 	strd	r2, r3, [sp, #8]
     cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
     cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     cc6:	4a08      	ldr	r2, [pc, #32]	; (ce8 <OsIf_Timer_System_MicrosToTicks+0x64>)
     cc8:	f04f 0300 	mov.w	r3, #0
     ccc:	f7ff fc6a 	bl	5a4 <__aeabi_uldivmod>
     cd0:	4602      	mov	r2, r0
     cd2:	460b      	mov	r3, r1
     cd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
     cd8:	9b02      	ldr	r3, [sp, #8]
     cda:	9305      	str	r3, [sp, #20]
     cdc:	9b05      	ldr	r3, [sp, #20]
     cde:	4618      	mov	r0, r3
     ce0:	b007      	add	sp, #28
     ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ce4:	1fff8b40 	.word	0x1fff8b40
     ce8:	000f4240 	.word	0x000f4240

00000cec <OsIf_Timer_System_Internal_Init>:
     cec:	b082      	sub	sp, #8
     cee:	9001      	str	r0, [sp, #4]
     cf0:	4b07      	ldr	r3, [pc, #28]	; (d10 <OsIf_Timer_System_Internal_Init+0x24>)
     cf2:	2200      	movs	r2, #0
     cf4:	601a      	str	r2, [r3, #0]
     cf6:	4b06      	ldr	r3, [pc, #24]	; (d10 <OsIf_Timer_System_Internal_Init+0x24>)
     cf8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
     cfc:	605a      	str	r2, [r3, #4]
     cfe:	4b04      	ldr	r3, [pc, #16]	; (d10 <OsIf_Timer_System_Internal_Init+0x24>)
     d00:	2200      	movs	r2, #0
     d02:	609a      	str	r2, [r3, #8]
     d04:	4b02      	ldr	r3, [pc, #8]	; (d10 <OsIf_Timer_System_Internal_Init+0x24>)
     d06:	2205      	movs	r2, #5
     d08:	601a      	str	r2, [r3, #0]
     d0a:	bf00      	nop
     d0c:	b002      	add	sp, #8
     d0e:	4770      	bx	lr
     d10:	e000e010 	.word	0xe000e010

00000d14 <OsIf_Timer_System_Internal_GetCounter>:
     d14:	4b02      	ldr	r3, [pc, #8]	; (d20 <OsIf_Timer_System_Internal_GetCounter+0xc>)
     d16:	689b      	ldr	r3, [r3, #8]
     d18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d1c:	4618      	mov	r0, r3
     d1e:	4770      	bx	lr
     d20:	e000e010 	.word	0xe000e010

00000d24 <OsIf_Timer_System_Internal_GetElapsed>:
     d24:	b084      	sub	sp, #16
     d26:	9001      	str	r0, [sp, #4]
     d28:	4b10      	ldr	r3, [pc, #64]	; (d6c <OsIf_Timer_System_Internal_GetElapsed+0x48>)
     d2a:	689b      	ldr	r3, [r3, #8]
     d2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d30:	9302      	str	r3, [sp, #8]
     d32:	2300      	movs	r3, #0
     d34:	9303      	str	r3, [sp, #12]
     d36:	9b01      	ldr	r3, [sp, #4]
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	9a02      	ldr	r2, [sp, #8]
     d3c:	429a      	cmp	r2, r3
     d3e:	d909      	bls.n	d54 <OsIf_Timer_System_Internal_GetElapsed+0x30>
     d40:	9b01      	ldr	r3, [sp, #4]
     d42:	681a      	ldr	r2, [r3, #0]
     d44:	9b02      	ldr	r3, [sp, #8]
     d46:	1ad3      	subs	r3, r2, r3
     d48:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
     d4c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     d50:	9303      	str	r3, [sp, #12]
     d52:	e004      	b.n	d5e <OsIf_Timer_System_Internal_GetElapsed+0x3a>
     d54:	9b01      	ldr	r3, [sp, #4]
     d56:	681a      	ldr	r2, [r3, #0]
     d58:	9b02      	ldr	r3, [sp, #8]
     d5a:	1ad3      	subs	r3, r2, r3
     d5c:	9303      	str	r3, [sp, #12]
     d5e:	9b01      	ldr	r3, [sp, #4]
     d60:	9a02      	ldr	r2, [sp, #8]
     d62:	601a      	str	r2, [r3, #0]
     d64:	9b03      	ldr	r3, [sp, #12]
     d66:	4618      	mov	r0, r3
     d68:	b004      	add	sp, #16
     d6a:	4770      	bx	lr
     d6c:	e000e010 	.word	0xe000e010

00000d70 <Clock_Ip_NotificatonsEmptyCallback>:
     d70:	b082      	sub	sp, #8
     d72:	9001      	str	r0, [sp, #4]
     d74:	9100      	str	r1, [sp, #0]
     d76:	bf00      	nop
     d78:	b002      	add	sp, #8
     d7a:	4770      	bx	lr

00000d7c <Clock_Ip_UpdateDriverContext>:
     d7c:	b500      	push	{lr}
     d7e:	b085      	sub	sp, #20
     d80:	9001      	str	r0, [sp, #4]
     d82:	4b24      	ldr	r3, [pc, #144]	; (e14 <Clock_Ip_UpdateDriverContext+0x98>)
     d84:	2201      	movs	r2, #1
     d86:	701a      	strb	r2, [r3, #0]
     d88:	4b23      	ldr	r3, [pc, #140]	; (e18 <Clock_Ip_UpdateDriverContext+0x9c>)
     d8a:	681b      	ldr	r3, [r3, #0]
     d8c:	2102      	movs	r1, #2
     d8e:	4618      	mov	r0, r3
     d90:	f003 fc32 	bl	45f8 <Clock_Ip_Command>
     d94:	2300      	movs	r3, #0
     d96:	f88d 300f 	strb.w	r3, [sp, #15]
     d9a:	e015      	b.n	dc8 <Clock_Ip_UpdateDriverContext+0x4c>
     d9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     da0:	9a01      	ldr	r2, [sp, #4]
     da2:	334a      	adds	r3, #74	; 0x4a
     da4:	00db      	lsls	r3, r3, #3
     da6:	4413      	add	r3, r2
     da8:	6858      	ldr	r0, [r3, #4]
     daa:	f89d 300f 	ldrb.w	r3, [sp, #15]
     dae:	9a01      	ldr	r2, [sp, #4]
     db0:	334a      	adds	r3, #74	; 0x4a
     db2:	00db      	lsls	r3, r3, #3
     db4:	4413      	add	r3, r2
     db6:	689b      	ldr	r3, [r3, #8]
     db8:	4619      	mov	r1, r3
     dba:	f001 fadc 	bl	2376 <Clock_Ip_SetExternalSignalFrequency>
     dbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
     dc2:	3301      	adds	r3, #1
     dc4:	f88d 300f 	strb.w	r3, [sp, #15]
     dc8:	9b01      	ldr	r3, [sp, #4]
     dca:	7bdb      	ldrb	r3, [r3, #15]
     dcc:	f89d 200f 	ldrb.w	r2, [sp, #15]
     dd0:	429a      	cmp	r2, r3
     dd2:	d3e3      	bcc.n	d9c <Clock_Ip_UpdateDriverContext+0x20>
     dd4:	f000 f824 	bl	e20 <Clock_Ip_CallEmptyCallbacks>
     dd8:	2301      	movs	r3, #1
     dda:	f88d 300f 	strb.w	r3, [sp, #15]
     dde:	e00e      	b.n	dfe <Clock_Ip_UpdateDriverContext+0x82>
     de0:	f89d 200f 	ldrb.w	r2, [sp, #15]
     de4:	9b01      	ldr	r3, [sp, #4]
     de6:	327e      	adds	r2, #126	; 0x7e
     de8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
     dec:	490b      	ldr	r1, [pc, #44]	; (e1c <Clock_Ip_UpdateDriverContext+0xa0>)
     dee:	f89d 200f 	ldrb.w	r2, [sp, #15]
     df2:	54ca      	strb	r2, [r1, r3]
     df4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     df8:	3301      	adds	r3, #1
     dfa:	f88d 300f 	strb.w	r3, [sp, #15]
     dfe:	9b01      	ldr	r3, [sp, #4]
     e00:	7cdb      	ldrb	r3, [r3, #19]
     e02:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e06:	429a      	cmp	r2, r3
     e08:	d3ea      	bcc.n	de0 <Clock_Ip_UpdateDriverContext+0x64>
     e0a:	bf00      	nop
     e0c:	bf00      	nop
     e0e:	b005      	add	sp, #20
     e10:	f85d fb04 	ldr.w	pc, [sp], #4
     e14:	1fff8b10 	.word	0x1fff8b10
     e18:	1fff8b44 	.word	0x1fff8b44
     e1c:	1fff8b50 	.word	0x1fff8b50

00000e20 <Clock_Ip_CallEmptyCallbacks>:
     e20:	b508      	push	{r3, lr}
     e22:	4b23      	ldr	r3, [pc, #140]	; (eb0 <Clock_Ip_CallEmptyCallbacks+0x90>)
     e24:	781b      	ldrb	r3, [r3, #0]
     e26:	f083 0301 	eor.w	r3, r3, #1
     e2a:	b2db      	uxtb	r3, r3
     e2c:	2b00      	cmp	r3, #0
     e2e:	d03d      	beq.n	eac <Clock_Ip_CallEmptyCallbacks+0x8c>
     e30:	4b1f      	ldr	r3, [pc, #124]	; (eb0 <Clock_Ip_CallEmptyCallbacks+0x90>)
     e32:	2201      	movs	r2, #1
     e34:	701a      	strb	r2, [r3, #0]
     e36:	4b1f      	ldr	r3, [pc, #124]	; (eb4 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e38:	685b      	ldr	r3, [r3, #4]
     e3a:	2100      	movs	r1, #0
     e3c:	2000      	movs	r0, #0
     e3e:	4798      	blx	r3
     e40:	4b1c      	ldr	r3, [pc, #112]	; (eb4 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e42:	689b      	ldr	r3, [r3, #8]
     e44:	2057      	movs	r0, #87	; 0x57
     e46:	4798      	blx	r3
     e48:	4b1b      	ldr	r3, [pc, #108]	; (eb8 <Clock_Ip_CallEmptyCallbacks+0x98>)
     e4a:	681b      	ldr	r3, [r3, #0]
     e4c:	2000      	movs	r0, #0
     e4e:	4798      	blx	r3
     e50:	4b1a      	ldr	r3, [pc, #104]	; (ebc <Clock_Ip_CallEmptyCallbacks+0x9c>)
     e52:	681b      	ldr	r3, [r3, #0]
     e54:	2000      	movs	r0, #0
     e56:	4798      	blx	r3
     e58:	4b19      	ldr	r3, [pc, #100]	; (ec0 <Clock_Ip_CallEmptyCallbacks+0xa0>)
     e5a:	681b      	ldr	r3, [r3, #0]
     e5c:	2000      	movs	r0, #0
     e5e:	4798      	blx	r3
     e60:	4b18      	ldr	r3, [pc, #96]	; (ec4 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     e62:	685b      	ldr	r3, [r3, #4]
     e64:	2000      	movs	r0, #0
     e66:	4798      	blx	r3
     e68:	4b16      	ldr	r3, [pc, #88]	; (ec4 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     e6a:	689b      	ldr	r3, [r3, #8]
     e6c:	2057      	movs	r0, #87	; 0x57
     e6e:	4798      	blx	r3
     e70:	4b15      	ldr	r3, [pc, #84]	; (ec8 <Clock_Ip_CallEmptyCallbacks+0xa8>)
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	2000      	movs	r0, #0
     e76:	4798      	blx	r3
     e78:	4b13      	ldr	r3, [pc, #76]	; (ec8 <Clock_Ip_CallEmptyCallbacks+0xa8>)
     e7a:	685b      	ldr	r3, [r3, #4]
     e7c:	2100      	movs	r1, #0
     e7e:	2057      	movs	r0, #87	; 0x57
     e80:	4798      	blx	r3
     e82:	4b12      	ldr	r3, [pc, #72]	; (ecc <Clock_Ip_CallEmptyCallbacks+0xac>)
     e84:	681b      	ldr	r3, [r3, #0]
     e86:	2000      	movs	r0, #0
     e88:	4798      	blx	r3
     e8a:	4b11      	ldr	r3, [pc, #68]	; (ed0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     e8c:	685b      	ldr	r3, [r3, #4]
     e8e:	2000      	movs	r0, #0
     e90:	4798      	blx	r3
     e92:	4b0f      	ldr	r3, [pc, #60]	; (ed0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     e94:	689b      	ldr	r3, [r3, #8]
     e96:	2057      	movs	r0, #87	; 0x57
     e98:	4798      	blx	r3
     e9a:	4b0e      	ldr	r3, [pc, #56]	; (ed4 <Clock_Ip_CallEmptyCallbacks+0xb4>)
     e9c:	685b      	ldr	r3, [r3, #4]
     e9e:	2000      	movs	r0, #0
     ea0:	4798      	blx	r3
     ea2:	4b0d      	ldr	r3, [pc, #52]	; (ed8 <Clock_Ip_CallEmptyCallbacks+0xb8>)
     ea4:	681b      	ldr	r3, [r3, #0]
     ea6:	2100      	movs	r1, #0
     ea8:	2000      	movs	r0, #0
     eaa:	4798      	blx	r3
     eac:	bf00      	nop
     eae:	bd08      	pop	{r3, pc}
     eb0:	1fff8b48 	.word	0x1fff8b48
     eb4:	0000bc4c 	.word	0x0000bc4c
     eb8:	0000bb60 	.word	0x0000bb60
     ebc:	0000bb9c 	.word	0x0000bb9c
     ec0:	0000bba4 	.word	0x0000bba4
     ec4:	0000bbcc 	.word	0x0000bbcc
     ec8:	0000bbd8 	.word	0x0000bbd8
     ecc:	0000bc10 	.word	0x0000bc10
     ed0:	0000bc5c 	.word	0x0000bc5c
     ed4:	0000bc88 	.word	0x0000bc88
     ed8:	0000bc84 	.word	0x0000bc84

00000edc <Clock_Ip_ResetClockConfiguration>:
     edc:	b500      	push	{lr}
     ede:	b085      	sub	sp, #20
     ee0:	9001      	str	r0, [sp, #4]
     ee2:	9b01      	ldr	r3, [sp, #4]
     ee4:	7adb      	ldrb	r3, [r3, #11]
     ee6:	9303      	str	r3, [sp, #12]
     ee8:	e01f      	b.n	f2a <Clock_Ip_ResetClockConfiguration+0x4e>
     eea:	9b03      	ldr	r3, [sp, #12]
     eec:	1e5a      	subs	r2, r3, #1
     eee:	9b01      	ldr	r3, [sp, #4]
     ef0:	320d      	adds	r2, #13
     ef2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
     ef6:	495a      	ldr	r1, [pc, #360]	; (1060 <Clock_Ip_ResetClockConfiguration+0x184>)
     ef8:	4613      	mov	r3, r2
     efa:	00db      	lsls	r3, r3, #3
     efc:	4413      	add	r3, r2
     efe:	440b      	add	r3, r1
     f00:	3301      	adds	r3, #1
     f02:	781b      	ldrb	r3, [r3, #0]
     f04:	461a      	mov	r2, r3
     f06:	4b57      	ldr	r3, [pc, #348]	; (1064 <Clock_Ip_ResetClockConfiguration+0x188>)
     f08:	5c9b      	ldrb	r3, [r3, r2]
     f0a:	9302      	str	r3, [sp, #8]
     f0c:	4a56      	ldr	r2, [pc, #344]	; (1068 <Clock_Ip_ResetClockConfiguration+0x18c>)
     f0e:	9b02      	ldr	r3, [sp, #8]
     f10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     f14:	9a03      	ldr	r2, [sp, #12]
     f16:	3a01      	subs	r2, #1
     f18:	320d      	adds	r2, #13
     f1a:	00d2      	lsls	r2, r2, #3
     f1c:	9901      	ldr	r1, [sp, #4]
     f1e:	440a      	add	r2, r1
     f20:	4610      	mov	r0, r2
     f22:	4798      	blx	r3
     f24:	9b03      	ldr	r3, [sp, #12]
     f26:	3b01      	subs	r3, #1
     f28:	9303      	str	r3, [sp, #12]
     f2a:	9b03      	ldr	r3, [sp, #12]
     f2c:	2b00      	cmp	r3, #0
     f2e:	d1dc      	bne.n	eea <Clock_Ip_ResetClockConfiguration+0xe>
     f30:	9b01      	ldr	r3, [sp, #4]
     f32:	7b9b      	ldrb	r3, [r3, #14]
     f34:	9303      	str	r3, [sp, #12]
     f36:	e026      	b.n	f86 <Clock_Ip_ResetClockConfiguration+0xaa>
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	3b01      	subs	r3, #1
     f3c:	9a01      	ldr	r2, [sp, #4]
     f3e:	3324      	adds	r3, #36	; 0x24
     f40:	011b      	lsls	r3, r3, #4
     f42:	4413      	add	r3, r2
     f44:	3304      	adds	r3, #4
     f46:	681a      	ldr	r2, [r3, #0]
     f48:	4945      	ldr	r1, [pc, #276]	; (1060 <Clock_Ip_ResetClockConfiguration+0x184>)
     f4a:	4613      	mov	r3, r2
     f4c:	00db      	lsls	r3, r3, #3
     f4e:	4413      	add	r3, r2
     f50:	440b      	add	r3, r1
     f52:	3301      	adds	r3, #1
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	461a      	mov	r2, r3
     f58:	4b44      	ldr	r3, [pc, #272]	; (106c <Clock_Ip_ResetClockConfiguration+0x190>)
     f5a:	5c9b      	ldrb	r3, [r3, r2]
     f5c:	9302      	str	r3, [sp, #8]
     f5e:	4944      	ldr	r1, [pc, #272]	; (1070 <Clock_Ip_ResetClockConfiguration+0x194>)
     f60:	9a02      	ldr	r2, [sp, #8]
     f62:	4613      	mov	r3, r2
     f64:	005b      	lsls	r3, r3, #1
     f66:	4413      	add	r3, r2
     f68:	009b      	lsls	r3, r3, #2
     f6a:	440b      	add	r3, r1
     f6c:	681b      	ldr	r3, [r3, #0]
     f6e:	9a03      	ldr	r2, [sp, #12]
     f70:	3a01      	subs	r2, #1
     f72:	3224      	adds	r2, #36	; 0x24
     f74:	0112      	lsls	r2, r2, #4
     f76:	9901      	ldr	r1, [sp, #4]
     f78:	440a      	add	r2, r1
     f7a:	3204      	adds	r2, #4
     f7c:	4610      	mov	r0, r2
     f7e:	4798      	blx	r3
     f80:	9b03      	ldr	r3, [sp, #12]
     f82:	3b01      	subs	r3, #1
     f84:	9303      	str	r3, [sp, #12]
     f86:	9b03      	ldr	r3, [sp, #12]
     f88:	2b00      	cmp	r3, #0
     f8a:	d1d5      	bne.n	f38 <Clock_Ip_ResetClockConfiguration+0x5c>
     f8c:	9b01      	ldr	r3, [sp, #4]
     f8e:	7a9b      	ldrb	r3, [r3, #10]
     f90:	9303      	str	r3, [sp, #12]
     f92:	e02a      	b.n	fea <Clock_Ip_ResetClockConfiguration+0x10e>
     f94:	9b03      	ldr	r3, [sp, #12]
     f96:	1e5a      	subs	r2, r3, #1
     f98:	9901      	ldr	r1, [sp, #4]
     f9a:	4613      	mov	r3, r2
     f9c:	009b      	lsls	r3, r3, #2
     f9e:	4413      	add	r3, r2
     fa0:	00db      	lsls	r3, r3, #3
     fa2:	440b      	add	r3, r1
     fa4:	3340      	adds	r3, #64	; 0x40
     fa6:	681a      	ldr	r2, [r3, #0]
     fa8:	492d      	ldr	r1, [pc, #180]	; (1060 <Clock_Ip_ResetClockConfiguration+0x184>)
     faa:	4613      	mov	r3, r2
     fac:	00db      	lsls	r3, r3, #3
     fae:	4413      	add	r3, r2
     fb0:	440b      	add	r3, r1
     fb2:	3301      	adds	r3, #1
     fb4:	781b      	ldrb	r3, [r3, #0]
     fb6:	461a      	mov	r2, r3
     fb8:	4b2e      	ldr	r3, [pc, #184]	; (1074 <Clock_Ip_ResetClockConfiguration+0x198>)
     fba:	5c9b      	ldrb	r3, [r3, r2]
     fbc:	9302      	str	r3, [sp, #8]
     fbe:	492e      	ldr	r1, [pc, #184]	; (1078 <Clock_Ip_ResetClockConfiguration+0x19c>)
     fc0:	9a02      	ldr	r2, [sp, #8]
     fc2:	4613      	mov	r3, r2
     fc4:	009b      	lsls	r3, r3, #2
     fc6:	4413      	add	r3, r2
     fc8:	009b      	lsls	r3, r3, #2
     fca:	440b      	add	r3, r1
     fcc:	6819      	ldr	r1, [r3, #0]
     fce:	9b03      	ldr	r3, [sp, #12]
     fd0:	1e5a      	subs	r2, r3, #1
     fd2:	4613      	mov	r3, r2
     fd4:	009b      	lsls	r3, r3, #2
     fd6:	4413      	add	r3, r2
     fd8:	00db      	lsls	r3, r3, #3
     fda:	3340      	adds	r3, #64	; 0x40
     fdc:	9a01      	ldr	r2, [sp, #4]
     fde:	4413      	add	r3, r2
     fe0:	4618      	mov	r0, r3
     fe2:	4788      	blx	r1
     fe4:	9b03      	ldr	r3, [sp, #12]
     fe6:	3b01      	subs	r3, #1
     fe8:	9303      	str	r3, [sp, #12]
     fea:	9b03      	ldr	r3, [sp, #12]
     fec:	2b00      	cmp	r3, #0
     fee:	d1d1      	bne.n	f94 <Clock_Ip_ResetClockConfiguration+0xb8>
     ff0:	9b01      	ldr	r3, [sp, #4]
     ff2:	7a5b      	ldrb	r3, [r3, #9]
     ff4:	9303      	str	r3, [sp, #12]
     ff6:	e02b      	b.n	1050 <Clock_Ip_ResetClockConfiguration+0x174>
     ff8:	9b03      	ldr	r3, [sp, #12]
     ffa:	1e5a      	subs	r2, r3, #1
     ffc:	9901      	ldr	r1, [sp, #4]
     ffe:	4613      	mov	r3, r2
    1000:	009b      	lsls	r3, r3, #2
    1002:	4413      	add	r3, r2
    1004:	009b      	lsls	r3, r3, #2
    1006:	440b      	add	r3, r1
    1008:	332c      	adds	r3, #44	; 0x2c
    100a:	681a      	ldr	r2, [r3, #0]
    100c:	4914      	ldr	r1, [pc, #80]	; (1060 <Clock_Ip_ResetClockConfiguration+0x184>)
    100e:	4613      	mov	r3, r2
    1010:	00db      	lsls	r3, r3, #3
    1012:	4413      	add	r3, r2
    1014:	440b      	add	r3, r1
    1016:	3301      	adds	r3, #1
    1018:	781b      	ldrb	r3, [r3, #0]
    101a:	461a      	mov	r2, r3
    101c:	4b17      	ldr	r3, [pc, #92]	; (107c <Clock_Ip_ResetClockConfiguration+0x1a0>)
    101e:	5c9b      	ldrb	r3, [r3, r2]
    1020:	9302      	str	r3, [sp, #8]
    1022:	4917      	ldr	r1, [pc, #92]	; (1080 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1024:	9a02      	ldr	r2, [sp, #8]
    1026:	4613      	mov	r3, r2
    1028:	009b      	lsls	r3, r3, #2
    102a:	4413      	add	r3, r2
    102c:	009b      	lsls	r3, r3, #2
    102e:	440b      	add	r3, r1
    1030:	6819      	ldr	r1, [r3, #0]
    1032:	9b03      	ldr	r3, [sp, #12]
    1034:	1e5a      	subs	r2, r3, #1
    1036:	4613      	mov	r3, r2
    1038:	009b      	lsls	r3, r3, #2
    103a:	4413      	add	r3, r2
    103c:	009b      	lsls	r3, r3, #2
    103e:	3328      	adds	r3, #40	; 0x28
    1040:	9a01      	ldr	r2, [sp, #4]
    1042:	4413      	add	r3, r2
    1044:	3304      	adds	r3, #4
    1046:	4618      	mov	r0, r3
    1048:	4788      	blx	r1
    104a:	9b03      	ldr	r3, [sp, #12]
    104c:	3b01      	subs	r3, #1
    104e:	9303      	str	r3, [sp, #12]
    1050:	9b03      	ldr	r3, [sp, #12]
    1052:	2b00      	cmp	r3, #0
    1054:	d1d0      	bne.n	ff8 <Clock_Ip_ResetClockConfiguration+0x11c>
    1056:	bf00      	nop
    1058:	bf00      	nop
    105a:	b005      	add	sp, #20
    105c:	f85d fb04 	ldr.w	pc, [sp], #4
    1060:	0000b650 	.word	0x0000b650
    1064:	0000b620 	.word	0x0000b620
    1068:	0000bc88 	.word	0x0000bc88
    106c:	0000b600 	.word	0x0000b600
    1070:	0000bbcc 	.word	0x0000bbcc
    1074:	0000b610 	.word	0x0000b610
    1078:	0000bc5c 	.word	0x0000bc5c
    107c:	0000b5d0 	.word	0x0000b5d0
    1080:	0000bba4 	.word	0x0000bba4

00001084 <Clock_Ip_Init>:
    1084:	b500      	push	{lr}
    1086:	b085      	sub	sp, #20
    1088:	9001      	str	r0, [sp, #4]
    108a:	2301      	movs	r3, #1
    108c:	9303      	str	r3, [sp, #12]
    108e:	9801      	ldr	r0, [sp, #4]
    1090:	f000 f818 	bl	10c4 <Clock_Ip_InitClock>
    1094:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <Clock_Ip_Init+0x3c>)
    1096:	781b      	ldrb	r3, [r3, #0]
    1098:	2b00      	cmp	r3, #0
    109a:	d00a      	beq.n	10b2 <Clock_Ip_Init+0x2e>
    109c:	f000 fb74 	bl	1788 <Clock_Ip_GetPllStatus>
    10a0:	9002      	str	r0, [sp, #8]
    10a2:	9b02      	ldr	r3, [sp, #8]
    10a4:	2b00      	cmp	r3, #0
    10a6:	d106      	bne.n	10b6 <Clock_Ip_Init+0x32>
    10a8:	f000 fbf2 	bl	1890 <Clock_Ip_DistributePll>
    10ac:	2300      	movs	r3, #0
    10ae:	9303      	str	r3, [sp, #12]
    10b0:	e001      	b.n	10b6 <Clock_Ip_Init+0x32>
    10b2:	2300      	movs	r3, #0
    10b4:	9303      	str	r3, [sp, #12]
    10b6:	9b03      	ldr	r3, [sp, #12]
    10b8:	4618      	mov	r0, r3
    10ba:	b005      	add	sp, #20
    10bc:	f85d fb04 	ldr.w	pc, [sp], #4
    10c0:	1fff8b4c 	.word	0x1fff8b4c

000010c4 <Clock_Ip_InitClock>:
    10c4:	b510      	push	{r4, lr}
    10c6:	b084      	sub	sp, #16
    10c8:	9001      	str	r0, [sp, #4]
    10ca:	4a9f      	ldr	r2, [pc, #636]	; (1348 <Clock_Ip_InitClock+0x284>)
    10cc:	9b01      	ldr	r3, [sp, #4]
    10ce:	6013      	str	r3, [r2, #0]
    10d0:	2101      	movs	r1, #1
    10d2:	9801      	ldr	r0, [sp, #4]
    10d4:	f003 fa90 	bl	45f8 <Clock_Ip_Command>
    10d8:	4b9b      	ldr	r3, [pc, #620]	; (1348 <Clock_Ip_InitClock+0x284>)
    10da:	681b      	ldr	r3, [r3, #0]
    10dc:	2b00      	cmp	r3, #0
    10de:	d030      	beq.n	1142 <Clock_Ip_InitClock+0x7e>
    10e0:	2300      	movs	r3, #0
    10e2:	9303      	str	r3, [sp, #12]
    10e4:	e027      	b.n	1136 <Clock_Ip_InitClock+0x72>
    10e6:	9901      	ldr	r1, [sp, #4]
    10e8:	9a03      	ldr	r2, [sp, #12]
    10ea:	4613      	mov	r3, r2
    10ec:	009b      	lsls	r3, r3, #2
    10ee:	4413      	add	r3, r2
    10f0:	009b      	lsls	r3, r3, #2
    10f2:	440b      	add	r3, r1
    10f4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    10f8:	681a      	ldr	r2, [r3, #0]
    10fa:	4994      	ldr	r1, [pc, #592]	; (134c <Clock_Ip_InitClock+0x288>)
    10fc:	4613      	mov	r3, r2
    10fe:	00db      	lsls	r3, r3, #3
    1100:	4413      	add	r3, r2
    1102:	440b      	add	r3, r1
    1104:	3301      	adds	r3, #1
    1106:	781b      	ldrb	r3, [r3, #0]
    1108:	461a      	mov	r2, r3
    110a:	4b91      	ldr	r3, [pc, #580]	; (1350 <Clock_Ip_InitClock+0x28c>)
    110c:	5c9b      	ldrb	r3, [r3, r2]
    110e:	9302      	str	r3, [sp, #8]
    1110:	4a90      	ldr	r2, [pc, #576]	; (1354 <Clock_Ip_InitClock+0x290>)
    1112:	9b02      	ldr	r3, [sp, #8]
    1114:	011b      	lsls	r3, r3, #4
    1116:	4413      	add	r3, r2
    1118:	6819      	ldr	r1, [r3, #0]
    111a:	9a03      	ldr	r2, [sp, #12]
    111c:	4613      	mov	r3, r2
    111e:	009b      	lsls	r3, r3, #2
    1120:	4413      	add	r3, r2
    1122:	009b      	lsls	r3, r3, #2
    1124:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1128:	9a01      	ldr	r2, [sp, #4]
    112a:	4413      	add	r3, r2
    112c:	4618      	mov	r0, r3
    112e:	4788      	blx	r1
    1130:	9b03      	ldr	r3, [sp, #12]
    1132:	3301      	adds	r3, #1
    1134:	9303      	str	r3, [sp, #12]
    1136:	9b01      	ldr	r3, [sp, #4]
    1138:	7c9b      	ldrb	r3, [r3, #18]
    113a:	461a      	mov	r2, r3
    113c:	9b03      	ldr	r3, [sp, #12]
    113e:	4293      	cmp	r3, r2
    1140:	d3d1      	bcc.n	10e6 <Clock_Ip_InitClock+0x22>
    1142:	9801      	ldr	r0, [sp, #4]
    1144:	f7ff feca 	bl	edc <Clock_Ip_ResetClockConfiguration>
    1148:	2300      	movs	r3, #0
    114a:	9303      	str	r3, [sp, #12]
    114c:	e029      	b.n	11a2 <Clock_Ip_InitClock+0xde>
    114e:	9901      	ldr	r1, [sp, #4]
    1150:	9a03      	ldr	r2, [sp, #12]
    1152:	4613      	mov	r3, r2
    1154:	005b      	lsls	r3, r3, #1
    1156:	4413      	add	r3, r2
    1158:	009b      	lsls	r3, r3, #2
    115a:	440b      	add	r3, r1
    115c:	3314      	adds	r3, #20
    115e:	681a      	ldr	r2, [r3, #0]
    1160:	497a      	ldr	r1, [pc, #488]	; (134c <Clock_Ip_InitClock+0x288>)
    1162:	4613      	mov	r3, r2
    1164:	00db      	lsls	r3, r3, #3
    1166:	4413      	add	r3, r2
    1168:	440b      	add	r3, r1
    116a:	3301      	adds	r3, #1
    116c:	781b      	ldrb	r3, [r3, #0]
    116e:	461a      	mov	r2, r3
    1170:	4b79      	ldr	r3, [pc, #484]	; (1358 <Clock_Ip_InitClock+0x294>)
    1172:	5c9b      	ldrb	r3, [r3, r2]
    1174:	9302      	str	r3, [sp, #8]
    1176:	4979      	ldr	r1, [pc, #484]	; (135c <Clock_Ip_InitClock+0x298>)
    1178:	9a02      	ldr	r2, [sp, #8]
    117a:	4613      	mov	r3, r2
    117c:	005b      	lsls	r3, r3, #1
    117e:	4413      	add	r3, r2
    1180:	009b      	lsls	r3, r3, #2
    1182:	440b      	add	r3, r1
    1184:	6819      	ldr	r1, [r3, #0]
    1186:	9a03      	ldr	r2, [sp, #12]
    1188:	4613      	mov	r3, r2
    118a:	005b      	lsls	r3, r3, #1
    118c:	4413      	add	r3, r2
    118e:	009b      	lsls	r3, r3, #2
    1190:	3310      	adds	r3, #16
    1192:	9a01      	ldr	r2, [sp, #4]
    1194:	4413      	add	r3, r2
    1196:	3304      	adds	r3, #4
    1198:	4618      	mov	r0, r3
    119a:	4788      	blx	r1
    119c:	9b03      	ldr	r3, [sp, #12]
    119e:	3301      	adds	r3, #1
    11a0:	9303      	str	r3, [sp, #12]
    11a2:	9b01      	ldr	r3, [sp, #4]
    11a4:	7a1b      	ldrb	r3, [r3, #8]
    11a6:	461a      	mov	r2, r3
    11a8:	9b03      	ldr	r3, [sp, #12]
    11aa:	4293      	cmp	r3, r2
    11ac:	d3cf      	bcc.n	114e <Clock_Ip_InitClock+0x8a>
    11ae:	2300      	movs	r3, #0
    11b0:	9303      	str	r3, [sp, #12]
    11b2:	e02a      	b.n	120a <Clock_Ip_InitClock+0x146>
    11b4:	9901      	ldr	r1, [sp, #4]
    11b6:	9a03      	ldr	r2, [sp, #12]
    11b8:	4613      	mov	r3, r2
    11ba:	009b      	lsls	r3, r3, #2
    11bc:	4413      	add	r3, r2
    11be:	009b      	lsls	r3, r3, #2
    11c0:	440b      	add	r3, r1
    11c2:	332c      	adds	r3, #44	; 0x2c
    11c4:	681a      	ldr	r2, [r3, #0]
    11c6:	4961      	ldr	r1, [pc, #388]	; (134c <Clock_Ip_InitClock+0x288>)
    11c8:	4613      	mov	r3, r2
    11ca:	00db      	lsls	r3, r3, #3
    11cc:	4413      	add	r3, r2
    11ce:	440b      	add	r3, r1
    11d0:	3301      	adds	r3, #1
    11d2:	781b      	ldrb	r3, [r3, #0]
    11d4:	461a      	mov	r2, r3
    11d6:	4b62      	ldr	r3, [pc, #392]	; (1360 <Clock_Ip_InitClock+0x29c>)
    11d8:	5c9b      	ldrb	r3, [r3, r2]
    11da:	9302      	str	r3, [sp, #8]
    11dc:	4961      	ldr	r1, [pc, #388]	; (1364 <Clock_Ip_InitClock+0x2a0>)
    11de:	9a02      	ldr	r2, [sp, #8]
    11e0:	4613      	mov	r3, r2
    11e2:	009b      	lsls	r3, r3, #2
    11e4:	4413      	add	r3, r2
    11e6:	009b      	lsls	r3, r3, #2
    11e8:	440b      	add	r3, r1
    11ea:	3304      	adds	r3, #4
    11ec:	6819      	ldr	r1, [r3, #0]
    11ee:	9a03      	ldr	r2, [sp, #12]
    11f0:	4613      	mov	r3, r2
    11f2:	009b      	lsls	r3, r3, #2
    11f4:	4413      	add	r3, r2
    11f6:	009b      	lsls	r3, r3, #2
    11f8:	3328      	adds	r3, #40	; 0x28
    11fa:	9a01      	ldr	r2, [sp, #4]
    11fc:	4413      	add	r3, r2
    11fe:	3304      	adds	r3, #4
    1200:	4618      	mov	r0, r3
    1202:	4788      	blx	r1
    1204:	9b03      	ldr	r3, [sp, #12]
    1206:	3301      	adds	r3, #1
    1208:	9303      	str	r3, [sp, #12]
    120a:	9b01      	ldr	r3, [sp, #4]
    120c:	7a5b      	ldrb	r3, [r3, #9]
    120e:	461a      	mov	r2, r3
    1210:	9b03      	ldr	r3, [sp, #12]
    1212:	4293      	cmp	r3, r2
    1214:	d3ce      	bcc.n	11b4 <Clock_Ip_InitClock+0xf0>
    1216:	9801      	ldr	r0, [sp, #4]
    1218:	f7ff fdb0 	bl	d7c <Clock_Ip_UpdateDriverContext>
    121c:	2300      	movs	r3, #0
    121e:	9303      	str	r3, [sp, #12]
    1220:	e028      	b.n	1274 <Clock_Ip_InitClock+0x1b0>
    1222:	9901      	ldr	r1, [sp, #4]
    1224:	9a03      	ldr	r2, [sp, #12]
    1226:	4613      	mov	r3, r2
    1228:	009b      	lsls	r3, r3, #2
    122a:	4413      	add	r3, r2
    122c:	009b      	lsls	r3, r3, #2
    122e:	440b      	add	r3, r1
    1230:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1234:	681a      	ldr	r2, [r3, #0]
    1236:	4945      	ldr	r1, [pc, #276]	; (134c <Clock_Ip_InitClock+0x288>)
    1238:	4613      	mov	r3, r2
    123a:	00db      	lsls	r3, r3, #3
    123c:	4413      	add	r3, r2
    123e:	440b      	add	r3, r1
    1240:	3301      	adds	r3, #1
    1242:	781b      	ldrb	r3, [r3, #0]
    1244:	461a      	mov	r2, r3
    1246:	4b48      	ldr	r3, [pc, #288]	; (1368 <Clock_Ip_InitClock+0x2a4>)
    1248:	5c9b      	ldrb	r3, [r3, r2]
    124a:	9302      	str	r3, [sp, #8]
    124c:	4a47      	ldr	r2, [pc, #284]	; (136c <Clock_Ip_InitClock+0x2a8>)
    124e:	9b02      	ldr	r3, [sp, #8]
    1250:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1254:	9a03      	ldr	r2, [sp, #12]
    1256:	4613      	mov	r3, r2
    1258:	009b      	lsls	r3, r3, #2
    125a:	4413      	add	r3, r2
    125c:	009b      	lsls	r3, r3, #2
    125e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1262:	9a01      	ldr	r2, [sp, #4]
    1264:	4413      	add	r3, r2
    1266:	3304      	adds	r3, #4
    1268:	9903      	ldr	r1, [sp, #12]
    126a:	4618      	mov	r0, r3
    126c:	47a0      	blx	r4
    126e:	9b03      	ldr	r3, [sp, #12]
    1270:	3301      	adds	r3, #1
    1272:	9303      	str	r3, [sp, #12]
    1274:	9b01      	ldr	r3, [sp, #4]
    1276:	7c5b      	ldrb	r3, [r3, #17]
    1278:	461a      	mov	r2, r3
    127a:	9b03      	ldr	r3, [sp, #12]
    127c:	4293      	cmp	r3, r2
    127e:	d3d0      	bcc.n	1222 <Clock_Ip_InitClock+0x15e>
    1280:	2300      	movs	r3, #0
    1282:	9303      	str	r3, [sp, #12]
    1284:	e026      	b.n	12d4 <Clock_Ip_InitClock+0x210>
    1286:	9901      	ldr	r1, [sp, #4]
    1288:	9a03      	ldr	r2, [sp, #12]
    128a:	4613      	mov	r3, r2
    128c:	005b      	lsls	r3, r3, #1
    128e:	4413      	add	r3, r2
    1290:	009b      	lsls	r3, r3, #2
    1292:	440b      	add	r3, r1
    1294:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1298:	681a      	ldr	r2, [r3, #0]
    129a:	492c      	ldr	r1, [pc, #176]	; (134c <Clock_Ip_InitClock+0x288>)
    129c:	4613      	mov	r3, r2
    129e:	00db      	lsls	r3, r3, #3
    12a0:	4413      	add	r3, r2
    12a2:	440b      	add	r3, r1
    12a4:	3301      	adds	r3, #1
    12a6:	781b      	ldrb	r3, [r3, #0]
    12a8:	461a      	mov	r2, r3
    12aa:	4b31      	ldr	r3, [pc, #196]	; (1370 <Clock_Ip_InitClock+0x2ac>)
    12ac:	5c9b      	ldrb	r3, [r3, r2]
    12ae:	9302      	str	r3, [sp, #8]
    12b0:	4a30      	ldr	r2, [pc, #192]	; (1374 <Clock_Ip_InitClock+0x2b0>)
    12b2:	9b02      	ldr	r3, [sp, #8]
    12b4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    12b8:	9a03      	ldr	r2, [sp, #12]
    12ba:	4613      	mov	r3, r2
    12bc:	005b      	lsls	r3, r3, #1
    12be:	4413      	add	r3, r2
    12c0:	009b      	lsls	r3, r3, #2
    12c2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    12c6:	9a01      	ldr	r2, [sp, #4]
    12c8:	4413      	add	r3, r2
    12ca:	4618      	mov	r0, r3
    12cc:	4788      	blx	r1
    12ce:	9b03      	ldr	r3, [sp, #12]
    12d0:	3301      	adds	r3, #1
    12d2:	9303      	str	r3, [sp, #12]
    12d4:	9b01      	ldr	r3, [sp, #4]
    12d6:	7b5b      	ldrb	r3, [r3, #13]
    12d8:	461a      	mov	r2, r3
    12da:	9b03      	ldr	r3, [sp, #12]
    12dc:	4293      	cmp	r3, r2
    12de:	d3d2      	bcc.n	1286 <Clock_Ip_InitClock+0x1c2>
    12e0:	2300      	movs	r3, #0
    12e2:	9303      	str	r3, [sp, #12]
    12e4:	e026      	b.n	1334 <Clock_Ip_InitClock+0x270>
    12e6:	9901      	ldr	r1, [sp, #4]
    12e8:	9a03      	ldr	r2, [sp, #12]
    12ea:	4613      	mov	r3, r2
    12ec:	005b      	lsls	r3, r3, #1
    12ee:	4413      	add	r3, r2
    12f0:	009b      	lsls	r3, r3, #2
    12f2:	440b      	add	r3, r1
    12f4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    12f8:	681a      	ldr	r2, [r3, #0]
    12fa:	4914      	ldr	r1, [pc, #80]	; (134c <Clock_Ip_InitClock+0x288>)
    12fc:	4613      	mov	r3, r2
    12fe:	00db      	lsls	r3, r3, #3
    1300:	4413      	add	r3, r2
    1302:	440b      	add	r3, r1
    1304:	3301      	adds	r3, #1
    1306:	781b      	ldrb	r3, [r3, #0]
    1308:	461a      	mov	r2, r3
    130a:	4b1b      	ldr	r3, [pc, #108]	; (1378 <Clock_Ip_InitClock+0x2b4>)
    130c:	5c9b      	ldrb	r3, [r3, r2]
    130e:	9302      	str	r3, [sp, #8]
    1310:	4a1a      	ldr	r2, [pc, #104]	; (137c <Clock_Ip_InitClock+0x2b8>)
    1312:	9b02      	ldr	r3, [sp, #8]
    1314:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1318:	9a03      	ldr	r2, [sp, #12]
    131a:	4613      	mov	r3, r2
    131c:	005b      	lsls	r3, r3, #1
    131e:	4413      	add	r3, r2
    1320:	009b      	lsls	r3, r3, #2
    1322:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1326:	9a01      	ldr	r2, [sp, #4]
    1328:	4413      	add	r3, r2
    132a:	4618      	mov	r0, r3
    132c:	4788      	blx	r1
    132e:	9b03      	ldr	r3, [sp, #12]
    1330:	3301      	adds	r3, #1
    1332:	9303      	str	r3, [sp, #12]
    1334:	9b01      	ldr	r3, [sp, #4]
    1336:	7b1b      	ldrb	r3, [r3, #12]
    1338:	461a      	mov	r2, r3
    133a:	9b03      	ldr	r3, [sp, #12]
    133c:	4293      	cmp	r3, r2
    133e:	d3d2      	bcc.n	12e6 <Clock_Ip_InitClock+0x222>
    1340:	2300      	movs	r3, #0
    1342:	9303      	str	r3, [sp, #12]
    1344:	e044      	b.n	13d0 <Clock_Ip_InitClock+0x30c>
    1346:	bf00      	nop
    1348:	1fff8b44 	.word	0x1fff8b44
    134c:	0000b650 	.word	0x0000b650
    1350:	0000b640 	.word	0x0000b640
    1354:	0000bc4c 	.word	0x0000bc4c
    1358:	0000b5e0 	.word	0x0000b5e0
    135c:	0000bc10 	.word	0x0000bc10
    1360:	0000b5d0 	.word	0x0000b5d0
    1364:	0000bba4 	.word	0x0000bba4
    1368:	0000b630 	.word	0x0000b630
    136c:	0000bc84 	.word	0x0000bc84
    1370:	0000b5c0 	.word	0x0000b5c0
    1374:	0000bb9c 	.word	0x0000bb9c
    1378:	0000b5b0 	.word	0x0000b5b0
    137c:	0000bb60 	.word	0x0000bb60
    1380:	9901      	ldr	r1, [sp, #4]
    1382:	9a03      	ldr	r2, [sp, #12]
    1384:	4613      	mov	r3, r2
    1386:	005b      	lsls	r3, r3, #1
    1388:	4413      	add	r3, r2
    138a:	009b      	lsls	r3, r3, #2
    138c:	440b      	add	r3, r1
    138e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1392:	681a      	ldr	r2, [r3, #0]
    1394:	49ac      	ldr	r1, [pc, #688]	; (1648 <Clock_Ip_InitClock+0x584>)
    1396:	4613      	mov	r3, r2
    1398:	00db      	lsls	r3, r3, #3
    139a:	4413      	add	r3, r2
    139c:	440b      	add	r3, r1
    139e:	3301      	adds	r3, #1
    13a0:	781b      	ldrb	r3, [r3, #0]
    13a2:	461a      	mov	r2, r3
    13a4:	4ba9      	ldr	r3, [pc, #676]	; (164c <Clock_Ip_InitClock+0x588>)
    13a6:	5c9b      	ldrb	r3, [r3, r2]
    13a8:	9302      	str	r3, [sp, #8]
    13aa:	4aa9      	ldr	r2, [pc, #676]	; (1650 <Clock_Ip_InitClock+0x58c>)
    13ac:	9b02      	ldr	r3, [sp, #8]
    13ae:	00db      	lsls	r3, r3, #3
    13b0:	4413      	add	r3, r2
    13b2:	6859      	ldr	r1, [r3, #4]
    13b4:	9a03      	ldr	r2, [sp, #12]
    13b6:	4613      	mov	r3, r2
    13b8:	005b      	lsls	r3, r3, #1
    13ba:	4413      	add	r3, r2
    13bc:	009b      	lsls	r3, r3, #2
    13be:	f503 730e 	add.w	r3, r3, #568	; 0x238
    13c2:	9a01      	ldr	r2, [sp, #4]
    13c4:	4413      	add	r3, r2
    13c6:	4618      	mov	r0, r3
    13c8:	4788      	blx	r1
    13ca:	9b03      	ldr	r3, [sp, #12]
    13cc:	3301      	adds	r3, #1
    13ce:	9303      	str	r3, [sp, #12]
    13d0:	9b01      	ldr	r3, [sp, #4]
    13d2:	7b5b      	ldrb	r3, [r3, #13]
    13d4:	461a      	mov	r2, r3
    13d6:	9b03      	ldr	r3, [sp, #12]
    13d8:	4293      	cmp	r3, r2
    13da:	d3d1      	bcc.n	1380 <Clock_Ip_InitClock+0x2bc>
    13dc:	2300      	movs	r3, #0
    13de:	9303      	str	r3, [sp, #12]
    13e0:	e029      	b.n	1436 <Clock_Ip_InitClock+0x372>
    13e2:	9901      	ldr	r1, [sp, #4]
    13e4:	9a03      	ldr	r2, [sp, #12]
    13e6:	4613      	mov	r3, r2
    13e8:	009b      	lsls	r3, r3, #2
    13ea:	4413      	add	r3, r2
    13ec:	00db      	lsls	r3, r3, #3
    13ee:	440b      	add	r3, r1
    13f0:	3340      	adds	r3, #64	; 0x40
    13f2:	681a      	ldr	r2, [r3, #0]
    13f4:	4994      	ldr	r1, [pc, #592]	; (1648 <Clock_Ip_InitClock+0x584>)
    13f6:	4613      	mov	r3, r2
    13f8:	00db      	lsls	r3, r3, #3
    13fa:	4413      	add	r3, r2
    13fc:	440b      	add	r3, r1
    13fe:	3301      	adds	r3, #1
    1400:	781b      	ldrb	r3, [r3, #0]
    1402:	461a      	mov	r2, r3
    1404:	4b93      	ldr	r3, [pc, #588]	; (1654 <Clock_Ip_InitClock+0x590>)
    1406:	5c9b      	ldrb	r3, [r3, r2]
    1408:	9302      	str	r3, [sp, #8]
    140a:	4993      	ldr	r1, [pc, #588]	; (1658 <Clock_Ip_InitClock+0x594>)
    140c:	9a02      	ldr	r2, [sp, #8]
    140e:	4613      	mov	r3, r2
    1410:	009b      	lsls	r3, r3, #2
    1412:	4413      	add	r3, r2
    1414:	009b      	lsls	r3, r3, #2
    1416:	440b      	add	r3, r1
    1418:	3304      	adds	r3, #4
    141a:	6819      	ldr	r1, [r3, #0]
    141c:	9a03      	ldr	r2, [sp, #12]
    141e:	4613      	mov	r3, r2
    1420:	009b      	lsls	r3, r3, #2
    1422:	4413      	add	r3, r2
    1424:	00db      	lsls	r3, r3, #3
    1426:	3340      	adds	r3, #64	; 0x40
    1428:	9a01      	ldr	r2, [sp, #4]
    142a:	4413      	add	r3, r2
    142c:	4618      	mov	r0, r3
    142e:	4788      	blx	r1
    1430:	9b03      	ldr	r3, [sp, #12]
    1432:	3301      	adds	r3, #1
    1434:	9303      	str	r3, [sp, #12]
    1436:	9b01      	ldr	r3, [sp, #4]
    1438:	7a9b      	ldrb	r3, [r3, #10]
    143a:	461a      	mov	r2, r3
    143c:	9b03      	ldr	r3, [sp, #12]
    143e:	4293      	cmp	r3, r2
    1440:	d3cf      	bcc.n	13e2 <Clock_Ip_InitClock+0x31e>
    1442:	2300      	movs	r3, #0
    1444:	9303      	str	r3, [sp, #12]
    1446:	e029      	b.n	149c <Clock_Ip_InitClock+0x3d8>
    1448:	9901      	ldr	r1, [sp, #4]
    144a:	9a03      	ldr	r2, [sp, #12]
    144c:	4613      	mov	r3, r2
    144e:	009b      	lsls	r3, r3, #2
    1450:	4413      	add	r3, r2
    1452:	009b      	lsls	r3, r3, #2
    1454:	440b      	add	r3, r1
    1456:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    145a:	681a      	ldr	r2, [r3, #0]
    145c:	497a      	ldr	r1, [pc, #488]	; (1648 <Clock_Ip_InitClock+0x584>)
    145e:	4613      	mov	r3, r2
    1460:	00db      	lsls	r3, r3, #3
    1462:	4413      	add	r3, r2
    1464:	440b      	add	r3, r1
    1466:	3301      	adds	r3, #1
    1468:	781b      	ldrb	r3, [r3, #0]
    146a:	461a      	mov	r2, r3
    146c:	4b7b      	ldr	r3, [pc, #492]	; (165c <Clock_Ip_InitClock+0x598>)
    146e:	5c9b      	ldrb	r3, [r3, r2]
    1470:	9302      	str	r3, [sp, #8]
    1472:	4a7b      	ldr	r2, [pc, #492]	; (1660 <Clock_Ip_InitClock+0x59c>)
    1474:	9b02      	ldr	r3, [sp, #8]
    1476:	011b      	lsls	r3, r3, #4
    1478:	4413      	add	r3, r2
    147a:	3304      	adds	r3, #4
    147c:	681c      	ldr	r4, [r3, #0]
    147e:	9a03      	ldr	r2, [sp, #12]
    1480:	4613      	mov	r3, r2
    1482:	009b      	lsls	r3, r3, #2
    1484:	4413      	add	r3, r2
    1486:	009b      	lsls	r3, r3, #2
    1488:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    148c:	9a01      	ldr	r2, [sp, #4]
    148e:	4413      	add	r3, r2
    1490:	9903      	ldr	r1, [sp, #12]
    1492:	4618      	mov	r0, r3
    1494:	47a0      	blx	r4
    1496:	9b03      	ldr	r3, [sp, #12]
    1498:	3301      	adds	r3, #1
    149a:	9303      	str	r3, [sp, #12]
    149c:	9b01      	ldr	r3, [sp, #4]
    149e:	7c9b      	ldrb	r3, [r3, #18]
    14a0:	461a      	mov	r2, r3
    14a2:	9b03      	ldr	r3, [sp, #12]
    14a4:	4293      	cmp	r3, r2
    14a6:	d3cf      	bcc.n	1448 <Clock_Ip_InitClock+0x384>
    14a8:	2300      	movs	r3, #0
    14aa:	9303      	str	r3, [sp, #12]
    14ac:	e02a      	b.n	1504 <Clock_Ip_InitClock+0x440>
    14ae:	9901      	ldr	r1, [sp, #4]
    14b0:	9a03      	ldr	r2, [sp, #12]
    14b2:	4613      	mov	r3, r2
    14b4:	009b      	lsls	r3, r3, #2
    14b6:	4413      	add	r3, r2
    14b8:	009b      	lsls	r3, r3, #2
    14ba:	440b      	add	r3, r1
    14bc:	332c      	adds	r3, #44	; 0x2c
    14be:	681a      	ldr	r2, [r3, #0]
    14c0:	4961      	ldr	r1, [pc, #388]	; (1648 <Clock_Ip_InitClock+0x584>)
    14c2:	4613      	mov	r3, r2
    14c4:	00db      	lsls	r3, r3, #3
    14c6:	4413      	add	r3, r2
    14c8:	440b      	add	r3, r1
    14ca:	3301      	adds	r3, #1
    14cc:	781b      	ldrb	r3, [r3, #0]
    14ce:	461a      	mov	r2, r3
    14d0:	4b64      	ldr	r3, [pc, #400]	; (1664 <Clock_Ip_InitClock+0x5a0>)
    14d2:	5c9b      	ldrb	r3, [r3, r2]
    14d4:	9302      	str	r3, [sp, #8]
    14d6:	4964      	ldr	r1, [pc, #400]	; (1668 <Clock_Ip_InitClock+0x5a4>)
    14d8:	9a02      	ldr	r2, [sp, #8]
    14da:	4613      	mov	r3, r2
    14dc:	009b      	lsls	r3, r3, #2
    14de:	4413      	add	r3, r2
    14e0:	009b      	lsls	r3, r3, #2
    14e2:	440b      	add	r3, r1
    14e4:	3308      	adds	r3, #8
    14e6:	6819      	ldr	r1, [r3, #0]
    14e8:	9a03      	ldr	r2, [sp, #12]
    14ea:	4613      	mov	r3, r2
    14ec:	009b      	lsls	r3, r3, #2
    14ee:	4413      	add	r3, r2
    14f0:	009b      	lsls	r3, r3, #2
    14f2:	3328      	adds	r3, #40	; 0x28
    14f4:	9a01      	ldr	r2, [sp, #4]
    14f6:	4413      	add	r3, r2
    14f8:	3304      	adds	r3, #4
    14fa:	4618      	mov	r0, r3
    14fc:	4788      	blx	r1
    14fe:	9b03      	ldr	r3, [sp, #12]
    1500:	3301      	adds	r3, #1
    1502:	9303      	str	r3, [sp, #12]
    1504:	9b01      	ldr	r3, [sp, #4]
    1506:	7a5b      	ldrb	r3, [r3, #9]
    1508:	461a      	mov	r2, r3
    150a:	9b03      	ldr	r3, [sp, #12]
    150c:	4293      	cmp	r3, r2
    150e:	d3ce      	bcc.n	14ae <Clock_Ip_InitClock+0x3ea>
    1510:	2300      	movs	r3, #0
    1512:	9303      	str	r3, [sp, #12]
    1514:	e029      	b.n	156a <Clock_Ip_InitClock+0x4a6>
    1516:	9901      	ldr	r1, [sp, #4]
    1518:	9a03      	ldr	r2, [sp, #12]
    151a:	4613      	mov	r3, r2
    151c:	009b      	lsls	r3, r3, #2
    151e:	4413      	add	r3, r2
    1520:	00db      	lsls	r3, r3, #3
    1522:	440b      	add	r3, r1
    1524:	3340      	adds	r3, #64	; 0x40
    1526:	681a      	ldr	r2, [r3, #0]
    1528:	4947      	ldr	r1, [pc, #284]	; (1648 <Clock_Ip_InitClock+0x584>)
    152a:	4613      	mov	r3, r2
    152c:	00db      	lsls	r3, r3, #3
    152e:	4413      	add	r3, r2
    1530:	440b      	add	r3, r1
    1532:	3301      	adds	r3, #1
    1534:	781b      	ldrb	r3, [r3, #0]
    1536:	461a      	mov	r2, r3
    1538:	4b46      	ldr	r3, [pc, #280]	; (1654 <Clock_Ip_InitClock+0x590>)
    153a:	5c9b      	ldrb	r3, [r3, r2]
    153c:	9302      	str	r3, [sp, #8]
    153e:	4946      	ldr	r1, [pc, #280]	; (1658 <Clock_Ip_InitClock+0x594>)
    1540:	9a02      	ldr	r2, [sp, #8]
    1542:	4613      	mov	r3, r2
    1544:	009b      	lsls	r3, r3, #2
    1546:	4413      	add	r3, r2
    1548:	009b      	lsls	r3, r3, #2
    154a:	440b      	add	r3, r1
    154c:	330c      	adds	r3, #12
    154e:	6819      	ldr	r1, [r3, #0]
    1550:	9a03      	ldr	r2, [sp, #12]
    1552:	4613      	mov	r3, r2
    1554:	009b      	lsls	r3, r3, #2
    1556:	4413      	add	r3, r2
    1558:	00db      	lsls	r3, r3, #3
    155a:	3340      	adds	r3, #64	; 0x40
    155c:	9a01      	ldr	r2, [sp, #4]
    155e:	4413      	add	r3, r2
    1560:	4618      	mov	r0, r3
    1562:	4788      	blx	r1
    1564:	9b03      	ldr	r3, [sp, #12]
    1566:	3301      	adds	r3, #1
    1568:	9303      	str	r3, [sp, #12]
    156a:	9b01      	ldr	r3, [sp, #4]
    156c:	7a9b      	ldrb	r3, [r3, #10]
    156e:	461a      	mov	r2, r3
    1570:	9b03      	ldr	r3, [sp, #12]
    1572:	4293      	cmp	r3, r2
    1574:	d3cf      	bcc.n	1516 <Clock_Ip_InitClock+0x452>
    1576:	2300      	movs	r3, #0
    1578:	9303      	str	r3, [sp, #12]
    157a:	e025      	b.n	15c8 <Clock_Ip_InitClock+0x504>
    157c:	9a01      	ldr	r2, [sp, #4]
    157e:	9b03      	ldr	r3, [sp, #12]
    1580:	3324      	adds	r3, #36	; 0x24
    1582:	011b      	lsls	r3, r3, #4
    1584:	4413      	add	r3, r2
    1586:	3304      	adds	r3, #4
    1588:	681a      	ldr	r2, [r3, #0]
    158a:	492f      	ldr	r1, [pc, #188]	; (1648 <Clock_Ip_InitClock+0x584>)
    158c:	4613      	mov	r3, r2
    158e:	00db      	lsls	r3, r3, #3
    1590:	4413      	add	r3, r2
    1592:	440b      	add	r3, r1
    1594:	3301      	adds	r3, #1
    1596:	781b      	ldrb	r3, [r3, #0]
    1598:	461a      	mov	r2, r3
    159a:	4b34      	ldr	r3, [pc, #208]	; (166c <Clock_Ip_InitClock+0x5a8>)
    159c:	5c9b      	ldrb	r3, [r3, r2]
    159e:	9302      	str	r3, [sp, #8]
    15a0:	4933      	ldr	r1, [pc, #204]	; (1670 <Clock_Ip_InitClock+0x5ac>)
    15a2:	9a02      	ldr	r2, [sp, #8]
    15a4:	4613      	mov	r3, r2
    15a6:	005b      	lsls	r3, r3, #1
    15a8:	4413      	add	r3, r2
    15aa:	009b      	lsls	r3, r3, #2
    15ac:	440b      	add	r3, r1
    15ae:	3304      	adds	r3, #4
    15b0:	681b      	ldr	r3, [r3, #0]
    15b2:	9a03      	ldr	r2, [sp, #12]
    15b4:	3224      	adds	r2, #36	; 0x24
    15b6:	0112      	lsls	r2, r2, #4
    15b8:	9901      	ldr	r1, [sp, #4]
    15ba:	440a      	add	r2, r1
    15bc:	3204      	adds	r2, #4
    15be:	4610      	mov	r0, r2
    15c0:	4798      	blx	r3
    15c2:	9b03      	ldr	r3, [sp, #12]
    15c4:	3301      	adds	r3, #1
    15c6:	9303      	str	r3, [sp, #12]
    15c8:	9b01      	ldr	r3, [sp, #4]
    15ca:	7b9b      	ldrb	r3, [r3, #14]
    15cc:	461a      	mov	r2, r3
    15ce:	9b03      	ldr	r3, [sp, #12]
    15d0:	4293      	cmp	r3, r2
    15d2:	d3d3      	bcc.n	157c <Clock_Ip_InitClock+0x4b8>
    15d4:	4b27      	ldr	r3, [pc, #156]	; (1674 <Clock_Ip_InitClock+0x5b0>)
    15d6:	2200      	movs	r2, #0
    15d8:	701a      	strb	r2, [r3, #0]
    15da:	4b26      	ldr	r3, [pc, #152]	; (1674 <Clock_Ip_InitClock+0x5b0>)
    15dc:	2200      	movs	r2, #0
    15de:	705a      	strb	r2, [r3, #1]
    15e0:	4b24      	ldr	r3, [pc, #144]	; (1674 <Clock_Ip_InitClock+0x5b0>)
    15e2:	2201      	movs	r2, #1
    15e4:	709a      	strb	r2, [r3, #2]
    15e6:	4b23      	ldr	r3, [pc, #140]	; (1674 <Clock_Ip_InitClock+0x5b0>)
    15e8:	2200      	movs	r2, #0
    15ea:	70da      	strb	r2, [r3, #3]
    15ec:	f000 fa9c 	bl	1b28 <Clock_Ip_SetWaitStates>
    15f0:	2300      	movs	r3, #0
    15f2:	9303      	str	r3, [sp, #12]
    15f4:	e04c      	b.n	1690 <Clock_Ip_InitClock+0x5cc>
    15f6:	9a01      	ldr	r2, [sp, #4]
    15f8:	9b03      	ldr	r3, [sp, #12]
    15fa:	330d      	adds	r3, #13
    15fc:	00db      	lsls	r3, r3, #3
    15fe:	4413      	add	r3, r2
    1600:	685b      	ldr	r3, [r3, #4]
    1602:	4a1d      	ldr	r2, [pc, #116]	; (1678 <Clock_Ip_InitClock+0x5b4>)
    1604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1608:	2b03      	cmp	r3, #3
    160a:	d03b      	beq.n	1684 <Clock_Ip_InitClock+0x5c0>
    160c:	9b01      	ldr	r3, [sp, #4]
    160e:	9a03      	ldr	r2, [sp, #12]
    1610:	320d      	adds	r2, #13
    1612:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1616:	490c      	ldr	r1, [pc, #48]	; (1648 <Clock_Ip_InitClock+0x584>)
    1618:	4613      	mov	r3, r2
    161a:	00db      	lsls	r3, r3, #3
    161c:	4413      	add	r3, r2
    161e:	440b      	add	r3, r1
    1620:	3301      	adds	r3, #1
    1622:	781b      	ldrb	r3, [r3, #0]
    1624:	461a      	mov	r2, r3
    1626:	4b15      	ldr	r3, [pc, #84]	; (167c <Clock_Ip_InitClock+0x5b8>)
    1628:	5c9b      	ldrb	r3, [r3, r2]
    162a:	9302      	str	r3, [sp, #8]
    162c:	4a14      	ldr	r2, [pc, #80]	; (1680 <Clock_Ip_InitClock+0x5bc>)
    162e:	9b02      	ldr	r3, [sp, #8]
    1630:	00db      	lsls	r3, r3, #3
    1632:	4413      	add	r3, r2
    1634:	685b      	ldr	r3, [r3, #4]
    1636:	9a03      	ldr	r2, [sp, #12]
    1638:	320d      	adds	r2, #13
    163a:	00d2      	lsls	r2, r2, #3
    163c:	9901      	ldr	r1, [sp, #4]
    163e:	440a      	add	r2, r1
    1640:	4610      	mov	r0, r2
    1642:	4798      	blx	r3
    1644:	e021      	b.n	168a <Clock_Ip_InitClock+0x5c6>
    1646:	bf00      	nop
    1648:	0000b650 	.word	0x0000b650
    164c:	0000b5c0 	.word	0x0000b5c0
    1650:	0000bb9c 	.word	0x0000bb9c
    1654:	0000b610 	.word	0x0000b610
    1658:	0000bc5c 	.word	0x0000bc5c
    165c:	0000b640 	.word	0x0000b640
    1660:	0000bc4c 	.word	0x0000bc4c
    1664:	0000b5d0 	.word	0x0000b5d0
    1668:	0000bba4 	.word	0x0000bba4
    166c:	0000b600 	.word	0x0000b600
    1670:	0000bbcc 	.word	0x0000bbcc
    1674:	1fff8b4c 	.word	0x1fff8b4c
    1678:	0000ba9c 	.word	0x0000ba9c
    167c:	0000b620 	.word	0x0000b620
    1680:	0000bc88 	.word	0x0000bc88
    1684:	4b3a      	ldr	r3, [pc, #232]	; (1770 <Clock_Ip_InitClock+0x6ac>)
    1686:	2201      	movs	r2, #1
    1688:	701a      	strb	r2, [r3, #0]
    168a:	9b03      	ldr	r3, [sp, #12]
    168c:	3301      	adds	r3, #1
    168e:	9303      	str	r3, [sp, #12]
    1690:	9b01      	ldr	r3, [sp, #4]
    1692:	7adb      	ldrb	r3, [r3, #11]
    1694:	461a      	mov	r2, r3
    1696:	9b03      	ldr	r3, [sp, #12]
    1698:	4293      	cmp	r3, r2
    169a:	d3ac      	bcc.n	15f6 <Clock_Ip_InitClock+0x532>
    169c:	4b34      	ldr	r3, [pc, #208]	; (1770 <Clock_Ip_InitClock+0x6ac>)
    169e:	781b      	ldrb	r3, [r3, #0]
    16a0:	f083 0301 	eor.w	r3, r3, #1
    16a4:	b2db      	uxtb	r3, r3
    16a6:	2b00      	cmp	r3, #0
    16a8:	d05e      	beq.n	1768 <Clock_Ip_InitClock+0x6a4>
    16aa:	2300      	movs	r3, #0
    16ac:	9303      	str	r3, [sp, #12]
    16ae:	e01f      	b.n	16f0 <Clock_Ip_InitClock+0x62c>
    16b0:	9a01      	ldr	r2, [sp, #4]
    16b2:	9b03      	ldr	r3, [sp, #12]
    16b4:	334e      	adds	r3, #78	; 0x4e
    16b6:	00db      	lsls	r3, r3, #3
    16b8:	4413      	add	r3, r2
    16ba:	685a      	ldr	r2, [r3, #4]
    16bc:	492d      	ldr	r1, [pc, #180]	; (1774 <Clock_Ip_InitClock+0x6b0>)
    16be:	4613      	mov	r3, r2
    16c0:	00db      	lsls	r3, r3, #3
    16c2:	4413      	add	r3, r2
    16c4:	440b      	add	r3, r1
    16c6:	3301      	adds	r3, #1
    16c8:	781b      	ldrb	r3, [r3, #0]
    16ca:	461a      	mov	r2, r3
    16cc:	4b2a      	ldr	r3, [pc, #168]	; (1778 <Clock_Ip_InitClock+0x6b4>)
    16ce:	5c9b      	ldrb	r3, [r3, r2]
    16d0:	9302      	str	r3, [sp, #8]
    16d2:	4a2a      	ldr	r2, [pc, #168]	; (177c <Clock_Ip_InitClock+0x6b8>)
    16d4:	9b02      	ldr	r3, [sp, #8]
    16d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    16da:	9a03      	ldr	r2, [sp, #12]
    16dc:	324e      	adds	r2, #78	; 0x4e
    16de:	00d2      	lsls	r2, r2, #3
    16e0:	9901      	ldr	r1, [sp, #4]
    16e2:	440a      	add	r2, r1
    16e4:	3204      	adds	r2, #4
    16e6:	4610      	mov	r0, r2
    16e8:	4798      	blx	r3
    16ea:	9b03      	ldr	r3, [sp, #12]
    16ec:	3301      	adds	r3, #1
    16ee:	9303      	str	r3, [sp, #12]
    16f0:	9b01      	ldr	r3, [sp, #4]
    16f2:	7c1b      	ldrb	r3, [r3, #16]
    16f4:	461a      	mov	r2, r3
    16f6:	9b03      	ldr	r3, [sp, #12]
    16f8:	4293      	cmp	r3, r2
    16fa:	d3d9      	bcc.n	16b0 <Clock_Ip_InitClock+0x5ec>
    16fc:	2300      	movs	r3, #0
    16fe:	9303      	str	r3, [sp, #12]
    1700:	e028      	b.n	1754 <Clock_Ip_InitClock+0x690>
    1702:	9901      	ldr	r1, [sp, #4]
    1704:	9a03      	ldr	r2, [sp, #12]
    1706:	4613      	mov	r3, r2
    1708:	009b      	lsls	r3, r3, #2
    170a:	4413      	add	r3, r2
    170c:	009b      	lsls	r3, r3, #2
    170e:	440b      	add	r3, r1
    1710:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1714:	681a      	ldr	r2, [r3, #0]
    1716:	4917      	ldr	r1, [pc, #92]	; (1774 <Clock_Ip_InitClock+0x6b0>)
    1718:	4613      	mov	r3, r2
    171a:	00db      	lsls	r3, r3, #3
    171c:	4413      	add	r3, r2
    171e:	440b      	add	r3, r1
    1720:	3301      	adds	r3, #1
    1722:	781b      	ldrb	r3, [r3, #0]
    1724:	461a      	mov	r2, r3
    1726:	4b16      	ldr	r3, [pc, #88]	; (1780 <Clock_Ip_InitClock+0x6bc>)
    1728:	5c9b      	ldrb	r3, [r3, r2]
    172a:	9302      	str	r3, [sp, #8]
    172c:	4a15      	ldr	r2, [pc, #84]	; (1784 <Clock_Ip_InitClock+0x6c0>)
    172e:	9b02      	ldr	r3, [sp, #8]
    1730:	011b      	lsls	r3, r3, #4
    1732:	4413      	add	r3, r2
    1734:	330c      	adds	r3, #12
    1736:	6819      	ldr	r1, [r3, #0]
    1738:	9a03      	ldr	r2, [sp, #12]
    173a:	4613      	mov	r3, r2
    173c:	009b      	lsls	r3, r3, #2
    173e:	4413      	add	r3, r2
    1740:	009b      	lsls	r3, r3, #2
    1742:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1746:	9a01      	ldr	r2, [sp, #4]
    1748:	4413      	add	r3, r2
    174a:	4618      	mov	r0, r3
    174c:	4788      	blx	r1
    174e:	9b03      	ldr	r3, [sp, #12]
    1750:	3301      	adds	r3, #1
    1752:	9303      	str	r3, [sp, #12]
    1754:	9b01      	ldr	r3, [sp, #4]
    1756:	7c9b      	ldrb	r3, [r3, #18]
    1758:	461a      	mov	r2, r3
    175a:	9b03      	ldr	r3, [sp, #12]
    175c:	4293      	cmp	r3, r2
    175e:	d3d0      	bcc.n	1702 <Clock_Ip_InitClock+0x63e>
    1760:	2104      	movs	r1, #4
    1762:	9801      	ldr	r0, [sp, #4]
    1764:	f002 ff48 	bl	45f8 <Clock_Ip_Command>
    1768:	bf00      	nop
    176a:	b004      	add	sp, #16
    176c:	bd10      	pop	{r4, pc}
    176e:	bf00      	nop
    1770:	1fff8b4c 	.word	0x1fff8b4c
    1774:	0000b650 	.word	0x0000b650
    1778:	0000b5f0 	.word	0x0000b5f0
    177c:	0000bbd8 	.word	0x0000bbd8
    1780:	0000b640 	.word	0x0000b640
    1784:	0000bc4c 	.word	0x0000bc4c

00001788 <Clock_Ip_GetPllStatus>:
    1788:	b500      	push	{lr}
    178a:	b087      	sub	sp, #28
    178c:	2302      	movs	r3, #2
    178e:	9305      	str	r3, [sp, #20]
    1790:	2300      	movs	r3, #0
    1792:	9304      	str	r3, [sp, #16]
    1794:	e02c      	b.n	17f0 <Clock_Ip_GetPllStatus+0x68>
    1796:	4a36      	ldr	r2, [pc, #216]	; (1870 <Clock_Ip_GetPllStatus+0xe8>)
    1798:	9b04      	ldr	r3, [sp, #16]
    179a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    179e:	4935      	ldr	r1, [pc, #212]	; (1874 <Clock_Ip_GetPllStatus+0xec>)
    17a0:	4613      	mov	r3, r2
    17a2:	00db      	lsls	r3, r3, #3
    17a4:	4413      	add	r3, r2
    17a6:	440b      	add	r3, r1
    17a8:	3301      	adds	r3, #1
    17aa:	781b      	ldrb	r3, [r3, #0]
    17ac:	461a      	mov	r2, r3
    17ae:	4b32      	ldr	r3, [pc, #200]	; (1878 <Clock_Ip_GetPllStatus+0xf0>)
    17b0:	5c9b      	ldrb	r3, [r3, r2]
    17b2:	9303      	str	r3, [sp, #12]
    17b4:	4931      	ldr	r1, [pc, #196]	; (187c <Clock_Ip_GetPllStatus+0xf4>)
    17b6:	9a03      	ldr	r2, [sp, #12]
    17b8:	4613      	mov	r3, r2
    17ba:	009b      	lsls	r3, r3, #2
    17bc:	4413      	add	r3, r2
    17be:	009b      	lsls	r3, r3, #2
    17c0:	440b      	add	r3, r1
    17c2:	3308      	adds	r3, #8
    17c4:	681b      	ldr	r3, [r3, #0]
    17c6:	492a      	ldr	r1, [pc, #168]	; (1870 <Clock_Ip_GetPllStatus+0xe8>)
    17c8:	9a04      	ldr	r2, [sp, #16]
    17ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    17ce:	4610      	mov	r0, r2
    17d0:	4798      	blx	r3
    17d2:	9002      	str	r0, [sp, #8]
    17d4:	9b02      	ldr	r3, [sp, #8]
    17d6:	2b01      	cmp	r3, #1
    17d8:	d102      	bne.n	17e0 <Clock_Ip_GetPllStatus+0x58>
    17da:	2301      	movs	r3, #1
    17dc:	9305      	str	r3, [sp, #20]
    17de:	e00d      	b.n	17fc <Clock_Ip_GetPllStatus+0x74>
    17e0:	9b02      	ldr	r3, [sp, #8]
    17e2:	2b02      	cmp	r3, #2
    17e4:	d101      	bne.n	17ea <Clock_Ip_GetPllStatus+0x62>
    17e6:	2300      	movs	r3, #0
    17e8:	9305      	str	r3, [sp, #20]
    17ea:	9b04      	ldr	r3, [sp, #16]
    17ec:	3301      	adds	r3, #1
    17ee:	9304      	str	r3, [sp, #16]
    17f0:	4b23      	ldr	r3, [pc, #140]	; (1880 <Clock_Ip_GetPllStatus+0xf8>)
    17f2:	789b      	ldrb	r3, [r3, #2]
    17f4:	461a      	mov	r2, r3
    17f6:	9b04      	ldr	r3, [sp, #16]
    17f8:	4293      	cmp	r3, r2
    17fa:	d3cc      	bcc.n	1796 <Clock_Ip_GetPllStatus+0xe>
    17fc:	9b05      	ldr	r3, [sp, #20]
    17fe:	2b00      	cmp	r3, #0
    1800:	d130      	bne.n	1864 <Clock_Ip_GetPllStatus+0xdc>
    1802:	2300      	movs	r3, #0
    1804:	9304      	str	r3, [sp, #16]
    1806:	e027      	b.n	1858 <Clock_Ip_GetPllStatus+0xd0>
    1808:	4a1e      	ldr	r2, [pc, #120]	; (1884 <Clock_Ip_GetPllStatus+0xfc>)
    180a:	9b04      	ldr	r3, [sp, #16]
    180c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1810:	4918      	ldr	r1, [pc, #96]	; (1874 <Clock_Ip_GetPllStatus+0xec>)
    1812:	4613      	mov	r3, r2
    1814:	00db      	lsls	r3, r3, #3
    1816:	4413      	add	r3, r2
    1818:	440b      	add	r3, r1
    181a:	3301      	adds	r3, #1
    181c:	781b      	ldrb	r3, [r3, #0]
    181e:	461a      	mov	r2, r3
    1820:	4b19      	ldr	r3, [pc, #100]	; (1888 <Clock_Ip_GetPllStatus+0x100>)
    1822:	5c9b      	ldrb	r3, [r3, r2]
    1824:	9303      	str	r3, [sp, #12]
    1826:	4919      	ldr	r1, [pc, #100]	; (188c <Clock_Ip_GetPllStatus+0x104>)
    1828:	9a03      	ldr	r2, [sp, #12]
    182a:	4613      	mov	r3, r2
    182c:	005b      	lsls	r3, r3, #1
    182e:	4413      	add	r3, r2
    1830:	009b      	lsls	r3, r3, #2
    1832:	440b      	add	r3, r1
    1834:	3308      	adds	r3, #8
    1836:	681b      	ldr	r3, [r3, #0]
    1838:	4912      	ldr	r1, [pc, #72]	; (1884 <Clock_Ip_GetPllStatus+0xfc>)
    183a:	9a04      	ldr	r2, [sp, #16]
    183c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1840:	4610      	mov	r0, r2
    1842:	4798      	blx	r3
    1844:	9001      	str	r0, [sp, #4]
    1846:	9b01      	ldr	r3, [sp, #4]
    1848:	2b01      	cmp	r3, #1
    184a:	d102      	bne.n	1852 <Clock_Ip_GetPllStatus+0xca>
    184c:	2301      	movs	r3, #1
    184e:	9305      	str	r3, [sp, #20]
    1850:	e008      	b.n	1864 <Clock_Ip_GetPllStatus+0xdc>
    1852:	9b04      	ldr	r3, [sp, #16]
    1854:	3301      	adds	r3, #1
    1856:	9304      	str	r3, [sp, #16]
    1858:	4b09      	ldr	r3, [pc, #36]	; (1880 <Clock_Ip_GetPllStatus+0xf8>)
    185a:	78db      	ldrb	r3, [r3, #3]
    185c:	461a      	mov	r2, r3
    185e:	9b04      	ldr	r3, [sp, #16]
    1860:	4293      	cmp	r3, r2
    1862:	d3d1      	bcc.n	1808 <Clock_Ip_GetPllStatus+0x80>
    1864:	9b05      	ldr	r3, [sp, #20]
    1866:	4618      	mov	r0, r3
    1868:	b007      	add	sp, #28
    186a:	f85d fb04 	ldr.w	pc, [sp], #4
    186e:	bf00      	nop
    1870:	0000bb58 	.word	0x0000bb58
    1874:	0000b650 	.word	0x0000b650
    1878:	0000b610 	.word	0x0000b610
    187c:	0000bc5c 	.word	0x0000bc5c
    1880:	1fff8b4c 	.word	0x1fff8b4c
    1884:	0000bb5c 	.word	0x0000bb5c
    1888:	0000b600 	.word	0x0000b600
    188c:	0000bbcc 	.word	0x0000bbcc

00001890 <Clock_Ip_DistributePll>:
    1890:	b500      	push	{lr}
    1892:	b083      	sub	sp, #12
    1894:	4b55      	ldr	r3, [pc, #340]	; (19ec <Clock_Ip_DistributePll+0x15c>)
    1896:	681b      	ldr	r3, [r3, #0]
    1898:	2b00      	cmp	r3, #0
    189a:	f000 80a2 	beq.w	19e2 <Clock_Ip_DistributePll+0x152>
    189e:	2300      	movs	r3, #0
    18a0:	9301      	str	r3, [sp, #4]
    18a2:	e02c      	b.n	18fe <Clock_Ip_DistributePll+0x6e>
    18a4:	4b51      	ldr	r3, [pc, #324]	; (19ec <Clock_Ip_DistributePll+0x15c>)
    18a6:	681a      	ldr	r2, [r3, #0]
    18a8:	9b01      	ldr	r3, [sp, #4]
    18aa:	330d      	adds	r3, #13
    18ac:	00db      	lsls	r3, r3, #3
    18ae:	4413      	add	r3, r2
    18b0:	685b      	ldr	r3, [r3, #4]
    18b2:	4a4f      	ldr	r2, [pc, #316]	; (19f0 <Clock_Ip_DistributePll+0x160>)
    18b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18b8:	2b03      	cmp	r3, #3
    18ba:	d11d      	bne.n	18f8 <Clock_Ip_DistributePll+0x68>
    18bc:	4b4b      	ldr	r3, [pc, #300]	; (19ec <Clock_Ip_DistributePll+0x15c>)
    18be:	681b      	ldr	r3, [r3, #0]
    18c0:	9a01      	ldr	r2, [sp, #4]
    18c2:	320d      	adds	r2, #13
    18c4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    18c8:	494a      	ldr	r1, [pc, #296]	; (19f4 <Clock_Ip_DistributePll+0x164>)
    18ca:	4613      	mov	r3, r2
    18cc:	00db      	lsls	r3, r3, #3
    18ce:	4413      	add	r3, r2
    18d0:	440b      	add	r3, r1
    18d2:	3301      	adds	r3, #1
    18d4:	781b      	ldrb	r3, [r3, #0]
    18d6:	461a      	mov	r2, r3
    18d8:	4b47      	ldr	r3, [pc, #284]	; (19f8 <Clock_Ip_DistributePll+0x168>)
    18da:	5c9b      	ldrb	r3, [r3, r2]
    18dc:	9300      	str	r3, [sp, #0]
    18de:	4a47      	ldr	r2, [pc, #284]	; (19fc <Clock_Ip_DistributePll+0x16c>)
    18e0:	9b00      	ldr	r3, [sp, #0]
    18e2:	00db      	lsls	r3, r3, #3
    18e4:	4413      	add	r3, r2
    18e6:	685b      	ldr	r3, [r3, #4]
    18e8:	4a40      	ldr	r2, [pc, #256]	; (19ec <Clock_Ip_DistributePll+0x15c>)
    18ea:	6811      	ldr	r1, [r2, #0]
    18ec:	9a01      	ldr	r2, [sp, #4]
    18ee:	320d      	adds	r2, #13
    18f0:	00d2      	lsls	r2, r2, #3
    18f2:	440a      	add	r2, r1
    18f4:	4610      	mov	r0, r2
    18f6:	4798      	blx	r3
    18f8:	9b01      	ldr	r3, [sp, #4]
    18fa:	3301      	adds	r3, #1
    18fc:	9301      	str	r3, [sp, #4]
    18fe:	4b3b      	ldr	r3, [pc, #236]	; (19ec <Clock_Ip_DistributePll+0x15c>)
    1900:	681b      	ldr	r3, [r3, #0]
    1902:	7adb      	ldrb	r3, [r3, #11]
    1904:	461a      	mov	r2, r3
    1906:	9b01      	ldr	r3, [sp, #4]
    1908:	4293      	cmp	r3, r2
    190a:	d3cb      	bcc.n	18a4 <Clock_Ip_DistributePll+0x14>
    190c:	4b3c      	ldr	r3, [pc, #240]	; (1a00 <Clock_Ip_DistributePll+0x170>)
    190e:	781b      	ldrb	r3, [r3, #0]
    1910:	2b00      	cmp	r3, #0
    1912:	d066      	beq.n	19e2 <Clock_Ip_DistributePll+0x152>
    1914:	2300      	movs	r3, #0
    1916:	9301      	str	r3, [sp, #4]
    1918:	e021      	b.n	195e <Clock_Ip_DistributePll+0xce>
    191a:	4b34      	ldr	r3, [pc, #208]	; (19ec <Clock_Ip_DistributePll+0x15c>)
    191c:	681a      	ldr	r2, [r3, #0]
    191e:	9b01      	ldr	r3, [sp, #4]
    1920:	334e      	adds	r3, #78	; 0x4e
    1922:	00db      	lsls	r3, r3, #3
    1924:	4413      	add	r3, r2
    1926:	685a      	ldr	r2, [r3, #4]
    1928:	4932      	ldr	r1, [pc, #200]	; (19f4 <Clock_Ip_DistributePll+0x164>)
    192a:	4613      	mov	r3, r2
    192c:	00db      	lsls	r3, r3, #3
    192e:	4413      	add	r3, r2
    1930:	440b      	add	r3, r1
    1932:	3301      	adds	r3, #1
    1934:	781b      	ldrb	r3, [r3, #0]
    1936:	461a      	mov	r2, r3
    1938:	4b32      	ldr	r3, [pc, #200]	; (1a04 <Clock_Ip_DistributePll+0x174>)
    193a:	5c9b      	ldrb	r3, [r3, r2]
    193c:	9300      	str	r3, [sp, #0]
    193e:	4a32      	ldr	r2, [pc, #200]	; (1a08 <Clock_Ip_DistributePll+0x178>)
    1940:	9b00      	ldr	r3, [sp, #0]
    1942:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1946:	4a29      	ldr	r2, [pc, #164]	; (19ec <Clock_Ip_DistributePll+0x15c>)
    1948:	6811      	ldr	r1, [r2, #0]
    194a:	9a01      	ldr	r2, [sp, #4]
    194c:	324e      	adds	r2, #78	; 0x4e
    194e:	00d2      	lsls	r2, r2, #3
    1950:	440a      	add	r2, r1
    1952:	3204      	adds	r2, #4
    1954:	4610      	mov	r0, r2
    1956:	4798      	blx	r3
    1958:	9b01      	ldr	r3, [sp, #4]
    195a:	3301      	adds	r3, #1
    195c:	9301      	str	r3, [sp, #4]
    195e:	4b23      	ldr	r3, [pc, #140]	; (19ec <Clock_Ip_DistributePll+0x15c>)
    1960:	681b      	ldr	r3, [r3, #0]
    1962:	7c1b      	ldrb	r3, [r3, #16]
    1964:	461a      	mov	r2, r3
    1966:	9b01      	ldr	r3, [sp, #4]
    1968:	4293      	cmp	r3, r2
    196a:	d3d6      	bcc.n	191a <Clock_Ip_DistributePll+0x8a>
    196c:	2300      	movs	r3, #0
    196e:	9301      	str	r3, [sp, #4]
    1970:	e02a      	b.n	19c8 <Clock_Ip_DistributePll+0x138>
    1972:	4b1e      	ldr	r3, [pc, #120]	; (19ec <Clock_Ip_DistributePll+0x15c>)
    1974:	6819      	ldr	r1, [r3, #0]
    1976:	9a01      	ldr	r2, [sp, #4]
    1978:	4613      	mov	r3, r2
    197a:	009b      	lsls	r3, r3, #2
    197c:	4413      	add	r3, r2
    197e:	009b      	lsls	r3, r3, #2
    1980:	440b      	add	r3, r1
    1982:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1986:	681a      	ldr	r2, [r3, #0]
    1988:	491a      	ldr	r1, [pc, #104]	; (19f4 <Clock_Ip_DistributePll+0x164>)
    198a:	4613      	mov	r3, r2
    198c:	00db      	lsls	r3, r3, #3
    198e:	4413      	add	r3, r2
    1990:	440b      	add	r3, r1
    1992:	3301      	adds	r3, #1
    1994:	781b      	ldrb	r3, [r3, #0]
    1996:	461a      	mov	r2, r3
    1998:	4b1c      	ldr	r3, [pc, #112]	; (1a0c <Clock_Ip_DistributePll+0x17c>)
    199a:	5c9b      	ldrb	r3, [r3, r2]
    199c:	9300      	str	r3, [sp, #0]
    199e:	4a1c      	ldr	r2, [pc, #112]	; (1a10 <Clock_Ip_DistributePll+0x180>)
    19a0:	9b00      	ldr	r3, [sp, #0]
    19a2:	011b      	lsls	r3, r3, #4
    19a4:	4413      	add	r3, r2
    19a6:	330c      	adds	r3, #12
    19a8:	6819      	ldr	r1, [r3, #0]
    19aa:	4b10      	ldr	r3, [pc, #64]	; (19ec <Clock_Ip_DistributePll+0x15c>)
    19ac:	6818      	ldr	r0, [r3, #0]
    19ae:	9a01      	ldr	r2, [sp, #4]
    19b0:	4613      	mov	r3, r2
    19b2:	009b      	lsls	r3, r3, #2
    19b4:	4413      	add	r3, r2
    19b6:	009b      	lsls	r3, r3, #2
    19b8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    19bc:	4403      	add	r3, r0
    19be:	4618      	mov	r0, r3
    19c0:	4788      	blx	r1
    19c2:	9b01      	ldr	r3, [sp, #4]
    19c4:	3301      	adds	r3, #1
    19c6:	9301      	str	r3, [sp, #4]
    19c8:	4b08      	ldr	r3, [pc, #32]	; (19ec <Clock_Ip_DistributePll+0x15c>)
    19ca:	681b      	ldr	r3, [r3, #0]
    19cc:	7c9b      	ldrb	r3, [r3, #18]
    19ce:	461a      	mov	r2, r3
    19d0:	9b01      	ldr	r3, [sp, #4]
    19d2:	4293      	cmp	r3, r2
    19d4:	d3cd      	bcc.n	1972 <Clock_Ip_DistributePll+0xe2>
    19d6:	4b05      	ldr	r3, [pc, #20]	; (19ec <Clock_Ip_DistributePll+0x15c>)
    19d8:	681b      	ldr	r3, [r3, #0]
    19da:	2104      	movs	r1, #4
    19dc:	4618      	mov	r0, r3
    19de:	f002 fe0b 	bl	45f8 <Clock_Ip_Command>
    19e2:	bf00      	nop
    19e4:	b003      	add	sp, #12
    19e6:	f85d fb04 	ldr.w	pc, [sp], #4
    19ea:	bf00      	nop
    19ec:	1fff8b44 	.word	0x1fff8b44
    19f0:	0000ba9c 	.word	0x0000ba9c
    19f4:	0000b650 	.word	0x0000b650
    19f8:	0000b620 	.word	0x0000b620
    19fc:	0000bc88 	.word	0x0000bc88
    1a00:	1fff8b4c 	.word	0x1fff8b4c
    1a04:	0000b5f0 	.word	0x0000b5f0
    1a08:	0000bbd8 	.word	0x0000bbd8
    1a0c:	0000b640 	.word	0x0000b640
    1a10:	0000bc4c 	.word	0x0000bc4c

00001a14 <Clock_Ip_DisableClockMonitor>:
    1a14:	b500      	push	{lr}
    1a16:	b085      	sub	sp, #20
    1a18:	9001      	str	r0, [sp, #4]
    1a1a:	490c      	ldr	r1, [pc, #48]	; (1a4c <Clock_Ip_DisableClockMonitor+0x38>)
    1a1c:	9a01      	ldr	r2, [sp, #4]
    1a1e:	4613      	mov	r3, r2
    1a20:	00db      	lsls	r3, r3, #3
    1a22:	4413      	add	r3, r2
    1a24:	440b      	add	r3, r1
    1a26:	3301      	adds	r3, #1
    1a28:	781b      	ldrb	r3, [r3, #0]
    1a2a:	461a      	mov	r2, r3
    1a2c:	4b08      	ldr	r3, [pc, #32]	; (1a50 <Clock_Ip_DisableClockMonitor+0x3c>)
    1a2e:	5c9b      	ldrb	r3, [r3, r2]
    1a30:	9303      	str	r3, [sp, #12]
    1a32:	4a08      	ldr	r2, [pc, #32]	; (1a54 <Clock_Ip_DisableClockMonitor+0x40>)
    1a34:	9b03      	ldr	r3, [sp, #12]
    1a36:	011b      	lsls	r3, r3, #4
    1a38:	4413      	add	r3, r2
    1a3a:	3308      	adds	r3, #8
    1a3c:	681b      	ldr	r3, [r3, #0]
    1a3e:	9801      	ldr	r0, [sp, #4]
    1a40:	4798      	blx	r3
    1a42:	bf00      	nop
    1a44:	b005      	add	sp, #20
    1a46:	f85d fb04 	ldr.w	pc, [sp], #4
    1a4a:	bf00      	nop
    1a4c:	0000b650 	.word	0x0000b650
    1a50:	0000b640 	.word	0x0000b640
    1a54:	0000bc4c 	.word	0x0000bc4c

00001a58 <Clock_Ip_InstallNotificationsCallback>:
    1a58:	b082      	sub	sp, #8
    1a5a:	9001      	str	r0, [sp, #4]
    1a5c:	4a02      	ldr	r2, [pc, #8]	; (1a68 <Clock_Ip_InstallNotificationsCallback+0x10>)
    1a5e:	9b01      	ldr	r3, [sp, #4]
    1a60:	6013      	str	r3, [r2, #0]
    1a62:	bf00      	nop
    1a64:	b002      	add	sp, #8
    1a66:	4770      	bx	lr
    1a68:	1fff8b14 	.word	0x1fff8b14

00001a6c <Clock_Ip_DisableModuleClock>:
    1a6c:	b500      	push	{lr}
    1a6e:	b085      	sub	sp, #20
    1a70:	9001      	str	r0, [sp, #4]
    1a72:	490c      	ldr	r1, [pc, #48]	; (1aa4 <Clock_Ip_DisableModuleClock+0x38>)
    1a74:	9a01      	ldr	r2, [sp, #4]
    1a76:	4613      	mov	r3, r2
    1a78:	00db      	lsls	r3, r3, #3
    1a7a:	4413      	add	r3, r2
    1a7c:	440b      	add	r3, r1
    1a7e:	3301      	adds	r3, #1
    1a80:	781b      	ldrb	r3, [r3, #0]
    1a82:	461a      	mov	r2, r3
    1a84:	4b08      	ldr	r3, [pc, #32]	; (1aa8 <Clock_Ip_DisableModuleClock+0x3c>)
    1a86:	5c9b      	ldrb	r3, [r3, r2]
    1a88:	9303      	str	r3, [sp, #12]
    1a8a:	4a08      	ldr	r2, [pc, #32]	; (1aac <Clock_Ip_DisableModuleClock+0x40>)
    1a8c:	9b03      	ldr	r3, [sp, #12]
    1a8e:	00db      	lsls	r3, r3, #3
    1a90:	4413      	add	r3, r2
    1a92:	685b      	ldr	r3, [r3, #4]
    1a94:	2101      	movs	r1, #1
    1a96:	9801      	ldr	r0, [sp, #4]
    1a98:	4798      	blx	r3
    1a9a:	bf00      	nop
    1a9c:	b005      	add	sp, #20
    1a9e:	f85d fb04 	ldr.w	pc, [sp], #4
    1aa2:	bf00      	nop
    1aa4:	0000b650 	.word	0x0000b650
    1aa8:	0000b5f0 	.word	0x0000b5f0
    1aac:	0000bbd8 	.word	0x0000bbd8

00001ab0 <Clock_Ip_EnableModuleClock>:
    1ab0:	b500      	push	{lr}
    1ab2:	b085      	sub	sp, #20
    1ab4:	9001      	str	r0, [sp, #4]
    1ab6:	490c      	ldr	r1, [pc, #48]	; (1ae8 <Clock_Ip_EnableModuleClock+0x38>)
    1ab8:	9a01      	ldr	r2, [sp, #4]
    1aba:	4613      	mov	r3, r2
    1abc:	00db      	lsls	r3, r3, #3
    1abe:	4413      	add	r3, r2
    1ac0:	440b      	add	r3, r1
    1ac2:	3301      	adds	r3, #1
    1ac4:	781b      	ldrb	r3, [r3, #0]
    1ac6:	461a      	mov	r2, r3
    1ac8:	4b08      	ldr	r3, [pc, #32]	; (1aec <Clock_Ip_EnableModuleClock+0x3c>)
    1aca:	5c9b      	ldrb	r3, [r3, r2]
    1acc:	9303      	str	r3, [sp, #12]
    1ace:	4a08      	ldr	r2, [pc, #32]	; (1af0 <Clock_Ip_EnableModuleClock+0x40>)
    1ad0:	9b03      	ldr	r3, [sp, #12]
    1ad2:	00db      	lsls	r3, r3, #3
    1ad4:	4413      	add	r3, r2
    1ad6:	685b      	ldr	r3, [r3, #4]
    1ad8:	2100      	movs	r1, #0
    1ada:	9801      	ldr	r0, [sp, #4]
    1adc:	4798      	blx	r3
    1ade:	bf00      	nop
    1ae0:	b005      	add	sp, #20
    1ae2:	f85d fb04 	ldr.w	pc, [sp], #4
    1ae6:	bf00      	nop
    1ae8:	0000b650 	.word	0x0000b650
    1aec:	0000b5f0 	.word	0x0000b5f0
    1af0:	0000bbd8 	.word	0x0000bbd8

00001af4 <Clock_Ip_PowerModeChangeNotification>:
    1af4:	b500      	push	{lr}
    1af6:	b083      	sub	sp, #12
    1af8:	9001      	str	r0, [sp, #4]
    1afa:	9100      	str	r1, [sp, #0]
    1afc:	4b08      	ldr	r3, [pc, #32]	; (1b20 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    1afe:	2200      	movs	r2, #0
    1b00:	701a      	strb	r2, [r3, #0]
    1b02:	4b08      	ldr	r3, [pc, #32]	; (1b24 <Clock_Ip_PowerModeChangeNotification+0x30>)
    1b04:	681b      	ldr	r3, [r3, #0]
    1b06:	2102      	movs	r1, #2
    1b08:	4618      	mov	r0, r3
    1b0a:	f002 fd75 	bl	45f8 <Clock_Ip_Command>
    1b0e:	9900      	ldr	r1, [sp, #0]
    1b10:	9801      	ldr	r0, [sp, #4]
    1b12:	f002 fc51 	bl	43b8 <Clock_Ip_ClockPowerModeChangeNotification>
    1b16:	bf00      	nop
    1b18:	b003      	add	sp, #12
    1b1a:	f85d fb04 	ldr.w	pc, [sp], #4
    1b1e:	bf00      	nop
    1b20:	1fff8b10 	.word	0x1fff8b10
    1b24:	1fff8b44 	.word	0x1fff8b44

00001b28 <Clock_Ip_SetWaitStates>:
    1b28:	b082      	sub	sp, #8
    1b2a:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    1b2e:	9301      	str	r3, [sp, #4]
    1b30:	4b06      	ldr	r3, [pc, #24]	; (1b4c <Clock_Ip_SetWaitStates+0x24>)
    1b32:	785b      	ldrb	r3, [r3, #1]
    1b34:	2b00      	cmp	r3, #0
    1b36:	d005      	beq.n	1b44 <Clock_Ip_SetWaitStates+0x1c>
    1b38:	9b01      	ldr	r3, [sp, #4]
    1b3a:	3b01      	subs	r3, #1
    1b3c:	9301      	str	r3, [sp, #4]
    1b3e:	9b01      	ldr	r3, [sp, #4]
    1b40:	2b00      	cmp	r3, #0
    1b42:	d1f9      	bne.n	1b38 <Clock_Ip_SetWaitStates+0x10>
    1b44:	bf00      	nop
    1b46:	b002      	add	sp, #8
    1b48:	4770      	bx	lr
    1b4a:	bf00      	nop
    1b4c:	1fff8b4c 	.word	0x1fff8b4c

00001b50 <Clock_Ip_ReportClockErrors>:
    1b50:	b500      	push	{lr}
    1b52:	b083      	sub	sp, #12
    1b54:	9001      	str	r0, [sp, #4]
    1b56:	9100      	str	r1, [sp, #0]
    1b58:	4b04      	ldr	r3, [pc, #16]	; (1b6c <Clock_Ip_ReportClockErrors+0x1c>)
    1b5a:	681b      	ldr	r3, [r3, #0]
    1b5c:	9900      	ldr	r1, [sp, #0]
    1b5e:	9801      	ldr	r0, [sp, #4]
    1b60:	4798      	blx	r3
    1b62:	bf00      	nop
    1b64:	b003      	add	sp, #12
    1b66:	f85d fb04 	ldr.w	pc, [sp], #4
    1b6a:	bf00      	nop
    1b6c:	1fff8b14 	.word	0x1fff8b14

00001b70 <Clock_Ip_StartTimeout>:
    1b70:	b500      	push	{lr}
    1b72:	b085      	sub	sp, #20
    1b74:	9003      	str	r0, [sp, #12]
    1b76:	9102      	str	r1, [sp, #8]
    1b78:	9201      	str	r2, [sp, #4]
    1b7a:	9300      	str	r3, [sp, #0]
    1b7c:	2000      	movs	r0, #0
    1b7e:	f7fe ffd0 	bl	b22 <OsIf_GetCounter>
    1b82:	4602      	mov	r2, r0
    1b84:	9b03      	ldr	r3, [sp, #12]
    1b86:	601a      	str	r2, [r3, #0]
    1b88:	9b02      	ldr	r3, [sp, #8]
    1b8a:	2200      	movs	r2, #0
    1b8c:	601a      	str	r2, [r3, #0]
    1b8e:	2100      	movs	r1, #0
    1b90:	9800      	ldr	r0, [sp, #0]
    1b92:	f7ff f812 	bl	bba <OsIf_MicrosToTicks>
    1b96:	4602      	mov	r2, r0
    1b98:	9b01      	ldr	r3, [sp, #4]
    1b9a:	601a      	str	r2, [r3, #0]
    1b9c:	bf00      	nop
    1b9e:	b005      	add	sp, #20
    1ba0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ba4 <Clock_Ip_TimeoutExpired>:
    1ba4:	b500      	push	{lr}
    1ba6:	b087      	sub	sp, #28
    1ba8:	9003      	str	r0, [sp, #12]
    1baa:	9102      	str	r1, [sp, #8]
    1bac:	9201      	str	r2, [sp, #4]
    1bae:	2300      	movs	r3, #0
    1bb0:	f88d 3017 	strb.w	r3, [sp, #23]
    1bb4:	2100      	movs	r1, #0
    1bb6:	9803      	ldr	r0, [sp, #12]
    1bb8:	f7fe ffcc 	bl	b54 <OsIf_GetElapsed>
    1bbc:	4602      	mov	r2, r0
    1bbe:	9b02      	ldr	r3, [sp, #8]
    1bc0:	681b      	ldr	r3, [r3, #0]
    1bc2:	441a      	add	r2, r3
    1bc4:	9b02      	ldr	r3, [sp, #8]
    1bc6:	601a      	str	r2, [r3, #0]
    1bc8:	9b02      	ldr	r3, [sp, #8]
    1bca:	681b      	ldr	r3, [r3, #0]
    1bcc:	9a01      	ldr	r2, [sp, #4]
    1bce:	429a      	cmp	r2, r3
    1bd0:	d802      	bhi.n	1bd8 <Clock_Ip_TimeoutExpired+0x34>
    1bd2:	2301      	movs	r3, #1
    1bd4:	f88d 3017 	strb.w	r3, [sp, #23]
    1bd8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1bdc:	4618      	mov	r0, r3
    1bde:	b007      	add	sp, #28
    1be0:	f85d fb04 	ldr.w	pc, [sp], #4

00001be4 <Clock_Ip_Callback_DividerEmpty>:
    1be4:	b082      	sub	sp, #8
    1be6:	9001      	str	r0, [sp, #4]
    1be8:	bf00      	nop
    1bea:	b002      	add	sp, #8
    1bec:	4770      	bx	lr

00001bee <Clock_Ip_SetScgAsyncDiv1>:
    1bee:	b500      	push	{lr}
    1bf0:	b083      	sub	sp, #12
    1bf2:	9001      	str	r0, [sp, #4]
    1bf4:	9b01      	ldr	r3, [sp, #4]
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	d002      	beq.n	1c00 <Clock_Ip_SetScgAsyncDiv1+0x12>
    1bfa:	9801      	ldr	r0, [sp, #4]
    1bfc:	f000 f8ad 	bl	1d5a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
    1c00:	bf00      	nop
    1c02:	b003      	add	sp, #12
    1c04:	f85d fb04 	ldr.w	pc, [sp], #4

00001c08 <Clock_Ip_SetScgAsyncDiv2>:
    1c08:	b500      	push	{lr}
    1c0a:	b083      	sub	sp, #12
    1c0c:	9001      	str	r0, [sp, #4]
    1c0e:	9b01      	ldr	r3, [sp, #4]
    1c10:	2b00      	cmp	r3, #0
    1c12:	d002      	beq.n	1c1a <Clock_Ip_SetScgAsyncDiv2+0x12>
    1c14:	9801      	ldr	r0, [sp, #4]
    1c16:	f000 f8cd 	bl	1db4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
    1c1a:	bf00      	nop
    1c1c:	b003      	add	sp, #12
    1c1e:	f85d fb04 	ldr.w	pc, [sp], #4

00001c22 <Clock_Ip_SetScgRunDivcore>:
    1c22:	b500      	push	{lr}
    1c24:	b083      	sub	sp, #12
    1c26:	9001      	str	r0, [sp, #4]
    1c28:	9b01      	ldr	r3, [sp, #4]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d002      	beq.n	1c34 <Clock_Ip_SetScgRunDivcore+0x12>
    1c2e:	9801      	ldr	r0, [sp, #4]
    1c30:	f000 f8ee 	bl	1e10 <Clock_Ip_SetScgRunDivcore_TrustedCall>
    1c34:	bf00      	nop
    1c36:	b003      	add	sp, #12
    1c38:	f85d fb04 	ldr.w	pc, [sp], #4

00001c3c <Clock_Ip_SetScgRunDivbus>:
    1c3c:	b500      	push	{lr}
    1c3e:	b083      	sub	sp, #12
    1c40:	9001      	str	r0, [sp, #4]
    1c42:	9b01      	ldr	r3, [sp, #4]
    1c44:	2b00      	cmp	r3, #0
    1c46:	d002      	beq.n	1c4e <Clock_Ip_SetScgRunDivbus+0x12>
    1c48:	9801      	ldr	r0, [sp, #4]
    1c4a:	f000 f8f9 	bl	1e40 <Clock_Ip_SetScgRunDivbus_TrustedCall>
    1c4e:	bf00      	nop
    1c50:	b003      	add	sp, #12
    1c52:	f85d fb04 	ldr.w	pc, [sp], #4

00001c56 <Clock_Ip_SetScgRunDivslow>:
    1c56:	b500      	push	{lr}
    1c58:	b083      	sub	sp, #12
    1c5a:	9001      	str	r0, [sp, #4]
    1c5c:	9b01      	ldr	r3, [sp, #4]
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d002      	beq.n	1c68 <Clock_Ip_SetScgRunDivslow+0x12>
    1c62:	9801      	ldr	r0, [sp, #4]
    1c64:	f000 f904 	bl	1e70 <Clock_Ip_SetScgRunDivslow_TrustedCall>
    1c68:	bf00      	nop
    1c6a:	b003      	add	sp, #12
    1c6c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c70 <Clock_Ip_SetScgVlprDivcore>:
    1c70:	b500      	push	{lr}
    1c72:	b083      	sub	sp, #12
    1c74:	9001      	str	r0, [sp, #4]
    1c76:	9b01      	ldr	r3, [sp, #4]
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d002      	beq.n	1c82 <Clock_Ip_SetScgVlprDivcore+0x12>
    1c7c:	9801      	ldr	r0, [sp, #4]
    1c7e:	f000 f90f 	bl	1ea0 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
    1c82:	bf00      	nop
    1c84:	b003      	add	sp, #12
    1c86:	f85d fb04 	ldr.w	pc, [sp], #4

00001c8a <Clock_Ip_SetScgVlprDivbus>:
    1c8a:	b500      	push	{lr}
    1c8c:	b083      	sub	sp, #12
    1c8e:	9001      	str	r0, [sp, #4]
    1c90:	9b01      	ldr	r3, [sp, #4]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d002      	beq.n	1c9c <Clock_Ip_SetScgVlprDivbus+0x12>
    1c96:	9801      	ldr	r0, [sp, #4]
    1c98:	f000 f91a 	bl	1ed0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
    1c9c:	bf00      	nop
    1c9e:	b003      	add	sp, #12
    1ca0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ca4 <Clock_Ip_SetScgVlprDivslow>:
    1ca4:	b500      	push	{lr}
    1ca6:	b083      	sub	sp, #12
    1ca8:	9001      	str	r0, [sp, #4]
    1caa:	9b01      	ldr	r3, [sp, #4]
    1cac:	2b00      	cmp	r3, #0
    1cae:	d002      	beq.n	1cb6 <Clock_Ip_SetScgVlprDivslow+0x12>
    1cb0:	9801      	ldr	r0, [sp, #4]
    1cb2:	f000 f925 	bl	1f00 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
    1cb6:	bf00      	nop
    1cb8:	b003      	add	sp, #12
    1cba:	f85d fb04 	ldr.w	pc, [sp], #4

00001cbe <Clock_Ip_SetScgHsrunDivcore>:
    1cbe:	b500      	push	{lr}
    1cc0:	b083      	sub	sp, #12
    1cc2:	9001      	str	r0, [sp, #4]
    1cc4:	9b01      	ldr	r3, [sp, #4]
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	d002      	beq.n	1cd0 <Clock_Ip_SetScgHsrunDivcore+0x12>
    1cca:	9801      	ldr	r0, [sp, #4]
    1ccc:	f000 f930 	bl	1f30 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
    1cd0:	bf00      	nop
    1cd2:	b003      	add	sp, #12
    1cd4:	f85d fb04 	ldr.w	pc, [sp], #4

00001cd8 <Clock_Ip_SetScgHsrunDivbus>:
    1cd8:	b500      	push	{lr}
    1cda:	b083      	sub	sp, #12
    1cdc:	9001      	str	r0, [sp, #4]
    1cde:	9b01      	ldr	r3, [sp, #4]
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d002      	beq.n	1cea <Clock_Ip_SetScgHsrunDivbus+0x12>
    1ce4:	9801      	ldr	r0, [sp, #4]
    1ce6:	f000 f93b 	bl	1f60 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
    1cea:	bf00      	nop
    1cec:	b003      	add	sp, #12
    1cee:	f85d fb04 	ldr.w	pc, [sp], #4

00001cf2 <Clock_Ip_SetScgHsrunDivslow>:
    1cf2:	b500      	push	{lr}
    1cf4:	b083      	sub	sp, #12
    1cf6:	9001      	str	r0, [sp, #4]
    1cf8:	9b01      	ldr	r3, [sp, #4]
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d002      	beq.n	1d04 <Clock_Ip_SetScgHsrunDivslow+0x12>
    1cfe:	9801      	ldr	r0, [sp, #4]
    1d00:	f000 f946 	bl	1f90 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
    1d04:	bf00      	nop
    1d06:	b003      	add	sp, #12
    1d08:	f85d fb04 	ldr.w	pc, [sp], #4

00001d0c <Clock_Ip_SetSimClkoutDiv>:
    1d0c:	b500      	push	{lr}
    1d0e:	b083      	sub	sp, #12
    1d10:	9001      	str	r0, [sp, #4]
    1d12:	9b01      	ldr	r3, [sp, #4]
    1d14:	2b00      	cmp	r3, #0
    1d16:	d002      	beq.n	1d1e <Clock_Ip_SetSimClkoutDiv+0x12>
    1d18:	9801      	ldr	r0, [sp, #4]
    1d1a:	f000 f951 	bl	1fc0 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
    1d1e:	bf00      	nop
    1d20:	b003      	add	sp, #12
    1d22:	f85d fb04 	ldr.w	pc, [sp], #4

00001d26 <Clock_Ip_SetPccPcdDivFrac>:
    1d26:	b500      	push	{lr}
    1d28:	b083      	sub	sp, #12
    1d2a:	9001      	str	r0, [sp, #4]
    1d2c:	9b01      	ldr	r3, [sp, #4]
    1d2e:	2b00      	cmp	r3, #0
    1d30:	d002      	beq.n	1d38 <Clock_Ip_SetPccPcdDivFrac+0x12>
    1d32:	9801      	ldr	r0, [sp, #4]
    1d34:	f000 f95e 	bl	1ff4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
    1d38:	bf00      	nop
    1d3a:	b003      	add	sp, #12
    1d3c:	f85d fb04 	ldr.w	pc, [sp], #4

00001d40 <Clock_Ip_SetSimTraceDivMul>:
    1d40:	b500      	push	{lr}
    1d42:	b083      	sub	sp, #12
    1d44:	9001      	str	r0, [sp, #4]
    1d46:	9b01      	ldr	r3, [sp, #4]
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d002      	beq.n	1d52 <Clock_Ip_SetSimTraceDivMul+0x12>
    1d4c:	9801      	ldr	r0, [sp, #4]
    1d4e:	f000 f98b 	bl	2068 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
    1d52:	bf00      	nop
    1d54:	b003      	add	sp, #12
    1d56:	f85d fb04 	ldr.w	pc, [sp], #4

00001d5a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
    1d5a:	b086      	sub	sp, #24
    1d5c:	9001      	str	r0, [sp, #4]
    1d5e:	9b01      	ldr	r3, [sp, #4]
    1d60:	681a      	ldr	r2, [r3, #0]
    1d62:	4911      	ldr	r1, [pc, #68]	; (1da8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    1d64:	4613      	mov	r3, r2
    1d66:	00db      	lsls	r3, r3, #3
    1d68:	4413      	add	r3, r2
    1d6a:	440b      	add	r3, r1
    1d6c:	781b      	ldrb	r3, [r3, #0]
    1d6e:	9305      	str	r3, [sp, #20]
    1d70:	9b01      	ldr	r3, [sp, #4]
    1d72:	685b      	ldr	r3, [r3, #4]
    1d74:	4a0d      	ldr	r2, [pc, #52]	; (1dac <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    1d76:	5cd3      	ldrb	r3, [r2, r3]
    1d78:	9304      	str	r3, [sp, #16]
    1d7a:	4a0d      	ldr	r2, [pc, #52]	; (1db0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1d7c:	9b05      	ldr	r3, [sp, #20]
    1d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d82:	681b      	ldr	r3, [r3, #0]
    1d84:	9303      	str	r3, [sp, #12]
    1d86:	9b03      	ldr	r3, [sp, #12]
    1d88:	f023 0307 	bic.w	r3, r3, #7
    1d8c:	9303      	str	r3, [sp, #12]
    1d8e:	9a03      	ldr	r2, [sp, #12]
    1d90:	9b04      	ldr	r3, [sp, #16]
    1d92:	4313      	orrs	r3, r2
    1d94:	9303      	str	r3, [sp, #12]
    1d96:	4a06      	ldr	r2, [pc, #24]	; (1db0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1d98:	9b05      	ldr	r3, [sp, #20]
    1d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d9e:	9a03      	ldr	r2, [sp, #12]
    1da0:	601a      	str	r2, [r3, #0]
    1da2:	bf00      	nop
    1da4:	b006      	add	sp, #24
    1da6:	4770      	bx	lr
    1da8:	0000b650 	.word	0x0000b650
    1dac:	0000ba48 	.word	0x0000ba48
    1db0:	0000ba8c 	.word	0x0000ba8c

00001db4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
    1db4:	b086      	sub	sp, #24
    1db6:	9001      	str	r0, [sp, #4]
    1db8:	9b01      	ldr	r3, [sp, #4]
    1dba:	681a      	ldr	r2, [r3, #0]
    1dbc:	4911      	ldr	r1, [pc, #68]	; (1e04 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    1dbe:	4613      	mov	r3, r2
    1dc0:	00db      	lsls	r3, r3, #3
    1dc2:	4413      	add	r3, r2
    1dc4:	440b      	add	r3, r1
    1dc6:	781b      	ldrb	r3, [r3, #0]
    1dc8:	9305      	str	r3, [sp, #20]
    1dca:	9b01      	ldr	r3, [sp, #4]
    1dcc:	685b      	ldr	r3, [r3, #4]
    1dce:	4a0e      	ldr	r2, [pc, #56]	; (1e08 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    1dd0:	5cd3      	ldrb	r3, [r2, r3]
    1dd2:	9304      	str	r3, [sp, #16]
    1dd4:	4a0d      	ldr	r2, [pc, #52]	; (1e0c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1dd6:	9b05      	ldr	r3, [sp, #20]
    1dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1ddc:	681b      	ldr	r3, [r3, #0]
    1dde:	9303      	str	r3, [sp, #12]
    1de0:	9b03      	ldr	r3, [sp, #12]
    1de2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1de6:	9303      	str	r3, [sp, #12]
    1de8:	9b04      	ldr	r3, [sp, #16]
    1dea:	021b      	lsls	r3, r3, #8
    1dec:	9a03      	ldr	r2, [sp, #12]
    1dee:	4313      	orrs	r3, r2
    1df0:	9303      	str	r3, [sp, #12]
    1df2:	4a06      	ldr	r2, [pc, #24]	; (1e0c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1df4:	9b05      	ldr	r3, [sp, #20]
    1df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1dfa:	9a03      	ldr	r2, [sp, #12]
    1dfc:	601a      	str	r2, [r3, #0]
    1dfe:	bf00      	nop
    1e00:	b006      	add	sp, #24
    1e02:	4770      	bx	lr
    1e04:	0000b650 	.word	0x0000b650
    1e08:	0000ba48 	.word	0x0000ba48
    1e0c:	0000ba8c 	.word	0x0000ba8c

00001e10 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
    1e10:	b084      	sub	sp, #16
    1e12:	9001      	str	r0, [sp, #4]
    1e14:	4b09      	ldr	r3, [pc, #36]	; (1e3c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1e16:	695b      	ldr	r3, [r3, #20]
    1e18:	9303      	str	r3, [sp, #12]
    1e1a:	9b03      	ldr	r3, [sp, #12]
    1e1c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1e20:	9303      	str	r3, [sp, #12]
    1e22:	9b01      	ldr	r3, [sp, #4]
    1e24:	685b      	ldr	r3, [r3, #4]
    1e26:	3b01      	subs	r3, #1
    1e28:	041b      	lsls	r3, r3, #16
    1e2a:	9a03      	ldr	r2, [sp, #12]
    1e2c:	4313      	orrs	r3, r2
    1e2e:	9303      	str	r3, [sp, #12]
    1e30:	4a02      	ldr	r2, [pc, #8]	; (1e3c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1e32:	9b03      	ldr	r3, [sp, #12]
    1e34:	6153      	str	r3, [r2, #20]
    1e36:	bf00      	nop
    1e38:	b004      	add	sp, #16
    1e3a:	4770      	bx	lr
    1e3c:	40064000 	.word	0x40064000

00001e40 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
    1e40:	b084      	sub	sp, #16
    1e42:	9001      	str	r0, [sp, #4]
    1e44:	4b09      	ldr	r3, [pc, #36]	; (1e6c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e46:	695b      	ldr	r3, [r3, #20]
    1e48:	9303      	str	r3, [sp, #12]
    1e4a:	9b03      	ldr	r3, [sp, #12]
    1e4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1e50:	9303      	str	r3, [sp, #12]
    1e52:	9b01      	ldr	r3, [sp, #4]
    1e54:	685b      	ldr	r3, [r3, #4]
    1e56:	3b01      	subs	r3, #1
    1e58:	011b      	lsls	r3, r3, #4
    1e5a:	9a03      	ldr	r2, [sp, #12]
    1e5c:	4313      	orrs	r3, r2
    1e5e:	9303      	str	r3, [sp, #12]
    1e60:	4a02      	ldr	r2, [pc, #8]	; (1e6c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e62:	9b03      	ldr	r3, [sp, #12]
    1e64:	6153      	str	r3, [r2, #20]
    1e66:	bf00      	nop
    1e68:	b004      	add	sp, #16
    1e6a:	4770      	bx	lr
    1e6c:	40064000 	.word	0x40064000

00001e70 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
    1e70:	b084      	sub	sp, #16
    1e72:	9001      	str	r0, [sp, #4]
    1e74:	4b09      	ldr	r3, [pc, #36]	; (1e9c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1e76:	695b      	ldr	r3, [r3, #20]
    1e78:	9303      	str	r3, [sp, #12]
    1e7a:	9b03      	ldr	r3, [sp, #12]
    1e7c:	f023 030f 	bic.w	r3, r3, #15
    1e80:	9303      	str	r3, [sp, #12]
    1e82:	9b01      	ldr	r3, [sp, #4]
    1e84:	685b      	ldr	r3, [r3, #4]
    1e86:	3b01      	subs	r3, #1
    1e88:	9a03      	ldr	r2, [sp, #12]
    1e8a:	4313      	orrs	r3, r2
    1e8c:	9303      	str	r3, [sp, #12]
    1e8e:	4a03      	ldr	r2, [pc, #12]	; (1e9c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1e90:	9b03      	ldr	r3, [sp, #12]
    1e92:	6153      	str	r3, [r2, #20]
    1e94:	bf00      	nop
    1e96:	b004      	add	sp, #16
    1e98:	4770      	bx	lr
    1e9a:	bf00      	nop
    1e9c:	40064000 	.word	0x40064000

00001ea0 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
    1ea0:	b084      	sub	sp, #16
    1ea2:	9001      	str	r0, [sp, #4]
    1ea4:	4b09      	ldr	r3, [pc, #36]	; (1ecc <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1ea6:	699b      	ldr	r3, [r3, #24]
    1ea8:	9303      	str	r3, [sp, #12]
    1eaa:	9b03      	ldr	r3, [sp, #12]
    1eac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1eb0:	9303      	str	r3, [sp, #12]
    1eb2:	9b01      	ldr	r3, [sp, #4]
    1eb4:	685b      	ldr	r3, [r3, #4]
    1eb6:	3b01      	subs	r3, #1
    1eb8:	041b      	lsls	r3, r3, #16
    1eba:	9a03      	ldr	r2, [sp, #12]
    1ebc:	4313      	orrs	r3, r2
    1ebe:	9303      	str	r3, [sp, #12]
    1ec0:	4a02      	ldr	r2, [pc, #8]	; (1ecc <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1ec2:	9b03      	ldr	r3, [sp, #12]
    1ec4:	6193      	str	r3, [r2, #24]
    1ec6:	bf00      	nop
    1ec8:	b004      	add	sp, #16
    1eca:	4770      	bx	lr
    1ecc:	40064000 	.word	0x40064000

00001ed0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
    1ed0:	b084      	sub	sp, #16
    1ed2:	9001      	str	r0, [sp, #4]
    1ed4:	4b09      	ldr	r3, [pc, #36]	; (1efc <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1ed6:	699b      	ldr	r3, [r3, #24]
    1ed8:	9303      	str	r3, [sp, #12]
    1eda:	9b03      	ldr	r3, [sp, #12]
    1edc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1ee0:	9303      	str	r3, [sp, #12]
    1ee2:	9b01      	ldr	r3, [sp, #4]
    1ee4:	685b      	ldr	r3, [r3, #4]
    1ee6:	3b01      	subs	r3, #1
    1ee8:	011b      	lsls	r3, r3, #4
    1eea:	9a03      	ldr	r2, [sp, #12]
    1eec:	4313      	orrs	r3, r2
    1eee:	9303      	str	r3, [sp, #12]
    1ef0:	4a02      	ldr	r2, [pc, #8]	; (1efc <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1ef2:	9b03      	ldr	r3, [sp, #12]
    1ef4:	6193      	str	r3, [r2, #24]
    1ef6:	bf00      	nop
    1ef8:	b004      	add	sp, #16
    1efa:	4770      	bx	lr
    1efc:	40064000 	.word	0x40064000

00001f00 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
    1f00:	b084      	sub	sp, #16
    1f02:	9001      	str	r0, [sp, #4]
    1f04:	4b09      	ldr	r3, [pc, #36]	; (1f2c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1f06:	699b      	ldr	r3, [r3, #24]
    1f08:	9303      	str	r3, [sp, #12]
    1f0a:	9b03      	ldr	r3, [sp, #12]
    1f0c:	f023 030f 	bic.w	r3, r3, #15
    1f10:	9303      	str	r3, [sp, #12]
    1f12:	9b01      	ldr	r3, [sp, #4]
    1f14:	685b      	ldr	r3, [r3, #4]
    1f16:	3b01      	subs	r3, #1
    1f18:	9a03      	ldr	r2, [sp, #12]
    1f1a:	4313      	orrs	r3, r2
    1f1c:	9303      	str	r3, [sp, #12]
    1f1e:	4a03      	ldr	r2, [pc, #12]	; (1f2c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1f20:	9b03      	ldr	r3, [sp, #12]
    1f22:	6193      	str	r3, [r2, #24]
    1f24:	bf00      	nop
    1f26:	b004      	add	sp, #16
    1f28:	4770      	bx	lr
    1f2a:	bf00      	nop
    1f2c:	40064000 	.word	0x40064000

00001f30 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
    1f30:	b084      	sub	sp, #16
    1f32:	9001      	str	r0, [sp, #4]
    1f34:	4b09      	ldr	r3, [pc, #36]	; (1f5c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1f36:	69db      	ldr	r3, [r3, #28]
    1f38:	9303      	str	r3, [sp, #12]
    1f3a:	9b03      	ldr	r3, [sp, #12]
    1f3c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1f40:	9303      	str	r3, [sp, #12]
    1f42:	9b01      	ldr	r3, [sp, #4]
    1f44:	685b      	ldr	r3, [r3, #4]
    1f46:	3b01      	subs	r3, #1
    1f48:	041b      	lsls	r3, r3, #16
    1f4a:	9a03      	ldr	r2, [sp, #12]
    1f4c:	4313      	orrs	r3, r2
    1f4e:	9303      	str	r3, [sp, #12]
    1f50:	4a02      	ldr	r2, [pc, #8]	; (1f5c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1f52:	9b03      	ldr	r3, [sp, #12]
    1f54:	61d3      	str	r3, [r2, #28]
    1f56:	bf00      	nop
    1f58:	b004      	add	sp, #16
    1f5a:	4770      	bx	lr
    1f5c:	40064000 	.word	0x40064000

00001f60 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
    1f60:	b084      	sub	sp, #16
    1f62:	9001      	str	r0, [sp, #4]
    1f64:	4b09      	ldr	r3, [pc, #36]	; (1f8c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1f66:	69db      	ldr	r3, [r3, #28]
    1f68:	9303      	str	r3, [sp, #12]
    1f6a:	9b03      	ldr	r3, [sp, #12]
    1f6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1f70:	9303      	str	r3, [sp, #12]
    1f72:	9b01      	ldr	r3, [sp, #4]
    1f74:	685b      	ldr	r3, [r3, #4]
    1f76:	3b01      	subs	r3, #1
    1f78:	011b      	lsls	r3, r3, #4
    1f7a:	9a03      	ldr	r2, [sp, #12]
    1f7c:	4313      	orrs	r3, r2
    1f7e:	9303      	str	r3, [sp, #12]
    1f80:	4a02      	ldr	r2, [pc, #8]	; (1f8c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1f82:	9b03      	ldr	r3, [sp, #12]
    1f84:	61d3      	str	r3, [r2, #28]
    1f86:	bf00      	nop
    1f88:	b004      	add	sp, #16
    1f8a:	4770      	bx	lr
    1f8c:	40064000 	.word	0x40064000

00001f90 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
    1f90:	b084      	sub	sp, #16
    1f92:	9001      	str	r0, [sp, #4]
    1f94:	4b09      	ldr	r3, [pc, #36]	; (1fbc <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1f96:	69db      	ldr	r3, [r3, #28]
    1f98:	9303      	str	r3, [sp, #12]
    1f9a:	9b03      	ldr	r3, [sp, #12]
    1f9c:	f023 030f 	bic.w	r3, r3, #15
    1fa0:	9303      	str	r3, [sp, #12]
    1fa2:	9b01      	ldr	r3, [sp, #4]
    1fa4:	685b      	ldr	r3, [r3, #4]
    1fa6:	3b01      	subs	r3, #1
    1fa8:	9a03      	ldr	r2, [sp, #12]
    1faa:	4313      	orrs	r3, r2
    1fac:	9303      	str	r3, [sp, #12]
    1fae:	4a03      	ldr	r2, [pc, #12]	; (1fbc <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1fb0:	9b03      	ldr	r3, [sp, #12]
    1fb2:	61d3      	str	r3, [r2, #28]
    1fb4:	bf00      	nop
    1fb6:	b004      	add	sp, #16
    1fb8:	4770      	bx	lr
    1fba:	bf00      	nop
    1fbc:	40064000 	.word	0x40064000

00001fc0 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
    1fc0:	b084      	sub	sp, #16
    1fc2:	9001      	str	r0, [sp, #4]
    1fc4:	4b0a      	ldr	r3, [pc, #40]	; (1ff0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    1fc6:	685b      	ldr	r3, [r3, #4]
    1fc8:	9303      	str	r3, [sp, #12]
    1fca:	9b03      	ldr	r3, [sp, #12]
    1fcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1fd0:	9303      	str	r3, [sp, #12]
    1fd2:	9b01      	ldr	r3, [sp, #4]
    1fd4:	685b      	ldr	r3, [r3, #4]
    1fd6:	3b01      	subs	r3, #1
    1fd8:	021b      	lsls	r3, r3, #8
    1fda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    1fde:	9a03      	ldr	r2, [sp, #12]
    1fe0:	4313      	orrs	r3, r2
    1fe2:	9303      	str	r3, [sp, #12]
    1fe4:	4a02      	ldr	r2, [pc, #8]	; (1ff0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    1fe6:	9b03      	ldr	r3, [sp, #12]
    1fe8:	6053      	str	r3, [r2, #4]
    1fea:	bf00      	nop
    1fec:	b004      	add	sp, #16
    1fee:	4770      	bx	lr
    1ff0:	40048000 	.word	0x40048000

00001ff4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
    1ff4:	b084      	sub	sp, #16
    1ff6:	9001      	str	r0, [sp, #4]
    1ff8:	4919      	ldr	r1, [pc, #100]	; (2060 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    1ffa:	9b01      	ldr	r3, [sp, #4]
    1ffc:	681a      	ldr	r2, [r3, #0]
    1ffe:	4819      	ldr	r0, [pc, #100]	; (2064 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2000:	4613      	mov	r3, r2
    2002:	00db      	lsls	r3, r3, #3
    2004:	4413      	add	r3, r2
    2006:	4403      	add	r3, r0
    2008:	3305      	adds	r3, #5
    200a:	781b      	ldrb	r3, [r3, #0]
    200c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2010:	9303      	str	r3, [sp, #12]
    2012:	9b03      	ldr	r3, [sp, #12]
    2014:	f023 030f 	bic.w	r3, r3, #15
    2018:	9303      	str	r3, [sp, #12]
    201a:	9b01      	ldr	r3, [sp, #4]
    201c:	685b      	ldr	r3, [r3, #4]
    201e:	3b01      	subs	r3, #1
    2020:	f003 0307 	and.w	r3, r3, #7
    2024:	9a03      	ldr	r2, [sp, #12]
    2026:	4313      	orrs	r3, r2
    2028:	9303      	str	r3, [sp, #12]
    202a:	9b01      	ldr	r3, [sp, #4]
    202c:	7a1b      	ldrb	r3, [r3, #8]
    202e:	3b01      	subs	r3, #1
    2030:	00db      	lsls	r3, r3, #3
    2032:	f003 0308 	and.w	r3, r3, #8
    2036:	9a03      	ldr	r2, [sp, #12]
    2038:	4313      	orrs	r3, r2
    203a:	9303      	str	r3, [sp, #12]
    203c:	4908      	ldr	r1, [pc, #32]	; (2060 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    203e:	9b01      	ldr	r3, [sp, #4]
    2040:	681a      	ldr	r2, [r3, #0]
    2042:	4808      	ldr	r0, [pc, #32]	; (2064 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2044:	4613      	mov	r3, r2
    2046:	00db      	lsls	r3, r3, #3
    2048:	4413      	add	r3, r2
    204a:	4403      	add	r3, r0
    204c:	3305      	adds	r3, #5
    204e:	781b      	ldrb	r3, [r3, #0]
    2050:	461a      	mov	r2, r3
    2052:	9b03      	ldr	r3, [sp, #12]
    2054:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    2058:	bf00      	nop
    205a:	b004      	add	sp, #16
    205c:	4770      	bx	lr
    205e:	bf00      	nop
    2060:	40065000 	.word	0x40065000
    2064:	0000b650 	.word	0x0000b650

00002068 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
    2068:	b084      	sub	sp, #16
    206a:	9001      	str	r0, [sp, #4]
    206c:	4b10      	ldr	r3, [pc, #64]	; (20b0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    206e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2070:	4a0f      	ldr	r2, [pc, #60]	; (20b0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2076:	6693      	str	r3, [r2, #104]	; 0x68
    2078:	4b0d      	ldr	r3, [pc, #52]	; (20b0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    207a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    207c:	9303      	str	r3, [sp, #12]
    207e:	9b03      	ldr	r3, [sp, #12]
    2080:	f023 030f 	bic.w	r3, r3, #15
    2084:	9303      	str	r3, [sp, #12]
    2086:	9b01      	ldr	r3, [sp, #4]
    2088:	685b      	ldr	r3, [r3, #4]
    208a:	3b01      	subs	r3, #1
    208c:	005b      	lsls	r3, r3, #1
    208e:	f003 020e 	and.w	r2, r3, #14
    2092:	9b01      	ldr	r3, [sp, #4]
    2094:	7a1b      	ldrb	r3, [r3, #8]
    2096:	3b01      	subs	r3, #1
    2098:	f003 0301 	and.w	r3, r3, #1
    209c:	4313      	orrs	r3, r2
    209e:	9a03      	ldr	r2, [sp, #12]
    20a0:	4313      	orrs	r3, r2
    20a2:	9303      	str	r3, [sp, #12]
    20a4:	4a02      	ldr	r2, [pc, #8]	; (20b0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    20a6:	9b03      	ldr	r3, [sp, #12]
    20a8:	6693      	str	r3, [r2, #104]	; 0x68
    20aa:	bf00      	nop
    20ac:	b004      	add	sp, #16
    20ae:	4770      	bx	lr
    20b0:	40048000 	.word	0x40048000

000020b4 <Clock_Ip_Callback_DividerTriggerEmpty>:
    20b4:	b082      	sub	sp, #8
    20b6:	9001      	str	r0, [sp, #4]
    20b8:	bf00      	nop
    20ba:	b002      	add	sp, #8
    20bc:	4770      	bx	lr
	...

000020c0 <Clock_Ip_ExternalOscillatorEmpty>:
    20c0:	b082      	sub	sp, #8
    20c2:	9001      	str	r0, [sp, #4]
    20c4:	bf00      	nop
    20c6:	b002      	add	sp, #8
    20c8:	4770      	bx	lr

000020ca <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
    20ca:	b082      	sub	sp, #8
    20cc:	9001      	str	r0, [sp, #4]
    20ce:	bf00      	nop
    20d0:	b002      	add	sp, #8
    20d2:	4770      	bx	lr

000020d4 <Clock_Ip_ResetSOSC>:
    20d4:	b500      	push	{lr}
    20d6:	b083      	sub	sp, #12
    20d8:	9001      	str	r0, [sp, #4]
    20da:	9b01      	ldr	r3, [sp, #4]
    20dc:	2b00      	cmp	r3, #0
    20de:	d002      	beq.n	20e6 <Clock_Ip_ResetSOSC+0x12>
    20e0:	9801      	ldr	r0, [sp, #4]
    20e2:	f000 f86a 	bl	21ba <Clock_Ip_ResetSOSC_TrustedCall>
    20e6:	bf00      	nop
    20e8:	b003      	add	sp, #12
    20ea:	f85d fb04 	ldr.w	pc, [sp], #4

000020ee <Clock_Ip_SetSOSC>:
    20ee:	b500      	push	{lr}
    20f0:	b083      	sub	sp, #12
    20f2:	9001      	str	r0, [sp, #4]
    20f4:	9b01      	ldr	r3, [sp, #4]
    20f6:	2b00      	cmp	r3, #0
    20f8:	d002      	beq.n	2100 <Clock_Ip_SetSOSC+0x12>
    20fa:	9801      	ldr	r0, [sp, #4]
    20fc:	f000 f884 	bl	2208 <Clock_Ip_SetSOSC_TrustedCall>
    2100:	bf00      	nop
    2102:	b003      	add	sp, #12
    2104:	f85d fb04 	ldr.w	pc, [sp], #4

00002108 <Clock_Ip_CompleteSOSC>:
    2108:	b500      	push	{lr}
    210a:	b089      	sub	sp, #36	; 0x24
    210c:	9001      	str	r0, [sp, #4]
    210e:	2300      	movs	r3, #0
    2110:	f88d 301f 	strb.w	r3, [sp, #31]
    2114:	9b01      	ldr	r3, [sp, #4]
    2116:	2b00      	cmp	r3, #0
    2118:	d031      	beq.n	217e <Clock_Ip_CompleteSOSC+0x76>
    211a:	4b1b      	ldr	r3, [pc, #108]	; (2188 <Clock_Ip_CompleteSOSC+0x80>)
    211c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2120:	f003 0301 	and.w	r3, r3, #1
    2124:	2b00      	cmp	r3, #0
    2126:	d02a      	beq.n	217e <Clock_Ip_CompleteSOSC+0x76>
    2128:	aa03      	add	r2, sp, #12
    212a:	a904      	add	r1, sp, #16
    212c:	a805      	add	r0, sp, #20
    212e:	f24c 3350 	movw	r3, #50000	; 0xc350
    2132:	f7ff fd1d 	bl	1b70 <Clock_Ip_StartTimeout>
    2136:	4b14      	ldr	r3, [pc, #80]	; (2188 <Clock_Ip_CompleteSOSC+0x80>)
    2138:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    213c:	0e1b      	lsrs	r3, r3, #24
    213e:	f003 0301 	and.w	r3, r3, #1
    2142:	9306      	str	r3, [sp, #24]
    2144:	9a03      	ldr	r2, [sp, #12]
    2146:	a904      	add	r1, sp, #16
    2148:	ab05      	add	r3, sp, #20
    214a:	4618      	mov	r0, r3
    214c:	f7ff fd2a 	bl	1ba4 <Clock_Ip_TimeoutExpired>
    2150:	4603      	mov	r3, r0
    2152:	f88d 301f 	strb.w	r3, [sp, #31]
    2156:	9b06      	ldr	r3, [sp, #24]
    2158:	2b00      	cmp	r3, #0
    215a:	d106      	bne.n	216a <Clock_Ip_CompleteSOSC+0x62>
    215c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2160:	f083 0301 	eor.w	r3, r3, #1
    2164:	b2db      	uxtb	r3, r3
    2166:	2b00      	cmp	r3, #0
    2168:	d1e5      	bne.n	2136 <Clock_Ip_CompleteSOSC+0x2e>
    216a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    216e:	2b00      	cmp	r3, #0
    2170:	d005      	beq.n	217e <Clock_Ip_CompleteSOSC+0x76>
    2172:	9b01      	ldr	r3, [sp, #4]
    2174:	681b      	ldr	r3, [r3, #0]
    2176:	4619      	mov	r1, r3
    2178:	2001      	movs	r0, #1
    217a:	f7ff fce9 	bl	1b50 <Clock_Ip_ReportClockErrors>
    217e:	bf00      	nop
    2180:	b009      	add	sp, #36	; 0x24
    2182:	f85d fb04 	ldr.w	pc, [sp], #4
    2186:	bf00      	nop
    2188:	40064000 	.word	0x40064000

0000218c <Clock_Ip_DisableSOSC>:
    218c:	b500      	push	{lr}
    218e:	b083      	sub	sp, #12
    2190:	9001      	str	r0, [sp, #4]
    2192:	9801      	ldr	r0, [sp, #4]
    2194:	f000 f8c0 	bl	2318 <Clock_Ip_DisableSOSC_TrustedCall>
    2198:	bf00      	nop
    219a:	b003      	add	sp, #12
    219c:	f85d fb04 	ldr.w	pc, [sp], #4

000021a0 <Clock_Ip_EnableSOSC>:
    21a0:	b500      	push	{lr}
    21a2:	b083      	sub	sp, #12
    21a4:	9001      	str	r0, [sp, #4]
    21a6:	9b01      	ldr	r3, [sp, #4]
    21a8:	2b00      	cmp	r3, #0
    21aa:	d002      	beq.n	21b2 <Clock_Ip_EnableSOSC+0x12>
    21ac:	9801      	ldr	r0, [sp, #4]
    21ae:	f000 f8c3 	bl	2338 <Clock_Ip_EnableSOSC_TrustedCall>
    21b2:	bf00      	nop
    21b4:	b003      	add	sp, #12
    21b6:	f85d fb04 	ldr.w	pc, [sp], #4

000021ba <Clock_Ip_ResetSOSC_TrustedCall>:
    21ba:	b082      	sub	sp, #8
    21bc:	9001      	str	r0, [sp, #4]
    21be:	4b11      	ldr	r3, [pc, #68]	; (2204 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21c4:	4a0f      	ldr	r2, [pc, #60]	; (2204 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    21ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    21ce:	4b0d      	ldr	r3, [pc, #52]	; (2204 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21d4:	4a0b      	ldr	r2, [pc, #44]	; (2204 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    21da:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    21de:	4b09      	ldr	r3, [pc, #36]	; (2204 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21e4:	4a07      	ldr	r2, [pc, #28]	; (2204 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21e6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    21ea:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    21ee:	4b05      	ldr	r3, [pc, #20]	; (2204 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21f4:	4a03      	ldr	r2, [pc, #12]	; (2204 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21f6:	f023 0301 	bic.w	r3, r3, #1
    21fa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    21fe:	bf00      	nop
    2200:	b002      	add	sp, #8
    2202:	4770      	bx	lr
    2204:	40064000 	.word	0x40064000

00002208 <Clock_Ip_SetSOSC_TrustedCall>:
    2208:	b082      	sub	sp, #8
    220a:	9001      	str	r0, [sp, #4]
    220c:	9b01      	ldr	r3, [sp, #4]
    220e:	891b      	ldrh	r3, [r3, #8]
    2210:	2b01      	cmp	r3, #1
    2212:	d174      	bne.n	22fe <Clock_Ip_SetSOSC_TrustedCall+0xf6>
    2214:	9b01      	ldr	r3, [sp, #4]
    2216:	7bdb      	ldrb	r3, [r3, #15]
    2218:	2b00      	cmp	r3, #0
    221a:	d002      	beq.n	2222 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    221c:	2b01      	cmp	r3, #1
    221e:	d009      	beq.n	2234 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
    2220:	e011      	b.n	2246 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
    2222:	4b39      	ldr	r3, [pc, #228]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2224:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2228:	4a37      	ldr	r2, [pc, #220]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    222a:	f023 0308 	bic.w	r3, r3, #8
    222e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2232:	e008      	b.n	2246 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
    2234:	4b34      	ldr	r3, [pc, #208]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2236:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    223a:	4a33      	ldr	r2, [pc, #204]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    223c:	f043 0308 	orr.w	r3, r3, #8
    2240:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2244:	bf00      	nop
    2246:	4b30      	ldr	r3, [pc, #192]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2248:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    224c:	4a2e      	ldr	r2, [pc, #184]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    224e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2252:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2256:	9b01      	ldr	r3, [sp, #4]
    2258:	685b      	ldr	r3, [r3, #4]
    225a:	4a2c      	ldr	r2, [pc, #176]	; (230c <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    225c:	4293      	cmp	r3, r2
    225e:	d90d      	bls.n	227c <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2260:	9b01      	ldr	r3, [sp, #4]
    2262:	685b      	ldr	r3, [r3, #4]
    2264:	4a2a      	ldr	r2, [pc, #168]	; (2310 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    2266:	4293      	cmp	r3, r2
    2268:	d208      	bcs.n	227c <Clock_Ip_SetSOSC_TrustedCall+0x74>
    226a:	4b27      	ldr	r3, [pc, #156]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    226c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2270:	4a25      	ldr	r2, [pc, #148]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2272:	f043 0320 	orr.w	r3, r3, #32
    2276:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    227a:	e007      	b.n	228c <Clock_Ip_SetSOSC_TrustedCall+0x84>
    227c:	4b22      	ldr	r3, [pc, #136]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    227e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2282:	4a21      	ldr	r2, [pc, #132]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2284:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    2288:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    228c:	9b01      	ldr	r3, [sp, #4]
    228e:	7b1b      	ldrb	r3, [r3, #12]
    2290:	2b00      	cmp	r3, #0
    2292:	d108      	bne.n	22a6 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
    2294:	4b1c      	ldr	r3, [pc, #112]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2296:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    229a:	4a1b      	ldr	r2, [pc, #108]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    229c:	f043 0304 	orr.w	r3, r3, #4
    22a0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    22a4:	e007      	b.n	22b6 <Clock_Ip_SetSOSC_TrustedCall+0xae>
    22a6:	4b18      	ldr	r3, [pc, #96]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22ac:	4a16      	ldr	r2, [pc, #88]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22ae:	f023 0304 	bic.w	r3, r3, #4
    22b2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    22b6:	9b01      	ldr	r3, [sp, #4]
    22b8:	7c1b      	ldrb	r3, [r3, #16]
    22ba:	2b02      	cmp	r3, #2
    22bc:	d011      	beq.n	22e2 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    22be:	2b02      	cmp	r3, #2
    22c0:	dc14      	bgt.n	22ec <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    22c2:	2b00      	cmp	r3, #0
    22c4:	d002      	beq.n	22cc <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    22c6:	2b01      	cmp	r3, #1
    22c8:	d005      	beq.n	22d6 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    22ca:	e00f      	b.n	22ec <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    22cc:	4b0e      	ldr	r3, [pc, #56]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22ce:	2201      	movs	r2, #1
    22d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    22d4:	e014      	b.n	2300 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
    22d6:	4b0c      	ldr	r3, [pc, #48]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22d8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    22dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    22e0:	e00e      	b.n	2300 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
    22e2:	4b09      	ldr	r3, [pc, #36]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22e4:	4a0b      	ldr	r2, [pc, #44]	; (2314 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    22e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    22ea:	e009      	b.n	2300 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
    22ec:	4b06      	ldr	r3, [pc, #24]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    22f2:	4a05      	ldr	r2, [pc, #20]	; (2308 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22f4:	f043 0301 	orr.w	r3, r3, #1
    22f8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    22fc:	e000      	b.n	2300 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
    22fe:	bf00      	nop
    2300:	bf00      	nop
    2302:	b002      	add	sp, #8
    2304:	4770      	bx	lr
    2306:	bf00      	nop
    2308:	40064000 	.word	0x40064000
    230c:	003d08ff 	.word	0x003d08ff
    2310:	007a1200 	.word	0x007a1200
    2314:	00030001 	.word	0x00030001

00002318 <Clock_Ip_DisableSOSC_TrustedCall>:
    2318:	b082      	sub	sp, #8
    231a:	9001      	str	r0, [sp, #4]
    231c:	4b05      	ldr	r3, [pc, #20]	; (2334 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    231e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2322:	4a04      	ldr	r2, [pc, #16]	; (2334 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2324:	f023 0301 	bic.w	r3, r3, #1
    2328:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    232c:	bf00      	nop
    232e:	b002      	add	sp, #8
    2330:	4770      	bx	lr
    2332:	bf00      	nop
    2334:	40064000 	.word	0x40064000

00002338 <Clock_Ip_EnableSOSC_TrustedCall>:
    2338:	b082      	sub	sp, #8
    233a:	9001      	str	r0, [sp, #4]
    233c:	9b01      	ldr	r3, [sp, #4]
    233e:	891b      	ldrh	r3, [r3, #8]
    2340:	2b01      	cmp	r3, #1
    2342:	d107      	bne.n	2354 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    2344:	4b05      	ldr	r3, [pc, #20]	; (235c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2346:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    234a:	4a04      	ldr	r2, [pc, #16]	; (235c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    234c:	f043 0301 	orr.w	r3, r3, #1
    2350:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    2354:	bf00      	nop
    2356:	b002      	add	sp, #8
    2358:	4770      	bx	lr
    235a:	bf00      	nop
    235c:	40064000 	.word	0x40064000

00002360 <Clock_Ip_CallbackFracDivEmpty>:
    2360:	b082      	sub	sp, #8
    2362:	9001      	str	r0, [sp, #4]
    2364:	bf00      	nop
    2366:	b002      	add	sp, #8
    2368:	4770      	bx	lr

0000236a <Clock_Ip_CallbackFracDivEmptyComplete>:
    236a:	b082      	sub	sp, #8
    236c:	9001      	str	r0, [sp, #4]
    236e:	2300      	movs	r3, #0
    2370:	4618      	mov	r0, r3
    2372:	b002      	add	sp, #8
    2374:	4770      	bx	lr

00002376 <Clock_Ip_SetExternalSignalFrequency>:
    2376:	b082      	sub	sp, #8
    2378:	9001      	str	r0, [sp, #4]
    237a:	9100      	str	r1, [sp, #0]
    237c:	bf00      	nop
    237e:	b002      	add	sp, #8
    2380:	4770      	bx	lr
	...

00002384 <Clock_Ip_ClockSetGateEmpty>:
    2384:	b082      	sub	sp, #8
    2386:	9001      	str	r0, [sp, #4]
    2388:	bf00      	nop
    238a:	b002      	add	sp, #8
    238c:	4770      	bx	lr

0000238e <Clock_Ip_ClockUpdateGateEmpty>:
    238e:	b082      	sub	sp, #8
    2390:	9001      	str	r0, [sp, #4]
    2392:	460b      	mov	r3, r1
    2394:	f88d 3003 	strb.w	r3, [sp, #3]
    2398:	bf00      	nop
    239a:	b002      	add	sp, #8
    239c:	4770      	bx	lr

0000239e <Clock_Ip_ClockSetSimLPO1KEnable>:
    239e:	b500      	push	{lr}
    23a0:	b083      	sub	sp, #12
    23a2:	9001      	str	r0, [sp, #4]
    23a4:	9b01      	ldr	r3, [sp, #4]
    23a6:	2b00      	cmp	r3, #0
    23a8:	d002      	beq.n	23b0 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    23aa:	9801      	ldr	r0, [sp, #4]
    23ac:	f000 f8e7 	bl	257e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
    23b0:	bf00      	nop
    23b2:	b003      	add	sp, #12
    23b4:	f85d fb04 	ldr.w	pc, [sp], #4

000023b8 <Clock_Ip_ClockUpdateSimLPO1KEnable>:
    23b8:	b500      	push	{lr}
    23ba:	b085      	sub	sp, #20
    23bc:	9001      	str	r0, [sp, #4]
    23be:	460b      	mov	r3, r1
    23c0:	f88d 3003 	strb.w	r3, [sp, #3]
    23c4:	9b01      	ldr	r3, [sp, #4]
    23c6:	9302      	str	r3, [sp, #8]
    23c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    23cc:	2b00      	cmp	r3, #0
    23ce:	d003      	beq.n	23d8 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    23d0:	2300      	movs	r3, #0
    23d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    23d6:	e002      	b.n	23de <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    23d8:	2301      	movs	r3, #1
    23da:	f8ad 300c 	strh.w	r3, [sp, #12]
    23de:	ab02      	add	r3, sp, #8
    23e0:	4618      	mov	r0, r3
    23e2:	f7ff ffdc 	bl	239e <Clock_Ip_ClockSetSimLPO1KEnable>
    23e6:	bf00      	nop
    23e8:	b005      	add	sp, #20
    23ea:	f85d fb04 	ldr.w	pc, [sp], #4

000023ee <Clock_Ip_ClockSetSimLPO32KEnable>:
    23ee:	b500      	push	{lr}
    23f0:	b083      	sub	sp, #12
    23f2:	9001      	str	r0, [sp, #4]
    23f4:	9b01      	ldr	r3, [sp, #4]
    23f6:	2b00      	cmp	r3, #0
    23f8:	d002      	beq.n	2400 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    23fa:	9801      	ldr	r0, [sp, #4]
    23fc:	f000 f8d6 	bl	25ac <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
    2400:	bf00      	nop
    2402:	b003      	add	sp, #12
    2404:	f85d fb04 	ldr.w	pc, [sp], #4

00002408 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
    2408:	b500      	push	{lr}
    240a:	b085      	sub	sp, #20
    240c:	9001      	str	r0, [sp, #4]
    240e:	460b      	mov	r3, r1
    2410:	f88d 3003 	strb.w	r3, [sp, #3]
    2414:	9b01      	ldr	r3, [sp, #4]
    2416:	9302      	str	r3, [sp, #8]
    2418:	f89d 3003 	ldrb.w	r3, [sp, #3]
    241c:	2b00      	cmp	r3, #0
    241e:	d003      	beq.n	2428 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    2420:	2300      	movs	r3, #0
    2422:	f8ad 300c 	strh.w	r3, [sp, #12]
    2426:	e002      	b.n	242e <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    2428:	2301      	movs	r3, #1
    242a:	f8ad 300c 	strh.w	r3, [sp, #12]
    242e:	ab02      	add	r3, sp, #8
    2430:	4618      	mov	r0, r3
    2432:	f7ff ffdc 	bl	23ee <Clock_Ip_ClockSetSimLPO32KEnable>
    2436:	bf00      	nop
    2438:	b005      	add	sp, #20
    243a:	f85d fb04 	ldr.w	pc, [sp], #4

0000243e <Clock_Ip_ClockSetSimClkoutEnable>:
    243e:	b500      	push	{lr}
    2440:	b083      	sub	sp, #12
    2442:	9001      	str	r0, [sp, #4]
    2444:	9b01      	ldr	r3, [sp, #4]
    2446:	2b00      	cmp	r3, #0
    2448:	d002      	beq.n	2450 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    244a:	9801      	ldr	r0, [sp, #4]
    244c:	f000 f8c6 	bl	25dc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
    2450:	bf00      	nop
    2452:	b003      	add	sp, #12
    2454:	f85d fb04 	ldr.w	pc, [sp], #4

00002458 <Clock_Ip_ClockUpdateSimClkoutEnable>:
    2458:	b500      	push	{lr}
    245a:	b085      	sub	sp, #20
    245c:	9001      	str	r0, [sp, #4]
    245e:	460b      	mov	r3, r1
    2460:	f88d 3003 	strb.w	r3, [sp, #3]
    2464:	9b01      	ldr	r3, [sp, #4]
    2466:	9302      	str	r3, [sp, #8]
    2468:	f89d 3003 	ldrb.w	r3, [sp, #3]
    246c:	2b00      	cmp	r3, #0
    246e:	d003      	beq.n	2478 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    2470:	2300      	movs	r3, #0
    2472:	f8ad 300c 	strh.w	r3, [sp, #12]
    2476:	e002      	b.n	247e <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    2478:	2301      	movs	r3, #1
    247a:	f8ad 300c 	strh.w	r3, [sp, #12]
    247e:	ab02      	add	r3, sp, #8
    2480:	4618      	mov	r0, r3
    2482:	f7ff ffdc 	bl	243e <Clock_Ip_ClockSetSimClkoutEnable>
    2486:	bf00      	nop
    2488:	b005      	add	sp, #20
    248a:	f85d fb04 	ldr.w	pc, [sp], #4

0000248e <Clock_Ip_ClockSetPccCgcEnable>:
    248e:	b500      	push	{lr}
    2490:	b083      	sub	sp, #12
    2492:	9001      	str	r0, [sp, #4]
    2494:	9b01      	ldr	r3, [sp, #4]
    2496:	2b00      	cmp	r3, #0
    2498:	d002      	beq.n	24a0 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    249a:	9801      	ldr	r0, [sp, #4]
    249c:	f000 f8b6 	bl	260c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
    24a0:	bf00      	nop
    24a2:	b003      	add	sp, #12
    24a4:	f85d fb04 	ldr.w	pc, [sp], #4

000024a8 <Clock_Ip_ClockUpdatePccCgcEnable>:
    24a8:	b500      	push	{lr}
    24aa:	b085      	sub	sp, #20
    24ac:	9001      	str	r0, [sp, #4]
    24ae:	460b      	mov	r3, r1
    24b0:	f88d 3003 	strb.w	r3, [sp, #3]
    24b4:	9b01      	ldr	r3, [sp, #4]
    24b6:	9302      	str	r3, [sp, #8]
    24b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24bc:	2b00      	cmp	r3, #0
    24be:	d003      	beq.n	24c8 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    24c0:	2300      	movs	r3, #0
    24c2:	f8ad 300c 	strh.w	r3, [sp, #12]
    24c6:	e002      	b.n	24ce <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    24c8:	2301      	movs	r3, #1
    24ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    24ce:	ab02      	add	r3, sp, #8
    24d0:	4618      	mov	r0, r3
    24d2:	f7ff ffdc 	bl	248e <Clock_Ip_ClockSetPccCgcEnable>
    24d6:	bf00      	nop
    24d8:	b005      	add	sp, #20
    24da:	f85d fb04 	ldr.w	pc, [sp], #4

000024de <Clock_Ip_ClockSetSimGate>:
    24de:	b500      	push	{lr}
    24e0:	b083      	sub	sp, #12
    24e2:	9001      	str	r0, [sp, #4]
    24e4:	9b01      	ldr	r3, [sp, #4]
    24e6:	2b00      	cmp	r3, #0
    24e8:	d002      	beq.n	24f0 <Clock_Ip_ClockSetSimGate+0x12>
    24ea:	9801      	ldr	r0, [sp, #4]
    24ec:	f000 f8bc 	bl	2668 <Clock_Ip_ClockSetSimGate_TrustedCall>
    24f0:	bf00      	nop
    24f2:	b003      	add	sp, #12
    24f4:	f85d fb04 	ldr.w	pc, [sp], #4

000024f8 <Clock_Ip_ClockUpdateSimGate>:
    24f8:	b500      	push	{lr}
    24fa:	b085      	sub	sp, #20
    24fc:	9001      	str	r0, [sp, #4]
    24fe:	460b      	mov	r3, r1
    2500:	f88d 3003 	strb.w	r3, [sp, #3]
    2504:	9b01      	ldr	r3, [sp, #4]
    2506:	9302      	str	r3, [sp, #8]
    2508:	f89d 3003 	ldrb.w	r3, [sp, #3]
    250c:	2b00      	cmp	r3, #0
    250e:	d003      	beq.n	2518 <Clock_Ip_ClockUpdateSimGate+0x20>
    2510:	2300      	movs	r3, #0
    2512:	f8ad 300c 	strh.w	r3, [sp, #12]
    2516:	e002      	b.n	251e <Clock_Ip_ClockUpdateSimGate+0x26>
    2518:	2301      	movs	r3, #1
    251a:	f8ad 300c 	strh.w	r3, [sp, #12]
    251e:	ab02      	add	r3, sp, #8
    2520:	4618      	mov	r0, r3
    2522:	f7ff ffdc 	bl	24de <Clock_Ip_ClockSetSimGate>
    2526:	bf00      	nop
    2528:	b005      	add	sp, #20
    252a:	f85d fb04 	ldr.w	pc, [sp], #4

0000252e <Clock_Ip_ClockSetSimTraceEnable>:
    252e:	b500      	push	{lr}
    2530:	b083      	sub	sp, #12
    2532:	9001      	str	r0, [sp, #4]
    2534:	9b01      	ldr	r3, [sp, #4]
    2536:	2b00      	cmp	r3, #0
    2538:	d002      	beq.n	2540 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    253a:	9801      	ldr	r0, [sp, #4]
    253c:	f000 f8c0 	bl	26c0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
    2540:	bf00      	nop
    2542:	b003      	add	sp, #12
    2544:	f85d fb04 	ldr.w	pc, [sp], #4

00002548 <Clock_Ip_ClockUpdateSimTraceEnable>:
    2548:	b500      	push	{lr}
    254a:	b085      	sub	sp, #20
    254c:	9001      	str	r0, [sp, #4]
    254e:	460b      	mov	r3, r1
    2550:	f88d 3003 	strb.w	r3, [sp, #3]
    2554:	9b01      	ldr	r3, [sp, #4]
    2556:	9302      	str	r3, [sp, #8]
    2558:	f89d 3003 	ldrb.w	r3, [sp, #3]
    255c:	2b00      	cmp	r3, #0
    255e:	d003      	beq.n	2568 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    2560:	2300      	movs	r3, #0
    2562:	f8ad 300c 	strh.w	r3, [sp, #12]
    2566:	e002      	b.n	256e <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    2568:	2301      	movs	r3, #1
    256a:	f8ad 300c 	strh.w	r3, [sp, #12]
    256e:	ab02      	add	r3, sp, #8
    2570:	4618      	mov	r0, r3
    2572:	f7ff ffdc 	bl	252e <Clock_Ip_ClockSetSimTraceEnable>
    2576:	bf00      	nop
    2578:	b005      	add	sp, #20
    257a:	f85d fb04 	ldr.w	pc, [sp], #4

0000257e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
    257e:	b084      	sub	sp, #16
    2580:	9001      	str	r0, [sp, #4]
    2582:	4b09      	ldr	r3, [pc, #36]	; (25a8 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2584:	691b      	ldr	r3, [r3, #16]
    2586:	9303      	str	r3, [sp, #12]
    2588:	9b03      	ldr	r3, [sp, #12]
    258a:	f023 0301 	bic.w	r3, r3, #1
    258e:	9303      	str	r3, [sp, #12]
    2590:	9b01      	ldr	r3, [sp, #4]
    2592:	889b      	ldrh	r3, [r3, #4]
    2594:	461a      	mov	r2, r3
    2596:	9b03      	ldr	r3, [sp, #12]
    2598:	4313      	orrs	r3, r2
    259a:	9303      	str	r3, [sp, #12]
    259c:	4a02      	ldr	r2, [pc, #8]	; (25a8 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    259e:	9b03      	ldr	r3, [sp, #12]
    25a0:	6113      	str	r3, [r2, #16]
    25a2:	bf00      	nop
    25a4:	b004      	add	sp, #16
    25a6:	4770      	bx	lr
    25a8:	40048000 	.word	0x40048000

000025ac <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
    25ac:	b084      	sub	sp, #16
    25ae:	9001      	str	r0, [sp, #4]
    25b0:	4b09      	ldr	r3, [pc, #36]	; (25d8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    25b2:	691b      	ldr	r3, [r3, #16]
    25b4:	9303      	str	r3, [sp, #12]
    25b6:	9b03      	ldr	r3, [sp, #12]
    25b8:	f023 0302 	bic.w	r3, r3, #2
    25bc:	9303      	str	r3, [sp, #12]
    25be:	9b01      	ldr	r3, [sp, #4]
    25c0:	889b      	ldrh	r3, [r3, #4]
    25c2:	005b      	lsls	r3, r3, #1
    25c4:	9a03      	ldr	r2, [sp, #12]
    25c6:	4313      	orrs	r3, r2
    25c8:	9303      	str	r3, [sp, #12]
    25ca:	4a03      	ldr	r2, [pc, #12]	; (25d8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    25cc:	9b03      	ldr	r3, [sp, #12]
    25ce:	6113      	str	r3, [r2, #16]
    25d0:	bf00      	nop
    25d2:	b004      	add	sp, #16
    25d4:	4770      	bx	lr
    25d6:	bf00      	nop
    25d8:	40048000 	.word	0x40048000

000025dc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
    25dc:	b084      	sub	sp, #16
    25de:	9001      	str	r0, [sp, #4]
    25e0:	4b09      	ldr	r3, [pc, #36]	; (2608 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    25e2:	685b      	ldr	r3, [r3, #4]
    25e4:	9303      	str	r3, [sp, #12]
    25e6:	9b03      	ldr	r3, [sp, #12]
    25e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    25ec:	9303      	str	r3, [sp, #12]
    25ee:	9b01      	ldr	r3, [sp, #4]
    25f0:	889b      	ldrh	r3, [r3, #4]
    25f2:	02db      	lsls	r3, r3, #11
    25f4:	9a03      	ldr	r2, [sp, #12]
    25f6:	4313      	orrs	r3, r2
    25f8:	9303      	str	r3, [sp, #12]
    25fa:	4a03      	ldr	r2, [pc, #12]	; (2608 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    25fc:	9b03      	ldr	r3, [sp, #12]
    25fe:	6053      	str	r3, [r2, #4]
    2600:	bf00      	nop
    2602:	b004      	add	sp, #16
    2604:	4770      	bx	lr
    2606:	bf00      	nop
    2608:	40048000 	.word	0x40048000

0000260c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
    260c:	b084      	sub	sp, #16
    260e:	9001      	str	r0, [sp, #4]
    2610:	4913      	ldr	r1, [pc, #76]	; (2660 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2612:	9b01      	ldr	r3, [sp, #4]
    2614:	681a      	ldr	r2, [r3, #0]
    2616:	4813      	ldr	r0, [pc, #76]	; (2664 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2618:	4613      	mov	r3, r2
    261a:	00db      	lsls	r3, r3, #3
    261c:	4413      	add	r3, r2
    261e:	4403      	add	r3, r0
    2620:	3306      	adds	r3, #6
    2622:	781b      	ldrb	r3, [r3, #0]
    2624:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2628:	9303      	str	r3, [sp, #12]
    262a:	9b03      	ldr	r3, [sp, #12]
    262c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2630:	9303      	str	r3, [sp, #12]
    2632:	9b01      	ldr	r3, [sp, #4]
    2634:	889b      	ldrh	r3, [r3, #4]
    2636:	079b      	lsls	r3, r3, #30
    2638:	9a03      	ldr	r2, [sp, #12]
    263a:	4313      	orrs	r3, r2
    263c:	9303      	str	r3, [sp, #12]
    263e:	4908      	ldr	r1, [pc, #32]	; (2660 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2640:	9b01      	ldr	r3, [sp, #4]
    2642:	681a      	ldr	r2, [r3, #0]
    2644:	4807      	ldr	r0, [pc, #28]	; (2664 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2646:	4613      	mov	r3, r2
    2648:	00db      	lsls	r3, r3, #3
    264a:	4413      	add	r3, r2
    264c:	4403      	add	r3, r0
    264e:	3306      	adds	r3, #6
    2650:	781b      	ldrb	r3, [r3, #0]
    2652:	461a      	mov	r2, r3
    2654:	9b03      	ldr	r3, [sp, #12]
    2656:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    265a:	bf00      	nop
    265c:	b004      	add	sp, #16
    265e:	4770      	bx	lr
    2660:	40065000 	.word	0x40065000
    2664:	0000b650 	.word	0x0000b650

00002668 <Clock_Ip_ClockSetSimGate_TrustedCall>:
    2668:	b086      	sub	sp, #24
    266a:	9001      	str	r0, [sp, #4]
    266c:	9b01      	ldr	r3, [sp, #4]
    266e:	889b      	ldrh	r3, [r3, #4]
    2670:	9305      	str	r3, [sp, #20]
    2672:	9b01      	ldr	r3, [sp, #4]
    2674:	681a      	ldr	r2, [r3, #0]
    2676:	4910      	ldr	r1, [pc, #64]	; (26b8 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2678:	4613      	mov	r3, r2
    267a:	00db      	lsls	r3, r3, #3
    267c:	4413      	add	r3, r2
    267e:	440b      	add	r3, r1
    2680:	3306      	adds	r3, #6
    2682:	781b      	ldrb	r3, [r3, #0]
    2684:	9304      	str	r3, [sp, #16]
    2686:	4b0d      	ldr	r3, [pc, #52]	; (26bc <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    268a:	9303      	str	r3, [sp, #12]
    268c:	2201      	movs	r2, #1
    268e:	9b04      	ldr	r3, [sp, #16]
    2690:	fa02 f303 	lsl.w	r3, r2, r3
    2694:	43db      	mvns	r3, r3
    2696:	9a03      	ldr	r2, [sp, #12]
    2698:	4013      	ands	r3, r2
    269a:	9303      	str	r3, [sp, #12]
    269c:	9a05      	ldr	r2, [sp, #20]
    269e:	9b04      	ldr	r3, [sp, #16]
    26a0:	fa02 f303 	lsl.w	r3, r2, r3
    26a4:	9a03      	ldr	r2, [sp, #12]
    26a6:	4313      	orrs	r3, r2
    26a8:	9303      	str	r3, [sp, #12]
    26aa:	4a04      	ldr	r2, [pc, #16]	; (26bc <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    26ac:	9b03      	ldr	r3, [sp, #12]
    26ae:	6413      	str	r3, [r2, #64]	; 0x40
    26b0:	bf00      	nop
    26b2:	b006      	add	sp, #24
    26b4:	4770      	bx	lr
    26b6:	bf00      	nop
    26b8:	0000b650 	.word	0x0000b650
    26bc:	40048000 	.word	0x40048000

000026c0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
    26c0:	b084      	sub	sp, #16
    26c2:	9001      	str	r0, [sp, #4]
    26c4:	4b0a      	ldr	r3, [pc, #40]	; (26f0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    26c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    26c8:	9303      	str	r3, [sp, #12]
    26ca:	9b01      	ldr	r3, [sp, #4]
    26cc:	889b      	ldrh	r3, [r3, #4]
    26ce:	2b01      	cmp	r3, #1
    26d0:	d104      	bne.n	26dc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    26d2:	9b03      	ldr	r3, [sp, #12]
    26d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    26d8:	9303      	str	r3, [sp, #12]
    26da:	e003      	b.n	26e4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    26dc:	9b03      	ldr	r3, [sp, #12]
    26de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    26e2:	9303      	str	r3, [sp, #12]
    26e4:	4a02      	ldr	r2, [pc, #8]	; (26f0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    26e6:	9b03      	ldr	r3, [sp, #12]
    26e8:	6693      	str	r3, [r2, #104]	; 0x68
    26ea:	bf00      	nop
    26ec:	b004      	add	sp, #16
    26ee:	4770      	bx	lr
    26f0:	40048000 	.word	0x40048000

000026f4 <Clock_Ip_InternalOscillatorEmpty>:
    26f4:	b082      	sub	sp, #8
    26f6:	9001      	str	r0, [sp, #4]
    26f8:	bf00      	nop
    26fa:	b002      	add	sp, #8
    26fc:	4770      	bx	lr

000026fe <Clock_Ip_InternalOscillatorEmpty_Disable>:
    26fe:	b082      	sub	sp, #8
    2700:	9001      	str	r0, [sp, #4]
    2702:	bf00      	nop
    2704:	b002      	add	sp, #8
    2706:	4770      	bx	lr

00002708 <Clock_Ip_SetSirc>:
    2708:	b500      	push	{lr}
    270a:	b083      	sub	sp, #12
    270c:	9001      	str	r0, [sp, #4]
    270e:	9b01      	ldr	r3, [sp, #4]
    2710:	2b00      	cmp	r3, #0
    2712:	d002      	beq.n	271a <Clock_Ip_SetSirc+0x12>
    2714:	9801      	ldr	r0, [sp, #4]
    2716:	f000 f8d1 	bl	28bc <Clock_Ip_SetSirc_TrustedCall>
    271a:	bf00      	nop
    271c:	b003      	add	sp, #12
    271e:	f85d fb04 	ldr.w	pc, [sp], #4

00002722 <Clock_Ip_EnableSirc>:
    2722:	b500      	push	{lr}
    2724:	b083      	sub	sp, #12
    2726:	9001      	str	r0, [sp, #4]
    2728:	9b01      	ldr	r3, [sp, #4]
    272a:	2b00      	cmp	r3, #0
    272c:	d002      	beq.n	2734 <Clock_Ip_EnableSirc+0x12>
    272e:	9801      	ldr	r0, [sp, #4]
    2730:	f000 f950 	bl	29d4 <Clock_Ip_EnableSirc_TrustedCall>
    2734:	bf00      	nop
    2736:	b003      	add	sp, #12
    2738:	f85d fb04 	ldr.w	pc, [sp], #4

0000273c <Clock_Ip_DisableSirc>:
    273c:	b500      	push	{lr}
    273e:	b083      	sub	sp, #12
    2740:	9001      	str	r0, [sp, #4]
    2742:	9801      	ldr	r0, [sp, #4]
    2744:	f000 f98e 	bl	2a64 <Clock_Ip_DisableSirc_TrustedCall>
    2748:	bf00      	nop
    274a:	b003      	add	sp, #12
    274c:	f85d fb04 	ldr.w	pc, [sp], #4

00002750 <Clock_Ip_SetSircVlp>:
    2750:	b500      	push	{lr}
    2752:	b083      	sub	sp, #12
    2754:	9001      	str	r0, [sp, #4]
    2756:	9b01      	ldr	r3, [sp, #4]
    2758:	2b00      	cmp	r3, #0
    275a:	d002      	beq.n	2762 <Clock_Ip_SetSircVlp+0x12>
    275c:	9801      	ldr	r0, [sp, #4]
    275e:	f000 f999 	bl	2a94 <Clock_Ip_SetSircVlp_TrustedCall>
    2762:	bf00      	nop
    2764:	b003      	add	sp, #12
    2766:	f85d fb04 	ldr.w	pc, [sp], #4

0000276a <Clock_Ip_EnableSircVlp>:
    276a:	b500      	push	{lr}
    276c:	b083      	sub	sp, #12
    276e:	9001      	str	r0, [sp, #4]
    2770:	9b01      	ldr	r3, [sp, #4]
    2772:	2b00      	cmp	r3, #0
    2774:	d002      	beq.n	277c <Clock_Ip_EnableSircVlp+0x12>
    2776:	9801      	ldr	r0, [sp, #4]
    2778:	f000 f9b0 	bl	2adc <Clock_Ip_EnableSircVlp_TrustedCall>
    277c:	bf00      	nop
    277e:	b003      	add	sp, #12
    2780:	f85d fb04 	ldr.w	pc, [sp], #4

00002784 <Clock_Ip_DisableSircVlp>:
    2784:	b500      	push	{lr}
    2786:	b083      	sub	sp, #12
    2788:	9001      	str	r0, [sp, #4]
    278a:	9801      	ldr	r0, [sp, #4]
    278c:	f000 f9ba 	bl	2b04 <Clock_Ip_DisableSircVlp_TrustedCall>
    2790:	bf00      	nop
    2792:	b003      	add	sp, #12
    2794:	f85d fb04 	ldr.w	pc, [sp], #4

00002798 <Clock_Ip_SetSircStop>:
    2798:	b500      	push	{lr}
    279a:	b083      	sub	sp, #12
    279c:	9001      	str	r0, [sp, #4]
    279e:	9b01      	ldr	r3, [sp, #4]
    27a0:	2b00      	cmp	r3, #0
    27a2:	d002      	beq.n	27aa <Clock_Ip_SetSircStop+0x12>
    27a4:	9801      	ldr	r0, [sp, #4]
    27a6:	f000 f9bd 	bl	2b24 <Clock_Ip_SetSircStop_TrustedCall>
    27aa:	bf00      	nop
    27ac:	b003      	add	sp, #12
    27ae:	f85d fb04 	ldr.w	pc, [sp], #4

000027b2 <Clock_Ip_EnableSircStop>:
    27b2:	b500      	push	{lr}
    27b4:	b083      	sub	sp, #12
    27b6:	9001      	str	r0, [sp, #4]
    27b8:	9b01      	ldr	r3, [sp, #4]
    27ba:	2b00      	cmp	r3, #0
    27bc:	d002      	beq.n	27c4 <Clock_Ip_EnableSircStop+0x12>
    27be:	9801      	ldr	r0, [sp, #4]
    27c0:	f000 f9d4 	bl	2b6c <Clock_Ip_EnableSircStop_TrustedCall>
    27c4:	bf00      	nop
    27c6:	b003      	add	sp, #12
    27c8:	f85d fb04 	ldr.w	pc, [sp], #4

000027cc <Clock_Ip_DisableSircStop>:
    27cc:	b500      	push	{lr}
    27ce:	b083      	sub	sp, #12
    27d0:	9001      	str	r0, [sp, #4]
    27d2:	9801      	ldr	r0, [sp, #4]
    27d4:	f000 f9de 	bl	2b94 <Clock_Ip_DisableSircStop_TrustedCall>
    27d8:	bf00      	nop
    27da:	b003      	add	sp, #12
    27dc:	f85d fb04 	ldr.w	pc, [sp], #4

000027e0 <SetInputSouceSytemClock>:
    27e0:	b500      	push	{lr}
    27e2:	b089      	sub	sp, #36	; 0x24
    27e4:	9001      	str	r0, [sp, #4]
    27e6:	2300      	movs	r3, #0
    27e8:	f88d 301f 	strb.w	r3, [sp, #31]
    27ec:	4b20      	ldr	r3, [pc, #128]	; (2870 <SetInputSouceSytemClock+0x90>)
    27ee:	695b      	ldr	r3, [r3, #20]
    27f0:	9306      	str	r3, [sp, #24]
    27f2:	9b06      	ldr	r3, [sp, #24]
    27f4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    27f8:	9306      	str	r3, [sp, #24]
    27fa:	9b01      	ldr	r3, [sp, #4]
    27fc:	061b      	lsls	r3, r3, #24
    27fe:	9a06      	ldr	r2, [sp, #24]
    2800:	4313      	orrs	r3, r2
    2802:	9306      	str	r3, [sp, #24]
    2804:	4a1a      	ldr	r2, [pc, #104]	; (2870 <SetInputSouceSytemClock+0x90>)
    2806:	9b06      	ldr	r3, [sp, #24]
    2808:	6153      	str	r3, [r2, #20]
    280a:	aa02      	add	r2, sp, #8
    280c:	a903      	add	r1, sp, #12
    280e:	a804      	add	r0, sp, #16
    2810:	f24c 3350 	movw	r3, #50000	; 0xc350
    2814:	f7ff f9ac 	bl	1b70 <Clock_Ip_StartTimeout>
    2818:	4b15      	ldr	r3, [pc, #84]	; (2870 <SetInputSouceSytemClock+0x90>)
    281a:	691b      	ldr	r3, [r3, #16]
    281c:	0e1b      	lsrs	r3, r3, #24
    281e:	f003 030f 	and.w	r3, r3, #15
    2822:	9a01      	ldr	r2, [sp, #4]
    2824:	429a      	cmp	r2, r3
    2826:	bf0c      	ite	eq
    2828:	2301      	moveq	r3, #1
    282a:	2300      	movne	r3, #0
    282c:	b2db      	uxtb	r3, r3
    282e:	9305      	str	r3, [sp, #20]
    2830:	9a02      	ldr	r2, [sp, #8]
    2832:	a903      	add	r1, sp, #12
    2834:	ab04      	add	r3, sp, #16
    2836:	4618      	mov	r0, r3
    2838:	f7ff f9b4 	bl	1ba4 <Clock_Ip_TimeoutExpired>
    283c:	4603      	mov	r3, r0
    283e:	f88d 301f 	strb.w	r3, [sp, #31]
    2842:	9b05      	ldr	r3, [sp, #20]
    2844:	2b00      	cmp	r3, #0
    2846:	d106      	bne.n	2856 <SetInputSouceSytemClock+0x76>
    2848:	f89d 301f 	ldrb.w	r3, [sp, #31]
    284c:	f083 0301 	eor.w	r3, r3, #1
    2850:	b2db      	uxtb	r3, r3
    2852:	2b00      	cmp	r3, #0
    2854:	d1e0      	bne.n	2818 <SetInputSouceSytemClock+0x38>
    2856:	f89d 301f 	ldrb.w	r3, [sp, #31]
    285a:	2b00      	cmp	r3, #0
    285c:	d003      	beq.n	2866 <SetInputSouceSytemClock+0x86>
    285e:	2105      	movs	r1, #5
    2860:	2001      	movs	r0, #1
    2862:	f7ff f975 	bl	1b50 <Clock_Ip_ReportClockErrors>
    2866:	bf00      	nop
    2868:	b009      	add	sp, #36	; 0x24
    286a:	f85d fb04 	ldr.w	pc, [sp], #4
    286e:	bf00      	nop
    2870:	40064000 	.word	0x40064000

00002874 <Clock_Ip_SetFirc>:
    2874:	b500      	push	{lr}
    2876:	b083      	sub	sp, #12
    2878:	9001      	str	r0, [sp, #4]
    287a:	9b01      	ldr	r3, [sp, #4]
    287c:	2b00      	cmp	r3, #0
    287e:	d002      	beq.n	2886 <Clock_Ip_SetFirc+0x12>
    2880:	9801      	ldr	r0, [sp, #4]
    2882:	f000 f997 	bl	2bb4 <Clock_Ip_SetFirc_TrustedCall>
    2886:	bf00      	nop
    2888:	b003      	add	sp, #12
    288a:	f85d fb04 	ldr.w	pc, [sp], #4

0000288e <Clock_Ip_EnableFirc>:
    288e:	b500      	push	{lr}
    2890:	b083      	sub	sp, #12
    2892:	9001      	str	r0, [sp, #4]
    2894:	9b01      	ldr	r3, [sp, #4]
    2896:	2b00      	cmp	r3, #0
    2898:	d002      	beq.n	28a0 <Clock_Ip_EnableFirc+0x12>
    289a:	9801      	ldr	r0, [sp, #4]
    289c:	f000 fa7e 	bl	2d9c <Clock_Ip_EnableFirc_TrustedCall>
    28a0:	bf00      	nop
    28a2:	b003      	add	sp, #12
    28a4:	f85d fb04 	ldr.w	pc, [sp], #4

000028a8 <Clock_Ip_DisableFirc>:
    28a8:	b500      	push	{lr}
    28aa:	b083      	sub	sp, #12
    28ac:	9001      	str	r0, [sp, #4]
    28ae:	9801      	ldr	r0, [sp, #4]
    28b0:	f000 fab8 	bl	2e24 <Clock_Ip_DisableFirc_TrustedCall>
    28b4:	bf00      	nop
    28b6:	b003      	add	sp, #12
    28b8:	f85d fb04 	ldr.w	pc, [sp], #4

000028bc <Clock_Ip_SetSirc_TrustedCall>:
    28bc:	b500      	push	{lr}
    28be:	b08b      	sub	sp, #44	; 0x2c
    28c0:	9001      	str	r0, [sp, #4]
    28c2:	2300      	movs	r3, #0
    28c4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    28c8:	9b01      	ldr	r3, [sp, #4]
    28ca:	2b00      	cmp	r3, #0
    28cc:	d10b      	bne.n	28e6 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    28ce:	2305      	movs	r3, #5
    28d0:	9302      	str	r3, [sp, #8]
    28d2:	2301      	movs	r3, #1
    28d4:	f88d 300f 	strb.w	r3, [sp, #15]
    28d8:	2301      	movs	r3, #1
    28da:	f8ad 300c 	strh.w	r3, [sp, #12]
    28de:	2301      	movs	r3, #1
    28e0:	f88d 3010 	strb.w	r3, [sp, #16]
    28e4:	e00e      	b.n	2904 <Clock_Ip_SetSirc_TrustedCall+0x48>
    28e6:	9b01      	ldr	r3, [sp, #4]
    28e8:	681b      	ldr	r3, [r3, #0]
    28ea:	9302      	str	r3, [sp, #8]
    28ec:	9b01      	ldr	r3, [sp, #4]
    28ee:	79db      	ldrb	r3, [r3, #7]
    28f0:	f88d 300f 	strb.w	r3, [sp, #15]
    28f4:	9b01      	ldr	r3, [sp, #4]
    28f6:	889b      	ldrh	r3, [r3, #4]
    28f8:	f8ad 300c 	strh.w	r3, [sp, #12]
    28fc:	9b01      	ldr	r3, [sp, #4]
    28fe:	7a1b      	ldrb	r3, [r3, #8]
    2900:	f88d 3010 	strb.w	r3, [sp, #16]
    2904:	4b32      	ldr	r3, [pc, #200]	; (29d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2906:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    290a:	4a31      	ldr	r2, [pc, #196]	; (29d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    290c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2910:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2914:	4b2e      	ldr	r3, [pc, #184]	; (29d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2916:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    291a:	4a2d      	ldr	r2, [pc, #180]	; (29d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    291c:	f023 0301 	bic.w	r3, r3, #1
    2920:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2924:	4b2a      	ldr	r3, [pc, #168]	; (29d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2926:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    292a:	4a29      	ldr	r2, [pc, #164]	; (29d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    292c:	f023 0304 	bic.w	r3, r3, #4
    2930:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2934:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2938:	2b01      	cmp	r3, #1
    293a:	d144      	bne.n	29c6 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    293c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2940:	4a23      	ldr	r2, [pc, #140]	; (29d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2942:	f003 0301 	and.w	r3, r3, #1
    2946:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    294a:	4b21      	ldr	r3, [pc, #132]	; (29d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    294c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2950:	4a1f      	ldr	r2, [pc, #124]	; (29d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2952:	f043 0301 	orr.w	r3, r3, #1
    2956:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    295a:	4b1d      	ldr	r3, [pc, #116]	; (29d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    295c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2960:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2964:	009b      	lsls	r3, r3, #2
    2966:	f003 0304 	and.w	r3, r3, #4
    296a:	4919      	ldr	r1, [pc, #100]	; (29d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    296c:	4313      	orrs	r3, r2
    296e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    2972:	aa05      	add	r2, sp, #20
    2974:	a906      	add	r1, sp, #24
    2976:	a807      	add	r0, sp, #28
    2978:	f24c 3350 	movw	r3, #50000	; 0xc350
    297c:	f7ff f8f8 	bl	1b70 <Clock_Ip_StartTimeout>
    2980:	4b13      	ldr	r3, [pc, #76]	; (29d0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2982:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2986:	0e1b      	lsrs	r3, r3, #24
    2988:	f003 0301 	and.w	r3, r3, #1
    298c:	9308      	str	r3, [sp, #32]
    298e:	9a05      	ldr	r2, [sp, #20]
    2990:	a906      	add	r1, sp, #24
    2992:	ab07      	add	r3, sp, #28
    2994:	4618      	mov	r0, r3
    2996:	f7ff f905 	bl	1ba4 <Clock_Ip_TimeoutExpired>
    299a:	4603      	mov	r3, r0
    299c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    29a0:	9b08      	ldr	r3, [sp, #32]
    29a2:	2b00      	cmp	r3, #0
    29a4:	d106      	bne.n	29b4 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    29a6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    29aa:	f083 0301 	eor.w	r3, r3, #1
    29ae:	b2db      	uxtb	r3, r3
    29b0:	2b00      	cmp	r3, #0
    29b2:	d1e5      	bne.n	2980 <Clock_Ip_SetSirc_TrustedCall+0xc4>
    29b4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    29b8:	2b00      	cmp	r3, #0
    29ba:	d004      	beq.n	29c6 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    29bc:	9b02      	ldr	r3, [sp, #8]
    29be:	4619      	mov	r1, r3
    29c0:	2001      	movs	r0, #1
    29c2:	f7ff f8c5 	bl	1b50 <Clock_Ip_ReportClockErrors>
    29c6:	bf00      	nop
    29c8:	b00b      	add	sp, #44	; 0x2c
    29ca:	f85d fb04 	ldr.w	pc, [sp], #4
    29ce:	bf00      	nop
    29d0:	40064000 	.word	0x40064000

000029d4 <Clock_Ip_EnableSirc_TrustedCall>:
    29d4:	b500      	push	{lr}
    29d6:	b089      	sub	sp, #36	; 0x24
    29d8:	9001      	str	r0, [sp, #4]
    29da:	2300      	movs	r3, #0
    29dc:	f88d 301f 	strb.w	r3, [sp, #31]
    29e0:	4b1f      	ldr	r3, [pc, #124]	; (2a60 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29e6:	4a1e      	ldr	r2, [pc, #120]	; (2a60 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29e8:	f043 0301 	orr.w	r3, r3, #1
    29ec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    29f0:	4b1b      	ldr	r3, [pc, #108]	; (2a60 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29f6:	4a1a      	ldr	r2, [pc, #104]	; (2a60 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29f8:	f043 0304 	orr.w	r3, r3, #4
    29fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2a00:	aa03      	add	r2, sp, #12
    2a02:	a904      	add	r1, sp, #16
    2a04:	a805      	add	r0, sp, #20
    2a06:	f24c 3350 	movw	r3, #50000	; 0xc350
    2a0a:	f7ff f8b1 	bl	1b70 <Clock_Ip_StartTimeout>
    2a0e:	4b14      	ldr	r3, [pc, #80]	; (2a60 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a14:	0e1b      	lsrs	r3, r3, #24
    2a16:	f003 0301 	and.w	r3, r3, #1
    2a1a:	9306      	str	r3, [sp, #24]
    2a1c:	9a03      	ldr	r2, [sp, #12]
    2a1e:	a904      	add	r1, sp, #16
    2a20:	ab05      	add	r3, sp, #20
    2a22:	4618      	mov	r0, r3
    2a24:	f7ff f8be 	bl	1ba4 <Clock_Ip_TimeoutExpired>
    2a28:	4603      	mov	r3, r0
    2a2a:	f88d 301f 	strb.w	r3, [sp, #31]
    2a2e:	9b06      	ldr	r3, [sp, #24]
    2a30:	2b00      	cmp	r3, #0
    2a32:	d106      	bne.n	2a42 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    2a34:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a38:	f083 0301 	eor.w	r3, r3, #1
    2a3c:	b2db      	uxtb	r3, r3
    2a3e:	2b00      	cmp	r3, #0
    2a40:	d1e5      	bne.n	2a0e <Clock_Ip_EnableSirc_TrustedCall+0x3a>
    2a42:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a46:	2b00      	cmp	r3, #0
    2a48:	d005      	beq.n	2a56 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    2a4a:	9b01      	ldr	r3, [sp, #4]
    2a4c:	681b      	ldr	r3, [r3, #0]
    2a4e:	4619      	mov	r1, r3
    2a50:	2001      	movs	r0, #1
    2a52:	f7ff f87d 	bl	1b50 <Clock_Ip_ReportClockErrors>
    2a56:	bf00      	nop
    2a58:	b009      	add	sp, #36	; 0x24
    2a5a:	f85d fb04 	ldr.w	pc, [sp], #4
    2a5e:	bf00      	nop
    2a60:	40064000 	.word	0x40064000

00002a64 <Clock_Ip_DisableSirc_TrustedCall>:
    2a64:	b082      	sub	sp, #8
    2a66:	9001      	str	r0, [sp, #4]
    2a68:	4b09      	ldr	r3, [pc, #36]	; (2a90 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a6e:	4a08      	ldr	r2, [pc, #32]	; (2a90 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a70:	f023 0301 	bic.w	r3, r3, #1
    2a74:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2a78:	4b05      	ldr	r3, [pc, #20]	; (2a90 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a7e:	4a04      	ldr	r2, [pc, #16]	; (2a90 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a80:	f023 0304 	bic.w	r3, r3, #4
    2a84:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2a88:	bf00      	nop
    2a8a:	b002      	add	sp, #8
    2a8c:	4770      	bx	lr
    2a8e:	bf00      	nop
    2a90:	40064000 	.word	0x40064000

00002a94 <Clock_Ip_SetSircVlp_TrustedCall>:
    2a94:	b082      	sub	sp, #8
    2a96:	9001      	str	r0, [sp, #4]
    2a98:	4b0f      	ldr	r3, [pc, #60]	; (2ad8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a9e:	4a0e      	ldr	r2, [pc, #56]	; (2ad8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2aa0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2aa4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2aa8:	4b0b      	ldr	r3, [pc, #44]	; (2ad8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2aaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2aae:	4a0a      	ldr	r2, [pc, #40]	; (2ad8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2ab0:	f023 0304 	bic.w	r3, r3, #4
    2ab4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2ab8:	4b07      	ldr	r3, [pc, #28]	; (2ad8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2aba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2abe:	9b01      	ldr	r3, [sp, #4]
    2ac0:	7a1b      	ldrb	r3, [r3, #8]
    2ac2:	009b      	lsls	r3, r3, #2
    2ac4:	f003 0304 	and.w	r3, r3, #4
    2ac8:	4903      	ldr	r1, [pc, #12]	; (2ad8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2aca:	4313      	orrs	r3, r2
    2acc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    2ad0:	bf00      	nop
    2ad2:	b002      	add	sp, #8
    2ad4:	4770      	bx	lr
    2ad6:	bf00      	nop
    2ad8:	40064000 	.word	0x40064000

00002adc <Clock_Ip_EnableSircVlp_TrustedCall>:
    2adc:	b082      	sub	sp, #8
    2ade:	9001      	str	r0, [sp, #4]
    2ae0:	9b01      	ldr	r3, [sp, #4]
    2ae2:	889b      	ldrh	r3, [r3, #4]
    2ae4:	2b01      	cmp	r3, #1
    2ae6:	d107      	bne.n	2af8 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    2ae8:	4b05      	ldr	r3, [pc, #20]	; (2b00 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2aea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2aee:	4a04      	ldr	r2, [pc, #16]	; (2b00 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2af0:	f043 0304 	orr.w	r3, r3, #4
    2af4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2af8:	bf00      	nop
    2afa:	b002      	add	sp, #8
    2afc:	4770      	bx	lr
    2afe:	bf00      	nop
    2b00:	40064000 	.word	0x40064000

00002b04 <Clock_Ip_DisableSircVlp_TrustedCall>:
    2b04:	b082      	sub	sp, #8
    2b06:	9001      	str	r0, [sp, #4]
    2b08:	4b05      	ldr	r3, [pc, #20]	; (2b20 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2b0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b0e:	4a04      	ldr	r2, [pc, #16]	; (2b20 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2b10:	f023 0304 	bic.w	r3, r3, #4
    2b14:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b18:	bf00      	nop
    2b1a:	b002      	add	sp, #8
    2b1c:	4770      	bx	lr
    2b1e:	bf00      	nop
    2b20:	40064000 	.word	0x40064000

00002b24 <Clock_Ip_SetSircStop_TrustedCall>:
    2b24:	b082      	sub	sp, #8
    2b26:	9001      	str	r0, [sp, #4]
    2b28:	4b0f      	ldr	r3, [pc, #60]	; (2b68 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b2e:	4a0e      	ldr	r2, [pc, #56]	; (2b68 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2b34:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b38:	4b0b      	ldr	r3, [pc, #44]	; (2b68 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b3e:	4a0a      	ldr	r2, [pc, #40]	; (2b68 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b40:	f023 0302 	bic.w	r3, r3, #2
    2b44:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b48:	4b07      	ldr	r3, [pc, #28]	; (2b68 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b4a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2b4e:	9b01      	ldr	r3, [sp, #4]
    2b50:	7a5b      	ldrb	r3, [r3, #9]
    2b52:	005b      	lsls	r3, r3, #1
    2b54:	f003 0302 	and.w	r3, r3, #2
    2b58:	4903      	ldr	r1, [pc, #12]	; (2b68 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b5a:	4313      	orrs	r3, r2
    2b5c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    2b60:	bf00      	nop
    2b62:	b002      	add	sp, #8
    2b64:	4770      	bx	lr
    2b66:	bf00      	nop
    2b68:	40064000 	.word	0x40064000

00002b6c <Clock_Ip_EnableSircStop_TrustedCall>:
    2b6c:	b082      	sub	sp, #8
    2b6e:	9001      	str	r0, [sp, #4]
    2b70:	9b01      	ldr	r3, [sp, #4]
    2b72:	889b      	ldrh	r3, [r3, #4]
    2b74:	2b01      	cmp	r3, #1
    2b76:	d107      	bne.n	2b88 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    2b78:	4b05      	ldr	r3, [pc, #20]	; (2b90 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2b7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b7e:	4a04      	ldr	r2, [pc, #16]	; (2b90 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2b80:	f043 0302 	orr.w	r3, r3, #2
    2b84:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b88:	bf00      	nop
    2b8a:	b002      	add	sp, #8
    2b8c:	4770      	bx	lr
    2b8e:	bf00      	nop
    2b90:	40064000 	.word	0x40064000

00002b94 <Clock_Ip_DisableSircStop_TrustedCall>:
    2b94:	b082      	sub	sp, #8
    2b96:	9001      	str	r0, [sp, #4]
    2b98:	4b05      	ldr	r3, [pc, #20]	; (2bb0 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2b9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b9e:	4a04      	ldr	r2, [pc, #16]	; (2bb0 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2ba0:	f023 0302 	bic.w	r3, r3, #2
    2ba4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2ba8:	bf00      	nop
    2baa:	b002      	add	sp, #8
    2bac:	4770      	bx	lr
    2bae:	bf00      	nop
    2bb0:	40064000 	.word	0x40064000

00002bb4 <Clock_Ip_SetFirc_TrustedCall>:
    2bb4:	b500      	push	{lr}
    2bb6:	b08b      	sub	sp, #44	; 0x2c
    2bb8:	9001      	str	r0, [sp, #4]
    2bba:	9b01      	ldr	r3, [sp, #4]
    2bbc:	681a      	ldr	r2, [r3, #0]
    2bbe:	4975      	ldr	r1, [pc, #468]	; (2d94 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    2bc0:	4613      	mov	r3, r2
    2bc2:	00db      	lsls	r3, r3, #3
    2bc4:	4413      	add	r3, r2
    2bc6:	440b      	add	r3, r1
    2bc8:	781b      	ldrb	r3, [r3, #0]
    2bca:	9308      	str	r3, [sp, #32]
    2bcc:	2300      	movs	r3, #0
    2bce:	f88d 301f 	strb.w	r3, [sp, #31]
    2bd2:	2300      	movs	r3, #0
    2bd4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    2bd8:	4b6f      	ldr	r3, [pc, #444]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2bde:	4a6e      	ldr	r2, [pc, #440]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2be0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2be4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2be8:	4b6b      	ldr	r3, [pc, #428]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d07d      	beq.n	2cf2 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    2bf6:	9b01      	ldr	r3, [sp, #4]
    2bf8:	79db      	ldrb	r3, [r3, #7]
    2bfa:	461a      	mov	r2, r3
    2bfc:	4b66      	ldr	r3, [pc, #408]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bfe:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    2c02:	f003 0303 	and.w	r3, r3, #3
    2c06:	429a      	cmp	r2, r3
    2c08:	d10b      	bne.n	2c22 <Clock_Ip_SetFirc_TrustedCall+0x6e>
    2c0a:	9b01      	ldr	r3, [sp, #4]
    2c0c:	799b      	ldrb	r3, [r3, #6]
    2c0e:	461a      	mov	r2, r3
    2c10:	4b61      	ldr	r3, [pc, #388]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c16:	08db      	lsrs	r3, r3, #3
    2c18:	f003 0301 	and.w	r3, r3, #1
    2c1c:	429a      	cmp	r2, r3
    2c1e:	f000 80b4 	beq.w	2d8a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2c22:	4b5d      	ldr	r3, [pc, #372]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c28:	f003 0301 	and.w	r3, r3, #1
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d105      	bne.n	2c3c <Clock_Ip_SetFirc_TrustedCall+0x88>
    2c30:	2301      	movs	r3, #1
    2c32:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    2c36:	2000      	movs	r0, #0
    2c38:	f7ff fd66 	bl	2708 <Clock_Ip_SetSirc>
    2c3c:	2002      	movs	r0, #2
    2c3e:	f7ff fdcf 	bl	27e0 <SetInputSouceSytemClock>
    2c42:	4b55      	ldr	r3, [pc, #340]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c44:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c48:	4a53      	ldr	r2, [pc, #332]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c4a:	f023 0301 	bic.w	r3, r3, #1
    2c4e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2c52:	9b01      	ldr	r3, [sp, #4]
    2c54:	889b      	ldrh	r3, [r3, #4]
    2c56:	2b01      	cmp	r3, #1
    2c58:	f040 8097 	bne.w	2d8a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2c5c:	9b01      	ldr	r3, [sp, #4]
    2c5e:	79db      	ldrb	r3, [r3, #7]
    2c60:	4a4d      	ldr	r2, [pc, #308]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c62:	f003 0303 	and.w	r3, r3, #3
    2c66:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2c6a:	4b4b      	ldr	r3, [pc, #300]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c6c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2c70:	9b01      	ldr	r3, [sp, #4]
    2c72:	799b      	ldrb	r3, [r3, #6]
    2c74:	00db      	lsls	r3, r3, #3
    2c76:	f003 0308 	and.w	r3, r3, #8
    2c7a:	4313      	orrs	r3, r2
    2c7c:	4a46      	ldr	r2, [pc, #280]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c7e:	f043 0301 	orr.w	r3, r3, #1
    2c82:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2c86:	aa03      	add	r2, sp, #12
    2c88:	a904      	add	r1, sp, #16
    2c8a:	a805      	add	r0, sp, #20
    2c8c:	f24c 3350 	movw	r3, #50000	; 0xc350
    2c90:	f7fe ff6e 	bl	1b70 <Clock_Ip_StartTimeout>
    2c94:	4b40      	ldr	r3, [pc, #256]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c9a:	0e1b      	lsrs	r3, r3, #24
    2c9c:	f003 0301 	and.w	r3, r3, #1
    2ca0:	9306      	str	r3, [sp, #24]
    2ca2:	9a03      	ldr	r2, [sp, #12]
    2ca4:	a904      	add	r1, sp, #16
    2ca6:	ab05      	add	r3, sp, #20
    2ca8:	4618      	mov	r0, r3
    2caa:	f7fe ff7b 	bl	1ba4 <Clock_Ip_TimeoutExpired>
    2cae:	4603      	mov	r3, r0
    2cb0:	f88d 301f 	strb.w	r3, [sp, #31]
    2cb4:	9b06      	ldr	r3, [sp, #24]
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d106      	bne.n	2cc8 <Clock_Ip_SetFirc_TrustedCall+0x114>
    2cba:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2cbe:	f083 0301 	eor.w	r3, r3, #1
    2cc2:	b2db      	uxtb	r3, r3
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	d1e5      	bne.n	2c94 <Clock_Ip_SetFirc_TrustedCall+0xe0>
    2cc8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2ccc:	2b00      	cmp	r3, #0
    2cce:	d005      	beq.n	2cdc <Clock_Ip_SetFirc_TrustedCall+0x128>
    2cd0:	9b01      	ldr	r3, [sp, #4]
    2cd2:	681b      	ldr	r3, [r3, #0]
    2cd4:	4619      	mov	r1, r3
    2cd6:	2001      	movs	r0, #1
    2cd8:	f7fe ff3a 	bl	1b50 <Clock_Ip_ReportClockErrors>
    2cdc:	2003      	movs	r0, #3
    2cde:	f7ff fd7f 	bl	27e0 <SetInputSouceSytemClock>
    2ce2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	d04f      	beq.n	2d8a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2cea:	2002      	movs	r0, #2
    2cec:	f7ff fd26 	bl	273c <Clock_Ip_DisableSirc>
    2cf0:	e04b      	b.n	2d8a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2cf2:	4b29      	ldr	r3, [pc, #164]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cf4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2cf8:	4a27      	ldr	r2, [pc, #156]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cfa:	f023 0301 	bic.w	r3, r3, #1
    2cfe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2d02:	9b01      	ldr	r3, [sp, #4]
    2d04:	889b      	ldrh	r3, [r3, #4]
    2d06:	2b01      	cmp	r3, #1
    2d08:	d13f      	bne.n	2d8a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2d0a:	9b01      	ldr	r3, [sp, #4]
    2d0c:	79db      	ldrb	r3, [r3, #7]
    2d0e:	4a22      	ldr	r2, [pc, #136]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d10:	f003 0303 	and.w	r3, r3, #3
    2d14:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2d18:	4b1f      	ldr	r3, [pc, #124]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d1a:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2d1e:	9b01      	ldr	r3, [sp, #4]
    2d20:	799b      	ldrb	r3, [r3, #6]
    2d22:	00db      	lsls	r3, r3, #3
    2d24:	f003 0308 	and.w	r3, r3, #8
    2d28:	4313      	orrs	r3, r2
    2d2a:	4a1b      	ldr	r2, [pc, #108]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d2c:	f043 0301 	orr.w	r3, r3, #1
    2d30:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2d34:	aa03      	add	r2, sp, #12
    2d36:	a904      	add	r1, sp, #16
    2d38:	a805      	add	r0, sp, #20
    2d3a:	f24c 3350 	movw	r3, #50000	; 0xc350
    2d3e:	f7fe ff17 	bl	1b70 <Clock_Ip_StartTimeout>
    2d42:	4b15      	ldr	r3, [pc, #84]	; (2d98 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d44:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d48:	0e1b      	lsrs	r3, r3, #24
    2d4a:	f003 0301 	and.w	r3, r3, #1
    2d4e:	9306      	str	r3, [sp, #24]
    2d50:	9a03      	ldr	r2, [sp, #12]
    2d52:	a904      	add	r1, sp, #16
    2d54:	ab05      	add	r3, sp, #20
    2d56:	4618      	mov	r0, r3
    2d58:	f7fe ff24 	bl	1ba4 <Clock_Ip_TimeoutExpired>
    2d5c:	4603      	mov	r3, r0
    2d5e:	f88d 301f 	strb.w	r3, [sp, #31]
    2d62:	9b06      	ldr	r3, [sp, #24]
    2d64:	2b00      	cmp	r3, #0
    2d66:	d106      	bne.n	2d76 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    2d68:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d6c:	f083 0301 	eor.w	r3, r3, #1
    2d70:	b2db      	uxtb	r3, r3
    2d72:	2b00      	cmp	r3, #0
    2d74:	d1e5      	bne.n	2d42 <Clock_Ip_SetFirc_TrustedCall+0x18e>
    2d76:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d005      	beq.n	2d8a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2d7e:	9b01      	ldr	r3, [sp, #4]
    2d80:	681b      	ldr	r3, [r3, #0]
    2d82:	4619      	mov	r1, r3
    2d84:	2001      	movs	r0, #1
    2d86:	f7fe fee3 	bl	1b50 <Clock_Ip_ReportClockErrors>
    2d8a:	bf00      	nop
    2d8c:	b00b      	add	sp, #44	; 0x2c
    2d8e:	f85d fb04 	ldr.w	pc, [sp], #4
    2d92:	bf00      	nop
    2d94:	0000b650 	.word	0x0000b650
    2d98:	40064000 	.word	0x40064000

00002d9c <Clock_Ip_EnableFirc_TrustedCall>:
    2d9c:	b500      	push	{lr}
    2d9e:	b089      	sub	sp, #36	; 0x24
    2da0:	9001      	str	r0, [sp, #4]
    2da2:	2300      	movs	r3, #0
    2da4:	f88d 301f 	strb.w	r3, [sp, #31]
    2da8:	9b01      	ldr	r3, [sp, #4]
    2daa:	889b      	ldrh	r3, [r3, #4]
    2dac:	2b01      	cmp	r3, #1
    2dae:	d132      	bne.n	2e16 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    2db0:	4b1b      	ldr	r3, [pc, #108]	; (2e20 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2db2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2db6:	4a1a      	ldr	r2, [pc, #104]	; (2e20 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2db8:	f043 0301 	orr.w	r3, r3, #1
    2dbc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2dc0:	aa03      	add	r2, sp, #12
    2dc2:	a904      	add	r1, sp, #16
    2dc4:	a805      	add	r0, sp, #20
    2dc6:	f24c 3350 	movw	r3, #50000	; 0xc350
    2dca:	f7fe fed1 	bl	1b70 <Clock_Ip_StartTimeout>
    2dce:	4b14      	ldr	r3, [pc, #80]	; (2e20 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2dd0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2dd4:	0e1b      	lsrs	r3, r3, #24
    2dd6:	f003 0301 	and.w	r3, r3, #1
    2dda:	9306      	str	r3, [sp, #24]
    2ddc:	9a03      	ldr	r2, [sp, #12]
    2dde:	a904      	add	r1, sp, #16
    2de0:	ab05      	add	r3, sp, #20
    2de2:	4618      	mov	r0, r3
    2de4:	f7fe fede 	bl	1ba4 <Clock_Ip_TimeoutExpired>
    2de8:	4603      	mov	r3, r0
    2dea:	f88d 301f 	strb.w	r3, [sp, #31]
    2dee:	9b06      	ldr	r3, [sp, #24]
    2df0:	2b00      	cmp	r3, #0
    2df2:	d106      	bne.n	2e02 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    2df4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2df8:	f083 0301 	eor.w	r3, r3, #1
    2dfc:	b2db      	uxtb	r3, r3
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d1e5      	bne.n	2dce <Clock_Ip_EnableFirc_TrustedCall+0x32>
    2e02:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e06:	2b00      	cmp	r3, #0
    2e08:	d005      	beq.n	2e16 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    2e0a:	9b01      	ldr	r3, [sp, #4]
    2e0c:	681b      	ldr	r3, [r3, #0]
    2e0e:	4619      	mov	r1, r3
    2e10:	2001      	movs	r0, #1
    2e12:	f7fe fe9d 	bl	1b50 <Clock_Ip_ReportClockErrors>
    2e16:	bf00      	nop
    2e18:	b009      	add	sp, #36	; 0x24
    2e1a:	f85d fb04 	ldr.w	pc, [sp], #4
    2e1e:	bf00      	nop
    2e20:	40064000 	.word	0x40064000

00002e24 <Clock_Ip_DisableFirc_TrustedCall>:
    2e24:	b082      	sub	sp, #8
    2e26:	9001      	str	r0, [sp, #4]
    2e28:	4b05      	ldr	r3, [pc, #20]	; (2e40 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2e2e:	4a04      	ldr	r2, [pc, #16]	; (2e40 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e30:	f023 0301 	bic.w	r3, r3, #1
    2e34:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2e38:	bf00      	nop
    2e3a:	b002      	add	sp, #8
    2e3c:	4770      	bx	lr
    2e3e:	bf00      	nop
    2e40:	40064000 	.word	0x40064000

00002e44 <Clock_Ip_ClockMonitorEmpty>:
    2e44:	b082      	sub	sp, #8
    2e46:	9001      	str	r0, [sp, #4]
    2e48:	bf00      	nop
    2e4a:	b002      	add	sp, #8
    2e4c:	4770      	bx	lr

00002e4e <Clock_Ip_ClockMonitorEmpty_Set>:
    2e4e:	b082      	sub	sp, #8
    2e50:	9001      	str	r0, [sp, #4]
    2e52:	9100      	str	r1, [sp, #0]
    2e54:	bf00      	nop
    2e56:	b002      	add	sp, #8
    2e58:	4770      	bx	lr

00002e5a <Clock_Ip_ClockMonitorEmpty_Disable>:
    2e5a:	b082      	sub	sp, #8
    2e5c:	9001      	str	r0, [sp, #4]
    2e5e:	bf00      	nop
    2e60:	b002      	add	sp, #8
    2e62:	4770      	bx	lr

00002e64 <Clock_Ip_CallbackPllEmpty>:
    2e64:	b082      	sub	sp, #8
    2e66:	9001      	str	r0, [sp, #4]
    2e68:	bf00      	nop
    2e6a:	b002      	add	sp, #8
    2e6c:	4770      	bx	lr

00002e6e <Clock_Ip_CallbackPllEmptyComplete>:
    2e6e:	b082      	sub	sp, #8
    2e70:	9001      	str	r0, [sp, #4]
    2e72:	2302      	movs	r3, #2
    2e74:	4618      	mov	r0, r3
    2e76:	b002      	add	sp, #8
    2e78:	4770      	bx	lr

00002e7a <Clock_Ip_CallbackPllEmptyDisable>:
    2e7a:	b082      	sub	sp, #8
    2e7c:	9001      	str	r0, [sp, #4]
    2e7e:	bf00      	nop
    2e80:	b002      	add	sp, #8
    2e82:	4770      	bx	lr

00002e84 <Clock_Ip_ResetSpll>:
    2e84:	b500      	push	{lr}
    2e86:	b083      	sub	sp, #12
    2e88:	9001      	str	r0, [sp, #4]
    2e8a:	9b01      	ldr	r3, [sp, #4]
    2e8c:	2b00      	cmp	r3, #0
    2e8e:	d002      	beq.n	2e96 <Clock_Ip_ResetSpll+0x12>
    2e90:	9801      	ldr	r0, [sp, #4]
    2e92:	f000 f870 	bl	2f76 <Clock_Ip_ResetSpll_TrustedCall>
    2e96:	bf00      	nop
    2e98:	b003      	add	sp, #12
    2e9a:	f85d fb04 	ldr.w	pc, [sp], #4

00002e9e <Clock_Ip_SetSpll>:
    2e9e:	b500      	push	{lr}
    2ea0:	b083      	sub	sp, #12
    2ea2:	9001      	str	r0, [sp, #4]
    2ea4:	9b01      	ldr	r3, [sp, #4]
    2ea6:	2b00      	cmp	r3, #0
    2ea8:	d002      	beq.n	2eb0 <Clock_Ip_SetSpll+0x12>
    2eaa:	9801      	ldr	r0, [sp, #4]
    2eac:	f000 f89a 	bl	2fe4 <Clock_Ip_SetSpll_TrustedCall>
    2eb0:	bf00      	nop
    2eb2:	b003      	add	sp, #12
    2eb4:	f85d fb04 	ldr.w	pc, [sp], #4

00002eb8 <Clock_Ip_CompleteSpll>:
    2eb8:	b500      	push	{lr}
    2eba:	b089      	sub	sp, #36	; 0x24
    2ebc:	9001      	str	r0, [sp, #4]
    2ebe:	2301      	movs	r3, #1
    2ec0:	9307      	str	r3, [sp, #28]
    2ec2:	2300      	movs	r3, #0
    2ec4:	f88d 301b 	strb.w	r3, [sp, #27]
    2ec8:	4b1e      	ldr	r3, [pc, #120]	; (2f44 <Clock_Ip_CompleteSpll+0x8c>)
    2eca:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2ece:	f003 0301 	and.w	r3, r3, #1
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d02f      	beq.n	2f36 <Clock_Ip_CompleteSpll+0x7e>
    2ed6:	aa02      	add	r2, sp, #8
    2ed8:	a903      	add	r1, sp, #12
    2eda:	a804      	add	r0, sp, #16
    2edc:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ee0:	f7fe fe46 	bl	1b70 <Clock_Ip_StartTimeout>
    2ee4:	4b17      	ldr	r3, [pc, #92]	; (2f44 <Clock_Ip_CompleteSpll+0x8c>)
    2ee6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2eea:	0e1b      	lsrs	r3, r3, #24
    2eec:	f003 0301 	and.w	r3, r3, #1
    2ef0:	9305      	str	r3, [sp, #20]
    2ef2:	9a02      	ldr	r2, [sp, #8]
    2ef4:	a903      	add	r1, sp, #12
    2ef6:	ab04      	add	r3, sp, #16
    2ef8:	4618      	mov	r0, r3
    2efa:	f7fe fe53 	bl	1ba4 <Clock_Ip_TimeoutExpired>
    2efe:	4603      	mov	r3, r0
    2f00:	f88d 301b 	strb.w	r3, [sp, #27]
    2f04:	9b05      	ldr	r3, [sp, #20]
    2f06:	2b00      	cmp	r3, #0
    2f08:	d106      	bne.n	2f18 <Clock_Ip_CompleteSpll+0x60>
    2f0a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f0e:	f083 0301 	eor.w	r3, r3, #1
    2f12:	b2db      	uxtb	r3, r3
    2f14:	2b00      	cmp	r3, #0
    2f16:	d1e5      	bne.n	2ee4 <Clock_Ip_CompleteSpll+0x2c>
    2f18:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f1c:	f083 0301 	eor.w	r3, r3, #1
    2f20:	b2db      	uxtb	r3, r3
    2f22:	2b00      	cmp	r3, #0
    2f24:	d002      	beq.n	2f2c <Clock_Ip_CompleteSpll+0x74>
    2f26:	2302      	movs	r3, #2
    2f28:	9307      	str	r3, [sp, #28]
    2f2a:	e006      	b.n	2f3a <Clock_Ip_CompleteSpll+0x82>
    2f2c:	9901      	ldr	r1, [sp, #4]
    2f2e:	2001      	movs	r0, #1
    2f30:	f7fe fe0e 	bl	1b50 <Clock_Ip_ReportClockErrors>
    2f34:	e001      	b.n	2f3a <Clock_Ip_CompleteSpll+0x82>
    2f36:	2300      	movs	r3, #0
    2f38:	9307      	str	r3, [sp, #28]
    2f3a:	9b07      	ldr	r3, [sp, #28]
    2f3c:	4618      	mov	r0, r3
    2f3e:	b009      	add	sp, #36	; 0x24
    2f40:	f85d fb04 	ldr.w	pc, [sp], #4
    2f44:	40064000 	.word	0x40064000

00002f48 <Clock_Ip_DisableSpll>:
    2f48:	b500      	push	{lr}
    2f4a:	b083      	sub	sp, #12
    2f4c:	9001      	str	r0, [sp, #4]
    2f4e:	9801      	ldr	r0, [sp, #4]
    2f50:	f000 f886 	bl	3060 <Clock_Ip_DisableSpll_TrustedCall>
    2f54:	bf00      	nop
    2f56:	b003      	add	sp, #12
    2f58:	f85d fb04 	ldr.w	pc, [sp], #4

00002f5c <Clock_Ip_EnableSpll>:
    2f5c:	b500      	push	{lr}
    2f5e:	b083      	sub	sp, #12
    2f60:	9001      	str	r0, [sp, #4]
    2f62:	9b01      	ldr	r3, [sp, #4]
    2f64:	2b00      	cmp	r3, #0
    2f66:	d002      	beq.n	2f6e <Clock_Ip_EnableSpll+0x12>
    2f68:	9801      	ldr	r0, [sp, #4]
    2f6a:	f000 f891 	bl	3090 <Clock_Ip_EnableSpll_TrustedCall>
    2f6e:	bf00      	nop
    2f70:	b003      	add	sp, #12
    2f72:	f85d fb04 	ldr.w	pc, [sp], #4

00002f76 <Clock_Ip_ResetSpll_TrustedCall>:
    2f76:	b082      	sub	sp, #8
    2f78:	9001      	str	r0, [sp, #4]
    2f7a:	4b19      	ldr	r3, [pc, #100]	; (2fe0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f7c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f80:	4a17      	ldr	r2, [pc, #92]	; (2fe0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2f86:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    2f8a:	4b15      	ldr	r3, [pc, #84]	; (2fe0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f8c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f90:	4a13      	ldr	r2, [pc, #76]	; (2fe0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2f96:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    2f9a:	4b11      	ldr	r3, [pc, #68]	; (2fe0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f9c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fa0:	4a0f      	ldr	r2, [pc, #60]	; (2fe0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fa2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2fa6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    2faa:	4b0d      	ldr	r3, [pc, #52]	; (2fe0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fac:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fb0:	4a0b      	ldr	r2, [pc, #44]	; (2fe0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fb2:	f023 0301 	bic.w	r3, r3, #1
    2fb6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    2fba:	4b09      	ldr	r3, [pc, #36]	; (2fe0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fbc:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2fc0:	4a07      	ldr	r2, [pc, #28]	; (2fe0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fc2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2fc6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    2fca:	4b05      	ldr	r3, [pc, #20]	; (2fe0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fcc:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2fd0:	4a03      	ldr	r2, [pc, #12]	; (2fe0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    2fd6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    2fda:	bf00      	nop
    2fdc:	b002      	add	sp, #8
    2fde:	4770      	bx	lr
    2fe0:	40064000 	.word	0x40064000

00002fe4 <Clock_Ip_SetSpll_TrustedCall>:
    2fe4:	b082      	sub	sp, #8
    2fe6:	9001      	str	r0, [sp, #4]
    2fe8:	9b01      	ldr	r3, [sp, #4]
    2fea:	889b      	ldrh	r3, [r3, #4]
    2fec:	2b01      	cmp	r3, #1
    2fee:	d12f      	bne.n	3050 <Clock_Ip_SetSpll_TrustedCall+0x6c>
    2ff0:	4b1a      	ldr	r3, [pc, #104]	; (305c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    2ff2:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    2ff6:	9b01      	ldr	r3, [sp, #4]
    2ff8:	7b5b      	ldrb	r3, [r3, #13]
    2ffa:	3b01      	subs	r3, #1
    2ffc:	021b      	lsls	r3, r3, #8
    2ffe:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
    3002:	9b01      	ldr	r3, [sp, #4]
    3004:	7d1b      	ldrb	r3, [r3, #20]
    3006:	3b10      	subs	r3, #16
    3008:	041b      	lsls	r3, r3, #16
    300a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
    300e:	430b      	orrs	r3, r1
    3010:	4912      	ldr	r1, [pc, #72]	; (305c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3012:	4313      	orrs	r3, r2
    3014:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608
    3018:	9b01      	ldr	r3, [sp, #4]
    301a:	7fdb      	ldrb	r3, [r3, #31]
    301c:	2b02      	cmp	r3, #2
    301e:	d011      	beq.n	3044 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3020:	2b02      	cmp	r3, #2
    3022:	dc17      	bgt.n	3054 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3024:	2b00      	cmp	r3, #0
    3026:	d002      	beq.n	302e <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3028:	2b01      	cmp	r3, #1
    302a:	d005      	beq.n	3038 <Clock_Ip_SetSpll_TrustedCall+0x54>
    302c:	e012      	b.n	3054 <Clock_Ip_SetSpll_TrustedCall+0x70>
    302e:	4b0b      	ldr	r3, [pc, #44]	; (305c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3030:	2200      	movs	r2, #0
    3032:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    3036:	e00e      	b.n	3056 <Clock_Ip_SetSpll_TrustedCall+0x72>
    3038:	4b08      	ldr	r3, [pc, #32]	; (305c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    303a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    303e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    3042:	e008      	b.n	3056 <Clock_Ip_SetSpll_TrustedCall+0x72>
    3044:	4b05      	ldr	r3, [pc, #20]	; (305c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3046:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    304a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    304e:	e002      	b.n	3056 <Clock_Ip_SetSpll_TrustedCall+0x72>
    3050:	bf00      	nop
    3052:	e000      	b.n	3056 <Clock_Ip_SetSpll_TrustedCall+0x72>
    3054:	bf00      	nop
    3056:	bf00      	nop
    3058:	b002      	add	sp, #8
    305a:	4770      	bx	lr
    305c:	40064000 	.word	0x40064000

00003060 <Clock_Ip_DisableSpll_TrustedCall>:
    3060:	b082      	sub	sp, #8
    3062:	9001      	str	r0, [sp, #4]
    3064:	4b09      	ldr	r3, [pc, #36]	; (308c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3066:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    306a:	4a08      	ldr	r2, [pc, #32]	; (308c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    306c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3070:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    3074:	4b05      	ldr	r3, [pc, #20]	; (308c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3076:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    307a:	4a04      	ldr	r2, [pc, #16]	; (308c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    307c:	f023 0301 	bic.w	r3, r3, #1
    3080:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    3084:	bf00      	nop
    3086:	b002      	add	sp, #8
    3088:	4770      	bx	lr
    308a:	bf00      	nop
    308c:	40064000 	.word	0x40064000

00003090 <Clock_Ip_EnableSpll_TrustedCall>:
    3090:	b082      	sub	sp, #8
    3092:	9001      	str	r0, [sp, #4]
    3094:	9b01      	ldr	r3, [sp, #4]
    3096:	889b      	ldrh	r3, [r3, #4]
    3098:	2b01      	cmp	r3, #1
    309a:	d107      	bne.n	30ac <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    309c:	4b05      	ldr	r3, [pc, #20]	; (30b4 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    309e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    30a2:	4a04      	ldr	r2, [pc, #16]	; (30b4 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    30a4:	f043 0301 	orr.w	r3, r3, #1
    30a8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    30ac:	bf00      	nop
    30ae:	b002      	add	sp, #8
    30b0:	4770      	bx	lr
    30b2:	bf00      	nop
    30b4:	40064000 	.word	0x40064000

000030b8 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
    30b8:	b082      	sub	sp, #8
    30ba:	9001      	str	r0, [sp, #4]
    30bc:	9100      	str	r1, [sp, #0]
    30be:	bf00      	nop
    30c0:	b002      	add	sp, #8
    30c2:	4770      	bx	lr

000030c4 <Clock_Ip_CallbackSelectorEmpty>:
    30c4:	b082      	sub	sp, #8
    30c6:	9001      	str	r0, [sp, #4]
    30c8:	bf00      	nop
    30ca:	b002      	add	sp, #8
    30cc:	4770      	bx	lr

000030ce <Clock_Ip_ResetScgRunSel>:
    30ce:	b500      	push	{lr}
    30d0:	b083      	sub	sp, #12
    30d2:	9001      	str	r0, [sp, #4]
    30d4:	9b01      	ldr	r3, [sp, #4]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d002      	beq.n	30e0 <Clock_Ip_ResetScgRunSel+0x12>
    30da:	9801      	ldr	r0, [sp, #4]
    30dc:	f000 f8ee 	bl	32bc <Clock_Ip_ResetScgRunSel_TrustedCall>
    30e0:	bf00      	nop
    30e2:	b003      	add	sp, #12
    30e4:	f85d fb04 	ldr.w	pc, [sp], #4

000030e8 <Clock_Ip_SetScgRunSel>:
    30e8:	b500      	push	{lr}
    30ea:	b083      	sub	sp, #12
    30ec:	9001      	str	r0, [sp, #4]
    30ee:	9b01      	ldr	r3, [sp, #4]
    30f0:	2b00      	cmp	r3, #0
    30f2:	d002      	beq.n	30fa <Clock_Ip_SetScgRunSel+0x12>
    30f4:	9801      	ldr	r0, [sp, #4]
    30f6:	f000 f8ff 	bl	32f8 <Clock_Ip_SetScgRunSel_TrustedCall>
    30fa:	bf00      	nop
    30fc:	b003      	add	sp, #12
    30fe:	f85d fb04 	ldr.w	pc, [sp], #4

00003102 <Clock_Ip_SetScgVlprSel>:
    3102:	b500      	push	{lr}
    3104:	b083      	sub	sp, #12
    3106:	9001      	str	r0, [sp, #4]
    3108:	9b01      	ldr	r3, [sp, #4]
    310a:	2b00      	cmp	r3, #0
    310c:	d002      	beq.n	3114 <Clock_Ip_SetScgVlprSel+0x12>
    310e:	9801      	ldr	r0, [sp, #4]
    3110:	f000 f912 	bl	3338 <Clock_Ip_SetScgVlprSel_TrustedCall>
    3114:	bf00      	nop
    3116:	b003      	add	sp, #12
    3118:	f85d fb04 	ldr.w	pc, [sp], #4

0000311c <Clock_Ip_ResetScgHsrunSel>:
    311c:	b500      	push	{lr}
    311e:	b083      	sub	sp, #12
    3120:	9001      	str	r0, [sp, #4]
    3122:	9b01      	ldr	r3, [sp, #4]
    3124:	2b00      	cmp	r3, #0
    3126:	d002      	beq.n	312e <Clock_Ip_ResetScgHsrunSel+0x12>
    3128:	9801      	ldr	r0, [sp, #4]
    312a:	f000 f925 	bl	3378 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
    312e:	bf00      	nop
    3130:	b003      	add	sp, #12
    3132:	f85d fb04 	ldr.w	pc, [sp], #4

00003136 <Clock_Ip_SetScgHsrunSel>:
    3136:	b500      	push	{lr}
    3138:	b083      	sub	sp, #12
    313a:	9001      	str	r0, [sp, #4]
    313c:	9b01      	ldr	r3, [sp, #4]
    313e:	2b00      	cmp	r3, #0
    3140:	d002      	beq.n	3148 <Clock_Ip_SetScgHsrunSel+0x12>
    3142:	9801      	ldr	r0, [sp, #4]
    3144:	f000 f936 	bl	33b4 <Clock_Ip_SetScgHsrunSel_TrustedCall>
    3148:	bf00      	nop
    314a:	b003      	add	sp, #12
    314c:	f85d fb04 	ldr.w	pc, [sp], #4

00003150 <Clock_Ip_ResetSimRtcSel>:
    3150:	b500      	push	{lr}
    3152:	b083      	sub	sp, #12
    3154:	9001      	str	r0, [sp, #4]
    3156:	9b01      	ldr	r3, [sp, #4]
    3158:	2b00      	cmp	r3, #0
    315a:	d002      	beq.n	3162 <Clock_Ip_ResetSimRtcSel+0x12>
    315c:	9801      	ldr	r0, [sp, #4]
    315e:	f000 f949 	bl	33f4 <Clock_Ip_ResetSimRtcSel_TrustedCall>
    3162:	bf00      	nop
    3164:	b003      	add	sp, #12
    3166:	f85d fb04 	ldr.w	pc, [sp], #4

0000316a <Clock_Ip_SetSimRtcSel>:
    316a:	b500      	push	{lr}
    316c:	b083      	sub	sp, #12
    316e:	9001      	str	r0, [sp, #4]
    3170:	9b01      	ldr	r3, [sp, #4]
    3172:	2b00      	cmp	r3, #0
    3174:	d002      	beq.n	317c <Clock_Ip_SetSimRtcSel+0x12>
    3176:	9801      	ldr	r0, [sp, #4]
    3178:	f000 f958 	bl	342c <Clock_Ip_SetSimRtcSel_TrustedCall>
    317c:	bf00      	nop
    317e:	b003      	add	sp, #12
    3180:	f85d fb04 	ldr.w	pc, [sp], #4

00003184 <Clock_Ip_ResetSimLpoSel>:
    3184:	b500      	push	{lr}
    3186:	b083      	sub	sp, #12
    3188:	9001      	str	r0, [sp, #4]
    318a:	9b01      	ldr	r3, [sp, #4]
    318c:	2b00      	cmp	r3, #0
    318e:	d002      	beq.n	3196 <Clock_Ip_ResetSimLpoSel+0x12>
    3190:	9801      	ldr	r0, [sp, #4]
    3192:	f000 f969 	bl	3468 <Clock_Ip_ResetSimLpoSel_TrustedCall>
    3196:	bf00      	nop
    3198:	b003      	add	sp, #12
    319a:	f85d fb04 	ldr.w	pc, [sp], #4

0000319e <Clock_Ip_SetSimLpoSel>:
    319e:	b500      	push	{lr}
    31a0:	b083      	sub	sp, #12
    31a2:	9001      	str	r0, [sp, #4]
    31a4:	9b01      	ldr	r3, [sp, #4]
    31a6:	2b00      	cmp	r3, #0
    31a8:	d002      	beq.n	31b0 <Clock_Ip_SetSimLpoSel+0x12>
    31aa:	9801      	ldr	r0, [sp, #4]
    31ac:	f000 f978 	bl	34a0 <Clock_Ip_SetSimLpoSel_TrustedCall>
    31b0:	bf00      	nop
    31b2:	b003      	add	sp, #12
    31b4:	f85d fb04 	ldr.w	pc, [sp], #4

000031b8 <Clock_Ip_ResetScgClkoutSel>:
    31b8:	b500      	push	{lr}
    31ba:	b083      	sub	sp, #12
    31bc:	9001      	str	r0, [sp, #4]
    31be:	9b01      	ldr	r3, [sp, #4]
    31c0:	2b00      	cmp	r3, #0
    31c2:	d002      	beq.n	31ca <Clock_Ip_ResetScgClkoutSel+0x12>
    31c4:	9801      	ldr	r0, [sp, #4]
    31c6:	f000 f989 	bl	34dc <Clock_Ip_ResetScgClkoutSel_TrustedCall>
    31ca:	bf00      	nop
    31cc:	b003      	add	sp, #12
    31ce:	f85d fb04 	ldr.w	pc, [sp], #4

000031d2 <Clock_Ip_SetScgClkoutSel>:
    31d2:	b500      	push	{lr}
    31d4:	b083      	sub	sp, #12
    31d6:	9001      	str	r0, [sp, #4]
    31d8:	9b01      	ldr	r3, [sp, #4]
    31da:	2b00      	cmp	r3, #0
    31dc:	d002      	beq.n	31e4 <Clock_Ip_SetScgClkoutSel+0x12>
    31de:	9801      	ldr	r0, [sp, #4]
    31e0:	f000 f998 	bl	3514 <Clock_Ip_SetScgClkoutSel_TrustedCall>
    31e4:	bf00      	nop
    31e6:	b003      	add	sp, #12
    31e8:	f85d fb04 	ldr.w	pc, [sp], #4

000031ec <Clock_Ip_ResetSimFtmoptSel>:
    31ec:	b500      	push	{lr}
    31ee:	b083      	sub	sp, #12
    31f0:	9001      	str	r0, [sp, #4]
    31f2:	9b01      	ldr	r3, [sp, #4]
    31f4:	2b00      	cmp	r3, #0
    31f6:	d002      	beq.n	31fe <Clock_Ip_ResetSimFtmoptSel+0x12>
    31f8:	9801      	ldr	r0, [sp, #4]
    31fa:	f000 f9a9 	bl	3550 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
    31fe:	bf00      	nop
    3200:	b003      	add	sp, #12
    3202:	f85d fb04 	ldr.w	pc, [sp], #4

00003206 <Clock_Ip_SetSimFtmoptSel>:
    3206:	b500      	push	{lr}
    3208:	b083      	sub	sp, #12
    320a:	9001      	str	r0, [sp, #4]
    320c:	9b01      	ldr	r3, [sp, #4]
    320e:	2b00      	cmp	r3, #0
    3210:	d002      	beq.n	3218 <Clock_Ip_SetSimFtmoptSel+0x12>
    3212:	9801      	ldr	r0, [sp, #4]
    3214:	f000 f9e6 	bl	35e4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
    3218:	bf00      	nop
    321a:	b003      	add	sp, #12
    321c:	f85d fb04 	ldr.w	pc, [sp], #4

00003220 <Clock_Ip_ResetSimClkoutSel>:
    3220:	b500      	push	{lr}
    3222:	b083      	sub	sp, #12
    3224:	9001      	str	r0, [sp, #4]
    3226:	9b01      	ldr	r3, [sp, #4]
    3228:	2b00      	cmp	r3, #0
    322a:	d002      	beq.n	3232 <Clock_Ip_ResetSimClkoutSel+0x12>
    322c:	9801      	ldr	r0, [sp, #4]
    322e:	f000 fa25 	bl	367c <Clock_Ip_ResetSimClkoutSel_TrustedCall>
    3232:	bf00      	nop
    3234:	b003      	add	sp, #12
    3236:	f85d fb04 	ldr.w	pc, [sp], #4

0000323a <Clock_Ip_SetSimClkoutSel>:
    323a:	b500      	push	{lr}
    323c:	b083      	sub	sp, #12
    323e:	9001      	str	r0, [sp, #4]
    3240:	9b01      	ldr	r3, [sp, #4]
    3242:	2b00      	cmp	r3, #0
    3244:	d002      	beq.n	324c <Clock_Ip_SetSimClkoutSel+0x12>
    3246:	9801      	ldr	r0, [sp, #4]
    3248:	f000 fa2a 	bl	36a0 <Clock_Ip_SetSimClkoutSel_TrustedCall>
    324c:	bf00      	nop
    324e:	b003      	add	sp, #12
    3250:	f85d fb04 	ldr.w	pc, [sp], #4

00003254 <Clock_Ip_ResetPccPcsSelect>:
    3254:	b500      	push	{lr}
    3256:	b083      	sub	sp, #12
    3258:	9001      	str	r0, [sp, #4]
    325a:	9b01      	ldr	r3, [sp, #4]
    325c:	2b00      	cmp	r3, #0
    325e:	d002      	beq.n	3266 <Clock_Ip_ResetPccPcsSelect+0x12>
    3260:	9801      	ldr	r0, [sp, #4]
    3262:	f000 fa3b 	bl	36dc <Clock_Ip_ResetPccPcsSelect_TrustedCall>
    3266:	bf00      	nop
    3268:	b003      	add	sp, #12
    326a:	f85d fb04 	ldr.w	pc, [sp], #4

0000326e <Clock_Ip_SetPccPcsSelect>:
    326e:	b500      	push	{lr}
    3270:	b083      	sub	sp, #12
    3272:	9001      	str	r0, [sp, #4]
    3274:	9b01      	ldr	r3, [sp, #4]
    3276:	2b00      	cmp	r3, #0
    3278:	d002      	beq.n	3280 <Clock_Ip_SetPccPcsSelect+0x12>
    327a:	9801      	ldr	r0, [sp, #4]
    327c:	f000 fa56 	bl	372c <Clock_Ip_SetPccPcsSelect_TrustedCall>
    3280:	bf00      	nop
    3282:	b003      	add	sp, #12
    3284:	f85d fb04 	ldr.w	pc, [sp], #4

00003288 <Clock_Ip_ResetSimTraceSel>:
    3288:	b500      	push	{lr}
    328a:	b083      	sub	sp, #12
    328c:	9001      	str	r0, [sp, #4]
    328e:	9b01      	ldr	r3, [sp, #4]
    3290:	2b00      	cmp	r3, #0
    3292:	d002      	beq.n	329a <Clock_Ip_ResetSimTraceSel+0x12>
    3294:	9801      	ldr	r0, [sp, #4]
    3296:	f000 fa79 	bl	378c <Clock_Ip_ResetSimTraceSel_TrustedCall>
    329a:	bf00      	nop
    329c:	b003      	add	sp, #12
    329e:	f85d fb04 	ldr.w	pc, [sp], #4

000032a2 <Clock_Ip_SetSimTraceSel>:
    32a2:	b500      	push	{lr}
    32a4:	b083      	sub	sp, #12
    32a6:	9001      	str	r0, [sp, #4]
    32a8:	9b01      	ldr	r3, [sp, #4]
    32aa:	2b00      	cmp	r3, #0
    32ac:	d002      	beq.n	32b4 <Clock_Ip_SetSimTraceSel+0x12>
    32ae:	9801      	ldr	r0, [sp, #4]
    32b0:	f000 fa8a 	bl	37c8 <Clock_Ip_SetSimTraceSel_TrustedCall>
    32b4:	bf00      	nop
    32b6:	b003      	add	sp, #12
    32b8:	f85d fb04 	ldr.w	pc, [sp], #4

000032bc <Clock_Ip_ResetScgRunSel_TrustedCall>:
    32bc:	b084      	sub	sp, #16
    32be:	9001      	str	r0, [sp, #4]
    32c0:	4b0b      	ldr	r3, [pc, #44]	; (32f0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    32c2:	795b      	ldrb	r3, [r3, #5]
    32c4:	9303      	str	r3, [sp, #12]
    32c6:	4b0b      	ldr	r3, [pc, #44]	; (32f4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    32c8:	695b      	ldr	r3, [r3, #20]
    32ca:	9302      	str	r3, [sp, #8]
    32cc:	9b02      	ldr	r3, [sp, #8]
    32ce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    32d2:	9302      	str	r3, [sp, #8]
    32d4:	9b03      	ldr	r3, [sp, #12]
    32d6:	061b      	lsls	r3, r3, #24
    32d8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    32dc:	9a02      	ldr	r2, [sp, #8]
    32de:	4313      	orrs	r3, r2
    32e0:	9302      	str	r3, [sp, #8]
    32e2:	4a04      	ldr	r2, [pc, #16]	; (32f4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    32e4:	9b02      	ldr	r3, [sp, #8]
    32e6:	6153      	str	r3, [r2, #20]
    32e8:	bf00      	nop
    32ea:	b004      	add	sp, #16
    32ec:	4770      	bx	lr
    32ee:	bf00      	nop
    32f0:	0000b9b8 	.word	0x0000b9b8
    32f4:	40064000 	.word	0x40064000

000032f8 <Clock_Ip_SetScgRunSel_TrustedCall>:
    32f8:	b084      	sub	sp, #16
    32fa:	9001      	str	r0, [sp, #4]
    32fc:	9b01      	ldr	r3, [sp, #4]
    32fe:	685b      	ldr	r3, [r3, #4]
    3300:	4a0b      	ldr	r2, [pc, #44]	; (3330 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    3302:	5cd3      	ldrb	r3, [r2, r3]
    3304:	9303      	str	r3, [sp, #12]
    3306:	4b0b      	ldr	r3, [pc, #44]	; (3334 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3308:	695b      	ldr	r3, [r3, #20]
    330a:	9302      	str	r3, [sp, #8]
    330c:	9b02      	ldr	r3, [sp, #8]
    330e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3312:	9302      	str	r3, [sp, #8]
    3314:	9b03      	ldr	r3, [sp, #12]
    3316:	061b      	lsls	r3, r3, #24
    3318:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    331c:	9a02      	ldr	r2, [sp, #8]
    331e:	4313      	orrs	r3, r2
    3320:	9302      	str	r3, [sp, #8]
    3322:	4a04      	ldr	r2, [pc, #16]	; (3334 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3324:	9b02      	ldr	r3, [sp, #8]
    3326:	6153      	str	r3, [r2, #20]
    3328:	bf00      	nop
    332a:	b004      	add	sp, #16
    332c:	4770      	bx	lr
    332e:	bf00      	nop
    3330:	0000b9b8 	.word	0x0000b9b8
    3334:	40064000 	.word	0x40064000

00003338 <Clock_Ip_SetScgVlprSel_TrustedCall>:
    3338:	b084      	sub	sp, #16
    333a:	9001      	str	r0, [sp, #4]
    333c:	9b01      	ldr	r3, [sp, #4]
    333e:	685b      	ldr	r3, [r3, #4]
    3340:	4a0b      	ldr	r2, [pc, #44]	; (3370 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3342:	5cd3      	ldrb	r3, [r2, r3]
    3344:	9303      	str	r3, [sp, #12]
    3346:	4b0b      	ldr	r3, [pc, #44]	; (3374 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3348:	699b      	ldr	r3, [r3, #24]
    334a:	9302      	str	r3, [sp, #8]
    334c:	9b02      	ldr	r3, [sp, #8]
    334e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3352:	9302      	str	r3, [sp, #8]
    3354:	9b03      	ldr	r3, [sp, #12]
    3356:	061b      	lsls	r3, r3, #24
    3358:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    335c:	9a02      	ldr	r2, [sp, #8]
    335e:	4313      	orrs	r3, r2
    3360:	9302      	str	r3, [sp, #8]
    3362:	4a04      	ldr	r2, [pc, #16]	; (3374 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3364:	9b02      	ldr	r3, [sp, #8]
    3366:	6193      	str	r3, [r2, #24]
    3368:	bf00      	nop
    336a:	b004      	add	sp, #16
    336c:	4770      	bx	lr
    336e:	bf00      	nop
    3370:	0000b9b8 	.word	0x0000b9b8
    3374:	40064000 	.word	0x40064000

00003378 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:
    3378:	b084      	sub	sp, #16
    337a:	9001      	str	r0, [sp, #4]
    337c:	4b0b      	ldr	r3, [pc, #44]	; (33ac <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    337e:	795b      	ldrb	r3, [r3, #5]
    3380:	9303      	str	r3, [sp, #12]
    3382:	4b0b      	ldr	r3, [pc, #44]	; (33b0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3384:	69db      	ldr	r3, [r3, #28]
    3386:	9302      	str	r3, [sp, #8]
    3388:	9b02      	ldr	r3, [sp, #8]
    338a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    338e:	9302      	str	r3, [sp, #8]
    3390:	9b03      	ldr	r3, [sp, #12]
    3392:	061b      	lsls	r3, r3, #24
    3394:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3398:	9a02      	ldr	r2, [sp, #8]
    339a:	4313      	orrs	r3, r2
    339c:	9302      	str	r3, [sp, #8]
    339e:	4a04      	ldr	r2, [pc, #16]	; (33b0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    33a0:	9b02      	ldr	r3, [sp, #8]
    33a2:	61d3      	str	r3, [r2, #28]
    33a4:	bf00      	nop
    33a6:	b004      	add	sp, #16
    33a8:	4770      	bx	lr
    33aa:	bf00      	nop
    33ac:	0000b9b8 	.word	0x0000b9b8
    33b0:	40064000 	.word	0x40064000

000033b4 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
    33b4:	b084      	sub	sp, #16
    33b6:	9001      	str	r0, [sp, #4]
    33b8:	9b01      	ldr	r3, [sp, #4]
    33ba:	685b      	ldr	r3, [r3, #4]
    33bc:	4a0b      	ldr	r2, [pc, #44]	; (33ec <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    33be:	5cd3      	ldrb	r3, [r2, r3]
    33c0:	9303      	str	r3, [sp, #12]
    33c2:	4b0b      	ldr	r3, [pc, #44]	; (33f0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    33c4:	69db      	ldr	r3, [r3, #28]
    33c6:	9302      	str	r3, [sp, #8]
    33c8:	9b02      	ldr	r3, [sp, #8]
    33ca:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    33ce:	9302      	str	r3, [sp, #8]
    33d0:	9b03      	ldr	r3, [sp, #12]
    33d2:	061b      	lsls	r3, r3, #24
    33d4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    33d8:	9a02      	ldr	r2, [sp, #8]
    33da:	4313      	orrs	r3, r2
    33dc:	9302      	str	r3, [sp, #8]
    33de:	4a04      	ldr	r2, [pc, #16]	; (33f0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    33e0:	9b02      	ldr	r3, [sp, #8]
    33e2:	61d3      	str	r3, [r2, #28]
    33e4:	bf00      	nop
    33e6:	b004      	add	sp, #16
    33e8:	4770      	bx	lr
    33ea:	bf00      	nop
    33ec:	0000b9b8 	.word	0x0000b9b8
    33f0:	40064000 	.word	0x40064000

000033f4 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
    33f4:	b084      	sub	sp, #16
    33f6:	9001      	str	r0, [sp, #4]
    33f8:	4b0a      	ldr	r3, [pc, #40]	; (3424 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    33fa:	7b9b      	ldrb	r3, [r3, #14]
    33fc:	9303      	str	r3, [sp, #12]
    33fe:	4b0a      	ldr	r3, [pc, #40]	; (3428 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3400:	691b      	ldr	r3, [r3, #16]
    3402:	9302      	str	r3, [sp, #8]
    3404:	9b02      	ldr	r3, [sp, #8]
    3406:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    340a:	9302      	str	r3, [sp, #8]
    340c:	9b03      	ldr	r3, [sp, #12]
    340e:	011b      	lsls	r3, r3, #4
    3410:	9a02      	ldr	r2, [sp, #8]
    3412:	4313      	orrs	r3, r2
    3414:	9302      	str	r3, [sp, #8]
    3416:	4a04      	ldr	r2, [pc, #16]	; (3428 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3418:	9b02      	ldr	r3, [sp, #8]
    341a:	6113      	str	r3, [r2, #16]
    341c:	bf00      	nop
    341e:	b004      	add	sp, #16
    3420:	4770      	bx	lr
    3422:	bf00      	nop
    3424:	0000b960 	.word	0x0000b960
    3428:	40048000 	.word	0x40048000

0000342c <Clock_Ip_SetSimRtcSel_TrustedCall>:
    342c:	b084      	sub	sp, #16
    342e:	9001      	str	r0, [sp, #4]
    3430:	9b01      	ldr	r3, [sp, #4]
    3432:	685b      	ldr	r3, [r3, #4]
    3434:	4a0a      	ldr	r2, [pc, #40]	; (3460 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3436:	5cd3      	ldrb	r3, [r2, r3]
    3438:	9303      	str	r3, [sp, #12]
    343a:	4b0a      	ldr	r3, [pc, #40]	; (3464 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    343c:	691b      	ldr	r3, [r3, #16]
    343e:	9302      	str	r3, [sp, #8]
    3440:	9b02      	ldr	r3, [sp, #8]
    3442:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3446:	9302      	str	r3, [sp, #8]
    3448:	9b03      	ldr	r3, [sp, #12]
    344a:	011b      	lsls	r3, r3, #4
    344c:	9a02      	ldr	r2, [sp, #8]
    344e:	4313      	orrs	r3, r2
    3450:	9302      	str	r3, [sp, #8]
    3452:	4a04      	ldr	r2, [pc, #16]	; (3464 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3454:	9b02      	ldr	r3, [sp, #8]
    3456:	6113      	str	r3, [r2, #16]
    3458:	bf00      	nop
    345a:	b004      	add	sp, #16
    345c:	4770      	bx	lr
    345e:	bf00      	nop
    3460:	0000b960 	.word	0x0000b960
    3464:	40048000 	.word	0x40048000

00003468 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
    3468:	b084      	sub	sp, #16
    346a:	9001      	str	r0, [sp, #4]
    346c:	4b0a      	ldr	r3, [pc, #40]	; (3498 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    346e:	785b      	ldrb	r3, [r3, #1]
    3470:	9303      	str	r3, [sp, #12]
    3472:	4b0a      	ldr	r3, [pc, #40]	; (349c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3474:	691b      	ldr	r3, [r3, #16]
    3476:	9302      	str	r3, [sp, #8]
    3478:	9b02      	ldr	r3, [sp, #8]
    347a:	f023 030c 	bic.w	r3, r3, #12
    347e:	9302      	str	r3, [sp, #8]
    3480:	9b03      	ldr	r3, [sp, #12]
    3482:	009b      	lsls	r3, r3, #2
    3484:	9a02      	ldr	r2, [sp, #8]
    3486:	4313      	orrs	r3, r2
    3488:	9302      	str	r3, [sp, #8]
    348a:	4a04      	ldr	r2, [pc, #16]	; (349c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    348c:	9b02      	ldr	r3, [sp, #8]
    348e:	6113      	str	r3, [r2, #16]
    3490:	bf00      	nop
    3492:	b004      	add	sp, #16
    3494:	4770      	bx	lr
    3496:	bf00      	nop
    3498:	0000ba18 	.word	0x0000ba18
    349c:	40048000 	.word	0x40048000

000034a0 <Clock_Ip_SetSimLpoSel_TrustedCall>:
    34a0:	b084      	sub	sp, #16
    34a2:	9001      	str	r0, [sp, #4]
    34a4:	9b01      	ldr	r3, [sp, #4]
    34a6:	685b      	ldr	r3, [r3, #4]
    34a8:	4a0a      	ldr	r2, [pc, #40]	; (34d4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    34aa:	5cd3      	ldrb	r3, [r2, r3]
    34ac:	9303      	str	r3, [sp, #12]
    34ae:	4b0a      	ldr	r3, [pc, #40]	; (34d8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    34b0:	691b      	ldr	r3, [r3, #16]
    34b2:	9302      	str	r3, [sp, #8]
    34b4:	9b02      	ldr	r3, [sp, #8]
    34b6:	f023 030c 	bic.w	r3, r3, #12
    34ba:	9302      	str	r3, [sp, #8]
    34bc:	9b03      	ldr	r3, [sp, #12]
    34be:	009b      	lsls	r3, r3, #2
    34c0:	9a02      	ldr	r2, [sp, #8]
    34c2:	4313      	orrs	r3, r2
    34c4:	9302      	str	r3, [sp, #8]
    34c6:	4a04      	ldr	r2, [pc, #16]	; (34d8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    34c8:	9b02      	ldr	r3, [sp, #8]
    34ca:	6113      	str	r3, [r2, #16]
    34cc:	bf00      	nop
    34ce:	b004      	add	sp, #16
    34d0:	4770      	bx	lr
    34d2:	bf00      	nop
    34d4:	0000ba18 	.word	0x0000ba18
    34d8:	40048000 	.word	0x40048000

000034dc <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
    34dc:	b084      	sub	sp, #16
    34de:	9001      	str	r0, [sp, #4]
    34e0:	4b0a      	ldr	r3, [pc, #40]	; (350c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    34e2:	795b      	ldrb	r3, [r3, #5]
    34e4:	9303      	str	r3, [sp, #12]
    34e6:	4b0a      	ldr	r3, [pc, #40]	; (3510 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    34e8:	6a1b      	ldr	r3, [r3, #32]
    34ea:	9302      	str	r3, [sp, #8]
    34ec:	9b02      	ldr	r3, [sp, #8]
    34ee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    34f2:	9302      	str	r3, [sp, #8]
    34f4:	9b03      	ldr	r3, [sp, #12]
    34f6:	061b      	lsls	r3, r3, #24
    34f8:	9a02      	ldr	r2, [sp, #8]
    34fa:	4313      	orrs	r3, r2
    34fc:	9302      	str	r3, [sp, #8]
    34fe:	4a04      	ldr	r2, [pc, #16]	; (3510 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3500:	9b02      	ldr	r3, [sp, #8]
    3502:	6213      	str	r3, [r2, #32]
    3504:	bf00      	nop
    3506:	b004      	add	sp, #16
    3508:	4770      	bx	lr
    350a:	bf00      	nop
    350c:	0000b9b8 	.word	0x0000b9b8
    3510:	40064000 	.word	0x40064000

00003514 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
    3514:	b084      	sub	sp, #16
    3516:	9001      	str	r0, [sp, #4]
    3518:	9b01      	ldr	r3, [sp, #4]
    351a:	685b      	ldr	r3, [r3, #4]
    351c:	4a0a      	ldr	r2, [pc, #40]	; (3548 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    351e:	5cd3      	ldrb	r3, [r2, r3]
    3520:	9303      	str	r3, [sp, #12]
    3522:	4b0a      	ldr	r3, [pc, #40]	; (354c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3524:	6a1b      	ldr	r3, [r3, #32]
    3526:	9302      	str	r3, [sp, #8]
    3528:	9b02      	ldr	r3, [sp, #8]
    352a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    352e:	9302      	str	r3, [sp, #8]
    3530:	9b03      	ldr	r3, [sp, #12]
    3532:	061b      	lsls	r3, r3, #24
    3534:	9a02      	ldr	r2, [sp, #8]
    3536:	4313      	orrs	r3, r2
    3538:	9302      	str	r3, [sp, #8]
    353a:	4a04      	ldr	r2, [pc, #16]	; (354c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    353c:	9b02      	ldr	r3, [sp, #8]
    353e:	6213      	str	r3, [r2, #32]
    3540:	bf00      	nop
    3542:	b004      	add	sp, #16
    3544:	4770      	bx	lr
    3546:	bf00      	nop
    3548:	0000b9b8 	.word	0x0000b9b8
    354c:	40064000 	.word	0x40064000

00003550 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
    3550:	b086      	sub	sp, #24
    3552:	9001      	str	r0, [sp, #4]
    3554:	4b20      	ldr	r3, [pc, #128]	; (35d8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3556:	795b      	ldrb	r3, [r3, #5]
    3558:	9304      	str	r3, [sp, #16]
    355a:	9b01      	ldr	r3, [sp, #4]
    355c:	681a      	ldr	r2, [r3, #0]
    355e:	491f      	ldr	r1, [pc, #124]	; (35dc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3560:	4613      	mov	r3, r2
    3562:	00db      	lsls	r3, r3, #3
    3564:	4413      	add	r3, r2
    3566:	440b      	add	r3, r1
    3568:	781b      	ldrb	r3, [r3, #0]
    356a:	9303      	str	r3, [sp, #12]
    356c:	4b1c      	ldr	r3, [pc, #112]	; (35e0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    356e:	68db      	ldr	r3, [r3, #12]
    3570:	9305      	str	r3, [sp, #20]
    3572:	9b03      	ldr	r3, [sp, #12]
    3574:	2b03      	cmp	r3, #3
    3576:	d813      	bhi.n	35a0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    3578:	9b03      	ldr	r3, [sp, #12]
    357a:	005b      	lsls	r3, r3, #1
    357c:	3318      	adds	r3, #24
    357e:	2203      	movs	r2, #3
    3580:	fa02 f303 	lsl.w	r3, r2, r3
    3584:	43db      	mvns	r3, r3
    3586:	9a05      	ldr	r2, [sp, #20]
    3588:	4013      	ands	r3, r2
    358a:	9305      	str	r3, [sp, #20]
    358c:	9b03      	ldr	r3, [sp, #12]
    358e:	005b      	lsls	r3, r3, #1
    3590:	3318      	adds	r3, #24
    3592:	9a04      	ldr	r2, [sp, #16]
    3594:	fa02 f303 	lsl.w	r3, r2, r3
    3598:	9a05      	ldr	r2, [sp, #20]
    359a:	4313      	orrs	r3, r2
    359c:	9305      	str	r3, [sp, #20]
    359e:	e014      	b.n	35ca <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    35a0:	9b03      	ldr	r3, [sp, #12]
    35a2:	3b04      	subs	r3, #4
    35a4:	005b      	lsls	r3, r3, #1
    35a6:	3310      	adds	r3, #16
    35a8:	2203      	movs	r2, #3
    35aa:	fa02 f303 	lsl.w	r3, r2, r3
    35ae:	43db      	mvns	r3, r3
    35b0:	9a05      	ldr	r2, [sp, #20]
    35b2:	4013      	ands	r3, r2
    35b4:	9305      	str	r3, [sp, #20]
    35b6:	9b03      	ldr	r3, [sp, #12]
    35b8:	3b04      	subs	r3, #4
    35ba:	005b      	lsls	r3, r3, #1
    35bc:	3310      	adds	r3, #16
    35be:	9a04      	ldr	r2, [sp, #16]
    35c0:	fa02 f303 	lsl.w	r3, r2, r3
    35c4:	9a05      	ldr	r2, [sp, #20]
    35c6:	4313      	orrs	r3, r2
    35c8:	9305      	str	r3, [sp, #20]
    35ca:	4a05      	ldr	r2, [pc, #20]	; (35e0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    35cc:	9b05      	ldr	r3, [sp, #20]
    35ce:	60d3      	str	r3, [r2, #12]
    35d0:	bf00      	nop
    35d2:	b006      	add	sp, #24
    35d4:	4770      	bx	lr
    35d6:	bf00      	nop
    35d8:	0000b960 	.word	0x0000b960
    35dc:	0000b650 	.word	0x0000b650
    35e0:	40048000 	.word	0x40048000

000035e4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
    35e4:	b086      	sub	sp, #24
    35e6:	9001      	str	r0, [sp, #4]
    35e8:	9b01      	ldr	r3, [sp, #4]
    35ea:	685b      	ldr	r3, [r3, #4]
    35ec:	4a20      	ldr	r2, [pc, #128]	; (3670 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    35ee:	5cd3      	ldrb	r3, [r2, r3]
    35f0:	9304      	str	r3, [sp, #16]
    35f2:	9b01      	ldr	r3, [sp, #4]
    35f4:	681a      	ldr	r2, [r3, #0]
    35f6:	491f      	ldr	r1, [pc, #124]	; (3674 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    35f8:	4613      	mov	r3, r2
    35fa:	00db      	lsls	r3, r3, #3
    35fc:	4413      	add	r3, r2
    35fe:	440b      	add	r3, r1
    3600:	781b      	ldrb	r3, [r3, #0]
    3602:	9303      	str	r3, [sp, #12]
    3604:	4b1c      	ldr	r3, [pc, #112]	; (3678 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3606:	68db      	ldr	r3, [r3, #12]
    3608:	9305      	str	r3, [sp, #20]
    360a:	9b03      	ldr	r3, [sp, #12]
    360c:	2b03      	cmp	r3, #3
    360e:	d813      	bhi.n	3638 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    3610:	9b03      	ldr	r3, [sp, #12]
    3612:	005b      	lsls	r3, r3, #1
    3614:	3318      	adds	r3, #24
    3616:	2203      	movs	r2, #3
    3618:	fa02 f303 	lsl.w	r3, r2, r3
    361c:	43db      	mvns	r3, r3
    361e:	9a05      	ldr	r2, [sp, #20]
    3620:	4013      	ands	r3, r2
    3622:	9305      	str	r3, [sp, #20]
    3624:	9b03      	ldr	r3, [sp, #12]
    3626:	005b      	lsls	r3, r3, #1
    3628:	3318      	adds	r3, #24
    362a:	9a04      	ldr	r2, [sp, #16]
    362c:	fa02 f303 	lsl.w	r3, r2, r3
    3630:	9a05      	ldr	r2, [sp, #20]
    3632:	4313      	orrs	r3, r2
    3634:	9305      	str	r3, [sp, #20]
    3636:	e014      	b.n	3662 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    3638:	9b03      	ldr	r3, [sp, #12]
    363a:	3b04      	subs	r3, #4
    363c:	005b      	lsls	r3, r3, #1
    363e:	3310      	adds	r3, #16
    3640:	2203      	movs	r2, #3
    3642:	fa02 f303 	lsl.w	r3, r2, r3
    3646:	43db      	mvns	r3, r3
    3648:	9a05      	ldr	r2, [sp, #20]
    364a:	4013      	ands	r3, r2
    364c:	9305      	str	r3, [sp, #20]
    364e:	9b03      	ldr	r3, [sp, #12]
    3650:	3b04      	subs	r3, #4
    3652:	005b      	lsls	r3, r3, #1
    3654:	3310      	adds	r3, #16
    3656:	9a04      	ldr	r2, [sp, #16]
    3658:	fa02 f303 	lsl.w	r3, r2, r3
    365c:	9a05      	ldr	r2, [sp, #20]
    365e:	4313      	orrs	r3, r2
    3660:	9305      	str	r3, [sp, #20]
    3662:	4a05      	ldr	r2, [pc, #20]	; (3678 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3664:	9b05      	ldr	r3, [sp, #20]
    3666:	60d3      	str	r3, [r2, #12]
    3668:	bf00      	nop
    366a:	b006      	add	sp, #24
    366c:	4770      	bx	lr
    366e:	bf00      	nop
    3670:	0000b960 	.word	0x0000b960
    3674:	0000b650 	.word	0x0000b650
    3678:	40048000 	.word	0x40048000

0000367c <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
    367c:	b084      	sub	sp, #16
    367e:	9001      	str	r0, [sp, #4]
    3680:	4b06      	ldr	r3, [pc, #24]	; (369c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3682:	685b      	ldr	r3, [r3, #4]
    3684:	9303      	str	r3, [sp, #12]
    3686:	9b03      	ldr	r3, [sp, #12]
    3688:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    368c:	9303      	str	r3, [sp, #12]
    368e:	4a03      	ldr	r2, [pc, #12]	; (369c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3690:	9b03      	ldr	r3, [sp, #12]
    3692:	6053      	str	r3, [r2, #4]
    3694:	bf00      	nop
    3696:	b004      	add	sp, #16
    3698:	4770      	bx	lr
    369a:	bf00      	nop
    369c:	40048000 	.word	0x40048000

000036a0 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
    36a0:	b084      	sub	sp, #16
    36a2:	9001      	str	r0, [sp, #4]
    36a4:	9b01      	ldr	r3, [sp, #4]
    36a6:	685b      	ldr	r3, [r3, #4]
    36a8:	4a0a      	ldr	r2, [pc, #40]	; (36d4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    36aa:	5cd3      	ldrb	r3, [r2, r3]
    36ac:	9303      	str	r3, [sp, #12]
    36ae:	4b0a      	ldr	r3, [pc, #40]	; (36d8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    36b0:	685b      	ldr	r3, [r3, #4]
    36b2:	9302      	str	r3, [sp, #8]
    36b4:	9b02      	ldr	r3, [sp, #8]
    36b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    36ba:	9302      	str	r3, [sp, #8]
    36bc:	9b03      	ldr	r3, [sp, #12]
    36be:	011b      	lsls	r3, r3, #4
    36c0:	9a02      	ldr	r2, [sp, #8]
    36c2:	4313      	orrs	r3, r2
    36c4:	9302      	str	r3, [sp, #8]
    36c6:	4a04      	ldr	r2, [pc, #16]	; (36d8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    36c8:	9b02      	ldr	r3, [sp, #8]
    36ca:	6053      	str	r3, [r2, #4]
    36cc:	bf00      	nop
    36ce:	b004      	add	sp, #16
    36d0:	4770      	bx	lr
    36d2:	bf00      	nop
    36d4:	0000b960 	.word	0x0000b960
    36d8:	40048000 	.word	0x40048000

000036dc <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
    36dc:	b084      	sub	sp, #16
    36de:	9001      	str	r0, [sp, #4]
    36e0:	9b01      	ldr	r3, [sp, #4]
    36e2:	681a      	ldr	r2, [r3, #0]
    36e4:	490f      	ldr	r1, [pc, #60]	; (3724 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    36e6:	4613      	mov	r3, r2
    36e8:	00db      	lsls	r3, r3, #3
    36ea:	4413      	add	r3, r2
    36ec:	440b      	add	r3, r1
    36ee:	3304      	adds	r3, #4
    36f0:	781b      	ldrb	r3, [r3, #0]
    36f2:	9303      	str	r3, [sp, #12]
    36f4:	4a0c      	ldr	r2, [pc, #48]	; (3728 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36f6:	9b03      	ldr	r3, [sp, #12]
    36f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    36fc:	490a      	ldr	r1, [pc, #40]	; (3728 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3702:	9b03      	ldr	r3, [sp, #12]
    3704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    3708:	4a07      	ldr	r2, [pc, #28]	; (3728 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    370a:	9b03      	ldr	r3, [sp, #12]
    370c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3710:	4905      	ldr	r1, [pc, #20]	; (3728 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3712:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3716:	9b03      	ldr	r3, [sp, #12]
    3718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    371c:	bf00      	nop
    371e:	b004      	add	sp, #16
    3720:	4770      	bx	lr
    3722:	bf00      	nop
    3724:	0000b650 	.word	0x0000b650
    3728:	40065000 	.word	0x40065000

0000372c <Clock_Ip_SetPccPcsSelect_TrustedCall>:
    372c:	b086      	sub	sp, #24
    372e:	9001      	str	r0, [sp, #4]
    3730:	9b01      	ldr	r3, [sp, #4]
    3732:	681a      	ldr	r2, [r3, #0]
    3734:	4912      	ldr	r1, [pc, #72]	; (3780 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3736:	4613      	mov	r3, r2
    3738:	00db      	lsls	r3, r3, #3
    373a:	4413      	add	r3, r2
    373c:	440b      	add	r3, r1
    373e:	3304      	adds	r3, #4
    3740:	781b      	ldrb	r3, [r3, #0]
    3742:	9305      	str	r3, [sp, #20]
    3744:	9b01      	ldr	r3, [sp, #4]
    3746:	685b      	ldr	r3, [r3, #4]
    3748:	4a0e      	ldr	r2, [pc, #56]	; (3784 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    374a:	5cd3      	ldrb	r3, [r2, r3]
    374c:	9304      	str	r3, [sp, #16]
    374e:	4a0e      	ldr	r2, [pc, #56]	; (3788 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3750:	9b05      	ldr	r3, [sp, #20]
    3752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3756:	9303      	str	r3, [sp, #12]
    3758:	9b03      	ldr	r3, [sp, #12]
    375a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    375e:	9303      	str	r3, [sp, #12]
    3760:	9b04      	ldr	r3, [sp, #16]
    3762:	061b      	lsls	r3, r3, #24
    3764:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3768:	9a03      	ldr	r2, [sp, #12]
    376a:	4313      	orrs	r3, r2
    376c:	9303      	str	r3, [sp, #12]
    376e:	4906      	ldr	r1, [pc, #24]	; (3788 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3770:	9b05      	ldr	r3, [sp, #20]
    3772:	9a03      	ldr	r2, [sp, #12]
    3774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    3778:	bf00      	nop
    377a:	b006      	add	sp, #24
    377c:	4770      	bx	lr
    377e:	bf00      	nop
    3780:	0000b650 	.word	0x0000b650
    3784:	0000b9e8 	.word	0x0000b9e8
    3788:	40065000 	.word	0x40065000

0000378c <Clock_Ip_ResetSimTraceSel_TrustedCall>:
    378c:	b084      	sub	sp, #16
    378e:	9001      	str	r0, [sp, #4]
    3790:	4b0b      	ldr	r3, [pc, #44]	; (37c0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3792:	7f1b      	ldrb	r3, [r3, #28]
    3794:	9303      	str	r3, [sp, #12]
    3796:	4b0b      	ldr	r3, [pc, #44]	; (37c4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3798:	685b      	ldr	r3, [r3, #4]
    379a:	9302      	str	r3, [sp, #8]
    379c:	9b02      	ldr	r3, [sp, #8]
    379e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    37a2:	9302      	str	r3, [sp, #8]
    37a4:	9b03      	ldr	r3, [sp, #12]
    37a6:	031b      	lsls	r3, r3, #12
    37a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    37ac:	9a02      	ldr	r2, [sp, #8]
    37ae:	4313      	orrs	r3, r2
    37b0:	9302      	str	r3, [sp, #8]
    37b2:	4a04      	ldr	r2, [pc, #16]	; (37c4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    37b4:	9b02      	ldr	r3, [sp, #8]
    37b6:	6053      	str	r3, [r2, #4]
    37b8:	bf00      	nop
    37ba:	b004      	add	sp, #16
    37bc:	4770      	bx	lr
    37be:	bf00      	nop
    37c0:	0000b960 	.word	0x0000b960
    37c4:	40048000 	.word	0x40048000

000037c8 <Clock_Ip_SetSimTraceSel_TrustedCall>:
    37c8:	b084      	sub	sp, #16
    37ca:	9001      	str	r0, [sp, #4]
    37cc:	9b01      	ldr	r3, [sp, #4]
    37ce:	685b      	ldr	r3, [r3, #4]
    37d0:	4a0b      	ldr	r2, [pc, #44]	; (3800 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    37d2:	5cd3      	ldrb	r3, [r2, r3]
    37d4:	9303      	str	r3, [sp, #12]
    37d6:	4b0b      	ldr	r3, [pc, #44]	; (3804 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    37d8:	685b      	ldr	r3, [r3, #4]
    37da:	9302      	str	r3, [sp, #8]
    37dc:	9b02      	ldr	r3, [sp, #8]
    37de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    37e2:	9302      	str	r3, [sp, #8]
    37e4:	9b03      	ldr	r3, [sp, #12]
    37e6:	031b      	lsls	r3, r3, #12
    37e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    37ec:	9a02      	ldr	r2, [sp, #8]
    37ee:	4313      	orrs	r3, r2
    37f0:	9302      	str	r3, [sp, #8]
    37f2:	4a04      	ldr	r2, [pc, #16]	; (3804 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    37f4:	9b02      	ldr	r3, [sp, #8]
    37f6:	6053      	str	r3, [r2, #4]
    37f8:	bf00      	nop
    37fa:	b004      	add	sp, #16
    37fc:	4770      	bx	lr
    37fe:	bf00      	nop
    3800:	0000b960 	.word	0x0000b960
    3804:	40048000 	.word	0x40048000

00003808 <DisableSafeClock>:
    3808:	b500      	push	{lr}
    380a:	b085      	sub	sp, #20
    380c:	9001      	str	r0, [sp, #4]
    380e:	2300      	movs	r3, #0
    3810:	f88d 300b 	strb.w	r3, [sp, #11]
    3814:	9b01      	ldr	r3, [sp, #4]
    3816:	2b00      	cmp	r3, #0
    3818:	d037      	beq.n	388a <DisableSafeClock+0x82>
    381a:	2300      	movs	r3, #0
    381c:	9303      	str	r3, [sp, #12]
    381e:	e02b      	b.n	3878 <DisableSafeClock+0x70>
    3820:	4b29      	ldr	r3, [pc, #164]	; (38c8 <DisableSafeClock+0xc0>)
    3822:	6819      	ldr	r1, [r3, #0]
    3824:	9a03      	ldr	r2, [sp, #12]
    3826:	4613      	mov	r3, r2
    3828:	005b      	lsls	r3, r3, #1
    382a:	4413      	add	r3, r2
    382c:	009b      	lsls	r3, r3, #2
    382e:	440b      	add	r3, r1
    3830:	3314      	adds	r3, #20
    3832:	681b      	ldr	r3, [r3, #0]
    3834:	2b05      	cmp	r3, #5
    3836:	d11c      	bne.n	3872 <DisableSafeClock+0x6a>
    3838:	2301      	movs	r3, #1
    383a:	f88d 300b 	strb.w	r3, [sp, #11]
    383e:	4b22      	ldr	r3, [pc, #136]	; (38c8 <DisableSafeClock+0xc0>)
    3840:	6819      	ldr	r1, [r3, #0]
    3842:	9a03      	ldr	r2, [sp, #12]
    3844:	4613      	mov	r3, r2
    3846:	005b      	lsls	r3, r3, #1
    3848:	4413      	add	r3, r2
    384a:	009b      	lsls	r3, r3, #2
    384c:	440b      	add	r3, r1
    384e:	3318      	adds	r3, #24
    3850:	881b      	ldrh	r3, [r3, #0]
    3852:	2b00      	cmp	r3, #0
    3854:	d118      	bne.n	3888 <DisableSafeClock+0x80>
    3856:	4b1d      	ldr	r3, [pc, #116]	; (38cc <DisableSafeClock+0xc4>)
    3858:	791b      	ldrb	r3, [r3, #4]
    385a:	4619      	mov	r1, r3
    385c:	4a1c      	ldr	r2, [pc, #112]	; (38d0 <DisableSafeClock+0xc8>)
    385e:	460b      	mov	r3, r1
    3860:	005b      	lsls	r3, r3, #1
    3862:	440b      	add	r3, r1
    3864:	009b      	lsls	r3, r3, #2
    3866:	4413      	add	r3, r2
    3868:	3308      	adds	r3, #8
    386a:	681b      	ldr	r3, [r3, #0]
    386c:	2005      	movs	r0, #5
    386e:	4798      	blx	r3
    3870:	e00a      	b.n	3888 <DisableSafeClock+0x80>
    3872:	9b03      	ldr	r3, [sp, #12]
    3874:	3301      	adds	r3, #1
    3876:	9303      	str	r3, [sp, #12]
    3878:	4b13      	ldr	r3, [pc, #76]	; (38c8 <DisableSafeClock+0xc0>)
    387a:	681b      	ldr	r3, [r3, #0]
    387c:	7a1b      	ldrb	r3, [r3, #8]
    387e:	461a      	mov	r2, r3
    3880:	9b03      	ldr	r3, [sp, #12]
    3882:	4293      	cmp	r3, r2
    3884:	d3cc      	bcc.n	3820 <DisableSafeClock+0x18>
    3886:	e000      	b.n	388a <DisableSafeClock+0x82>
    3888:	bf00      	nop
    388a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    388e:	f083 0301 	eor.w	r3, r3, #1
    3892:	b2db      	uxtb	r3, r3
    3894:	2b00      	cmp	r3, #0
    3896:	d013      	beq.n	38c0 <DisableSafeClock+0xb8>
    3898:	4b0e      	ldr	r3, [pc, #56]	; (38d4 <DisableSafeClock+0xcc>)
    389a:	781b      	ldrb	r3, [r3, #0]
    389c:	f083 0301 	eor.w	r3, r3, #1
    38a0:	b2db      	uxtb	r3, r3
    38a2:	2b00      	cmp	r3, #0
    38a4:	d00c      	beq.n	38c0 <DisableSafeClock+0xb8>
    38a6:	4b09      	ldr	r3, [pc, #36]	; (38cc <DisableSafeClock+0xc4>)
    38a8:	791b      	ldrb	r3, [r3, #4]
    38aa:	4619      	mov	r1, r3
    38ac:	4a08      	ldr	r2, [pc, #32]	; (38d0 <DisableSafeClock+0xc8>)
    38ae:	460b      	mov	r3, r1
    38b0:	005b      	lsls	r3, r3, #1
    38b2:	440b      	add	r3, r1
    38b4:	009b      	lsls	r3, r3, #2
    38b6:	4413      	add	r3, r2
    38b8:	3308      	adds	r3, #8
    38ba:	681b      	ldr	r3, [r3, #0]
    38bc:	2005      	movs	r0, #5
    38be:	4798      	blx	r3
    38c0:	bf00      	nop
    38c2:	b005      	add	sp, #20
    38c4:	f85d fb04 	ldr.w	pc, [sp], #4
    38c8:	1fff8ba8 	.word	0x1fff8ba8
    38cc:	0000b5e0 	.word	0x0000b5e0
    38d0:	0000bc10 	.word	0x0000bc10
    38d4:	1fff8b18 	.word	0x1fff8b18

000038d8 <SetFircToResetValue_TrustedCall>:
    38d8:	4b06      	ldr	r3, [pc, #24]	; (38f4 <SetFircToResetValue_TrustedCall+0x1c>)
    38da:	2200      	movs	r2, #0
    38dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    38e0:	4b04      	ldr	r3, [pc, #16]	; (38f4 <SetFircToResetValue_TrustedCall+0x1c>)
    38e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    38e6:	4a03      	ldr	r2, [pc, #12]	; (38f4 <SetFircToResetValue_TrustedCall+0x1c>)
    38e8:	f043 0301 	orr.w	r3, r3, #1
    38ec:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    38f0:	bf00      	nop
    38f2:	4770      	bx	lr
    38f4:	40064000 	.word	0x40064000

000038f8 <SetSimLpoclksRegister_TrustedCall>:
    38f8:	b084      	sub	sp, #16
    38fa:	9001      	str	r0, [sp, #4]
    38fc:	2303      	movs	r3, #3
    38fe:	9303      	str	r3, [sp, #12]
    3900:	2300      	movs	r3, #0
    3902:	9302      	str	r3, [sp, #8]
    3904:	e028      	b.n	3958 <SetSimLpoclksRegister_TrustedCall+0x60>
    3906:	9b01      	ldr	r3, [sp, #4]
    3908:	9a02      	ldr	r2, [sp, #8]
    390a:	320d      	adds	r2, #13
    390c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3910:	2b28      	cmp	r3, #40	; 0x28
    3912:	d10b      	bne.n	392c <SetSimLpoclksRegister_TrustedCall+0x34>
    3914:	9a01      	ldr	r2, [sp, #4]
    3916:	9b02      	ldr	r3, [sp, #8]
    3918:	330d      	adds	r3, #13
    391a:	00db      	lsls	r3, r3, #3
    391c:	4413      	add	r3, r2
    391e:	685b      	ldr	r3, [r3, #4]
    3920:	4a2b      	ldr	r2, [pc, #172]	; (39d0 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3922:	5cd3      	ldrb	r3, [r2, r3]
    3924:	011b      	lsls	r3, r3, #4
    3926:	9a03      	ldr	r2, [sp, #12]
    3928:	4313      	orrs	r3, r2
    392a:	9303      	str	r3, [sp, #12]
    392c:	9b01      	ldr	r3, [sp, #4]
    392e:	9a02      	ldr	r2, [sp, #8]
    3930:	320d      	adds	r2, #13
    3932:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3936:	2b29      	cmp	r3, #41	; 0x29
    3938:	d10b      	bne.n	3952 <SetSimLpoclksRegister_TrustedCall+0x5a>
    393a:	9a01      	ldr	r2, [sp, #4]
    393c:	9b02      	ldr	r3, [sp, #8]
    393e:	330d      	adds	r3, #13
    3940:	00db      	lsls	r3, r3, #3
    3942:	4413      	add	r3, r2
    3944:	685b      	ldr	r3, [r3, #4]
    3946:	4a23      	ldr	r2, [pc, #140]	; (39d4 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3948:	5cd3      	ldrb	r3, [r2, r3]
    394a:	009b      	lsls	r3, r3, #2
    394c:	9a03      	ldr	r2, [sp, #12]
    394e:	4313      	orrs	r3, r2
    3950:	9303      	str	r3, [sp, #12]
    3952:	9b02      	ldr	r3, [sp, #8]
    3954:	3301      	adds	r3, #1
    3956:	9302      	str	r3, [sp, #8]
    3958:	9b01      	ldr	r3, [sp, #4]
    395a:	7adb      	ldrb	r3, [r3, #11]
    395c:	461a      	mov	r2, r3
    395e:	9b02      	ldr	r3, [sp, #8]
    3960:	4293      	cmp	r3, r2
    3962:	d3d0      	bcc.n	3906 <SetSimLpoclksRegister_TrustedCall+0xe>
    3964:	2300      	movs	r3, #0
    3966:	9302      	str	r3, [sp, #8]
    3968:	e026      	b.n	39b8 <SetSimLpoclksRegister_TrustedCall+0xc0>
    396a:	9a01      	ldr	r2, [sp, #4]
    396c:	9b02      	ldr	r3, [sp, #8]
    396e:	334e      	adds	r3, #78	; 0x4e
    3970:	00db      	lsls	r3, r3, #3
    3972:	4413      	add	r3, r2
    3974:	685b      	ldr	r3, [r3, #4]
    3976:	2b12      	cmp	r3, #18
    3978:	d109      	bne.n	398e <SetSimLpoclksRegister_TrustedCall+0x96>
    397a:	9a01      	ldr	r2, [sp, #4]
    397c:	9b02      	ldr	r3, [sp, #8]
    397e:	334e      	adds	r3, #78	; 0x4e
    3980:	00db      	lsls	r3, r3, #3
    3982:	4413      	add	r3, r2
    3984:	891b      	ldrh	r3, [r3, #8]
    3986:	005b      	lsls	r3, r3, #1
    3988:	9a03      	ldr	r2, [sp, #12]
    398a:	4313      	orrs	r3, r2
    398c:	9303      	str	r3, [sp, #12]
    398e:	9a01      	ldr	r2, [sp, #4]
    3990:	9b02      	ldr	r3, [sp, #8]
    3992:	334e      	adds	r3, #78	; 0x4e
    3994:	00db      	lsls	r3, r3, #3
    3996:	4413      	add	r3, r2
    3998:	685b      	ldr	r3, [r3, #4]
    399a:	2b13      	cmp	r3, #19
    399c:	d109      	bne.n	39b2 <SetSimLpoclksRegister_TrustedCall+0xba>
    399e:	9a01      	ldr	r2, [sp, #4]
    39a0:	9b02      	ldr	r3, [sp, #8]
    39a2:	334e      	adds	r3, #78	; 0x4e
    39a4:	00db      	lsls	r3, r3, #3
    39a6:	4413      	add	r3, r2
    39a8:	891b      	ldrh	r3, [r3, #8]
    39aa:	461a      	mov	r2, r3
    39ac:	9b03      	ldr	r3, [sp, #12]
    39ae:	4313      	orrs	r3, r2
    39b0:	9303      	str	r3, [sp, #12]
    39b2:	9b02      	ldr	r3, [sp, #8]
    39b4:	3301      	adds	r3, #1
    39b6:	9302      	str	r3, [sp, #8]
    39b8:	9b01      	ldr	r3, [sp, #4]
    39ba:	7c1b      	ldrb	r3, [r3, #16]
    39bc:	461a      	mov	r2, r3
    39be:	9b02      	ldr	r3, [sp, #8]
    39c0:	4293      	cmp	r3, r2
    39c2:	d3d2      	bcc.n	396a <SetSimLpoclksRegister_TrustedCall+0x72>
    39c4:	4a04      	ldr	r2, [pc, #16]	; (39d8 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    39c6:	9b03      	ldr	r3, [sp, #12]
    39c8:	6113      	str	r3, [r2, #16]
    39ca:	bf00      	nop
    39cc:	b004      	add	sp, #16
    39ce:	4770      	bx	lr
    39d0:	0000b960 	.word	0x0000b960
    39d4:	0000ba18 	.word	0x0000ba18
    39d8:	40048000 	.word	0x40048000

000039dc <Clock_Ip_SpecificPlatformInitClock>:
    39dc:	b500      	push	{lr}
    39de:	b089      	sub	sp, #36	; 0x24
    39e0:	9001      	str	r0, [sp, #4]
    39e2:	2300      	movs	r3, #0
    39e4:	f88d 301f 	strb.w	r3, [sp, #31]
    39e8:	4a21      	ldr	r2, [pc, #132]	; (3a70 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    39ea:	9b01      	ldr	r3, [sp, #4]
    39ec:	6013      	str	r3, [r2, #0]
    39ee:	4b21      	ldr	r3, [pc, #132]	; (3a74 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    39f0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    39f4:	f003 0301 	and.w	r3, r3, #1
    39f8:	2b00      	cmp	r3, #0
    39fa:	d12e      	bne.n	3a5a <Clock_Ip_SpecificPlatformInitClock+0x7e>
    39fc:	4b1e      	ldr	r3, [pc, #120]	; (3a78 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    39fe:	2200      	movs	r2, #0
    3a00:	701a      	strb	r2, [r3, #0]
    3a02:	f7ff ff69 	bl	38d8 <SetFircToResetValue_TrustedCall>
    3a06:	aa03      	add	r2, sp, #12
    3a08:	a904      	add	r1, sp, #16
    3a0a:	a805      	add	r0, sp, #20
    3a0c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a10:	f7fe f8ae 	bl	1b70 <Clock_Ip_StartTimeout>
    3a14:	4b17      	ldr	r3, [pc, #92]	; (3a74 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3a16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3a1a:	0e1b      	lsrs	r3, r3, #24
    3a1c:	f003 0301 	and.w	r3, r3, #1
    3a20:	9306      	str	r3, [sp, #24]
    3a22:	9a03      	ldr	r2, [sp, #12]
    3a24:	a904      	add	r1, sp, #16
    3a26:	ab05      	add	r3, sp, #20
    3a28:	4618      	mov	r0, r3
    3a2a:	f7fe f8bb 	bl	1ba4 <Clock_Ip_TimeoutExpired>
    3a2e:	4603      	mov	r3, r0
    3a30:	f88d 301f 	strb.w	r3, [sp, #31]
    3a34:	9b06      	ldr	r3, [sp, #24]
    3a36:	2b00      	cmp	r3, #0
    3a38:	d106      	bne.n	3a48 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    3a3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a3e:	f083 0301 	eor.w	r3, r3, #1
    3a42:	b2db      	uxtb	r3, r3
    3a44:	2b00      	cmp	r3, #0
    3a46:	d1e5      	bne.n	3a14 <Clock_Ip_SpecificPlatformInitClock+0x38>
    3a48:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d007      	beq.n	3a60 <Clock_Ip_SpecificPlatformInitClock+0x84>
    3a50:	2105      	movs	r1, #5
    3a52:	2001      	movs	r0, #1
    3a54:	f7fe f87c 	bl	1b50 <Clock_Ip_ReportClockErrors>
    3a58:	e002      	b.n	3a60 <Clock_Ip_SpecificPlatformInitClock+0x84>
    3a5a:	4b07      	ldr	r3, [pc, #28]	; (3a78 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3a5c:	2201      	movs	r2, #1
    3a5e:	701a      	strb	r2, [r3, #0]
    3a60:	9801      	ldr	r0, [sp, #4]
    3a62:	f7ff ff49 	bl	38f8 <SetSimLpoclksRegister_TrustedCall>
    3a66:	bf00      	nop
    3a68:	b009      	add	sp, #36	; 0x24
    3a6a:	f85d fb04 	ldr.w	pc, [sp], #4
    3a6e:	bf00      	nop
    3a70:	1fff8ba8 	.word	0x1fff8ba8
    3a74:	40064000 	.word	0x40064000
    3a78:	1fff8b18 	.word	0x1fff8b18

00003a7c <getFircConfig>:
    3a7c:	b082      	sub	sp, #8
    3a7e:	2300      	movs	r3, #0
    3a80:	9300      	str	r3, [sp, #0]
    3a82:	4b29      	ldr	r3, [pc, #164]	; (3b28 <getFircConfig+0xac>)
    3a84:	681b      	ldr	r3, [r3, #0]
    3a86:	2b00      	cmp	r3, #0
    3a88:	d024      	beq.n	3ad4 <getFircConfig+0x58>
    3a8a:	2300      	movs	r3, #0
    3a8c:	9301      	str	r3, [sp, #4]
    3a8e:	e01a      	b.n	3ac6 <getFircConfig+0x4a>
    3a90:	4b25      	ldr	r3, [pc, #148]	; (3b28 <getFircConfig+0xac>)
    3a92:	6819      	ldr	r1, [r3, #0]
    3a94:	9a01      	ldr	r2, [sp, #4]
    3a96:	4613      	mov	r3, r2
    3a98:	005b      	lsls	r3, r3, #1
    3a9a:	4413      	add	r3, r2
    3a9c:	009b      	lsls	r3, r3, #2
    3a9e:	440b      	add	r3, r1
    3aa0:	3314      	adds	r3, #20
    3aa2:	681b      	ldr	r3, [r3, #0]
    3aa4:	2b05      	cmp	r3, #5
    3aa6:	d10b      	bne.n	3ac0 <getFircConfig+0x44>
    3aa8:	4b1f      	ldr	r3, [pc, #124]	; (3b28 <getFircConfig+0xac>)
    3aaa:	6819      	ldr	r1, [r3, #0]
    3aac:	9a01      	ldr	r2, [sp, #4]
    3aae:	4613      	mov	r3, r2
    3ab0:	005b      	lsls	r3, r3, #1
    3ab2:	4413      	add	r3, r2
    3ab4:	009b      	lsls	r3, r3, #2
    3ab6:	3310      	adds	r3, #16
    3ab8:	440b      	add	r3, r1
    3aba:	3304      	adds	r3, #4
    3abc:	9300      	str	r3, [sp, #0]
    3abe:	e009      	b.n	3ad4 <getFircConfig+0x58>
    3ac0:	9b01      	ldr	r3, [sp, #4]
    3ac2:	3301      	adds	r3, #1
    3ac4:	9301      	str	r3, [sp, #4]
    3ac6:	4b18      	ldr	r3, [pc, #96]	; (3b28 <getFircConfig+0xac>)
    3ac8:	681b      	ldr	r3, [r3, #0]
    3aca:	7a1b      	ldrb	r3, [r3, #8]
    3acc:	461a      	mov	r2, r3
    3ace:	9b01      	ldr	r3, [sp, #4]
    3ad0:	4293      	cmp	r3, r2
    3ad2:	d3dd      	bcc.n	3a90 <getFircConfig+0x14>
    3ad4:	9b00      	ldr	r3, [sp, #0]
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d121      	bne.n	3b1e <getFircConfig+0xa2>
    3ada:	4b14      	ldr	r3, [pc, #80]	; (3b2c <getFircConfig+0xb0>)
    3adc:	9300      	str	r3, [sp, #0]
    3ade:	4b13      	ldr	r3, [pc, #76]	; (3b2c <getFircConfig+0xb0>)
    3ae0:	2205      	movs	r2, #5
    3ae2:	601a      	str	r2, [r3, #0]
    3ae4:	4b12      	ldr	r3, [pc, #72]	; (3b30 <getFircConfig+0xb4>)
    3ae6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3aea:	b29b      	uxth	r3, r3
    3aec:	f003 0301 	and.w	r3, r3, #1
    3af0:	b29a      	uxth	r2, r3
    3af2:	4b0e      	ldr	r3, [pc, #56]	; (3b2c <getFircConfig+0xb0>)
    3af4:	809a      	strh	r2, [r3, #4]
    3af6:	4b0e      	ldr	r3, [pc, #56]	; (3b30 <getFircConfig+0xb4>)
    3af8:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3afc:	b2db      	uxtb	r3, r3
    3afe:	f003 0303 	and.w	r3, r3, #3
    3b02:	b2da      	uxtb	r2, r3
    3b04:	4b09      	ldr	r3, [pc, #36]	; (3b2c <getFircConfig+0xb0>)
    3b06:	71da      	strb	r2, [r3, #7]
    3b08:	4b09      	ldr	r3, [pc, #36]	; (3b30 <getFircConfig+0xb4>)
    3b0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b0e:	b2db      	uxtb	r3, r3
    3b10:	10db      	asrs	r3, r3, #3
    3b12:	b2db      	uxtb	r3, r3
    3b14:	f003 0301 	and.w	r3, r3, #1
    3b18:	b2da      	uxtb	r2, r3
    3b1a:	4b04      	ldr	r3, [pc, #16]	; (3b2c <getFircConfig+0xb0>)
    3b1c:	719a      	strb	r2, [r3, #6]
    3b1e:	9b00      	ldr	r3, [sp, #0]
    3b20:	4618      	mov	r0, r3
    3b22:	b002      	add	sp, #8
    3b24:	4770      	bx	lr
    3b26:	bf00      	nop
    3b28:	1fff8ba8 	.word	0x1fff8ba8
    3b2c:	1fff8c14 	.word	0x1fff8c14
    3b30:	40064000 	.word	0x40064000

00003b34 <getSoscConfig>:
    3b34:	b082      	sub	sp, #8
    3b36:	2300      	movs	r3, #0
    3b38:	9300      	str	r3, [sp, #0]
    3b3a:	4b20      	ldr	r3, [pc, #128]	; (3bbc <getSoscConfig+0x88>)
    3b3c:	681b      	ldr	r3, [r3, #0]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d024      	beq.n	3b8c <getSoscConfig+0x58>
    3b42:	2300      	movs	r3, #0
    3b44:	9301      	str	r3, [sp, #4]
    3b46:	e01a      	b.n	3b7e <getSoscConfig+0x4a>
    3b48:	4b1c      	ldr	r3, [pc, #112]	; (3bbc <getSoscConfig+0x88>)
    3b4a:	6819      	ldr	r1, [r3, #0]
    3b4c:	9a01      	ldr	r2, [sp, #4]
    3b4e:	4613      	mov	r3, r2
    3b50:	009b      	lsls	r3, r3, #2
    3b52:	4413      	add	r3, r2
    3b54:	009b      	lsls	r3, r3, #2
    3b56:	440b      	add	r3, r1
    3b58:	332c      	adds	r3, #44	; 0x2c
    3b5a:	681b      	ldr	r3, [r3, #0]
    3b5c:	2b08      	cmp	r3, #8
    3b5e:	d10b      	bne.n	3b78 <getSoscConfig+0x44>
    3b60:	4b16      	ldr	r3, [pc, #88]	; (3bbc <getSoscConfig+0x88>)
    3b62:	6819      	ldr	r1, [r3, #0]
    3b64:	9a01      	ldr	r2, [sp, #4]
    3b66:	4613      	mov	r3, r2
    3b68:	009b      	lsls	r3, r3, #2
    3b6a:	4413      	add	r3, r2
    3b6c:	009b      	lsls	r3, r3, #2
    3b6e:	3328      	adds	r3, #40	; 0x28
    3b70:	440b      	add	r3, r1
    3b72:	3304      	adds	r3, #4
    3b74:	9300      	str	r3, [sp, #0]
    3b76:	e009      	b.n	3b8c <getSoscConfig+0x58>
    3b78:	9b01      	ldr	r3, [sp, #4]
    3b7a:	3301      	adds	r3, #1
    3b7c:	9301      	str	r3, [sp, #4]
    3b7e:	4b0f      	ldr	r3, [pc, #60]	; (3bbc <getSoscConfig+0x88>)
    3b80:	681b      	ldr	r3, [r3, #0]
    3b82:	7a5b      	ldrb	r3, [r3, #9]
    3b84:	461a      	mov	r2, r3
    3b86:	9b01      	ldr	r3, [sp, #4]
    3b88:	4293      	cmp	r3, r2
    3b8a:	d3dd      	bcc.n	3b48 <getSoscConfig+0x14>
    3b8c:	9b00      	ldr	r3, [sp, #0]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d110      	bne.n	3bb4 <getSoscConfig+0x80>
    3b92:	4b0b      	ldr	r3, [pc, #44]	; (3bc0 <getSoscConfig+0x8c>)
    3b94:	9300      	str	r3, [sp, #0]
    3b96:	4b0a      	ldr	r3, [pc, #40]	; (3bc0 <getSoscConfig+0x8c>)
    3b98:	2208      	movs	r2, #8
    3b9a:	601a      	str	r2, [r3, #0]
    3b9c:	4b09      	ldr	r3, [pc, #36]	; (3bc4 <getSoscConfig+0x90>)
    3b9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3ba2:	b29b      	uxth	r3, r3
    3ba4:	f003 0301 	and.w	r3, r3, #1
    3ba8:	b29a      	uxth	r2, r3
    3baa:	4b05      	ldr	r3, [pc, #20]	; (3bc0 <getSoscConfig+0x8c>)
    3bac:	811a      	strh	r2, [r3, #8]
    3bae:	4b04      	ldr	r3, [pc, #16]	; (3bc0 <getSoscConfig+0x8c>)
    3bb0:	4a05      	ldr	r2, [pc, #20]	; (3bc8 <getSoscConfig+0x94>)
    3bb2:	605a      	str	r2, [r3, #4]
    3bb4:	9b00      	ldr	r3, [sp, #0]
    3bb6:	4618      	mov	r0, r3
    3bb8:	b002      	add	sp, #8
    3bba:	4770      	bx	lr
    3bbc:	1fff8ba8 	.word	0x1fff8ba8
    3bc0:	1fff8c20 	.word	0x1fff8c20
    3bc4:	40064000 	.word	0x40064000
    3bc8:	02625a00 	.word	0x02625a00

00003bcc <getSpllConfig>:
    3bcc:	b082      	sub	sp, #8
    3bce:	2300      	movs	r3, #0
    3bd0:	9300      	str	r3, [sp, #0]
    3bd2:	4b28      	ldr	r3, [pc, #160]	; (3c74 <getSpllConfig+0xa8>)
    3bd4:	681b      	ldr	r3, [r3, #0]
    3bd6:	2b00      	cmp	r3, #0
    3bd8:	d023      	beq.n	3c22 <getSpllConfig+0x56>
    3bda:	2300      	movs	r3, #0
    3bdc:	9301      	str	r3, [sp, #4]
    3bde:	e019      	b.n	3c14 <getSpllConfig+0x48>
    3be0:	4b24      	ldr	r3, [pc, #144]	; (3c74 <getSpllConfig+0xa8>)
    3be2:	6819      	ldr	r1, [r3, #0]
    3be4:	9a01      	ldr	r2, [sp, #4]
    3be6:	4613      	mov	r3, r2
    3be8:	009b      	lsls	r3, r3, #2
    3bea:	4413      	add	r3, r2
    3bec:	00db      	lsls	r3, r3, #3
    3bee:	440b      	add	r3, r1
    3bf0:	3340      	adds	r3, #64	; 0x40
    3bf2:	681b      	ldr	r3, [r3, #0]
    3bf4:	2b09      	cmp	r3, #9
    3bf6:	d10a      	bne.n	3c0e <getSpllConfig+0x42>
    3bf8:	4b1e      	ldr	r3, [pc, #120]	; (3c74 <getSpllConfig+0xa8>)
    3bfa:	6819      	ldr	r1, [r3, #0]
    3bfc:	9a01      	ldr	r2, [sp, #4]
    3bfe:	4613      	mov	r3, r2
    3c00:	009b      	lsls	r3, r3, #2
    3c02:	4413      	add	r3, r2
    3c04:	00db      	lsls	r3, r3, #3
    3c06:	3340      	adds	r3, #64	; 0x40
    3c08:	440b      	add	r3, r1
    3c0a:	9300      	str	r3, [sp, #0]
    3c0c:	e009      	b.n	3c22 <getSpllConfig+0x56>
    3c0e:	9b01      	ldr	r3, [sp, #4]
    3c10:	3301      	adds	r3, #1
    3c12:	9301      	str	r3, [sp, #4]
    3c14:	4b17      	ldr	r3, [pc, #92]	; (3c74 <getSpllConfig+0xa8>)
    3c16:	681b      	ldr	r3, [r3, #0]
    3c18:	7a9b      	ldrb	r3, [r3, #10]
    3c1a:	461a      	mov	r2, r3
    3c1c:	9b01      	ldr	r3, [sp, #4]
    3c1e:	4293      	cmp	r3, r2
    3c20:	d3de      	bcc.n	3be0 <getSpllConfig+0x14>
    3c22:	9b00      	ldr	r3, [sp, #0]
    3c24:	2b00      	cmp	r3, #0
    3c26:	d121      	bne.n	3c6c <getSpllConfig+0xa0>
    3c28:	4b13      	ldr	r3, [pc, #76]	; (3c78 <getSpllConfig+0xac>)
    3c2a:	9300      	str	r3, [sp, #0]
    3c2c:	4b12      	ldr	r3, [pc, #72]	; (3c78 <getSpllConfig+0xac>)
    3c2e:	2209      	movs	r2, #9
    3c30:	601a      	str	r2, [r3, #0]
    3c32:	4b12      	ldr	r3, [pc, #72]	; (3c7c <getSpllConfig+0xb0>)
    3c34:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3c38:	b29b      	uxth	r3, r3
    3c3a:	f003 0301 	and.w	r3, r3, #1
    3c3e:	b29a      	uxth	r2, r3
    3c40:	4b0d      	ldr	r3, [pc, #52]	; (3c78 <getSpllConfig+0xac>)
    3c42:	809a      	strh	r2, [r3, #4]
    3c44:	4b0d      	ldr	r3, [pc, #52]	; (3c7c <getSpllConfig+0xb0>)
    3c46:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c4a:	0a1b      	lsrs	r3, r3, #8
    3c4c:	b2db      	uxtb	r3, r3
    3c4e:	f003 0307 	and.w	r3, r3, #7
    3c52:	b2da      	uxtb	r2, r3
    3c54:	4b08      	ldr	r3, [pc, #32]	; (3c78 <getSpllConfig+0xac>)
    3c56:	735a      	strb	r2, [r3, #13]
    3c58:	4b08      	ldr	r3, [pc, #32]	; (3c7c <getSpllConfig+0xb0>)
    3c5a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c5e:	0c1b      	lsrs	r3, r3, #16
    3c60:	b2db      	uxtb	r3, r3
    3c62:	f003 031f 	and.w	r3, r3, #31
    3c66:	b2da      	uxtb	r2, r3
    3c68:	4b03      	ldr	r3, [pc, #12]	; (3c78 <getSpllConfig+0xac>)
    3c6a:	751a      	strb	r2, [r3, #20]
    3c6c:	9b00      	ldr	r3, [sp, #0]
    3c6e:	4618      	mov	r0, r3
    3c70:	b002      	add	sp, #8
    3c72:	4770      	bx	lr
    3c74:	1fff8ba8 	.word	0x1fff8ba8
    3c78:	1fff8c34 	.word	0x1fff8c34
    3c7c:	40064000 	.word	0x40064000

00003c80 <getSelectorConfig>:
    3c80:	b086      	sub	sp, #24
    3c82:	9001      	str	r0, [sp, #4]
    3c84:	2300      	movs	r3, #0
    3c86:	9305      	str	r3, [sp, #20]
    3c88:	9b01      	ldr	r3, [sp, #4]
    3c8a:	2b1b      	cmp	r3, #27
    3c8c:	d00f      	beq.n	3cae <getSelectorConfig+0x2e>
    3c8e:	9b01      	ldr	r3, [sp, #4]
    3c90:	2b1b      	cmp	r3, #27
    3c92:	d80f      	bhi.n	3cb4 <getSelectorConfig+0x34>
    3c94:	9b01      	ldr	r3, [sp, #4]
    3c96:	2b19      	cmp	r3, #25
    3c98:	d003      	beq.n	3ca2 <getSelectorConfig+0x22>
    3c9a:	9b01      	ldr	r3, [sp, #4]
    3c9c:	2b1a      	cmp	r3, #26
    3c9e:	d003      	beq.n	3ca8 <getSelectorConfig+0x28>
    3ca0:	e008      	b.n	3cb4 <getSelectorConfig+0x34>
    3ca2:	2300      	movs	r3, #0
    3ca4:	9304      	str	r3, [sp, #16]
    3ca6:	e008      	b.n	3cba <getSelectorConfig+0x3a>
    3ca8:	2301      	movs	r3, #1
    3caa:	9304      	str	r3, [sp, #16]
    3cac:	e005      	b.n	3cba <getSelectorConfig+0x3a>
    3cae:	2302      	movs	r3, #2
    3cb0:	9304      	str	r3, [sp, #16]
    3cb2:	e002      	b.n	3cba <getSelectorConfig+0x3a>
    3cb4:	2300      	movs	r3, #0
    3cb6:	9304      	str	r3, [sp, #16]
    3cb8:	bf00      	nop
    3cba:	4b36      	ldr	r3, [pc, #216]	; (3d94 <getSelectorConfig+0x114>)
    3cbc:	681b      	ldr	r3, [r3, #0]
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d01d      	beq.n	3cfe <getSelectorConfig+0x7e>
    3cc2:	2300      	movs	r3, #0
    3cc4:	9303      	str	r3, [sp, #12]
    3cc6:	e013      	b.n	3cf0 <getSelectorConfig+0x70>
    3cc8:	4b32      	ldr	r3, [pc, #200]	; (3d94 <getSelectorConfig+0x114>)
    3cca:	681b      	ldr	r3, [r3, #0]
    3ccc:	9a03      	ldr	r2, [sp, #12]
    3cce:	320d      	adds	r2, #13
    3cd0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3cd4:	9a01      	ldr	r2, [sp, #4]
    3cd6:	429a      	cmp	r2, r3
    3cd8:	d107      	bne.n	3cea <getSelectorConfig+0x6a>
    3cda:	4b2e      	ldr	r3, [pc, #184]	; (3d94 <getSelectorConfig+0x114>)
    3cdc:	681a      	ldr	r2, [r3, #0]
    3cde:	9b03      	ldr	r3, [sp, #12]
    3ce0:	330d      	adds	r3, #13
    3ce2:	00db      	lsls	r3, r3, #3
    3ce4:	4413      	add	r3, r2
    3ce6:	9305      	str	r3, [sp, #20]
    3ce8:	e009      	b.n	3cfe <getSelectorConfig+0x7e>
    3cea:	9b03      	ldr	r3, [sp, #12]
    3cec:	3301      	adds	r3, #1
    3cee:	9303      	str	r3, [sp, #12]
    3cf0:	4b28      	ldr	r3, [pc, #160]	; (3d94 <getSelectorConfig+0x114>)
    3cf2:	681b      	ldr	r3, [r3, #0]
    3cf4:	7adb      	ldrb	r3, [r3, #11]
    3cf6:	461a      	mov	r2, r3
    3cf8:	9b03      	ldr	r3, [sp, #12]
    3cfa:	4293      	cmp	r3, r2
    3cfc:	d3e4      	bcc.n	3cc8 <getSelectorConfig+0x48>
    3cfe:	9b05      	ldr	r3, [sp, #20]
    3d00:	2b00      	cmp	r3, #0
    3d02:	d140      	bne.n	3d86 <getSelectorConfig+0x106>
    3d04:	9b04      	ldr	r3, [sp, #16]
    3d06:	00db      	lsls	r3, r3, #3
    3d08:	4a23      	ldr	r2, [pc, #140]	; (3d98 <getSelectorConfig+0x118>)
    3d0a:	4413      	add	r3, r2
    3d0c:	9305      	str	r3, [sp, #20]
    3d0e:	4922      	ldr	r1, [pc, #136]	; (3d98 <getSelectorConfig+0x118>)
    3d10:	9b04      	ldr	r3, [sp, #16]
    3d12:	9a01      	ldr	r2, [sp, #4]
    3d14:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    3d18:	9b01      	ldr	r3, [sp, #4]
    3d1a:	2b1b      	cmp	r3, #27
    3d1c:	d025      	beq.n	3d6a <getSelectorConfig+0xea>
    3d1e:	9b01      	ldr	r3, [sp, #4]
    3d20:	2b1b      	cmp	r3, #27
    3d22:	d832      	bhi.n	3d8a <getSelectorConfig+0x10a>
    3d24:	9b01      	ldr	r3, [sp, #4]
    3d26:	2b19      	cmp	r3, #25
    3d28:	d003      	beq.n	3d32 <getSelectorConfig+0xb2>
    3d2a:	9b01      	ldr	r3, [sp, #4]
    3d2c:	2b1a      	cmp	r3, #26
    3d2e:	d00e      	beq.n	3d4e <getSelectorConfig+0xce>
    3d30:	e02b      	b.n	3d8a <getSelectorConfig+0x10a>
    3d32:	4b1a      	ldr	r3, [pc, #104]	; (3d9c <getSelectorConfig+0x11c>)
    3d34:	695b      	ldr	r3, [r3, #20]
    3d36:	0e1b      	lsrs	r3, r3, #24
    3d38:	f003 030f 	and.w	r3, r3, #15
    3d3c:	4a18      	ldr	r2, [pc, #96]	; (3da0 <getSelectorConfig+0x120>)
    3d3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d42:	4915      	ldr	r1, [pc, #84]	; (3d98 <getSelectorConfig+0x118>)
    3d44:	9b04      	ldr	r3, [sp, #16]
    3d46:	00db      	lsls	r3, r3, #3
    3d48:	440b      	add	r3, r1
    3d4a:	605a      	str	r2, [r3, #4]
    3d4c:	e01e      	b.n	3d8c <getSelectorConfig+0x10c>
    3d4e:	4b13      	ldr	r3, [pc, #76]	; (3d9c <getSelectorConfig+0x11c>)
    3d50:	699b      	ldr	r3, [r3, #24]
    3d52:	0e1b      	lsrs	r3, r3, #24
    3d54:	f003 030f 	and.w	r3, r3, #15
    3d58:	4a11      	ldr	r2, [pc, #68]	; (3da0 <getSelectorConfig+0x120>)
    3d5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d5e:	490e      	ldr	r1, [pc, #56]	; (3d98 <getSelectorConfig+0x118>)
    3d60:	9b04      	ldr	r3, [sp, #16]
    3d62:	00db      	lsls	r3, r3, #3
    3d64:	440b      	add	r3, r1
    3d66:	605a      	str	r2, [r3, #4]
    3d68:	e010      	b.n	3d8c <getSelectorConfig+0x10c>
    3d6a:	4b0c      	ldr	r3, [pc, #48]	; (3d9c <getSelectorConfig+0x11c>)
    3d6c:	69db      	ldr	r3, [r3, #28]
    3d6e:	0e1b      	lsrs	r3, r3, #24
    3d70:	f003 030f 	and.w	r3, r3, #15
    3d74:	4a0a      	ldr	r2, [pc, #40]	; (3da0 <getSelectorConfig+0x120>)
    3d76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d7a:	4907      	ldr	r1, [pc, #28]	; (3d98 <getSelectorConfig+0x118>)
    3d7c:	9b04      	ldr	r3, [sp, #16]
    3d7e:	00db      	lsls	r3, r3, #3
    3d80:	440b      	add	r3, r1
    3d82:	605a      	str	r2, [r3, #4]
    3d84:	e002      	b.n	3d8c <getSelectorConfig+0x10c>
    3d86:	bf00      	nop
    3d88:	e000      	b.n	3d8c <getSelectorConfig+0x10c>
    3d8a:	bf00      	nop
    3d8c:	9b05      	ldr	r3, [sp, #20]
    3d8e:	4618      	mov	r0, r3
    3d90:	b006      	add	sp, #24
    3d92:	4770      	bx	lr
    3d94:	1fff8ba8 	.word	0x1fff8ba8
    3d98:	1fff8c5c 	.word	0x1fff8c5c
    3d9c:	40064000 	.word	0x40064000
    3da0:	0000bce0 	.word	0x0000bce0

00003da4 <getCoreDividerConfig>:
    3da4:	b086      	sub	sp, #24
    3da6:	9001      	str	r0, [sp, #4]
    3da8:	2300      	movs	r3, #0
    3daa:	9305      	str	r3, [sp, #20]
    3dac:	2300      	movs	r3, #0
    3dae:	9304      	str	r3, [sp, #16]
    3db0:	9b01      	ldr	r3, [sp, #4]
    3db2:	2b1f      	cmp	r3, #31
    3db4:	d00f      	beq.n	3dd6 <getCoreDividerConfig+0x32>
    3db6:	9b01      	ldr	r3, [sp, #4]
    3db8:	2b1f      	cmp	r3, #31
    3dba:	d80f      	bhi.n	3ddc <getCoreDividerConfig+0x38>
    3dbc:	9b01      	ldr	r3, [sp, #4]
    3dbe:	2b1d      	cmp	r3, #29
    3dc0:	d003      	beq.n	3dca <getCoreDividerConfig+0x26>
    3dc2:	9b01      	ldr	r3, [sp, #4]
    3dc4:	2b1e      	cmp	r3, #30
    3dc6:	d003      	beq.n	3dd0 <getCoreDividerConfig+0x2c>
    3dc8:	e008      	b.n	3ddc <getCoreDividerConfig+0x38>
    3dca:	2300      	movs	r3, #0
    3dcc:	9304      	str	r3, [sp, #16]
    3dce:	e006      	b.n	3dde <getCoreDividerConfig+0x3a>
    3dd0:	2301      	movs	r3, #1
    3dd2:	9304      	str	r3, [sp, #16]
    3dd4:	e003      	b.n	3dde <getCoreDividerConfig+0x3a>
    3dd6:	2302      	movs	r3, #2
    3dd8:	9304      	str	r3, [sp, #16]
    3dda:	e000      	b.n	3dde <getCoreDividerConfig+0x3a>
    3ddc:	bf00      	nop
    3dde:	4b41      	ldr	r3, [pc, #260]	; (3ee4 <getCoreDividerConfig+0x140>)
    3de0:	681b      	ldr	r3, [r3, #0]
    3de2:	2b00      	cmp	r3, #0
    3de4:	d026      	beq.n	3e34 <getCoreDividerConfig+0x90>
    3de6:	2300      	movs	r3, #0
    3de8:	9303      	str	r3, [sp, #12]
    3dea:	e01c      	b.n	3e26 <getCoreDividerConfig+0x82>
    3dec:	4b3d      	ldr	r3, [pc, #244]	; (3ee4 <getCoreDividerConfig+0x140>)
    3dee:	6819      	ldr	r1, [r3, #0]
    3df0:	9a03      	ldr	r2, [sp, #12]
    3df2:	4613      	mov	r3, r2
    3df4:	005b      	lsls	r3, r3, #1
    3df6:	4413      	add	r3, r2
    3df8:	009b      	lsls	r3, r3, #2
    3dfa:	440b      	add	r3, r1
    3dfc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3e00:	681b      	ldr	r3, [r3, #0]
    3e02:	9a01      	ldr	r2, [sp, #4]
    3e04:	429a      	cmp	r2, r3
    3e06:	d10b      	bne.n	3e20 <getCoreDividerConfig+0x7c>
    3e08:	4b36      	ldr	r3, [pc, #216]	; (3ee4 <getCoreDividerConfig+0x140>)
    3e0a:	6819      	ldr	r1, [r3, #0]
    3e0c:	9a03      	ldr	r2, [sp, #12]
    3e0e:	4613      	mov	r3, r2
    3e10:	005b      	lsls	r3, r3, #1
    3e12:	4413      	add	r3, r2
    3e14:	009b      	lsls	r3, r3, #2
    3e16:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3e1a:	440b      	add	r3, r1
    3e1c:	9305      	str	r3, [sp, #20]
    3e1e:	e009      	b.n	3e34 <getCoreDividerConfig+0x90>
    3e20:	9b03      	ldr	r3, [sp, #12]
    3e22:	3301      	adds	r3, #1
    3e24:	9303      	str	r3, [sp, #12]
    3e26:	4b2f      	ldr	r3, [pc, #188]	; (3ee4 <getCoreDividerConfig+0x140>)
    3e28:	681b      	ldr	r3, [r3, #0]
    3e2a:	7b1b      	ldrb	r3, [r3, #12]
    3e2c:	461a      	mov	r2, r3
    3e2e:	9b03      	ldr	r3, [sp, #12]
    3e30:	4293      	cmp	r3, r2
    3e32:	d3db      	bcc.n	3dec <getCoreDividerConfig+0x48>
    3e34:	9b05      	ldr	r3, [sp, #20]
    3e36:	2b00      	cmp	r3, #0
    3e38:	d14d      	bne.n	3ed6 <getCoreDividerConfig+0x132>
    3e3a:	9a04      	ldr	r2, [sp, #16]
    3e3c:	4613      	mov	r3, r2
    3e3e:	005b      	lsls	r3, r3, #1
    3e40:	4413      	add	r3, r2
    3e42:	009b      	lsls	r3, r3, #2
    3e44:	4a28      	ldr	r2, [pc, #160]	; (3ee8 <getCoreDividerConfig+0x144>)
    3e46:	4413      	add	r3, r2
    3e48:	9305      	str	r3, [sp, #20]
    3e4a:	4927      	ldr	r1, [pc, #156]	; (3ee8 <getCoreDividerConfig+0x144>)
    3e4c:	9a04      	ldr	r2, [sp, #16]
    3e4e:	4613      	mov	r3, r2
    3e50:	005b      	lsls	r3, r3, #1
    3e52:	4413      	add	r3, r2
    3e54:	009b      	lsls	r3, r3, #2
    3e56:	440b      	add	r3, r1
    3e58:	9a01      	ldr	r2, [sp, #4]
    3e5a:	601a      	str	r2, [r3, #0]
    3e5c:	9b01      	ldr	r3, [sp, #4]
    3e5e:	2b1f      	cmp	r3, #31
    3e60:	d029      	beq.n	3eb6 <getCoreDividerConfig+0x112>
    3e62:	9b01      	ldr	r3, [sp, #4]
    3e64:	2b1f      	cmp	r3, #31
    3e66:	d838      	bhi.n	3eda <getCoreDividerConfig+0x136>
    3e68:	9b01      	ldr	r3, [sp, #4]
    3e6a:	2b1d      	cmp	r3, #29
    3e6c:	d003      	beq.n	3e76 <getCoreDividerConfig+0xd2>
    3e6e:	9b01      	ldr	r3, [sp, #4]
    3e70:	2b1e      	cmp	r3, #30
    3e72:	d010      	beq.n	3e96 <getCoreDividerConfig+0xf2>
    3e74:	e031      	b.n	3eda <getCoreDividerConfig+0x136>
    3e76:	4b1d      	ldr	r3, [pc, #116]	; (3eec <getCoreDividerConfig+0x148>)
    3e78:	695b      	ldr	r3, [r3, #20]
    3e7a:	0c1b      	lsrs	r3, r3, #16
    3e7c:	f003 030f 	and.w	r3, r3, #15
    3e80:	1c59      	adds	r1, r3, #1
    3e82:	4819      	ldr	r0, [pc, #100]	; (3ee8 <getCoreDividerConfig+0x144>)
    3e84:	9a04      	ldr	r2, [sp, #16]
    3e86:	4613      	mov	r3, r2
    3e88:	005b      	lsls	r3, r3, #1
    3e8a:	4413      	add	r3, r2
    3e8c:	009b      	lsls	r3, r3, #2
    3e8e:	4403      	add	r3, r0
    3e90:	3304      	adds	r3, #4
    3e92:	6019      	str	r1, [r3, #0]
    3e94:	e022      	b.n	3edc <getCoreDividerConfig+0x138>
    3e96:	4b15      	ldr	r3, [pc, #84]	; (3eec <getCoreDividerConfig+0x148>)
    3e98:	699b      	ldr	r3, [r3, #24]
    3e9a:	0c1b      	lsrs	r3, r3, #16
    3e9c:	f003 030f 	and.w	r3, r3, #15
    3ea0:	1c59      	adds	r1, r3, #1
    3ea2:	4811      	ldr	r0, [pc, #68]	; (3ee8 <getCoreDividerConfig+0x144>)
    3ea4:	9a04      	ldr	r2, [sp, #16]
    3ea6:	4613      	mov	r3, r2
    3ea8:	005b      	lsls	r3, r3, #1
    3eaa:	4413      	add	r3, r2
    3eac:	009b      	lsls	r3, r3, #2
    3eae:	4403      	add	r3, r0
    3eb0:	3304      	adds	r3, #4
    3eb2:	6019      	str	r1, [r3, #0]
    3eb4:	e012      	b.n	3edc <getCoreDividerConfig+0x138>
    3eb6:	4b0d      	ldr	r3, [pc, #52]	; (3eec <getCoreDividerConfig+0x148>)
    3eb8:	69db      	ldr	r3, [r3, #28]
    3eba:	0c1b      	lsrs	r3, r3, #16
    3ebc:	f003 030f 	and.w	r3, r3, #15
    3ec0:	1c59      	adds	r1, r3, #1
    3ec2:	4809      	ldr	r0, [pc, #36]	; (3ee8 <getCoreDividerConfig+0x144>)
    3ec4:	9a04      	ldr	r2, [sp, #16]
    3ec6:	4613      	mov	r3, r2
    3ec8:	005b      	lsls	r3, r3, #1
    3eca:	4413      	add	r3, r2
    3ecc:	009b      	lsls	r3, r3, #2
    3ece:	4403      	add	r3, r0
    3ed0:	3304      	adds	r3, #4
    3ed2:	6019      	str	r1, [r3, #0]
    3ed4:	e002      	b.n	3edc <getCoreDividerConfig+0x138>
    3ed6:	bf00      	nop
    3ed8:	e000      	b.n	3edc <getCoreDividerConfig+0x138>
    3eda:	bf00      	nop
    3edc:	9b05      	ldr	r3, [sp, #20]
    3ede:	4618      	mov	r0, r3
    3ee0:	b006      	add	sp, #24
    3ee2:	4770      	bx	lr
    3ee4:	1fff8ba8 	.word	0x1fff8ba8
    3ee8:	1fff8c74 	.word	0x1fff8c74
    3eec:	40064000 	.word	0x40064000

00003ef0 <getBusDividerConfig>:
    3ef0:	b086      	sub	sp, #24
    3ef2:	9001      	str	r0, [sp, #4]
    3ef4:	2300      	movs	r3, #0
    3ef6:	9305      	str	r3, [sp, #20]
    3ef8:	2300      	movs	r3, #0
    3efa:	9304      	str	r3, [sp, #16]
    3efc:	9b01      	ldr	r3, [sp, #4]
    3efe:	2b23      	cmp	r3, #35	; 0x23
    3f00:	d00f      	beq.n	3f22 <getBusDividerConfig+0x32>
    3f02:	9b01      	ldr	r3, [sp, #4]
    3f04:	2b23      	cmp	r3, #35	; 0x23
    3f06:	d80f      	bhi.n	3f28 <getBusDividerConfig+0x38>
    3f08:	9b01      	ldr	r3, [sp, #4]
    3f0a:	2b21      	cmp	r3, #33	; 0x21
    3f0c:	d003      	beq.n	3f16 <getBusDividerConfig+0x26>
    3f0e:	9b01      	ldr	r3, [sp, #4]
    3f10:	2b22      	cmp	r3, #34	; 0x22
    3f12:	d003      	beq.n	3f1c <getBusDividerConfig+0x2c>
    3f14:	e008      	b.n	3f28 <getBusDividerConfig+0x38>
    3f16:	2300      	movs	r3, #0
    3f18:	9304      	str	r3, [sp, #16]
    3f1a:	e006      	b.n	3f2a <getBusDividerConfig+0x3a>
    3f1c:	2301      	movs	r3, #1
    3f1e:	9304      	str	r3, [sp, #16]
    3f20:	e003      	b.n	3f2a <getBusDividerConfig+0x3a>
    3f22:	2302      	movs	r3, #2
    3f24:	9304      	str	r3, [sp, #16]
    3f26:	e000      	b.n	3f2a <getBusDividerConfig+0x3a>
    3f28:	bf00      	nop
    3f2a:	4b41      	ldr	r3, [pc, #260]	; (4030 <getBusDividerConfig+0x140>)
    3f2c:	681b      	ldr	r3, [r3, #0]
    3f2e:	2b00      	cmp	r3, #0
    3f30:	d026      	beq.n	3f80 <getBusDividerConfig+0x90>
    3f32:	2300      	movs	r3, #0
    3f34:	9303      	str	r3, [sp, #12]
    3f36:	e01c      	b.n	3f72 <getBusDividerConfig+0x82>
    3f38:	4b3d      	ldr	r3, [pc, #244]	; (4030 <getBusDividerConfig+0x140>)
    3f3a:	6819      	ldr	r1, [r3, #0]
    3f3c:	9a03      	ldr	r2, [sp, #12]
    3f3e:	4613      	mov	r3, r2
    3f40:	005b      	lsls	r3, r3, #1
    3f42:	4413      	add	r3, r2
    3f44:	009b      	lsls	r3, r3, #2
    3f46:	440b      	add	r3, r1
    3f48:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f4c:	681b      	ldr	r3, [r3, #0]
    3f4e:	9a01      	ldr	r2, [sp, #4]
    3f50:	429a      	cmp	r2, r3
    3f52:	d10b      	bne.n	3f6c <getBusDividerConfig+0x7c>
    3f54:	4b36      	ldr	r3, [pc, #216]	; (4030 <getBusDividerConfig+0x140>)
    3f56:	6819      	ldr	r1, [r3, #0]
    3f58:	9a03      	ldr	r2, [sp, #12]
    3f5a:	4613      	mov	r3, r2
    3f5c:	005b      	lsls	r3, r3, #1
    3f5e:	4413      	add	r3, r2
    3f60:	009b      	lsls	r3, r3, #2
    3f62:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f66:	440b      	add	r3, r1
    3f68:	9305      	str	r3, [sp, #20]
    3f6a:	e009      	b.n	3f80 <getBusDividerConfig+0x90>
    3f6c:	9b03      	ldr	r3, [sp, #12]
    3f6e:	3301      	adds	r3, #1
    3f70:	9303      	str	r3, [sp, #12]
    3f72:	4b2f      	ldr	r3, [pc, #188]	; (4030 <getBusDividerConfig+0x140>)
    3f74:	681b      	ldr	r3, [r3, #0]
    3f76:	7b1b      	ldrb	r3, [r3, #12]
    3f78:	461a      	mov	r2, r3
    3f7a:	9b03      	ldr	r3, [sp, #12]
    3f7c:	4293      	cmp	r3, r2
    3f7e:	d3db      	bcc.n	3f38 <getBusDividerConfig+0x48>
    3f80:	9b05      	ldr	r3, [sp, #20]
    3f82:	2b00      	cmp	r3, #0
    3f84:	d14d      	bne.n	4022 <getBusDividerConfig+0x132>
    3f86:	9a04      	ldr	r2, [sp, #16]
    3f88:	4613      	mov	r3, r2
    3f8a:	005b      	lsls	r3, r3, #1
    3f8c:	4413      	add	r3, r2
    3f8e:	009b      	lsls	r3, r3, #2
    3f90:	4a28      	ldr	r2, [pc, #160]	; (4034 <getBusDividerConfig+0x144>)
    3f92:	4413      	add	r3, r2
    3f94:	9305      	str	r3, [sp, #20]
    3f96:	4927      	ldr	r1, [pc, #156]	; (4034 <getBusDividerConfig+0x144>)
    3f98:	9a04      	ldr	r2, [sp, #16]
    3f9a:	4613      	mov	r3, r2
    3f9c:	005b      	lsls	r3, r3, #1
    3f9e:	4413      	add	r3, r2
    3fa0:	009b      	lsls	r3, r3, #2
    3fa2:	440b      	add	r3, r1
    3fa4:	9a01      	ldr	r2, [sp, #4]
    3fa6:	601a      	str	r2, [r3, #0]
    3fa8:	9b01      	ldr	r3, [sp, #4]
    3faa:	2b23      	cmp	r3, #35	; 0x23
    3fac:	d029      	beq.n	4002 <getBusDividerConfig+0x112>
    3fae:	9b01      	ldr	r3, [sp, #4]
    3fb0:	2b23      	cmp	r3, #35	; 0x23
    3fb2:	d838      	bhi.n	4026 <getBusDividerConfig+0x136>
    3fb4:	9b01      	ldr	r3, [sp, #4]
    3fb6:	2b21      	cmp	r3, #33	; 0x21
    3fb8:	d003      	beq.n	3fc2 <getBusDividerConfig+0xd2>
    3fba:	9b01      	ldr	r3, [sp, #4]
    3fbc:	2b22      	cmp	r3, #34	; 0x22
    3fbe:	d010      	beq.n	3fe2 <getBusDividerConfig+0xf2>
    3fc0:	e031      	b.n	4026 <getBusDividerConfig+0x136>
    3fc2:	4b1d      	ldr	r3, [pc, #116]	; (4038 <getBusDividerConfig+0x148>)
    3fc4:	695b      	ldr	r3, [r3, #20]
    3fc6:	091b      	lsrs	r3, r3, #4
    3fc8:	f003 030f 	and.w	r3, r3, #15
    3fcc:	1c59      	adds	r1, r3, #1
    3fce:	4819      	ldr	r0, [pc, #100]	; (4034 <getBusDividerConfig+0x144>)
    3fd0:	9a04      	ldr	r2, [sp, #16]
    3fd2:	4613      	mov	r3, r2
    3fd4:	005b      	lsls	r3, r3, #1
    3fd6:	4413      	add	r3, r2
    3fd8:	009b      	lsls	r3, r3, #2
    3fda:	4403      	add	r3, r0
    3fdc:	3304      	adds	r3, #4
    3fde:	6019      	str	r1, [r3, #0]
    3fe0:	e022      	b.n	4028 <getBusDividerConfig+0x138>
    3fe2:	4b15      	ldr	r3, [pc, #84]	; (4038 <getBusDividerConfig+0x148>)
    3fe4:	699b      	ldr	r3, [r3, #24]
    3fe6:	091b      	lsrs	r3, r3, #4
    3fe8:	f003 030f 	and.w	r3, r3, #15
    3fec:	1c59      	adds	r1, r3, #1
    3fee:	4811      	ldr	r0, [pc, #68]	; (4034 <getBusDividerConfig+0x144>)
    3ff0:	9a04      	ldr	r2, [sp, #16]
    3ff2:	4613      	mov	r3, r2
    3ff4:	005b      	lsls	r3, r3, #1
    3ff6:	4413      	add	r3, r2
    3ff8:	009b      	lsls	r3, r3, #2
    3ffa:	4403      	add	r3, r0
    3ffc:	3304      	adds	r3, #4
    3ffe:	6019      	str	r1, [r3, #0]
    4000:	e012      	b.n	4028 <getBusDividerConfig+0x138>
    4002:	4b0d      	ldr	r3, [pc, #52]	; (4038 <getBusDividerConfig+0x148>)
    4004:	69db      	ldr	r3, [r3, #28]
    4006:	091b      	lsrs	r3, r3, #4
    4008:	f003 030f 	and.w	r3, r3, #15
    400c:	1c59      	adds	r1, r3, #1
    400e:	4809      	ldr	r0, [pc, #36]	; (4034 <getBusDividerConfig+0x144>)
    4010:	9a04      	ldr	r2, [sp, #16]
    4012:	4613      	mov	r3, r2
    4014:	005b      	lsls	r3, r3, #1
    4016:	4413      	add	r3, r2
    4018:	009b      	lsls	r3, r3, #2
    401a:	4403      	add	r3, r0
    401c:	3304      	adds	r3, #4
    401e:	6019      	str	r1, [r3, #0]
    4020:	e002      	b.n	4028 <getBusDividerConfig+0x138>
    4022:	bf00      	nop
    4024:	e000      	b.n	4028 <getBusDividerConfig+0x138>
    4026:	bf00      	nop
    4028:	9b05      	ldr	r3, [sp, #20]
    402a:	4618      	mov	r0, r3
    402c:	b006      	add	sp, #24
    402e:	4770      	bx	lr
    4030:	1fff8ba8 	.word	0x1fff8ba8
    4034:	1fff8c98 	.word	0x1fff8c98
    4038:	40064000 	.word	0x40064000

0000403c <getSlowDividerConfig>:
    403c:	b086      	sub	sp, #24
    403e:	9001      	str	r0, [sp, #4]
    4040:	2300      	movs	r3, #0
    4042:	9305      	str	r3, [sp, #20]
    4044:	2300      	movs	r3, #0
    4046:	9304      	str	r3, [sp, #16]
    4048:	9b01      	ldr	r3, [sp, #4]
    404a:	2b27      	cmp	r3, #39	; 0x27
    404c:	d00f      	beq.n	406e <getSlowDividerConfig+0x32>
    404e:	9b01      	ldr	r3, [sp, #4]
    4050:	2b27      	cmp	r3, #39	; 0x27
    4052:	d80f      	bhi.n	4074 <getSlowDividerConfig+0x38>
    4054:	9b01      	ldr	r3, [sp, #4]
    4056:	2b25      	cmp	r3, #37	; 0x25
    4058:	d003      	beq.n	4062 <getSlowDividerConfig+0x26>
    405a:	9b01      	ldr	r3, [sp, #4]
    405c:	2b26      	cmp	r3, #38	; 0x26
    405e:	d003      	beq.n	4068 <getSlowDividerConfig+0x2c>
    4060:	e008      	b.n	4074 <getSlowDividerConfig+0x38>
    4062:	2300      	movs	r3, #0
    4064:	9304      	str	r3, [sp, #16]
    4066:	e006      	b.n	4076 <getSlowDividerConfig+0x3a>
    4068:	2301      	movs	r3, #1
    406a:	9304      	str	r3, [sp, #16]
    406c:	e003      	b.n	4076 <getSlowDividerConfig+0x3a>
    406e:	2302      	movs	r3, #2
    4070:	9304      	str	r3, [sp, #16]
    4072:	e000      	b.n	4076 <getSlowDividerConfig+0x3a>
    4074:	bf00      	nop
    4076:	4b40      	ldr	r3, [pc, #256]	; (4178 <getSlowDividerConfig+0x13c>)
    4078:	681b      	ldr	r3, [r3, #0]
    407a:	2b00      	cmp	r3, #0
    407c:	d026      	beq.n	40cc <getSlowDividerConfig+0x90>
    407e:	2300      	movs	r3, #0
    4080:	9303      	str	r3, [sp, #12]
    4082:	e01c      	b.n	40be <getSlowDividerConfig+0x82>
    4084:	4b3c      	ldr	r3, [pc, #240]	; (4178 <getSlowDividerConfig+0x13c>)
    4086:	6819      	ldr	r1, [r3, #0]
    4088:	9a03      	ldr	r2, [sp, #12]
    408a:	4613      	mov	r3, r2
    408c:	005b      	lsls	r3, r3, #1
    408e:	4413      	add	r3, r2
    4090:	009b      	lsls	r3, r3, #2
    4092:	440b      	add	r3, r1
    4094:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4098:	681b      	ldr	r3, [r3, #0]
    409a:	9a01      	ldr	r2, [sp, #4]
    409c:	429a      	cmp	r2, r3
    409e:	d10b      	bne.n	40b8 <getSlowDividerConfig+0x7c>
    40a0:	4b35      	ldr	r3, [pc, #212]	; (4178 <getSlowDividerConfig+0x13c>)
    40a2:	6819      	ldr	r1, [r3, #0]
    40a4:	9a03      	ldr	r2, [sp, #12]
    40a6:	4613      	mov	r3, r2
    40a8:	005b      	lsls	r3, r3, #1
    40aa:	4413      	add	r3, r2
    40ac:	009b      	lsls	r3, r3, #2
    40ae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    40b2:	440b      	add	r3, r1
    40b4:	9305      	str	r3, [sp, #20]
    40b6:	e009      	b.n	40cc <getSlowDividerConfig+0x90>
    40b8:	9b03      	ldr	r3, [sp, #12]
    40ba:	3301      	adds	r3, #1
    40bc:	9303      	str	r3, [sp, #12]
    40be:	4b2e      	ldr	r3, [pc, #184]	; (4178 <getSlowDividerConfig+0x13c>)
    40c0:	681b      	ldr	r3, [r3, #0]
    40c2:	7b1b      	ldrb	r3, [r3, #12]
    40c4:	461a      	mov	r2, r3
    40c6:	9b03      	ldr	r3, [sp, #12]
    40c8:	4293      	cmp	r3, r2
    40ca:	d3db      	bcc.n	4084 <getSlowDividerConfig+0x48>
    40cc:	9b05      	ldr	r3, [sp, #20]
    40ce:	2b00      	cmp	r3, #0
    40d0:	d14a      	bne.n	4168 <getSlowDividerConfig+0x12c>
    40d2:	9a04      	ldr	r2, [sp, #16]
    40d4:	4613      	mov	r3, r2
    40d6:	005b      	lsls	r3, r3, #1
    40d8:	4413      	add	r3, r2
    40da:	009b      	lsls	r3, r3, #2
    40dc:	4a27      	ldr	r2, [pc, #156]	; (417c <getSlowDividerConfig+0x140>)
    40de:	4413      	add	r3, r2
    40e0:	9305      	str	r3, [sp, #20]
    40e2:	4926      	ldr	r1, [pc, #152]	; (417c <getSlowDividerConfig+0x140>)
    40e4:	9a04      	ldr	r2, [sp, #16]
    40e6:	4613      	mov	r3, r2
    40e8:	005b      	lsls	r3, r3, #1
    40ea:	4413      	add	r3, r2
    40ec:	009b      	lsls	r3, r3, #2
    40ee:	440b      	add	r3, r1
    40f0:	9a01      	ldr	r2, [sp, #4]
    40f2:	601a      	str	r2, [r3, #0]
    40f4:	9b01      	ldr	r3, [sp, #4]
    40f6:	2b27      	cmp	r3, #39	; 0x27
    40f8:	d027      	beq.n	414a <getSlowDividerConfig+0x10e>
    40fa:	9b01      	ldr	r3, [sp, #4]
    40fc:	2b27      	cmp	r3, #39	; 0x27
    40fe:	d835      	bhi.n	416c <getSlowDividerConfig+0x130>
    4100:	9b01      	ldr	r3, [sp, #4]
    4102:	2b25      	cmp	r3, #37	; 0x25
    4104:	d003      	beq.n	410e <getSlowDividerConfig+0xd2>
    4106:	9b01      	ldr	r3, [sp, #4]
    4108:	2b26      	cmp	r3, #38	; 0x26
    410a:	d00f      	beq.n	412c <getSlowDividerConfig+0xf0>
    410c:	e02e      	b.n	416c <getSlowDividerConfig+0x130>
    410e:	4b1c      	ldr	r3, [pc, #112]	; (4180 <getSlowDividerConfig+0x144>)
    4110:	695b      	ldr	r3, [r3, #20]
    4112:	f003 030f 	and.w	r3, r3, #15
    4116:	1c59      	adds	r1, r3, #1
    4118:	4818      	ldr	r0, [pc, #96]	; (417c <getSlowDividerConfig+0x140>)
    411a:	9a04      	ldr	r2, [sp, #16]
    411c:	4613      	mov	r3, r2
    411e:	005b      	lsls	r3, r3, #1
    4120:	4413      	add	r3, r2
    4122:	009b      	lsls	r3, r3, #2
    4124:	4403      	add	r3, r0
    4126:	3304      	adds	r3, #4
    4128:	6019      	str	r1, [r3, #0]
    412a:	e020      	b.n	416e <getSlowDividerConfig+0x132>
    412c:	4b14      	ldr	r3, [pc, #80]	; (4180 <getSlowDividerConfig+0x144>)
    412e:	699b      	ldr	r3, [r3, #24]
    4130:	f003 030f 	and.w	r3, r3, #15
    4134:	1c59      	adds	r1, r3, #1
    4136:	4811      	ldr	r0, [pc, #68]	; (417c <getSlowDividerConfig+0x140>)
    4138:	9a04      	ldr	r2, [sp, #16]
    413a:	4613      	mov	r3, r2
    413c:	005b      	lsls	r3, r3, #1
    413e:	4413      	add	r3, r2
    4140:	009b      	lsls	r3, r3, #2
    4142:	4403      	add	r3, r0
    4144:	3304      	adds	r3, #4
    4146:	6019      	str	r1, [r3, #0]
    4148:	e011      	b.n	416e <getSlowDividerConfig+0x132>
    414a:	4b0d      	ldr	r3, [pc, #52]	; (4180 <getSlowDividerConfig+0x144>)
    414c:	69db      	ldr	r3, [r3, #28]
    414e:	f003 030f 	and.w	r3, r3, #15
    4152:	1c59      	adds	r1, r3, #1
    4154:	4809      	ldr	r0, [pc, #36]	; (417c <getSlowDividerConfig+0x140>)
    4156:	9a04      	ldr	r2, [sp, #16]
    4158:	4613      	mov	r3, r2
    415a:	005b      	lsls	r3, r3, #1
    415c:	4413      	add	r3, r2
    415e:	009b      	lsls	r3, r3, #2
    4160:	4403      	add	r3, r0
    4162:	3304      	adds	r3, #4
    4164:	6019      	str	r1, [r3, #0]
    4166:	e002      	b.n	416e <getSlowDividerConfig+0x132>
    4168:	bf00      	nop
    416a:	e000      	b.n	416e <getSlowDividerConfig+0x132>
    416c:	bf00      	nop
    416e:	9b05      	ldr	r3, [sp, #20]
    4170:	4618      	mov	r0, r3
    4172:	b006      	add	sp, #24
    4174:	4770      	bx	lr
    4176:	bf00      	nop
    4178:	1fff8ba8 	.word	0x1fff8ba8
    417c:	1fff8cbc 	.word	0x1fff8cbc
    4180:	40064000 	.word	0x40064000

00004184 <Clock_Ip_ClockInitializeObjects>:
    4184:	b500      	push	{lr}
    4186:	b083      	sub	sp, #12
    4188:	9001      	str	r0, [sp, #4]
    418a:	4b64      	ldr	r3, [pc, #400]	; (431c <Clock_Ip_ClockInitializeObjects+0x198>)
    418c:	781b      	ldrb	r3, [r3, #0]
    418e:	f083 0301 	eor.w	r3, r3, #1
    4192:	b2db      	uxtb	r3, r3
    4194:	2b00      	cmp	r3, #0
    4196:	d05b      	beq.n	4250 <Clock_Ip_ClockInitializeObjects+0xcc>
    4198:	4b60      	ldr	r3, [pc, #384]	; (431c <Clock_Ip_ClockInitializeObjects+0x198>)
    419a:	2201      	movs	r2, #1
    419c:	701a      	strb	r2, [r3, #0]
    419e:	4b60      	ldr	r3, [pc, #384]	; (4320 <Clock_Ip_ClockInitializeObjects+0x19c>)
    41a0:	785b      	ldrb	r3, [r3, #1]
    41a2:	461a      	mov	r2, r3
    41a4:	4613      	mov	r3, r2
    41a6:	009b      	lsls	r3, r3, #2
    41a8:	4413      	add	r3, r2
    41aa:	009b      	lsls	r3, r3, #2
    41ac:	4a5d      	ldr	r2, [pc, #372]	; (4324 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    41ae:	4413      	add	r3, r2
    41b0:	4a5d      	ldr	r2, [pc, #372]	; (4328 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    41b2:	6013      	str	r3, [r2, #0]
    41b4:	4b5d      	ldr	r3, [pc, #372]	; (432c <Clock_Ip_ClockInitializeObjects+0x1a8>)
    41b6:	785b      	ldrb	r3, [r3, #1]
    41b8:	461a      	mov	r2, r3
    41ba:	4613      	mov	r3, r2
    41bc:	009b      	lsls	r3, r3, #2
    41be:	4413      	add	r3, r2
    41c0:	009b      	lsls	r3, r3, #2
    41c2:	4a5b      	ldr	r2, [pc, #364]	; (4330 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    41c4:	4413      	add	r3, r2
    41c6:	4a5b      	ldr	r2, [pc, #364]	; (4334 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    41c8:	6013      	str	r3, [r2, #0]
    41ca:	4b5b      	ldr	r3, [pc, #364]	; (4338 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    41cc:	791b      	ldrb	r3, [r3, #4]
    41ce:	461a      	mov	r2, r3
    41d0:	4613      	mov	r3, r2
    41d2:	005b      	lsls	r3, r3, #1
    41d4:	4413      	add	r3, r2
    41d6:	009b      	lsls	r3, r3, #2
    41d8:	4a58      	ldr	r2, [pc, #352]	; (433c <Clock_Ip_ClockInitializeObjects+0x1b8>)
    41da:	4413      	add	r3, r2
    41dc:	4a58      	ldr	r2, [pc, #352]	; (4340 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    41de:	6013      	str	r3, [r2, #0]
    41e0:	4b58      	ldr	r3, [pc, #352]	; (4344 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    41e2:	795b      	ldrb	r3, [r3, #5]
    41e4:	00db      	lsls	r3, r3, #3
    41e6:	4a58      	ldr	r2, [pc, #352]	; (4348 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    41e8:	4413      	add	r3, r2
    41ea:	4a58      	ldr	r2, [pc, #352]	; (434c <Clock_Ip_ClockInitializeObjects+0x1c8>)
    41ec:	6013      	str	r3, [r2, #0]
    41ee:	4b55      	ldr	r3, [pc, #340]	; (4344 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    41f0:	79db      	ldrb	r3, [r3, #7]
    41f2:	00db      	lsls	r3, r3, #3
    41f4:	4a54      	ldr	r2, [pc, #336]	; (4348 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    41f6:	4413      	add	r3, r2
    41f8:	4a55      	ldr	r2, [pc, #340]	; (4350 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    41fa:	6013      	str	r3, [r2, #0]
    41fc:	4b55      	ldr	r3, [pc, #340]	; (4354 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    41fe:	799b      	ldrb	r3, [r3, #6]
    4200:	009b      	lsls	r3, r3, #2
    4202:	4a55      	ldr	r2, [pc, #340]	; (4358 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4204:	4413      	add	r3, r2
    4206:	4a55      	ldr	r2, [pc, #340]	; (435c <Clock_Ip_ClockInitializeObjects+0x1d8>)
    4208:	6013      	str	r3, [r2, #0]
    420a:	4b52      	ldr	r3, [pc, #328]	; (4354 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    420c:	7a1b      	ldrb	r3, [r3, #8]
    420e:	009b      	lsls	r3, r3, #2
    4210:	4a51      	ldr	r2, [pc, #324]	; (4358 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4212:	4413      	add	r3, r2
    4214:	4a52      	ldr	r2, [pc, #328]	; (4360 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    4216:	6013      	str	r3, [r2, #0]
    4218:	4b4e      	ldr	r3, [pc, #312]	; (4354 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    421a:	7a5b      	ldrb	r3, [r3, #9]
    421c:	009b      	lsls	r3, r3, #2
    421e:	4a4e      	ldr	r2, [pc, #312]	; (4358 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4220:	4413      	add	r3, r2
    4222:	4a50      	ldr	r2, [pc, #320]	; (4364 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4224:	6013      	str	r3, [r2, #0]
    4226:	4b4b      	ldr	r3, [pc, #300]	; (4354 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4228:	7adb      	ldrb	r3, [r3, #11]
    422a:	009b      	lsls	r3, r3, #2
    422c:	4a4a      	ldr	r2, [pc, #296]	; (4358 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    422e:	4413      	add	r3, r2
    4230:	4a4d      	ldr	r2, [pc, #308]	; (4368 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4232:	6013      	str	r3, [r2, #0]
    4234:	4b47      	ldr	r3, [pc, #284]	; (4354 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4236:	7b1b      	ldrb	r3, [r3, #12]
    4238:	009b      	lsls	r3, r3, #2
    423a:	4a47      	ldr	r2, [pc, #284]	; (4358 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    423c:	4413      	add	r3, r2
    423e:	4a4b      	ldr	r2, [pc, #300]	; (436c <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4240:	6013      	str	r3, [r2, #0]
    4242:	4b44      	ldr	r3, [pc, #272]	; (4354 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4244:	7b9b      	ldrb	r3, [r3, #14]
    4246:	009b      	lsls	r3, r3, #2
    4248:	4a43      	ldr	r2, [pc, #268]	; (4358 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    424a:	4413      	add	r3, r2
    424c:	4a48      	ldr	r2, [pc, #288]	; (4370 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    424e:	6013      	str	r3, [r2, #0]
    4250:	4b48      	ldr	r3, [pc, #288]	; (4374 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4252:	781b      	ldrb	r3, [r3, #0]
    4254:	2b00      	cmp	r3, #0
    4256:	d002      	beq.n	425e <Clock_Ip_ClockInitializeObjects+0xda>
    4258:	9b01      	ldr	r3, [sp, #4]
    425a:	2b00      	cmp	r3, #0
    425c:	d003      	beq.n	4266 <Clock_Ip_ClockInitializeObjects+0xe2>
    425e:	4b46      	ldr	r3, [pc, #280]	; (4378 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4260:	781b      	ldrb	r3, [r3, #0]
    4262:	2b00      	cmp	r3, #0
    4264:	d056      	beq.n	4314 <Clock_Ip_ClockInitializeObjects+0x190>
    4266:	f7ff fc09 	bl	3a7c <getFircConfig>
    426a:	4603      	mov	r3, r0
    426c:	4a43      	ldr	r2, [pc, #268]	; (437c <Clock_Ip_ClockInitializeObjects+0x1f8>)
    426e:	6013      	str	r3, [r2, #0]
    4270:	f7ff fc60 	bl	3b34 <getSoscConfig>
    4274:	4603      	mov	r3, r0
    4276:	4a42      	ldr	r2, [pc, #264]	; (4380 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4278:	6013      	str	r3, [r2, #0]
    427a:	f7ff fca7 	bl	3bcc <getSpllConfig>
    427e:	4603      	mov	r3, r0
    4280:	4a40      	ldr	r2, [pc, #256]	; (4384 <Clock_Ip_ClockInitializeObjects+0x200>)
    4282:	6013      	str	r3, [r2, #0]
    4284:	2019      	movs	r0, #25
    4286:	f7ff fcfb 	bl	3c80 <getSelectorConfig>
    428a:	4603      	mov	r3, r0
    428c:	4a3e      	ldr	r2, [pc, #248]	; (4388 <Clock_Ip_ClockInitializeObjects+0x204>)
    428e:	6013      	str	r3, [r2, #0]
    4290:	201a      	movs	r0, #26
    4292:	f7ff fcf5 	bl	3c80 <getSelectorConfig>
    4296:	4603      	mov	r3, r0
    4298:	4a3c      	ldr	r2, [pc, #240]	; (438c <Clock_Ip_ClockInitializeObjects+0x208>)
    429a:	6013      	str	r3, [r2, #0]
    429c:	201b      	movs	r0, #27
    429e:	f7ff fcef 	bl	3c80 <getSelectorConfig>
    42a2:	4603      	mov	r3, r0
    42a4:	4a3a      	ldr	r2, [pc, #232]	; (4390 <Clock_Ip_ClockInitializeObjects+0x20c>)
    42a6:	6013      	str	r3, [r2, #0]
    42a8:	201d      	movs	r0, #29
    42aa:	f7ff fd7b 	bl	3da4 <getCoreDividerConfig>
    42ae:	4603      	mov	r3, r0
    42b0:	4a38      	ldr	r2, [pc, #224]	; (4394 <Clock_Ip_ClockInitializeObjects+0x210>)
    42b2:	6013      	str	r3, [r2, #0]
    42b4:	201e      	movs	r0, #30
    42b6:	f7ff fd75 	bl	3da4 <getCoreDividerConfig>
    42ba:	4603      	mov	r3, r0
    42bc:	4a36      	ldr	r2, [pc, #216]	; (4398 <Clock_Ip_ClockInitializeObjects+0x214>)
    42be:	6013      	str	r3, [r2, #0]
    42c0:	201f      	movs	r0, #31
    42c2:	f7ff fd6f 	bl	3da4 <getCoreDividerConfig>
    42c6:	4603      	mov	r3, r0
    42c8:	4a34      	ldr	r2, [pc, #208]	; (439c <Clock_Ip_ClockInitializeObjects+0x218>)
    42ca:	6013      	str	r3, [r2, #0]
    42cc:	2021      	movs	r0, #33	; 0x21
    42ce:	f7ff fe0f 	bl	3ef0 <getBusDividerConfig>
    42d2:	4603      	mov	r3, r0
    42d4:	4a32      	ldr	r2, [pc, #200]	; (43a0 <Clock_Ip_ClockInitializeObjects+0x21c>)
    42d6:	6013      	str	r3, [r2, #0]
    42d8:	2022      	movs	r0, #34	; 0x22
    42da:	f7ff fe09 	bl	3ef0 <getBusDividerConfig>
    42de:	4603      	mov	r3, r0
    42e0:	4a30      	ldr	r2, [pc, #192]	; (43a4 <Clock_Ip_ClockInitializeObjects+0x220>)
    42e2:	6013      	str	r3, [r2, #0]
    42e4:	2023      	movs	r0, #35	; 0x23
    42e6:	f7ff fe03 	bl	3ef0 <getBusDividerConfig>
    42ea:	4603      	mov	r3, r0
    42ec:	4a2e      	ldr	r2, [pc, #184]	; (43a8 <Clock_Ip_ClockInitializeObjects+0x224>)
    42ee:	6013      	str	r3, [r2, #0]
    42f0:	2025      	movs	r0, #37	; 0x25
    42f2:	f7ff fea3 	bl	403c <getSlowDividerConfig>
    42f6:	4603      	mov	r3, r0
    42f8:	4a2c      	ldr	r2, [pc, #176]	; (43ac <Clock_Ip_ClockInitializeObjects+0x228>)
    42fa:	6013      	str	r3, [r2, #0]
    42fc:	2026      	movs	r0, #38	; 0x26
    42fe:	f7ff fe9d 	bl	403c <getSlowDividerConfig>
    4302:	4603      	mov	r3, r0
    4304:	4a2a      	ldr	r2, [pc, #168]	; (43b0 <Clock_Ip_ClockInitializeObjects+0x22c>)
    4306:	6013      	str	r3, [r2, #0]
    4308:	2027      	movs	r0, #39	; 0x27
    430a:	f7ff fe97 	bl	403c <getSlowDividerConfig>
    430e:	4603      	mov	r3, r0
    4310:	4a28      	ldr	r2, [pc, #160]	; (43b4 <Clock_Ip_ClockInitializeObjects+0x230>)
    4312:	6013      	str	r3, [r2, #0]
    4314:	bf00      	nop
    4316:	b003      	add	sp, #12
    4318:	f85d fb04 	ldr.w	pc, [sp], #4
    431c:	1fff8ce0 	.word	0x1fff8ce0
    4320:	0000b610 	.word	0x0000b610
    4324:	0000bc5c 	.word	0x0000bc5c
    4328:	1fff8bac 	.word	0x1fff8bac
    432c:	0000b5d0 	.word	0x0000b5d0
    4330:	0000bba4 	.word	0x0000bba4
    4334:	1fff8bb0 	.word	0x1fff8bb0
    4338:	0000b5e0 	.word	0x0000b5e0
    433c:	0000bc10 	.word	0x0000bc10
    4340:	1fff8bb4 	.word	0x1fff8bb4
    4344:	0000b620 	.word	0x0000b620
    4348:	0000bc88 	.word	0x0000bc88
    434c:	1fff8bb8 	.word	0x1fff8bb8
    4350:	1fff8bf4 	.word	0x1fff8bf4
    4354:	0000b5b0 	.word	0x0000b5b0
    4358:	0000bb60 	.word	0x0000bb60
    435c:	1fff8bbc 	.word	0x1fff8bbc
    4360:	1fff8bf8 	.word	0x1fff8bf8
    4364:	1fff8bc0 	.word	0x1fff8bc0
    4368:	1fff8bfc 	.word	0x1fff8bfc
    436c:	1fff8bc4 	.word	0x1fff8bc4
    4370:	1fff8c00 	.word	0x1fff8c00
    4374:	1fff8b19 	.word	0x1fff8b19
    4378:	1fff8b10 	.word	0x1fff8b10
    437c:	1fff8bc8 	.word	0x1fff8bc8
    4380:	1fff8bcc 	.word	0x1fff8bcc
    4384:	1fff8bd0 	.word	0x1fff8bd0
    4388:	1fff8bd4 	.word	0x1fff8bd4
    438c:	1fff8bd8 	.word	0x1fff8bd8
    4390:	1fff8c04 	.word	0x1fff8c04
    4394:	1fff8bdc 	.word	0x1fff8bdc
    4398:	1fff8be0 	.word	0x1fff8be0
    439c:	1fff8c08 	.word	0x1fff8c08
    43a0:	1fff8be4 	.word	0x1fff8be4
    43a4:	1fff8be8 	.word	0x1fff8be8
    43a8:	1fff8c0c 	.word	0x1fff8c0c
    43ac:	1fff8bec 	.word	0x1fff8bec
    43b0:	1fff8bf0 	.word	0x1fff8bf0
    43b4:	1fff8c10 	.word	0x1fff8c10

000043b8 <Clock_Ip_ClockPowerModeChangeNotification>:
    43b8:	b500      	push	{lr}
    43ba:	b083      	sub	sp, #12
    43bc:	9001      	str	r0, [sp, #4]
    43be:	9100      	str	r1, [sp, #0]
    43c0:	9b01      	ldr	r3, [sp, #4]
    43c2:	2b03      	cmp	r3, #3
    43c4:	f000 8090 	beq.w	44e8 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    43c8:	9b01      	ldr	r3, [sp, #4]
    43ca:	2b03      	cmp	r3, #3
    43cc:	f200 80d3 	bhi.w	4576 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    43d0:	9b01      	ldr	r3, [sp, #4]
    43d2:	2b00      	cmp	r3, #0
    43d4:	d040      	beq.n	4458 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    43d6:	9b01      	ldr	r3, [sp, #4]
    43d8:	3b01      	subs	r3, #1
    43da:	2b01      	cmp	r3, #1
    43dc:	f200 80cb 	bhi.w	4576 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    43e0:	9b00      	ldr	r3, [sp, #0]
    43e2:	2b00      	cmp	r3, #0
    43e4:	f040 80c9 	bne.w	457a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
    43e8:	4b68      	ldr	r3, [pc, #416]	; (458c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    43ea:	2200      	movs	r2, #0
    43ec:	701a      	strb	r2, [r3, #0]
    43ee:	4b68      	ldr	r3, [pc, #416]	; (4590 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    43f0:	681b      	ldr	r3, [r3, #0]
    43f2:	685b      	ldr	r3, [r3, #4]
    43f4:	4a67      	ldr	r2, [pc, #412]	; (4594 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    43f6:	6812      	ldr	r2, [r2, #0]
    43f8:	4610      	mov	r0, r2
    43fa:	4798      	blx	r3
    43fc:	4b66      	ldr	r3, [pc, #408]	; (4598 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    43fe:	681b      	ldr	r3, [r3, #0]
    4400:	681b      	ldr	r3, [r3, #0]
    4402:	4a66      	ldr	r2, [pc, #408]	; (459c <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4404:	6812      	ldr	r2, [r2, #0]
    4406:	4610      	mov	r0, r2
    4408:	4798      	blx	r3
    440a:	4b65      	ldr	r3, [pc, #404]	; (45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    440c:	681b      	ldr	r3, [r3, #0]
    440e:	681b      	ldr	r3, [r3, #0]
    4410:	4a64      	ldr	r2, [pc, #400]	; (45a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4412:	6812      	ldr	r2, [r2, #0]
    4414:	4610      	mov	r0, r2
    4416:	4798      	blx	r3
    4418:	4b63      	ldr	r3, [pc, #396]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    441a:	681b      	ldr	r3, [r3, #0]
    441c:	681b      	ldr	r3, [r3, #0]
    441e:	4a63      	ldr	r2, [pc, #396]	; (45ac <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4420:	6812      	ldr	r2, [r2, #0]
    4422:	4610      	mov	r0, r2
    4424:	4798      	blx	r3
    4426:	4b62      	ldr	r3, [pc, #392]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4428:	681b      	ldr	r3, [r3, #0]
    442a:	691b      	ldr	r3, [r3, #16]
    442c:	4a61      	ldr	r2, [pc, #388]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    442e:	6812      	ldr	r2, [r2, #0]
    4430:	6812      	ldr	r2, [r2, #0]
    4432:	4610      	mov	r0, r2
    4434:	4798      	blx	r3
    4436:	4b60      	ldr	r3, [pc, #384]	; (45b8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4438:	681b      	ldr	r3, [r3, #0]
    443a:	68db      	ldr	r3, [r3, #12]
    443c:	4a5f      	ldr	r2, [pc, #380]	; (45bc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    443e:	6812      	ldr	r2, [r2, #0]
    4440:	6812      	ldr	r2, [r2, #0]
    4442:	4610      	mov	r0, r2
    4444:	4798      	blx	r3
    4446:	4b5e      	ldr	r3, [pc, #376]	; (45c0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4448:	681b      	ldr	r3, [r3, #0]
    444a:	689b      	ldr	r3, [r3, #8]
    444c:	4a5d      	ldr	r2, [pc, #372]	; (45c4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    444e:	6812      	ldr	r2, [r2, #0]
    4450:	6812      	ldr	r2, [r2, #0]
    4452:	4610      	mov	r0, r2
    4454:	4798      	blx	r3
    4456:	e090      	b.n	457a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
    4458:	9b00      	ldr	r3, [sp, #0]
    445a:	2b02      	cmp	r3, #2
    445c:	f040 808f 	bne.w	457e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
    4460:	4b4a      	ldr	r3, [pc, #296]	; (458c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4462:	2201      	movs	r2, #1
    4464:	701a      	strb	r2, [r3, #0]
    4466:	4b56      	ldr	r3, [pc, #344]	; (45c0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4468:	681b      	ldr	r3, [r3, #0]
    446a:	685b      	ldr	r3, [r3, #4]
    446c:	4a55      	ldr	r2, [pc, #340]	; (45c4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    446e:	6812      	ldr	r2, [r2, #0]
    4470:	4610      	mov	r0, r2
    4472:	4798      	blx	r3
    4474:	4b50      	ldr	r3, [pc, #320]	; (45b8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4476:	681b      	ldr	r3, [r3, #0]
    4478:	691b      	ldr	r3, [r3, #16]
    447a:	4a50      	ldr	r2, [pc, #320]	; (45bc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    447c:	6812      	ldr	r2, [r2, #0]
    447e:	4610      	mov	r0, r2
    4480:	4798      	blx	r3
    4482:	4b4d      	ldr	r3, [pc, #308]	; (45b8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4484:	681b      	ldr	r3, [r3, #0]
    4486:	689b      	ldr	r3, [r3, #8]
    4488:	4a4c      	ldr	r2, [pc, #304]	; (45bc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    448a:	6812      	ldr	r2, [r2, #0]
    448c:	4610      	mov	r0, r2
    448e:	4798      	blx	r3
    4490:	4b47      	ldr	r3, [pc, #284]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4492:	681b      	ldr	r3, [r3, #0]
    4494:	68db      	ldr	r3, [r3, #12]
    4496:	4a47      	ldr	r2, [pc, #284]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4498:	6812      	ldr	r2, [r2, #0]
    449a:	4610      	mov	r0, r2
    449c:	4798      	blx	r3
    449e:	4b44      	ldr	r3, [pc, #272]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    44a0:	681b      	ldr	r3, [r3, #0]
    44a2:	689b      	ldr	r3, [r3, #8]
    44a4:	4a43      	ldr	r2, [pc, #268]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    44a6:	6812      	ldr	r2, [r2, #0]
    44a8:	6812      	ldr	r2, [r2, #0]
    44aa:	4610      	mov	r0, r2
    44ac:	4798      	blx	r3
    44ae:	4b38      	ldr	r3, [pc, #224]	; (4590 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    44b0:	681b      	ldr	r3, [r3, #0]
    44b2:	685b      	ldr	r3, [r3, #4]
    44b4:	4a44      	ldr	r2, [pc, #272]	; (45c8 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    44b6:	6812      	ldr	r2, [r2, #0]
    44b8:	4610      	mov	r0, r2
    44ba:	4798      	blx	r3
    44bc:	4b36      	ldr	r3, [pc, #216]	; (4598 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    44be:	681b      	ldr	r3, [r3, #0]
    44c0:	681b      	ldr	r3, [r3, #0]
    44c2:	4a42      	ldr	r2, [pc, #264]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    44c4:	6812      	ldr	r2, [r2, #0]
    44c6:	4610      	mov	r0, r2
    44c8:	4798      	blx	r3
    44ca:	4b35      	ldr	r3, [pc, #212]	; (45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    44cc:	681b      	ldr	r3, [r3, #0]
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	4a3f      	ldr	r2, [pc, #252]	; (45d0 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    44d2:	6812      	ldr	r2, [r2, #0]
    44d4:	4610      	mov	r0, r2
    44d6:	4798      	blx	r3
    44d8:	4b33      	ldr	r3, [pc, #204]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    44da:	681b      	ldr	r3, [r3, #0]
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	4a3d      	ldr	r2, [pc, #244]	; (45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    44e0:	6812      	ldr	r2, [r2, #0]
    44e2:	4610      	mov	r0, r2
    44e4:	4798      	blx	r3
    44e6:	e04a      	b.n	457e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
    44e8:	9b00      	ldr	r3, [sp, #0]
    44ea:	2b02      	cmp	r3, #2
    44ec:	d149      	bne.n	4582 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
    44ee:	4b27      	ldr	r3, [pc, #156]	; (458c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    44f0:	2201      	movs	r2, #1
    44f2:	701a      	strb	r2, [r3, #0]
    44f4:	4b32      	ldr	r3, [pc, #200]	; (45c0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    44f6:	681b      	ldr	r3, [r3, #0]
    44f8:	685b      	ldr	r3, [r3, #4]
    44fa:	4a32      	ldr	r2, [pc, #200]	; (45c4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    44fc:	6812      	ldr	r2, [r2, #0]
    44fe:	4610      	mov	r0, r2
    4500:	4798      	blx	r3
    4502:	4b2d      	ldr	r3, [pc, #180]	; (45b8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4504:	681b      	ldr	r3, [r3, #0]
    4506:	691b      	ldr	r3, [r3, #16]
    4508:	4a2c      	ldr	r2, [pc, #176]	; (45bc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    450a:	6812      	ldr	r2, [r2, #0]
    450c:	4610      	mov	r0, r2
    450e:	4798      	blx	r3
    4510:	4b29      	ldr	r3, [pc, #164]	; (45b8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4512:	681b      	ldr	r3, [r3, #0]
    4514:	689b      	ldr	r3, [r3, #8]
    4516:	4a29      	ldr	r2, [pc, #164]	; (45bc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4518:	6812      	ldr	r2, [r2, #0]
    451a:	4610      	mov	r0, r2
    451c:	4798      	blx	r3
    451e:	4b24      	ldr	r3, [pc, #144]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4520:	681b      	ldr	r3, [r3, #0]
    4522:	68db      	ldr	r3, [r3, #12]
    4524:	4a23      	ldr	r2, [pc, #140]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4526:	6812      	ldr	r2, [r2, #0]
    4528:	4610      	mov	r0, r2
    452a:	4798      	blx	r3
    452c:	4b20      	ldr	r3, [pc, #128]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    452e:	681b      	ldr	r3, [r3, #0]
    4530:	689b      	ldr	r3, [r3, #8]
    4532:	4a20      	ldr	r2, [pc, #128]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4534:	6812      	ldr	r2, [r2, #0]
    4536:	6812      	ldr	r2, [r2, #0]
    4538:	4610      	mov	r0, r2
    453a:	4798      	blx	r3
    453c:	4b26      	ldr	r3, [pc, #152]	; (45d8 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    453e:	681b      	ldr	r3, [r3, #0]
    4540:	685b      	ldr	r3, [r3, #4]
    4542:	4a26      	ldr	r2, [pc, #152]	; (45dc <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4544:	6812      	ldr	r2, [r2, #0]
    4546:	4610      	mov	r0, r2
    4548:	4798      	blx	r3
    454a:	4b25      	ldr	r3, [pc, #148]	; (45e0 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    454c:	681b      	ldr	r3, [r3, #0]
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	4a24      	ldr	r2, [pc, #144]	; (45e4 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4552:	6812      	ldr	r2, [r2, #0]
    4554:	4610      	mov	r0, r2
    4556:	4798      	blx	r3
    4558:	4b23      	ldr	r3, [pc, #140]	; (45e8 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    455a:	681b      	ldr	r3, [r3, #0]
    455c:	681b      	ldr	r3, [r3, #0]
    455e:	4a23      	ldr	r2, [pc, #140]	; (45ec <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4560:	6812      	ldr	r2, [r2, #0]
    4562:	4610      	mov	r0, r2
    4564:	4798      	blx	r3
    4566:	4b22      	ldr	r3, [pc, #136]	; (45f0 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4568:	681b      	ldr	r3, [r3, #0]
    456a:	681b      	ldr	r3, [r3, #0]
    456c:	4a21      	ldr	r2, [pc, #132]	; (45f4 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    456e:	6812      	ldr	r2, [r2, #0]
    4570:	4610      	mov	r0, r2
    4572:	4798      	blx	r3
    4574:	e005      	b.n	4582 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
    4576:	bf00      	nop
    4578:	e004      	b.n	4584 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
    457a:	bf00      	nop
    457c:	e002      	b.n	4584 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
    457e:	bf00      	nop
    4580:	e000      	b.n	4584 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
    4582:	bf00      	nop
    4584:	bf00      	nop
    4586:	b003      	add	sp, #12
    4588:	f85d fb04 	ldr.w	pc, [sp], #4
    458c:	1fff8b19 	.word	0x1fff8b19
    4590:	1fff8bb8 	.word	0x1fff8bb8
    4594:	1fff8bd8 	.word	0x1fff8bd8
    4598:	1fff8bbc 	.word	0x1fff8bbc
    459c:	1fff8be0 	.word	0x1fff8be0
    45a0:	1fff8bc0 	.word	0x1fff8bc0
    45a4:	1fff8be8 	.word	0x1fff8be8
    45a8:	1fff8bc4 	.word	0x1fff8bc4
    45ac:	1fff8bf0 	.word	0x1fff8bf0
    45b0:	1fff8bac 	.word	0x1fff8bac
    45b4:	1fff8bd0 	.word	0x1fff8bd0
    45b8:	1fff8bb0 	.word	0x1fff8bb0
    45bc:	1fff8bcc 	.word	0x1fff8bcc
    45c0:	1fff8bb4 	.word	0x1fff8bb4
    45c4:	1fff8bc8 	.word	0x1fff8bc8
    45c8:	1fff8bd4 	.word	0x1fff8bd4
    45cc:	1fff8bdc 	.word	0x1fff8bdc
    45d0:	1fff8be4 	.word	0x1fff8be4
    45d4:	1fff8bec 	.word	0x1fff8bec
    45d8:	1fff8bf4 	.word	0x1fff8bf4
    45dc:	1fff8c04 	.word	0x1fff8c04
    45e0:	1fff8bf8 	.word	0x1fff8bf8
    45e4:	1fff8c08 	.word	0x1fff8c08
    45e8:	1fff8bfc 	.word	0x1fff8bfc
    45ec:	1fff8c0c 	.word	0x1fff8c0c
    45f0:	1fff8c00 	.word	0x1fff8c00
    45f4:	1fff8c10 	.word	0x1fff8c10

000045f8 <Clock_Ip_Command>:
    45f8:	b500      	push	{lr}
    45fa:	b083      	sub	sp, #12
    45fc:	9001      	str	r0, [sp, #4]
    45fe:	9100      	str	r1, [sp, #0]
    4600:	9b00      	ldr	r3, [sp, #0]
    4602:	2b04      	cmp	r3, #4
    4604:	d010      	beq.n	4628 <Clock_Ip_Command+0x30>
    4606:	9b00      	ldr	r3, [sp, #0]
    4608:	2b04      	cmp	r3, #4
    460a:	d811      	bhi.n	4630 <Clock_Ip_Command+0x38>
    460c:	9b00      	ldr	r3, [sp, #0]
    460e:	2b01      	cmp	r3, #1
    4610:	d006      	beq.n	4620 <Clock_Ip_Command+0x28>
    4612:	9b00      	ldr	r3, [sp, #0]
    4614:	2b02      	cmp	r3, #2
    4616:	d10b      	bne.n	4630 <Clock_Ip_Command+0x38>
    4618:	9801      	ldr	r0, [sp, #4]
    461a:	f7ff fdb3 	bl	4184 <Clock_Ip_ClockInitializeObjects>
    461e:	e008      	b.n	4632 <Clock_Ip_Command+0x3a>
    4620:	9801      	ldr	r0, [sp, #4]
    4622:	f7ff f9db 	bl	39dc <Clock_Ip_SpecificPlatformInitClock>
    4626:	e004      	b.n	4632 <Clock_Ip_Command+0x3a>
    4628:	9801      	ldr	r0, [sp, #4]
    462a:	f7ff f8ed 	bl	3808 <DisableSafeClock>
    462e:	e000      	b.n	4632 <Clock_Ip_Command+0x3a>
    4630:	bf00      	nop
    4632:	bf00      	nop
    4634:	b003      	add	sp, #12
    4636:	f85d fb04 	ldr.w	pc, [sp], #4
    463a:	bf00      	nop

0000463c <Mcu_Init>:
    463c:	b500      	push	{lr}
    463e:	b085      	sub	sp, #20
    4640:	9001      	str	r0, [sp, #4]
    4642:	4a20      	ldr	r2, [pc, #128]	; (46c4 <Mcu_Init+0x88>)
    4644:	9b01      	ldr	r3, [sp, #4]
    4646:	6013      	str	r3, [r2, #0]
    4648:	2300      	movs	r3, #0
    464a:	9303      	str	r3, [sp, #12]
    464c:	e010      	b.n	4670 <Mcu_Init+0x34>
    464e:	4b1d      	ldr	r3, [pc, #116]	; (46c4 <Mcu_Init+0x88>)
    4650:	681b      	ldr	r3, [r3, #0]
    4652:	6919      	ldr	r1, [r3, #16]
    4654:	9a03      	ldr	r2, [sp, #12]
    4656:	4613      	mov	r3, r2
    4658:	005b      	lsls	r3, r3, #1
    465a:	4413      	add	r3, r2
    465c:	009b      	lsls	r3, r3, #2
    465e:	440b      	add	r3, r1
    4660:	681b      	ldr	r3, [r3, #0]
    4662:	9a03      	ldr	r2, [sp, #12]
    4664:	b2d1      	uxtb	r1, r2
    4666:	4a18      	ldr	r2, [pc, #96]	; (46c8 <Mcu_Init+0x8c>)
    4668:	54d1      	strb	r1, [r2, r3]
    466a:	9b03      	ldr	r3, [sp, #12]
    466c:	3301      	adds	r3, #1
    466e:	9303      	str	r3, [sp, #12]
    4670:	4b14      	ldr	r3, [pc, #80]	; (46c4 <Mcu_Init+0x88>)
    4672:	681b      	ldr	r3, [r3, #0]
    4674:	689b      	ldr	r3, [r3, #8]
    4676:	9a03      	ldr	r2, [sp, #12]
    4678:	429a      	cmp	r2, r3
    467a:	d3e8      	bcc.n	464e <Mcu_Init+0x12>
    467c:	2300      	movs	r3, #0
    467e:	9303      	str	r3, [sp, #12]
    4680:	e010      	b.n	46a4 <Mcu_Init+0x68>
    4682:	4b10      	ldr	r3, [pc, #64]	; (46c4 <Mcu_Init+0x88>)
    4684:	681b      	ldr	r3, [r3, #0]
    4686:	6959      	ldr	r1, [r3, #20]
    4688:	9a03      	ldr	r2, [sp, #12]
    468a:	4613      	mov	r3, r2
    468c:	01db      	lsls	r3, r3, #7
    468e:	1a9b      	subs	r3, r3, r2
    4690:	00db      	lsls	r3, r3, #3
    4692:	440b      	add	r3, r1
    4694:	681b      	ldr	r3, [r3, #0]
    4696:	9a03      	ldr	r2, [sp, #12]
    4698:	b2d1      	uxtb	r1, r2
    469a:	4a0c      	ldr	r2, [pc, #48]	; (46cc <Mcu_Init+0x90>)
    469c:	54d1      	strb	r1, [r2, r3]
    469e:	9b03      	ldr	r3, [sp, #12]
    46a0:	3301      	adds	r3, #1
    46a2:	9303      	str	r3, [sp, #12]
    46a4:	4b07      	ldr	r3, [pc, #28]	; (46c4 <Mcu_Init+0x88>)
    46a6:	681b      	ldr	r3, [r3, #0]
    46a8:	68db      	ldr	r3, [r3, #12]
    46aa:	9a03      	ldr	r2, [sp, #12]
    46ac:	429a      	cmp	r2, r3
    46ae:	d3e8      	bcc.n	4682 <Mcu_Init+0x46>
    46b0:	4b04      	ldr	r3, [pc, #16]	; (46c4 <Mcu_Init+0x88>)
    46b2:	681b      	ldr	r3, [r3, #0]
    46b4:	699b      	ldr	r3, [r3, #24]
    46b6:	4618      	mov	r0, r3
    46b8:	f000 f88a 	bl	47d0 <Mcu_Ipw_Init>
    46bc:	bf00      	nop
    46be:	b005      	add	sp, #20
    46c0:	f85d fb04 	ldr.w	pc, [sp], #4
    46c4:	1fff8cec 	.word	0x1fff8cec
    46c8:	1fff8ce8 	.word	0x1fff8ce8
    46cc:	1fff8ce4 	.word	0x1fff8ce4

000046d0 <Mcu_InitRamSection>:
    46d0:	b084      	sub	sp, #16
    46d2:	9001      	str	r0, [sp, #4]
    46d4:	2301      	movs	r3, #1
    46d6:	f88d 300f 	strb.w	r3, [sp, #15]
    46da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    46de:	4618      	mov	r0, r3
    46e0:	b004      	add	sp, #16
    46e2:	4770      	bx	lr

000046e4 <Mcu_InitClock>:
    46e4:	b500      	push	{lr}
    46e6:	b085      	sub	sp, #20
    46e8:	9001      	str	r0, [sp, #4]
    46ea:	4a0e      	ldr	r2, [pc, #56]	; (4724 <Mcu_InitClock+0x40>)
    46ec:	9b01      	ldr	r3, [sp, #4]
    46ee:	4413      	add	r3, r2
    46f0:	781b      	ldrb	r3, [r3, #0]
    46f2:	f88d 300f 	strb.w	r3, [sp, #15]
    46f6:	4b0c      	ldr	r3, [pc, #48]	; (4728 <Mcu_InitClock+0x44>)
    46f8:	681b      	ldr	r3, [r3, #0]
    46fa:	6959      	ldr	r1, [r3, #20]
    46fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4700:	4613      	mov	r3, r2
    4702:	01db      	lsls	r3, r3, #7
    4704:	1a9b      	subs	r3, r3, r2
    4706:	00db      	lsls	r3, r3, #3
    4708:	440b      	add	r3, r1
    470a:	4618      	mov	r0, r3
    470c:	f000 f86a 	bl	47e4 <Mcu_Ipw_InitClock>
    4710:	2300      	movs	r3, #0
    4712:	f88d 300e 	strb.w	r3, [sp, #14]
    4716:	f89d 300e 	ldrb.w	r3, [sp, #14]
    471a:	4618      	mov	r0, r3
    471c:	b005      	add	sp, #20
    471e:	f85d fb04 	ldr.w	pc, [sp], #4
    4722:	bf00      	nop
    4724:	1fff8ce4 	.word	0x1fff8ce4
    4728:	1fff8cec 	.word	0x1fff8cec

0000472c <Mcu_SetMode>:
    472c:	b500      	push	{lr}
    472e:	b085      	sub	sp, #20
    4730:	9001      	str	r0, [sp, #4]
    4732:	4a0d      	ldr	r2, [pc, #52]	; (4768 <Mcu_SetMode+0x3c>)
    4734:	9b01      	ldr	r3, [sp, #4]
    4736:	4413      	add	r3, r2
    4738:	781b      	ldrb	r3, [r3, #0]
    473a:	f88d 300f 	strb.w	r3, [sp, #15]
    473e:	f004 fa13 	bl	8b68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>
    4742:	4b0a      	ldr	r3, [pc, #40]	; (476c <Mcu_SetMode+0x40>)
    4744:	681b      	ldr	r3, [r3, #0]
    4746:	6919      	ldr	r1, [r3, #16]
    4748:	f89d 200f 	ldrb.w	r2, [sp, #15]
    474c:	4613      	mov	r3, r2
    474e:	005b      	lsls	r3, r3, #1
    4750:	4413      	add	r3, r2
    4752:	009b      	lsls	r3, r3, #2
    4754:	440b      	add	r3, r1
    4756:	4618      	mov	r0, r3
    4758:	f000 f84e 	bl	47f8 <Mcu_Ipw_SetMode>
    475c:	f004 fa30 	bl	8bc0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
    4760:	bf00      	nop
    4762:	b005      	add	sp, #20
    4764:	f85d fb04 	ldr.w	pc, [sp], #4
    4768:	1fff8ce8 	.word	0x1fff8ce8
    476c:	1fff8cec 	.word	0x1fff8cec

00004770 <Mcu_GetPllStatus>:
    4770:	b082      	sub	sp, #8
    4772:	2302      	movs	r3, #2
    4774:	9301      	str	r3, [sp, #4]
    4776:	9b01      	ldr	r3, [sp, #4]
    4778:	4618      	mov	r0, r3
    477a:	b002      	add	sp, #8
    477c:	4770      	bx	lr

0000477e <Mcu_GetResetReason>:
    477e:	b500      	push	{lr}
    4780:	b083      	sub	sp, #12
    4782:	f000 f843 	bl	480c <Mcu_Ipw_GetResetReason>
    4786:	9001      	str	r0, [sp, #4]
    4788:	9b01      	ldr	r3, [sp, #4]
    478a:	4618      	mov	r0, r3
    478c:	b003      	add	sp, #12
    478e:	f85d fb04 	ldr.w	pc, [sp], #4

00004792 <Mcu_GetResetRawValue>:
    4792:	b500      	push	{lr}
    4794:	b083      	sub	sp, #12
    4796:	f000 f83f 	bl	4818 <Mcu_Ipw_GetResetRawValue>
    479a:	9001      	str	r0, [sp, #4]
    479c:	9b01      	ldr	r3, [sp, #4]
    479e:	4618      	mov	r0, r3
    47a0:	b003      	add	sp, #12
    47a2:	f85d fb04 	ldr.w	pc, [sp], #4

000047a6 <Mcu_SleepOnExit>:
    47a6:	b500      	push	{lr}
    47a8:	b083      	sub	sp, #12
    47aa:	9001      	str	r0, [sp, #4]
    47ac:	9801      	ldr	r0, [sp, #4]
    47ae:	f000 f839 	bl	4824 <Mcu_Ipw_SleepOnExit>
    47b2:	bf00      	nop
    47b4:	b003      	add	sp, #12
    47b6:	f85d fb04 	ldr.w	pc, [sp], #4

000047ba <Mcu_ClkSrcFailureNotification>:
    47ba:	b082      	sub	sp, #8
    47bc:	9001      	str	r0, [sp, #4]
    47be:	4b03      	ldr	r3, [pc, #12]	; (47cc <Mcu_ClkSrcFailureNotification+0x12>)
    47c0:	681b      	ldr	r3, [r3, #0]
    47c2:	2b00      	cmp	r3, #0
    47c4:	bf00      	nop
    47c6:	b002      	add	sp, #8
    47c8:	4770      	bx	lr
    47ca:	bf00      	nop
    47cc:	1fff8cec 	.word	0x1fff8cec

000047d0 <Mcu_Ipw_Init>:
    47d0:	b500      	push	{lr}
    47d2:	b083      	sub	sp, #12
    47d4:	9001      	str	r0, [sp, #4]
    47d6:	9801      	ldr	r0, [sp, #4]
    47d8:	f000 f882 	bl	48e0 <Power_Ip_Init>
    47dc:	bf00      	nop
    47de:	b003      	add	sp, #12
    47e0:	f85d fb04 	ldr.w	pc, [sp], #4

000047e4 <Mcu_Ipw_InitClock>:
    47e4:	b500      	push	{lr}
    47e6:	b083      	sub	sp, #12
    47e8:	9001      	str	r0, [sp, #4]
    47ea:	9801      	ldr	r0, [sp, #4]
    47ec:	f7fc fc6a 	bl	10c4 <Clock_Ip_InitClock>
    47f0:	bf00      	nop
    47f2:	b003      	add	sp, #12
    47f4:	f85d fb04 	ldr.w	pc, [sp], #4

000047f8 <Mcu_Ipw_SetMode>:
    47f8:	b500      	push	{lr}
    47fa:	b083      	sub	sp, #12
    47fc:	9001      	str	r0, [sp, #4]
    47fe:	9801      	ldr	r0, [sp, #4]
    4800:	f000 f820 	bl	4844 <Power_Ip_SetMode>
    4804:	bf00      	nop
    4806:	b003      	add	sp, #12
    4808:	f85d fb04 	ldr.w	pc, [sp], #4

0000480c <Mcu_Ipw_GetResetReason>:
    480c:	b508      	push	{r3, lr}
    480e:	f000 f84f 	bl	48b0 <Power_Ip_GetResetReason>
    4812:	4603      	mov	r3, r0
    4814:	4618      	mov	r0, r3
    4816:	bd08      	pop	{r3, pc}

00004818 <Mcu_Ipw_GetResetRawValue>:
    4818:	b508      	push	{r3, lr}
    481a:	f000 f857 	bl	48cc <Power_Ip_GetResetRawValue>
    481e:	4603      	mov	r3, r0
    4820:	4618      	mov	r0, r3
    4822:	bd08      	pop	{r3, pc}

00004824 <Mcu_Ipw_SleepOnExit>:
    4824:	b500      	push	{lr}
    4826:	b083      	sub	sp, #12
    4828:	9001      	str	r0, [sp, #4]
    482a:	9b01      	ldr	r3, [sp, #4]
    482c:	2b00      	cmp	r3, #0
    482e:	d102      	bne.n	4836 <Mcu_Ipw_SleepOnExit+0x12>
    4830:	f000 f86c 	bl	490c <Power_Ip_DisableSleepOnExit>
    4834:	e001      	b.n	483a <Mcu_Ipw_SleepOnExit+0x16>
    4836:	f000 f86e 	bl	4916 <Power_Ip_EnableSleepOnExit>
    483a:	bf00      	nop
    483c:	b003      	add	sp, #12
    483e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004844 <Power_Ip_SetMode>:
    4844:	b500      	push	{lr}
    4846:	b085      	sub	sp, #20
    4848:	9001      	str	r0, [sp, #4]
    484a:	9b01      	ldr	r3, [sp, #4]
    484c:	685b      	ldr	r3, [r3, #4]
    484e:	9302      	str	r3, [sp, #8]
    4850:	9802      	ldr	r0, [sp, #8]
    4852:	f000 f9f5 	bl	4c40 <Power_Ip_SMC_ModeCheckEntry>
    4856:	4603      	mov	r3, r0
    4858:	2b00      	cmp	r3, #0
    485a:	d002      	beq.n	4862 <Power_Ip_SetMode+0x1e>
    485c:	2301      	movs	r3, #1
    485e:	9303      	str	r3, [sp, #12]
    4860:	e003      	b.n	486a <Power_Ip_SetMode+0x26>
    4862:	9801      	ldr	r0, [sp, #4]
    4864:	f000 fa1e 	bl	4ca4 <Power_Ip_SMC_ModeConfig>
    4868:	9003      	str	r0, [sp, #12]
    486a:	9b03      	ldr	r3, [sp, #12]
    486c:	2b01      	cmp	r3, #1
    486e:	d103      	bne.n	4878 <Power_Ip_SetMode+0x34>
    4870:	21ff      	movs	r1, #255	; 0xff
    4872:	2003      	movs	r0, #3
    4874:	f000 f8f4 	bl	4a60 <Power_Ip_ReportPowerErrors>
    4878:	bf00      	nop
    487a:	b005      	add	sp, #20
    487c:	f85d fb04 	ldr.w	pc, [sp], #4

00004880 <Power_Ip_ConvertIntergeToResetType>:
    4880:	b084      	sub	sp, #16
    4882:	9001      	str	r0, [sp, #4]
    4884:	230c      	movs	r3, #12
    4886:	9303      	str	r3, [sp, #12]
    4888:	4a08      	ldr	r2, [pc, #32]	; (48ac <Power_Ip_ConvertIntergeToResetType+0x2c>)
    488a:	9b01      	ldr	r3, [sp, #4]
    488c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4890:	2b0e      	cmp	r3, #14
    4892:	d805      	bhi.n	48a0 <Power_Ip_ConvertIntergeToResetType+0x20>
    4894:	4a05      	ldr	r2, [pc, #20]	; (48ac <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4896:	9b01      	ldr	r3, [sp, #4]
    4898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    489c:	9303      	str	r3, [sp, #12]
    489e:	e001      	b.n	48a4 <Power_Ip_ConvertIntergeToResetType+0x24>
    48a0:	230c      	movs	r3, #12
    48a2:	9303      	str	r3, [sp, #12]
    48a4:	9b03      	ldr	r3, [sp, #12]
    48a6:	4618      	mov	r0, r3
    48a8:	b004      	add	sp, #16
    48aa:	4770      	bx	lr
    48ac:	0000bcfc 	.word	0x0000bcfc

000048b0 <Power_Ip_GetResetReason>:
    48b0:	b500      	push	{lr}
    48b2:	b083      	sub	sp, #12
    48b4:	f000 f940 	bl	4b38 <Power_Ip_RCM_GetResetReason>
    48b8:	9001      	str	r0, [sp, #4]
    48ba:	9801      	ldr	r0, [sp, #4]
    48bc:	f7ff ffe0 	bl	4880 <Power_Ip_ConvertIntergeToResetType>
    48c0:	9000      	str	r0, [sp, #0]
    48c2:	9b00      	ldr	r3, [sp, #0]
    48c4:	4618      	mov	r0, r3
    48c6:	b003      	add	sp, #12
    48c8:	f85d fb04 	ldr.w	pc, [sp], #4

000048cc <Power_Ip_GetResetRawValue>:
    48cc:	b500      	push	{lr}
    48ce:	b083      	sub	sp, #12
    48d0:	f000 f98a 	bl	4be8 <Power_Ip_RCM_GetResetRawValue>
    48d4:	9001      	str	r0, [sp, #4]
    48d6:	9b01      	ldr	r3, [sp, #4]
    48d8:	4618      	mov	r0, r3
    48da:	b003      	add	sp, #12
    48dc:	f85d fb04 	ldr.w	pc, [sp], #4

000048e0 <Power_Ip_Init>:
    48e0:	b500      	push	{lr}
    48e2:	b083      	sub	sp, #12
    48e4:	9001      	str	r0, [sp, #4]
    48e6:	9b01      	ldr	r3, [sp, #4]
    48e8:	681b      	ldr	r3, [r3, #0]
    48ea:	4618      	mov	r0, r3
    48ec:	f000 f90e 	bl	4b0c <Power_Ip_RCM_ResetInit>
    48f0:	9b01      	ldr	r3, [sp, #4]
    48f2:	685b      	ldr	r3, [r3, #4]
    48f4:	4618      	mov	r0, r3
    48f6:	f000 f86d 	bl	49d4 <Power_Ip_PMC_PowerInit>
    48fa:	9b01      	ldr	r3, [sp, #4]
    48fc:	689b      	ldr	r3, [r3, #8]
    48fe:	4618      	mov	r0, r3
    4900:	f000 f990 	bl	4c24 <Power_Ip_SMC_AllowedModesConfig>
    4904:	bf00      	nop
    4906:	b003      	add	sp, #12
    4908:	f85d fb04 	ldr.w	pc, [sp], #4

0000490c <Power_Ip_DisableSleepOnExit>:
    490c:	b508      	push	{r3, lr}
    490e:	f000 f811 	bl	4934 <Power_Ip_CM4_DisableSleepOnExit>
    4912:	bf00      	nop
    4914:	bd08      	pop	{r3, pc}

00004916 <Power_Ip_EnableSleepOnExit>:
    4916:	b508      	push	{r3, lr}
    4918:	f000 f820 	bl	495c <Power_Ip_CM4_EnableSleepOnExit>
    491c:	bf00      	nop
    491e:	bd08      	pop	{r3, pc}

00004920 <Power_Ip_InstallNotificationsCallback>:
    4920:	b082      	sub	sp, #8
    4922:	9001      	str	r0, [sp, #4]
    4924:	4a02      	ldr	r2, [pc, #8]	; (4930 <Power_Ip_InstallNotificationsCallback+0x10>)
    4926:	9b01      	ldr	r3, [sp, #4]
    4928:	6013      	str	r3, [r2, #0]
    492a:	bf00      	nop
    492c:	b002      	add	sp, #8
    492e:	4770      	bx	lr
    4930:	1fff8b1c 	.word	0x1fff8b1c

00004934 <Power_Ip_CM4_DisableSleepOnExit>:
    4934:	b082      	sub	sp, #8
    4936:	2300      	movs	r3, #0
    4938:	9301      	str	r3, [sp, #4]
    493a:	4b07      	ldr	r3, [pc, #28]	; (4958 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    493c:	681b      	ldr	r3, [r3, #0]
    493e:	685b      	ldr	r3, [r3, #4]
    4940:	9301      	str	r3, [sp, #4]
    4942:	9b01      	ldr	r3, [sp, #4]
    4944:	f023 0302 	bic.w	r3, r3, #2
    4948:	9301      	str	r3, [sp, #4]
    494a:	4b03      	ldr	r3, [pc, #12]	; (4958 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    494c:	681b      	ldr	r3, [r3, #0]
    494e:	9a01      	ldr	r2, [sp, #4]
    4950:	605a      	str	r2, [r3, #4]
    4952:	bf00      	nop
    4954:	b002      	add	sp, #8
    4956:	4770      	bx	lr
    4958:	1fff8b20 	.word	0x1fff8b20

0000495c <Power_Ip_CM4_EnableSleepOnExit>:
    495c:	b082      	sub	sp, #8
    495e:	2300      	movs	r3, #0
    4960:	9301      	str	r3, [sp, #4]
    4962:	4b07      	ldr	r3, [pc, #28]	; (4980 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4964:	681b      	ldr	r3, [r3, #0]
    4966:	685b      	ldr	r3, [r3, #4]
    4968:	9301      	str	r3, [sp, #4]
    496a:	9b01      	ldr	r3, [sp, #4]
    496c:	f043 0302 	orr.w	r3, r3, #2
    4970:	9301      	str	r3, [sp, #4]
    4972:	4b03      	ldr	r3, [pc, #12]	; (4980 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4974:	681b      	ldr	r3, [r3, #0]
    4976:	9a01      	ldr	r2, [sp, #4]
    4978:	605a      	str	r2, [r3, #4]
    497a:	bf00      	nop
    497c:	b002      	add	sp, #8
    497e:	4770      	bx	lr
    4980:	1fff8b20 	.word	0x1fff8b20

00004984 <Power_Ip_CM4_EnableDeepSleep>:
    4984:	b082      	sub	sp, #8
    4986:	2300      	movs	r3, #0
    4988:	9301      	str	r3, [sp, #4]
    498a:	4b07      	ldr	r3, [pc, #28]	; (49a8 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    498c:	681b      	ldr	r3, [r3, #0]
    498e:	685b      	ldr	r3, [r3, #4]
    4990:	9301      	str	r3, [sp, #4]
    4992:	9b01      	ldr	r3, [sp, #4]
    4994:	f043 0304 	orr.w	r3, r3, #4
    4998:	9301      	str	r3, [sp, #4]
    499a:	4b03      	ldr	r3, [pc, #12]	; (49a8 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    499c:	681b      	ldr	r3, [r3, #0]
    499e:	9a01      	ldr	r2, [sp, #4]
    49a0:	605a      	str	r2, [r3, #4]
    49a2:	bf00      	nop
    49a4:	b002      	add	sp, #8
    49a6:	4770      	bx	lr
    49a8:	1fff8b20 	.word	0x1fff8b20

000049ac <Power_Ip_CM4_DisableDeepSleep>:
    49ac:	b082      	sub	sp, #8
    49ae:	2300      	movs	r3, #0
    49b0:	9301      	str	r3, [sp, #4]
    49b2:	4b07      	ldr	r3, [pc, #28]	; (49d0 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    49b4:	681b      	ldr	r3, [r3, #0]
    49b6:	685b      	ldr	r3, [r3, #4]
    49b8:	9301      	str	r3, [sp, #4]
    49ba:	9b01      	ldr	r3, [sp, #4]
    49bc:	f023 0304 	bic.w	r3, r3, #4
    49c0:	9301      	str	r3, [sp, #4]
    49c2:	4b03      	ldr	r3, [pc, #12]	; (49d0 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    49c4:	681b      	ldr	r3, [r3, #0]
    49c6:	9a01      	ldr	r2, [sp, #4]
    49c8:	605a      	str	r2, [r3, #4]
    49ca:	bf00      	nop
    49cc:	b002      	add	sp, #8
    49ce:	4770      	bx	lr
    49d0:	1fff8b20 	.word	0x1fff8b20

000049d4 <Power_Ip_PMC_PowerInit>:
    49d4:	b084      	sub	sp, #16
    49d6:	9001      	str	r0, [sp, #4]
    49d8:	4b20      	ldr	r3, [pc, #128]	; (4a5c <Power_Ip_PMC_PowerInit+0x88>)
    49da:	781b      	ldrb	r3, [r3, #0]
    49dc:	f88d 300f 	strb.w	r3, [sp, #15]
    49e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    49e4:	f003 030f 	and.w	r3, r3, #15
    49e8:	f88d 300f 	strb.w	r3, [sp, #15]
    49ec:	9b01      	ldr	r3, [sp, #4]
    49ee:	781a      	ldrb	r2, [r3, #0]
    49f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    49f4:	4313      	orrs	r3, r2
    49f6:	f88d 300f 	strb.w	r3, [sp, #15]
    49fa:	4a18      	ldr	r2, [pc, #96]	; (4a5c <Power_Ip_PMC_PowerInit+0x88>)
    49fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a00:	7013      	strb	r3, [r2, #0]
    4a02:	4b16      	ldr	r3, [pc, #88]	; (4a5c <Power_Ip_PMC_PowerInit+0x88>)
    4a04:	785b      	ldrb	r3, [r3, #1]
    4a06:	f88d 300f 	strb.w	r3, [sp, #15]
    4a0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a0e:	f003 031f 	and.w	r3, r3, #31
    4a12:	f88d 300f 	strb.w	r3, [sp, #15]
    4a16:	9b01      	ldr	r3, [sp, #4]
    4a18:	785a      	ldrb	r2, [r3, #1]
    4a1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a1e:	4313      	orrs	r3, r2
    4a20:	f88d 300f 	strb.w	r3, [sp, #15]
    4a24:	4a0d      	ldr	r2, [pc, #52]	; (4a5c <Power_Ip_PMC_PowerInit+0x88>)
    4a26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a2a:	7053      	strb	r3, [r2, #1]
    4a2c:	4b0b      	ldr	r3, [pc, #44]	; (4a5c <Power_Ip_PMC_PowerInit+0x88>)
    4a2e:	789b      	ldrb	r3, [r3, #2]
    4a30:	f88d 300f 	strb.w	r3, [sp, #15]
    4a34:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a38:	f003 0338 	and.w	r3, r3, #56	; 0x38
    4a3c:	f88d 300f 	strb.w	r3, [sp, #15]
    4a40:	9b01      	ldr	r3, [sp, #4]
    4a42:	789a      	ldrb	r2, [r3, #2]
    4a44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a48:	4313      	orrs	r3, r2
    4a4a:	f88d 300f 	strb.w	r3, [sp, #15]
    4a4e:	4a03      	ldr	r2, [pc, #12]	; (4a5c <Power_Ip_PMC_PowerInit+0x88>)
    4a50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a54:	7093      	strb	r3, [r2, #2]
    4a56:	bf00      	nop
    4a58:	b004      	add	sp, #16
    4a5a:	4770      	bx	lr
    4a5c:	4007d000 	.word	0x4007d000

00004a60 <Power_Ip_ReportPowerErrors>:
    4a60:	b500      	push	{lr}
    4a62:	b083      	sub	sp, #12
    4a64:	9001      	str	r0, [sp, #4]
    4a66:	460b      	mov	r3, r1
    4a68:	f88d 3003 	strb.w	r3, [sp, #3]
    4a6c:	4b05      	ldr	r3, [pc, #20]	; (4a84 <Power_Ip_ReportPowerErrors+0x24>)
    4a6e:	681b      	ldr	r3, [r3, #0]
    4a70:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4a74:	4611      	mov	r1, r2
    4a76:	9801      	ldr	r0, [sp, #4]
    4a78:	4798      	blx	r3
    4a7a:	bf00      	nop
    4a7c:	b003      	add	sp, #12
    4a7e:	f85d fb04 	ldr.w	pc, [sp], #4
    4a82:	bf00      	nop
    4a84:	1fff8b1c 	.word	0x1fff8b1c

00004a88 <Power_Ip_ReportPowerErrorsEmptyCallback>:
    4a88:	b082      	sub	sp, #8
    4a8a:	9001      	str	r0, [sp, #4]
    4a8c:	460b      	mov	r3, r1
    4a8e:	f88d 3003 	strb.w	r3, [sp, #3]
    4a92:	bf00      	nop
    4a94:	b002      	add	sp, #8
    4a96:	4770      	bx	lr

00004a98 <Power_Ip_StartTimeout>:
    4a98:	b500      	push	{lr}
    4a9a:	b085      	sub	sp, #20
    4a9c:	9003      	str	r0, [sp, #12]
    4a9e:	9102      	str	r1, [sp, #8]
    4aa0:	9201      	str	r2, [sp, #4]
    4aa2:	9300      	str	r3, [sp, #0]
    4aa4:	2000      	movs	r0, #0
    4aa6:	f7fc f83c 	bl	b22 <OsIf_GetCounter>
    4aaa:	4602      	mov	r2, r0
    4aac:	9b03      	ldr	r3, [sp, #12]
    4aae:	601a      	str	r2, [r3, #0]
    4ab0:	9b02      	ldr	r3, [sp, #8]
    4ab2:	2200      	movs	r2, #0
    4ab4:	601a      	str	r2, [r3, #0]
    4ab6:	2100      	movs	r1, #0
    4ab8:	9800      	ldr	r0, [sp, #0]
    4aba:	f7fc f87e 	bl	bba <OsIf_MicrosToTicks>
    4abe:	4602      	mov	r2, r0
    4ac0:	9b01      	ldr	r3, [sp, #4]
    4ac2:	601a      	str	r2, [r3, #0]
    4ac4:	bf00      	nop
    4ac6:	b005      	add	sp, #20
    4ac8:	f85d fb04 	ldr.w	pc, [sp], #4

00004acc <Power_Ip_TimeoutExpired>:
    4acc:	b500      	push	{lr}
    4ace:	b087      	sub	sp, #28
    4ad0:	9003      	str	r0, [sp, #12]
    4ad2:	9102      	str	r1, [sp, #8]
    4ad4:	9201      	str	r2, [sp, #4]
    4ad6:	2300      	movs	r3, #0
    4ad8:	f88d 3017 	strb.w	r3, [sp, #23]
    4adc:	2100      	movs	r1, #0
    4ade:	9803      	ldr	r0, [sp, #12]
    4ae0:	f7fc f838 	bl	b54 <OsIf_GetElapsed>
    4ae4:	4602      	mov	r2, r0
    4ae6:	9b02      	ldr	r3, [sp, #8]
    4ae8:	681b      	ldr	r3, [r3, #0]
    4aea:	441a      	add	r2, r3
    4aec:	9b02      	ldr	r3, [sp, #8]
    4aee:	601a      	str	r2, [r3, #0]
    4af0:	9b02      	ldr	r3, [sp, #8]
    4af2:	681b      	ldr	r3, [r3, #0]
    4af4:	9a01      	ldr	r2, [sp, #4]
    4af6:	429a      	cmp	r2, r3
    4af8:	d802      	bhi.n	4b00 <Power_Ip_TimeoutExpired+0x34>
    4afa:	2301      	movs	r3, #1
    4afc:	f88d 3017 	strb.w	r3, [sp, #23]
    4b00:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4b04:	4618      	mov	r0, r3
    4b06:	b007      	add	sp, #28
    4b08:	f85d fb04 	ldr.w	pc, [sp], #4

00004b0c <Power_Ip_RCM_ResetInit>:
    4b0c:	b082      	sub	sp, #8
    4b0e:	9001      	str	r0, [sp, #4]
    4b10:	9b01      	ldr	r3, [sp, #4]
    4b12:	681a      	ldr	r2, [r3, #0]
    4b14:	4907      	ldr	r1, [pc, #28]	; (4b34 <Power_Ip_RCM_ResetInit+0x28>)
    4b16:	f641 7307 	movw	r3, #7943	; 0x1f07
    4b1a:	4013      	ands	r3, r2
    4b1c:	60cb      	str	r3, [r1, #12]
    4b1e:	9b01      	ldr	r3, [sp, #4]
    4b20:	685a      	ldr	r2, [r3, #4]
    4b22:	4904      	ldr	r1, [pc, #16]	; (4b34 <Power_Ip_RCM_ResetInit+0x28>)
    4b24:	f642 73ff 	movw	r3, #12287	; 0x2fff
    4b28:	4013      	ands	r3, r2
    4b2a:	61cb      	str	r3, [r1, #28]
    4b2c:	bf00      	nop
    4b2e:	b002      	add	sp, #8
    4b30:	4770      	bx	lr
    4b32:	bf00      	nop
    4b34:	4007f000 	.word	0x4007f000

00004b38 <Power_Ip_RCM_GetResetReason>:
    4b38:	b088      	sub	sp, #32
    4b3a:	230c      	movs	r3, #12
    4b3c:	9307      	str	r3, [sp, #28]
    4b3e:	2300      	movs	r3, #0
    4b40:	9303      	str	r3, [sp, #12]
    4b42:	2300      	movs	r3, #0
    4b44:	9305      	str	r3, [sp, #20]
    4b46:	2300      	movs	r3, #0
    4b48:	9304      	str	r3, [sp, #16]
    4b4a:	4b25      	ldr	r3, [pc, #148]	; (4be0 <Power_Ip_RCM_GetResetReason+0xa8>)
    4b4c:	699a      	ldr	r2, [r3, #24]
    4b4e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b52:	4013      	ands	r3, r2
    4b54:	9303      	str	r3, [sp, #12]
    4b56:	9b03      	ldr	r3, [sp, #12]
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d008      	beq.n	4b6e <Power_Ip_RCM_GetResetReason+0x36>
    4b5c:	4920      	ldr	r1, [pc, #128]	; (4be0 <Power_Ip_RCM_GetResetReason+0xa8>)
    4b5e:	9a03      	ldr	r2, [sp, #12]
    4b60:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b64:	4013      	ands	r3, r2
    4b66:	618b      	str	r3, [r1, #24]
    4b68:	4a1e      	ldr	r2, [pc, #120]	; (4be4 <Power_Ip_RCM_GetResetReason+0xac>)
    4b6a:	9b03      	ldr	r3, [sp, #12]
    4b6c:	6013      	str	r3, [r2, #0]
    4b6e:	4b1d      	ldr	r3, [pc, #116]	; (4be4 <Power_Ip_RCM_GetResetReason+0xac>)
    4b70:	681b      	ldr	r3, [r3, #0]
    4b72:	9302      	str	r3, [sp, #8]
    4b74:	9a02      	ldr	r2, [sp, #8]
    4b76:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b7a:	4013      	ands	r3, r2
    4b7c:	2b82      	cmp	r3, #130	; 0x82
    4b7e:	d102      	bne.n	4b86 <Power_Ip_RCM_GetResetReason+0x4e>
    4b80:	2305      	movs	r3, #5
    4b82:	9307      	str	r3, [sp, #28]
    4b84:	e027      	b.n	4bd6 <Power_Ip_RCM_GetResetReason+0x9e>
    4b86:	2300      	movs	r3, #0
    4b88:	9306      	str	r3, [sp, #24]
    4b8a:	e021      	b.n	4bd0 <Power_Ip_RCM_GetResetReason+0x98>
    4b8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4b90:	9b06      	ldr	r3, [sp, #24]
    4b92:	fa22 f303 	lsr.w	r3, r2, r3
    4b96:	9301      	str	r3, [sp, #4]
    4b98:	9a01      	ldr	r2, [sp, #4]
    4b9a:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    4b9e:	4013      	ands	r3, r2
    4ba0:	2b00      	cmp	r3, #0
    4ba2:	d012      	beq.n	4bca <Power_Ip_RCM_GetResetReason+0x92>
    4ba4:	9a01      	ldr	r2, [sp, #4]
    4ba6:	9b02      	ldr	r3, [sp, #8]
    4ba8:	4013      	ands	r3, r2
    4baa:	2b00      	cmp	r3, #0
    4bac:	d00a      	beq.n	4bc4 <Power_Ip_RCM_GetResetReason+0x8c>
    4bae:	9b05      	ldr	r3, [sp, #20]
    4bb0:	9307      	str	r3, [sp, #28]
    4bb2:	9b04      	ldr	r3, [sp, #16]
    4bb4:	3301      	adds	r3, #1
    4bb6:	9304      	str	r3, [sp, #16]
    4bb8:	9b04      	ldr	r3, [sp, #16]
    4bba:	2b01      	cmp	r3, #1
    4bbc:	d902      	bls.n	4bc4 <Power_Ip_RCM_GetResetReason+0x8c>
    4bbe:	230d      	movs	r3, #13
    4bc0:	9307      	str	r3, [sp, #28]
    4bc2:	e008      	b.n	4bd6 <Power_Ip_RCM_GetResetReason+0x9e>
    4bc4:	9b05      	ldr	r3, [sp, #20]
    4bc6:	3301      	adds	r3, #1
    4bc8:	9305      	str	r3, [sp, #20]
    4bca:	9b06      	ldr	r3, [sp, #24]
    4bcc:	3301      	adds	r3, #1
    4bce:	9306      	str	r3, [sp, #24]
    4bd0:	9b06      	ldr	r3, [sp, #24]
    4bd2:	2b1f      	cmp	r3, #31
    4bd4:	d9da      	bls.n	4b8c <Power_Ip_RCM_GetResetReason+0x54>
    4bd6:	9b07      	ldr	r3, [sp, #28]
    4bd8:	4618      	mov	r0, r3
    4bda:	b008      	add	sp, #32
    4bdc:	4770      	bx	lr
    4bde:	bf00      	nop
    4be0:	4007f000 	.word	0x4007f000
    4be4:	1fff8cf0 	.word	0x1fff8cf0

00004be8 <Power_Ip_RCM_GetResetRawValue>:
    4be8:	b082      	sub	sp, #8
    4bea:	4b0c      	ldr	r3, [pc, #48]	; (4c1c <Power_Ip_RCM_GetResetRawValue+0x34>)
    4bec:	699a      	ldr	r2, [r3, #24]
    4bee:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4bf2:	4013      	ands	r3, r2
    4bf4:	9301      	str	r3, [sp, #4]
    4bf6:	9b01      	ldr	r3, [sp, #4]
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d008      	beq.n	4c0e <Power_Ip_RCM_GetResetRawValue+0x26>
    4bfc:	4907      	ldr	r1, [pc, #28]	; (4c1c <Power_Ip_RCM_GetResetRawValue+0x34>)
    4bfe:	9a01      	ldr	r2, [sp, #4]
    4c00:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c04:	4013      	ands	r3, r2
    4c06:	618b      	str	r3, [r1, #24]
    4c08:	4a05      	ldr	r2, [pc, #20]	; (4c20 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c0a:	9b01      	ldr	r3, [sp, #4]
    4c0c:	6013      	str	r3, [r2, #0]
    4c0e:	4b04      	ldr	r3, [pc, #16]	; (4c20 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c10:	681b      	ldr	r3, [r3, #0]
    4c12:	9300      	str	r3, [sp, #0]
    4c14:	9b00      	ldr	r3, [sp, #0]
    4c16:	4618      	mov	r0, r3
    4c18:	b002      	add	sp, #8
    4c1a:	4770      	bx	lr
    4c1c:	4007f000 	.word	0x4007f000
    4c20:	1fff8cf0 	.word	0x1fff8cf0

00004c24 <Power_Ip_SMC_AllowedModesConfig>:
    4c24:	b082      	sub	sp, #8
    4c26:	9001      	str	r0, [sp, #4]
    4c28:	9b01      	ldr	r3, [sp, #4]
    4c2a:	681b      	ldr	r3, [r3, #0]
    4c2c:	4a03      	ldr	r2, [pc, #12]	; (4c3c <Power_Ip_SMC_AllowedModesConfig+0x18>)
    4c2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    4c32:	6093      	str	r3, [r2, #8]
    4c34:	bf00      	nop
    4c36:	b002      	add	sp, #8
    4c38:	4770      	bx	lr
    4c3a:	bf00      	nop
    4c3c:	4007e000 	.word	0x4007e000

00004c40 <Power_Ip_SMC_ModeCheckEntry>:
    4c40:	b084      	sub	sp, #16
    4c42:	9001      	str	r0, [sp, #4]
    4c44:	2301      	movs	r3, #1
    4c46:	9303      	str	r3, [sp, #12]
    4c48:	4b15      	ldr	r3, [pc, #84]	; (4ca0 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    4c4a:	695b      	ldr	r3, [r3, #20]
    4c4c:	b2db      	uxtb	r3, r3
    4c4e:	9302      	str	r3, [sp, #8]
    4c50:	9b01      	ldr	r3, [sp, #4]
    4c52:	2b02      	cmp	r3, #2
    4c54:	d012      	beq.n	4c7c <Power_Ip_SMC_ModeCheckEntry+0x3c>
    4c56:	9b01      	ldr	r3, [sp, #4]
    4c58:	2b02      	cmp	r3, #2
    4c5a:	d818      	bhi.n	4c8e <Power_Ip_SMC_ModeCheckEntry+0x4e>
    4c5c:	9b01      	ldr	r3, [sp, #4]
    4c5e:	2b00      	cmp	r3, #0
    4c60:	d003      	beq.n	4c6a <Power_Ip_SMC_ModeCheckEntry+0x2a>
    4c62:	9b01      	ldr	r3, [sp, #4]
    4c64:	2b01      	cmp	r3, #1
    4c66:	d003      	beq.n	4c70 <Power_Ip_SMC_ModeCheckEntry+0x30>
    4c68:	e011      	b.n	4c8e <Power_Ip_SMC_ModeCheckEntry+0x4e>
    4c6a:	2300      	movs	r3, #0
    4c6c:	9303      	str	r3, [sp, #12]
    4c6e:	e013      	b.n	4c98 <Power_Ip_SMC_ModeCheckEntry+0x58>
    4c70:	9b02      	ldr	r3, [sp, #8]
    4c72:	2b01      	cmp	r3, #1
    4c74:	d10d      	bne.n	4c92 <Power_Ip_SMC_ModeCheckEntry+0x52>
    4c76:	2300      	movs	r3, #0
    4c78:	9303      	str	r3, [sp, #12]
    4c7a:	e00a      	b.n	4c92 <Power_Ip_SMC_ModeCheckEntry+0x52>
    4c7c:	9b02      	ldr	r3, [sp, #8]
    4c7e:	2b01      	cmp	r3, #1
    4c80:	d002      	beq.n	4c88 <Power_Ip_SMC_ModeCheckEntry+0x48>
    4c82:	9b02      	ldr	r3, [sp, #8]
    4c84:	2b10      	cmp	r3, #16
    4c86:	d106      	bne.n	4c96 <Power_Ip_SMC_ModeCheckEntry+0x56>
    4c88:	2300      	movs	r3, #0
    4c8a:	9303      	str	r3, [sp, #12]
    4c8c:	e003      	b.n	4c96 <Power_Ip_SMC_ModeCheckEntry+0x56>
    4c8e:	bf00      	nop
    4c90:	e002      	b.n	4c98 <Power_Ip_SMC_ModeCheckEntry+0x58>
    4c92:	bf00      	nop
    4c94:	e000      	b.n	4c98 <Power_Ip_SMC_ModeCheckEntry+0x58>
    4c96:	bf00      	nop
    4c98:	9b03      	ldr	r3, [sp, #12]
    4c9a:	4618      	mov	r0, r3
    4c9c:	b004      	add	sp, #16
    4c9e:	4770      	bx	lr
    4ca0:	4007e000 	.word	0x4007e000

00004ca4 <Power_Ip_SMC_ModeConfig>:
    4ca4:	b500      	push	{lr}
    4ca6:	b08b      	sub	sp, #44	; 0x2c
    4ca8:	9001      	str	r0, [sp, #4]
    4caa:	2300      	movs	r3, #0
    4cac:	9309      	str	r3, [sp, #36]	; 0x24
    4cae:	2300      	movs	r3, #0
    4cb0:	9308      	str	r3, [sp, #32]
    4cb2:	2300      	movs	r3, #0
    4cb4:	f88d 301f 	strb.w	r3, [sp, #31]
    4cb8:	9b01      	ldr	r3, [sp, #4]
    4cba:	685b      	ldr	r3, [r3, #4]
    4cbc:	9308      	str	r3, [sp, #32]
    4cbe:	9b08      	ldr	r3, [sp, #32]
    4cc0:	2b02      	cmp	r3, #2
    4cc2:	d076      	beq.n	4db2 <Power_Ip_SMC_ModeConfig+0x10e>
    4cc4:	9b08      	ldr	r3, [sp, #32]
    4cc6:	2b02      	cmp	r3, #2
    4cc8:	f200 80ab 	bhi.w	4e22 <Power_Ip_SMC_ModeConfig+0x17e>
    4ccc:	9b08      	ldr	r3, [sp, #32]
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d003      	beq.n	4cda <Power_Ip_SMC_ModeConfig+0x36>
    4cd2:	9b08      	ldr	r3, [sp, #32]
    4cd4:	2b01      	cmp	r3, #1
    4cd6:	d034      	beq.n	4d42 <Power_Ip_SMC_ModeConfig+0x9e>
    4cd8:	e0a3      	b.n	4e22 <Power_Ip_SMC_ModeConfig+0x17e>
    4cda:	4b58      	ldr	r3, [pc, #352]	; (4e3c <Power_Ip_SMC_ModeConfig+0x198>)
    4cdc:	68db      	ldr	r3, [r3, #12]
    4cde:	9306      	str	r3, [sp, #24]
    4ce0:	9b06      	ldr	r3, [sp, #24]
    4ce2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4ce6:	9306      	str	r3, [sp, #24]
    4ce8:	4a54      	ldr	r2, [pc, #336]	; (4e3c <Power_Ip_SMC_ModeConfig+0x198>)
    4cea:	9b06      	ldr	r3, [sp, #24]
    4cec:	60d3      	str	r3, [r2, #12]
    4cee:	aa02      	add	r2, sp, #8
    4cf0:	a903      	add	r1, sp, #12
    4cf2:	a804      	add	r0, sp, #16
    4cf4:	f24c 3350 	movw	r3, #50000	; 0xc350
    4cf8:	f7ff fece 	bl	4a98 <Power_Ip_StartTimeout>
    4cfc:	9a02      	ldr	r2, [sp, #8]
    4cfe:	a903      	add	r1, sp, #12
    4d00:	ab04      	add	r3, sp, #16
    4d02:	4618      	mov	r0, r3
    4d04:	f7ff fee2 	bl	4acc <Power_Ip_TimeoutExpired>
    4d08:	4603      	mov	r3, r0
    4d0a:	f88d 301f 	strb.w	r3, [sp, #31]
    4d0e:	4b4b      	ldr	r3, [pc, #300]	; (4e3c <Power_Ip_SMC_ModeConfig+0x198>)
    4d10:	695b      	ldr	r3, [r3, #20]
    4d12:	f003 0301 	and.w	r3, r3, #1
    4d16:	9305      	str	r3, [sp, #20]
    4d18:	9b05      	ldr	r3, [sp, #20]
    4d1a:	2b01      	cmp	r3, #1
    4d1c:	d006      	beq.n	4d2c <Power_Ip_SMC_ModeConfig+0x88>
    4d1e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d22:	f083 0301 	eor.w	r3, r3, #1
    4d26:	b2db      	uxtb	r3, r3
    4d28:	2b00      	cmp	r3, #0
    4d2a:	d1e7      	bne.n	4cfc <Power_Ip_SMC_ModeConfig+0x58>
    4d2c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d30:	2b00      	cmp	r3, #0
    4d32:	d079      	beq.n	4e28 <Power_Ip_SMC_ModeConfig+0x184>
    4d34:	2301      	movs	r3, #1
    4d36:	9309      	str	r3, [sp, #36]	; 0x24
    4d38:	21ff      	movs	r1, #255	; 0xff
    4d3a:	2000      	movs	r0, #0
    4d3c:	f7ff fe90 	bl	4a60 <Power_Ip_ReportPowerErrors>
    4d40:	e072      	b.n	4e28 <Power_Ip_SMC_ModeConfig+0x184>
    4d42:	4b3e      	ldr	r3, [pc, #248]	; (4e3c <Power_Ip_SMC_ModeConfig+0x198>)
    4d44:	68db      	ldr	r3, [r3, #12]
    4d46:	9306      	str	r3, [sp, #24]
    4d48:	9b06      	ldr	r3, [sp, #24]
    4d4a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4d4e:	9306      	str	r3, [sp, #24]
    4d50:	9b06      	ldr	r3, [sp, #24]
    4d52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    4d56:	9306      	str	r3, [sp, #24]
    4d58:	4a38      	ldr	r2, [pc, #224]	; (4e3c <Power_Ip_SMC_ModeConfig+0x198>)
    4d5a:	9b06      	ldr	r3, [sp, #24]
    4d5c:	60d3      	str	r3, [r2, #12]
    4d5e:	aa02      	add	r2, sp, #8
    4d60:	a903      	add	r1, sp, #12
    4d62:	a804      	add	r0, sp, #16
    4d64:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d68:	f7ff fe96 	bl	4a98 <Power_Ip_StartTimeout>
    4d6c:	9a02      	ldr	r2, [sp, #8]
    4d6e:	a903      	add	r1, sp, #12
    4d70:	ab04      	add	r3, sp, #16
    4d72:	4618      	mov	r0, r3
    4d74:	f7ff feaa 	bl	4acc <Power_Ip_TimeoutExpired>
    4d78:	4603      	mov	r3, r0
    4d7a:	f88d 301f 	strb.w	r3, [sp, #31]
    4d7e:	4b2f      	ldr	r3, [pc, #188]	; (4e3c <Power_Ip_SMC_ModeConfig+0x198>)
    4d80:	695b      	ldr	r3, [r3, #20]
    4d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4d86:	9305      	str	r3, [sp, #20]
    4d88:	9b05      	ldr	r3, [sp, #20]
    4d8a:	2b80      	cmp	r3, #128	; 0x80
    4d8c:	d006      	beq.n	4d9c <Power_Ip_SMC_ModeConfig+0xf8>
    4d8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d92:	f083 0301 	eor.w	r3, r3, #1
    4d96:	b2db      	uxtb	r3, r3
    4d98:	2b00      	cmp	r3, #0
    4d9a:	d1e7      	bne.n	4d6c <Power_Ip_SMC_ModeConfig+0xc8>
    4d9c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4da0:	2b00      	cmp	r3, #0
    4da2:	d043      	beq.n	4e2c <Power_Ip_SMC_ModeConfig+0x188>
    4da4:	2301      	movs	r3, #1
    4da6:	9309      	str	r3, [sp, #36]	; 0x24
    4da8:	21ff      	movs	r1, #255	; 0xff
    4daa:	2000      	movs	r0, #0
    4dac:	f7ff fe58 	bl	4a60 <Power_Ip_ReportPowerErrors>
    4db0:	e03c      	b.n	4e2c <Power_Ip_SMC_ModeConfig+0x188>
    4db2:	4b22      	ldr	r3, [pc, #136]	; (4e3c <Power_Ip_SMC_ModeConfig+0x198>)
    4db4:	68db      	ldr	r3, [r3, #12]
    4db6:	9306      	str	r3, [sp, #24]
    4db8:	9b06      	ldr	r3, [sp, #24]
    4dba:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4dbe:	9306      	str	r3, [sp, #24]
    4dc0:	9b06      	ldr	r3, [sp, #24]
    4dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4dc6:	9306      	str	r3, [sp, #24]
    4dc8:	4a1c      	ldr	r2, [pc, #112]	; (4e3c <Power_Ip_SMC_ModeConfig+0x198>)
    4dca:	9b06      	ldr	r3, [sp, #24]
    4dcc:	60d3      	str	r3, [r2, #12]
    4dce:	aa02      	add	r2, sp, #8
    4dd0:	a903      	add	r1, sp, #12
    4dd2:	a804      	add	r0, sp, #16
    4dd4:	f24c 3350 	movw	r3, #50000	; 0xc350
    4dd8:	f7ff fe5e 	bl	4a98 <Power_Ip_StartTimeout>
    4ddc:	9a02      	ldr	r2, [sp, #8]
    4dde:	a903      	add	r1, sp, #12
    4de0:	ab04      	add	r3, sp, #16
    4de2:	4618      	mov	r0, r3
    4de4:	f7ff fe72 	bl	4acc <Power_Ip_TimeoutExpired>
    4de8:	4603      	mov	r3, r0
    4dea:	f88d 301f 	strb.w	r3, [sp, #31]
    4dee:	4b13      	ldr	r3, [pc, #76]	; (4e3c <Power_Ip_SMC_ModeConfig+0x198>)
    4df0:	695b      	ldr	r3, [r3, #20]
    4df2:	f003 0304 	and.w	r3, r3, #4
    4df6:	9305      	str	r3, [sp, #20]
    4df8:	9b05      	ldr	r3, [sp, #20]
    4dfa:	2b04      	cmp	r3, #4
    4dfc:	d006      	beq.n	4e0c <Power_Ip_SMC_ModeConfig+0x168>
    4dfe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e02:	f083 0301 	eor.w	r3, r3, #1
    4e06:	b2db      	uxtb	r3, r3
    4e08:	2b00      	cmp	r3, #0
    4e0a:	d1e7      	bne.n	4ddc <Power_Ip_SMC_ModeConfig+0x138>
    4e0c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e10:	2b00      	cmp	r3, #0
    4e12:	d00d      	beq.n	4e30 <Power_Ip_SMC_ModeConfig+0x18c>
    4e14:	2301      	movs	r3, #1
    4e16:	9309      	str	r3, [sp, #36]	; 0x24
    4e18:	21ff      	movs	r1, #255	; 0xff
    4e1a:	2000      	movs	r0, #0
    4e1c:	f7ff fe20 	bl	4a60 <Power_Ip_ReportPowerErrors>
    4e20:	e006      	b.n	4e30 <Power_Ip_SMC_ModeConfig+0x18c>
    4e22:	2301      	movs	r3, #1
    4e24:	9309      	str	r3, [sp, #36]	; 0x24
    4e26:	e004      	b.n	4e32 <Power_Ip_SMC_ModeConfig+0x18e>
    4e28:	bf00      	nop
    4e2a:	e002      	b.n	4e32 <Power_Ip_SMC_ModeConfig+0x18e>
    4e2c:	bf00      	nop
    4e2e:	e000      	b.n	4e32 <Power_Ip_SMC_ModeConfig+0x18e>
    4e30:	bf00      	nop
    4e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e34:	4618      	mov	r0, r3
    4e36:	b00b      	add	sp, #44	; 0x2c
    4e38:	f85d fb04 	ldr.w	pc, [sp], #4
    4e3c:	4007e000 	.word	0x4007e000

00004e40 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    4e40:	b500      	push	{lr}
    4e42:	b085      	sub	sp, #20
    4e44:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    4e46:	9b01      	ldr	r3, [sp, #4]
    4e48:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    4e4a:	9803      	ldr	r0, [sp, #12]
    4e4c:	f000 fbc8 	bl	55e0 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    4e50:	4a03      	ldr	r2, [pc, #12]	; (4e60 <Port_Init+0x20>)
    4e52:	9b03      	ldr	r3, [sp, #12]
    4e54:	6013      	str	r3, [r2, #0]
        }
    }
}
    4e56:	bf00      	nop
    4e58:	b005      	add	sp, #20
    4e5a:	f85d fb04 	ldr.w	pc, [sp], #4
    4e5e:	bf00      	nop
    4e60:	1fff8cf4 	.word	0x1fff8cf4

00004e64 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    4e64:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    4e66:	4b03      	ldr	r3, [pc, #12]	; (4e74 <Port_RefreshPortDirection+0x10>)
    4e68:	681b      	ldr	r3, [r3, #0]
    4e6a:	4618      	mov	r0, r3
    4e6c:	f000 fc10 	bl	5690 <Port_Ipw_RefreshPortDirection>
    }
}
    4e70:	bf00      	nop
    4e72:	bd08      	pop	{r3, pc}
    4e74:	1fff8cf4 	.word	0x1fff8cf4

00004e78 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    4e78:	b086      	sub	sp, #24
    4e7a:	9003      	str	r0, [sp, #12]
    4e7c:	9102      	str	r1, [sp, #8]
    4e7e:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    4e80:	23ff      	movs	r3, #255	; 0xff
    4e82:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    4e84:	9b03      	ldr	r3, [sp, #12]
    4e86:	4a39      	ldr	r2, [pc, #228]	; (4f6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    4e88:	4293      	cmp	r3, r2
    4e8a:	d151      	bne.n	4f30 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    4e8c:	9b02      	ldr	r3, [sp, #8]
    4e8e:	2b10      	cmp	r3, #16
    4e90:	d867      	bhi.n	4f62 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    4e92:	a201      	add	r2, pc, #4	; (adr r2, 4e98 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    4e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4e98:	00004edd 	.word	0x00004edd
    4e9c:	00004eeb 	.word	0x00004eeb
    4ea0:	00004f63 	.word	0x00004f63
    4ea4:	00004f63 	.word	0x00004f63
    4ea8:	00004f63 	.word	0x00004f63
    4eac:	00004f63 	.word	0x00004f63
    4eb0:	00004f63 	.word	0x00004f63
    4eb4:	00004f63 	.word	0x00004f63
    4eb8:	00004f63 	.word	0x00004f63
    4ebc:	00004f63 	.word	0x00004f63
    4ec0:	00004f63 	.word	0x00004f63
    4ec4:	00004f63 	.word	0x00004f63
    4ec8:	00004f63 	.word	0x00004f63
    4ecc:	00004ef9 	.word	0x00004ef9
    4ed0:	00004f07 	.word	0x00004f07
    4ed4:	00004f15 	.word	0x00004f15
    4ed8:	00004f23 	.word	0x00004f23
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    4edc:	2301      	movs	r3, #1
    4ede:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4ee0:	9a05      	ldr	r2, [sp, #20]
    4ee2:	9b01      	ldr	r3, [sp, #4]
    4ee4:	4313      	orrs	r3, r2
    4ee6:	9305      	str	r3, [sp, #20]
                break;
    4ee8:	e03c      	b.n	4f64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    4eea:	2302      	movs	r3, #2
    4eec:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4eee:	9a05      	ldr	r2, [sp, #20]
    4ef0:	9b01      	ldr	r3, [sp, #4]
    4ef2:	4313      	orrs	r3, r2
    4ef4:	9305      	str	r3, [sp, #20]
                break;
    4ef6:	e035      	b.n	4f64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    4ef8:	2304      	movs	r3, #4
    4efa:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4efc:	9a05      	ldr	r2, [sp, #20]
    4efe:	9b01      	ldr	r3, [sp, #4]
    4f00:	4313      	orrs	r3, r2
    4f02:	9305      	str	r3, [sp, #20]
                break;
    4f04:	e02e      	b.n	4f64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    4f06:	2308      	movs	r3, #8
    4f08:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f0a:	9a05      	ldr	r2, [sp, #20]
    4f0c:	9b01      	ldr	r3, [sp, #4]
    4f0e:	4313      	orrs	r3, r2
    4f10:	9305      	str	r3, [sp, #20]
                break;
    4f12:	e027      	b.n	4f64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    4f14:	230e      	movs	r3, #14
    4f16:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f18:	9a05      	ldr	r2, [sp, #20]
    4f1a:	9b01      	ldr	r3, [sp, #4]
    4f1c:	4013      	ands	r3, r2
    4f1e:	9305      	str	r3, [sp, #20]
                break;
    4f20:	e020      	b.n	4f64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    4f22:	230d      	movs	r3, #13
    4f24:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f26:	9a05      	ldr	r2, [sp, #20]
    4f28:	9b01      	ldr	r3, [sp, #4]
    4f2a:	4013      	ands	r3, r2
    4f2c:	9305      	str	r3, [sp, #20]
                break;
    4f2e:	e019      	b.n	4f64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    4f30:	9b03      	ldr	r3, [sp, #12]
    4f32:	4a0f      	ldr	r2, [pc, #60]	; (4f70 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    4f34:	4293      	cmp	r3, r2
    4f36:	d115      	bne.n	4f64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    4f38:	9b02      	ldr	r3, [sp, #8]
    4f3a:	2b00      	cmp	r3, #0
    4f3c:	d003      	beq.n	4f46 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    4f3e:	9b02      	ldr	r3, [sp, #8]
    4f40:	2b01      	cmp	r3, #1
    4f42:	d007      	beq.n	4f54 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    4f44:	e00e      	b.n	4f64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    4f46:	230b      	movs	r3, #11
    4f48:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f4a:	9a05      	ldr	r2, [sp, #20]
    4f4c:	9b01      	ldr	r3, [sp, #4]
    4f4e:	4013      	ands	r3, r2
    4f50:	9305      	str	r3, [sp, #20]
                break;
    4f52:	e007      	b.n	4f64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    4f54:	2307      	movs	r3, #7
    4f56:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f58:	9a05      	ldr	r2, [sp, #20]
    4f5a:	9b01      	ldr	r3, [sp, #4]
    4f5c:	4013      	ands	r3, r2
    4f5e:	9305      	str	r3, [sp, #20]
                break;
    4f60:	e000      	b.n	4f64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    4f62:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    4f64:	9b05      	ldr	r3, [sp, #20]
}
    4f66:	4618      	mov	r0, r3
    4f68:	b006      	add	sp, #24
    4f6a:	4770      	bx	lr
    4f6c:	4004a000 	.word	0x4004a000
    4f70:	4004b000 	.word	0x4004b000

00004f74 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    4f74:	b500      	push	{lr}
    4f76:	b089      	sub	sp, #36	; 0x24
    4f78:	9003      	str	r0, [sp, #12]
    4f7a:	9102      	str	r1, [sp, #8]
    4f7c:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    4f7e:	9b01      	ldr	r3, [sp, #4]
    4f80:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    4f82:	9b01      	ldr	r3, [sp, #4]
    4f84:	2b08      	cmp	r3, #8
    4f86:	d121      	bne.n	4fcc <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    4f88:	4b13      	ldr	r3, [pc, #76]	; (4fd8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4f8a:	685b      	ldr	r3, [r3, #4]
    4f8c:	f003 030f 	and.w	r3, r3, #15
    4f90:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    4f92:	9a06      	ldr	r2, [sp, #24]
    4f94:	9902      	ldr	r1, [sp, #8]
    4f96:	9803      	ldr	r0, [sp, #12]
    4f98:	f7ff ff6e 	bl	4e78 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    4f9c:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    4f9e:	9b05      	ldr	r3, [sp, #20]
    4fa0:	2bff      	cmp	r3, #255	; 0xff
    4fa2:	d011      	beq.n	4fc8 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    4fa4:	f004 f870 	bl	9088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    4fa8:	4b0b      	ldr	r3, [pc, #44]	; (4fd8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4faa:	685b      	ldr	r3, [r3, #4]
    4fac:	4a0a      	ldr	r2, [pc, #40]	; (4fd8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fae:	f023 030f 	bic.w	r3, r3, #15
    4fb2:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    4fb4:	4b08      	ldr	r3, [pc, #32]	; (4fd8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fb6:	685a      	ldr	r2, [r3, #4]
    4fb8:	9b05      	ldr	r3, [sp, #20]
    4fba:	f003 030f 	and.w	r3, r3, #15
    4fbe:	4906      	ldr	r1, [pc, #24]	; (4fd8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fc0:	4313      	orrs	r3, r2
    4fc2:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    4fc4:	f004 f88c 	bl	90e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    4fc8:	2300      	movs	r3, #0
    4fca:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    4fcc:	9b07      	ldr	r3, [sp, #28]
}
    4fce:	4618      	mov	r0, r3
    4fd0:	b009      	add	sp, #36	; 0x24
    4fd2:	f85d fb04 	ldr.w	pc, [sp], #4
    4fd6:	bf00      	nop
    4fd8:	40048000 	.word	0x40048000

00004fdc <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    4fdc:	b500      	push	{lr}
    4fde:	b087      	sub	sp, #28
    4fe0:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    4fe2:	2300      	movs	r3, #0
    4fe4:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    4fe6:	2300      	movs	r3, #0
    4fe8:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    4fea:	2300      	movs	r3, #0
    4fec:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    4fee:	9b01      	ldr	r3, [sp, #4]
    4ff0:	68db      	ldr	r3, [r3, #12]
    4ff2:	2b02      	cmp	r3, #2
    4ff4:	d00a      	beq.n	500c <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    4ff6:	9b05      	ldr	r3, [sp, #20]
    4ff8:	f043 0302 	orr.w	r3, r3, #2
    4ffc:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    4ffe:	9b01      	ldr	r3, [sp, #4]
    5000:	68db      	ldr	r3, [r3, #12]
    5002:	f003 0301 	and.w	r3, r3, #1
    5006:	9a05      	ldr	r2, [sp, #20]
    5008:	4313      	orrs	r3, r2
    500a:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    500c:	9b01      	ldr	r3, [sp, #4]
    500e:	699b      	ldr	r3, [r3, #24]
    5010:	019b      	lsls	r3, r3, #6
    5012:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5016:	9a05      	ldr	r2, [sp, #20]
    5018:	4313      	orrs	r3, r2
    501a:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    501c:	9b01      	ldr	r3, [sp, #4]
    501e:	6a1b      	ldr	r3, [r3, #32]
    5020:	03db      	lsls	r3, r3, #15
    5022:	b29b      	uxth	r3, r3
    5024:	9a05      	ldr	r2, [sp, #20]
    5026:	4313      	orrs	r3, r2
    5028:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    502a:	9b01      	ldr	r3, [sp, #4]
    502c:	7f1b      	ldrb	r3, [r3, #28]
    502e:	2b00      	cmp	r3, #0
    5030:	d001      	beq.n	5036 <Port_Ci_Port_Ip_PinInit+0x5a>
    5032:	2310      	movs	r3, #16
    5034:	e000      	b.n	5038 <Port_Ci_Port_Ip_PinInit+0x5c>
    5036:	2300      	movs	r3, #0
    5038:	9a05      	ldr	r2, [sp, #20]
    503a:	4313      	orrs	r3, r2
    503c:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    503e:	9b01      	ldr	r3, [sp, #4]
    5040:	691b      	ldr	r3, [r3, #16]
    5042:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5044:	9b01      	ldr	r3, [sp, #4]
    5046:	6818      	ldr	r0, [r3, #0]
    5048:	9b01      	ldr	r3, [sp, #4]
    504a:	689b      	ldr	r3, [r3, #8]
    504c:	9a04      	ldr	r2, [sp, #16]
    504e:	4619      	mov	r1, r3
    5050:	f7ff ff90 	bl	4f74 <Port_Ci_Port_Ip_ConfigureInterleave>
    5054:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    5056:	9b03      	ldr	r3, [sp, #12]
    5058:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    505a:	9b04      	ldr	r3, [sp, #16]
    505c:	021b      	lsls	r3, r3, #8
    505e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5062:	9a05      	ldr	r2, [sp, #20]
    5064:	4313      	orrs	r3, r2
    5066:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5068:	f003 fe74 	bl	8d54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    506c:	9b01      	ldr	r3, [sp, #4]
    506e:	681b      	ldr	r3, [r3, #0]
    5070:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5074:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    5076:	9b01      	ldr	r3, [sp, #4]
    5078:	689b      	ldr	r3, [r3, #8]
    507a:	2201      	movs	r2, #1
    507c:	fa02 f303 	lsl.w	r3, r2, r3
    5080:	43db      	mvns	r3, r3
    5082:	9a02      	ldr	r2, [sp, #8]
    5084:	4013      	ands	r3, r2
    5086:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    5088:	9b01      	ldr	r3, [sp, #4]
    508a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    508e:	2b00      	cmp	r3, #0
    5090:	d001      	beq.n	5096 <Port_Ci_Port_Ip_PinInit+0xba>
    5092:	2201      	movs	r2, #1
    5094:	e000      	b.n	5098 <Port_Ci_Port_Ip_PinInit+0xbc>
    5096:	2200      	movs	r2, #0
    5098:	9b01      	ldr	r3, [sp, #4]
    509a:	689b      	ldr	r3, [r3, #8]
    509c:	fa02 f303 	lsl.w	r3, r2, r3
    50a0:	9a02      	ldr	r2, [sp, #8]
    50a2:	4313      	orrs	r3, r2
    50a4:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    50a6:	9b01      	ldr	r3, [sp, #4]
    50a8:	681b      	ldr	r3, [r3, #0]
    50aa:	9a02      	ldr	r2, [sp, #8]
    50ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    50b0:	f003 fe7c 	bl	8dac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    50b4:	9b04      	ldr	r3, [sp, #16]
    50b6:	2b01      	cmp	r3, #1
    50b8:	d16d      	bne.n	5196 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    50ba:	9b01      	ldr	r3, [sp, #4]
    50bc:	695b      	ldr	r3, [r3, #20]
    50be:	2b02      	cmp	r3, #2
    50c0:	d138      	bne.n	5134 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    50c2:	9b01      	ldr	r3, [sp, #4]
    50c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    50c8:	2b01      	cmp	r3, #1
    50ca:	d10f      	bne.n	50ec <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    50cc:	f003 fe94 	bl	8df8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    50d0:	9b01      	ldr	r3, [sp, #4]
    50d2:	685b      	ldr	r3, [r3, #4]
    50d4:	6859      	ldr	r1, [r3, #4]
    50d6:	9b01      	ldr	r3, [sp, #4]
    50d8:	689b      	ldr	r3, [r3, #8]
    50da:	2201      	movs	r2, #1
    50dc:	409a      	lsls	r2, r3
    50de:	9b01      	ldr	r3, [sp, #4]
    50e0:	685b      	ldr	r3, [r3, #4]
    50e2:	430a      	orrs	r2, r1
    50e4:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    50e6:	f003 feb3 	bl	8e50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    50ea:	e013      	b.n	5114 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    50ec:	9b01      	ldr	r3, [sp, #4]
    50ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    50f2:	2b00      	cmp	r3, #0
    50f4:	d10e      	bne.n	5114 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    50f6:	f003 fed1 	bl	8e9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    50fa:	9b01      	ldr	r3, [sp, #4]
    50fc:	685b      	ldr	r3, [r3, #4]
    50fe:	6899      	ldr	r1, [r3, #8]
    5100:	9b01      	ldr	r3, [sp, #4]
    5102:	689b      	ldr	r3, [r3, #8]
    5104:	2201      	movs	r2, #1
    5106:	409a      	lsls	r2, r3
    5108:	9b01      	ldr	r3, [sp, #4]
    510a:	685b      	ldr	r3, [r3, #4]
    510c:	430a      	orrs	r2, r1
    510e:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5110:	f003 fef0 	bl	8ef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5114:	f003 ff14 	bl	8f40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    5118:	9b01      	ldr	r3, [sp, #4]
    511a:	685b      	ldr	r3, [r3, #4]
    511c:	6959      	ldr	r1, [r3, #20]
    511e:	9b01      	ldr	r3, [sp, #4]
    5120:	689b      	ldr	r3, [r3, #8]
    5122:	2201      	movs	r2, #1
    5124:	409a      	lsls	r2, r3
    5126:	9b01      	ldr	r3, [sp, #4]
    5128:	685b      	ldr	r3, [r3, #4]
    512a:	430a      	orrs	r2, r1
    512c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    512e:	f003 ff33 	bl	8f98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5132:	e030      	b.n	5196 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5134:	f003 ff04 	bl	8f40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5138:	9b01      	ldr	r3, [sp, #4]
    513a:	685b      	ldr	r3, [r3, #4]
    513c:	6959      	ldr	r1, [r3, #20]
    513e:	9b01      	ldr	r3, [sp, #4]
    5140:	689b      	ldr	r3, [r3, #8]
    5142:	2201      	movs	r2, #1
    5144:	fa02 f303 	lsl.w	r3, r2, r3
    5148:	43da      	mvns	r2, r3
    514a:	9b01      	ldr	r3, [sp, #4]
    514c:	685b      	ldr	r3, [r3, #4]
    514e:	400a      	ands	r2, r1
    5150:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5152:	f003 ff21 	bl	8f98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    5156:	f003 ff45 	bl	8fe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    515a:	9b01      	ldr	r3, [sp, #4]
    515c:	685b      	ldr	r3, [r3, #4]
    515e:	6999      	ldr	r1, [r3, #24]
    5160:	9b01      	ldr	r3, [sp, #4]
    5162:	689b      	ldr	r3, [r3, #8]
    5164:	2201      	movs	r2, #1
    5166:	fa02 f303 	lsl.w	r3, r2, r3
    516a:	43da      	mvns	r2, r3
    516c:	9b01      	ldr	r3, [sp, #4]
    516e:	685b      	ldr	r3, [r3, #4]
    5170:	400a      	ands	r2, r1
    5172:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5174:	9b01      	ldr	r3, [sp, #4]
    5176:	695b      	ldr	r3, [r3, #20]
    5178:	2b03      	cmp	r3, #3
    517a:	d10a      	bne.n	5192 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    517c:	9b01      	ldr	r3, [sp, #4]
    517e:	685b      	ldr	r3, [r3, #4]
    5180:	6999      	ldr	r1, [r3, #24]
    5182:	9b01      	ldr	r3, [sp, #4]
    5184:	689b      	ldr	r3, [r3, #8]
    5186:	2201      	movs	r2, #1
    5188:	409a      	lsls	r2, r3
    518a:	9b01      	ldr	r3, [sp, #4]
    518c:	685b      	ldr	r3, [r3, #4]
    518e:	430a      	orrs	r2, r1
    5190:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    5192:	f003 ff53 	bl	903c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    5196:	9b01      	ldr	r3, [sp, #4]
    5198:	681b      	ldr	r3, [r3, #0]
    519a:	9a01      	ldr	r2, [sp, #4]
    519c:	6892      	ldr	r2, [r2, #8]
    519e:	9905      	ldr	r1, [sp, #20]
    51a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    51a4:	bf00      	nop
    51a6:	b007      	add	sp, #28
    51a8:	f85d fb04 	ldr.w	pc, [sp], #4

000051ac <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    51ac:	b500      	push	{lr}
    51ae:	b085      	sub	sp, #20
    51b0:	9001      	str	r0, [sp, #4]
    51b2:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    51b4:	2300      	movs	r3, #0
    51b6:	9303      	str	r3, [sp, #12]
    51b8:	e00d      	b.n	51d6 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    51ba:	9a03      	ldr	r2, [sp, #12]
    51bc:	4613      	mov	r3, r2
    51be:	009b      	lsls	r3, r3, #2
    51c0:	4413      	add	r3, r2
    51c2:	00db      	lsls	r3, r3, #3
    51c4:	461a      	mov	r2, r3
    51c6:	9b00      	ldr	r3, [sp, #0]
    51c8:	4413      	add	r3, r2
    51ca:	4618      	mov	r0, r3
    51cc:	f7ff ff06 	bl	4fdc <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    51d0:	9b03      	ldr	r3, [sp, #12]
    51d2:	3301      	adds	r3, #1
    51d4:	9303      	str	r3, [sp, #12]
    51d6:	9a03      	ldr	r2, [sp, #12]
    51d8:	9b01      	ldr	r3, [sp, #4]
    51da:	429a      	cmp	r2, r3
    51dc:	d3ed      	bcc.n	51ba <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    51de:	2300      	movs	r3, #0
}
    51e0:	4618      	mov	r0, r3
    51e2:	b005      	add	sp, #20
    51e4:	f85d fb04 	ldr.w	pc, [sp], #4

000051e8 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    51e8:	b500      	push	{lr}
    51ea:	b087      	sub	sp, #28
    51ec:	9003      	str	r0, [sp, #12]
    51ee:	9102      	str	r1, [sp, #8]
    51f0:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    51f2:	9a01      	ldr	r2, [sp, #4]
    51f4:	9902      	ldr	r1, [sp, #8]
    51f6:	9803      	ldr	r0, [sp, #12]
    51f8:	f7ff febc 	bl	4f74 <Port_Ci_Port_Ip_ConfigureInterleave>
    51fc:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    51fe:	f003 ff95 	bl	912c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    5202:	9b03      	ldr	r3, [sp, #12]
    5204:	9a02      	ldr	r2, [sp, #8]
    5206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    520a:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    520c:	9b04      	ldr	r3, [sp, #16]
    520e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5212:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5214:	9b05      	ldr	r3, [sp, #20]
    5216:	021b      	lsls	r3, r3, #8
    5218:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    521c:	9a04      	ldr	r2, [sp, #16]
    521e:	4313      	orrs	r3, r2
    5220:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5222:	9b03      	ldr	r3, [sp, #12]
    5224:	9a02      	ldr	r2, [sp, #8]
    5226:	9904      	ldr	r1, [sp, #16]
    5228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    522c:	f003 ffaa 	bl	9184 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5230:	bf00      	nop
    5232:	b007      	add	sp, #28
    5234:	f85d fb04 	ldr.w	pc, [sp], #4

00005238 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5238:	b500      	push	{lr}
    523a:	b083      	sub	sp, #12
    523c:	9001      	str	r0, [sp, #4]
    523e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5240:	f003 ffc6 	bl	91d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5244:	9b01      	ldr	r3, [sp, #4]
    5246:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    524a:	2101      	movs	r1, #1
    524c:	9b00      	ldr	r3, [sp, #0]
    524e:	fa01 f303 	lsl.w	r3, r1, r3
    5252:	431a      	orrs	r2, r3
    5254:	9b01      	ldr	r3, [sp, #4]
    5256:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    525a:	f003 ffe5 	bl	9228 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    525e:	bf00      	nop
    5260:	b003      	add	sp, #12
    5262:	f85d fb04 	ldr.w	pc, [sp], #4

00005266 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5266:	b500      	push	{lr}
    5268:	b083      	sub	sp, #12
    526a:	9001      	str	r0, [sp, #4]
    526c:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    526e:	f004 f801 	bl	9274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    5272:	9b01      	ldr	r3, [sp, #4]
    5274:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5278:	2101      	movs	r1, #1
    527a:	9b00      	ldr	r3, [sp, #0]
    527c:	fa01 f303 	lsl.w	r3, r1, r3
    5280:	43db      	mvns	r3, r3
    5282:	401a      	ands	r2, r3
    5284:	9b01      	ldr	r3, [sp, #4]
    5286:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    528a:	f004 f81f 	bl	92cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    528e:	bf00      	nop
    5290:	b003      	add	sp, #12
    5292:	f85d fb04 	ldr.w	pc, [sp], #4

00005296 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    5296:	b082      	sub	sp, #8
    5298:	9001      	str	r0, [sp, #4]
    529a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    529c:	9b00      	ldr	r3, [sp, #0]
    529e:	785b      	ldrb	r3, [r3, #1]
    52a0:	f003 0201 	and.w	r2, r3, #1
    52a4:	9b01      	ldr	r3, [sp, #4]
    52a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    52aa:	9b00      	ldr	r3, [sp, #0]
    52ac:	789b      	ldrb	r3, [r3, #2]
    52ae:	f003 021f 	and.w	r2, r3, #31
    52b2:	9b01      	ldr	r3, [sp, #4]
    52b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    52b8:	bf00      	nop
    52ba:	b002      	add	sp, #8
    52bc:	4770      	bx	lr

000052be <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    52be:	b086      	sub	sp, #24
    52c0:	9003      	str	r0, [sp, #12]
    52c2:	9301      	str	r3, [sp, #4]
    52c4:	460b      	mov	r3, r1
    52c6:	f8ad 300a 	strh.w	r3, [sp, #10]
    52ca:	4613      	mov	r3, r2
    52cc:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    52d0:	2300      	movs	r3, #0
    52d2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    52d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52da:	f043 0301 	orr.w	r3, r3, #1
    52de:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    52e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52e6:	f043 0302 	orr.w	r3, r3, #2
    52ea:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    52ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52f2:	f043 0310 	orr.w	r3, r3, #16
    52f6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    52fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5302:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    5306:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    530a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    530e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5312:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    531a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    531e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5322:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5326:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    532a:	4013      	ands	r3, r2
    532c:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5330:	9b01      	ldr	r3, [sp, #4]
    5332:	2b00      	cmp	r3, #0
    5334:	d003      	beq.n	533e <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    5336:	9b01      	ldr	r3, [sp, #4]
    5338:	2b01      	cmp	r3, #1
    533a:	d00a      	beq.n	5352 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    533c:	e013      	b.n	5366 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    533e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5342:	041a      	lsls	r2, r3, #16
    5344:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5348:	431a      	orrs	r2, r3
    534a:	9b03      	ldr	r3, [sp, #12]
    534c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5350:	e009      	b.n	5366 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5352:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5356:	041a      	lsls	r2, r3, #16
    5358:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    535c:	431a      	orrs	r2, r3
    535e:	9b03      	ldr	r3, [sp, #12]
    5360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5364:	bf00      	nop
    }
}
    5366:	bf00      	nop
    5368:	b006      	add	sp, #24
    536a:	4770      	bx	lr

0000536c <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    536c:	b500      	push	{lr}
    536e:	b087      	sub	sp, #28
    5370:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5372:	9b01      	ldr	r3, [sp, #4]
    5374:	885b      	ldrh	r3, [r3, #2]
    5376:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    537a:	9b01      	ldr	r3, [sp, #4]
    537c:	689b      	ldr	r3, [r3, #8]
    537e:	7a1b      	ldrb	r3, [r3, #8]
    5380:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5384:	9b01      	ldr	r3, [sp, #4]
    5386:	689b      	ldr	r3, [r3, #8]
    5388:	681b      	ldr	r3, [r3, #0]
    538a:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    538c:	9b01      	ldr	r3, [sp, #4]
    538e:	689b      	ldr	r3, [r3, #8]
    5390:	685b      	ldr	r3, [r3, #4]
    5392:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5394:	2300      	movs	r3, #0
    5396:	f8ad 3016 	strh.w	r3, [sp, #22]
    539a:	e111      	b.n	55c0 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    539c:	9b02      	ldr	r3, [sp, #8]
    539e:	2b02      	cmp	r3, #2
    53a0:	d169      	bne.n	5476 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    53a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    53a6:	2b01      	cmp	r3, #1
    53a8:	d11a      	bne.n	53e0 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    53aa:	9b01      	ldr	r3, [sp, #4]
    53ac:	685a      	ldr	r2, [r3, #4]
    53ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53b2:	005b      	lsls	r3, r3, #1
    53b4:	4413      	add	r3, r2
    53b6:	881b      	ldrh	r3, [r3, #0]
    53b8:	f003 021f 	and.w	r2, r3, #31
    53bc:	9b01      	ldr	r3, [sp, #4]
    53be:	6859      	ldr	r1, [r3, #4]
    53c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53c4:	005b      	lsls	r3, r3, #1
    53c6:	440b      	add	r3, r1
    53c8:	881b      	ldrh	r3, [r3, #0]
    53ca:	095b      	lsrs	r3, r3, #5
    53cc:	b29b      	uxth	r3, r3
    53ce:	4619      	mov	r1, r3
    53d0:	4b81      	ldr	r3, [pc, #516]	; (55d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    53d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    53d6:	2101      	movs	r1, #1
    53d8:	fa01 f202 	lsl.w	r2, r1, r2
    53dc:	605a      	str	r2, [r3, #4]
    53de:	e01d      	b.n	541c <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    53e0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    53e4:	2b00      	cmp	r3, #0
    53e6:	d119      	bne.n	541c <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    53e8:	9b01      	ldr	r3, [sp, #4]
    53ea:	685a      	ldr	r2, [r3, #4]
    53ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53f0:	005b      	lsls	r3, r3, #1
    53f2:	4413      	add	r3, r2
    53f4:	881b      	ldrh	r3, [r3, #0]
    53f6:	f003 021f 	and.w	r2, r3, #31
    53fa:	9b01      	ldr	r3, [sp, #4]
    53fc:	6859      	ldr	r1, [r3, #4]
    53fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5402:	005b      	lsls	r3, r3, #1
    5404:	440b      	add	r3, r1
    5406:	881b      	ldrh	r3, [r3, #0]
    5408:	095b      	lsrs	r3, r3, #5
    540a:	b29b      	uxth	r3, r3
    540c:	4619      	mov	r1, r3
    540e:	4b72      	ldr	r3, [pc, #456]	; (55d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5410:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5414:	2101      	movs	r1, #1
    5416:	fa01 f202 	lsl.w	r2, r1, r2
    541a:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    541c:	f003 ff7c 	bl	9318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5420:	9b01      	ldr	r3, [sp, #4]
    5422:	685a      	ldr	r2, [r3, #4]
    5424:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5428:	005b      	lsls	r3, r3, #1
    542a:	4413      	add	r3, r2
    542c:	881b      	ldrh	r3, [r3, #0]
    542e:	095b      	lsrs	r3, r3, #5
    5430:	b29b      	uxth	r3, r3
    5432:	461a      	mov	r2, r3
    5434:	4b68      	ldr	r3, [pc, #416]	; (55d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    543a:	6959      	ldr	r1, [r3, #20]
    543c:	9b01      	ldr	r3, [sp, #4]
    543e:	685a      	ldr	r2, [r3, #4]
    5440:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5444:	005b      	lsls	r3, r3, #1
    5446:	4413      	add	r3, r2
    5448:	881b      	ldrh	r3, [r3, #0]
    544a:	f003 031f 	and.w	r3, r3, #31
    544e:	2201      	movs	r2, #1
    5450:	409a      	lsls	r2, r3
    5452:	9b01      	ldr	r3, [sp, #4]
    5454:	6858      	ldr	r0, [r3, #4]
    5456:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    545a:	005b      	lsls	r3, r3, #1
    545c:	4403      	add	r3, r0
    545e:	881b      	ldrh	r3, [r3, #0]
    5460:	095b      	lsrs	r3, r3, #5
    5462:	b29b      	uxth	r3, r3
    5464:	4618      	mov	r0, r3
    5466:	4b5c      	ldr	r3, [pc, #368]	; (55d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5468:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    546c:	430a      	orrs	r2, r1
    546e:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5470:	f003 ff7e 	bl	9370 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5474:	e086      	b.n	5584 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5476:	f003 ff4f 	bl	9318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    547a:	9b01      	ldr	r3, [sp, #4]
    547c:	685a      	ldr	r2, [r3, #4]
    547e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5482:	005b      	lsls	r3, r3, #1
    5484:	4413      	add	r3, r2
    5486:	881b      	ldrh	r3, [r3, #0]
    5488:	095b      	lsrs	r3, r3, #5
    548a:	b29b      	uxth	r3, r3
    548c:	461a      	mov	r2, r3
    548e:	4b52      	ldr	r3, [pc, #328]	; (55d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5494:	6959      	ldr	r1, [r3, #20]
    5496:	9b01      	ldr	r3, [sp, #4]
    5498:	685a      	ldr	r2, [r3, #4]
    549a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    549e:	005b      	lsls	r3, r3, #1
    54a0:	4413      	add	r3, r2
    54a2:	881b      	ldrh	r3, [r3, #0]
    54a4:	f003 031f 	and.w	r3, r3, #31
    54a8:	2201      	movs	r2, #1
    54aa:	fa02 f303 	lsl.w	r3, r2, r3
    54ae:	43da      	mvns	r2, r3
    54b0:	9b01      	ldr	r3, [sp, #4]
    54b2:	6858      	ldr	r0, [r3, #4]
    54b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54b8:	005b      	lsls	r3, r3, #1
    54ba:	4403      	add	r3, r0
    54bc:	881b      	ldrh	r3, [r3, #0]
    54be:	095b      	lsrs	r3, r3, #5
    54c0:	b29b      	uxth	r3, r3
    54c2:	4618      	mov	r0, r3
    54c4:	4b44      	ldr	r3, [pc, #272]	; (55d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    54c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    54ca:	400a      	ands	r2, r1
    54cc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    54ce:	f003 ff4f 	bl	9370 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    54d2:	f003 ff73 	bl	93bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    54d6:	9b01      	ldr	r3, [sp, #4]
    54d8:	685a      	ldr	r2, [r3, #4]
    54da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54de:	005b      	lsls	r3, r3, #1
    54e0:	4413      	add	r3, r2
    54e2:	881b      	ldrh	r3, [r3, #0]
    54e4:	095b      	lsrs	r3, r3, #5
    54e6:	b29b      	uxth	r3, r3
    54e8:	461a      	mov	r2, r3
    54ea:	4b3b      	ldr	r3, [pc, #236]	; (55d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    54ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54f0:	6999      	ldr	r1, [r3, #24]
    54f2:	9b01      	ldr	r3, [sp, #4]
    54f4:	685a      	ldr	r2, [r3, #4]
    54f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54fa:	005b      	lsls	r3, r3, #1
    54fc:	4413      	add	r3, r2
    54fe:	881b      	ldrh	r3, [r3, #0]
    5500:	f003 031f 	and.w	r3, r3, #31
    5504:	2201      	movs	r2, #1
    5506:	fa02 f303 	lsl.w	r3, r2, r3
    550a:	43da      	mvns	r2, r3
    550c:	9b01      	ldr	r3, [sp, #4]
    550e:	6858      	ldr	r0, [r3, #4]
    5510:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5514:	005b      	lsls	r3, r3, #1
    5516:	4403      	add	r3, r0
    5518:	881b      	ldrh	r3, [r3, #0]
    551a:	095b      	lsrs	r3, r3, #5
    551c:	b29b      	uxth	r3, r3
    551e:	4618      	mov	r0, r3
    5520:	4b2d      	ldr	r3, [pc, #180]	; (55d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5522:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5526:	400a      	ands	r2, r1
    5528:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    552a:	9b02      	ldr	r3, [sp, #8]
    552c:	2b03      	cmp	r3, #3
    552e:	d127      	bne.n	5580 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5530:	9b01      	ldr	r3, [sp, #4]
    5532:	685a      	ldr	r2, [r3, #4]
    5534:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5538:	005b      	lsls	r3, r3, #1
    553a:	4413      	add	r3, r2
    553c:	881b      	ldrh	r3, [r3, #0]
    553e:	095b      	lsrs	r3, r3, #5
    5540:	b29b      	uxth	r3, r3
    5542:	461a      	mov	r2, r3
    5544:	4b24      	ldr	r3, [pc, #144]	; (55d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    554a:	6999      	ldr	r1, [r3, #24]
    554c:	9b01      	ldr	r3, [sp, #4]
    554e:	685a      	ldr	r2, [r3, #4]
    5550:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5554:	005b      	lsls	r3, r3, #1
    5556:	4413      	add	r3, r2
    5558:	881b      	ldrh	r3, [r3, #0]
    555a:	f003 031f 	and.w	r3, r3, #31
    555e:	2201      	movs	r2, #1
    5560:	409a      	lsls	r2, r3
    5562:	9b01      	ldr	r3, [sp, #4]
    5564:	6858      	ldr	r0, [r3, #4]
    5566:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    556a:	005b      	lsls	r3, r3, #1
    556c:	4403      	add	r3, r0
    556e:	881b      	ldrh	r3, [r3, #0]
    5570:	095b      	lsrs	r3, r3, #5
    5572:	b29b      	uxth	r3, r3
    5574:	4618      	mov	r0, r3
    5576:	4b18      	ldr	r3, [pc, #96]	; (55d8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5578:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    557c:	430a      	orrs	r2, r1
    557e:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5580:	f003 ff48 	bl	9414 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5584:	9b01      	ldr	r3, [sp, #4]
    5586:	685a      	ldr	r2, [r3, #4]
    5588:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    558c:	005b      	lsls	r3, r3, #1
    558e:	4413      	add	r3, r2
    5590:	881b      	ldrh	r3, [r3, #0]
    5592:	095b      	lsrs	r3, r3, #5
    5594:	b29b      	uxth	r3, r3
    5596:	461a      	mov	r2, r3
    5598:	4b10      	ldr	r3, [pc, #64]	; (55dc <Port_Ipw_Init_UnusedPins+0x270>)
    559a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    559e:	9a01      	ldr	r2, [sp, #4]
    55a0:	6851      	ldr	r1, [r2, #4]
    55a2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    55a6:	0052      	lsls	r2, r2, #1
    55a8:	440a      	add	r2, r1
    55aa:	8812      	ldrh	r2, [r2, #0]
    55ac:	f002 021f 	and.w	r2, r2, #31
    55b0:	9903      	ldr	r1, [sp, #12]
    55b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    55b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55ba:	3301      	adds	r3, #1
    55bc:	f8ad 3016 	strh.w	r3, [sp, #22]
    55c0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    55c4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    55c8:	429a      	cmp	r2, r3
    55ca:	f4ff aee7 	bcc.w	539c <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    55ce:	bf00      	nop
    55d0:	bf00      	nop
    55d2:	b007      	add	sp, #28
    55d4:	f85d fb04 	ldr.w	pc, [sp], #4
    55d8:	0000bd4c 	.word	0x0000bd4c
    55dc:	0000bd38 	.word	0x0000bd38

000055e0 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    55e0:	b500      	push	{lr}
    55e2:	b085      	sub	sp, #20
    55e4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    55e6:	9b01      	ldr	r3, [sp, #4]
    55e8:	7c1b      	ldrb	r3, [r3, #16]
    55ea:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    55ee:	2300      	movs	r3, #0
    55f0:	f8ad 300e 	strh.w	r3, [sp, #14]
    55f4:	e035      	b.n	5662 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    55f6:	9b01      	ldr	r3, [sp, #4]
    55f8:	695a      	ldr	r2, [r3, #20]
    55fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    55fe:	00db      	lsls	r3, r3, #3
    5600:	4413      	add	r3, r2
    5602:	781b      	ldrb	r3, [r3, #0]
    5604:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5608:	f89d 300c 	ldrb.w	r3, [sp, #12]
    560c:	4a1f      	ldr	r2, [pc, #124]	; (568c <Port_Ipw_Init+0xac>)
    560e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5612:	9b01      	ldr	r3, [sp, #4]
    5614:	695a      	ldr	r2, [r3, #20]
    5616:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    561a:	00db      	lsls	r3, r3, #3
    561c:	4413      	add	r3, r2
    561e:	4619      	mov	r1, r3
    5620:	f7ff fe39 	bl	5296 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5624:	f004 f864 	bl	96f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5628:	f89d 300c 	ldrb.w	r3, [sp, #12]
    562c:	4a17      	ldr	r2, [pc, #92]	; (568c <Port_Ipw_Init+0xac>)
    562e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5632:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5636:	9b01      	ldr	r3, [sp, #4]
    5638:	695a      	ldr	r2, [r3, #20]
    563a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    563e:	00db      	lsls	r3, r3, #3
    5640:	4413      	add	r3, r2
    5642:	685a      	ldr	r2, [r3, #4]
    5644:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5648:	4810      	ldr	r0, [pc, #64]	; (568c <Port_Ipw_Init+0xac>)
    564a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    564e:	430a      	orrs	r2, r1
    5650:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5654:	f004 f878 	bl	9748 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5658:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    565c:	3301      	adds	r3, #1
    565e:	f8ad 300e 	strh.w	r3, [sp, #14]
    5662:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5666:	b29b      	uxth	r3, r3
    5668:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    566c:	429a      	cmp	r2, r3
    566e:	d3c2      	bcc.n	55f6 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5670:	9b01      	ldr	r3, [sp, #4]
    5672:	6a1b      	ldr	r3, [r3, #32]
    5674:	4619      	mov	r1, r3
    5676:	2002      	movs	r0, #2
    5678:	f7ff fd98 	bl	51ac <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    567c:	9801      	ldr	r0, [sp, #4]
    567e:	f7ff fe75 	bl	536c <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5682:	bf00      	nop
    5684:	b005      	add	sp, #20
    5686:	f85d fb04 	ldr.w	pc, [sp], #4
    568a:	bf00      	nop
    568c:	0000bd38 	.word	0x0000bd38

00005690 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5690:	b500      	push	{lr}
    5692:	b085      	sub	sp, #20
    5694:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    5696:	9b01      	ldr	r3, [sp, #4]
    5698:	881b      	ldrh	r3, [r3, #0]
    569a:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    569e:	2300      	movs	r3, #0
    56a0:	f8ad 300e 	strh.w	r3, [sp, #14]
    56a4:	e0d2      	b.n	584c <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    56a6:	9b01      	ldr	r3, [sp, #4]
    56a8:	68d9      	ldr	r1, [r3, #12]
    56aa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56ae:	4613      	mov	r3, r2
    56b0:	009b      	lsls	r3, r3, #2
    56b2:	4413      	add	r3, r2
    56b4:	009b      	lsls	r3, r3, #2
    56b6:	440b      	add	r3, r1
    56b8:	7c5b      	ldrb	r3, [r3, #17]
    56ba:	f083 0301 	eor.w	r3, r3, #1
    56be:	b2db      	uxtb	r3, r3
    56c0:	2b00      	cmp	r3, #0
    56c2:	f000 80be 	beq.w	5842 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    56c6:	9b01      	ldr	r3, [sp, #4]
    56c8:	68d9      	ldr	r1, [r3, #12]
    56ca:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56ce:	4613      	mov	r3, r2
    56d0:	009b      	lsls	r3, r3, #2
    56d2:	4413      	add	r3, r2
    56d4:	009b      	lsls	r3, r3, #2
    56d6:	440b      	add	r3, r1
    56d8:	7c1b      	ldrb	r3, [r3, #16]
    56da:	2b00      	cmp	r3, #0
    56dc:	f000 80b1 	beq.w	5842 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    56e0:	9b01      	ldr	r3, [sp, #4]
    56e2:	68d9      	ldr	r1, [r3, #12]
    56e4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56e8:	4613      	mov	r3, r2
    56ea:	009b      	lsls	r3, r3, #2
    56ec:	4413      	add	r3, r2
    56ee:	009b      	lsls	r3, r3, #2
    56f0:	440b      	add	r3, r1
    56f2:	881b      	ldrh	r3, [r3, #0]
    56f4:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    56f8:	9b01      	ldr	r3, [sp, #4]
    56fa:	68d9      	ldr	r1, [r3, #12]
    56fc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5700:	4613      	mov	r3, r2
    5702:	009b      	lsls	r3, r3, #2
    5704:	4413      	add	r3, r2
    5706:	009b      	lsls	r3, r3, #2
    5708:	440b      	add	r3, r1
    570a:	68db      	ldr	r3, [r3, #12]
    570c:	2b02      	cmp	r3, #2
    570e:	d11d      	bne.n	574c <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5710:	f004 f936 	bl	9980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5714:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5718:	095b      	lsrs	r3, r3, #5
    571a:	b29b      	uxth	r3, r3
    571c:	461a      	mov	r2, r3
    571e:	4b51      	ldr	r3, [pc, #324]	; (5864 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5724:	6959      	ldr	r1, [r3, #20]
    5726:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    572a:	f003 031f 	and.w	r3, r3, #31
    572e:	2201      	movs	r2, #1
    5730:	409a      	lsls	r2, r3
    5732:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5736:	095b      	lsrs	r3, r3, #5
    5738:	b29b      	uxth	r3, r3
    573a:	4618      	mov	r0, r3
    573c:	4b49      	ldr	r3, [pc, #292]	; (5864 <Port_Ipw_RefreshPortDirection+0x1d4>)
    573e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5742:	430a      	orrs	r2, r1
    5744:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5746:	f004 f947 	bl	99d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    574a:	e07a      	b.n	5842 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    574c:	9b01      	ldr	r3, [sp, #4]
    574e:	68d9      	ldr	r1, [r3, #12]
    5750:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5754:	4613      	mov	r3, r2
    5756:	009b      	lsls	r3, r3, #2
    5758:	4413      	add	r3, r2
    575a:	009b      	lsls	r3, r3, #2
    575c:	440b      	add	r3, r1
    575e:	68db      	ldr	r3, [r3, #12]
    5760:	2b01      	cmp	r3, #1
    5762:	d00b      	beq.n	577c <Port_Ipw_RefreshPortDirection+0xec>
    5764:	9b01      	ldr	r3, [sp, #4]
    5766:	68d9      	ldr	r1, [r3, #12]
    5768:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    576c:	4613      	mov	r3, r2
    576e:	009b      	lsls	r3, r3, #2
    5770:	4413      	add	r3, r2
    5772:	009b      	lsls	r3, r3, #2
    5774:	440b      	add	r3, r1
    5776:	68db      	ldr	r3, [r3, #12]
    5778:	2b03      	cmp	r3, #3
    577a:	d162      	bne.n	5842 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    577c:	f004 f900 	bl	9980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5780:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5784:	095b      	lsrs	r3, r3, #5
    5786:	b29b      	uxth	r3, r3
    5788:	461a      	mov	r2, r3
    578a:	4b36      	ldr	r3, [pc, #216]	; (5864 <Port_Ipw_RefreshPortDirection+0x1d4>)
    578c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5790:	6959      	ldr	r1, [r3, #20]
    5792:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5796:	f003 031f 	and.w	r3, r3, #31
    579a:	2201      	movs	r2, #1
    579c:	fa02 f303 	lsl.w	r3, r2, r3
    57a0:	43da      	mvns	r2, r3
    57a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57a6:	095b      	lsrs	r3, r3, #5
    57a8:	b29b      	uxth	r3, r3
    57aa:	4618      	mov	r0, r3
    57ac:	4b2d      	ldr	r3, [pc, #180]	; (5864 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    57b2:	400a      	ands	r2, r1
    57b4:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    57b6:	f004 f90f 	bl	99d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    57ba:	f004 f933 	bl	9a24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    57be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57c2:	095b      	lsrs	r3, r3, #5
    57c4:	b29b      	uxth	r3, r3
    57c6:	461a      	mov	r2, r3
    57c8:	4b26      	ldr	r3, [pc, #152]	; (5864 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57ce:	6999      	ldr	r1, [r3, #24]
    57d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57d4:	f003 031f 	and.w	r3, r3, #31
    57d8:	2201      	movs	r2, #1
    57da:	fa02 f303 	lsl.w	r3, r2, r3
    57de:	43da      	mvns	r2, r3
    57e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57e4:	095b      	lsrs	r3, r3, #5
    57e6:	b29b      	uxth	r3, r3
    57e8:	4618      	mov	r0, r3
    57ea:	4b1e      	ldr	r3, [pc, #120]	; (5864 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    57f0:	400a      	ands	r2, r1
    57f2:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    57f4:	9b01      	ldr	r3, [sp, #4]
    57f6:	68d9      	ldr	r1, [r3, #12]
    57f8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    57fc:	4613      	mov	r3, r2
    57fe:	009b      	lsls	r3, r3, #2
    5800:	4413      	add	r3, r2
    5802:	009b      	lsls	r3, r3, #2
    5804:	440b      	add	r3, r1
    5806:	68db      	ldr	r3, [r3, #12]
    5808:	2b03      	cmp	r3, #3
    580a:	d118      	bne.n	583e <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    580c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5810:	095b      	lsrs	r3, r3, #5
    5812:	b29b      	uxth	r3, r3
    5814:	461a      	mov	r2, r3
    5816:	4b13      	ldr	r3, [pc, #76]	; (5864 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    581c:	6999      	ldr	r1, [r3, #24]
    581e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5822:	f003 031f 	and.w	r3, r3, #31
    5826:	2201      	movs	r2, #1
    5828:	409a      	lsls	r2, r3
    582a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    582e:	095b      	lsrs	r3, r3, #5
    5830:	b29b      	uxth	r3, r3
    5832:	4618      	mov	r0, r3
    5834:	4b0b      	ldr	r3, [pc, #44]	; (5864 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5836:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    583a:	430a      	orrs	r2, r1
    583c:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    583e:	f004 f91d 	bl	9a7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5842:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5846:	3301      	adds	r3, #1
    5848:	f8ad 300e 	strh.w	r3, [sp, #14]
    584c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5850:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5854:	429a      	cmp	r2, r3
    5856:	f4ff af26 	bcc.w	56a6 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    585a:	bf00      	nop
    585c:	bf00      	nop
    585e:	b005      	add	sp, #20
    5860:	f85d fb04 	ldr.w	pc, [sp], #4
    5864:	0000bd4c 	.word	0x0000bd4c

00005868 <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    5868:	b082      	sub	sp, #8
    586a:	9001      	str	r0, [sp, #4]
    586c:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    586e:	9b01      	ldr	r3, [sp, #4]
    5870:	681b      	ldr	r3, [r3, #0]
    5872:	f023 0207 	bic.w	r2, r3, #7
    5876:	9b00      	ldr	r3, [sp, #0]
    5878:	f003 0307 	and.w	r3, r3, #7
    587c:	431a      	orrs	r2, r3
    587e:	9b01      	ldr	r3, [sp, #4]
    5880:	601a      	str	r2, [r3, #0]
}
    5882:	bf00      	nop
    5884:	b002      	add	sp, #8
    5886:	4770      	bx	lr

00005888 <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    5888:	b082      	sub	sp, #8
    588a:	9001      	str	r0, [sp, #4]
    588c:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    588e:	9b01      	ldr	r3, [sp, #4]
    5890:	681b      	ldr	r3, [r3, #0]
    5892:	f023 0218 	bic.w	r2, r3, #24
    5896:	9b00      	ldr	r3, [sp, #0]
    5898:	00db      	lsls	r3, r3, #3
    589a:	f003 0318 	and.w	r3, r3, #24
    589e:	431a      	orrs	r2, r3
    58a0:	9b01      	ldr	r3, [sp, #4]
    58a2:	601a      	str	r2, [r3, #0]
}
    58a4:	bf00      	nop
    58a6:	b002      	add	sp, #8
    58a8:	4770      	bx	lr

000058aa <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    58aa:	b082      	sub	sp, #8
    58ac:	9001      	str	r0, [sp, #4]
    58ae:	460b      	mov	r3, r1
    58b0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    58b4:	9b01      	ldr	r3, [sp, #4]
    58b6:	681b      	ldr	r3, [r3, #0]
    58b8:	f023 0320 	bic.w	r3, r3, #32
    58bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    58c0:	2a00      	cmp	r2, #0
    58c2:	d001      	beq.n	58c8 <Ftm_Pwm_Ip_SetCpwms+0x1e>
    58c4:	2220      	movs	r2, #32
    58c6:	e000      	b.n	58ca <Ftm_Pwm_Ip_SetCpwms+0x20>
    58c8:	2200      	movs	r2, #0
    58ca:	431a      	orrs	r2, r3
    58cc:	9b01      	ldr	r3, [sp, #4]
    58ce:	601a      	str	r2, [r3, #0]
}
    58d0:	bf00      	nop
    58d2:	b002      	add	sp, #8
    58d4:	4770      	bx	lr

000058d6 <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    58d6:	b082      	sub	sp, #8
    58d8:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    58da:	9b01      	ldr	r3, [sp, #4]
    58dc:	681b      	ldr	r3, [r3, #0]
    58de:	f003 0320 	and.w	r3, r3, #32
    58e2:	2b00      	cmp	r3, #0
    58e4:	bf14      	ite	ne
    58e6:	2301      	movne	r3, #1
    58e8:	2300      	moveq	r3, #0
    58ea:	b2db      	uxtb	r3, r3
}
    58ec:	4618      	mov	r0, r3
    58ee:	b002      	add	sp, #8
    58f0:	4770      	bx	lr

000058f2 <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    58f2:	b082      	sub	sp, #8
    58f4:	9001      	str	r0, [sp, #4]
    58f6:	460b      	mov	r3, r1
    58f8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    58fc:	9b01      	ldr	r3, [sp, #4]
    58fe:	681b      	ldr	r3, [r3, #0]
    5900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5904:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5908:	2a00      	cmp	r2, #0
    590a:	d002      	beq.n	5912 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    590c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5910:	e000      	b.n	5914 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    5912:	2200      	movs	r2, #0
    5914:	431a      	orrs	r2, r3
    5916:	9b01      	ldr	r3, [sp, #4]
    5918:	601a      	str	r2, [r3, #0]
}
    591a:	bf00      	nop
    591c:	b002      	add	sp, #8
    591e:	4770      	bx	lr

00005920 <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    5920:	b082      	sub	sp, #8
    5922:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    5924:	9b01      	ldr	r3, [sp, #4]
    5926:	681b      	ldr	r3, [r3, #0]
    5928:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    592c:	9b01      	ldr	r3, [sp, #4]
    592e:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    5930:	bf00      	nop
    5932:	b002      	add	sp, #8
    5934:	4770      	bx	lr

00005936 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    5936:	b082      	sub	sp, #8
    5938:	9001      	str	r0, [sp, #4]
    593a:	460b      	mov	r3, r1
    593c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    5940:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5944:	3310      	adds	r3, #16
    5946:	2201      	movs	r2, #1
    5948:	409a      	lsls	r2, r3
    594a:	9b01      	ldr	r3, [sp, #4]
    594c:	681b      	ldr	r3, [r3, #0]
    594e:	431a      	orrs	r2, r3
    5950:	9b01      	ldr	r3, [sp, #4]
    5952:	601a      	str	r2, [r3, #0]
}
    5954:	bf00      	nop
    5956:	b002      	add	sp, #8
    5958:	4770      	bx	lr

0000595a <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    595a:	b082      	sub	sp, #8
    595c:	9001      	str	r0, [sp, #4]
    595e:	460b      	mov	r3, r1
    5960:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    5964:	9b01      	ldr	r3, [sp, #4]
    5966:	685b      	ldr	r3, [r3, #4]
    5968:	0c1b      	lsrs	r3, r3, #16
    596a:	041b      	lsls	r3, r3, #16
    596c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5970:	431a      	orrs	r2, r3
    5972:	9b01      	ldr	r3, [sp, #4]
    5974:	605a      	str	r2, [r3, #4]
}
    5976:	bf00      	nop
    5978:	b002      	add	sp, #8
    597a:	4770      	bx	lr

0000597c <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    597c:	b082      	sub	sp, #8
    597e:	9001      	str	r0, [sp, #4]
    5980:	460b      	mov	r3, r1
    5982:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    5986:	9b01      	ldr	r3, [sp, #4]
    5988:	689b      	ldr	r3, [r3, #8]
    598a:	0c1b      	lsrs	r3, r3, #16
    598c:	041b      	lsls	r3, r3, #16
    598e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5992:	431a      	orrs	r2, r3
    5994:	9b01      	ldr	r3, [sp, #4]
    5996:	609a      	str	r2, [r3, #8]
}
    5998:	bf00      	nop
    599a:	b002      	add	sp, #8
    599c:	4770      	bx	lr

0000599e <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    599e:	b084      	sub	sp, #16
    59a0:	9001      	str	r0, [sp, #4]
    59a2:	460b      	mov	r3, r1
    59a4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    59a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    59ac:	9a01      	ldr	r2, [sp, #4]
    59ae:	3301      	adds	r3, #1
    59b0:	00db      	lsls	r3, r3, #3
    59b2:	4413      	add	r3, r2
    59b4:	685b      	ldr	r3, [r3, #4]
    59b6:	089b      	lsrs	r3, r3, #2
    59b8:	b2db      	uxtb	r3, r3
    59ba:	f003 0301 	and.w	r3, r3, #1
    59be:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    59c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    59c6:	9a01      	ldr	r2, [sp, #4]
    59c8:	3301      	adds	r3, #1
    59ca:	00db      	lsls	r3, r3, #3
    59cc:	4413      	add	r3, r2
    59ce:	685b      	ldr	r3, [r3, #4]
    59d0:	08db      	lsrs	r3, r3, #3
    59d2:	b2db      	uxtb	r3, r3
    59d4:	005b      	lsls	r3, r3, #1
    59d6:	b2db      	uxtb	r3, r3
    59d8:	f003 0302 	and.w	r3, r3, #2
    59dc:	b2da      	uxtb	r2, r3
    59de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59e2:	4313      	orrs	r3, r2
    59e4:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    59e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    59ec:	4618      	mov	r0, r3
    59ee:	b004      	add	sp, #16
    59f0:	4770      	bx	lr

000059f2 <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    59f2:	b086      	sub	sp, #24
    59f4:	9003      	str	r0, [sp, #12]
    59f6:	460b      	mov	r3, r1
    59f8:	9201      	str	r2, [sp, #4]
    59fa:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    59fe:	9b01      	ldr	r3, [sp, #4]
    5a00:	009b      	lsls	r3, r3, #2
    5a02:	f003 0304 	and.w	r3, r3, #4
    5a06:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    5a08:	9b01      	ldr	r3, [sp, #4]
    5a0a:	009b      	lsls	r3, r3, #2
    5a0c:	f003 0308 	and.w	r3, r3, #8
    5a10:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    5a12:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a16:	9a03      	ldr	r2, [sp, #12]
    5a18:	3301      	adds	r3, #1
    5a1a:	00db      	lsls	r3, r3, #3
    5a1c:	4413      	add	r3, r2
    5a1e:	685b      	ldr	r3, [r3, #4]
    5a20:	f023 0104 	bic.w	r1, r3, #4
    5a24:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a28:	9a05      	ldr	r2, [sp, #20]
    5a2a:	430a      	orrs	r2, r1
    5a2c:	9903      	ldr	r1, [sp, #12]
    5a2e:	3301      	adds	r3, #1
    5a30:	00db      	lsls	r3, r3, #3
    5a32:	440b      	add	r3, r1
    5a34:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    5a36:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a3a:	9a03      	ldr	r2, [sp, #12]
    5a3c:	3301      	adds	r3, #1
    5a3e:	00db      	lsls	r3, r3, #3
    5a40:	4413      	add	r3, r2
    5a42:	685b      	ldr	r3, [r3, #4]
    5a44:	f023 0108 	bic.w	r1, r3, #8
    5a48:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a4c:	9a04      	ldr	r2, [sp, #16]
    5a4e:	430a      	orrs	r2, r1
    5a50:	9903      	ldr	r1, [sp, #12]
    5a52:	3301      	adds	r3, #1
    5a54:	00db      	lsls	r3, r3, #3
    5a56:	440b      	add	r3, r1
    5a58:	605a      	str	r2, [r3, #4]
}
    5a5a:	bf00      	nop
    5a5c:	b006      	add	sp, #24
    5a5e:	4770      	bx	lr

00005a60 <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    5a60:	b086      	sub	sp, #24
    5a62:	9003      	str	r0, [sp, #12]
    5a64:	460b      	mov	r3, r1
    5a66:	9201      	str	r2, [sp, #4]
    5a68:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    5a6c:	9b01      	ldr	r3, [sp, #4]
    5a6e:	009b      	lsls	r3, r3, #2
    5a70:	f003 0310 	and.w	r3, r3, #16
    5a74:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    5a76:	9b01      	ldr	r3, [sp, #4]
    5a78:	009b      	lsls	r3, r3, #2
    5a7a:	f003 0320 	and.w	r3, r3, #32
    5a7e:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    5a80:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a84:	9a03      	ldr	r2, [sp, #12]
    5a86:	3301      	adds	r3, #1
    5a88:	00db      	lsls	r3, r3, #3
    5a8a:	4413      	add	r3, r2
    5a8c:	685b      	ldr	r3, [r3, #4]
    5a8e:	f023 0110 	bic.w	r1, r3, #16
    5a92:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a96:	9a05      	ldr	r2, [sp, #20]
    5a98:	430a      	orrs	r2, r1
    5a9a:	9903      	ldr	r1, [sp, #12]
    5a9c:	3301      	adds	r3, #1
    5a9e:	00db      	lsls	r3, r3, #3
    5aa0:	440b      	add	r3, r1
    5aa2:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    5aa4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5aa8:	9a03      	ldr	r2, [sp, #12]
    5aaa:	3301      	adds	r3, #1
    5aac:	00db      	lsls	r3, r3, #3
    5aae:	4413      	add	r3, r2
    5ab0:	685b      	ldr	r3, [r3, #4]
    5ab2:	f023 0120 	bic.w	r1, r3, #32
    5ab6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5aba:	9a04      	ldr	r2, [sp, #16]
    5abc:	430a      	orrs	r2, r1
    5abe:	9903      	ldr	r1, [sp, #12]
    5ac0:	3301      	adds	r3, #1
    5ac2:	00db      	lsls	r3, r3, #3
    5ac4:	440b      	add	r3, r1
    5ac6:	605a      	str	r2, [r3, #4]
}
    5ac8:	bf00      	nop
    5aca:	b006      	add	sp, #24
    5acc:	4770      	bx	lr

00005ace <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    5ace:	b084      	sub	sp, #16
    5ad0:	9001      	str	r0, [sp, #4]
    5ad2:	460b      	mov	r3, r1
    5ad4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    5ad8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5adc:	9a01      	ldr	r2, [sp, #4]
    5ade:	3301      	adds	r3, #1
    5ae0:	00db      	lsls	r3, r3, #3
    5ae2:	4413      	add	r3, r2
    5ae4:	685b      	ldr	r3, [r3, #4]
    5ae6:	091b      	lsrs	r3, r3, #4
    5ae8:	b2db      	uxtb	r3, r3
    5aea:	f003 0301 	and.w	r3, r3, #1
    5aee:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    5af2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5af6:	9a01      	ldr	r2, [sp, #4]
    5af8:	3301      	adds	r3, #1
    5afa:	00db      	lsls	r3, r3, #3
    5afc:	4413      	add	r3, r2
    5afe:	685b      	ldr	r3, [r3, #4]
    5b00:	095b      	lsrs	r3, r3, #5
    5b02:	b2db      	uxtb	r3, r3
    5b04:	005b      	lsls	r3, r3, #1
    5b06:	b2db      	uxtb	r3, r3
    5b08:	f003 0302 	and.w	r3, r3, #2
    5b0c:	b2da      	uxtb	r2, r3
    5b0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5b12:	4313      	orrs	r3, r2
    5b14:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    5b18:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5b1c:	4618      	mov	r0, r3
    5b1e:	b004      	add	sp, #16
    5b20:	4770      	bx	lr

00005b22 <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    5b22:	b082      	sub	sp, #8
    5b24:	9001      	str	r0, [sp, #4]
    5b26:	460b      	mov	r3, r1
    5b28:	f88d 3003 	strb.w	r3, [sp, #3]
    5b2c:	4613      	mov	r3, r2
    5b2e:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    5b32:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b36:	9a01      	ldr	r2, [sp, #4]
    5b38:	3301      	adds	r3, #1
    5b3a:	00db      	lsls	r3, r3, #3
    5b3c:	4413      	add	r3, r2
    5b3e:	685b      	ldr	r3, [r3, #4]
    5b40:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    5b44:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5b48:	2b00      	cmp	r3, #0
    5b4a:	d001      	beq.n	5b50 <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    5b4c:	2140      	movs	r1, #64	; 0x40
    5b4e:	e000      	b.n	5b52 <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    5b50:	2100      	movs	r1, #0
    5b52:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b56:	430a      	orrs	r2, r1
    5b58:	9901      	ldr	r1, [sp, #4]
    5b5a:	3301      	adds	r3, #1
    5b5c:	00db      	lsls	r3, r3, #3
    5b5e:	440b      	add	r3, r1
    5b60:	605a      	str	r2, [r3, #4]
}
    5b62:	bf00      	nop
    5b64:	b002      	add	sp, #8
    5b66:	4770      	bx	lr

00005b68 <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    5b68:	b082      	sub	sp, #8
    5b6a:	9001      	str	r0, [sp, #4]
    5b6c:	460b      	mov	r3, r1
    5b6e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    5b72:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b76:	9a01      	ldr	r2, [sp, #4]
    5b78:	3301      	adds	r3, #1
    5b7a:	00db      	lsls	r3, r3, #3
    5b7c:	4413      	add	r3, r2
    5b7e:	685a      	ldr	r2, [r3, #4]
    5b80:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    5b88:	9901      	ldr	r1, [sp, #4]
    5b8a:	3301      	adds	r3, #1
    5b8c:	00db      	lsls	r3, r3, #3
    5b8e:	440b      	add	r3, r1
    5b90:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    5b92:	bf00      	nop
    5b94:	b002      	add	sp, #8
    5b96:	4770      	bx	lr

00005b98 <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    5b98:	b082      	sub	sp, #8
    5b9a:	9001      	str	r0, [sp, #4]
    5b9c:	460b      	mov	r3, r1
    5b9e:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    5ba2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ba6:	9a01      	ldr	r2, [sp, #4]
    5ba8:	3301      	adds	r3, #1
    5baa:	00db      	lsls	r3, r3, #3
    5bac:	4413      	add	r3, r2
    5bae:	685b      	ldr	r3, [r3, #4]
    5bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	bf14      	ite	ne
    5bb8:	2301      	movne	r3, #1
    5bba:	2300      	moveq	r3, #0
    5bbc:	b2db      	uxtb	r3, r3
}
    5bbe:	4618      	mov	r0, r3
    5bc0:	b002      	add	sp, #8
    5bc2:	4770      	bx	lr

00005bc4 <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    5bc4:	b082      	sub	sp, #8
    5bc6:	9001      	str	r0, [sp, #4]
    5bc8:	460b      	mov	r3, r1
    5bca:	f88d 3003 	strb.w	r3, [sp, #3]
    5bce:	4613      	mov	r3, r2
    5bd0:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    5bd4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5bd8:	f8bd 2000 	ldrh.w	r2, [sp]
    5bdc:	9901      	ldr	r1, [sp, #4]
    5bde:	3301      	adds	r3, #1
    5be0:	00db      	lsls	r3, r3, #3
    5be2:	440b      	add	r3, r1
    5be4:	609a      	str	r2, [r3, #8]
}
    5be6:	bf00      	nop
    5be8:	b002      	add	sp, #8
    5bea:	4770      	bx	lr

00005bec <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    5bec:	b082      	sub	sp, #8
    5bee:	9001      	str	r0, [sp, #4]
    5bf0:	460b      	mov	r3, r1
    5bf2:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    5bf6:	9b01      	ldr	r3, [sp, #4]
    5bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5bfa:	0c1b      	lsrs	r3, r3, #16
    5bfc:	041b      	lsls	r3, r3, #16
    5bfe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5c02:	431a      	orrs	r2, r3
    5c04:	9b01      	ldr	r3, [sp, #4]
    5c06:	64da      	str	r2, [r3, #76]	; 0x4c
}
    5c08:	bf00      	nop
    5c0a:	b002      	add	sp, #8
    5c0c:	4770      	bx	lr

00005c0e <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    5c0e:	b082      	sub	sp, #8
    5c10:	9001      	str	r0, [sp, #4]
    5c12:	460b      	mov	r3, r1
    5c14:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    5c18:	9b01      	ldr	r3, [sp, #4]
    5c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5c1c:	f023 0301 	bic.w	r3, r3, #1
    5c20:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5c24:	2a00      	cmp	r2, #0
    5c26:	d001      	beq.n	5c2c <Ftm_Pwm_Ip_Enable+0x1e>
    5c28:	2201      	movs	r2, #1
    5c2a:	e000      	b.n	5c2e <Ftm_Pwm_Ip_Enable+0x20>
    5c2c:	2200      	movs	r2, #0
    5c2e:	431a      	orrs	r2, r3
    5c30:	9b01      	ldr	r3, [sp, #4]
    5c32:	655a      	str	r2, [r3, #84]	; 0x54
}
    5c34:	bf00      	nop
    5c36:	b002      	add	sp, #8
    5c38:	4770      	bx	lr

00005c3a <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    5c3a:	b082      	sub	sp, #8
    5c3c:	9001      	str	r0, [sp, #4]
    5c3e:	460b      	mov	r3, r1
    5c40:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    5c44:	9b01      	ldr	r3, [sp, #4]
    5c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5c48:	f023 0308 	bic.w	r3, r3, #8
    5c4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5c50:	2a00      	cmp	r2, #0
    5c52:	d001      	beq.n	5c58 <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    5c54:	2208      	movs	r2, #8
    5c56:	e000      	b.n	5c5a <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    5c58:	2200      	movs	r2, #0
    5c5a:	431a      	orrs	r2, r3
    5c5c:	9b01      	ldr	r3, [sp, #4]
    5c5e:	655a      	str	r2, [r3, #84]	; 0x54
}
    5c60:	bf00      	nop
    5c62:	b002      	add	sp, #8
    5c64:	4770      	bx	lr

00005c66 <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    5c66:	b082      	sub	sp, #8
    5c68:	9001      	str	r0, [sp, #4]
    5c6a:	460b      	mov	r3, r1
    5c6c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    5c70:	9b01      	ldr	r3, [sp, #4]
    5c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5c74:	f023 0301 	bic.w	r3, r3, #1
    5c78:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5c7c:	2a00      	cmp	r2, #0
    5c7e:	d001      	beq.n	5c84 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    5c80:	2201      	movs	r2, #1
    5c82:	e000      	b.n	5c86 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    5c84:	2200      	movs	r2, #0
    5c86:	431a      	orrs	r2, r3
    5c88:	9b01      	ldr	r3, [sp, #4]
    5c8a:	659a      	str	r2, [r3, #88]	; 0x58
}
    5c8c:	bf00      	nop
    5c8e:	b002      	add	sp, #8
    5c90:	4770      	bx	lr

00005c92 <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    5c92:	b082      	sub	sp, #8
    5c94:	9001      	str	r0, [sp, #4]
    5c96:	460b      	mov	r3, r1
    5c98:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    5c9c:	9b01      	ldr	r3, [sp, #4]
    5c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5ca0:	f023 0302 	bic.w	r3, r3, #2
    5ca4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5ca8:	2a00      	cmp	r2, #0
    5caa:	d001      	beq.n	5cb0 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    5cac:	2202      	movs	r2, #2
    5cae:	e000      	b.n	5cb2 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    5cb0:	2200      	movs	r2, #0
    5cb2:	431a      	orrs	r2, r3
    5cb4:	9b01      	ldr	r3, [sp, #4]
    5cb6:	659a      	str	r2, [r3, #88]	; 0x58
}
    5cb8:	bf00      	nop
    5cba:	b002      	add	sp, #8
    5cbc:	4770      	bx	lr

00005cbe <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    5cbe:	b082      	sub	sp, #8
    5cc0:	9001      	str	r0, [sp, #4]
    5cc2:	460b      	mov	r3, r1
    5cc4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    5cc8:	9b01      	ldr	r3, [sp, #4]
    5cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5ccc:	f023 0308 	bic.w	r3, r3, #8
    5cd0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5cd4:	2a00      	cmp	r2, #0
    5cd6:	d001      	beq.n	5cdc <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    5cd8:	2208      	movs	r2, #8
    5cda:	e000      	b.n	5cde <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    5cdc:	2200      	movs	r2, #0
    5cde:	431a      	orrs	r2, r3
    5ce0:	9b01      	ldr	r3, [sp, #4]
    5ce2:	659a      	str	r2, [r3, #88]	; 0x58
}
    5ce4:	bf00      	nop
    5ce6:	b002      	add	sp, #8
    5ce8:	4770      	bx	lr

00005cea <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    5cea:	b082      	sub	sp, #8
    5cec:	9001      	str	r0, [sp, #4]
    5cee:	460b      	mov	r3, r1
    5cf0:	f88d 3003 	strb.w	r3, [sp, #3]
    5cf4:	4613      	mov	r3, r2
    5cf6:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5cfa:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5cfe:	2b00      	cmp	r3, #0
    5d00:	d00a      	beq.n	5d18 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    5d02:	9b01      	ldr	r3, [sp, #4]
    5d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    5d06:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5d0a:	2110      	movs	r1, #16
    5d0c:	fa01 f303 	lsl.w	r3, r1, r3
    5d10:	431a      	orrs	r2, r3
    5d12:	9b01      	ldr	r3, [sp, #4]
    5d14:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    5d16:	e00a      	b.n	5d2e <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    5d18:	9b01      	ldr	r3, [sp, #4]
    5d1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    5d1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5d20:	2110      	movs	r1, #16
    5d22:	fa01 f303 	lsl.w	r3, r1, r3
    5d26:	43db      	mvns	r3, r3
    5d28:	401a      	ands	r2, r3
    5d2a:	9b01      	ldr	r3, [sp, #4]
    5d2c:	659a      	str	r2, [r3, #88]	; 0x58
}
    5d2e:	bf00      	nop
    5d30:	b002      	add	sp, #8
    5d32:	4770      	bx	lr

00005d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    5d34:	b082      	sub	sp, #8
    5d36:	9001      	str	r0, [sp, #4]
    5d38:	460b      	mov	r3, r1
    5d3a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    5d3e:	9b01      	ldr	r3, [sp, #4]
    5d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5d46:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5d4a:	2a00      	cmp	r2, #0
    5d4c:	d001      	beq.n	5d52 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    5d4e:	2280      	movs	r2, #128	; 0x80
    5d50:	e000      	b.n	5d54 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    5d52:	2200      	movs	r2, #0
    5d54:	431a      	orrs	r2, r3
    5d56:	9b01      	ldr	r3, [sp, #4]
    5d58:	659a      	str	r2, [r3, #88]	; 0x58
}
    5d5a:	bf00      	nop
    5d5c:	b002      	add	sp, #8
    5d5e:	4770      	bx	lr

00005d60 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    5d60:	b084      	sub	sp, #16
    5d62:	9003      	str	r0, [sp, #12]
    5d64:	460b      	mov	r3, r1
    5d66:	9201      	str	r2, [sp, #4]
    5d68:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    5d6c:	9b01      	ldr	r3, [sp, #4]
    5d6e:	2b01      	cmp	r3, #1
    5d70:	d10a      	bne.n	5d88 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    5d72:	9b03      	ldr	r3, [sp, #12]
    5d74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    5d76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5d7a:	2101      	movs	r1, #1
    5d7c:	fa01 f303 	lsl.w	r3, r1, r3
    5d80:	431a      	orrs	r2, r3
    5d82:	9b03      	ldr	r3, [sp, #12]
    5d84:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    5d86:	e00a      	b.n	5d9e <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    5d88:	9b03      	ldr	r3, [sp, #12]
    5d8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    5d8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5d90:	2101      	movs	r1, #1
    5d92:	fa01 f303 	lsl.w	r3, r1, r3
    5d96:	43db      	mvns	r3, r3
    5d98:	401a      	ands	r2, r3
    5d9a:	9b03      	ldr	r3, [sp, #12]
    5d9c:	65da      	str	r2, [r3, #92]	; 0x5c
}
    5d9e:	bf00      	nop
    5da0:	b004      	add	sp, #16
    5da2:	4770      	bx	lr

00005da4 <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    5da4:	b082      	sub	sp, #8
    5da6:	9001      	str	r0, [sp, #4]
    5da8:	460b      	mov	r3, r1
    5daa:	f88d 3003 	strb.w	r3, [sp, #3]
    5dae:	4613      	mov	r3, r2
    5db0:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    5db4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5db8:	2b00      	cmp	r3, #0
    5dba:	d00a      	beq.n	5dd2 <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    5dbc:	9b01      	ldr	r3, [sp, #4]
    5dbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5dc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5dc4:	2101      	movs	r1, #1
    5dc6:	fa01 f303 	lsl.w	r3, r1, r3
    5dca:	431a      	orrs	r2, r3
    5dcc:	9b01      	ldr	r3, [sp, #4]
    5dce:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    5dd0:	e00a      	b.n	5de8 <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    5dd2:	9b01      	ldr	r3, [sp, #4]
    5dd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5dd6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5dda:	2101      	movs	r1, #1
    5ddc:	fa01 f303 	lsl.w	r3, r1, r3
    5de0:	43db      	mvns	r3, r3
    5de2:	401a      	ands	r2, r3
    5de4:	9b01      	ldr	r3, [sp, #4]
    5de6:	661a      	str	r2, [r3, #96]	; 0x60
}
    5de8:	bf00      	nop
    5dea:	b002      	add	sp, #8
    5dec:	4770      	bx	lr

00005dee <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    5dee:	b082      	sub	sp, #8
    5df0:	9001      	str	r0, [sp, #4]
    5df2:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    5df4:	9b01      	ldr	r3, [sp, #4]
    5df6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5df8:	9b00      	ldr	r3, [sp, #0]
    5dfa:	43db      	mvns	r3, r3
    5dfc:	401a      	ands	r2, r3
    5dfe:	9b00      	ldr	r3, [sp, #0]
    5e00:	431a      	orrs	r2, r3
    5e02:	9b01      	ldr	r3, [sp, #4]
    5e04:	661a      	str	r2, [r3, #96]	; 0x60
}
    5e06:	bf00      	nop
    5e08:	b002      	add	sp, #8
    5e0a:	4770      	bx	lr

00005e0c <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    5e0c:	b082      	sub	sp, #8
    5e0e:	9001      	str	r0, [sp, #4]
    5e10:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    5e12:	9b01      	ldr	r3, [sp, #4]
    5e14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5e16:	9b00      	ldr	r3, [sp, #0]
    5e18:	43db      	mvns	r3, r3
    5e1a:	401a      	ands	r2, r3
    5e1c:	9b01      	ldr	r3, [sp, #4]
    5e1e:	661a      	str	r2, [r3, #96]	; 0x60
}
    5e20:	bf00      	nop
    5e22:	b002      	add	sp, #8
    5e24:	4770      	bx	lr

00005e26 <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    5e26:	b082      	sub	sp, #8
    5e28:	9001      	str	r0, [sp, #4]
    5e2a:	460b      	mov	r3, r1
    5e2c:	f88d 3003 	strb.w	r3, [sp, #3]
    5e30:	4613      	mov	r3, r2
    5e32:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5e36:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5e3a:	2b00      	cmp	r3, #0
    5e3c:	d00b      	beq.n	5e56 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5e3e:	9b01      	ldr	r3, [sp, #4]
    5e40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5e42:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e46:	00db      	lsls	r3, r3, #3
    5e48:	2101      	movs	r1, #1
    5e4a:	fa01 f303 	lsl.w	r3, r1, r3
    5e4e:	431a      	orrs	r2, r3
    5e50:	9b01      	ldr	r3, [sp, #4]
    5e52:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5e54:	e00b      	b.n	5e6e <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5e56:	9b01      	ldr	r3, [sp, #4]
    5e58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5e5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e5e:	00db      	lsls	r3, r3, #3
    5e60:	2101      	movs	r1, #1
    5e62:	fa01 f303 	lsl.w	r3, r1, r3
    5e66:	43db      	mvns	r3, r3
    5e68:	401a      	ands	r2, r3
    5e6a:	9b01      	ldr	r3, [sp, #4]
    5e6c:	665a      	str	r2, [r3, #100]	; 0x64
}
    5e6e:	bf00      	nop
    5e70:	b002      	add	sp, #8
    5e72:	4770      	bx	lr

00005e74 <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    5e74:	b082      	sub	sp, #8
    5e76:	9001      	str	r0, [sp, #4]
    5e78:	460b      	mov	r3, r1
    5e7a:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    5e7e:	9b01      	ldr	r3, [sp, #4]
    5e80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5e82:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e86:	00db      	lsls	r3, r3, #3
    5e88:	fa22 f303 	lsr.w	r3, r2, r3
    5e8c:	f003 0301 	and.w	r3, r3, #1
    5e90:	2b00      	cmp	r3, #0
    5e92:	bf14      	ite	ne
    5e94:	2301      	movne	r3, #1
    5e96:	2300      	moveq	r3, #0
    5e98:	b2db      	uxtb	r3, r3
}
    5e9a:	4618      	mov	r0, r3
    5e9c:	b002      	add	sp, #8
    5e9e:	4770      	bx	lr

00005ea0 <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    5ea0:	b082      	sub	sp, #8
    5ea2:	9001      	str	r0, [sp, #4]
    5ea4:	460b      	mov	r3, r1
    5ea6:	f88d 3003 	strb.w	r3, [sp, #3]
    5eaa:	4613      	mov	r3, r2
    5eac:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    5eb0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5eb4:	2b00      	cmp	r3, #0
    5eb6:	d00b      	beq.n	5ed0 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5eb8:	9b01      	ldr	r3, [sp, #4]
    5eba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5ebc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ec0:	00db      	lsls	r3, r3, #3
    5ec2:	2102      	movs	r1, #2
    5ec4:	fa01 f303 	lsl.w	r3, r1, r3
    5ec8:	431a      	orrs	r2, r3
    5eca:	9b01      	ldr	r3, [sp, #4]
    5ecc:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5ece:	e00b      	b.n	5ee8 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5ed0:	9b01      	ldr	r3, [sp, #4]
    5ed2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5ed4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ed8:	00db      	lsls	r3, r3, #3
    5eda:	2102      	movs	r1, #2
    5edc:	fa01 f303 	lsl.w	r3, r1, r3
    5ee0:	43db      	mvns	r3, r3
    5ee2:	401a      	ands	r2, r3
    5ee4:	9b01      	ldr	r3, [sp, #4]
    5ee6:	665a      	str	r2, [r3, #100]	; 0x64
}
    5ee8:	bf00      	nop
    5eea:	b002      	add	sp, #8
    5eec:	4770      	bx	lr

00005eee <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    5eee:	b082      	sub	sp, #8
    5ef0:	9001      	str	r0, [sp, #4]
    5ef2:	460b      	mov	r3, r1
    5ef4:	f88d 3003 	strb.w	r3, [sp, #3]
    5ef8:	4613      	mov	r3, r2
    5efa:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5efe:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5f02:	2b00      	cmp	r3, #0
    5f04:	d00b      	beq.n	5f1e <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5f06:	9b01      	ldr	r3, [sp, #4]
    5f08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f0e:	00db      	lsls	r3, r3, #3
    5f10:	2110      	movs	r1, #16
    5f12:	fa01 f303 	lsl.w	r3, r1, r3
    5f16:	431a      	orrs	r2, r3
    5f18:	9b01      	ldr	r3, [sp, #4]
    5f1a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5f1c:	e00b      	b.n	5f36 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5f1e:	9b01      	ldr	r3, [sp, #4]
    5f20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f22:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f26:	00db      	lsls	r3, r3, #3
    5f28:	2110      	movs	r1, #16
    5f2a:	fa01 f303 	lsl.w	r3, r1, r3
    5f2e:	43db      	mvns	r3, r3
    5f30:	401a      	ands	r2, r3
    5f32:	9b01      	ldr	r3, [sp, #4]
    5f34:	665a      	str	r2, [r3, #100]	; 0x64
}
    5f36:	bf00      	nop
    5f38:	b002      	add	sp, #8
    5f3a:	4770      	bx	lr

00005f3c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    5f3c:	b082      	sub	sp, #8
    5f3e:	9001      	str	r0, [sp, #4]
    5f40:	460b      	mov	r3, r1
    5f42:	f88d 3003 	strb.w	r3, [sp, #3]
    5f46:	4613      	mov	r3, r2
    5f48:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5f4c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5f50:	2b00      	cmp	r3, #0
    5f52:	d00b      	beq.n	5f6c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5f54:	9b01      	ldr	r3, [sp, #4]
    5f56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f58:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f5c:	00db      	lsls	r3, r3, #3
    5f5e:	2120      	movs	r1, #32
    5f60:	fa01 f303 	lsl.w	r3, r1, r3
    5f64:	431a      	orrs	r2, r3
    5f66:	9b01      	ldr	r3, [sp, #4]
    5f68:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5f6a:	e00b      	b.n	5f84 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5f6c:	9b01      	ldr	r3, [sp, #4]
    5f6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f70:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f74:	00db      	lsls	r3, r3, #3
    5f76:	2120      	movs	r1, #32
    5f78:	fa01 f303 	lsl.w	r3, r1, r3
    5f7c:	43db      	mvns	r3, r3
    5f7e:	401a      	ands	r2, r3
    5f80:	9b01      	ldr	r3, [sp, #4]
    5f82:	665a      	str	r2, [r3, #100]	; 0x64
}
    5f84:	bf00      	nop
    5f86:	b002      	add	sp, #8
    5f88:	4770      	bx	lr

00005f8a <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    5f8a:	b082      	sub	sp, #8
    5f8c:	9001      	str	r0, [sp, #4]
    5f8e:	460b      	mov	r3, r1
    5f90:	f88d 3003 	strb.w	r3, [sp, #3]
    5f94:	4613      	mov	r3, r2
    5f96:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5f9a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d00b      	beq.n	5fba <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5fa2:	9b01      	ldr	r3, [sp, #4]
    5fa4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5fa6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5faa:	00db      	lsls	r3, r3, #3
    5fac:	2180      	movs	r1, #128	; 0x80
    5fae:	fa01 f303 	lsl.w	r3, r1, r3
    5fb2:	431a      	orrs	r2, r3
    5fb4:	9b01      	ldr	r3, [sp, #4]
    5fb6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5fb8:	e00b      	b.n	5fd2 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5fba:	9b01      	ldr	r3, [sp, #4]
    5fbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5fbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5fc2:	00db      	lsls	r3, r3, #3
    5fc4:	2180      	movs	r1, #128	; 0x80
    5fc6:	fa01 f303 	lsl.w	r3, r1, r3
    5fca:	43db      	mvns	r3, r3
    5fcc:	401a      	ands	r2, r3
    5fce:	9b01      	ldr	r3, [sp, #4]
    5fd0:	665a      	str	r2, [r3, #100]	; 0x64
}
    5fd2:	bf00      	nop
    5fd4:	b002      	add	sp, #8
    5fd6:	4770      	bx	lr

00005fd8 <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    5fd8:	b082      	sub	sp, #8
    5fda:	9001      	str	r0, [sp, #4]
    5fdc:	460b      	mov	r3, r1
    5fde:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    5fe2:	9b01      	ldr	r3, [sp, #4]
    5fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    5fe6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    5fea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5ff2:	431a      	orrs	r2, r3
    5ff4:	9b01      	ldr	r3, [sp, #4]
    5ff6:	669a      	str	r2, [r3, #104]	; 0x68
}
    5ff8:	bf00      	nop
    5ffa:	b002      	add	sp, #8
    5ffc:	4770      	bx	lr

00005ffe <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    5ffe:	b082      	sub	sp, #8
    6000:	9001      	str	r0, [sp, #4]
    6002:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    6004:	9b01      	ldr	r3, [sp, #4]
    6006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    6008:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    600c:	9b00      	ldr	r3, [sp, #0]
    600e:	b2db      	uxtb	r3, r3
    6010:	019b      	lsls	r3, r3, #6
    6012:	b2db      	uxtb	r3, r3
    6014:	431a      	orrs	r2, r3
    6016:	9b01      	ldr	r3, [sp, #4]
    6018:	669a      	str	r2, [r3, #104]	; 0x68
}
    601a:	bf00      	nop
    601c:	b002      	add	sp, #8
    601e:	4770      	bx	lr

00006020 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    6020:	b082      	sub	sp, #8
    6022:	9001      	str	r0, [sp, #4]
    6024:	460b      	mov	r3, r1
    6026:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    602a:	9b01      	ldr	r3, [sp, #4]
    602c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    602e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    6032:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6036:	041b      	lsls	r3, r3, #16
    6038:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    603c:	431a      	orrs	r2, r3
    603e:	9b01      	ldr	r3, [sp, #4]
    6040:	669a      	str	r2, [r3, #104]	; 0x68
}
    6042:	bf00      	nop
    6044:	b002      	add	sp, #8
    6046:	4770      	bx	lr

00006048 <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    6048:	b082      	sub	sp, #8
    604a:	9001      	str	r0, [sp, #4]
    604c:	460b      	mov	r3, r1
    604e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    6052:	9b01      	ldr	r3, [sp, #4]
    6054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    6056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    605a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    605e:	2a00      	cmp	r2, #0
    6060:	d001      	beq.n	6066 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    6062:	2240      	movs	r2, #64	; 0x40
    6064:	e000      	b.n	6068 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    6066:	2200      	movs	r2, #0
    6068:	431a      	orrs	r2, r3
    606a:	9b01      	ldr	r3, [sp, #4]
    606c:	66da      	str	r2, [r3, #108]	; 0x6c
}
    606e:	bf00      	nop
    6070:	b002      	add	sp, #8
    6072:	4770      	bx	lr

00006074 <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    6074:	b082      	sub	sp, #8
    6076:	9001      	str	r0, [sp, #4]
    6078:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    607a:	9b01      	ldr	r3, [sp, #4]
    607c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    607e:	9b00      	ldr	r3, [sp, #0]
    6080:	43db      	mvns	r3, r3
    6082:	401a      	ands	r2, r3
    6084:	9b01      	ldr	r3, [sp, #4]
    6086:	66da      	str	r2, [r3, #108]	; 0x6c
}
    6088:	bf00      	nop
    608a:	b002      	add	sp, #8
    608c:	4770      	bx	lr

0000608e <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    608e:	b082      	sub	sp, #8
    6090:	9001      	str	r0, [sp, #4]
    6092:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    6094:	9b01      	ldr	r3, [sp, #4]
    6096:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    6098:	9b00      	ldr	r3, [sp, #0]
    609a:	43db      	mvns	r3, r3
    609c:	401a      	ands	r2, r3
    609e:	9b00      	ldr	r3, [sp, #0]
    60a0:	431a      	orrs	r2, r3
    60a2:	9b01      	ldr	r3, [sp, #4]
    60a4:	66da      	str	r2, [r3, #108]	; 0x6c
}
    60a6:	bf00      	nop
    60a8:	b002      	add	sp, #8
    60aa:	4770      	bx	lr

000060ac <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    60ac:	b084      	sub	sp, #16
    60ae:	9003      	str	r0, [sp, #12]
    60b0:	460b      	mov	r3, r1
    60b2:	9201      	str	r2, [sp, #4]
    60b4:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    60b8:	9b01      	ldr	r3, [sp, #4]
    60ba:	2b00      	cmp	r3, #0
    60bc:	d10b      	bne.n	60d6 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    60be:	9b03      	ldr	r3, [sp, #12]
    60c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    60c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    60c6:	2101      	movs	r1, #1
    60c8:	fa01 f303 	lsl.w	r3, r1, r3
    60cc:	43db      	mvns	r3, r3
    60ce:	401a      	ands	r2, r3
    60d0:	9b03      	ldr	r3, [sp, #12]
    60d2:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    60d4:	e009      	b.n	60ea <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    60d6:	9b03      	ldr	r3, [sp, #12]
    60d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    60da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    60de:	2101      	movs	r1, #1
    60e0:	fa01 f303 	lsl.w	r3, r1, r3
    60e4:	431a      	orrs	r2, r3
    60e6:	9b03      	ldr	r3, [sp, #12]
    60e8:	671a      	str	r2, [r3, #112]	; 0x70
}
    60ea:	bf00      	nop
    60ec:	b004      	add	sp, #16
    60ee:	4770      	bx	lr

000060f0 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    60f0:	b082      	sub	sp, #8
    60f2:	9001      	str	r0, [sp, #4]
    60f4:	460b      	mov	r3, r1
    60f6:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    60fa:	9b01      	ldr	r3, [sp, #4]
    60fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    60fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6102:	fa22 f303 	lsr.w	r3, r2, r3
    6106:	f003 0301 	and.w	r3, r3, #1
    610a:	2b01      	cmp	r3, #1
    610c:	bf0c      	ite	eq
    610e:	2301      	moveq	r3, #1
    6110:	2300      	movne	r3, #0
    6112:	b2db      	uxtb	r3, r3
}
    6114:	4618      	mov	r0, r3
    6116:	b002      	add	sp, #8
    6118:	4770      	bx	lr

0000611a <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    611a:	b082      	sub	sp, #8
    611c:	9001      	str	r0, [sp, #4]
    611e:	460b      	mov	r3, r1
    6120:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    6124:	9b01      	ldr	r3, [sp, #4]
    6126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    612a:	f023 021f 	bic.w	r2, r3, #31
    612e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6132:	f003 031f 	and.w	r3, r3, #31
    6136:	431a      	orrs	r2, r3
    6138:	9b01      	ldr	r3, [sp, #4]
    613a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    613e:	bf00      	nop
    6140:	b002      	add	sp, #8
    6142:	4770      	bx	lr

00006144 <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    6144:	b082      	sub	sp, #8
    6146:	9001      	str	r0, [sp, #4]
    6148:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    614a:	9b01      	ldr	r3, [sp, #4]
    614c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    6150:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    6154:	9b00      	ldr	r3, [sp, #0]
    6156:	019b      	lsls	r3, r3, #6
    6158:	b2db      	uxtb	r3, r3
    615a:	431a      	orrs	r2, r3
    615c:	9b01      	ldr	r3, [sp, #4]
    615e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    6162:	bf00      	nop
    6164:	b002      	add	sp, #8
    6166:	4770      	bx	lr

00006168 <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    6168:	b082      	sub	sp, #8
    616a:	9001      	str	r0, [sp, #4]
    616c:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    616e:	9b01      	ldr	r3, [sp, #4]
    6170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    6174:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    6178:	9b00      	ldr	r3, [sp, #0]
    617a:	02db      	lsls	r3, r3, #11
    617c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    6180:	431a      	orrs	r2, r3
    6182:	9b01      	ldr	r3, [sp, #4]
    6184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    6188:	bf00      	nop
    618a:	b002      	add	sp, #8
    618c:	4770      	bx	lr

0000618e <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    618e:	b082      	sub	sp, #8
    6190:	9001      	str	r0, [sp, #4]
    6192:	460b      	mov	r3, r1
    6194:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    6198:	9b01      	ldr	r3, [sp, #4]
    619a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    619e:	f023 0301 	bic.w	r3, r3, #1
    61a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    61a6:	2a00      	cmp	r2, #0
    61a8:	d001      	beq.n	61ae <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    61aa:	2201      	movs	r2, #1
    61ac:	e000      	b.n	61b0 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    61ae:	2200      	movs	r2, #0
    61b0:	431a      	orrs	r2, r3
    61b2:	9b01      	ldr	r3, [sp, #4]
    61b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    61b8:	bf00      	nop
    61ba:	b002      	add	sp, #8
    61bc:	4770      	bx	lr

000061be <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    61be:	b082      	sub	sp, #8
    61c0:	9001      	str	r0, [sp, #4]
    61c2:	460b      	mov	r3, r1
    61c4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    61c8:	9b01      	ldr	r3, [sp, #4]
    61ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    61ce:	f023 0304 	bic.w	r3, r3, #4
    61d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    61d6:	2a00      	cmp	r2, #0
    61d8:	d001      	beq.n	61de <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    61da:	2204      	movs	r2, #4
    61dc:	e000      	b.n	61e0 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    61de:	2200      	movs	r2, #0
    61e0:	431a      	orrs	r2, r3
    61e2:	9b01      	ldr	r3, [sp, #4]
    61e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    61e8:	bf00      	nop
    61ea:	b002      	add	sp, #8
    61ec:	4770      	bx	lr

000061ee <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    61ee:	b082      	sub	sp, #8
    61f0:	9001      	str	r0, [sp, #4]
    61f2:	460b      	mov	r3, r1
    61f4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    61f8:	9b01      	ldr	r3, [sp, #4]
    61fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    61fe:	f023 0310 	bic.w	r3, r3, #16
    6202:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6206:	2a00      	cmp	r2, #0
    6208:	d001      	beq.n	620e <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    620a:	2210      	movs	r2, #16
    620c:	e000      	b.n	6210 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    620e:	2200      	movs	r2, #0
    6210:	431a      	orrs	r2, r3
    6212:	9b01      	ldr	r3, [sp, #4]
    6214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6218:	bf00      	nop
    621a:	b002      	add	sp, #8
    621c:	4770      	bx	lr

0000621e <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    621e:	b082      	sub	sp, #8
    6220:	9001      	str	r0, [sp, #4]
    6222:	460b      	mov	r3, r1
    6224:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    6228:	9b01      	ldr	r3, [sp, #4]
    622a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    622e:	f023 0320 	bic.w	r3, r3, #32
    6232:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6236:	2a00      	cmp	r2, #0
    6238:	d001      	beq.n	623e <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    623a:	2220      	movs	r2, #32
    623c:	e000      	b.n	6240 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    623e:	2200      	movs	r2, #0
    6240:	431a      	orrs	r2, r3
    6242:	9b01      	ldr	r3, [sp, #4]
    6244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6248:	bf00      	nop
    624a:	b002      	add	sp, #8
    624c:	4770      	bx	lr

0000624e <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    624e:	b082      	sub	sp, #8
    6250:	9001      	str	r0, [sp, #4]
    6252:	460b      	mov	r3, r1
    6254:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    6258:	9b01      	ldr	r3, [sp, #4]
    625a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    625e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6262:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6266:	2a00      	cmp	r2, #0
    6268:	d001      	beq.n	626e <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    626a:	2280      	movs	r2, #128	; 0x80
    626c:	e000      	b.n	6270 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    626e:	2200      	movs	r2, #0
    6270:	431a      	orrs	r2, r3
    6272:	9b01      	ldr	r3, [sp, #4]
    6274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6278:	bf00      	nop
    627a:	b002      	add	sp, #8
    627c:	4770      	bx	lr

0000627e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    627e:	b082      	sub	sp, #8
    6280:	9001      	str	r0, [sp, #4]
    6282:	460b      	mov	r3, r1
    6284:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    6288:	9b01      	ldr	r3, [sp, #4]
    628a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    628e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6292:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6296:	2a00      	cmp	r2, #0
    6298:	d002      	beq.n	62a0 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    629a:	f44f 7280 	mov.w	r2, #256	; 0x100
    629e:	e000      	b.n	62a2 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    62a0:	2200      	movs	r2, #0
    62a2:	431a      	orrs	r2, r3
    62a4:	9b01      	ldr	r3, [sp, #4]
    62a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    62aa:	bf00      	nop
    62ac:	b002      	add	sp, #8
    62ae:	4770      	bx	lr

000062b0 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    62b0:	b082      	sub	sp, #8
    62b2:	9001      	str	r0, [sp, #4]
    62b4:	460b      	mov	r3, r1
    62b6:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    62ba:	9b01      	ldr	r3, [sp, #4]
    62bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    62c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    62c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    62c8:	2a00      	cmp	r2, #0
    62ca:	d002      	beq.n	62d2 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    62cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    62d0:	e000      	b.n	62d4 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    62d2:	2200      	movs	r2, #0
    62d4:	431a      	orrs	r2, r3
    62d6:	9b01      	ldr	r3, [sp, #4]
    62d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    62dc:	bf00      	nop
    62de:	b002      	add	sp, #8
    62e0:	4770      	bx	lr

000062e2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    62e2:	b082      	sub	sp, #8
    62e4:	9001      	str	r0, [sp, #4]
    62e6:	460b      	mov	r3, r1
    62e8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    62ec:	9b01      	ldr	r3, [sp, #4]
    62ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    62f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    62f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    62fa:	2a00      	cmp	r2, #0
    62fc:	d002      	beq.n	6304 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    62fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6302:	e000      	b.n	6306 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    6304:	2200      	movs	r2, #0
    6306:	431a      	orrs	r2, r3
    6308:	9b01      	ldr	r3, [sp, #4]
    630a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    630e:	bf00      	nop
    6310:	b002      	add	sp, #8
    6312:	4770      	bx	lr

00006314 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    6314:	b082      	sub	sp, #8
    6316:	9001      	str	r0, [sp, #4]
    6318:	460b      	mov	r3, r1
    631a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    631e:	9b01      	ldr	r3, [sp, #4]
    6320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    6328:	f89d 2003 	ldrb.w	r2, [sp, #3]
    632c:	2a00      	cmp	r2, #0
    632e:	d002      	beq.n	6336 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    6330:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6334:	e000      	b.n	6338 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    6336:	2200      	movs	r2, #0
    6338:	431a      	orrs	r2, r3
    633a:	9b01      	ldr	r3, [sp, #4]
    633c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6340:	bf00      	nop
    6342:	b002      	add	sp, #8
    6344:	4770      	bx	lr

00006346 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    6346:	b082      	sub	sp, #8
    6348:	9001      	str	r0, [sp, #4]
    634a:	460b      	mov	r3, r1
    634c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    6350:	9b01      	ldr	r3, [sp, #4]
    6352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    635a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    635e:	2a00      	cmp	r2, #0
    6360:	d002      	beq.n	6368 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    6362:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    6366:	e000      	b.n	636a <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    6368:	2200      	movs	r2, #0
    636a:	431a      	orrs	r2, r3
    636c:	9b01      	ldr	r3, [sp, #4]
    636e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6372:	bf00      	nop
    6374:	b002      	add	sp, #8
    6376:	4770      	bx	lr

00006378 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    6378:	b082      	sub	sp, #8
    637a:	9001      	str	r0, [sp, #4]
    637c:	460b      	mov	r3, r1
    637e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    6382:	9b01      	ldr	r3, [sp, #4]
    6384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    638c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6390:	2a00      	cmp	r2, #0
    6392:	d002      	beq.n	639a <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    6394:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6398:	e000      	b.n	639c <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    639a:	2200      	movs	r2, #0
    639c:	431a      	orrs	r2, r3
    639e:	9b01      	ldr	r3, [sp, #4]
    63a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    63a4:	bf00      	nop
    63a6:	b002      	add	sp, #8
    63a8:	4770      	bx	lr

000063aa <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    63aa:	b082      	sub	sp, #8
    63ac:	9001      	str	r0, [sp, #4]
    63ae:	460b      	mov	r3, r1
    63b0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    63b4:	9b01      	ldr	r3, [sp, #4]
    63b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    63ba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    63be:	f89d 2003 	ldrb.w	r2, [sp, #3]
    63c2:	2a00      	cmp	r2, #0
    63c4:	d002      	beq.n	63cc <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    63c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    63ca:	e000      	b.n	63ce <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    63cc:	2200      	movs	r2, #0
    63ce:	431a      	orrs	r2, r3
    63d0:	9b01      	ldr	r3, [sp, #4]
    63d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    63d6:	bf00      	nop
    63d8:	b002      	add	sp, #8
    63da:	4770      	bx	lr

000063dc <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    63dc:	b082      	sub	sp, #8
    63de:	9001      	str	r0, [sp, #4]
    63e0:	460b      	mov	r3, r1
    63e2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    63e6:	9b01      	ldr	r3, [sp, #4]
    63e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    63ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    63f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    63f4:	2a00      	cmp	r2, #0
    63f6:	d002      	beq.n	63fe <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    63f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    63fc:	e000      	b.n	6400 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    63fe:	2200      	movs	r2, #0
    6400:	431a      	orrs	r2, r3
    6402:	9b01      	ldr	r3, [sp, #4]
    6404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6408:	bf00      	nop
    640a:	b002      	add	sp, #8
    640c:	4770      	bx	lr

0000640e <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    640e:	b082      	sub	sp, #8
    6410:	9001      	str	r0, [sp, #4]
    6412:	460b      	mov	r3, r1
    6414:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    6418:	9b01      	ldr	r3, [sp, #4]
    641a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    641e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    6422:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6426:	2a00      	cmp	r2, #0
    6428:	d002      	beq.n	6430 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    642a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    642e:	e000      	b.n	6432 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    6430:	2200      	movs	r2, #0
    6432:	431a      	orrs	r2, r3
    6434:	9b01      	ldr	r3, [sp, #4]
    6436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    643a:	bf00      	nop
    643c:	b002      	add	sp, #8
    643e:	4770      	bx	lr

00006440 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    6440:	b084      	sub	sp, #16
    6442:	9001      	str	r0, [sp, #4]
    6444:	460b      	mov	r3, r1
    6446:	f88d 3003 	strb.w	r3, [sp, #3]
    644a:	4613      	mov	r3, r2
    644c:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    6450:	9b01      	ldr	r3, [sp, #4]
    6452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    6454:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6458:	fa22 f303 	lsr.w	r3, r2, r3
    645c:	b2db      	uxtb	r3, r3
    645e:	f003 0301 	and.w	r3, r3, #1
    6462:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    6466:	f89d 300f 	ldrb.w	r3, [sp, #15]
    646a:	2b00      	cmp	r3, #0
    646c:	bf14      	ite	ne
    646e:	2301      	movne	r3, #1
    6470:	2300      	moveq	r3, #0
    6472:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    6476:	f89d 2002 	ldrb.w	r2, [sp, #2]
    647a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    647e:	429a      	cmp	r2, r3
    6480:	d00d      	beq.n	649e <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    6482:	9b01      	ldr	r3, [sp, #4]
    6484:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    6488:	f89d 3003 	ldrb.w	r3, [sp, #3]
    648c:	3308      	adds	r3, #8
    648e:	2101      	movs	r1, #1
    6490:	fa01 f303 	lsl.w	r3, r1, r3
    6494:	431a      	orrs	r2, r3
    6496:	9b01      	ldr	r3, [sp, #4]
    6498:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    649c:	e00d      	b.n	64ba <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    649e:	9b01      	ldr	r3, [sp, #4]
    64a0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    64a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    64a8:	3308      	adds	r3, #8
    64aa:	2101      	movs	r1, #1
    64ac:	fa01 f303 	lsl.w	r3, r1, r3
    64b0:	43db      	mvns	r3, r3
    64b2:	401a      	ands	r2, r3
    64b4:	9b01      	ldr	r3, [sp, #4]
    64b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    64ba:	bf00      	nop
    64bc:	b004      	add	sp, #16
    64be:	4770      	bx	lr

000064c0 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    64c0:	b082      	sub	sp, #8
    64c2:	9001      	str	r0, [sp, #4]
    64c4:	460b      	mov	r3, r1
    64c6:	f88d 3003 	strb.w	r3, [sp, #3]
    64ca:	4613      	mov	r3, r2
    64cc:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    64d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    64d4:	2b00      	cmp	r3, #0
    64d6:	d00c      	beq.n	64f2 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    64d8:	9b01      	ldr	r3, [sp, #4]
    64da:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    64de:	f89d 3003 	ldrb.w	r3, [sp, #3]
    64e2:	2101      	movs	r1, #1
    64e4:	fa01 f303 	lsl.w	r3, r1, r3
    64e8:	431a      	orrs	r2, r3
    64ea:	9b01      	ldr	r3, [sp, #4]
    64ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    64f0:	e00c      	b.n	650c <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    64f2:	9b01      	ldr	r3, [sp, #4]
    64f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    64f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    64fc:	2101      	movs	r1, #1
    64fe:	fa01 f303 	lsl.w	r3, r1, r3
    6502:	43db      	mvns	r3, r3
    6504:	401a      	ands	r2, r3
    6506:	9b01      	ldr	r3, [sp, #4]
    6508:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    650c:	bf00      	nop
    650e:	b002      	add	sp, #8
    6510:	4770      	bx	lr

00006512 <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    6512:	b082      	sub	sp, #8
    6514:	9001      	str	r0, [sp, #4]
    6516:	460b      	mov	r3, r1
    6518:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    651c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    6520:	9b01      	ldr	r3, [sp, #4]
    6522:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6526:	bf00      	nop
    6528:	b002      	add	sp, #8
    652a:	4770      	bx	lr

0000652c <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    652c:	b082      	sub	sp, #8
    652e:	9001      	str	r0, [sp, #4]
    6530:	460b      	mov	r3, r1
    6532:	f88d 3003 	strb.w	r3, [sp, #3]
    6536:	4613      	mov	r3, r2
    6538:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    653c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6540:	2b00      	cmp	r3, #0
    6542:	d00c      	beq.n	655e <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    6544:	9b01      	ldr	r3, [sp, #4]
    6546:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    654a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    654e:	2101      	movs	r1, #1
    6550:	fa01 f303 	lsl.w	r3, r1, r3
    6554:	431a      	orrs	r2, r3
    6556:	9b01      	ldr	r3, [sp, #4]
    6558:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    655c:	e00c      	b.n	6578 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    655e:	9b01      	ldr	r3, [sp, #4]
    6560:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6564:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6568:	2101      	movs	r1, #1
    656a:	fa01 f303 	lsl.w	r3, r1, r3
    656e:	43db      	mvns	r3, r3
    6570:	401a      	ands	r2, r3
    6572:	9b01      	ldr	r3, [sp, #4]
    6574:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    6578:	bf00      	nop
    657a:	b002      	add	sp, #8
    657c:	4770      	bx	lr

0000657e <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    657e:	b082      	sub	sp, #8
    6580:	9001      	str	r0, [sp, #4]
    6582:	460b      	mov	r3, r1
    6584:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    6588:	f89d 3003 	ldrb.w	r3, [sp, #3]
    658c:	2b00      	cmp	r3, #0
    658e:	d008      	beq.n	65a2 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    6590:	9b01      	ldr	r3, [sp, #4]
    6592:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6596:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    659a:	9b01      	ldr	r3, [sp, #4]
    659c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    65a0:	e007      	b.n	65b2 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    65a2:	9b01      	ldr	r3, [sp, #4]
    65a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    65a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    65ac:	9b01      	ldr	r3, [sp, #4]
    65ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    65b2:	bf00      	nop
    65b4:	b002      	add	sp, #8
    65b6:	4770      	bx	lr

000065b8 <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    65b8:	b082      	sub	sp, #8
    65ba:	9001      	str	r0, [sp, #4]
    65bc:	460b      	mov	r3, r1
    65be:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    65c2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    65c6:	9b01      	ldr	r3, [sp, #4]
    65c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    65cc:	bf00      	nop
    65ce:	b002      	add	sp, #8
    65d0:	4770      	bx	lr

000065d2 <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    65d2:	b082      	sub	sp, #8
    65d4:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    65d6:	9b01      	ldr	r3, [sp, #4]
    65d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    65dc:	b29b      	uxth	r3, r3
}
    65de:	4618      	mov	r0, r3
    65e0:	b002      	add	sp, #8
    65e2:	4770      	bx	lr

000065e4 <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    65e4:	b082      	sub	sp, #8
    65e6:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    65e8:	9b01      	ldr	r3, [sp, #4]
    65ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    65ec:	b29b      	uxth	r3, r3
}
    65ee:	4618      	mov	r0, r3
    65f0:	b002      	add	sp, #8
    65f2:	4770      	bx	lr

000065f4 <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    65f4:	b500      	push	{lr}
    65f6:	b085      	sub	sp, #20
    65f8:	9001      	str	r0, [sp, #4]
    65fa:	460b      	mov	r3, r1
    65fc:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    6600:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6604:	085b      	lsrs	r3, r3, #1
    6606:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    660a:	9b01      	ldr	r3, [sp, #4]
    660c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    660e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6612:	00db      	lsls	r3, r3, #3
    6614:	2101      	movs	r1, #1
    6616:	fa01 f303 	lsl.w	r3, r1, r3
    661a:	401a      	ands	r2, r3
    661c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6620:	00db      	lsls	r3, r3, #3
    6622:	fa22 f303 	lsr.w	r3, r2, r3
    6626:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    662a:	9b01      	ldr	r3, [sp, #4]
    662c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    662e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6632:	00db      	lsls	r3, r3, #3
    6634:	2180      	movs	r1, #128	; 0x80
    6636:	fa01 f303 	lsl.w	r3, r1, r3
    663a:	401a      	ands	r2, r3
    663c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6640:	00db      	lsls	r3, r3, #3
    6642:	fa22 f303 	lsr.w	r3, r2, r3
    6646:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    664a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    664e:	2b80      	cmp	r3, #128	; 0x80
    6650:	d101      	bne.n	6656 <Ftm_Pwm_Ip_GetChannelMode+0x62>
    6652:	2301      	movs	r3, #1
    6654:	e000      	b.n	6658 <Ftm_Pwm_Ip_GetChannelMode+0x64>
    6656:	2300      	movs	r3, #0
    6658:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    665c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6660:	4619      	mov	r1, r3
    6662:	9801      	ldr	r0, [sp, #4]
    6664:	f7ff f99b 	bl	599e <Ftm_Pwm_Ip_GetChnEdgeLevel>
    6668:	4603      	mov	r3, r0
    666a:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    666e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6672:	4619      	mov	r1, r3
    6674:	9801      	ldr	r0, [sp, #4]
    6676:	f7ff fa2a 	bl	5ace <Ftm_Pwm_Ip_GetChnMode>
    667a:	4603      	mov	r3, r0
    667c:	009b      	lsls	r3, r3, #2
    667e:	b2da      	uxtb	r2, r3
    6680:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6684:	4313      	orrs	r3, r2
    6686:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    668a:	9801      	ldr	r0, [sp, #4]
    668c:	f7ff f923 	bl	58d6 <Ftm_Pwm_Ip_GetCpwms>
    6690:	4603      	mov	r3, r0
    6692:	b2db      	uxtb	r3, r3
    6694:	011b      	lsls	r3, r3, #4
    6696:	b2da      	uxtb	r2, r3
    6698:	f89d 3008 	ldrb.w	r3, [sp, #8]
    669c:	4313      	orrs	r3, r2
    669e:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    66a2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    66a6:	015b      	lsls	r3, r3, #5
    66a8:	b2da      	uxtb	r2, r3
    66aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
    66ae:	4313      	orrs	r3, r2
    66b0:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    66b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    66b8:	019b      	lsls	r3, r3, #6
    66ba:	b2da      	uxtb	r2, r3
    66bc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    66c0:	4313      	orrs	r3, r2
    66c2:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    66c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    66ca:	2b62      	cmp	r3, #98	; 0x62
    66cc:	d055      	beq.n	677a <Ftm_Pwm_Ip_GetChannelMode+0x186>
    66ce:	2b62      	cmp	r3, #98	; 0x62
    66d0:	dc59      	bgt.n	6786 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    66d2:	2b22      	cmp	r3, #34	; 0x22
    66d4:	dc3c      	bgt.n	6750 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    66d6:	2b09      	cmp	r3, #9
    66d8:	db55      	blt.n	6786 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    66da:	3b09      	subs	r3, #9
    66dc:	2b19      	cmp	r3, #25
    66de:	d852      	bhi.n	6786 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    66e0:	a201      	add	r2, pc, #4	; (adr r2, 66e8 <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    66e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    66e6:	bf00      	nop
    66e8:	0000675d 	.word	0x0000675d
    66ec:	00006757 	.word	0x00006757
    66f0:	00006787 	.word	0x00006787
    66f4:	00006787 	.word	0x00006787
    66f8:	00006787 	.word	0x00006787
    66fc:	00006787 	.word	0x00006787
    6700:	00006787 	.word	0x00006787
    6704:	00006787 	.word	0x00006787
    6708:	00006769 	.word	0x00006769
    670c:	00006763 	.word	0x00006763
    6710:	00006787 	.word	0x00006787
    6714:	00006787 	.word	0x00006787
    6718:	00006787 	.word	0x00006787
    671c:	00006787 	.word	0x00006787
    6720:	00006787 	.word	0x00006787
    6724:	00006787 	.word	0x00006787
    6728:	00006787 	.word	0x00006787
    672c:	00006787 	.word	0x00006787
    6730:	00006787 	.word	0x00006787
    6734:	00006787 	.word	0x00006787
    6738:	00006787 	.word	0x00006787
    673c:	00006787 	.word	0x00006787
    6740:	00006787 	.word	0x00006787
    6744:	00006787 	.word	0x00006787
    6748:	00006775 	.word	0x00006775
    674c:	0000676f 	.word	0x0000676f
    6750:	2b61      	cmp	r3, #97	; 0x61
    6752:	d015      	beq.n	6780 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    6754:	e017      	b.n	6786 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    6756:	230a      	movs	r3, #10
    6758:	9303      	str	r3, [sp, #12]
            break;
    675a:	e017      	b.n	678c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    675c:	2309      	movs	r3, #9
    675e:	9303      	str	r3, [sp, #12]
            break;
    6760:	e014      	b.n	678c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    6762:	2312      	movs	r3, #18
    6764:	9303      	str	r3, [sp, #12]
            break;
    6766:	e011      	b.n	678c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    6768:	2311      	movs	r3, #17
    676a:	9303      	str	r3, [sp, #12]
            break;
    676c:	e00e      	b.n	678c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    676e:	2322      	movs	r3, #34	; 0x22
    6770:	9303      	str	r3, [sp, #12]
            break;
    6772:	e00b      	b.n	678c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    6774:	2321      	movs	r3, #33	; 0x21
    6776:	9303      	str	r3, [sp, #12]
            break;
    6778:	e008      	b.n	678c <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    677a:	2362      	movs	r3, #98	; 0x62
    677c:	9303      	str	r3, [sp, #12]
            break;
    677e:	e005      	b.n	678c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    6780:	2361      	movs	r3, #97	; 0x61
    6782:	9303      	str	r3, [sp, #12]
            break;
    6784:	e002      	b.n	678c <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    6786:	23ff      	movs	r3, #255	; 0xff
    6788:	9303      	str	r3, [sp, #12]
            break;
    678a:	bf00      	nop
    }

    return ChMode; 
    678c:	9b03      	ldr	r3, [sp, #12]
}
    678e:	4618      	mov	r0, r3
    6790:	b005      	add	sp, #20
    6792:	f85d fb04 	ldr.w	pc, [sp], #4

00006796 <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    6796:	b082      	sub	sp, #8
    6798:	9001      	str	r0, [sp, #4]
    679a:	460b      	mov	r3, r1
    679c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    67a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    67a4:	2b00      	cmp	r3, #0
    67a6:	d006      	beq.n	67b6 <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    67a8:	9b01      	ldr	r3, [sp, #4]
    67aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    67ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    67b0:	9b01      	ldr	r3, [sp, #4]
    67b2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    67b4:	e00b      	b.n	67ce <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    67b6:	9b01      	ldr	r3, [sp, #4]
    67b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    67ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
    67be:	2b00      	cmp	r3, #0
    67c0:	d005      	beq.n	67ce <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    67c2:	9b01      	ldr	r3, [sp, #4]
    67c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    67c6:	f043 0204 	orr.w	r2, r3, #4
    67ca:	9b01      	ldr	r3, [sp, #4]
    67cc:	655a      	str	r2, [r3, #84]	; 0x54
}
    67ce:	bf00      	nop
    67d0:	b002      	add	sp, #8
    67d2:	4770      	bx	lr

000067d4 <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    67d4:	b500      	push	{lr}
    67d6:	b085      	sub	sp, #20
    67d8:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    67da:	2100      	movs	r1, #0
    67dc:	9801      	ldr	r0, [sp, #4]
    67de:	f7ff ffda 	bl	6796 <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    67e2:	9b01      	ldr	r3, [sp, #4]
    67e4:	681a      	ldr	r2, [r3, #0]
    67e6:	9b01      	ldr	r3, [sp, #4]
    67e8:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    67ea:	9b01      	ldr	r3, [sp, #4]
    67ec:	2200      	movs	r2, #0
    67ee:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    67f0:	9b01      	ldr	r3, [sp, #4]
    67f2:	2200      	movs	r2, #0
    67f4:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    67f6:	9b01      	ldr	r3, [sp, #4]
    67f8:	2200      	movs	r2, #0
    67fa:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    67fc:	9b01      	ldr	r3, [sp, #4]
    67fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    6800:	9b01      	ldr	r3, [sp, #4]
    6802:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    6804:	9b01      	ldr	r3, [sp, #4]
    6806:	2204      	movs	r2, #4
    6808:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    680a:	9b01      	ldr	r3, [sp, #4]
    680c:	2200      	movs	r2, #0
    680e:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    6810:	9b01      	ldr	r3, [sp, #4]
    6812:	2200      	movs	r2, #0
    6814:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    6816:	9b01      	ldr	r3, [sp, #4]
    6818:	2200      	movs	r2, #0
    681a:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    681c:	9b01      	ldr	r3, [sp, #4]
    681e:	2200      	movs	r2, #0
    6820:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    6822:	9b01      	ldr	r3, [sp, #4]
    6824:	2200      	movs	r2, #0
    6826:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    6828:	9b01      	ldr	r3, [sp, #4]
    682a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    682c:	9b01      	ldr	r3, [sp, #4]
    682e:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    6830:	9b01      	ldr	r3, [sp, #4]
    6832:	2200      	movs	r2, #0
    6834:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    6836:	9b01      	ldr	r3, [sp, #4]
    6838:	2200      	movs	r2, #0
    683a:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    683c:	9b01      	ldr	r3, [sp, #4]
    683e:	2200      	movs	r2, #0
    6840:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    6842:	9b01      	ldr	r3, [sp, #4]
    6844:	2200      	movs	r2, #0
    6846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    684a:	9b01      	ldr	r3, [sp, #4]
    684c:	2200      	movs	r2, #0
    684e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    6852:	9b01      	ldr	r3, [sp, #4]
    6854:	2200      	movs	r2, #0
    6856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    685a:	9b01      	ldr	r3, [sp, #4]
    685c:	2200      	movs	r2, #0
    685e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    6862:	9b01      	ldr	r3, [sp, #4]
    6864:	2200      	movs	r2, #0
    6866:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    686a:	9b01      	ldr	r3, [sp, #4]
    686c:	2200      	movs	r2, #0
    686e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    6872:	9b01      	ldr	r3, [sp, #4]
    6874:	2200      	movs	r2, #0
    6876:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    687a:	2300      	movs	r3, #0
    687c:	f88d 300f 	strb.w	r3, [sp, #15]
    6880:	e014      	b.n	68ac <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    6882:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6886:	9a01      	ldr	r2, [sp, #4]
    6888:	3301      	adds	r3, #1
    688a:	00db      	lsls	r3, r3, #3
    688c:	4413      	add	r3, r2
    688e:	2200      	movs	r2, #0
    6890:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    6892:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6896:	9a01      	ldr	r2, [sp, #4]
    6898:	3301      	adds	r3, #1
    689a:	00db      	lsls	r3, r3, #3
    689c:	4413      	add	r3, r2
    689e:	2200      	movs	r2, #0
    68a0:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    68a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    68a6:	3301      	adds	r3, #1
    68a8:	f88d 300f 	strb.w	r3, [sp, #15]
    68ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    68b0:	2b07      	cmp	r3, #7
    68b2:	d9e6      	bls.n	6882 <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    68b4:	bf00      	nop
    68b6:	bf00      	nop
    68b8:	b005      	add	sp, #20
    68ba:	f85d fb04 	ldr.w	pc, [sp], #4

000068be <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    68be:	b084      	sub	sp, #16
    68c0:	9001      	str	r0, [sp, #4]
    68c2:	460b      	mov	r3, r1
    68c4:	f88d 3003 	strb.w	r3, [sp, #3]
    68c8:	4613      	mov	r3, r2
    68ca:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    68ce:	2300      	movs	r3, #0
    68d0:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    68d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68d6:	2b01      	cmp	r3, #1
    68d8:	d806      	bhi.n	68e8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    68da:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68de:	2210      	movs	r2, #16
    68e0:	fa02 f303 	lsl.w	r3, r2, r3
    68e4:	9303      	str	r3, [sp, #12]
    68e6:	e013      	b.n	6910 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    68e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68ec:	2b05      	cmp	r3, #5
    68ee:	d807      	bhi.n	6900 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    68f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68f4:	3b02      	subs	r3, #2
    68f6:	2201      	movs	r2, #1
    68f8:	fa02 f303 	lsl.w	r3, r2, r3
    68fc:	9303      	str	r3, [sp, #12]
    68fe:	e007      	b.n	6910 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    6900:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6904:	3b06      	subs	r3, #6
    6906:	f44f 7280 	mov.w	r2, #256	; 0x100
    690a:	fa02 f303 	lsl.w	r3, r2, r3
    690e:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    6910:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6914:	2b00      	cmp	r3, #0
    6916:	d006      	beq.n	6926 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    6918:	9b01      	ldr	r3, [sp, #4]
    691a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    691c:	9b03      	ldr	r3, [sp, #12]
    691e:	431a      	orrs	r2, r3
    6920:	9b01      	ldr	r3, [sp, #4]
    6922:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    6924:	e006      	b.n	6934 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    6926:	9b01      	ldr	r3, [sp, #4]
    6928:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    692a:	9b03      	ldr	r3, [sp, #12]
    692c:	43db      	mvns	r3, r3
    692e:	401a      	ands	r2, r3
    6930:	9b01      	ldr	r3, [sp, #4]
    6932:	66da      	str	r2, [r3, #108]	; 0x6c
}
    6934:	bf00      	nop
    6936:	b004      	add	sp, #16
    6938:	4770      	bx	lr

0000693a <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    693a:	b082      	sub	sp, #8
    693c:	9001      	str	r0, [sp, #4]
    693e:	9100      	str	r1, [sp, #0]
    6940:	9b00      	ldr	r3, [sp, #0]
    6942:	2b03      	cmp	r3, #3
    6944:	d82a      	bhi.n	699c <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    6946:	a201      	add	r2, pc, #4	; (adr r2, 694c <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    6948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    694c:	0000695d 	.word	0x0000695d
    6950:	0000696b 	.word	0x0000696b
    6954:	0000697d 	.word	0x0000697d
    6958:	0000698f 	.word	0x0000698f
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    695c:	9b01      	ldr	r3, [sp, #4]
    695e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6960:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    6964:	9b01      	ldr	r3, [sp, #4]
    6966:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    6968:	e019      	b.n	699e <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    696a:	9b01      	ldr	r3, [sp, #4]
    696c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    696e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6972:	f043 0220 	orr.w	r2, r3, #32
    6976:	9b01      	ldr	r3, [sp, #4]
    6978:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    697a:	e010      	b.n	699e <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    697c:	9b01      	ldr	r3, [sp, #4]
    697e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6980:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6984:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    6988:	9b01      	ldr	r3, [sp, #4]
    698a:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    698c:	e007      	b.n	699e <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    698e:	9b01      	ldr	r3, [sp, #4]
    6990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6992:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    6996:	9b01      	ldr	r3, [sp, #4]
    6998:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    699a:	e000      	b.n	699e <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    699c:	bf00      	nop
    }
}
    699e:	bf00      	nop
    69a0:	b002      	add	sp, #8
    69a2:	4770      	bx	lr

000069a4 <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    69a4:	b082      	sub	sp, #8
    69a6:	9001      	str	r0, [sp, #4]
    69a8:	460b      	mov	r3, r1
    69aa:	f88d 3003 	strb.w	r3, [sp, #3]
    69ae:	4613      	mov	r3, r2
    69b0:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    69b4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    69b8:	2b00      	cmp	r3, #0
    69ba:	d00b      	beq.n	69d4 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    69bc:	9b01      	ldr	r3, [sp, #4]
    69be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    69c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    69c4:	00db      	lsls	r3, r3, #3
    69c6:	2140      	movs	r1, #64	; 0x40
    69c8:	fa01 f303 	lsl.w	r3, r1, r3
    69cc:	431a      	orrs	r2, r3
    69ce:	9b01      	ldr	r3, [sp, #4]
    69d0:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    69d2:	e00b      	b.n	69ec <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    69d4:	9b01      	ldr	r3, [sp, #4]
    69d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    69d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    69dc:	00db      	lsls	r3, r3, #3
    69de:	2140      	movs	r1, #64	; 0x40
    69e0:	fa01 f303 	lsl.w	r3, r1, r3
    69e4:	43db      	mvns	r3, r3
    69e6:	401a      	ands	r2, r3
    69e8:	9b01      	ldr	r3, [sp, #4]
    69ea:	665a      	str	r2, [r3, #100]	; 0x64
}
    69ec:	bf00      	nop
    69ee:	b002      	add	sp, #8
    69f0:	4770      	bx	lr

000069f2 <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    69f2:	b082      	sub	sp, #8
    69f4:	9001      	str	r0, [sp, #4]
    69f6:	460b      	mov	r3, r1
    69f8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    69fc:	9b01      	ldr	r3, [sp, #4]
    69fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6a04:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6a08:	2a00      	cmp	r2, #0
    6a0a:	d001      	beq.n	6a10 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    6a0c:	2280      	movs	r2, #128	; 0x80
    6a0e:	e000      	b.n	6a12 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    6a10:	2200      	movs	r2, #0
    6a12:	431a      	orrs	r2, r3
    6a14:	9b01      	ldr	r3, [sp, #4]
    6a16:	655a      	str	r2, [r3, #84]	; 0x54
}
    6a18:	bf00      	nop
    6a1a:	b002      	add	sp, #8
    6a1c:	4770      	bx	lr

00006a1e <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    6a1e:	b082      	sub	sp, #8
    6a20:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    6a22:	9b01      	ldr	r3, [sp, #4]
    6a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    6a2a:	9b01      	ldr	r3, [sp, #4]
    6a2c:	675a      	str	r2, [r3, #116]	; 0x74
}
    6a2e:	bf00      	nop
    6a30:	b002      	add	sp, #8
    6a32:	4770      	bx	lr

00006a34 <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    6a34:	b082      	sub	sp, #8
    6a36:	9001      	str	r0, [sp, #4]
    6a38:	460b      	mov	r3, r1
    6a3a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    6a3e:	9b01      	ldr	r3, [sp, #4]
    6a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6a42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    6a46:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6a4a:	021b      	lsls	r3, r3, #8
    6a4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    6a50:	431a      	orrs	r2, r3
    6a52:	9b01      	ldr	r3, [sp, #4]
    6a54:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6a56:	bf00      	nop
    6a58:	b002      	add	sp, #8
    6a5a:	4770      	bx	lr

00006a5c <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    6a5c:	b082      	sub	sp, #8
    6a5e:	9001      	str	r0, [sp, #4]
    6a60:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    6a62:	9b01      	ldr	r3, [sp, #4]
    6a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6a66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6a6a:	9a00      	ldr	r2, [sp, #0]
    6a6c:	2a00      	cmp	r2, #0
    6a6e:	d002      	beq.n	6a76 <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    6a70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6a74:	e000      	b.n	6a78 <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    6a76:	2200      	movs	r2, #0
    6a78:	431a      	orrs	r2, r3
    6a7a:	9b01      	ldr	r3, [sp, #4]
    6a7c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6a7e:	bf00      	nop
    6a80:	b002      	add	sp, #8
    6a82:	4770      	bx	lr

00006a84 <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    6a84:	b086      	sub	sp, #24
    6a86:	9003      	str	r0, [sp, #12]
    6a88:	460b      	mov	r3, r1
    6a8a:	9201      	str	r2, [sp, #4]
    6a8c:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    6a90:	9b01      	ldr	r3, [sp, #4]
    6a92:	2b00      	cmp	r3, #0
    6a94:	bf14      	ite	ne
    6a96:	2301      	movne	r3, #1
    6a98:	2300      	moveq	r3, #0
    6a9a:	b2db      	uxtb	r3, r3
    6a9c:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    6a9e:	9b03      	ldr	r3, [sp, #12]
    6aa0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6aa4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6aa8:	2101      	movs	r1, #1
    6aaa:	fa01 f303 	lsl.w	r3, r1, r3
    6aae:	43db      	mvns	r3, r3
    6ab0:	401a      	ands	r2, r3
    6ab2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6ab6:	9905      	ldr	r1, [sp, #20]
    6ab8:	fa01 f303 	lsl.w	r3, r1, r3
    6abc:	431a      	orrs	r2, r3
    6abe:	9b03      	ldr	r3, [sp, #12]
    6ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    6ac4:	bf00      	nop
    6ac6:	b006      	add	sp, #24
    6ac8:	4770      	bx	lr

00006aca <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    6aca:	b084      	sub	sp, #16
    6acc:	9001      	str	r0, [sp, #4]
    6ace:	460b      	mov	r3, r1
    6ad0:	f88d 3003 	strb.w	r3, [sp, #3]
    6ad4:	4613      	mov	r3, r2
    6ad6:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    6ada:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6ade:	2b00      	cmp	r3, #0
    6ae0:	d001      	beq.n	6ae6 <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    6ae2:	2301      	movs	r3, #1
    6ae4:	e000      	b.n	6ae8 <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    6ae6:	2300      	movs	r3, #0
    6ae8:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    6aea:	9b01      	ldr	r3, [sp, #4]
    6aec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    6aee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6af2:	2101      	movs	r1, #1
    6af4:	fa01 f303 	lsl.w	r3, r1, r3
    6af8:	43db      	mvns	r3, r3
    6afa:	401a      	ands	r2, r3
    6afc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b00:	9903      	ldr	r1, [sp, #12]
    6b02:	fa01 f303 	lsl.w	r3, r1, r3
    6b06:	431a      	orrs	r2, r3
    6b08:	9b01      	ldr	r3, [sp, #4]
    6b0a:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6b0c:	bf00      	nop
    6b0e:	b004      	add	sp, #16
    6b10:	4770      	bx	lr

00006b12 <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    6b12:	b084      	sub	sp, #16
    6b14:	9001      	str	r0, [sp, #4]
    6b16:	460b      	mov	r3, r1
    6b18:	f88d 3003 	strb.w	r3, [sp, #3]
    6b1c:	4613      	mov	r3, r2
    6b1e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    6b22:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6b26:	2b00      	cmp	r3, #0
    6b28:	d001      	beq.n	6b2e <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    6b2a:	2301      	movs	r3, #1
    6b2c:	e000      	b.n	6b30 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    6b2e:	2300      	movs	r3, #0
    6b30:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    6b32:	9b01      	ldr	r3, [sp, #4]
    6b34:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    6b36:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b3a:	2110      	movs	r1, #16
    6b3c:	fa01 f303 	lsl.w	r3, r1, r3
    6b40:	43db      	mvns	r3, r3
    6b42:	401a      	ands	r2, r3
    6b44:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b48:	9903      	ldr	r1, [sp, #12]
    6b4a:	fa01 f303 	lsl.w	r3, r1, r3
    6b4e:	011b      	lsls	r3, r3, #4
    6b50:	431a      	orrs	r2, r3
    6b52:	9b01      	ldr	r3, [sp, #4]
    6b54:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6b56:	bf00      	nop
    6b58:	b004      	add	sp, #16
    6b5a:	4770      	bx	lr

00006b5c <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    6b5c:	b082      	sub	sp, #8
    6b5e:	9001      	str	r0, [sp, #4]
    6b60:	460b      	mov	r3, r1
    6b62:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    6b66:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6b6e:	409a      	lsls	r2, r3
    6b70:	9b01      	ldr	r3, [sp, #4]
    6b72:	6a1b      	ldr	r3, [r3, #32]
    6b74:	431a      	orrs	r2, r3
    6b76:	9b01      	ldr	r3, [sp, #4]
    6b78:	621a      	str	r2, [r3, #32]
}
    6b7a:	bf00      	nop
    6b7c:	b002      	add	sp, #8
    6b7e:	4770      	bx	lr

00006b80 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    6b80:	b084      	sub	sp, #16
    6b82:	4603      	mov	r3, r0
    6b84:	f88d 3007 	strb.w	r3, [sp, #7]
    6b88:	460b      	mov	r3, r1
    6b8a:	f8ad 3004 	strh.w	r3, [sp, #4]
    6b8e:	4613      	mov	r3, r2
    6b90:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    6b94:	2300      	movs	r3, #0
    6b96:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    6b9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b9e:	4a17      	ldr	r2, [pc, #92]	; (6bfc <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    6ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6ba4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6ba8:	429a      	cmp	r2, r3
    6baa:	d107      	bne.n	6bbc <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    6bac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bb0:	4a12      	ldr	r2, [pc, #72]	; (6bfc <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    6bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6bb6:	f8ad 300e 	strh.w	r3, [sp, #14]
    6bba:	e019      	b.n	6bf0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    6bbc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6bc0:	2b00      	cmp	r3, #0
    6bc2:	d104      	bne.n	6bce <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    6bc4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6bc8:	f8ad 300e 	strh.w	r3, [sp, #14]
    6bcc:	e010      	b.n	6bf0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    6bce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    6bd2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6bd6:	4413      	add	r3, r2
    6bd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6bdc:	4907      	ldr	r1, [pc, #28]	; (6bfc <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    6bde:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    6be2:	fb93 f1f2 	sdiv	r1, r3, r2
    6be6:	fb01 f202 	mul.w	r2, r1, r2
    6bea:	1a9b      	subs	r3, r3, r2
    6bec:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    6bf0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    6bf4:	4618      	mov	r0, r3
    6bf6:	b004      	add	sp, #16
    6bf8:	4770      	bx	lr
    6bfa:	bf00      	nop
    6bfc:	1fff8cfc 	.word	0x1fff8cfc

00006c00 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    6c00:	b500      	push	{lr}
    6c02:	b085      	sub	sp, #20
    6c04:	4603      	mov	r3, r0
    6c06:	9100      	str	r1, [sp, #0]
    6c08:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6c0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c10:	4a40      	ldr	r2, [pc, #256]	; (6d14 <Ftm_Pwm_Ip_InitPair+0x114>)
    6c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c16:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    6c18:	2300      	movs	r3, #0
    6c1a:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    6c1e:	2300      	movs	r3, #0
    6c20:	f88d 300a 	strb.w	r3, [sp, #10]
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    6c24:	9b00      	ldr	r3, [sp, #0]
    6c26:	781b      	ldrb	r3, [r3, #0]
    6c28:	005b      	lsls	r3, r3, #1
    6c2a:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    6c2e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6c32:	3301      	adds	r3, #1
    6c34:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    6c38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c3c:	9a00      	ldr	r2, [sp, #0]
    6c3e:	7812      	ldrb	r2, [r2, #0]
    6c40:	4610      	mov	r0, r2
    6c42:	9a00      	ldr	r2, [sp, #0]
    6c44:	8951      	ldrh	r1, [r2, #10]
    6c46:	4a34      	ldr	r2, [pc, #208]	; (6d18 <Ftm_Pwm_Ip_InitPair+0x118>)
    6c48:	009b      	lsls	r3, r3, #2
    6c4a:	4403      	add	r3, r0
    6c4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    6c50:	9b00      	ldr	r3, [sp, #0]
    6c52:	7819      	ldrb	r1, [r3, #0]
    6c54:	9b00      	ldr	r3, [sp, #0]
    6c56:	789b      	ldrb	r3, [r3, #2]
    6c58:	461a      	mov	r2, r3
    6c5a:	9803      	ldr	r0, [sp, #12]
    6c5c:	f7ff f920 	bl	5ea0 <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    6c60:	9b00      	ldr	r3, [sp, #0]
    6c62:	789b      	ldrb	r3, [r3, #2]
    6c64:	2b00      	cmp	r3, #0
    6c66:	d02f      	beq.n	6cc8 <Ftm_Pwm_Ip_InitPair+0xc8>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    6c68:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6c6c:	4619      	mov	r1, r3
    6c6e:	9803      	ldr	r0, [sp, #12]
    6c70:	f7ff fa3e 	bl	60f0 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    6c74:	4603      	mov	r3, r0
    6c76:	2b01      	cmp	r3, #1
    6c78:	d113      	bne.n	6ca2 <Ftm_Pwm_Ip_InitPair+0xa2>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    6c7a:	9b00      	ldr	r3, [sp, #0]
    6c7c:	685b      	ldr	r3, [r3, #4]
    6c7e:	2b01      	cmp	r3, #1
    6c80:	d107      	bne.n	6c92 <Ftm_Pwm_Ip_InitPair+0x92>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    6c82:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6c86:	2200      	movs	r2, #0
    6c88:	4619      	mov	r1, r3
    6c8a:	9803      	ldr	r0, [sp, #12]
    6c8c:	f7ff fa0e 	bl	60ac <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    6c90:	e01a      	b.n	6cc8 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    6c92:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6c96:	2201      	movs	r2, #1
    6c98:	4619      	mov	r1, r3
    6c9a:	9803      	ldr	r0, [sp, #12]
    6c9c:	f7ff fa06 	bl	60ac <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    6ca0:	e012      	b.n	6cc8 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    6ca2:	9b00      	ldr	r3, [sp, #0]
    6ca4:	685b      	ldr	r3, [r3, #4]
    6ca6:	2b01      	cmp	r3, #1
    6ca8:	d107      	bne.n	6cba <Ftm_Pwm_Ip_InitPair+0xba>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    6caa:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6cae:	2201      	movs	r2, #1
    6cb0:	4619      	mov	r1, r3
    6cb2:	9803      	ldr	r0, [sp, #12]
    6cb4:	f7ff f9fa 	bl	60ac <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    6cb8:	e006      	b.n	6cc8 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    6cba:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6cbe:	2200      	movs	r2, #0
    6cc0:	4619      	mov	r1, r3
    6cc2:	9803      	ldr	r0, [sp, #12]
    6cc4:	f7ff f9f2 	bl	60ac <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    6cc8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6ccc:	4619      	mov	r1, r3
    6cce:	9803      	ldr	r0, [sp, #12]
    6cd0:	f7fe fe31 	bl	5936 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    6cd4:	9b00      	ldr	r3, [sp, #0]
    6cd6:	7819      	ldrb	r1, [r3, #0]
    6cd8:	9b00      	ldr	r3, [sp, #0]
    6cda:	7a5b      	ldrb	r3, [r3, #9]
    6cdc:	461a      	mov	r2, r3
    6cde:	9803      	ldr	r0, [sp, #12]
    6ce0:	f7ff f92c 	bl	5f3c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    6ce4:	9b00      	ldr	r3, [sp, #0]
    6ce6:	7819      	ldrb	r1, [r3, #0]
    6ce8:	9b00      	ldr	r3, [sp, #0]
    6cea:	785b      	ldrb	r3, [r3, #1]
    6cec:	461a      	mov	r2, r3
    6cee:	9803      	ldr	r0, [sp, #12]
    6cf0:	f7ff f8fd 	bl	5eee <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    6cf4:	9b00      	ldr	r3, [sp, #0]
    6cf6:	7a1a      	ldrb	r2, [r3, #8]
    6cf8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6cfc:	4619      	mov	r1, r3
    6cfe:	9803      	ldr	r0, [sp, #12]
    6d00:	f7ff fddd 	bl	68be <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    6d04:	2101      	movs	r1, #1
    6d06:	9803      	ldr	r0, [sp, #12]
    6d08:	f7ff f814 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    6d0c:	bf00      	nop
    6d0e:	b005      	add	sp, #20
    6d10:	f85d fb04 	ldr.w	pc, [sp], #4
    6d14:	0000bd60 	.word	0x0000bd60
    6d18:	1fff8d44 	.word	0x1fff8d44

00006d1c <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    6d1c:	b500      	push	{lr}
    6d1e:	b085      	sub	sp, #20
    6d20:	4603      	mov	r3, r0
    6d22:	460a      	mov	r2, r1
    6d24:	f88d 3007 	strb.w	r3, [sp, #7]
    6d28:	4613      	mov	r3, r2
    6d2a:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6d2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d32:	4a0a      	ldr	r2, [pc, #40]	; (6d5c <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    6d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d38:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    6d3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6d3e:	2200      	movs	r2, #0
    6d40:	4619      	mov	r1, r3
    6d42:	9803      	ldr	r0, [sp, #12]
    6d44:	f7fe feed 	bl	5b22 <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    6d48:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6d4c:	4619      	mov	r1, r3
    6d4e:	9803      	ldr	r0, [sp, #12]
    6d50:	f7fe ff0a 	bl	5b68 <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    6d54:	bf00      	nop
    6d56:	b005      	add	sp, #20
    6d58:	f85d fb04 	ldr.w	pc, [sp], #4
    6d5c:	0000bd60 	.word	0x0000bd60

00006d60 <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    6d60:	b500      	push	{lr}
    6d62:	b085      	sub	sp, #20
    6d64:	4603      	mov	r3, r0
    6d66:	9100      	str	r1, [sp, #0]
    6d68:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6d6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d70:	4a53      	ldr	r2, [pc, #332]	; (6ec0 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    6d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d76:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    6d78:	9b00      	ldr	r3, [sp, #0]
    6d7a:	681b      	ldr	r3, [r3, #0]
    6d7c:	2b00      	cmp	r3, #0
    6d7e:	d002      	beq.n	6d86 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    6d80:	2b01      	cmp	r3, #1
    6d82:	d04c      	beq.n	6e1e <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    6d84:	e097      	b.n	6eb6 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    6d86:	9b00      	ldr	r3, [sp, #0]
    6d88:	699b      	ldr	r3, [r3, #24]
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	bf14      	ite	ne
    6d8e:	2301      	movne	r3, #1
    6d90:	2300      	moveq	r3, #0
    6d92:	b2db      	uxtb	r3, r3
    6d94:	4619      	mov	r1, r3
    6d96:	9803      	ldr	r0, [sp, #12]
    6d98:	f7ff faa3 	bl	62e2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    6d9c:	2100      	movs	r1, #0
    6d9e:	9803      	ldr	r0, [sp, #12]
    6da0:	f7ff fb1c 	bl	63dc <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    6da4:	9b00      	ldr	r3, [sp, #0]
    6da6:	691b      	ldr	r3, [r3, #16]
    6da8:	2b00      	cmp	r3, #0
    6daa:	bf14      	ite	ne
    6dac:	2301      	movne	r3, #1
    6dae:	2300      	moveq	r3, #0
    6db0:	b2db      	uxtb	r3, r3
    6db2:	4619      	mov	r1, r3
    6db4:	9803      	ldr	r0, [sp, #12]
    6db6:	f7ff faad 	bl	6314 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    6dba:	2100      	movs	r1, #0
    6dbc:	9803      	ldr	r0, [sp, #12]
    6dbe:	f7ff fb26 	bl	640e <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    6dc2:	9b00      	ldr	r3, [sp, #0]
    6dc4:	695b      	ldr	r3, [r3, #20]
    6dc6:	2b00      	cmp	r3, #0
    6dc8:	bf14      	ite	ne
    6dca:	2301      	movne	r3, #1
    6dcc:	2300      	moveq	r3, #0
    6dce:	b2db      	uxtb	r3, r3
    6dd0:	4619      	mov	r1, r3
    6dd2:	9803      	ldr	r0, [sp, #12]
    6dd4:	f7ff fab7 	bl	6346 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    6dd8:	2100      	movs	r1, #0
    6dda:	9803      	ldr	r0, [sp, #12]
    6ddc:	f7ff fb17 	bl	640e <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6de0:	9b00      	ldr	r3, [sp, #0]
    6de2:	69db      	ldr	r3, [r3, #28]
    6de4:	2b00      	cmp	r3, #0
    6de6:	bf14      	ite	ne
    6de8:	2301      	movne	r3, #1
    6dea:	2300      	moveq	r3, #0
    6dec:	b2db      	uxtb	r3, r3
    6dee:	4619      	mov	r1, r3
    6df0:	9803      	ldr	r0, [sp, #12]
    6df2:	f7ff fa5d 	bl	62b0 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    6df6:	2100      	movs	r1, #0
    6df8:	9803      	ldr	r0, [sp, #12]
    6dfa:	f7ff fad6 	bl	63aa <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6dfe:	9b00      	ldr	r3, [sp, #0]
    6e00:	6a1b      	ldr	r3, [r3, #32]
    6e02:	2b00      	cmp	r3, #0
    6e04:	bf14      	ite	ne
    6e06:	2301      	movne	r3, #1
    6e08:	2300      	moveq	r3, #0
    6e0a:	b2db      	uxtb	r3, r3
    6e0c:	4619      	mov	r1, r3
    6e0e:	9803      	ldr	r0, [sp, #12]
    6e10:	f7ff fa35 	bl	627e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    6e14:	2100      	movs	r1, #0
    6e16:	9803      	ldr	r0, [sp, #12]
    6e18:	f7ff faae 	bl	6378 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    6e1c:	e04b      	b.n	6eb6 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    6e1e:	2100      	movs	r1, #0
    6e20:	9803      	ldr	r0, [sp, #12]
    6e22:	f7ff fa5e 	bl	62e2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    6e26:	9b00      	ldr	r3, [sp, #0]
    6e28:	699b      	ldr	r3, [r3, #24]
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	bf14      	ite	ne
    6e2e:	2301      	movne	r3, #1
    6e30:	2300      	moveq	r3, #0
    6e32:	b2db      	uxtb	r3, r3
    6e34:	4619      	mov	r1, r3
    6e36:	9803      	ldr	r0, [sp, #12]
    6e38:	f7ff fad0 	bl	63dc <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    6e3c:	2100      	movs	r1, #0
    6e3e:	9803      	ldr	r0, [sp, #12]
    6e40:	f7ff fa68 	bl	6314 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    6e44:	9b00      	ldr	r3, [sp, #0]
    6e46:	691b      	ldr	r3, [r3, #16]
    6e48:	2b00      	cmp	r3, #0
    6e4a:	bf14      	ite	ne
    6e4c:	2301      	movne	r3, #1
    6e4e:	2300      	moveq	r3, #0
    6e50:	b2db      	uxtb	r3, r3
    6e52:	4619      	mov	r1, r3
    6e54:	9803      	ldr	r0, [sp, #12]
    6e56:	f7ff fada 	bl	640e <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    6e5a:	2100      	movs	r1, #0
    6e5c:	9803      	ldr	r0, [sp, #12]
    6e5e:	f7ff fa72 	bl	6346 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    6e62:	9b00      	ldr	r3, [sp, #0]
    6e64:	695b      	ldr	r3, [r3, #20]
    6e66:	2b00      	cmp	r3, #0
    6e68:	bf14      	ite	ne
    6e6a:	2301      	movne	r3, #1
    6e6c:	2300      	moveq	r3, #0
    6e6e:	b2db      	uxtb	r3, r3
    6e70:	4619      	mov	r1, r3
    6e72:	9803      	ldr	r0, [sp, #12]
    6e74:	f7ff facb 	bl	640e <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    6e78:	2100      	movs	r1, #0
    6e7a:	9803      	ldr	r0, [sp, #12]
    6e7c:	f7ff fa18 	bl	62b0 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6e80:	9b00      	ldr	r3, [sp, #0]
    6e82:	69db      	ldr	r3, [r3, #28]
    6e84:	2b00      	cmp	r3, #0
    6e86:	bf14      	ite	ne
    6e88:	2301      	movne	r3, #1
    6e8a:	2300      	moveq	r3, #0
    6e8c:	b2db      	uxtb	r3, r3
    6e8e:	4619      	mov	r1, r3
    6e90:	9803      	ldr	r0, [sp, #12]
    6e92:	f7ff fa8a 	bl	63aa <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    6e96:	2100      	movs	r1, #0
    6e98:	9803      	ldr	r0, [sp, #12]
    6e9a:	f7ff f9f0 	bl	627e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6e9e:	9b00      	ldr	r3, [sp, #0]
    6ea0:	6a1b      	ldr	r3, [r3, #32]
    6ea2:	2b00      	cmp	r3, #0
    6ea4:	bf14      	ite	ne
    6ea6:	2301      	movne	r3, #1
    6ea8:	2300      	moveq	r3, #0
    6eaa:	b2db      	uxtb	r3, r3
    6eac:	4619      	mov	r1, r3
    6eae:	9803      	ldr	r0, [sp, #12]
    6eb0:	f7ff fa62 	bl	6378 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    6eb4:	bf00      	nop
    }
}
    6eb6:	bf00      	nop
    6eb8:	b005      	add	sp, #20
    6eba:	f85d fb04 	ldr.w	pc, [sp], #4
    6ebe:	bf00      	nop
    6ec0:	0000bd60 	.word	0x0000bd60

00006ec4 <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    6ec4:	b500      	push	{lr}
    6ec6:	b085      	sub	sp, #20
    6ec8:	4603      	mov	r3, r0
    6eca:	9100      	str	r1, [sp, #0]
    6ecc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6ed0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ed4:	4a19      	ldr	r2, [pc, #100]	; (6f3c <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    6ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eda:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6edc:	9b00      	ldr	r3, [sp, #0]
    6ede:	699b      	ldr	r3, [r3, #24]
    6ee0:	2b00      	cmp	r3, #0
    6ee2:	bf14      	ite	ne
    6ee4:	2301      	movne	r3, #1
    6ee6:	2300      	moveq	r3, #0
    6ee8:	b2db      	uxtb	r3, r3
    6eea:	4619      	mov	r1, r3
    6eec:	9803      	ldr	r0, [sp, #12]
    6eee:	f7fe fee6 	bl	5cbe <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6ef2:	9b00      	ldr	r3, [sp, #0]
    6ef4:	691b      	ldr	r3, [r3, #16]
    6ef6:	2b00      	cmp	r3, #0
    6ef8:	bf14      	ite	ne
    6efa:	2301      	movne	r3, #1
    6efc:	2300      	moveq	r3, #0
    6efe:	b2db      	uxtb	r3, r3
    6f00:	4619      	mov	r1, r3
    6f02:	9803      	ldr	r0, [sp, #12]
    6f04:	f7ff f973 	bl	61ee <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6f08:	9b00      	ldr	r3, [sp, #0]
    6f0a:	695b      	ldr	r3, [r3, #20]
    6f0c:	2b00      	cmp	r3, #0
    6f0e:	bf14      	ite	ne
    6f10:	2301      	movne	r3, #1
    6f12:	2300      	moveq	r3, #0
    6f14:	b2db      	uxtb	r3, r3
    6f16:	4619      	mov	r1, r3
    6f18:	9803      	ldr	r0, [sp, #12]
    6f1a:	f7ff f980 	bl	621e <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6f1e:	9b00      	ldr	r3, [sp, #0]
    6f20:	69db      	ldr	r3, [r3, #28]
    6f22:	2b00      	cmp	r3, #0
    6f24:	bf14      	ite	ne
    6f26:	2301      	movne	r3, #1
    6f28:	2300      	moveq	r3, #0
    6f2a:	b2db      	uxtb	r3, r3
    6f2c:	4619      	mov	r1, r3
    6f2e:	9803      	ldr	r0, [sp, #12]
    6f30:	f7ff f945 	bl	61be <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    6f34:	bf00      	nop
    6f36:	b005      	add	sp, #20
    6f38:	f85d fb04 	ldr.w	pc, [sp], #4
    6f3c:	0000bd60 	.word	0x0000bd60

00006f40 <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    6f40:	b500      	push	{lr}
    6f42:	b087      	sub	sp, #28
    6f44:	4603      	mov	r3, r0
    6f46:	9100      	str	r1, [sp, #0]
    6f48:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6f4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f50:	4a42      	ldr	r2, [pc, #264]	; (705c <Ftm_Pwm_Ip_UpdateSync+0x11c>)
    6f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f56:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    6f58:	2300      	movs	r3, #0
    6f5a:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    6f5c:	2300      	movs	r3, #0
    6f5e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(SyncCfg != NULL_PTR);
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    6f62:	9b00      	ldr	r3, [sp, #0]
    6f64:	791b      	ldrb	r3, [r3, #4]
    6f66:	2b00      	cmp	r3, #0
    6f68:	d107      	bne.n	6f7a <Ftm_Pwm_Ip_UpdateSync+0x3a>
    6f6a:	9b00      	ldr	r3, [sp, #0]
    6f6c:	795b      	ldrb	r3, [r3, #5]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d103      	bne.n	6f7a <Ftm_Pwm_Ip_UpdateSync+0x3a>
    6f72:	9b00      	ldr	r3, [sp, #0]
    6f74:	799b      	ldrb	r3, [r3, #6]
    6f76:	2b00      	cmp	r3, #0
    6f78:	d001      	beq.n	6f7e <Ftm_Pwm_Ip_UpdateSync+0x3e>
    6f7a:	2301      	movs	r3, #1
    6f7c:	e000      	b.n	6f80 <Ftm_Pwm_Ip_UpdateSync+0x40>
    6f7e:	2300      	movs	r3, #0
    6f80:	f88d 300f 	strb.w	r3, [sp, #15]
    6f84:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f88:	f003 0301 	and.w	r3, r3, #1
    6f8c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    6f90:	9b00      	ldr	r3, [sp, #0]
    6f92:	681b      	ldr	r3, [r3, #0]
    6f94:	2b00      	cmp	r3, #0
    6f96:	d105      	bne.n	6fa4 <Ftm_Pwm_Ip_UpdateSync+0x64>
    6f98:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f9c:	2b00      	cmp	r3, #0
    6f9e:	d001      	beq.n	6fa4 <Ftm_Pwm_Ip_UpdateSync+0x64>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    6fa0:	2301      	movs	r3, #1
    6fa2:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    6fa4:	9b00      	ldr	r3, [sp, #0]
    6fa6:	6a1b      	ldr	r3, [r3, #32]
    6fa8:	2b02      	cmp	r3, #2
    6faa:	d101      	bne.n	6fb0 <Ftm_Pwm_Ip_UpdateSync+0x70>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    6fac:	2301      	movs	r3, #1
    6fae:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    6fb0:	9b05      	ldr	r3, [sp, #20]
    6fb2:	2b00      	cmp	r3, #0
    6fb4:	d14c      	bne.n	7050 <Ftm_Pwm_Ip_UpdateSync+0x110>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    6fb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6fba:	9900      	ldr	r1, [sp, #0]
    6fbc:	4618      	mov	r0, r3
    6fbe:	f7ff fecf 	bl	6d60 <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    6fc2:	2101      	movs	r1, #1
    6fc4:	9804      	ldr	r0, [sp, #16]
    6fc6:	f7ff f942 	bl	624e <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    6fca:	9b00      	ldr	r3, [sp, #0]
    6fcc:	791b      	ldrb	r3, [r3, #4]
    6fce:	461a      	mov	r2, r3
    6fd0:	2100      	movs	r1, #0
    6fd2:	9804      	ldr	r0, [sp, #16]
    6fd4:	f7fe fe89 	bl	5cea <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    6fd8:	9b00      	ldr	r3, [sp, #0]
    6fda:	795b      	ldrb	r3, [r3, #5]
    6fdc:	461a      	mov	r2, r3
    6fde:	2101      	movs	r1, #1
    6fe0:	9804      	ldr	r0, [sp, #16]
    6fe2:	f7fe fe82 	bl	5cea <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    6fe6:	9b00      	ldr	r3, [sp, #0]
    6fe8:	799b      	ldrb	r3, [r3, #6]
    6fea:	461a      	mov	r2, r3
    6fec:	2102      	movs	r1, #2
    6fee:	9804      	ldr	r0, [sp, #16]
    6ff0:	f7fe fe7b 	bl	5cea <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    6ff4:	9b00      	ldr	r3, [sp, #0]
    6ff6:	79db      	ldrb	r3, [r3, #7]
    6ff8:	4619      	mov	r1, r3
    6ffa:	9804      	ldr	r0, [sp, #16]
    6ffc:	f7ff f8c7 	bl	618e <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    7000:	9b00      	ldr	r3, [sp, #0]
    7002:	7a1b      	ldrb	r3, [r3, #8]
    7004:	4619      	mov	r1, r3
    7006:	9804      	ldr	r0, [sp, #16]
    7008:	f7fe fe43 	bl	5c92 <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    700c:	9b00      	ldr	r3, [sp, #0]
    700e:	7a5b      	ldrb	r3, [r3, #9]
    7010:	4619      	mov	r1, r3
    7012:	9804      	ldr	r0, [sp, #16]
    7014:	f7fe fe27 	bl	5c66 <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    7018:	9b00      	ldr	r3, [sp, #0]
    701a:	7a9b      	ldrb	r3, [r3, #10]
    701c:	2b00      	cmp	r3, #0
    701e:	d005      	beq.n	702c <Ftm_Pwm_Ip_UpdateSync+0xec>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    7020:	9b00      	ldr	r3, [sp, #0]
    7022:	899b      	ldrh	r3, [r3, #12]
    7024:	4619      	mov	r1, r3
    7026:	9804      	ldr	r0, [sp, #16]
    7028:	f7ff fac6 	bl	65b8 <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    702c:	9b00      	ldr	r3, [sp, #0]
    702e:	7a9b      	ldrb	r3, [r3, #10]
    7030:	4619      	mov	r1, r3
    7032:	9804      	ldr	r0, [sp, #16]
    7034:	f7ff faa3 	bl	657e <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    7038:	9b00      	ldr	r3, [sp, #0]
    703a:	7b9b      	ldrb	r3, [r3, #14]
    703c:	4619      	mov	r1, r3
    703e:	9804      	ldr	r0, [sp, #16]
    7040:	f7ff f86b 	bl	611a <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    7044:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7048:	9900      	ldr	r1, [sp, #0]
    704a:	4618      	mov	r0, r3
    704c:	f7ff ff3a 	bl	6ec4 <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    7050:	9b05      	ldr	r3, [sp, #20]
}
    7052:	4618      	mov	r0, r3
    7054:	b007      	add	sp, #28
    7056:	f85d fb04 	ldr.w	pc, [sp], #4
    705a:	bf00      	nop
    705c:	0000bd60 	.word	0x0000bd60

00007060 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    7060:	b500      	push	{lr}
    7062:	b085      	sub	sp, #20
    7064:	4603      	mov	r3, r0
    7066:	9100      	str	r1, [sp, #0]
    7068:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    706c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7070:	4a1f      	ldr	r2, [pc, #124]	; (70f0 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    7072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7076:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    7078:	9803      	ldr	r0, [sp, #12]
    707a:	f7ff fbab 	bl	67d4 <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    707e:	2100      	movs	r1, #0
    7080:	9803      	ldr	r0, [sp, #12]
    7082:	f7fe fc01 	bl	5888 <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    7086:	9803      	ldr	r0, [sp, #12]
    7088:	f7fe fc4a 	bl	5920 <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    708c:	9b00      	ldr	r3, [sp, #0]
    708e:	68db      	ldr	r3, [r3, #12]
    7090:	2b00      	cmp	r3, #0
    7092:	bf14      	ite	ne
    7094:	2301      	movne	r3, #1
    7096:	2300      	moveq	r3, #0
    7098:	b2db      	uxtb	r3, r3
    709a:	4619      	mov	r1, r3
    709c:	9803      	ldr	r0, [sp, #12]
    709e:	f7fe fc04 	bl	58aa <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    70a2:	2100      	movs	r1, #0
    70a4:	9803      	ldr	r0, [sp, #12]
    70a6:	f7fe fdb2 	bl	5c0e <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    70aa:	9b00      	ldr	r3, [sp, #0]
    70ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70ae:	4619      	mov	r1, r3
    70b0:	9803      	ldr	r0, [sp, #12]
    70b2:	f7ff f847 	bl	6144 <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    70b6:	9b00      	ldr	r3, [sp, #0]
    70b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    70ba:	b2db      	uxtb	r3, r3
    70bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70c0:	b2db      	uxtb	r3, r3
    70c2:	4619      	mov	r1, r3
    70c4:	9803      	ldr	r0, [sp, #12]
    70c6:	f7fe ff87 	bl	5fd8 <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    70ca:	9b00      	ldr	r3, [sp, #0]
    70cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    70ce:	099b      	lsrs	r3, r3, #6
    70d0:	b29b      	uxth	r3, r3
    70d2:	b2db      	uxtb	r3, r3
    70d4:	4619      	mov	r1, r3
    70d6:	9803      	ldr	r0, [sp, #12]
    70d8:	f7fe ffa2 	bl	6020 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    70dc:	9b00      	ldr	r3, [sp, #0]
    70de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    70e0:	4619      	mov	r1, r3
    70e2:	9803      	ldr	r0, [sp, #12]
    70e4:	f7fe ff8b 	bl	5ffe <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    70e8:	bf00      	nop
    70ea:	b005      	add	sp, #20
    70ec:	f85d fb04 	ldr.w	pc, [sp], #4
    70f0:	0000bd60 	.word	0x0000bd60

000070f4 <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    70f4:	b500      	push	{lr}
    70f6:	b085      	sub	sp, #20
    70f8:	4603      	mov	r3, r0
    70fa:	9100      	str	r1, [sp, #0]
    70fc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7100:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7104:	4a39      	ldr	r2, [pc, #228]	; (71ec <Ftm_Pwm_Ip_InitInstance+0xf8>)
    7106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    710a:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    710c:	4b38      	ldr	r3, [pc, #224]	; (71f0 <Ftm_Pwm_Ip_InitInstance+0xfc>)
    710e:	9302      	str	r3, [sp, #8]
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    7110:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7114:	4619      	mov	r1, r3
    7116:	9802      	ldr	r0, [sp, #8]
    7118:	f7ff fd20 	bl	6b5c <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    711c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7120:	9900      	ldr	r1, [sp, #0]
    7122:	4618      	mov	r0, r3
    7124:	f7ff ff9c 	bl	7060 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    7128:	9b00      	ldr	r3, [sp, #0]
    712a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    712c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7130:	4611      	mov	r1, r2
    7132:	4618      	mov	r0, r3
    7134:	f7ff ff04 	bl	6f40 <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    7138:	2100      	movs	r1, #0
    713a:	9803      	ldr	r0, [sp, #12]
    713c:	f7fe fd56 	bl	5bec <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    7140:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7144:	9a00      	ldr	r2, [sp, #0]
    7146:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    7148:	4a2a      	ldr	r2, [pc, #168]	; (71f4 <Ftm_Pwm_Ip_InitInstance+0x100>)
    714a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    714e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7152:	9a00      	ldr	r2, [sp, #0]
    7154:	6812      	ldr	r2, [r2, #0]
    7156:	4928      	ldr	r1, [pc, #160]	; (71f8 <Ftm_Pwm_Ip_InitInstance+0x104>)
    7158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    715c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7160:	9a00      	ldr	r2, [sp, #0]
    7162:	6852      	ldr	r2, [r2, #4]
    7164:	4925      	ldr	r1, [pc, #148]	; (71fc <Ftm_Pwm_Ip_InitInstance+0x108>)
    7166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    716a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    716e:	9a00      	ldr	r2, [sp, #0]
    7170:	6892      	ldr	r2, [r2, #8]
    7172:	4923      	ldr	r1, [pc, #140]	; (7200 <Ftm_Pwm_Ip_InitInstance+0x10c>)
    7174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    7178:	9b00      	ldr	r3, [sp, #0]
    717a:	7c1b      	ldrb	r3, [r3, #16]
    717c:	2b00      	cmp	r3, #0
    717e:	d00e      	beq.n	719e <Ftm_Pwm_Ip_InitInstance+0xaa>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    7180:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7184:	9a00      	ldr	r2, [sp, #0]
    7186:	6952      	ldr	r2, [r2, #20]
    7188:	491e      	ldr	r1, [pc, #120]	; (7204 <Ftm_Pwm_Ip_InitInstance+0x110>)
    718a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    718e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7192:	9a00      	ldr	r2, [sp, #0]
    7194:	6992      	ldr	r2, [r2, #24]
    7196:	491b      	ldr	r1, [pc, #108]	; (7204 <Ftm_Pwm_Ip_InitInstance+0x110>)
    7198:	00db      	lsls	r3, r3, #3
    719a:	440b      	add	r3, r1
    719c:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    719e:	9b00      	ldr	r3, [sp, #0]
    71a0:	68db      	ldr	r3, [r3, #12]
    71a2:	2b01      	cmp	r3, #1
    71a4:	d108      	bne.n	71b8 <Ftm_Pwm_Ip_InitInstance+0xc4>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    71a6:	9b00      	ldr	r3, [sp, #0]
    71a8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    71aa:	085b      	lsrs	r3, r3, #1
    71ac:	b29b      	uxth	r3, r3
    71ae:	4619      	mov	r1, r3
    71b0:	9803      	ldr	r0, [sp, #12]
    71b2:	f7fe fbe3 	bl	597c <Ftm_Pwm_Ip_SetMod>
    71b6:	e007      	b.n	71c8 <Ftm_Pwm_Ip_InitInstance+0xd4>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    71b8:	9b00      	ldr	r3, [sp, #0]
    71ba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    71bc:	3b01      	subs	r3, #1
    71be:	b29b      	uxth	r3, r3
    71c0:	4619      	mov	r1, r3
    71c2:	9803      	ldr	r0, [sp, #12]
    71c4:	f7fe fbda 	bl	597c <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    71c8:	9b00      	ldr	r3, [sp, #0]
    71ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    71ce:	4619      	mov	r1, r3
    71d0:	9803      	ldr	r0, [sp, #12]
    71d2:	f7fe ff39 	bl	6048 <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    71d6:	9b00      	ldr	r3, [sp, #0]
    71d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    71da:	4619      	mov	r1, r3
    71dc:	9803      	ldr	r0, [sp, #12]
    71de:	f7fe ffc3 	bl	6168 <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    71e2:	bf00      	nop
    71e4:	b005      	add	sp, #20
    71e6:	f85d fb04 	ldr.w	pc, [sp], #4
    71ea:	bf00      	nop
    71ec:	0000bd60 	.word	0x0000bd60
    71f0:	40048000 	.word	0x40048000
    71f4:	1fff8cfc 	.word	0x1fff8cfc
    71f8:	1fff8ff4 	.word	0x1fff8ff4
    71fc:	1fff9004 	.word	0x1fff9004
    7200:	1fff9014 	.word	0x1fff9014
    7204:	1fff8ea4 	.word	0x1fff8ea4

00007208 <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    7208:	b500      	push	{lr}
    720a:	b085      	sub	sp, #20
    720c:	4603      	mov	r3, r0
    720e:	9100      	str	r1, [sp, #0]
    7210:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7214:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7218:	4a1a      	ldr	r2, [pc, #104]	; (7284 <Ftm_Pwm_Ip_InitInstanceStart+0x7c>)
    721a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    721e:	9303      	str	r3, [sp, #12]
    DevAssert(NULL_PTR != UserInstCfg);
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    7220:	9b00      	ldr	r3, [sp, #0]
    7222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    7226:	4619      	mov	r1, r3
    7228:	9803      	ldr	r0, [sp, #12]
    722a:	f7ff fc03 	bl	6a34 <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    722e:	9b00      	ldr	r3, [sp, #0]
    7230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7232:	4619      	mov	r1, r3
    7234:	9803      	ldr	r0, [sp, #12]
    7236:	f7ff fc11 	bl	6a5c <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    723a:	9b00      	ldr	r3, [sp, #0]
    723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    723e:	4619      	mov	r1, r3
    7240:	9803      	ldr	r0, [sp, #12]
    7242:	f7ff fb7a 	bl	693a <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    7246:	2101      	movs	r1, #1
    7248:	9803      	ldr	r0, [sp, #12]
    724a:	f7fe fce0 	bl	5c0e <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    724e:	2101      	movs	r1, #1
    7250:	9803      	ldr	r0, [sp, #12]
    7252:	f7fe fcf2 	bl	5c3a <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    7256:	9b00      	ldr	r3, [sp, #0]
    7258:	685b      	ldr	r3, [r3, #4]
    725a:	4619      	mov	r1, r3
    725c:	9803      	ldr	r0, [sp, #12]
    725e:	f7fe fb03 	bl	5868 <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    7262:	9b00      	ldr	r3, [sp, #0]
    7264:	681b      	ldr	r3, [r3, #0]
    7266:	4619      	mov	r1, r3
    7268:	9803      	ldr	r0, [sp, #12]
    726a:	f7fe fb0d 	bl	5888 <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    726e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7272:	4a05      	ldr	r2, [pc, #20]	; (7288 <Ftm_Pwm_Ip_InitInstanceStart+0x80>)
    7274:	2101      	movs	r1, #1
    7276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    727a:	bf00      	nop
    727c:	b005      	add	sp, #20
    727e:	f85d fb04 	ldr.w	pc, [sp], #4
    7282:	bf00      	nop
    7284:	0000bd60 	.word	0x0000bd60
    7288:	1fff8ec4 	.word	0x1fff8ec4

0000728c <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    728c:	b500      	push	{lr}
    728e:	b085      	sub	sp, #20
    7290:	4603      	mov	r3, r0
    7292:	9100      	str	r1, [sp, #0]
    7294:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7298:	f89d 3007 	ldrb.w	r3, [sp, #7]
    729c:	4a37      	ldr	r2, [pc, #220]	; (737c <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    729e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72a2:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    72a4:	2300      	movs	r3, #0
    72a6:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    72aa:	2300      	movs	r3, #0
    72ac:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    72b0:	9b00      	ldr	r3, [sp, #0]
    72b2:	781b      	ldrb	r3, [r3, #0]
    72b4:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    72b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    72bc:	085b      	lsrs	r3, r3, #1
    72be:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    72c2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    72c6:	2201      	movs	r2, #1
    72c8:	4619      	mov	r1, r3
    72ca:	9803      	ldr	r0, [sp, #12]
    72cc:	f7fe fe36 	bl	5f3c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    72d0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    72d4:	2201      	movs	r2, #1
    72d6:	4619      	mov	r1, r3
    72d8:	9803      	ldr	r0, [sp, #12]
    72da:	f7ff fb63 	bl	69a4 <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    72de:	9b00      	ldr	r3, [sp, #0]
    72e0:	685b      	ldr	r3, [r3, #4]
    72e2:	2b22      	cmp	r3, #34	; 0x22
    72e4:	d003      	beq.n	72ee <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    72e6:	9b00      	ldr	r3, [sp, #0]
    72e8:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    72ea:	2b21      	cmp	r3, #33	; 0x21
    72ec:	d113      	bne.n	7316 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    72ee:	f89d 300a 	ldrb.w	r3, [sp, #10]
    72f2:	005b      	lsls	r3, r3, #1
    72f4:	b2db      	uxtb	r3, r3
    72f6:	3301      	adds	r3, #1
    72f8:	b2d9      	uxtb	r1, r3
    72fa:	9b00      	ldr	r3, [sp, #0]
    72fc:	685b      	ldr	r3, [r3, #4]
    72fe:	461a      	mov	r2, r3
    7300:	9803      	ldr	r0, [sp, #12]
    7302:	f7fe fb76 	bl	59f2 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    7306:	f89d 300a 	ldrb.w	r3, [sp, #10]
    730a:	2201      	movs	r2, #1
    730c:	4619      	mov	r1, r3
    730e:	9803      	ldr	r0, [sp, #12]
    7310:	f7fe fd89 	bl	5e26 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    7314:	e021      	b.n	735a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    7316:	9b00      	ldr	r3, [sp, #0]
    7318:	685b      	ldr	r3, [r3, #4]
    731a:	2b62      	cmp	r3, #98	; 0x62
    731c:	d003      	beq.n	7326 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    731e:	9b00      	ldr	r3, [sp, #0]
    7320:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    7322:	2b61      	cmp	r3, #97	; 0x61
    7324:	d119      	bne.n	735a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    7326:	f89d 300a 	ldrb.w	r3, [sp, #10]
    732a:	005b      	lsls	r3, r3, #1
    732c:	b2db      	uxtb	r3, r3
    732e:	3301      	adds	r3, #1
    7330:	b2d9      	uxtb	r1, r3
    7332:	9b00      	ldr	r3, [sp, #0]
    7334:	685b      	ldr	r3, [r3, #4]
    7336:	461a      	mov	r2, r3
    7338:	9803      	ldr	r0, [sp, #12]
    733a:	f7fe fb5a 	bl	59f2 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    733e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7342:	2201      	movs	r2, #1
    7344:	4619      	mov	r1, r3
    7346:	9803      	ldr	r0, [sp, #12]
    7348:	f7fe fd6d 	bl	5e26 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    734c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7350:	2201      	movs	r2, #1
    7352:	4619      	mov	r1, r3
    7354:	9803      	ldr	r0, [sp, #12]
    7356:	f7fe fe18 	bl	5f8a <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    735a:	9b00      	ldr	r3, [sp, #0]
    735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    735e:	2b00      	cmp	r3, #0
    7360:	d007      	beq.n	7372 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    7362:	9b00      	ldr	r3, [sp, #0]
    7364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7366:	f89d 3007 	ldrb.w	r3, [sp, #7]
    736a:	4611      	mov	r1, r2
    736c:	4618      	mov	r0, r3
    736e:	f7ff fc47 	bl	6c00 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    7372:	bf00      	nop
    7374:	b005      	add	sp, #20
    7376:	f85d fb04 	ldr.w	pc, [sp], #4
    737a:	bf00      	nop
    737c:	0000bd60 	.word	0x0000bd60

00007380 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    7380:	b500      	push	{lr}
    7382:	b085      	sub	sp, #20
    7384:	4603      	mov	r3, r0
    7386:	9100      	str	r1, [sp, #0]
    7388:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    738c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7390:	4a15      	ldr	r2, [pc, #84]	; (73e8 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    7392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7396:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    7398:	9b00      	ldr	r3, [sp, #0]
    739a:	7819      	ldrb	r1, [r3, #0]
    739c:	9b00      	ldr	r3, [sp, #0]
    739e:	7ddb      	ldrb	r3, [r3, #23]
    73a0:	461a      	mov	r2, r3
    73a2:	9803      	ldr	r0, [sp, #12]
    73a4:	f7ff fa8b 	bl	68be <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    73a8:	9b00      	ldr	r3, [sp, #0]
    73aa:	7819      	ldrb	r1, [r3, #0]
    73ac:	9b00      	ldr	r3, [sp, #0]
    73ae:	7e1b      	ldrb	r3, [r3, #24]
    73b0:	461a      	mov	r2, r3
    73b2:	9803      	ldr	r0, [sp, #12]
    73b4:	f7ff f8ba 	bl	652c <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    73b8:	9b00      	ldr	r3, [sp, #0]
    73ba:	7819      	ldrb	r1, [r3, #0]
    73bc:	9b00      	ldr	r3, [sp, #0]
    73be:	7d5b      	ldrb	r3, [r3, #21]
    73c0:	461a      	mov	r2, r3
    73c2:	9803      	ldr	r0, [sp, #12]
    73c4:	f7ff f87c 	bl	64c0 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    73c8:	9b00      	ldr	r3, [sp, #0]
    73ca:	7819      	ldrb	r1, [r3, #0]
    73cc:	9b00      	ldr	r3, [sp, #0]
    73ce:	7d9b      	ldrb	r3, [r3, #22]
    73d0:	461a      	mov	r2, r3
    73d2:	9803      	ldr	r0, [sp, #12]
    73d4:	f7ff f834 	bl	6440 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    73d8:	2101      	movs	r1, #1
    73da:	9803      	ldr	r0, [sp, #12]
    73dc:	f7fe fcaa 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    73e0:	bf00      	nop
    73e2:	b005      	add	sp, #20
    73e4:	f85d fb04 	ldr.w	pc, [sp], #4
    73e8:	0000bd60 	.word	0x0000bd60

000073ec <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    73ec:	b500      	push	{lr}
    73ee:	b085      	sub	sp, #20
    73f0:	4603      	mov	r3, r0
    73f2:	9100      	str	r1, [sp, #0]
    73f4:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    73f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73fc:	4a48      	ldr	r2, [pc, #288]	; (7520 <Ftm_Pwm_Ip_InitChannel+0x134>)
    73fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7402:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    7404:	2300      	movs	r3, #0
    7406:	f88d 300b 	strb.w	r3, [sp, #11]
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(NULL_PTR != UserChCfg);
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    740a:	9b00      	ldr	r3, [sp, #0]
    740c:	781b      	ldrb	r3, [r3, #0]
    740e:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    7412:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7416:	f89d 300b 	ldrb.w	r3, [sp, #11]
    741a:	9900      	ldr	r1, [sp, #0]
    741c:	8b48      	ldrh	r0, [r1, #26]
    741e:	4941      	ldr	r1, [pc, #260]	; (7524 <Ftm_Pwm_Ip_InitChannel+0x138>)
    7420:	00d2      	lsls	r2, r2, #3
    7422:	4413      	add	r3, r2
    7424:	4602      	mov	r2, r0
    7426:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    742a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    742e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7432:	9a00      	ldr	r2, [sp, #0]
    7434:	69d2      	ldr	r2, [r2, #28]
    7436:	483c      	ldr	r0, [pc, #240]	; (7528 <Ftm_Pwm_Ip_InitChannel+0x13c>)
    7438:	00c9      	lsls	r1, r1, #3
    743a:	440b      	add	r3, r1
    743c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    7440:	9b00      	ldr	r3, [sp, #0]
    7442:	6a1a      	ldr	r2, [r3, #32]
    7444:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7448:	4619      	mov	r1, r3
    744a:	9803      	ldr	r0, [sp, #12]
    744c:	f7fe fe2e 	bl	60ac <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    7450:	9b00      	ldr	r3, [sp, #0]
    7452:	69da      	ldr	r2, [r3, #28]
    7454:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7458:	4619      	mov	r1, r3
    745a:	9803      	ldr	r0, [sp, #12]
    745c:	f7fe fc80 	bl	5d60 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    7460:	9b00      	ldr	r3, [sp, #0]
    7462:	685a      	ldr	r2, [r3, #4]
    7464:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7468:	4619      	mov	r1, r3
    746a:	9803      	ldr	r0, [sp, #12]
    746c:	f7fe fac1 	bl	59f2 <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    7470:	9b00      	ldr	r3, [sp, #0]
    7472:	685a      	ldr	r2, [r3, #4]
    7474:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7478:	4619      	mov	r1, r3
    747a:	9803      	ldr	r0, [sp, #12]
    747c:	f7fe faf0 	bl	5a60 <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    7480:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7484:	9900      	ldr	r1, [sp, #0]
    7486:	4618      	mov	r0, r3
    7488:	f7ff ff00 	bl	728c <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    748c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7490:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7494:	4923      	ldr	r1, [pc, #140]	; (7524 <Ftm_Pwm_Ip_InitChannel+0x138>)
    7496:	00d2      	lsls	r2, r2, #3
    7498:	4413      	add	r3, r2
    749a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    749e:	f89d 100b 	ldrb.w	r1, [sp, #11]
    74a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    74a6:	2301      	movs	r3, #1
    74a8:	f000 f9c0 	bl	782c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    74ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74b0:	9900      	ldr	r1, [sp, #0]
    74b2:	4618      	mov	r0, r3
    74b4:	f7ff ff64 	bl	7380 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    74b8:	9b00      	ldr	r3, [sp, #0]
    74ba:	7d1b      	ldrb	r3, [r3, #20]
    74bc:	2b00      	cmp	r3, #0
    74be:	d005      	beq.n	74cc <Ftm_Pwm_Ip_InitChannel+0xe0>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    74c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74c4:	4619      	mov	r1, r3
    74c6:	9803      	ldr	r0, [sp, #12]
    74c8:	f7fe fa35 	bl	5936 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    74cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    74d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74d4:	4915      	ldr	r1, [pc, #84]	; (752c <Ftm_Pwm_Ip_InitChannel+0x140>)
    74d6:	00d2      	lsls	r2, r2, #3
    74d8:	4413      	add	r3, r2
    74da:	2201      	movs	r2, #1
    74dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    74e0:	9b00      	ldr	r3, [sp, #0]
    74e2:	7a1b      	ldrb	r3, [r3, #8]
    74e4:	2b00      	cmp	r3, #0
    74e6:	d016      	beq.n	7516 <Ftm_Pwm_Ip_InitChannel+0x12a>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    74e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
    74ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74f0:	9a00      	ldr	r2, [sp, #0]
    74f2:	68d2      	ldr	r2, [r2, #12]
    74f4:	480e      	ldr	r0, [pc, #56]	; (7530 <Ftm_Pwm_Ip_InitChannel+0x144>)
    74f6:	00c9      	lsls	r1, r1, #3
    74f8:	440b      	add	r3, r1
    74fa:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    74fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7502:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7506:	9a00      	ldr	r2, [sp, #0]
    7508:	6912      	ldr	r2, [r2, #16]
    750a:	4809      	ldr	r0, [pc, #36]	; (7530 <Ftm_Pwm_Ip_InitChannel+0x144>)
    750c:	00c9      	lsls	r1, r1, #3
    750e:	440b      	add	r3, r1
    7510:	00db      	lsls	r3, r3, #3
    7512:	4403      	add	r3, r0
    7514:	605a      	str	r2, [r3, #4]
    }

}
    7516:	bf00      	nop
    7518:	b005      	add	sp, #20
    751a:	f85d fb04 	ldr.w	pc, [sp], #4
    751e:	bf00      	nop
    7520:	0000bd60 	.word	0x0000bd60
    7524:	1fff8d04 	.word	0x1fff8d04
    7528:	1fff8f74 	.word	0x1fff8f74
    752c:	1fff8ed4 	.word	0x1fff8ed4
    7530:	1fff8da4 	.word	0x1fff8da4

00007534 <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    7534:	b500      	push	{lr}
    7536:	b085      	sub	sp, #20
    7538:	4603      	mov	r3, r0
    753a:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    753e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7542:	4a17      	ldr	r2, [pc, #92]	; (75a0 <Ftm_Pwm_Ip_DeInitInstance+0x6c>)
    7544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7548:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    754a:	2100      	movs	r1, #0
    754c:	9803      	ldr	r0, [sp, #12]
    754e:	f7fe f99b 	bl	5888 <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    7552:	2100      	movs	r1, #0
    7554:	9803      	ldr	r0, [sp, #12]
    7556:	f7fe fd63 	bl	6020 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    755a:	2101      	movs	r1, #1
    755c:	9803      	ldr	r0, [sp, #12]
    755e:	f7fe fd4e 	bl	5ffe <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    7562:	2100      	movs	r1, #0
    7564:	9803      	ldr	r0, [sp, #12]
    7566:	f7fe fd37 	bl	5fd8 <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    756a:	2100      	movs	r1, #0
    756c:	9803      	ldr	r0, [sp, #12]
    756e:	f7fe fde9 	bl	6144 <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    7572:	2100      	movs	r1, #0
    7574:	9803      	ldr	r0, [sp, #12]
    7576:	f7fe f9bc 	bl	58f2 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    757a:	2100      	movs	r1, #0
    757c:	9803      	ldr	r0, [sp, #12]
    757e:	f7fe f9fd 	bl	597c <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    7582:	2100      	movs	r1, #0
    7584:	9803      	ldr	r0, [sp, #12]
    7586:	f7fe f9e8 	bl	595a <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    758a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    758e:	4a05      	ldr	r2, [pc, #20]	; (75a4 <Ftm_Pwm_Ip_DeInitInstance+0x70>)
    7590:	2100      	movs	r1, #0
    7592:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    7596:	bf00      	nop
    7598:	b005      	add	sp, #20
    759a:	f85d fb04 	ldr.w	pc, [sp], #4
    759e:	bf00      	nop
    75a0:	0000bd60 	.word	0x0000bd60
    75a4:	1fff8ec4 	.word	0x1fff8ec4

000075a8 <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    75a8:	b500      	push	{lr}
    75aa:	b085      	sub	sp, #20
    75ac:	4603      	mov	r3, r0
    75ae:	460a      	mov	r2, r1
    75b0:	f88d 3007 	strb.w	r3, [sp, #7]
    75b4:	4613      	mov	r3, r2
    75b6:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    75ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75be:	4a29      	ldr	r2, [pc, #164]	; (7664 <Ftm_Pwm_Ip_DeInitChannel+0xbc>)
    75c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75c4:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    75c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    75ca:	085b      	lsrs	r3, r3, #1
    75cc:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    75d0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    75d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75d8:	4611      	mov	r1, r2
    75da:	4618      	mov	r0, r3
    75dc:	f7ff fb9e 	bl	6d1c <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    75e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    75e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    75e8:	491f      	ldr	r1, [pc, #124]	; (7668 <Ftm_Pwm_Ip_DeInitChannel+0xc0>)
    75ea:	00d2      	lsls	r2, r2, #3
    75ec:	4413      	add	r3, r2
    75ee:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    75f2:	f89d 1006 	ldrb.w	r1, [sp, #6]
    75f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    75fa:	2301      	movs	r3, #1
    75fc:	f000 fa4c 	bl	7a98 <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    7600:	2100      	movs	r1, #0
    7602:	9803      	ldr	r0, [sp, #12]
    7604:	f7fe fb96 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    7608:	2101      	movs	r1, #1
    760a:	9803      	ldr	r0, [sp, #12]
    760c:	f7fe fb57 	bl	5cbe <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    7610:	2101      	movs	r1, #1
    7612:	9803      	ldr	r0, [sp, #12]
    7614:	f7fe fe65 	bl	62e2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    7618:	f89d 3006 	ldrb.w	r3, [sp, #6]
    761c:	2200      	movs	r2, #0
    761e:	4619      	mov	r1, r3
    7620:	9803      	ldr	r0, [sp, #12]
    7622:	f7fe fbbf 	bl	5da4 <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    7626:	2101      	movs	r1, #1
    7628:	9803      	ldr	r0, [sp, #12]
    762a:	f7fe fb83 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    762e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7632:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7636:	005b      	lsls	r3, r3, #1
    7638:	490c      	ldr	r1, [pc, #48]	; (766c <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    763a:	00d2      	lsls	r2, r2, #3
    763c:	440a      	add	r2, r1
    763e:	4413      	add	r3, r2
    7640:	2200      	movs	r2, #0
    7642:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    7644:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7648:	f89d 300b 	ldrb.w	r3, [sp, #11]
    764c:	005b      	lsls	r3, r3, #1
    764e:	3301      	adds	r3, #1
    7650:	4906      	ldr	r1, [pc, #24]	; (766c <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    7652:	00d2      	lsls	r2, r2, #3
    7654:	440a      	add	r2, r1
    7656:	4413      	add	r3, r2
    7658:	2200      	movs	r2, #0
    765a:	701a      	strb	r2, [r3, #0]

}
    765c:	bf00      	nop
    765e:	b005      	add	sp, #20
    7660:	f85d fb04 	ldr.w	pc, [sp], #4
    7664:	0000bd60 	.word	0x0000bd60
    7668:	1fff8f74 	.word	0x1fff8f74
    766c:	1fff8f54 	.word	0x1fff8f54

00007670 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    7670:	b500      	push	{lr}
    7672:	b085      	sub	sp, #20
    7674:	4603      	mov	r3, r0
    7676:	9100      	str	r1, [sp, #0]
    7678:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    767c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7680:	4a15      	ldr	r2, [pc, #84]	; (76d8 <Ftm_Pwm_Ip_InitChFault+0x68>)
    7682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7686:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    7688:	9b00      	ldr	r3, [sp, #0]
    768a:	7819      	ldrb	r1, [r3, #0]
    768c:	9b00      	ldr	r3, [sp, #0]
    768e:	685b      	ldr	r3, [r3, #4]
    7690:	461a      	mov	r2, r3
    7692:	9803      	ldr	r0, [sp, #12]
    7694:	f7ff f9f6 	bl	6a84 <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    7698:	9b00      	ldr	r3, [sp, #0]
    769a:	7819      	ldrb	r1, [r3, #0]
    769c:	9b00      	ldr	r3, [sp, #0]
    769e:	7a1b      	ldrb	r3, [r3, #8]
    76a0:	461a      	mov	r2, r3
    76a2:	9803      	ldr	r0, [sp, #12]
    76a4:	f7ff fa35 	bl	6b12 <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    76a8:	9b00      	ldr	r3, [sp, #0]
    76aa:	781b      	ldrb	r3, [r3, #0]
    76ac:	2201      	movs	r2, #1
    76ae:	4619      	mov	r1, r3
    76b0:	9803      	ldr	r0, [sp, #12]
    76b2:	f7ff fa0a 	bl	6aca <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    76b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76ba:	9a00      	ldr	r2, [sp, #0]
    76bc:	7812      	ldrb	r2, [r2, #0]
    76be:	4610      	mov	r0, r2
    76c0:	9a00      	ldr	r2, [sp, #0]
    76c2:	68d2      	ldr	r2, [r2, #12]
    76c4:	4905      	ldr	r1, [pc, #20]	; (76dc <Ftm_Pwm_Ip_InitChFault+0x6c>)
    76c6:	009b      	lsls	r3, r3, #2
    76c8:	4403      	add	r3, r0
    76ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76ce:	bf00      	nop
    76d0:	b005      	add	sp, #20
    76d2:	f85d fb04 	ldr.w	pc, [sp], #4
    76d6:	bf00      	nop
    76d8:	0000bd60 	.word	0x0000bd60
    76dc:	1fff8d64 	.word	0x1fff8d64

000076e0 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    76e0:	b500      	push	{lr}
    76e2:	b085      	sub	sp, #20
    76e4:	4603      	mov	r3, r0
    76e6:	9100      	str	r1, [sp, #0]
    76e8:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    76ec:	2300      	movs	r3, #0
    76ee:	f88d 300f 	strb.w	r3, [sp, #15]
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    76f2:	4b29      	ldr	r3, [pc, #164]	; (7798 <Ftm_Pwm_Ip_Init+0xb8>)
    76f4:	2200      	movs	r2, #0
    76f6:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    76f8:	9b00      	ldr	r3, [sp, #0]
    76fa:	681a      	ldr	r2, [r3, #0]
    76fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7700:	4611      	mov	r1, r2
    7702:	4618      	mov	r0, r3
    7704:	f7ff fcf6 	bl	70f4 <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    7708:	2300      	movs	r3, #0
    770a:	f88d 300f 	strb.w	r3, [sp, #15]
    770e:	e011      	b.n	7734 <Ftm_Pwm_Ip_Init+0x54>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    7710:	9b00      	ldr	r3, [sp, #0]
    7712:	685a      	ldr	r2, [r3, #4]
    7714:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7718:	009b      	lsls	r3, r3, #2
    771a:	4413      	add	r3, r2
    771c:	681a      	ldr	r2, [r3, #0]
    771e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7722:	4611      	mov	r1, r2
    7724:	4618      	mov	r0, r3
    7726:	f7ff fe61 	bl	73ec <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    772a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    772e:	3301      	adds	r3, #1
    7730:	f88d 300f 	strb.w	r3, [sp, #15]
    7734:	9b00      	ldr	r3, [sp, #0]
    7736:	7a1b      	ldrb	r3, [r3, #8]
    7738:	f89d 200f 	ldrb.w	r2, [sp, #15]
    773c:	429a      	cmp	r2, r3
    773e:	d3e7      	bcc.n	7710 <Ftm_Pwm_Ip_Init+0x30>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    7740:	9b00      	ldr	r3, [sp, #0]
    7742:	7c1b      	ldrb	r3, [r3, #16]
    7744:	2b00      	cmp	r3, #0
    7746:	d01b      	beq.n	7780 <Ftm_Pwm_Ip_Init+0xa0>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    7748:	2300      	movs	r3, #0
    774a:	f88d 300f 	strb.w	r3, [sp, #15]
    774e:	e011      	b.n	7774 <Ftm_Pwm_Ip_Init+0x94>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    7750:	9b00      	ldr	r3, [sp, #0]
    7752:	68da      	ldr	r2, [r3, #12]
    7754:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7758:	009b      	lsls	r3, r3, #2
    775a:	4413      	add	r3, r2
    775c:	681a      	ldr	r2, [r3, #0]
    775e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7762:	4611      	mov	r1, r2
    7764:	4618      	mov	r0, r3
    7766:	f7ff ff83 	bl	7670 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    776a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    776e:	3301      	adds	r3, #1
    7770:	f88d 300f 	strb.w	r3, [sp, #15]
    7774:	9b00      	ldr	r3, [sp, #0]
    7776:	7c1b      	ldrb	r3, [r3, #16]
    7778:	f89d 200f 	ldrb.w	r2, [sp, #15]
    777c:	429a      	cmp	r2, r3
    777e:	d3e7      	bcc.n	7750 <Ftm_Pwm_Ip_Init+0x70>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    7780:	9b00      	ldr	r3, [sp, #0]
    7782:	681a      	ldr	r2, [r3, #0]
    7784:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7788:	4611      	mov	r1, r2
    778a:	4618      	mov	r0, r3
    778c:	f7ff fd3c 	bl	7208 <Ftm_Pwm_Ip_InitInstanceStart>
}
    7790:	bf00      	nop
    7792:	b005      	add	sp, #20
    7794:	f85d fb04 	ldr.w	pc, [sp], #4
    7798:	1fff8cf8 	.word	0x1fff8cf8

0000779c <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    779c:	b500      	push	{lr}
    779e:	b085      	sub	sp, #20
    77a0:	4603      	mov	r3, r0
    77a2:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    77a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77aa:	4a1e      	ldr	r2, [pc, #120]	; (7824 <Ftm_Pwm_Ip_DeInit+0x88>)
    77ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77b0:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    77b2:	2300      	movs	r3, #0
    77b4:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    77b8:	9802      	ldr	r0, [sp, #8]
    77ba:	f7ff f80b 	bl	67d4 <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    77be:	2300      	movs	r3, #0
    77c0:	f88d 300f 	strb.w	r3, [sp, #15]
    77c4:	e021      	b.n	780a <Ftm_Pwm_Ip_DeInit+0x6e>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    77c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    77ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    77ce:	4916      	ldr	r1, [pc, #88]	; (7828 <Ftm_Pwm_Ip_DeInit+0x8c>)
    77d0:	00d2      	lsls	r2, r2, #3
    77d2:	4413      	add	r3, r2
    77d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    77d8:	2b00      	cmp	r3, #0
    77da:	d011      	beq.n	7800 <Ftm_Pwm_Ip_DeInit+0x64>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    77dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    77e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77e4:	4611      	mov	r1, r2
    77e6:	4618      	mov	r0, r3
    77e8:	f7ff fede 	bl	75a8 <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    77ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
    77f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    77f4:	490c      	ldr	r1, [pc, #48]	; (7828 <Ftm_Pwm_Ip_DeInit+0x8c>)
    77f6:	00d2      	lsls	r2, r2, #3
    77f8:	4413      	add	r3, r2
    77fa:	2200      	movs	r2, #0
    77fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    7800:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7804:	3301      	adds	r3, #1
    7806:	f88d 300f 	strb.w	r3, [sp, #15]
    780a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    780e:	2b07      	cmp	r3, #7
    7810:	d9d9      	bls.n	77c6 <Ftm_Pwm_Ip_DeInit+0x2a>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    7812:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7816:	4618      	mov	r0, r3
    7818:	f7ff fe8c 	bl	7534 <Ftm_Pwm_Ip_DeInitInstance>
}
    781c:	bf00      	nop
    781e:	b005      	add	sp, #20
    7820:	f85d fb04 	ldr.w	pc, [sp], #4
    7824:	0000bd60 	.word	0x0000bd60
    7828:	1fff8ed4 	.word	0x1fff8ed4

0000782c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    782c:	b510      	push	{r4, lr}
    782e:	b088      	sub	sp, #32
    7830:	4604      	mov	r4, r0
    7832:	4608      	mov	r0, r1
    7834:	4611      	mov	r1, r2
    7836:	461a      	mov	r2, r3
    7838:	4623      	mov	r3, r4
    783a:	f88d 300f 	strb.w	r3, [sp, #15]
    783e:	4603      	mov	r3, r0
    7840:	f88d 300e 	strb.w	r3, [sp, #14]
    7844:	460b      	mov	r3, r1
    7846:	f8ad 300c 	strh.w	r3, [sp, #12]
    784a:	4613      	mov	r3, r2
    784c:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7850:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7854:	4a54      	ldr	r2, [pc, #336]	; (79a8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x17c>)
    7856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    785a:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    785c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7860:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    7864:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7868:	085b      	lsrs	r3, r3, #1
    786a:	f88d 3019 	strb.w	r3, [sp, #25]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    786e:	f002 fb69 	bl	9f44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    7872:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7876:	f89d 300e 	ldrb.w	r3, [sp, #14]
    787a:	494c      	ldr	r1, [pc, #304]	; (79ac <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x180>)
    787c:	00d2      	lsls	r2, r2, #3
    787e:	4413      	add	r3, r2
    7880:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7884:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    7888:	f89d 300e 	ldrb.w	r3, [sp, #14]
    788c:	4619      	mov	r1, r3
    788e:	9807      	ldr	r0, [sp, #28]
    7890:	f7fe feb0 	bl	65f4 <Ftm_Pwm_Ip_GetChannelMode>
    7894:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    7896:	f89d 200f 	ldrb.w	r2, [sp, #15]
    789a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    789e:	4944      	ldr	r1, [pc, #272]	; (79b0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    78a0:	00d2      	lsls	r2, r2, #3
    78a2:	4413      	add	r3, r2
    78a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    78a8:	2b02      	cmp	r3, #2
    78aa:	d111      	bne.n	78d0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xa4>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    78ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    78b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    78b4:	493e      	ldr	r1, [pc, #248]	; (79b0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    78b6:	00d2      	lsls	r2, r2, #3
    78b8:	4413      	add	r3, r2
    78ba:	2201      	movs	r2, #1
    78bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    78c0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    78c4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    78c8:	2300      	movs	r3, #0
    78ca:	2200      	movs	r2, #0
    78cc:	f000 f8e4 	bl	7a98 <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    78d0:	9b05      	ldr	r3, [sp, #20]
    78d2:	2b0a      	cmp	r3, #10
    78d4:	d008      	beq.n	78e8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
    78d6:	9b05      	ldr	r3, [sp, #20]
    78d8:	2b09      	cmp	r3, #9
    78da:	d005      	beq.n	78e8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    78dc:	9b05      	ldr	r3, [sp, #20]
    78de:	2b12      	cmp	r3, #18
    78e0:	d002      	beq.n	78e8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    78e2:	9b05      	ldr	r3, [sp, #20]
    78e4:	2b11      	cmp	r3, #17
    78e6:	d10c      	bne.n	7902 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xd6>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    78e8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    78ec:	f89d 100e 	ldrb.w	r1, [sp, #14]
    78f0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    78f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    78f8:	9300      	str	r3, [sp, #0]
    78fa:	2300      	movs	r3, #0
    78fc:	f000 f992 	bl	7c24 <Ftm_Pwm_Ip_UpdatePwmChannel>
    7900:	e04c      	b.n	799c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7902:	9b05      	ldr	r3, [sp, #20]
    7904:	2b22      	cmp	r3, #34	; 0x22
    7906:	d008      	beq.n	791a <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
    7908:	9b05      	ldr	r3, [sp, #20]
    790a:	2b62      	cmp	r3, #98	; 0x62
    790c:	d005      	beq.n	791a <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    790e:	9b05      	ldr	r3, [sp, #20]
    7910:	2b61      	cmp	r3, #97	; 0x61
    7912:	d002      	beq.n	791a <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7914:	9b05      	ldr	r3, [sp, #20]
    7916:	2b21      	cmp	r3, #33	; 0x21
    7918:	d140      	bne.n	799c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    791a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    791e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    7922:	4924      	ldr	r1, [pc, #144]	; (79b4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    7924:	0092      	lsls	r2, r2, #2
    7926:	4413      	add	r3, r2
    7928:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    792c:	2b00      	cmp	r3, #0
    792e:	d10d      	bne.n	794c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x120>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    7930:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    7934:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7938:	f89d 000f 	ldrb.w	r0, [sp, #15]
    793c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7940:	9300      	str	r3, [sp, #0]
    7942:	4613      	mov	r3, r2
    7944:	2200      	movs	r2, #0
    7946:	f000 f96d 	bl	7c24 <Ftm_Pwm_Ip_UpdatePwmChannel>
    794a:	e027      	b.n	799c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    794c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7950:	f89d 3019 	ldrb.w	r3, [sp, #25]
    7954:	4917      	ldr	r1, [pc, #92]	; (79b4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    7956:	0092      	lsls	r2, r2, #2
    7958:	4413      	add	r3, r2
    795a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    795e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    7962:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7966:	4618      	mov	r0, r3
    7968:	f7ff f90a 	bl	6b80 <Ftm_Pwm_Ip_CalculatePhaseShift>
    796c:	4603      	mov	r3, r0
    796e:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    7972:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7976:	f89d 3019 	ldrb.w	r3, [sp, #25]
    797a:	490e      	ldr	r1, [pc, #56]	; (79b4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    797c:	0092      	lsls	r2, r2, #2
    797e:	4413      	add	r3, r2
    7980:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    7984:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    7988:	f89d 100e 	ldrb.w	r1, [sp, #14]
    798c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    7990:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7994:	9300      	str	r3, [sp, #0]
    7996:	4623      	mov	r3, r4
    7998:	f000 f944 	bl	7c24 <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    799c:	f002 fafe 	bl	9f9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    79a0:	bf00      	nop
    79a2:	b008      	add	sp, #32
    79a4:	bd10      	pop	{r4, pc}
    79a6:	bf00      	nop
    79a8:	0000bd60 	.word	0x0000bd60
    79ac:	1fff8d04 	.word	0x1fff8d04
    79b0:	1fff8ed4 	.word	0x1fff8ed4
    79b4:	1fff8d44 	.word	0x1fff8d44

000079b8 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    79b8:	b510      	push	{r4, lr}
    79ba:	b084      	sub	sp, #16
    79bc:	4604      	mov	r4, r0
    79be:	4608      	mov	r0, r1
    79c0:	4611      	mov	r1, r2
    79c2:	461a      	mov	r2, r3
    79c4:	4623      	mov	r3, r4
    79c6:	f88d 3007 	strb.w	r3, [sp, #7]
    79ca:	4603      	mov	r3, r0
    79cc:	f88d 3006 	strb.w	r3, [sp, #6]
    79d0:	460b      	mov	r3, r1
    79d2:	f8ad 3004 	strh.w	r3, [sp, #4]
    79d6:	4613      	mov	r3, r2
    79d8:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    79dc:	2300      	movs	r3, #0
    79de:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    79e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    79e6:	4a29      	ldr	r2, [pc, #164]	; (7a8c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd4>)
    79e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79ec:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    79ee:	f002 fafb 	bl	9fe8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    79f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    79f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    79fa:	4925      	ldr	r1, [pc, #148]	; (7a90 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    79fc:	00d2      	lsls	r2, r2, #3
    79fe:	4413      	add	r3, r2
    7a00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    7a04:	2b02      	cmp	r3, #2
    7a06:	d111      	bne.n	7a2c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x74>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    7a08:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7a0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a10:	491f      	ldr	r1, [pc, #124]	; (7a90 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    7a12:	00d2      	lsls	r2, r2, #3
    7a14:	4413      	add	r3, r2
    7a16:	2201      	movs	r2, #1
    7a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    7a1c:	f89d 1006 	ldrb.w	r1, [sp, #6]
    7a20:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7a24:	2300      	movs	r3, #0
    7a26:	2200      	movs	r2, #0
    7a28:	f000 f836 	bl	7a98 <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    7a2c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7a30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a34:	2200      	movs	r2, #0
    7a36:	4618      	mov	r0, r3
    7a38:	f000 f988 	bl	7d4c <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    7a3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a40:	4914      	ldr	r1, [pc, #80]	; (7a94 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xdc>)
    7a42:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7a46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    7a4a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7a4e:	2b00      	cmp	r3, #0
    7a50:	d103      	bne.n	7a5a <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xa2>
    {
        TempDutyCycle = (uint16)0U;
    7a52:	2300      	movs	r3, #0
    7a54:	f8ad 300e 	strh.w	r3, [sp, #14]
    7a58:	e003      	b.n	7a62 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xaa>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    7a5a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7a5e:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    7a62:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7a66:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7a6a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    7a6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7a72:	f7ff fedb 	bl	782c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    7a76:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7a7a:	4619      	mov	r1, r3
    7a7c:	9802      	ldr	r0, [sp, #8]
    7a7e:	f7fe f959 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    7a82:	f002 fadd 	bl	a040 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    7a86:	bf00      	nop
    7a88:	b004      	add	sp, #16
    7a8a:	bd10      	pop	{r4, pc}
    7a8c:	0000bd60 	.word	0x0000bd60
    7a90:	1fff8ed4 	.word	0x1fff8ed4
    7a94:	1fff8cfc 	.word	0x1fff8cfc

00007a98 <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    7a98:	b500      	push	{lr}
    7a9a:	b089      	sub	sp, #36	; 0x24
    7a9c:	9200      	str	r2, [sp, #0]
    7a9e:	461a      	mov	r2, r3
    7aa0:	4603      	mov	r3, r0
    7aa2:	f88d 3007 	strb.w	r3, [sp, #7]
    7aa6:	460b      	mov	r3, r1
    7aa8:	f88d 3006 	strb.w	r3, [sp, #6]
    7aac:	4613      	mov	r3, r2
    7aae:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7ab2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ab6:	4a58      	ldr	r2, [pc, #352]	; (7c18 <Ftm_Pwm_Ip_SwOutputControl+0x180>)
    7ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7abc:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    7abe:	2300      	movs	r3, #0
    7ac0:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    7ac4:	2300      	movs	r3, #0
    7ac6:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    7aca:	2300      	movs	r3, #0
    7acc:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    7ad0:	2300      	movs	r3, #0
    7ad2:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    7ad6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7ada:	4619      	mov	r1, r3
    7adc:	9805      	ldr	r0, [sp, #20]
    7ade:	f7fe fd89 	bl	65f4 <Ftm_Pwm_Ip_GetChannelMode>
    7ae2:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    7ae4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7ae8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7aec:	494b      	ldr	r1, [pc, #300]	; (7c1c <Ftm_Pwm_Ip_SwOutputControl+0x184>)
    7aee:	00d2      	lsls	r2, r2, #3
    7af0:	4413      	add	r3, r2
    7af2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    7af6:	2b02      	cmp	r3, #2
    7af8:	d109      	bne.n	7b0e <Ftm_Pwm_Ip_SwOutputControl+0x76>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    7afa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7afe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b02:	4947      	ldr	r1, [pc, #284]	; (7c20 <Ftm_Pwm_Ip_SwOutputControl+0x188>)
    7b04:	00d2      	lsls	r2, r2, #3
    7b06:	4413      	add	r3, r2
    7b08:	2200      	movs	r2, #0
    7b0a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    7b0e:	9805      	ldr	r0, [sp, #20]
    7b10:	f7fe fd5f 	bl	65d2 <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    7b14:	4603      	mov	r3, r0
    7b16:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7b1a:	9b03      	ldr	r3, [sp, #12]
    7b1c:	2b22      	cmp	r3, #34	; 0x22
    7b1e:	d008      	beq.n	7b32 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
    7b20:	9b03      	ldr	r3, [sp, #12]
    7b22:	2b62      	cmp	r3, #98	; 0x62
    7b24:	d005      	beq.n	7b32 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7b26:	9b03      	ldr	r3, [sp, #12]
    7b28:	2b61      	cmp	r3, #97	; 0x61
    7b2a:	d002      	beq.n	7b32 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7b2c:	9b03      	ldr	r3, [sp, #12]
    7b2e:	2b21      	cmp	r3, #33	; 0x21
    7b30:	d103      	bne.n	7b3a <Ftm_Pwm_Ip_SwOutputControl+0xa2>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    7b32:	2303      	movs	r3, #3
    7b34:	f8ad 301c 	strh.w	r3, [sp, #28]
    7b38:	e002      	b.n	7b40 <Ftm_Pwm_Ip_SwOutputControl+0xa8>
    }
    else
    {
        ChannelMask = (uint16)1U;
    7b3a:	2301      	movs	r3, #1
    7b3c:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    7b40:	9805      	ldr	r0, [sp, #20]
    7b42:	f7fe fd4f 	bl	65e4 <Ftm_Pwm_Ip_GetPolInstance>
    7b46:	4603      	mov	r3, r0
    7b48:	4619      	mov	r1, r3
    7b4a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7b4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b52:	fa02 f303 	lsl.w	r3, r2, r3
    7b56:	b29b      	uxth	r3, r3
    7b58:	400b      	ands	r3, r1
    7b5a:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    7b5e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    7b62:	021b      	lsls	r3, r3, #8
    7b64:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    7b68:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7b6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b70:	3308      	adds	r3, #8
    7b72:	fa02 f303 	lsl.w	r3, r2, r3
    7b76:	b29b      	uxth	r3, r3
    7b78:	43db      	mvns	r3, r3
    7b7a:	b29a      	uxth	r2, r3
    7b7c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7b80:	4013      	ands	r3, r2
    7b82:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    7b86:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b8a:	2b00      	cmp	r3, #0
    7b8c:	d027      	beq.n	7bde <Ftm_Pwm_Ip_SwOutputControl+0x146>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    7b8e:	9b00      	ldr	r3, [sp, #0]
    7b90:	2b01      	cmp	r3, #1
    7b92:	d109      	bne.n	7ba8 <Ftm_Pwm_Ip_SwOutputControl+0x110>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    7b94:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7b98:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b9c:	3308      	adds	r3, #8
    7b9e:	fa02 f303 	lsl.w	r3, r2, r3
    7ba2:	f8ad 301a 	strh.w	r3, [sp, #26]
    7ba6:	e002      	b.n	7bae <Ftm_Pwm_Ip_SwOutputControl+0x116>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    7ba8:	2300      	movs	r3, #0
    7baa:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    7bae:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    7bb2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    7bb6:	4053      	eors	r3, r2
    7bb8:	b29a      	uxth	r2, r3
    7bba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7bbe:	4313      	orrs	r3, r2
    7bc0:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    7bc4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7bc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7bcc:	fa02 f303 	lsl.w	r3, r2, r3
    7bd0:	b29a      	uxth	r2, r3
    7bd2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7bd6:	4313      	orrs	r3, r2
    7bd8:	f8ad 301e 	strh.w	r3, [sp, #30]
    7bdc:	e00d      	b.n	7bfa <Ftm_Pwm_Ip_SwOutputControl+0x162>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    7bde:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7be2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7be6:	fa02 f303 	lsl.w	r3, r2, r3
    7bea:	b29b      	uxth	r3, r3
    7bec:	43db      	mvns	r3, r3
    7bee:	b29a      	uxth	r2, r3
    7bf0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7bf4:	4013      	ands	r3, r2
    7bf6:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    7bfa:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7bfe:	4619      	mov	r1, r3
    7c00:	9805      	ldr	r0, [sp, #20]
    7c02:	f7fe fc86 	bl	6512 <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    7c06:	2101      	movs	r1, #1
    7c08:	9805      	ldr	r0, [sp, #20]
    7c0a:	f7fe f893 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    7c0e:	bf00      	nop
    7c10:	b009      	add	sp, #36	; 0x24
    7c12:	f85d fb04 	ldr.w	pc, [sp], #4
    7c16:	bf00      	nop
    7c18:	0000bd60 	.word	0x0000bd60
    7c1c:	1fff8ed4 	.word	0x1fff8ed4
    7c20:	1fff8d04 	.word	0x1fff8d04

00007c24 <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    7c24:	b510      	push	{r4, lr}
    7c26:	b086      	sub	sp, #24
    7c28:	4604      	mov	r4, r0
    7c2a:	4608      	mov	r0, r1
    7c2c:	4611      	mov	r1, r2
    7c2e:	461a      	mov	r2, r3
    7c30:	4623      	mov	r3, r4
    7c32:	f88d 3007 	strb.w	r3, [sp, #7]
    7c36:	4603      	mov	r3, r0
    7c38:	f88d 3006 	strb.w	r3, [sp, #6]
    7c3c:	460b      	mov	r3, r1
    7c3e:	f8ad 3004 	strh.w	r3, [sp, #4]
    7c42:	4613      	mov	r3, r2
    7c44:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7c48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c4c:	4a3d      	ldr	r2, [pc, #244]	; (7d44 <Ftm_Pwm_Ip_UpdatePwmChannel+0x120>)
    7c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c52:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    7c54:	2300      	movs	r3, #0
    7c56:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    7c58:	2300      	movs	r3, #0
    7c5a:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    7c5e:	2300      	movs	r3, #0
    7c60:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    7c64:	2300      	movs	r3, #0
    7c66:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    7c6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7c6e:	085b      	lsrs	r3, r3, #1
    7c70:	f88d 3009 	strb.w	r3, [sp, #9]
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    7c74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c78:	4a33      	ldr	r2, [pc, #204]	; (7d48 <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>)
    7c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7c7e:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    7c82:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7c86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7c8a:	429a      	cmp	r2, r3
    7c8c:	d805      	bhi.n	7c9a <Ftm_Pwm_Ip_UpdatePwmChannel+0x76>
    7c8e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    7c92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7c96:	429a      	cmp	r2, r3
    7c98:	d903      	bls.n	7ca2 <Ftm_Pwm_Ip_UpdatePwmChannel+0x7e>
    7c9a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	d108      	bne.n	7cb4 <Ftm_Pwm_Ip_UpdatePwmChannel+0x90>
    {
        HwFirstEdge = FirstEdge;
    7ca2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7ca6:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    7caa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7cae:	f8ad 3010 	strh.w	r3, [sp, #16]
    7cb2:	e001      	b.n	7cb8 <Ftm_Pwm_Ip_UpdatePwmChannel+0x94>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    7cb4:	2301      	movs	r3, #1
    7cb6:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    7cb8:	9b05      	ldr	r3, [sp, #20]
    7cba:	2b00      	cmp	r3, #0
    7cbc:	d13e      	bne.n	7d3c <Ftm_Pwm_Ip_UpdatePwmChannel+0x118>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    7cbe:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7cc2:	4619      	mov	r1, r3
    7cc4:	9803      	ldr	r0, [sp, #12]
    7cc6:	f7fe f8d5 	bl	5e74 <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    7cca:	4603      	mov	r3, r0
    7ccc:	2b00      	cmp	r3, #0
    7cce:	d016      	beq.n	7cfe <Ftm_Pwm_Ip_UpdatePwmChannel+0xda>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    7cd0:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7cd4:	005b      	lsls	r3, r3, #1
    7cd6:	b2db      	uxtb	r3, r3
    7cd8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    7cdc:	4619      	mov	r1, r3
    7cde:	9803      	ldr	r0, [sp, #12]
    7ce0:	f7fd ff70 	bl	5bc4 <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    7ce4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7ce8:	005b      	lsls	r3, r3, #1
    7cea:	b2db      	uxtb	r3, r3
    7cec:	3301      	adds	r3, #1
    7cee:	b2db      	uxtb	r3, r3
    7cf0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    7cf4:	4619      	mov	r1, r3
    7cf6:	9803      	ldr	r0, [sp, #12]
    7cf8:	f7fd ff64 	bl	5bc4 <Ftm_Pwm_Ip_SetChnCountVal>
    7cfc:	e018      	b.n	7d30 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    7cfe:	9803      	ldr	r0, [sp, #12]
    7d00:	f7fd fde9 	bl	58d6 <Ftm_Pwm_Ip_GetCpwms>
    7d04:	4603      	mov	r3, r0
    7d06:	2b01      	cmp	r3, #1
    7d08:	d10a      	bne.n	7d20 <Ftm_Pwm_Ip_UpdatePwmChannel+0xfc>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    7d0a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    7d0e:	085b      	lsrs	r3, r3, #1
    7d10:	b29a      	uxth	r2, r3
    7d12:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d16:	4619      	mov	r1, r3
    7d18:	9803      	ldr	r0, [sp, #12]
    7d1a:	f7fd ff53 	bl	5bc4 <Ftm_Pwm_Ip_SetChnCountVal>
    7d1e:	e007      	b.n	7d30 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    7d20:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    7d24:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d28:	4619      	mov	r1, r3
    7d2a:	9803      	ldr	r0, [sp, #12]
    7d2c:	f7fd ff4a 	bl	5bc4 <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    7d30:	f89d 3020 	ldrb.w	r3, [sp, #32]
    7d34:	4619      	mov	r1, r3
    7d36:	9803      	ldr	r0, [sp, #12]
    7d38:	f7fd fffc 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    7d3c:	9b05      	ldr	r3, [sp, #20]
}
    7d3e:	4618      	mov	r0, r3
    7d40:	b006      	add	sp, #24
    7d42:	bd10      	pop	{r4, pc}
    7d44:	0000bd60 	.word	0x0000bd60
    7d48:	1fff8cfc 	.word	0x1fff8cfc

00007d4c <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    7d4c:	b500      	push	{lr}
    7d4e:	b085      	sub	sp, #20
    7d50:	4603      	mov	r3, r0
    7d52:	9100      	str	r1, [sp, #0]
    7d54:	f88d 3007 	strb.w	r3, [sp, #7]
    7d58:	4613      	mov	r3, r2
    7d5a:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7d5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d62:	4a16      	ldr	r2, [pc, #88]	; (7dbc <Ftm_Pwm_Ip_UpdatePwmPeriod+0x70>)
    7d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d68:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    7d6a:	2300      	movs	r3, #0
    7d6c:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    FtmPeriod = NewValue;
    7d6e:	9b00      	ldr	r3, [sp, #0]
    7d70:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    7d72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d76:	9a00      	ldr	r2, [sp, #0]
    7d78:	b291      	uxth	r1, r2
    7d7a:	4a11      	ldr	r2, [pc, #68]	; (7dc0 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x74>)
    7d7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    7d80:	9802      	ldr	r0, [sp, #8]
    7d82:	f7fd fda8 	bl	58d6 <Ftm_Pwm_Ip_GetCpwms>
    7d86:	4603      	mov	r3, r0
    7d88:	2b01      	cmp	r3, #1
    7d8a:	d103      	bne.n	7d94 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x48>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    7d8c:	9b03      	ldr	r3, [sp, #12]
    7d8e:	085b      	lsrs	r3, r3, #1
    7d90:	9303      	str	r3, [sp, #12]
    7d92:	e002      	b.n	7d9a <Ftm_Pwm_Ip_UpdatePwmPeriod+0x4e>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    7d94:	9b03      	ldr	r3, [sp, #12]
    7d96:	3b01      	subs	r3, #1
    7d98:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    7d9a:	9b03      	ldr	r3, [sp, #12]
    7d9c:	b29b      	uxth	r3, r3
    7d9e:	4619      	mov	r1, r3
    7da0:	9802      	ldr	r0, [sp, #8]
    7da2:	f7fd fdeb 	bl	597c <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    7da6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7daa:	4619      	mov	r1, r3
    7dac:	9802      	ldr	r0, [sp, #8]
    7dae:	f7fd ffc1 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    7db2:	2300      	movs	r3, #0
}
    7db4:	4618      	mov	r0, r3
    7db6:	b005      	add	sp, #20
    7db8:	f85d fb04 	ldr.w	pc, [sp], #4
    7dbc:	0000bd60 	.word	0x0000bd60
    7dc0:	1fff8cfc 	.word	0x1fff8cfc

00007dc4 <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    7dc4:	b500      	push	{lr}
    7dc6:	b085      	sub	sp, #20
    7dc8:	4603      	mov	r3, r0
    7dca:	460a      	mov	r2, r1
    7dcc:	f88d 3007 	strb.w	r3, [sp, #7]
    7dd0:	4613      	mov	r3, r2
    7dd2:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7dd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7dda:	4a0d      	ldr	r2, [pc, #52]	; (7e10 <Ftm_Pwm_Ip_GetOutputState+0x4c>)
    7ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7de0:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    7de2:	f002 f9a5 	bl	a130 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    7de6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7dea:	4619      	mov	r1, r3
    7dec:	9802      	ldr	r0, [sp, #8]
    7dee:	f7fd fed3 	bl	5b98 <Ftm_Pwm_Ip_GetChOutputValue>
    7df2:	4603      	mov	r3, r0
    7df4:	2b00      	cmp	r3, #0
    7df6:	d002      	beq.n	7dfe <Ftm_Pwm_Ip_GetOutputState+0x3a>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    7df8:	2301      	movs	r3, #1
    7dfa:	9303      	str	r3, [sp, #12]
    7dfc:	e001      	b.n	7e02 <Ftm_Pwm_Ip_GetOutputState+0x3e>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    7dfe:	2300      	movs	r3, #0
    7e00:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    7e02:	f002 f9c1 	bl	a188 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    7e06:	9b03      	ldr	r3, [sp, #12]
}
    7e08:	4618      	mov	r0, r3
    7e0a:	b005      	add	sp, #20
    7e0c:	f85d fb04 	ldr.w	pc, [sp], #4
    7e10:	0000bd60 	.word	0x0000bd60

00007e14 <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    7e14:	b500      	push	{lr}
    7e16:	b087      	sub	sp, #28
    7e18:	4603      	mov	r3, r0
    7e1a:	9100      	str	r1, [sp, #0]
    7e1c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7e20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e24:	4a38      	ldr	r2, [pc, #224]	; (7f08 <Ftm_Pwm_Ip_DisableNotification+0xf4>)
    7e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e2a:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    7e2c:	9b00      	ldr	r3, [sp, #0]
    7e2e:	f88d 3013 	strb.w	r3, [sp, #19]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    7e32:	f002 f9cf 	bl	a1d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    7e36:	9b00      	ldr	r3, [sp, #0]
    7e38:	2b00      	cmp	r3, #0
    7e3a:	d014      	beq.n	7e66 <Ftm_Pwm_Ip_DisableNotification+0x52>
    7e3c:	9b00      	ldr	r3, [sp, #0]
    7e3e:	2b01      	cmp	r3, #1
    7e40:	d011      	beq.n	7e66 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    7e42:	9b00      	ldr	r3, [sp, #0]
    7e44:	2b02      	cmp	r3, #2
    7e46:	d00e      	beq.n	7e66 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    7e48:	9b00      	ldr	r3, [sp, #0]
    7e4a:	2b03      	cmp	r3, #3
    7e4c:	d00b      	beq.n	7e66 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    7e4e:	9b00      	ldr	r3, [sp, #0]
    7e50:	2b04      	cmp	r3, #4
    7e52:	d008      	beq.n	7e66 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    7e54:	9b00      	ldr	r3, [sp, #0]
    7e56:	2b05      	cmp	r3, #5
    7e58:	d005      	beq.n	7e66 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    7e5a:	9b00      	ldr	r3, [sp, #0]
    7e5c:	2b06      	cmp	r3, #6
    7e5e:	d002      	beq.n	7e66 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    7e60:	9b00      	ldr	r3, [sp, #0]
    7e62:	2b07      	cmp	r3, #7
    7e64:	d136      	bne.n	7ed4 <Ftm_Pwm_Ip_DisableNotification+0xc0>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    7e66:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7e6a:	085b      	lsrs	r3, r3, #1
    7e6c:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    7e70:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7e74:	4619      	mov	r1, r3
    7e76:	9805      	ldr	r0, [sp, #20]
    7e78:	f7fe fbbc 	bl	65f4 <Ftm_Pwm_Ip_GetChannelMode>
    7e7c:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    7e7e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7e82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e86:	4611      	mov	r1, r2
    7e88:	4618      	mov	r0, r3
    7e8a:	f7fe ff47 	bl	6d1c <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7e8e:	9b03      	ldr	r3, [sp, #12]
    7e90:	2b22      	cmp	r3, #34	; 0x22
    7e92:	d008      	beq.n	7ea6 <Ftm_Pwm_Ip_DisableNotification+0x92>
    7e94:	9b03      	ldr	r3, [sp, #12]
    7e96:	2b62      	cmp	r3, #98	; 0x62
    7e98:	d005      	beq.n	7ea6 <Ftm_Pwm_Ip_DisableNotification+0x92>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7e9a:	9b03      	ldr	r3, [sp, #12]
    7e9c:	2b61      	cmp	r3, #97	; 0x61
    7e9e:	d002      	beq.n	7ea6 <Ftm_Pwm_Ip_DisableNotification+0x92>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7ea0:	9b03      	ldr	r3, [sp, #12]
    7ea2:	2b21      	cmp	r3, #33	; 0x21
    7ea4:	d129      	bne.n	7efa <Ftm_Pwm_Ip_DisableNotification+0xe6>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    7ea6:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7eaa:	005b      	lsls	r3, r3, #1
    7eac:	b2da      	uxtb	r2, r3
    7eae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7eb2:	4611      	mov	r1, r2
    7eb4:	4618      	mov	r0, r3
    7eb6:	f7fe ff31 	bl	6d1c <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    7eba:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7ebe:	005b      	lsls	r3, r3, #1
    7ec0:	b2db      	uxtb	r3, r3
    7ec2:	3301      	adds	r3, #1
    7ec4:	b2da      	uxtb	r2, r3
    7ec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7eca:	4611      	mov	r1, r2
    7ecc:	4618      	mov	r0, r3
    7ece:	f7fe ff25 	bl	6d1c <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7ed2:	e012      	b.n	7efa <Ftm_Pwm_Ip_DisableNotification+0xe6>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    7ed4:	9b00      	ldr	r3, [sp, #0]
    7ed6:	2b0a      	cmp	r3, #10
    7ed8:	d107      	bne.n	7eea <Ftm_Pwm_Ip_DisableNotification+0xd6>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
    7eda:	2100      	movs	r1, #0
    7edc:	9805      	ldr	r0, [sp, #20]
    7ede:	f7fe fd88 	bl	69f2 <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    7ee2:	9805      	ldr	r0, [sp, #20]
    7ee4:	f7fe fd9b 	bl	6a1e <Ftm_Pwm_Ip_ClearFaultFlag>
    7ee8:	e008      	b.n	7efc <Ftm_Pwm_Ip_DisableNotification+0xe8>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    7eea:	9805      	ldr	r0, [sp, #20]
    7eec:	f7fd fd18 	bl	5920 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    7ef0:	2100      	movs	r1, #0
    7ef2:	9805      	ldr	r0, [sp, #20]
    7ef4:	f7fd fcfd 	bl	58f2 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    7ef8:	e000      	b.n	7efc <Ftm_Pwm_Ip_DisableNotification+0xe8>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7efa:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
    7efc:	f002 f996 	bl	a22c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
    7f00:	bf00      	nop
    7f02:	b007      	add	sp, #28
    7f04:	f85d fb04 	ldr.w	pc, [sp], #4
    7f08:	0000bd60 	.word	0x0000bd60

00007f0c <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
    7f0c:	b500      	push	{lr}
    7f0e:	b087      	sub	sp, #28
    7f10:	4603      	mov	r3, r0
    7f12:	460a      	mov	r2, r1
    7f14:	f88d 3007 	strb.w	r3, [sp, #7]
    7f18:	4613      	mov	r3, r2
    7f1a:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7f1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f22:	4a22      	ldr	r2, [pc, #136]	; (7fac <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
    7f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f28:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
    7f2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7f2e:	085b      	lsrs	r3, r3, #1
    7f30:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    7f34:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7f38:	4619      	mov	r1, r3
    7f3a:	9805      	ldr	r0, [sp, #20]
    7f3c:	f7fe fb5a 	bl	65f4 <Ftm_Pwm_Ip_GetChannelMode>
    7f40:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
    7f42:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7f46:	2201      	movs	r2, #1
    7f48:	4619      	mov	r1, r3
    7f4a:	9805      	ldr	r0, [sp, #20]
    7f4c:	f7fd fde9 	bl	5b22 <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7f50:	9b03      	ldr	r3, [sp, #12]
    7f52:	2b22      	cmp	r3, #34	; 0x22
    7f54:	d008      	beq.n	7f68 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
    7f56:	9b03      	ldr	r3, [sp, #12]
    7f58:	2b62      	cmp	r3, #98	; 0x62
    7f5a:	d005      	beq.n	7f68 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7f5c:	9b03      	ldr	r3, [sp, #12]
    7f5e:	2b61      	cmp	r3, #97	; 0x61
    7f60:	d002      	beq.n	7f68 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7f62:	9b03      	ldr	r3, [sp, #12]
    7f64:	2b21      	cmp	r3, #33	; 0x21
    7f66:	d11d      	bne.n	7fa4 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
    7f68:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7f6c:	005b      	lsls	r3, r3, #1
    7f6e:	b2db      	uxtb	r3, r3
    7f70:	3301      	adds	r3, #1
    7f72:	b2db      	uxtb	r3, r3
    7f74:	4619      	mov	r1, r3
    7f76:	9805      	ldr	r0, [sp, #20]
    7f78:	f7fd fdf6 	bl	5b68 <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
    7f7c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7f80:	005b      	lsls	r3, r3, #1
    7f82:	b2db      	uxtb	r3, r3
    7f84:	2201      	movs	r2, #1
    7f86:	4619      	mov	r1, r3
    7f88:	9805      	ldr	r0, [sp, #20]
    7f8a:	f7fd fdca 	bl	5b22 <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
    7f8e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7f92:	005b      	lsls	r3, r3, #1
    7f94:	b2db      	uxtb	r3, r3
    7f96:	3301      	adds	r3, #1
    7f98:	b2db      	uxtb	r3, r3
    7f9a:	2201      	movs	r2, #1
    7f9c:	4619      	mov	r1, r3
    7f9e:	9805      	ldr	r0, [sp, #20]
    7fa0:	f7fd fdbf 	bl	5b22 <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
    7fa4:	bf00      	nop
    7fa6:	b007      	add	sp, #28
    7fa8:	f85d fb04 	ldr.w	pc, [sp], #4
    7fac:	0000bd60 	.word	0x0000bd60

00007fb0 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
    7fb0:	b500      	push	{lr}
    7fb2:	b085      	sub	sp, #20
    7fb4:	4603      	mov	r3, r0
    7fb6:	9100      	str	r1, [sp, #0]
    7fb8:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7fbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7fc0:	4a23      	ldr	r2, [pc, #140]	; (8050 <Ftm_Pwm_Ip_EnableNotification+0xa0>)
    7fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fc6:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
    7fc8:	9b00      	ldr	r3, [sp, #0]
    7fca:	f88d 300b 	strb.w	r3, [sp, #11]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
    7fce:	f002 f953 	bl	a278 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    7fd2:	9b00      	ldr	r3, [sp, #0]
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	d014      	beq.n	8002 <Ftm_Pwm_Ip_EnableNotification+0x52>
    7fd8:	9b00      	ldr	r3, [sp, #0]
    7fda:	2b01      	cmp	r3, #1
    7fdc:	d011      	beq.n	8002 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    7fde:	9b00      	ldr	r3, [sp, #0]
    7fe0:	2b02      	cmp	r3, #2
    7fe2:	d00e      	beq.n	8002 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    7fe4:	9b00      	ldr	r3, [sp, #0]
    7fe6:	2b03      	cmp	r3, #3
    7fe8:	d00b      	beq.n	8002 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    7fea:	9b00      	ldr	r3, [sp, #0]
    7fec:	2b04      	cmp	r3, #4
    7fee:	d008      	beq.n	8002 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    7ff0:	9b00      	ldr	r3, [sp, #0]
    7ff2:	2b05      	cmp	r3, #5
    7ff4:	d005      	beq.n	8002 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    7ff6:	9b00      	ldr	r3, [sp, #0]
    7ff8:	2b06      	cmp	r3, #6
    7ffa:	d002      	beq.n	8002 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    7ffc:	9b00      	ldr	r3, [sp, #0]
    7ffe:	2b07      	cmp	r3, #7
    8000:	d10e      	bne.n	8020 <Ftm_Pwm_Ip_EnableNotification+0x70>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
    8002:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8006:	4619      	mov	r1, r3
    8008:	9803      	ldr	r0, [sp, #12]
    800a:	f7fd fdad 	bl	5b68 <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
    800e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8012:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8016:	4611      	mov	r1, r2
    8018:	4618      	mov	r0, r3
    801a:	f7ff ff77 	bl	7f0c <Ftm_Pwm_Ip_SetNormalNotificationCase>
    801e:	e011      	b.n	8044 <Ftm_Pwm_Ip_EnableNotification+0x94>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    8020:	9b00      	ldr	r3, [sp, #0]
    8022:	2b0a      	cmp	r3, #10
    8024:	d107      	bne.n	8036 <Ftm_Pwm_Ip_EnableNotification+0x86>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    8026:	9803      	ldr	r0, [sp, #12]
    8028:	f7fe fcf9 	bl	6a1e <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
    802c:	2101      	movs	r1, #1
    802e:	9803      	ldr	r0, [sp, #12]
    8030:	f7fe fcdf 	bl	69f2 <Ftm_Pwm_Ip_SetFaultInterruptEnable>
    8034:	e006      	b.n	8044 <Ftm_Pwm_Ip_EnableNotification+0x94>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    8036:	9803      	ldr	r0, [sp, #12]
    8038:	f7fd fc72 	bl	5920 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
    803c:	2101      	movs	r1, #1
    803e:	9803      	ldr	r0, [sp, #12]
    8040:	f7fd fc57 	bl	58f2 <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
    8044:	f002 f944 	bl	a2d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
    8048:	bf00      	nop
    804a:	b005      	add	sp, #20
    804c:	f85d fb04 	ldr.w	pc, [sp], #4
    8050:	0000bd60 	.word	0x0000bd60

00008054 <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
    8054:	b500      	push	{lr}
    8056:	b085      	sub	sp, #20
    8058:	4603      	mov	r3, r0
    805a:	9100      	str	r1, [sp, #0]
    805c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8060:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8064:	4a0c      	ldr	r2, [pc, #48]	; (8098 <Ftm_Pwm_Ip_SetPowerState+0x44>)
    8066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    806a:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
    806c:	9b00      	ldr	r3, [sp, #0]
    806e:	2b01      	cmp	r3, #1
    8070:	d104      	bne.n	807c <Ftm_Pwm_Ip_SetPowerState+0x28>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    8072:	2100      	movs	r1, #0
    8074:	9803      	ldr	r0, [sp, #12]
    8076:	f7fd fc07 	bl	5888 <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
    807a:	e008      	b.n	808e <Ftm_Pwm_Ip_SetPowerState+0x3a>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    807c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8080:	4a06      	ldr	r2, [pc, #24]	; (809c <Ftm_Pwm_Ip_SetPowerState+0x48>)
    8082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8086:	4619      	mov	r1, r3
    8088:	9803      	ldr	r0, [sp, #12]
    808a:	f7fd fbfd 	bl	5888 <Ftm_Pwm_Ip_SetClockSource>
}
    808e:	bf00      	nop
    8090:	b005      	add	sp, #20
    8092:	f85d fb04 	ldr.w	pc, [sp], #4
    8096:	bf00      	nop
    8098:	0000bd60 	.word	0x0000bd60
    809c:	1fff8ff4 	.word	0x1fff8ff4

000080a0 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
    80a0:	b500      	push	{lr}
    80a2:	b085      	sub	sp, #20
    80a4:	4603      	mov	r3, r0
    80a6:	9100      	str	r1, [sp, #0]
    80a8:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    80ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80b0:	4a0e      	ldr	r2, [pc, #56]	; (80ec <Ftm_Pwm_Ip_SetClockMode+0x4c>)
    80b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80b6:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
    80b8:	9b00      	ldr	r3, [sp, #0]
    80ba:	2b01      	cmp	r3, #1
    80bc:	d109      	bne.n	80d2 <Ftm_Pwm_Ip_SetClockMode+0x32>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
    80be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80c2:	4a0b      	ldr	r2, [pc, #44]	; (80f0 <Ftm_Pwm_Ip_SetClockMode+0x50>)
    80c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80c8:	4619      	mov	r1, r3
    80ca:	9803      	ldr	r0, [sp, #12]
    80cc:	f7fd fbcc 	bl	5868 <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
    80d0:	e008      	b.n	80e4 <Ftm_Pwm_Ip_SetClockMode+0x44>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    80d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80d6:	4a07      	ldr	r2, [pc, #28]	; (80f4 <Ftm_Pwm_Ip_SetClockMode+0x54>)
    80d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80dc:	4619      	mov	r1, r3
    80de:	9803      	ldr	r0, [sp, #12]
    80e0:	f7fd fbc2 	bl	5868 <Ftm_Pwm_Ip_SetClockPs>
}
    80e4:	bf00      	nop
    80e6:	b005      	add	sp, #20
    80e8:	f85d fb04 	ldr.w	pc, [sp], #4
    80ec:	0000bd60 	.word	0x0000bd60
    80f0:	1fff9014 	.word	0x1fff9014
    80f4:	1fff9004 	.word	0x1fff9004

000080f8 <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
    80f8:	b500      	push	{lr}
    80fa:	b085      	sub	sp, #20
    80fc:	4603      	mov	r3, r0
    80fe:	460a      	mov	r2, r1
    8100:	f88d 3007 	strb.w	r3, [sp, #7]
    8104:	4613      	mov	r3, r2
    8106:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    810a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    810e:	4a07      	ldr	r2, [pc, #28]	; (812c <Ftm_Pwm_Ip_ResetCounter+0x34>)
    8110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8114:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
    8116:	f89d 3006 	ldrb.w	r3, [sp, #6]
    811a:	4619      	mov	r1, r3
    811c:	9803      	ldr	r0, [sp, #12]
    811e:	f7fe f8ae 	bl	627e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
    8122:	bf00      	nop
    8124:	b005      	add	sp, #20
    8126:	f85d fb04 	ldr.w	pc, [sp], #4
    812a:	bf00      	nop
    812c:	0000bd60 	.word	0x0000bd60

00008130 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
    8130:	b084      	sub	sp, #16
    8132:	4603      	mov	r3, r0
    8134:	460a      	mov	r2, r1
    8136:	f88d 3007 	strb.w	r3, [sp, #7]
    813a:	4613      	mov	r3, r2
    813c:	f88d 3006 	strb.w	r3, [sp, #6]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
    8140:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8144:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8148:	4905      	ldr	r1, [pc, #20]	; (8160 <Ftm_Pwm_Ip_GetChannelState+0x30>)
    814a:	00d2      	lsls	r2, r2, #3
    814c:	4413      	add	r3, r2
    814e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    8152:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
    8156:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    815a:	4618      	mov	r0, r3
    815c:	b004      	add	sp, #16
    815e:	4770      	bx	lr
    8160:	1fff8d04 	.word	0x1fff8d04

00008164 <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
    8164:	b500      	push	{lr}
    8166:	b087      	sub	sp, #28
    8168:	9202      	str	r2, [sp, #8]
    816a:	9301      	str	r3, [sp, #4]
    816c:	4603      	mov	r3, r0
    816e:	f88d 300f 	strb.w	r3, [sp, #15]
    8172:	460b      	mov	r3, r1
    8174:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8178:	f89d 300f 	ldrb.w	r3, [sp, #15]
    817c:	4a1f      	ldr	r2, [pc, #124]	; (81fc <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x98>)
    817e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8182:	9304      	str	r3, [sp, #16]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
    8184:	2300      	movs	r3, #0
    8186:	f88d 3017 	strb.w	r3, [sp, #23]
    818a:	e026      	b.n	81da <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x76>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
    818c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8190:	9a02      	ldr	r2, [sp, #8]
    8192:	4413      	add	r3, r2
    8194:	7819      	ldrb	r1, [r3, #0]
    8196:	f89d 3017 	ldrb.w	r3, [sp, #23]
    819a:	005b      	lsls	r3, r3, #1
    819c:	9a01      	ldr	r2, [sp, #4]
    819e:	4413      	add	r3, r2
    81a0:	881b      	ldrh	r3, [r3, #0]
    81a2:	461a      	mov	r2, r3
    81a4:	9804      	ldr	r0, [sp, #16]
    81a6:	f7fd fd0d 	bl	5bc4 <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
    81aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    81ae:	005b      	lsls	r3, r3, #1
    81b0:	9a01      	ldr	r2, [sp, #4]
    81b2:	441a      	add	r2, r3
    81b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    81b8:	f89d 1017 	ldrb.w	r1, [sp, #23]
    81bc:	9802      	ldr	r0, [sp, #8]
    81be:	4401      	add	r1, r0
    81c0:	7809      	ldrb	r1, [r1, #0]
    81c2:	4608      	mov	r0, r1
    81c4:	8811      	ldrh	r1, [r2, #0]
    81c6:	4a0e      	ldr	r2, [pc, #56]	; (8200 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9c>)
    81c8:	00db      	lsls	r3, r3, #3
    81ca:	4403      	add	r3, r0
    81cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
    81d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    81d4:	3301      	adds	r3, #1
    81d6:	f88d 3017 	strb.w	r3, [sp, #23]
    81da:	f89d 2017 	ldrb.w	r2, [sp, #23]
    81de:	f89d 300e 	ldrb.w	r3, [sp, #14]
    81e2:	429a      	cmp	r2, r3
    81e4:	d3d2      	bcc.n	818c <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x28>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    81e6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    81ea:	4619      	mov	r1, r3
    81ec:	9804      	ldr	r0, [sp, #16]
    81ee:	f7fd fda1 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    81f2:	bf00      	nop
    81f4:	b007      	add	sp, #28
    81f6:	f85d fb04 	ldr.w	pc, [sp], #4
    81fa:	bf00      	nop
    81fc:	0000bd60 	.word	0x0000bd60
    8200:	1fff8d04 	.word	0x1fff8d04

00008204 <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
    8204:	b500      	push	{lr}
    8206:	b085      	sub	sp, #20
    8208:	4603      	mov	r3, r0
    820a:	9100      	str	r1, [sp, #0]
    820c:	f88d 3007 	strb.w	r3, [sp, #7]
    8210:	4613      	mov	r3, r2
    8212:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8216:	f89d 3007 	ldrb.w	r3, [sp, #7]
    821a:	4a0b      	ldr	r2, [pc, #44]	; (8248 <Ftm_Pwm_Ip_MaskOutputChannels+0x44>)
    821c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8220:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
    8222:	f002 f8cd 	bl	a3c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
    8226:	9900      	ldr	r1, [sp, #0]
    8228:	9803      	ldr	r0, [sp, #12]
    822a:	f7fd fde0 	bl	5dee <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    822e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8232:	4619      	mov	r1, r3
    8234:	9803      	ldr	r0, [sp, #12]
    8236:	f7fd fd7d 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
    823a:	f002 f8ed 	bl	a418 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
    823e:	bf00      	nop
    8240:	b005      	add	sp, #20
    8242:	f85d fb04 	ldr.w	pc, [sp], #4
    8246:	bf00      	nop
    8248:	0000bd60 	.word	0x0000bd60

0000824c <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
    824c:	b500      	push	{lr}
    824e:	b085      	sub	sp, #20
    8250:	4603      	mov	r3, r0
    8252:	9100      	str	r1, [sp, #0]
    8254:	f88d 3007 	strb.w	r3, [sp, #7]
    8258:	4613      	mov	r3, r2
    825a:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    825e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8262:	4a0b      	ldr	r2, [pc, #44]	; (8290 <Ftm_Pwm_Ip_UnMaskOutputChannels+0x44>)
    8264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8268:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
    826a:	f002 f8fb 	bl	a464 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
    826e:	9900      	ldr	r1, [sp, #0]
    8270:	9803      	ldr	r0, [sp, #12]
    8272:	f7fd fdcb 	bl	5e0c <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    8276:	f89d 3006 	ldrb.w	r3, [sp, #6]
    827a:	4619      	mov	r1, r3
    827c:	9803      	ldr	r0, [sp, #12]
    827e:	f7fd fd59 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
    8282:	f002 f91b 	bl	a4bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
    8286:	bf00      	nop
    8288:	b005      	add	sp, #20
    828a:	f85d fb04 	ldr.w	pc, [sp], #4
    828e:	bf00      	nop
    8290:	0000bd60 	.word	0x0000bd60

00008294 <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
    8294:	b510      	push	{r4, lr}
    8296:	b084      	sub	sp, #16
    8298:	4604      	mov	r4, r0
    829a:	4608      	mov	r0, r1
    829c:	4611      	mov	r1, r2
    829e:	461a      	mov	r2, r3
    82a0:	4623      	mov	r3, r4
    82a2:	f88d 3007 	strb.w	r3, [sp, #7]
    82a6:	4603      	mov	r3, r0
    82a8:	f88d 3006 	strb.w	r3, [sp, #6]
    82ac:	460b      	mov	r3, r1
    82ae:	f8ad 3004 	strh.w	r3, [sp, #4]
    82b2:	4613      	mov	r3, r2
    82b4:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    82b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82bc:	4a2e      	ldr	r2, [pc, #184]	; (8378 <Ftm_Pwm_Ip_SetPhaseShift+0xe4>)
    82be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82c2:	9303      	str	r3, [sp, #12]
    {
        RetVal = FALSE;
    }
    DevAssert(RetVal != FALSE);
#endif
    PairChId = Channel >> 1U;
    82c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    82c8:	085b      	lsrs	r3, r3, #1
    82ca:	f88d 300b 	strb.w	r3, [sp, #11]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    82ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82d2:	492a      	ldr	r1, [pc, #168]	; (837c <Ftm_Pwm_Ip_SetPhaseShift+0xe8>)
    82d4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    82d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
    82dc:	f002 f914 	bl	a508 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    82e0:	9803      	ldr	r0, [sp, #12]
    82e2:	f7fd faf8 	bl	58d6 <Ftm_Pwm_Ip_GetCpwms>
    82e6:	4603      	mov	r3, r0
    82e8:	2b01      	cmp	r3, #1
    82ea:	d108      	bne.n	82fe <Ftm_Pwm_Ip_SetPhaseShift+0x6a>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
    82ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    82f0:	085b      	lsrs	r3, r3, #1
    82f2:	b29b      	uxth	r3, r3
    82f4:	4619      	mov	r1, r3
    82f6:	9803      	ldr	r0, [sp, #12]
    82f8:	f7fd fb40 	bl	597c <Ftm_Pwm_Ip_SetMod>
    82fc:	e007      	b.n	830e <Ftm_Pwm_Ip_SetPhaseShift+0x7a>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
    82fe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8302:	3b01      	subs	r3, #1
    8304:	b29b      	uxth	r3, r3
    8306:	4619      	mov	r1, r3
    8308:	9803      	ldr	r0, [sp, #12]
    830a:	f7fd fb37 	bl	597c <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
    830e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8312:	005b      	lsls	r3, r3, #1
    8314:	b2db      	uxtb	r3, r3
    8316:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    831a:	4619      	mov	r1, r3
    831c:	9803      	ldr	r0, [sp, #12]
    831e:	f7fd fc51 	bl	5bc4 <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
    8322:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8326:	085b      	lsrs	r3, r3, #1
    8328:	f8ad 3008 	strh.w	r3, [sp, #8]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
    832c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8330:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8334:	4912      	ldr	r1, [pc, #72]	; (8380 <Ftm_Pwm_Ip_SetPhaseShift+0xec>)
    8336:	00d2      	lsls	r2, r2, #3
    8338:	4413      	add	r3, r2
    833a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    833e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
    8342:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8346:	005b      	lsls	r3, r3, #1
    8348:	b2db      	uxtb	r3, r3
    834a:	3301      	adds	r3, #1
    834c:	b2d9      	uxtb	r1, r3
    834e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    8352:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    8356:	4413      	add	r3, r2
    8358:	b29b      	uxth	r3, r3
    835a:	461a      	mov	r2, r3
    835c:	9803      	ldr	r0, [sp, #12]
    835e:	f7fd fc31 	bl	5bc4 <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    8362:	f89d 3018 	ldrb.w	r3, [sp, #24]
    8366:	4619      	mov	r1, r3
    8368:	9803      	ldr	r0, [sp, #12]
    836a:	f7fd fce3 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
    836e:	f002 f8f7 	bl	a560 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
    8372:	bf00      	nop
    8374:	b004      	add	sp, #16
    8376:	bd10      	pop	{r4, pc}
    8378:	0000bd60 	.word	0x0000bd60
    837c:	1fff8cfc 	.word	0x1fff8cfc
    8380:	1fff8d04 	.word	0x1fff8d04

00008384 <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
    8384:	b510      	push	{r4, lr}
    8386:	b086      	sub	sp, #24
    8388:	4604      	mov	r4, r0
    838a:	4608      	mov	r0, r1
    838c:	4611      	mov	r1, r2
    838e:	461a      	mov	r2, r3
    8390:	4623      	mov	r3, r4
    8392:	f88d 300f 	strb.w	r3, [sp, #15]
    8396:	4603      	mov	r3, r0
    8398:	f88d 300e 	strb.w	r3, [sp, #14]
    839c:	460b      	mov	r3, r1
    839e:	f8ad 300c 	strh.w	r3, [sp, #12]
    83a2:	4613      	mov	r3, r2
    83a4:	f8ad 300a 	strh.w	r3, [sp, #10]
        }
    }
    DevAssert(RetVal != FALSE);

#endif
    PairId = Channel >> 1U;
    83a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    83ac:	085b      	lsrs	r3, r3, #1
    83ae:	f88d 3016 	strb.w	r3, [sp, #22]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
    83b2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    83b6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    83ba:	492d      	ldr	r1, [pc, #180]	; (8470 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xec>)
    83bc:	0092      	lsls	r2, r2, #2
    83be:	4413      	add	r3, r2
    83c0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    83c4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    83c8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    83cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    83d0:	4928      	ldr	r1, [pc, #160]	; (8474 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf0>)
    83d2:	00d2      	lsls	r2, r2, #3
    83d4:	4413      	add	r3, r2
    83d6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    83da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
    83de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    83e2:	f8ad 3014 	strh.w	r3, [sp, #20]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
    83e6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    83ea:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    83ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83f2:	4618      	mov	r0, r3
    83f4:	f7fe fbc4 	bl	6b80 <Ftm_Pwm_Ip_CalculatePhaseShift>
    83f8:	4603      	mov	r3, r0
    83fa:	f8ad 3012 	strh.w	r3, [sp, #18]

    if (TRUE == SyncUpdate)
    83fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
    8402:	2b00      	cmp	r3, #0
    8404:	d003      	beq.n	840e <Ftm_Pwm_Ip_SetDutyPhaseShift+0x8a>
    {
        SoftwareTrigger = FALSE;
    8406:	2300      	movs	r3, #0
    8408:	f88d 3017 	strb.w	r3, [sp, #23]
    840c:	e002      	b.n	8414 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
    }
    else
    {
        SoftwareTrigger = TRUE;
    840e:	2301      	movs	r3, #1
    8410:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    8414:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8418:	f89d 300e 	ldrb.w	r3, [sp, #14]
    841c:	4916      	ldr	r1, [pc, #88]	; (8478 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    841e:	00d2      	lsls	r2, r2, #3
    8420:	4413      	add	r3, r2
    8422:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8426:	2b02      	cmp	r3, #2
    8428:	d111      	bne.n	844e <Ftm_Pwm_Ip_SetDutyPhaseShift+0xca>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    842a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    842e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8432:	4911      	ldr	r1, [pc, #68]	; (8478 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    8434:	00d2      	lsls	r2, r2, #3
    8436:	4413      	add	r3, r2
    8438:	2201      	movs	r2, #1
    843a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    843e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8442:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8446:	2300      	movs	r3, #0
    8448:	2200      	movs	r2, #0
    844a:	f7ff fb25 	bl	7a98 <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    844e:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    8452:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    8456:	f89d 100e 	ldrb.w	r1, [sp, #14]
    845a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    845e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8462:	9300      	str	r3, [sp, #0]
    8464:	4623      	mov	r3, r4
    8466:	f7ff fbdd 	bl	7c24 <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
    846a:	bf00      	nop
    846c:	b006      	add	sp, #24
    846e:	bd10      	pop	{r4, pc}
    8470:	1fff8d44 	.word	0x1fff8d44
    8474:	1fff8d04 	.word	0x1fff8d04
    8478:	1fff8ed4 	.word	0x1fff8ed4

0000847c <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
    847c:	b500      	push	{lr}
    847e:	b085      	sub	sp, #20
    8480:	4603      	mov	r3, r0
    8482:	9100      	str	r1, [sp, #0]
    8484:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8488:	f89d 3007 	ldrb.w	r3, [sp, #7]
    848c:	4a07      	ldr	r2, [pc, #28]	; (84ac <Ftm_Pwm_Ip_DisableTrigger+0x30>)
    848e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8492:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
    8494:	f002 f88a 	bl	a5ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
    8498:	9900      	ldr	r1, [sp, #0]
    849a:	9803      	ldr	r0, [sp, #12]
    849c:	f7fd fdea 	bl	6074 <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
    84a0:	f002 f8b0 	bl	a604 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
    84a4:	bf00      	nop
    84a6:	b005      	add	sp, #20
    84a8:	f85d fb04 	ldr.w	pc, [sp], #4
    84ac:	0000bd60 	.word	0x0000bd60

000084b0 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
    84b0:	b500      	push	{lr}
    84b2:	b085      	sub	sp, #20
    84b4:	4603      	mov	r3, r0
    84b6:	9100      	str	r1, [sp, #0]
    84b8:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    84bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    84c0:	4a07      	ldr	r2, [pc, #28]	; (84e0 <Ftm_Pwm_Ip_EnableTrigger+0x30>)
    84c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84c6:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
    84c8:	f002 f8c2 	bl	a650 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
    84cc:	9900      	ldr	r1, [sp, #0]
    84ce:	9803      	ldr	r0, [sp, #12]
    84d0:	f7fd fddd 	bl	608e <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
    84d4:	f002 f8e8 	bl	a6a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
    84d8:	bf00      	nop
    84da:	b005      	add	sp, #20
    84dc:	f85d fb04 	ldr.w	pc, [sp], #4
    84e0:	0000bd60 	.word	0x0000bd60

000084e4 <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
    84e4:	b500      	push	{lr}
    84e6:	b085      	sub	sp, #20
    84e8:	4603      	mov	r3, r0
    84ea:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    84ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    84f2:	4a08      	ldr	r2, [pc, #32]	; (8514 <Ftm_Pwm_Ip_SyncUpdate+0x30>)
    84f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84f8:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
    84fa:	f002 f8fb 	bl	a6f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    84fe:	2101      	movs	r1, #1
    8500:	9803      	ldr	r0, [sp, #12]
    8502:	f7fd fc17 	bl	5d34 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
    8506:	f002 f921 	bl	a74c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
    850a:	bf00      	nop
    850c:	b005      	add	sp, #20
    850e:	f85d fb04 	ldr.w	pc, [sp], #4
    8512:	bf00      	nop
    8514:	0000bd60 	.word	0x0000bd60

00008518 <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
    8518:	b500      	push	{lr}
    851a:	b085      	sub	sp, #20
    851c:	4603      	mov	r3, r0
    851e:	f88d 3007 	strb.w	r3, [sp, #7]
    8522:	460b      	mov	r3, r1
    8524:	f88d 3006 	strb.w	r3, [sp, #6]
    8528:	4613      	mov	r3, r2
    852a:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    852e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8532:	4a17      	ldr	r2, [pc, #92]	; (8590 <Ftm_Pwm_Ip_SetChannelDeadTime+0x78>)
    8534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8538:	9303      	str	r3, [sp, #12]
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
    853a:	f002 f92d 	bl	a798 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
    853e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8542:	2b3f      	cmp	r3, #63	; 0x3f
    8544:	d80b      	bhi.n	855e <Ftm_Pwm_Ip_SetChannelDeadTime+0x46>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
    8546:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    854a:	b2db      	uxtb	r3, r3
    854c:	4619      	mov	r1, r3
    854e:	9803      	ldr	r0, [sp, #12]
    8550:	f7fd fd42 	bl	5fd8 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    8554:	2100      	movs	r1, #0
    8556:	9803      	ldr	r0, [sp, #12]
    8558:	f7fd fd62 	bl	6020 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    855c:	e012      	b.n	8584 <Ftm_Pwm_Ip_SetChannelDeadTime+0x6c>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
    855e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8562:	b2db      	uxtb	r3, r3
    8564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8568:	b2db      	uxtb	r3, r3
    856a:	4619      	mov	r1, r3
    856c:	9803      	ldr	r0, [sp, #12]
    856e:	f7fd fd33 	bl	5fd8 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
    8572:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8576:	099b      	lsrs	r3, r3, #6
    8578:	b29b      	uxth	r3, r3
    857a:	b2db      	uxtb	r3, r3
    857c:	4619      	mov	r1, r3
    857e:	9803      	ldr	r0, [sp, #12]
    8580:	f7fd fd4e 	bl	6020 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
    8584:	f002 f934 	bl	a7f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
    8588:	bf00      	nop
    858a:	b005      	add	sp, #20
    858c:	f85d fb04 	ldr.w	pc, [sp], #4
    8590:	0000bd60 	.word	0x0000bd60

00008594 <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
    8594:	b082      	sub	sp, #8
    8596:	9001      	str	r0, [sp, #4]
    8598:	460b      	mov	r3, r1
    859a:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
    859e:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
    85a2:	4618      	mov	r0, r3
    85a4:	b002      	add	sp, #8
    85a6:	4770      	bx	lr

000085a8 <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
    85a8:	b510      	push	{r4, lr}
    85aa:	b084      	sub	sp, #16
    85ac:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    85ae:	2300      	movs	r3, #0
    85b0:	9302      	str	r3, [sp, #8]
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
    85b2:	493e      	ldr	r1, [pc, #248]	; (86ac <Pwm_Init+0x104>)
    85b4:	9a02      	ldr	r2, [sp, #8]
    85b6:	4613      	mov	r3, r2
    85b8:	005b      	lsls	r3, r3, #1
    85ba:	4413      	add	r3, r2
    85bc:	00db      	lsls	r3, r3, #3
    85be:	440b      	add	r3, r1
    85c0:	9a01      	ldr	r2, [sp, #4]
    85c2:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    85c4:	2300      	movs	r3, #0
    85c6:	f88d 300f 	strb.w	r3, [sp, #15]
    85ca:	e017      	b.n	85fc <Pwm_Init+0x54>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
    85cc:	4937      	ldr	r1, [pc, #220]	; (86ac <Pwm_Init+0x104>)
    85ce:	9a02      	ldr	r2, [sp, #8]
    85d0:	4613      	mov	r3, r2
    85d2:	005b      	lsls	r3, r3, #1
    85d4:	4413      	add	r3, r2
    85d6:	00db      	lsls	r3, r3, #3
    85d8:	440b      	add	r3, r1
    85da:	681b      	ldr	r3, [r3, #0]
    85dc:	68d9      	ldr	r1, [r3, #12]
    85de:	f89d 200f 	ldrb.w	r2, [sp, #15]
    85e2:	4613      	mov	r3, r2
    85e4:	005b      	lsls	r3, r3, #1
    85e6:	4413      	add	r3, r2
    85e8:	009b      	lsls	r3, r3, #2
    85ea:	440b      	add	r3, r1
    85ec:	4618      	mov	r0, r3
    85ee:	f000 f985 	bl	88fc <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    85f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    85f6:	3301      	adds	r3, #1
    85f8:	f88d 300f 	strb.w	r3, [sp, #15]
    85fc:	492b      	ldr	r1, [pc, #172]	; (86ac <Pwm_Init+0x104>)
    85fe:	9a02      	ldr	r2, [sp, #8]
    8600:	4613      	mov	r3, r2
    8602:	005b      	lsls	r3, r3, #1
    8604:	4413      	add	r3, r2
    8606:	00db      	lsls	r3, r3, #3
    8608:	440b      	add	r3, r1
    860a:	681b      	ldr	r3, [r3, #0]
    860c:	7a1b      	ldrb	r3, [r3, #8]
    860e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8612:	429a      	cmp	r2, r3
    8614:	d3da      	bcc.n	85cc <Pwm_Init+0x24>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    8616:	2300      	movs	r3, #0
    8618:	f88d 300f 	strb.w	r3, [sp, #15]
    861c:	e035      	b.n	868a <Pwm_Init+0xe2>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
    861e:	4923      	ldr	r1, [pc, #140]	; (86ac <Pwm_Init+0x104>)
    8620:	9a02      	ldr	r2, [sp, #8]
    8622:	4613      	mov	r3, r2
    8624:	005b      	lsls	r3, r3, #1
    8626:	4413      	add	r3, r2
    8628:	00db      	lsls	r3, r3, #3
    862a:	440b      	add	r3, r1
    862c:	681b      	ldr	r3, [r3, #0]
    862e:	6859      	ldr	r1, [r3, #4]
    8630:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8634:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8638:	4613      	mov	r3, r2
    863a:	005b      	lsls	r3, r3, #1
    863c:	4413      	add	r3, r2
    863e:	00db      	lsls	r3, r3, #3
    8640:	4419      	add	r1, r3
    8642:	4c1a      	ldr	r4, [pc, #104]	; (86ac <Pwm_Init+0x104>)
    8644:	9a02      	ldr	r2, [sp, #8]
    8646:	4613      	mov	r3, r2
    8648:	005b      	lsls	r3, r3, #1
    864a:	4413      	add	r3, r2
    864c:	005b      	lsls	r3, r3, #1
    864e:	4403      	add	r3, r0
    8650:	3302      	adds	r3, #2
    8652:	009b      	lsls	r3, r3, #2
    8654:	4423      	add	r3, r4
    8656:	6059      	str	r1, [r3, #4]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
    8658:	4914      	ldr	r1, [pc, #80]	; (86ac <Pwm_Init+0x104>)
    865a:	9a02      	ldr	r2, [sp, #8]
    865c:	4613      	mov	r3, r2
    865e:	005b      	lsls	r3, r3, #1
    8660:	4413      	add	r3, r2
    8662:	00db      	lsls	r3, r3, #3
    8664:	440b      	add	r3, r1
    8666:	681b      	ldr	r3, [r3, #0]
    8668:	6859      	ldr	r1, [r3, #4]
    866a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    866e:	4613      	mov	r3, r2
    8670:	005b      	lsls	r3, r3, #1
    8672:	4413      	add	r3, r2
    8674:	00db      	lsls	r3, r3, #3
    8676:	3308      	adds	r3, #8
    8678:	440b      	add	r3, r1
    867a:	4618      	mov	r0, r3
    867c:	f000 f91c 	bl	88b8 <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    8680:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8684:	3301      	adds	r3, #1
    8686:	f88d 300f 	strb.w	r3, [sp, #15]
    868a:	4908      	ldr	r1, [pc, #32]	; (86ac <Pwm_Init+0x104>)
    868c:	9a02      	ldr	r2, [sp, #8]
    868e:	4613      	mov	r3, r2
    8690:	005b      	lsls	r3, r3, #1
    8692:	4413      	add	r3, r2
    8694:	00db      	lsls	r3, r3, #3
    8696:	440b      	add	r3, r1
    8698:	681b      	ldr	r3, [r3, #0]
    869a:	781b      	ldrb	r3, [r3, #0]
    869c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    86a0:	429a      	cmp	r2, r3
    86a2:	d3bc      	bcc.n	861e <Pwm_Init+0x76>
#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
#endif
}
    86a4:	bf00      	nop
    86a6:	bf00      	nop
    86a8:	b004      	add	sp, #16
    86aa:	bd10      	pop	{r4, pc}
    86ac:	1fff8b24 	.word	0x1fff8b24

000086b0 <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
    86b0:	b500      	push	{lr}
    86b2:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    86b4:	2300      	movs	r3, #0
    86b6:	9302      	str	r3, [sp, #8]
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    86b8:	2300      	movs	r3, #0
    86ba:	f88d 300f 	strb.w	r3, [sp, #15]
    86be:	e02a      	b.n	8716 <Pwm_DeInit+0x66>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
    86c0:	4945      	ldr	r1, [pc, #276]	; (87d8 <Pwm_DeInit+0x128>)
    86c2:	9a02      	ldr	r2, [sp, #8]
    86c4:	4613      	mov	r3, r2
    86c6:	005b      	lsls	r3, r3, #1
    86c8:	4413      	add	r3, r2
    86ca:	00db      	lsls	r3, r3, #3
    86cc:	440b      	add	r3, r1
    86ce:	330c      	adds	r3, #12
    86d0:	6819      	ldr	r1, [r3, #0]
    86d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    86d6:	4613      	mov	r3, r2
    86d8:	005b      	lsls	r3, r3, #1
    86da:	4413      	add	r3, r2
    86dc:	00db      	lsls	r3, r3, #3
    86de:	440b      	add	r3, r1
    86e0:	f103 0008 	add.w	r0, r3, #8
    86e4:	493c      	ldr	r1, [pc, #240]	; (87d8 <Pwm_DeInit+0x128>)
    86e6:	9a02      	ldr	r2, [sp, #8]
    86e8:	4613      	mov	r3, r2
    86ea:	005b      	lsls	r3, r3, #1
    86ec:	4413      	add	r3, r2
    86ee:	00db      	lsls	r3, r3, #3
    86f0:	440b      	add	r3, r1
    86f2:	330c      	adds	r3, #12
    86f4:	6819      	ldr	r1, [r3, #0]
    86f6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    86fa:	4613      	mov	r3, r2
    86fc:	005b      	lsls	r3, r3, #1
    86fe:	4413      	add	r3, r2
    8700:	00db      	lsls	r3, r3, #3
    8702:	440b      	add	r3, r1
    8704:	695b      	ldr	r3, [r3, #20]
    8706:	4619      	mov	r1, r3
    8708:	f000 f94e 	bl	89a8 <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    870c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8710:	3301      	adds	r3, #1
    8712:	f88d 300f 	strb.w	r3, [sp, #15]
    8716:	4930      	ldr	r1, [pc, #192]	; (87d8 <Pwm_DeInit+0x128>)
    8718:	9a02      	ldr	r2, [sp, #8]
    871a:	4613      	mov	r3, r2
    871c:	005b      	lsls	r3, r3, #1
    871e:	4413      	add	r3, r2
    8720:	00db      	lsls	r3, r3, #3
    8722:	440b      	add	r3, r1
    8724:	681b      	ldr	r3, [r3, #0]
    8726:	781b      	ldrb	r3, [r3, #0]
    8728:	f89d 200f 	ldrb.w	r2, [sp, #15]
    872c:	429a      	cmp	r2, r3
    872e:	d3c7      	bcc.n	86c0 <Pwm_DeInit+0x10>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
    8730:	4929      	ldr	r1, [pc, #164]	; (87d8 <Pwm_DeInit+0x128>)
    8732:	9a02      	ldr	r2, [sp, #8]
    8734:	4613      	mov	r3, r2
    8736:	005b      	lsls	r3, r3, #1
    8738:	4413      	add	r3, r2
    873a:	00db      	lsls	r3, r3, #3
    873c:	440b      	add	r3, r1
    873e:	681b      	ldr	r3, [r3, #0]
    8740:	9301      	str	r3, [sp, #4]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    8742:	2300      	movs	r3, #0
    8744:	f88d 300f 	strb.w	r3, [sp, #15]
    8748:	e010      	b.n	876c <Pwm_DeInit+0xbc>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
    874a:	9b01      	ldr	r3, [sp, #4]
    874c:	68d9      	ldr	r1, [r3, #12]
    874e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8752:	4613      	mov	r3, r2
    8754:	005b      	lsls	r3, r3, #1
    8756:	4413      	add	r3, r2
    8758:	009b      	lsls	r3, r3, #2
    875a:	440b      	add	r3, r1
    875c:	4618      	mov	r0, r3
    875e:	f000 f943 	bl	89e8 <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    8762:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8766:	3301      	adds	r3, #1
    8768:	f88d 300f 	strb.w	r3, [sp, #15]
    876c:	491a      	ldr	r1, [pc, #104]	; (87d8 <Pwm_DeInit+0x128>)
    876e:	9a02      	ldr	r2, [sp, #8]
    8770:	4613      	mov	r3, r2
    8772:	005b      	lsls	r3, r3, #1
    8774:	4413      	add	r3, r2
    8776:	00db      	lsls	r3, r3, #3
    8778:	440b      	add	r3, r1
    877a:	681b      	ldr	r3, [r3, #0]
    877c:	7a1b      	ldrb	r3, [r3, #8]
    877e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8782:	429a      	cmp	r2, r3
    8784:	d3e1      	bcc.n	874a <Pwm_DeInit+0x9a>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
    8786:	4914      	ldr	r1, [pc, #80]	; (87d8 <Pwm_DeInit+0x128>)
    8788:	9a02      	ldr	r2, [sp, #8]
    878a:	4613      	mov	r3, r2
    878c:	005b      	lsls	r3, r3, #1
    878e:	4413      	add	r3, r2
    8790:	00db      	lsls	r3, r3, #3
    8792:	440b      	add	r3, r1
    8794:	2200      	movs	r2, #0
    8796:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    8798:	2300      	movs	r3, #0
    879a:	f88d 300f 	strb.w	r3, [sp, #15]
    879e:	e012      	b.n	87c6 <Pwm_DeInit+0x116>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
    87a0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    87a4:	480c      	ldr	r0, [pc, #48]	; (87d8 <Pwm_DeInit+0x128>)
    87a6:	9a02      	ldr	r2, [sp, #8]
    87a8:	4613      	mov	r3, r2
    87aa:	005b      	lsls	r3, r3, #1
    87ac:	4413      	add	r3, r2
    87ae:	005b      	lsls	r3, r3, #1
    87b0:	440b      	add	r3, r1
    87b2:	3302      	adds	r3, #2
    87b4:	009b      	lsls	r3, r3, #2
    87b6:	4403      	add	r3, r0
    87b8:	2200      	movs	r2, #0
    87ba:	605a      	str	r2, [r3, #4]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    87bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    87c0:	3301      	adds	r3, #1
    87c2:	f88d 300f 	strb.w	r3, [sp, #15]
    87c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    87ca:	2b01      	cmp	r3, #1
    87cc:	d9e8      	bls.n	87a0 <Pwm_DeInit+0xf0>
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
#endif

}
    87ce:	bf00      	nop
    87d0:	bf00      	nop
    87d2:	b005      	add	sp, #20
    87d4:	f85d fb04 	ldr.w	pc, [sp], #4
    87d8:	1fff8b24 	.word	0x1fff8b24

000087dc <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
    87dc:	b500      	push	{lr}
    87de:	b087      	sub	sp, #28
    87e0:	4603      	mov	r3, r0
    87e2:	460a      	mov	r2, r1
    87e4:	f88d 3007 	strb.w	r3, [sp, #7]
    87e8:	4613      	mov	r3, r2
    87ea:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
    87ee:	2300      	movs	r3, #0
    87f0:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    87f4:	2300      	movs	r3, #0
    87f6:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    87f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    87fc:	4619      	mov	r1, r3
    87fe:	9804      	ldr	r0, [sp, #16]
    8800:	f7ff fec8 	bl	8594 <Pwm_GetPartitionChannelIdx>
    8804:	4603      	mov	r3, r0
    8806:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    880a:	490f      	ldr	r1, [pc, #60]	; (8848 <Pwm_SetDutyCycle+0x6c>)
    880c:	9a04      	ldr	r2, [sp, #16]
    880e:	4613      	mov	r3, r2
    8810:	005b      	lsls	r3, r3, #1
    8812:	4413      	add	r3, r2
    8814:	00db      	lsls	r3, r3, #3
    8816:	440b      	add	r3, r1
    8818:	330c      	adds	r3, #12
    881a:	6819      	ldr	r1, [r3, #0]
    881c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8820:	4613      	mov	r3, r2
    8822:	005b      	lsls	r3, r3, #1
    8824:	4413      	add	r3, r2
    8826:	00db      	lsls	r3, r3, #3
    8828:	440b      	add	r3, r1
    882a:	f103 0208 	add.w	r2, r3, #8
    882e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8832:	4611      	mov	r1, r2
    8834:	4618      	mov	r0, r3
    8836:	f000 f8f3 	bl	8a20 <Pwm_Ipw_SetDutyCycle>
    883a:	4603      	mov	r3, r0
    883c:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    8840:	bf00      	nop
    8842:	b007      	add	sp, #28
    8844:	f85d fb04 	ldr.w	pc, [sp], #4
    8848:	1fff8b24 	.word	0x1fff8b24

0000884c <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
    884c:	b500      	push	{lr}
    884e:	b085      	sub	sp, #20
    8850:	4603      	mov	r3, r0
    8852:	f88d 3007 	strb.w	r3, [sp, #7]
    8856:	460b      	mov	r3, r1
    8858:	f8ad 3004 	strh.w	r3, [sp, #4]
    885c:	4613      	mov	r3, r2
    885e:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    8862:	2300      	movs	r3, #0
    8864:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    8866:	f89d 3007 	ldrb.w	r3, [sp, #7]
    886a:	4619      	mov	r1, r3
    886c:	9803      	ldr	r0, [sp, #12]
    886e:	f7ff fe91 	bl	8594 <Pwm_GetPartitionChannelIdx>
    8872:	4603      	mov	r3, r0
    8874:	f88d 300b 	strb.w	r3, [sp, #11]
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    8878:	490e      	ldr	r1, [pc, #56]	; (88b4 <Pwm_SetPeriodAndDuty+0x68>)
    887a:	9a03      	ldr	r2, [sp, #12]
    887c:	4613      	mov	r3, r2
    887e:	005b      	lsls	r3, r3, #1
    8880:	4413      	add	r3, r2
    8882:	00db      	lsls	r3, r3, #3
    8884:	440b      	add	r3, r1
    8886:	330c      	adds	r3, #12
    8888:	6819      	ldr	r1, [r3, #0]
    888a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    888e:	4613      	mov	r3, r2
    8890:	005b      	lsls	r3, r3, #1
    8892:	4413      	add	r3, r2
    8894:	00db      	lsls	r3, r3, #3
    8896:	440b      	add	r3, r1
    8898:	f103 0208 	add.w	r2, r3, #8
    889c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    88a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    88a4:	4618      	mov	r0, r3
    88a6:	f000 f907 	bl	8ab8 <Pwm_Ipw_SetPeriodAndDuty>
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    88aa:	bf00      	nop
    88ac:	b005      	add	sp, #20
    88ae:	f85d fb04 	ldr.w	pc, [sp], #4
    88b2:	bf00      	nop
    88b4:	1fff8b24 	.word	0x1fff8b24

000088b8 <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
    88b8:	b410      	push	{r4}
    88ba:	b083      	sub	sp, #12
    88bc:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
    88be:	9b01      	ldr	r3, [sp, #4]
    88c0:	681b      	ldr	r3, [r3, #0]
    88c2:	2b00      	cmp	r3, #0
    88c4:	d010      	beq.n	88e8 <Pwm_Ipw_Init+0x30>
    88c6:	2b01      	cmp	r3, #1
    88c8:	d110      	bne.n	88ec <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
    88ca:	9b01      	ldr	r3, [sp, #4]
    88cc:	7a1b      	ldrb	r3, [r3, #8]
    88ce:	461c      	mov	r4, r3
    88d0:	9b01      	ldr	r3, [sp, #4]
    88d2:	685b      	ldr	r3, [r3, #4]
    88d4:	781b      	ldrb	r3, [r3, #0]
    88d6:	4618      	mov	r0, r3
    88d8:	9b01      	ldr	r3, [sp, #4]
    88da:	8959      	ldrh	r1, [r3, #10]
    88dc:	4a06      	ldr	r2, [pc, #24]	; (88f8 <Pwm_Ipw_Init+0x40>)
    88de:	00e3      	lsls	r3, r4, #3
    88e0:	4403      	add	r3, r0
    88e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    88e6:	e002      	b.n	88ee <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    88e8:	bf00      	nop
    88ea:	e000      	b.n	88ee <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
    88ec:	bf00      	nop
    }
}
    88ee:	bf00      	nop
    88f0:	b003      	add	sp, #12
    88f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    88f6:	4770      	bx	lr
    88f8:	1fff90a4 	.word	0x1fff90a4

000088fc <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    88fc:	b500      	push	{lr}
    88fe:	b085      	sub	sp, #20
    8900:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
    8902:	2300      	movs	r3, #0
    8904:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
    8908:	2300      	movs	r3, #0
    890a:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
    890e:	9b01      	ldr	r3, [sp, #4]
    8910:	685b      	ldr	r3, [r3, #4]
    8912:	2b00      	cmp	r3, #0
    8914:	d03c      	beq.n	8990 <Pwm_Ipw_InitInstance+0x94>
    8916:	2b01      	cmp	r3, #1
    8918:	d13c      	bne.n	8994 <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    891a:	9b01      	ldr	r3, [sp, #4]
    891c:	689b      	ldr	r3, [r3, #8]
    891e:	2b00      	cmp	r3, #0
    8920:	d03a      	beq.n	8998 <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
    8922:	9b01      	ldr	r3, [sp, #4]
    8924:	781a      	ldrb	r2, [r3, #0]
    8926:	9b01      	ldr	r3, [sp, #4]
    8928:	689b      	ldr	r3, [r3, #8]
    892a:	4619      	mov	r1, r3
    892c:	4610      	mov	r0, r2
    892e:	f7fe fed7 	bl	76e0 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    8932:	2300      	movs	r3, #0
    8934:	f88d 300f 	strb.w	r3, [sp, #15]
    8938:	e022      	b.n	8980 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
    893a:	9b01      	ldr	r3, [sp, #4]
    893c:	689b      	ldr	r3, [r3, #8]
    893e:	685a      	ldr	r2, [r3, #4]
    8940:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8944:	009b      	lsls	r3, r3, #2
    8946:	4413      	add	r3, r2
    8948:	681b      	ldr	r3, [r3, #0]
    894a:	781b      	ldrb	r3, [r3, #0]
    894c:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
    8950:	9b01      	ldr	r3, [sp, #4]
    8952:	689b      	ldr	r3, [r3, #8]
    8954:	685a      	ldr	r2, [r3, #4]
    8956:	f89d 300f 	ldrb.w	r3, [sp, #15]
    895a:	009b      	lsls	r3, r3, #2
    895c:	4413      	add	r3, r2
    895e:	681a      	ldr	r2, [r3, #0]
    8960:	9b01      	ldr	r3, [sp, #4]
    8962:	781b      	ldrb	r3, [r3, #0]
    8964:	4619      	mov	r1, r3
    8966:	f89d 300e 	ldrb.w	r3, [sp, #14]
    896a:	6a12      	ldr	r2, [r2, #32]
    896c:	480d      	ldr	r0, [pc, #52]	; (89a4 <Pwm_Ipw_InitInstance+0xa8>)
    896e:	00c9      	lsls	r1, r1, #3
    8970:	440b      	add	r3, r1
    8972:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    8976:	f89d 300f 	ldrb.w	r3, [sp, #15]
    897a:	3301      	adds	r3, #1
    897c:	f88d 300f 	strb.w	r3, [sp, #15]
    8980:	9b01      	ldr	r3, [sp, #4]
    8982:	689b      	ldr	r3, [r3, #8]
    8984:	7a1b      	ldrb	r3, [r3, #8]
    8986:	f89d 200f 	ldrb.w	r2, [sp, #15]
    898a:	429a      	cmp	r2, r3
    898c:	d3d5      	bcc.n	893a <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
    898e:	e003      	b.n	8998 <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    8990:	bf00      	nop
    8992:	e002      	b.n	899a <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
    8994:	bf00      	nop
    8996:	e000      	b.n	899a <Pwm_Ipw_InitInstance+0x9e>
            break;
    8998:	bf00      	nop
    }
}
    899a:	bf00      	nop
    899c:	b005      	add	sp, #20
    899e:	f85d fb04 	ldr.w	pc, [sp], #4
    89a2:	bf00      	nop
    89a4:	1fff9024 	.word	0x1fff9024

000089a8 <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
    89a8:	b082      	sub	sp, #8
    89aa:	9001      	str	r0, [sp, #4]
    89ac:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
    89ae:	9b01      	ldr	r3, [sp, #4]
    89b0:	681b      	ldr	r3, [r3, #0]
    89b2:	2b00      	cmp	r3, #0
    89b4:	d00f      	beq.n	89d6 <Pwm_Ipw_DeInit+0x2e>
    89b6:	2b01      	cmp	r3, #1
    89b8:	d10f      	bne.n	89da <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    89ba:	9b01      	ldr	r3, [sp, #4]
    89bc:	7a1b      	ldrb	r3, [r3, #8]
    89be:	4618      	mov	r0, r3
    89c0:	9b01      	ldr	r3, [sp, #4]
    89c2:	685b      	ldr	r3, [r3, #4]
    89c4:	781b      	ldrb	r3, [r3, #0]
    89c6:	4619      	mov	r1, r3
    89c8:	4a06      	ldr	r2, [pc, #24]	; (89e4 <Pwm_Ipw_DeInit+0x3c>)
    89ca:	00c3      	lsls	r3, r0, #3
    89cc:	440b      	add	r3, r1
    89ce:	2100      	movs	r1, #0
    89d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    89d4:	e002      	b.n	89dc <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    89d6:	bf00      	nop
    89d8:	e000      	b.n	89dc <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
    89da:	bf00      	nop
    }
    (void) ChannelIdleState;

}
    89dc:	bf00      	nop
    89de:	b002      	add	sp, #8
    89e0:	4770      	bx	lr
    89e2:	bf00      	nop
    89e4:	1fff90a4 	.word	0x1fff90a4

000089e8 <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    89e8:	b500      	push	{lr}
    89ea:	b083      	sub	sp, #12
    89ec:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
    89ee:	9b01      	ldr	r3, [sp, #4]
    89f0:	685b      	ldr	r3, [r3, #4]
    89f2:	2b00      	cmp	r3, #0
    89f4:	d00b      	beq.n	8a0e <Pwm_Ipw_DeInitInstance+0x26>
    89f6:	2b01      	cmp	r3, #1
    89f8:	d10b      	bne.n	8a12 <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    89fa:	9b01      	ldr	r3, [sp, #4]
    89fc:	689b      	ldr	r3, [r3, #8]
    89fe:	2b00      	cmp	r3, #0
    8a00:	d009      	beq.n	8a16 <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
    8a02:	9b01      	ldr	r3, [sp, #4]
    8a04:	781b      	ldrb	r3, [r3, #0]
    8a06:	4618      	mov	r0, r3
    8a08:	f7fe fec8 	bl	779c <Ftm_Pwm_Ip_DeInit>
            }
            break;
    8a0c:	e003      	b.n	8a16 <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    8a0e:	bf00      	nop
    8a10:	e002      	b.n	8a18 <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
    8a12:	bf00      	nop
    8a14:	e000      	b.n	8a18 <Pwm_Ipw_DeInitInstance+0x30>
            break;
    8a16:	bf00      	nop
    }
}
    8a18:	bf00      	nop
    8a1a:	b003      	add	sp, #12
    8a1c:	f85d fb04 	ldr.w	pc, [sp], #4

00008a20 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
    8a20:	b500      	push	{lr}
    8a22:	b085      	sub	sp, #20
    8a24:	4603      	mov	r3, r0
    8a26:	9100      	str	r1, [sp, #0]
    8a28:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
    8a2c:	2300      	movs	r3, #0
    8a2e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    8a32:	2300      	movs	r3, #0
    8a34:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
    8a38:	9b00      	ldr	r3, [sp, #0]
    8a3a:	681b      	ldr	r3, [r3, #0]
    8a3c:	2b00      	cmp	r3, #0
    8a3e:	d02c      	beq.n	8a9a <Pwm_Ipw_SetDutyCycle+0x7a>
    8a40:	2b01      	cmp	r3, #1
    8a42:	d12c      	bne.n	8a9e <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    8a44:	9b00      	ldr	r3, [sp, #0]
    8a46:	685b      	ldr	r3, [r3, #4]
    8a48:	2b00      	cmp	r3, #0
    8a4a:	d02a      	beq.n	8aa2 <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
    8a4c:	9b00      	ldr	r3, [sp, #0]
    8a4e:	7a1b      	ldrb	r3, [r3, #8]
    8a50:	461a      	mov	r2, r3
    8a52:	4b17      	ldr	r3, [pc, #92]	; (8ab0 <Pwm_Ipw_SetDutyCycle+0x90>)
    8a54:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    8a58:	461a      	mov	r2, r3
    8a5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a5e:	fb02 f303 	mul.w	r3, r2, r3
    8a62:	0bdb      	lsrs	r3, r3, #15
    8a64:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    8a68:	9b00      	ldr	r3, [sp, #0]
    8a6a:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    8a6c:	9b00      	ldr	r3, [sp, #0]
    8a6e:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    8a70:	7819      	ldrb	r1, [r3, #0]
    8a72:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    8a76:	2301      	movs	r3, #1
    8a78:	f7fe fed8 	bl	782c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    8a7c:	9b00      	ldr	r3, [sp, #0]
    8a7e:	7a1b      	ldrb	r3, [r3, #8]
    8a80:	4618      	mov	r0, r3
    8a82:	9b00      	ldr	r3, [sp, #0]
    8a84:	685b      	ldr	r3, [r3, #4]
    8a86:	781b      	ldrb	r3, [r3, #0]
    8a88:	461a      	mov	r2, r3
    8a8a:	490a      	ldr	r1, [pc, #40]	; (8ab4 <Pwm_Ipw_SetDutyCycle+0x94>)
    8a8c:	00c3      	lsls	r3, r0, #3
    8a8e:	4413      	add	r3, r2
    8a90:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8a94:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    8a98:	e003      	b.n	8aa2 <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    8a9a:	bf00      	nop
    8a9c:	e002      	b.n	8aa4 <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
    8a9e:	bf00      	nop
    8aa0:	e000      	b.n	8aa4 <Pwm_Ipw_SetDutyCycle+0x84>
            break;
    8aa2:	bf00      	nop
    }

    return RetVal;
    8aa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8aa8:	4618      	mov	r0, r3
    8aaa:	b005      	add	sp, #20
    8aac:	f85d fb04 	ldr.w	pc, [sp], #4
    8ab0:	1fff8cfc 	.word	0x1fff8cfc
    8ab4:	1fff90a4 	.word	0x1fff90a4

00008ab8 <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
    8ab8:	b510      	push	{r4, lr}
    8aba:	b086      	sub	sp, #24
    8abc:	4603      	mov	r3, r0
    8abe:	9202      	str	r2, [sp, #8]
    8ac0:	f8ad 300e 	strh.w	r3, [sp, #14]
    8ac4:	460b      	mov	r3, r1
    8ac6:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    8aca:	2300      	movs	r3, #0
    8acc:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
    8ad0:	9b02      	ldr	r3, [sp, #8]
    8ad2:	681b      	ldr	r3, [r3, #0]
    8ad4:	2b00      	cmp	r3, #0
    8ad6:	d02a      	beq.n	8b2e <Pwm_Ipw_SetPeriodAndDuty+0x76>
    8ad8:	2b01      	cmp	r3, #1
    8ada:	d12a      	bne.n	8b32 <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    8adc:	9b02      	ldr	r3, [sp, #8]
    8ade:	685b      	ldr	r3, [r3, #4]
    8ae0:	2b00      	cmp	r3, #0
    8ae2:	d028      	beq.n	8b36 <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
    8ae4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8ae8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    8aec:	fb02 f303 	mul.w	r3, r2, r3
    8af0:	0bdb      	lsrs	r3, r3, #15
    8af2:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    8af6:	9b02      	ldr	r3, [sp, #8]
    8af8:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    8afa:	9b02      	ldr	r3, [sp, #8]
    8afc:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    8afe:	7819      	ldrb	r1, [r3, #0]
    8b00:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8b04:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8b08:	2401      	movs	r4, #1
    8b0a:	9400      	str	r4, [sp, #0]
    8b0c:	f7fe ff54 	bl	79b8 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    8b10:	9b02      	ldr	r3, [sp, #8]
    8b12:	7a1b      	ldrb	r3, [r3, #8]
    8b14:	4618      	mov	r0, r3
    8b16:	9b02      	ldr	r3, [sp, #8]
    8b18:	685b      	ldr	r3, [r3, #4]
    8b1a:	781b      	ldrb	r3, [r3, #0]
    8b1c:	461a      	mov	r2, r3
    8b1e:	4908      	ldr	r1, [pc, #32]	; (8b40 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
    8b20:	00c3      	lsls	r3, r0, #3
    8b22:	4413      	add	r3, r2
    8b24:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    8b28:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    8b2c:	e003      	b.n	8b36 <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    8b2e:	bf00      	nop
    8b30:	e002      	b.n	8b38 <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
    8b32:	bf00      	nop
    8b34:	e000      	b.n	8b38 <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
    8b36:	bf00      	nop
    }
}
    8b38:	bf00      	nop
    8b3a:	b006      	add	sp, #24
    8b3c:	bd10      	pop	{r4, pc}
    8b3e:	bf00      	nop
    8b40:	1fff90a4 	.word	0x1fff90a4

00008b44 <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
    8b44:	b084      	sub	sp, #16
    8b46:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
    8b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8b4c:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
    8b4e:	9b01      	ldr	r3, [sp, #4]
    8b50:	681b      	ldr	r3, [r3, #0]
    8b52:	2b01      	cmp	r3, #1
    8b54:	d103      	bne.n	8b5e <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
    8b56:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    8b5a:	9303      	str	r3, [sp, #12]
            break;
    8b5c:	e000      	b.n	8b60 <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
    8b5e:	bf00      	nop
    }

    return RetVal;
    8b60:	9b03      	ldr	r3, [sp, #12]
}
    8b62:	4618      	mov	r0, r3
    8b64:	b004      	add	sp, #16
    8b66:	4770      	bx	lr

00008b68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
    8b68:	b500      	push	{lr}
    8b6a:	b083      	sub	sp, #12
    8b6c:	f7f7 ffb0 	bl	ad0 <Sys_GetCoreID>
    8b70:	4603      	mov	r3, r0
    8b72:	9301      	str	r3, [sp, #4]
    8b74:	4a10      	ldr	r2, [pc, #64]	; (8bb8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8b76:	9b01      	ldr	r3, [sp, #4]
    8b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b7c:	2b00      	cmp	r3, #0
    8b7e:	d10d      	bne.n	8b9c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    8b80:	f7f7 fec4 	bl	90c <Mcu_schm_read_msr>
    8b84:	9000      	str	r0, [sp, #0]
    8b86:	9b00      	ldr	r3, [sp, #0]
    8b88:	f003 0301 	and.w	r3, r3, #1
    8b8c:	2b00      	cmp	r3, #0
    8b8e:	d100      	bne.n	8b92 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
    8b90:	b672      	cpsid	i
    8b92:	490a      	ldr	r1, [pc, #40]	; (8bbc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    8b94:	9b01      	ldr	r3, [sp, #4]
    8b96:	9a00      	ldr	r2, [sp, #0]
    8b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8b9c:	4a06      	ldr	r2, [pc, #24]	; (8bb8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8b9e:	9b01      	ldr	r3, [sp, #4]
    8ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ba4:	1c5a      	adds	r2, r3, #1
    8ba6:	4904      	ldr	r1, [pc, #16]	; (8bb8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8ba8:	9b01      	ldr	r3, [sp, #4]
    8baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8bae:	bf00      	nop
    8bb0:	b003      	add	sp, #12
    8bb2:	f85d fb04 	ldr.w	pc, [sp], #4
    8bb6:	bf00      	nop
    8bb8:	1fff90e8 	.word	0x1fff90e8
    8bbc:	1fff90e4 	.word	0x1fff90e4

00008bc0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:
    8bc0:	b500      	push	{lr}
    8bc2:	b083      	sub	sp, #12
    8bc4:	f7f7 ff84 	bl	ad0 <Sys_GetCoreID>
    8bc8:	4603      	mov	r3, r0
    8bca:	9301      	str	r3, [sp, #4]
    8bcc:	4a0d      	ldr	r2, [pc, #52]	; (8c04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    8bce:	9b01      	ldr	r3, [sp, #4]
    8bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bd4:	1e5a      	subs	r2, r3, #1
    8bd6:	490b      	ldr	r1, [pc, #44]	; (8c04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    8bd8:	9b01      	ldr	r3, [sp, #4]
    8bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8bde:	4a0a      	ldr	r2, [pc, #40]	; (8c08 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    8be0:	9b01      	ldr	r3, [sp, #4]
    8be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8be6:	f003 0301 	and.w	r3, r3, #1
    8bea:	2b00      	cmp	r3, #0
    8bec:	d106      	bne.n	8bfc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    8bee:	4a05      	ldr	r2, [pc, #20]	; (8c04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    8bf0:	9b01      	ldr	r3, [sp, #4]
    8bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bf6:	2b00      	cmp	r3, #0
    8bf8:	d100      	bne.n	8bfc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    8bfa:	b662      	cpsie	i
    8bfc:	bf00      	nop
    8bfe:	b003      	add	sp, #12
    8c00:	f85d fb04 	ldr.w	pc, [sp], #4
    8c04:	1fff90e8 	.word	0x1fff90e8
    8c08:	1fff90e4 	.word	0x1fff90e4

00008c0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:
    8c0c:	b500      	push	{lr}
    8c0e:	b083      	sub	sp, #12
    8c10:	f7f7 ff5e 	bl	ad0 <Sys_GetCoreID>
    8c14:	4603      	mov	r3, r0
    8c16:	9301      	str	r3, [sp, #4]
    8c18:	4a10      	ldr	r2, [pc, #64]	; (8c5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8c1a:	9b01      	ldr	r3, [sp, #4]
    8c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c20:	2b00      	cmp	r3, #0
    8c22:	d10d      	bne.n	8c40 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    8c24:	f7f7 fe72 	bl	90c <Mcu_schm_read_msr>
    8c28:	9000      	str	r0, [sp, #0]
    8c2a:	9b00      	ldr	r3, [sp, #0]
    8c2c:	f003 0301 	and.w	r3, r3, #1
    8c30:	2b00      	cmp	r3, #0
    8c32:	d100      	bne.n	8c36 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
    8c34:	b672      	cpsid	i
    8c36:	490a      	ldr	r1, [pc, #40]	; (8c60 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    8c38:	9b01      	ldr	r3, [sp, #4]
    8c3a:	9a00      	ldr	r2, [sp, #0]
    8c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8c40:	4a06      	ldr	r2, [pc, #24]	; (8c5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8c42:	9b01      	ldr	r3, [sp, #4]
    8c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c48:	1c5a      	adds	r2, r3, #1
    8c4a:	4904      	ldr	r1, [pc, #16]	; (8c5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8c4c:	9b01      	ldr	r3, [sp, #4]
    8c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8c52:	bf00      	nop
    8c54:	b003      	add	sp, #12
    8c56:	f85d fb04 	ldr.w	pc, [sp], #4
    8c5a:	bf00      	nop
    8c5c:	1fff90f0 	.word	0x1fff90f0
    8c60:	1fff90ec 	.word	0x1fff90ec

00008c64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:
    8c64:	b500      	push	{lr}
    8c66:	b083      	sub	sp, #12
    8c68:	f7f7 ff32 	bl	ad0 <Sys_GetCoreID>
    8c6c:	4603      	mov	r3, r0
    8c6e:	9301      	str	r3, [sp, #4]
    8c70:	4a0d      	ldr	r2, [pc, #52]	; (8ca8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8c72:	9b01      	ldr	r3, [sp, #4]
    8c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c78:	1e5a      	subs	r2, r3, #1
    8c7a:	490b      	ldr	r1, [pc, #44]	; (8ca8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8c7c:	9b01      	ldr	r3, [sp, #4]
    8c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8c82:	4a0a      	ldr	r2, [pc, #40]	; (8cac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    8c84:	9b01      	ldr	r3, [sp, #4]
    8c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c8a:	f003 0301 	and.w	r3, r3, #1
    8c8e:	2b00      	cmp	r3, #0
    8c90:	d106      	bne.n	8ca0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    8c92:	4a05      	ldr	r2, [pc, #20]	; (8ca8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8c94:	9b01      	ldr	r3, [sp, #4]
    8c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c9a:	2b00      	cmp	r3, #0
    8c9c:	d100      	bne.n	8ca0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    8c9e:	b662      	cpsie	i
    8ca0:	bf00      	nop
    8ca2:	b003      	add	sp, #12
    8ca4:	f85d fb04 	ldr.w	pc, [sp], #4
    8ca8:	1fff90f0 	.word	0x1fff90f0
    8cac:	1fff90ec 	.word	0x1fff90ec

00008cb0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:
    8cb0:	b500      	push	{lr}
    8cb2:	b083      	sub	sp, #12
    8cb4:	f7f7 ff0c 	bl	ad0 <Sys_GetCoreID>
    8cb8:	4603      	mov	r3, r0
    8cba:	9301      	str	r3, [sp, #4]
    8cbc:	4a10      	ldr	r2, [pc, #64]	; (8d00 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8cbe:	9b01      	ldr	r3, [sp, #4]
    8cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cc4:	2b00      	cmp	r3, #0
    8cc6:	d10d      	bne.n	8ce4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    8cc8:	f7f7 fe20 	bl	90c <Mcu_schm_read_msr>
    8ccc:	9000      	str	r0, [sp, #0]
    8cce:	9b00      	ldr	r3, [sp, #0]
    8cd0:	f003 0301 	and.w	r3, r3, #1
    8cd4:	2b00      	cmp	r3, #0
    8cd6:	d100      	bne.n	8cda <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
    8cd8:	b672      	cpsid	i
    8cda:	490a      	ldr	r1, [pc, #40]	; (8d04 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    8cdc:	9b01      	ldr	r3, [sp, #4]
    8cde:	9a00      	ldr	r2, [sp, #0]
    8ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8ce4:	4a06      	ldr	r2, [pc, #24]	; (8d00 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8ce6:	9b01      	ldr	r3, [sp, #4]
    8ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cec:	1c5a      	adds	r2, r3, #1
    8cee:	4904      	ldr	r1, [pc, #16]	; (8d00 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8cf0:	9b01      	ldr	r3, [sp, #4]
    8cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8cf6:	bf00      	nop
    8cf8:	b003      	add	sp, #12
    8cfa:	f85d fb04 	ldr.w	pc, [sp], #4
    8cfe:	bf00      	nop
    8d00:	1fff90f8 	.word	0x1fff90f8
    8d04:	1fff90f4 	.word	0x1fff90f4

00008d08 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:
    8d08:	b500      	push	{lr}
    8d0a:	b083      	sub	sp, #12
    8d0c:	f7f7 fee0 	bl	ad0 <Sys_GetCoreID>
    8d10:	4603      	mov	r3, r0
    8d12:	9301      	str	r3, [sp, #4]
    8d14:	4a0d      	ldr	r2, [pc, #52]	; (8d4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8d16:	9b01      	ldr	r3, [sp, #4]
    8d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d1c:	1e5a      	subs	r2, r3, #1
    8d1e:	490b      	ldr	r1, [pc, #44]	; (8d4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8d20:	9b01      	ldr	r3, [sp, #4]
    8d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8d26:	4a0a      	ldr	r2, [pc, #40]	; (8d50 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    8d28:	9b01      	ldr	r3, [sp, #4]
    8d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d2e:	f003 0301 	and.w	r3, r3, #1
    8d32:	2b00      	cmp	r3, #0
    8d34:	d106      	bne.n	8d44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    8d36:	4a05      	ldr	r2, [pc, #20]	; (8d4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8d38:	9b01      	ldr	r3, [sp, #4]
    8d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d3e:	2b00      	cmp	r3, #0
    8d40:	d100      	bne.n	8d44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    8d42:	b662      	cpsie	i
    8d44:	bf00      	nop
    8d46:	b003      	add	sp, #12
    8d48:	f85d fb04 	ldr.w	pc, [sp], #4
    8d4c:	1fff90f8 	.word	0x1fff90f8
    8d50:	1fff90f4 	.word	0x1fff90f4

00008d54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
    8d54:	b500      	push	{lr}
    8d56:	b083      	sub	sp, #12
    8d58:	f7f7 feba 	bl	ad0 <Sys_GetCoreID>
    8d5c:	4603      	mov	r3, r0
    8d5e:	9301      	str	r3, [sp, #4]
    8d60:	4a10      	ldr	r2, [pc, #64]	; (8da4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8d62:	9b01      	ldr	r3, [sp, #4]
    8d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d68:	2b00      	cmp	r3, #0
    8d6a:	d10d      	bne.n	8d88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    8d6c:	f7f7 fdd7 	bl	91e <Port_schm_read_msr>
    8d70:	9000      	str	r0, [sp, #0]
    8d72:	9b00      	ldr	r3, [sp, #0]
    8d74:	f003 0301 	and.w	r3, r3, #1
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d100      	bne.n	8d7e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
    8d7c:	b672      	cpsid	i
    8d7e:	490a      	ldr	r1, [pc, #40]	; (8da8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    8d80:	9b01      	ldr	r3, [sp, #4]
    8d82:	9a00      	ldr	r2, [sp, #0]
    8d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8d88:	4a06      	ldr	r2, [pc, #24]	; (8da4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8d8a:	9b01      	ldr	r3, [sp, #4]
    8d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d90:	1c5a      	adds	r2, r3, #1
    8d92:	4904      	ldr	r1, [pc, #16]	; (8da4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8d94:	9b01      	ldr	r3, [sp, #4]
    8d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8d9a:	bf00      	nop
    8d9c:	b003      	add	sp, #12
    8d9e:	f85d fb04 	ldr.w	pc, [sp], #4
    8da2:	bf00      	nop
    8da4:	1fff9100 	.word	0x1fff9100
    8da8:	1fff90fc 	.word	0x1fff90fc

00008dac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:
    8dac:	b500      	push	{lr}
    8dae:	b083      	sub	sp, #12
    8db0:	f7f7 fe8e 	bl	ad0 <Sys_GetCoreID>
    8db4:	4603      	mov	r3, r0
    8db6:	9301      	str	r3, [sp, #4]
    8db8:	4a0d      	ldr	r2, [pc, #52]	; (8df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8dba:	9b01      	ldr	r3, [sp, #4]
    8dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dc0:	1e5a      	subs	r2, r3, #1
    8dc2:	490b      	ldr	r1, [pc, #44]	; (8df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8dc4:	9b01      	ldr	r3, [sp, #4]
    8dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8dca:	4a0a      	ldr	r2, [pc, #40]	; (8df4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    8dcc:	9b01      	ldr	r3, [sp, #4]
    8dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dd2:	f003 0301 	and.w	r3, r3, #1
    8dd6:	2b00      	cmp	r3, #0
    8dd8:	d106      	bne.n	8de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    8dda:	4a05      	ldr	r2, [pc, #20]	; (8df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8ddc:	9b01      	ldr	r3, [sp, #4]
    8dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8de2:	2b00      	cmp	r3, #0
    8de4:	d100      	bne.n	8de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    8de6:	b662      	cpsie	i
    8de8:	bf00      	nop
    8dea:	b003      	add	sp, #12
    8dec:	f85d fb04 	ldr.w	pc, [sp], #4
    8df0:	1fff9100 	.word	0x1fff9100
    8df4:	1fff90fc 	.word	0x1fff90fc

00008df8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:
    8df8:	b500      	push	{lr}
    8dfa:	b083      	sub	sp, #12
    8dfc:	f7f7 fe68 	bl	ad0 <Sys_GetCoreID>
    8e00:	4603      	mov	r3, r0
    8e02:	9301      	str	r3, [sp, #4]
    8e04:	4a10      	ldr	r2, [pc, #64]	; (8e48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8e06:	9b01      	ldr	r3, [sp, #4]
    8e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e0c:	2b00      	cmp	r3, #0
    8e0e:	d10d      	bne.n	8e2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    8e10:	f7f7 fd85 	bl	91e <Port_schm_read_msr>
    8e14:	9000      	str	r0, [sp, #0]
    8e16:	9b00      	ldr	r3, [sp, #0]
    8e18:	f003 0301 	and.w	r3, r3, #1
    8e1c:	2b00      	cmp	r3, #0
    8e1e:	d100      	bne.n	8e22 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
    8e20:	b672      	cpsid	i
    8e22:	490a      	ldr	r1, [pc, #40]	; (8e4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    8e24:	9b01      	ldr	r3, [sp, #4]
    8e26:	9a00      	ldr	r2, [sp, #0]
    8e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8e2c:	4a06      	ldr	r2, [pc, #24]	; (8e48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8e2e:	9b01      	ldr	r3, [sp, #4]
    8e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e34:	1c5a      	adds	r2, r3, #1
    8e36:	4904      	ldr	r1, [pc, #16]	; (8e48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8e38:	9b01      	ldr	r3, [sp, #4]
    8e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8e3e:	bf00      	nop
    8e40:	b003      	add	sp, #12
    8e42:	f85d fb04 	ldr.w	pc, [sp], #4
    8e46:	bf00      	nop
    8e48:	1fff9108 	.word	0x1fff9108
    8e4c:	1fff9104 	.word	0x1fff9104

00008e50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:
    8e50:	b500      	push	{lr}
    8e52:	b083      	sub	sp, #12
    8e54:	f7f7 fe3c 	bl	ad0 <Sys_GetCoreID>
    8e58:	4603      	mov	r3, r0
    8e5a:	9301      	str	r3, [sp, #4]
    8e5c:	4a0d      	ldr	r2, [pc, #52]	; (8e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8e5e:	9b01      	ldr	r3, [sp, #4]
    8e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e64:	1e5a      	subs	r2, r3, #1
    8e66:	490b      	ldr	r1, [pc, #44]	; (8e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8e68:	9b01      	ldr	r3, [sp, #4]
    8e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8e6e:	4a0a      	ldr	r2, [pc, #40]	; (8e98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    8e70:	9b01      	ldr	r3, [sp, #4]
    8e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e76:	f003 0301 	and.w	r3, r3, #1
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	d106      	bne.n	8e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    8e7e:	4a05      	ldr	r2, [pc, #20]	; (8e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8e80:	9b01      	ldr	r3, [sp, #4]
    8e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e86:	2b00      	cmp	r3, #0
    8e88:	d100      	bne.n	8e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    8e8a:	b662      	cpsie	i
    8e8c:	bf00      	nop
    8e8e:	b003      	add	sp, #12
    8e90:	f85d fb04 	ldr.w	pc, [sp], #4
    8e94:	1fff9108 	.word	0x1fff9108
    8e98:	1fff9104 	.word	0x1fff9104

00008e9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:
    8e9c:	b500      	push	{lr}
    8e9e:	b083      	sub	sp, #12
    8ea0:	f7f7 fe16 	bl	ad0 <Sys_GetCoreID>
    8ea4:	4603      	mov	r3, r0
    8ea6:	9301      	str	r3, [sp, #4]
    8ea8:	4a10      	ldr	r2, [pc, #64]	; (8eec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8eaa:	9b01      	ldr	r3, [sp, #4]
    8eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eb0:	2b00      	cmp	r3, #0
    8eb2:	d10d      	bne.n	8ed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    8eb4:	f7f7 fd33 	bl	91e <Port_schm_read_msr>
    8eb8:	9000      	str	r0, [sp, #0]
    8eba:	9b00      	ldr	r3, [sp, #0]
    8ebc:	f003 0301 	and.w	r3, r3, #1
    8ec0:	2b00      	cmp	r3, #0
    8ec2:	d100      	bne.n	8ec6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
    8ec4:	b672      	cpsid	i
    8ec6:	490a      	ldr	r1, [pc, #40]	; (8ef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    8ec8:	9b01      	ldr	r3, [sp, #4]
    8eca:	9a00      	ldr	r2, [sp, #0]
    8ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8ed0:	4a06      	ldr	r2, [pc, #24]	; (8eec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8ed2:	9b01      	ldr	r3, [sp, #4]
    8ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ed8:	1c5a      	adds	r2, r3, #1
    8eda:	4904      	ldr	r1, [pc, #16]	; (8eec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8edc:	9b01      	ldr	r3, [sp, #4]
    8ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8ee2:	bf00      	nop
    8ee4:	b003      	add	sp, #12
    8ee6:	f85d fb04 	ldr.w	pc, [sp], #4
    8eea:	bf00      	nop
    8eec:	1fff9110 	.word	0x1fff9110
    8ef0:	1fff910c 	.word	0x1fff910c

00008ef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:
    8ef4:	b500      	push	{lr}
    8ef6:	b083      	sub	sp, #12
    8ef8:	f7f7 fdea 	bl	ad0 <Sys_GetCoreID>
    8efc:	4603      	mov	r3, r0
    8efe:	9301      	str	r3, [sp, #4]
    8f00:	4a0d      	ldr	r2, [pc, #52]	; (8f38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8f02:	9b01      	ldr	r3, [sp, #4]
    8f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f08:	1e5a      	subs	r2, r3, #1
    8f0a:	490b      	ldr	r1, [pc, #44]	; (8f38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8f0c:	9b01      	ldr	r3, [sp, #4]
    8f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8f12:	4a0a      	ldr	r2, [pc, #40]	; (8f3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    8f14:	9b01      	ldr	r3, [sp, #4]
    8f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f1a:	f003 0301 	and.w	r3, r3, #1
    8f1e:	2b00      	cmp	r3, #0
    8f20:	d106      	bne.n	8f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    8f22:	4a05      	ldr	r2, [pc, #20]	; (8f38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8f24:	9b01      	ldr	r3, [sp, #4]
    8f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	d100      	bne.n	8f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    8f2e:	b662      	cpsie	i
    8f30:	bf00      	nop
    8f32:	b003      	add	sp, #12
    8f34:	f85d fb04 	ldr.w	pc, [sp], #4
    8f38:	1fff9110 	.word	0x1fff9110
    8f3c:	1fff910c 	.word	0x1fff910c

00008f40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:
    8f40:	b500      	push	{lr}
    8f42:	b083      	sub	sp, #12
    8f44:	f7f7 fdc4 	bl	ad0 <Sys_GetCoreID>
    8f48:	4603      	mov	r3, r0
    8f4a:	9301      	str	r3, [sp, #4]
    8f4c:	4a10      	ldr	r2, [pc, #64]	; (8f90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8f4e:	9b01      	ldr	r3, [sp, #4]
    8f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f54:	2b00      	cmp	r3, #0
    8f56:	d10d      	bne.n	8f74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    8f58:	f7f7 fce1 	bl	91e <Port_schm_read_msr>
    8f5c:	9000      	str	r0, [sp, #0]
    8f5e:	9b00      	ldr	r3, [sp, #0]
    8f60:	f003 0301 	and.w	r3, r3, #1
    8f64:	2b00      	cmp	r3, #0
    8f66:	d100      	bne.n	8f6a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
    8f68:	b672      	cpsid	i
    8f6a:	490a      	ldr	r1, [pc, #40]	; (8f94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    8f6c:	9b01      	ldr	r3, [sp, #4]
    8f6e:	9a00      	ldr	r2, [sp, #0]
    8f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8f74:	4a06      	ldr	r2, [pc, #24]	; (8f90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8f76:	9b01      	ldr	r3, [sp, #4]
    8f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f7c:	1c5a      	adds	r2, r3, #1
    8f7e:	4904      	ldr	r1, [pc, #16]	; (8f90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8f80:	9b01      	ldr	r3, [sp, #4]
    8f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8f86:	bf00      	nop
    8f88:	b003      	add	sp, #12
    8f8a:	f85d fb04 	ldr.w	pc, [sp], #4
    8f8e:	bf00      	nop
    8f90:	1fff9118 	.word	0x1fff9118
    8f94:	1fff9114 	.word	0x1fff9114

00008f98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:
    8f98:	b500      	push	{lr}
    8f9a:	b083      	sub	sp, #12
    8f9c:	f7f7 fd98 	bl	ad0 <Sys_GetCoreID>
    8fa0:	4603      	mov	r3, r0
    8fa2:	9301      	str	r3, [sp, #4]
    8fa4:	4a0d      	ldr	r2, [pc, #52]	; (8fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    8fa6:	9b01      	ldr	r3, [sp, #4]
    8fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fac:	1e5a      	subs	r2, r3, #1
    8fae:	490b      	ldr	r1, [pc, #44]	; (8fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    8fb0:	9b01      	ldr	r3, [sp, #4]
    8fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8fb6:	4a0a      	ldr	r2, [pc, #40]	; (8fe0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    8fb8:	9b01      	ldr	r3, [sp, #4]
    8fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fbe:	f003 0301 	and.w	r3, r3, #1
    8fc2:	2b00      	cmp	r3, #0
    8fc4:	d106      	bne.n	8fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    8fc6:	4a05      	ldr	r2, [pc, #20]	; (8fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    8fc8:	9b01      	ldr	r3, [sp, #4]
    8fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fce:	2b00      	cmp	r3, #0
    8fd0:	d100      	bne.n	8fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    8fd2:	b662      	cpsie	i
    8fd4:	bf00      	nop
    8fd6:	b003      	add	sp, #12
    8fd8:	f85d fb04 	ldr.w	pc, [sp], #4
    8fdc:	1fff9118 	.word	0x1fff9118
    8fe0:	1fff9114 	.word	0x1fff9114

00008fe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:
    8fe4:	b500      	push	{lr}
    8fe6:	b083      	sub	sp, #12
    8fe8:	f7f7 fd72 	bl	ad0 <Sys_GetCoreID>
    8fec:	4603      	mov	r3, r0
    8fee:	9301      	str	r3, [sp, #4]
    8ff0:	4a10      	ldr	r2, [pc, #64]	; (9034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    8ff2:	9b01      	ldr	r3, [sp, #4]
    8ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ff8:	2b00      	cmp	r3, #0
    8ffa:	d10d      	bne.n	9018 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    8ffc:	f7f7 fc8f 	bl	91e <Port_schm_read_msr>
    9000:	9000      	str	r0, [sp, #0]
    9002:	9b00      	ldr	r3, [sp, #0]
    9004:	f003 0301 	and.w	r3, r3, #1
    9008:	2b00      	cmp	r3, #0
    900a:	d100      	bne.n	900e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
    900c:	b672      	cpsid	i
    900e:	490a      	ldr	r1, [pc, #40]	; (9038 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    9010:	9b01      	ldr	r3, [sp, #4]
    9012:	9a00      	ldr	r2, [sp, #0]
    9014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9018:	4a06      	ldr	r2, [pc, #24]	; (9034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    901a:	9b01      	ldr	r3, [sp, #4]
    901c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9020:	1c5a      	adds	r2, r3, #1
    9022:	4904      	ldr	r1, [pc, #16]	; (9034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    9024:	9b01      	ldr	r3, [sp, #4]
    9026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    902a:	bf00      	nop
    902c:	b003      	add	sp, #12
    902e:	f85d fb04 	ldr.w	pc, [sp], #4
    9032:	bf00      	nop
    9034:	1fff9120 	.word	0x1fff9120
    9038:	1fff911c 	.word	0x1fff911c

0000903c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:
    903c:	b500      	push	{lr}
    903e:	b083      	sub	sp, #12
    9040:	f7f7 fd46 	bl	ad0 <Sys_GetCoreID>
    9044:	4603      	mov	r3, r0
    9046:	9301      	str	r3, [sp, #4]
    9048:	4a0d      	ldr	r2, [pc, #52]	; (9080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    904a:	9b01      	ldr	r3, [sp, #4]
    904c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9050:	1e5a      	subs	r2, r3, #1
    9052:	490b      	ldr	r1, [pc, #44]	; (9080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    9054:	9b01      	ldr	r3, [sp, #4]
    9056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    905a:	4a0a      	ldr	r2, [pc, #40]	; (9084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    905c:	9b01      	ldr	r3, [sp, #4]
    905e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9062:	f003 0301 	and.w	r3, r3, #1
    9066:	2b00      	cmp	r3, #0
    9068:	d106      	bne.n	9078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    906a:	4a05      	ldr	r2, [pc, #20]	; (9080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    906c:	9b01      	ldr	r3, [sp, #4]
    906e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9072:	2b00      	cmp	r3, #0
    9074:	d100      	bne.n	9078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    9076:	b662      	cpsie	i
    9078:	bf00      	nop
    907a:	b003      	add	sp, #12
    907c:	f85d fb04 	ldr.w	pc, [sp], #4
    9080:	1fff9120 	.word	0x1fff9120
    9084:	1fff911c 	.word	0x1fff911c

00009088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:
    9088:	b500      	push	{lr}
    908a:	b083      	sub	sp, #12
    908c:	f7f7 fd20 	bl	ad0 <Sys_GetCoreID>
    9090:	4603      	mov	r3, r0
    9092:	9301      	str	r3, [sp, #4]
    9094:	4a10      	ldr	r2, [pc, #64]	; (90d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    9096:	9b01      	ldr	r3, [sp, #4]
    9098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    909c:	2b00      	cmp	r3, #0
    909e:	d10d      	bne.n	90bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    90a0:	f7f7 fc3d 	bl	91e <Port_schm_read_msr>
    90a4:	9000      	str	r0, [sp, #0]
    90a6:	9b00      	ldr	r3, [sp, #0]
    90a8:	f003 0301 	and.w	r3, r3, #1
    90ac:	2b00      	cmp	r3, #0
    90ae:	d100      	bne.n	90b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
    90b0:	b672      	cpsid	i
    90b2:	490a      	ldr	r1, [pc, #40]	; (90dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    90b4:	9b01      	ldr	r3, [sp, #4]
    90b6:	9a00      	ldr	r2, [sp, #0]
    90b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    90bc:	4a06      	ldr	r2, [pc, #24]	; (90d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    90be:	9b01      	ldr	r3, [sp, #4]
    90c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90c4:	1c5a      	adds	r2, r3, #1
    90c6:	4904      	ldr	r1, [pc, #16]	; (90d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    90c8:	9b01      	ldr	r3, [sp, #4]
    90ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    90ce:	bf00      	nop
    90d0:	b003      	add	sp, #12
    90d2:	f85d fb04 	ldr.w	pc, [sp], #4
    90d6:	bf00      	nop
    90d8:	1fff9128 	.word	0x1fff9128
    90dc:	1fff9124 	.word	0x1fff9124

000090e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:
    90e0:	b500      	push	{lr}
    90e2:	b083      	sub	sp, #12
    90e4:	f7f7 fcf4 	bl	ad0 <Sys_GetCoreID>
    90e8:	4603      	mov	r3, r0
    90ea:	9301      	str	r3, [sp, #4]
    90ec:	4a0d      	ldr	r2, [pc, #52]	; (9124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    90ee:	9b01      	ldr	r3, [sp, #4]
    90f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90f4:	1e5a      	subs	r2, r3, #1
    90f6:	490b      	ldr	r1, [pc, #44]	; (9124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    90f8:	9b01      	ldr	r3, [sp, #4]
    90fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    90fe:	4a0a      	ldr	r2, [pc, #40]	; (9128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    9100:	9b01      	ldr	r3, [sp, #4]
    9102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9106:	f003 0301 	and.w	r3, r3, #1
    910a:	2b00      	cmp	r3, #0
    910c:	d106      	bne.n	911c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    910e:	4a05      	ldr	r2, [pc, #20]	; (9124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    9110:	9b01      	ldr	r3, [sp, #4]
    9112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9116:	2b00      	cmp	r3, #0
    9118:	d100      	bne.n	911c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    911a:	b662      	cpsie	i
    911c:	bf00      	nop
    911e:	b003      	add	sp, #12
    9120:	f85d fb04 	ldr.w	pc, [sp], #4
    9124:	1fff9128 	.word	0x1fff9128
    9128:	1fff9124 	.word	0x1fff9124

0000912c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:
    912c:	b500      	push	{lr}
    912e:	b083      	sub	sp, #12
    9130:	f7f7 fcce 	bl	ad0 <Sys_GetCoreID>
    9134:	4603      	mov	r3, r0
    9136:	9301      	str	r3, [sp, #4]
    9138:	4a10      	ldr	r2, [pc, #64]	; (917c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    913a:	9b01      	ldr	r3, [sp, #4]
    913c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9140:	2b00      	cmp	r3, #0
    9142:	d10d      	bne.n	9160 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    9144:	f7f7 fbeb 	bl	91e <Port_schm_read_msr>
    9148:	9000      	str	r0, [sp, #0]
    914a:	9b00      	ldr	r3, [sp, #0]
    914c:	f003 0301 	and.w	r3, r3, #1
    9150:	2b00      	cmp	r3, #0
    9152:	d100      	bne.n	9156 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
    9154:	b672      	cpsid	i
    9156:	490a      	ldr	r1, [pc, #40]	; (9180 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    9158:	9b01      	ldr	r3, [sp, #4]
    915a:	9a00      	ldr	r2, [sp, #0]
    915c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9160:	4a06      	ldr	r2, [pc, #24]	; (917c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    9162:	9b01      	ldr	r3, [sp, #4]
    9164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9168:	1c5a      	adds	r2, r3, #1
    916a:	4904      	ldr	r1, [pc, #16]	; (917c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    916c:	9b01      	ldr	r3, [sp, #4]
    916e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9172:	bf00      	nop
    9174:	b003      	add	sp, #12
    9176:	f85d fb04 	ldr.w	pc, [sp], #4
    917a:	bf00      	nop
    917c:	1fff9130 	.word	0x1fff9130
    9180:	1fff912c 	.word	0x1fff912c

00009184 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:
    9184:	b500      	push	{lr}
    9186:	b083      	sub	sp, #12
    9188:	f7f7 fca2 	bl	ad0 <Sys_GetCoreID>
    918c:	4603      	mov	r3, r0
    918e:	9301      	str	r3, [sp, #4]
    9190:	4a0d      	ldr	r2, [pc, #52]	; (91c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    9192:	9b01      	ldr	r3, [sp, #4]
    9194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9198:	1e5a      	subs	r2, r3, #1
    919a:	490b      	ldr	r1, [pc, #44]	; (91c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    919c:	9b01      	ldr	r3, [sp, #4]
    919e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    91a2:	4a0a      	ldr	r2, [pc, #40]	; (91cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    91a4:	9b01      	ldr	r3, [sp, #4]
    91a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91aa:	f003 0301 	and.w	r3, r3, #1
    91ae:	2b00      	cmp	r3, #0
    91b0:	d106      	bne.n	91c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    91b2:	4a05      	ldr	r2, [pc, #20]	; (91c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    91b4:	9b01      	ldr	r3, [sp, #4]
    91b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91ba:	2b00      	cmp	r3, #0
    91bc:	d100      	bne.n	91c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    91be:	b662      	cpsie	i
    91c0:	bf00      	nop
    91c2:	b003      	add	sp, #12
    91c4:	f85d fb04 	ldr.w	pc, [sp], #4
    91c8:	1fff9130 	.word	0x1fff9130
    91cc:	1fff912c 	.word	0x1fff912c

000091d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:
    91d0:	b500      	push	{lr}
    91d2:	b083      	sub	sp, #12
    91d4:	f7f7 fc7c 	bl	ad0 <Sys_GetCoreID>
    91d8:	4603      	mov	r3, r0
    91da:	9301      	str	r3, [sp, #4]
    91dc:	4a10      	ldr	r2, [pc, #64]	; (9220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    91de:	9b01      	ldr	r3, [sp, #4]
    91e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91e4:	2b00      	cmp	r3, #0
    91e6:	d10d      	bne.n	9204 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    91e8:	f7f7 fb99 	bl	91e <Port_schm_read_msr>
    91ec:	9000      	str	r0, [sp, #0]
    91ee:	9b00      	ldr	r3, [sp, #0]
    91f0:	f003 0301 	and.w	r3, r3, #1
    91f4:	2b00      	cmp	r3, #0
    91f6:	d100      	bne.n	91fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
    91f8:	b672      	cpsid	i
    91fa:	490a      	ldr	r1, [pc, #40]	; (9224 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    91fc:	9b01      	ldr	r3, [sp, #4]
    91fe:	9a00      	ldr	r2, [sp, #0]
    9200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9204:	4a06      	ldr	r2, [pc, #24]	; (9220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    9206:	9b01      	ldr	r3, [sp, #4]
    9208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    920c:	1c5a      	adds	r2, r3, #1
    920e:	4904      	ldr	r1, [pc, #16]	; (9220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    9210:	9b01      	ldr	r3, [sp, #4]
    9212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9216:	bf00      	nop
    9218:	b003      	add	sp, #12
    921a:	f85d fb04 	ldr.w	pc, [sp], #4
    921e:	bf00      	nop
    9220:	1fff9138 	.word	0x1fff9138
    9224:	1fff9134 	.word	0x1fff9134

00009228 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:
    9228:	b500      	push	{lr}
    922a:	b083      	sub	sp, #12
    922c:	f7f7 fc50 	bl	ad0 <Sys_GetCoreID>
    9230:	4603      	mov	r3, r0
    9232:	9301      	str	r3, [sp, #4]
    9234:	4a0d      	ldr	r2, [pc, #52]	; (926c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    9236:	9b01      	ldr	r3, [sp, #4]
    9238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    923c:	1e5a      	subs	r2, r3, #1
    923e:	490b      	ldr	r1, [pc, #44]	; (926c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    9240:	9b01      	ldr	r3, [sp, #4]
    9242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9246:	4a0a      	ldr	r2, [pc, #40]	; (9270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    9248:	9b01      	ldr	r3, [sp, #4]
    924a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    924e:	f003 0301 	and.w	r3, r3, #1
    9252:	2b00      	cmp	r3, #0
    9254:	d106      	bne.n	9264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    9256:	4a05      	ldr	r2, [pc, #20]	; (926c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    9258:	9b01      	ldr	r3, [sp, #4]
    925a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    925e:	2b00      	cmp	r3, #0
    9260:	d100      	bne.n	9264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    9262:	b662      	cpsie	i
    9264:	bf00      	nop
    9266:	b003      	add	sp, #12
    9268:	f85d fb04 	ldr.w	pc, [sp], #4
    926c:	1fff9138 	.word	0x1fff9138
    9270:	1fff9134 	.word	0x1fff9134

00009274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:
    9274:	b500      	push	{lr}
    9276:	b083      	sub	sp, #12
    9278:	f7f7 fc2a 	bl	ad0 <Sys_GetCoreID>
    927c:	4603      	mov	r3, r0
    927e:	9301      	str	r3, [sp, #4]
    9280:	4a10      	ldr	r2, [pc, #64]	; (92c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    9282:	9b01      	ldr	r3, [sp, #4]
    9284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9288:	2b00      	cmp	r3, #0
    928a:	d10d      	bne.n	92a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    928c:	f7f7 fb47 	bl	91e <Port_schm_read_msr>
    9290:	9000      	str	r0, [sp, #0]
    9292:	9b00      	ldr	r3, [sp, #0]
    9294:	f003 0301 	and.w	r3, r3, #1
    9298:	2b00      	cmp	r3, #0
    929a:	d100      	bne.n	929e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
    929c:	b672      	cpsid	i
    929e:	490a      	ldr	r1, [pc, #40]	; (92c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    92a0:	9b01      	ldr	r3, [sp, #4]
    92a2:	9a00      	ldr	r2, [sp, #0]
    92a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    92a8:	4a06      	ldr	r2, [pc, #24]	; (92c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    92aa:	9b01      	ldr	r3, [sp, #4]
    92ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92b0:	1c5a      	adds	r2, r3, #1
    92b2:	4904      	ldr	r1, [pc, #16]	; (92c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    92b4:	9b01      	ldr	r3, [sp, #4]
    92b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    92ba:	bf00      	nop
    92bc:	b003      	add	sp, #12
    92be:	f85d fb04 	ldr.w	pc, [sp], #4
    92c2:	bf00      	nop
    92c4:	1fff9140 	.word	0x1fff9140
    92c8:	1fff913c 	.word	0x1fff913c

000092cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:
    92cc:	b500      	push	{lr}
    92ce:	b083      	sub	sp, #12
    92d0:	f7f7 fbfe 	bl	ad0 <Sys_GetCoreID>
    92d4:	4603      	mov	r3, r0
    92d6:	9301      	str	r3, [sp, #4]
    92d8:	4a0d      	ldr	r2, [pc, #52]	; (9310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    92da:	9b01      	ldr	r3, [sp, #4]
    92dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92e0:	1e5a      	subs	r2, r3, #1
    92e2:	490b      	ldr	r1, [pc, #44]	; (9310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    92e4:	9b01      	ldr	r3, [sp, #4]
    92e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    92ea:	4a0a      	ldr	r2, [pc, #40]	; (9314 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    92ec:	9b01      	ldr	r3, [sp, #4]
    92ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92f2:	f003 0301 	and.w	r3, r3, #1
    92f6:	2b00      	cmp	r3, #0
    92f8:	d106      	bne.n	9308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    92fa:	4a05      	ldr	r2, [pc, #20]	; (9310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    92fc:	9b01      	ldr	r3, [sp, #4]
    92fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9302:	2b00      	cmp	r3, #0
    9304:	d100      	bne.n	9308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    9306:	b662      	cpsie	i
    9308:	bf00      	nop
    930a:	b003      	add	sp, #12
    930c:	f85d fb04 	ldr.w	pc, [sp], #4
    9310:	1fff9140 	.word	0x1fff9140
    9314:	1fff913c 	.word	0x1fff913c

00009318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:
    9318:	b500      	push	{lr}
    931a:	b083      	sub	sp, #12
    931c:	f7f7 fbd8 	bl	ad0 <Sys_GetCoreID>
    9320:	4603      	mov	r3, r0
    9322:	9301      	str	r3, [sp, #4]
    9324:	4a10      	ldr	r2, [pc, #64]	; (9368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    9326:	9b01      	ldr	r3, [sp, #4]
    9328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    932c:	2b00      	cmp	r3, #0
    932e:	d10d      	bne.n	934c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    9330:	f7f7 faf5 	bl	91e <Port_schm_read_msr>
    9334:	9000      	str	r0, [sp, #0]
    9336:	9b00      	ldr	r3, [sp, #0]
    9338:	f003 0301 	and.w	r3, r3, #1
    933c:	2b00      	cmp	r3, #0
    933e:	d100      	bne.n	9342 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
    9340:	b672      	cpsid	i
    9342:	490a      	ldr	r1, [pc, #40]	; (936c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    9344:	9b01      	ldr	r3, [sp, #4]
    9346:	9a00      	ldr	r2, [sp, #0]
    9348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    934c:	4a06      	ldr	r2, [pc, #24]	; (9368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    934e:	9b01      	ldr	r3, [sp, #4]
    9350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9354:	1c5a      	adds	r2, r3, #1
    9356:	4904      	ldr	r1, [pc, #16]	; (9368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    9358:	9b01      	ldr	r3, [sp, #4]
    935a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    935e:	bf00      	nop
    9360:	b003      	add	sp, #12
    9362:	f85d fb04 	ldr.w	pc, [sp], #4
    9366:	bf00      	nop
    9368:	1fff9148 	.word	0x1fff9148
    936c:	1fff9144 	.word	0x1fff9144

00009370 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:
    9370:	b500      	push	{lr}
    9372:	b083      	sub	sp, #12
    9374:	f7f7 fbac 	bl	ad0 <Sys_GetCoreID>
    9378:	4603      	mov	r3, r0
    937a:	9301      	str	r3, [sp, #4]
    937c:	4a0d      	ldr	r2, [pc, #52]	; (93b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    937e:	9b01      	ldr	r3, [sp, #4]
    9380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9384:	1e5a      	subs	r2, r3, #1
    9386:	490b      	ldr	r1, [pc, #44]	; (93b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    9388:	9b01      	ldr	r3, [sp, #4]
    938a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    938e:	4a0a      	ldr	r2, [pc, #40]	; (93b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    9390:	9b01      	ldr	r3, [sp, #4]
    9392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9396:	f003 0301 	and.w	r3, r3, #1
    939a:	2b00      	cmp	r3, #0
    939c:	d106      	bne.n	93ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    939e:	4a05      	ldr	r2, [pc, #20]	; (93b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    93a0:	9b01      	ldr	r3, [sp, #4]
    93a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93a6:	2b00      	cmp	r3, #0
    93a8:	d100      	bne.n	93ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    93aa:	b662      	cpsie	i
    93ac:	bf00      	nop
    93ae:	b003      	add	sp, #12
    93b0:	f85d fb04 	ldr.w	pc, [sp], #4
    93b4:	1fff9148 	.word	0x1fff9148
    93b8:	1fff9144 	.word	0x1fff9144

000093bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:
    93bc:	b500      	push	{lr}
    93be:	b083      	sub	sp, #12
    93c0:	f7f7 fb86 	bl	ad0 <Sys_GetCoreID>
    93c4:	4603      	mov	r3, r0
    93c6:	9301      	str	r3, [sp, #4]
    93c8:	4a10      	ldr	r2, [pc, #64]	; (940c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    93ca:	9b01      	ldr	r3, [sp, #4]
    93cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93d0:	2b00      	cmp	r3, #0
    93d2:	d10d      	bne.n	93f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    93d4:	f7f7 faa3 	bl	91e <Port_schm_read_msr>
    93d8:	9000      	str	r0, [sp, #0]
    93da:	9b00      	ldr	r3, [sp, #0]
    93dc:	f003 0301 	and.w	r3, r3, #1
    93e0:	2b00      	cmp	r3, #0
    93e2:	d100      	bne.n	93e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
    93e4:	b672      	cpsid	i
    93e6:	490a      	ldr	r1, [pc, #40]	; (9410 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    93e8:	9b01      	ldr	r3, [sp, #4]
    93ea:	9a00      	ldr	r2, [sp, #0]
    93ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    93f0:	4a06      	ldr	r2, [pc, #24]	; (940c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    93f2:	9b01      	ldr	r3, [sp, #4]
    93f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93f8:	1c5a      	adds	r2, r3, #1
    93fa:	4904      	ldr	r1, [pc, #16]	; (940c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    93fc:	9b01      	ldr	r3, [sp, #4]
    93fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9402:	bf00      	nop
    9404:	b003      	add	sp, #12
    9406:	f85d fb04 	ldr.w	pc, [sp], #4
    940a:	bf00      	nop
    940c:	1fff9150 	.word	0x1fff9150
    9410:	1fff914c 	.word	0x1fff914c

00009414 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:
    9414:	b500      	push	{lr}
    9416:	b083      	sub	sp, #12
    9418:	f7f7 fb5a 	bl	ad0 <Sys_GetCoreID>
    941c:	4603      	mov	r3, r0
    941e:	9301      	str	r3, [sp, #4]
    9420:	4a0d      	ldr	r2, [pc, #52]	; (9458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    9422:	9b01      	ldr	r3, [sp, #4]
    9424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9428:	1e5a      	subs	r2, r3, #1
    942a:	490b      	ldr	r1, [pc, #44]	; (9458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    942c:	9b01      	ldr	r3, [sp, #4]
    942e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9432:	4a0a      	ldr	r2, [pc, #40]	; (945c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    9434:	9b01      	ldr	r3, [sp, #4]
    9436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    943a:	f003 0301 	and.w	r3, r3, #1
    943e:	2b00      	cmp	r3, #0
    9440:	d106      	bne.n	9450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    9442:	4a05      	ldr	r2, [pc, #20]	; (9458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    9444:	9b01      	ldr	r3, [sp, #4]
    9446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    944a:	2b00      	cmp	r3, #0
    944c:	d100      	bne.n	9450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    944e:	b662      	cpsie	i
    9450:	bf00      	nop
    9452:	b003      	add	sp, #12
    9454:	f85d fb04 	ldr.w	pc, [sp], #4
    9458:	1fff9150 	.word	0x1fff9150
    945c:	1fff914c 	.word	0x1fff914c

00009460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:
    9460:	b500      	push	{lr}
    9462:	b083      	sub	sp, #12
    9464:	f7f7 fb34 	bl	ad0 <Sys_GetCoreID>
    9468:	4603      	mov	r3, r0
    946a:	9301      	str	r3, [sp, #4]
    946c:	4a10      	ldr	r2, [pc, #64]	; (94b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    946e:	9b01      	ldr	r3, [sp, #4]
    9470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9474:	2b00      	cmp	r3, #0
    9476:	d10d      	bne.n	9494 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    9478:	f7f7 fa51 	bl	91e <Port_schm_read_msr>
    947c:	9000      	str	r0, [sp, #0]
    947e:	9b00      	ldr	r3, [sp, #0]
    9480:	f003 0301 	and.w	r3, r3, #1
    9484:	2b00      	cmp	r3, #0
    9486:	d100      	bne.n	948a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
    9488:	b672      	cpsid	i
    948a:	490a      	ldr	r1, [pc, #40]	; (94b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    948c:	9b01      	ldr	r3, [sp, #4]
    948e:	9a00      	ldr	r2, [sp, #0]
    9490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9494:	4a06      	ldr	r2, [pc, #24]	; (94b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    9496:	9b01      	ldr	r3, [sp, #4]
    9498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    949c:	1c5a      	adds	r2, r3, #1
    949e:	4904      	ldr	r1, [pc, #16]	; (94b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    94a0:	9b01      	ldr	r3, [sp, #4]
    94a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    94a6:	bf00      	nop
    94a8:	b003      	add	sp, #12
    94aa:	f85d fb04 	ldr.w	pc, [sp], #4
    94ae:	bf00      	nop
    94b0:	1fff9158 	.word	0x1fff9158
    94b4:	1fff9154 	.word	0x1fff9154

000094b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:
    94b8:	b500      	push	{lr}
    94ba:	b083      	sub	sp, #12
    94bc:	f7f7 fb08 	bl	ad0 <Sys_GetCoreID>
    94c0:	4603      	mov	r3, r0
    94c2:	9301      	str	r3, [sp, #4]
    94c4:	4a0d      	ldr	r2, [pc, #52]	; (94fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    94c6:	9b01      	ldr	r3, [sp, #4]
    94c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94cc:	1e5a      	subs	r2, r3, #1
    94ce:	490b      	ldr	r1, [pc, #44]	; (94fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    94d0:	9b01      	ldr	r3, [sp, #4]
    94d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    94d6:	4a0a      	ldr	r2, [pc, #40]	; (9500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    94d8:	9b01      	ldr	r3, [sp, #4]
    94da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94de:	f003 0301 	and.w	r3, r3, #1
    94e2:	2b00      	cmp	r3, #0
    94e4:	d106      	bne.n	94f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    94e6:	4a05      	ldr	r2, [pc, #20]	; (94fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    94e8:	9b01      	ldr	r3, [sp, #4]
    94ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94ee:	2b00      	cmp	r3, #0
    94f0:	d100      	bne.n	94f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    94f2:	b662      	cpsie	i
    94f4:	bf00      	nop
    94f6:	b003      	add	sp, #12
    94f8:	f85d fb04 	ldr.w	pc, [sp], #4
    94fc:	1fff9158 	.word	0x1fff9158
    9500:	1fff9154 	.word	0x1fff9154

00009504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:
    9504:	b500      	push	{lr}
    9506:	b083      	sub	sp, #12
    9508:	f7f7 fae2 	bl	ad0 <Sys_GetCoreID>
    950c:	4603      	mov	r3, r0
    950e:	9301      	str	r3, [sp, #4]
    9510:	4a10      	ldr	r2, [pc, #64]	; (9554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    9512:	9b01      	ldr	r3, [sp, #4]
    9514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9518:	2b00      	cmp	r3, #0
    951a:	d10d      	bne.n	9538 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    951c:	f7f7 f9ff 	bl	91e <Port_schm_read_msr>
    9520:	9000      	str	r0, [sp, #0]
    9522:	9b00      	ldr	r3, [sp, #0]
    9524:	f003 0301 	and.w	r3, r3, #1
    9528:	2b00      	cmp	r3, #0
    952a:	d100      	bne.n	952e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
    952c:	b672      	cpsid	i
    952e:	490a      	ldr	r1, [pc, #40]	; (9558 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    9530:	9b01      	ldr	r3, [sp, #4]
    9532:	9a00      	ldr	r2, [sp, #0]
    9534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9538:	4a06      	ldr	r2, [pc, #24]	; (9554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    953a:	9b01      	ldr	r3, [sp, #4]
    953c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9540:	1c5a      	adds	r2, r3, #1
    9542:	4904      	ldr	r1, [pc, #16]	; (9554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    9544:	9b01      	ldr	r3, [sp, #4]
    9546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    954a:	bf00      	nop
    954c:	b003      	add	sp, #12
    954e:	f85d fb04 	ldr.w	pc, [sp], #4
    9552:	bf00      	nop
    9554:	1fff9160 	.word	0x1fff9160
    9558:	1fff915c 	.word	0x1fff915c

0000955c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:
    955c:	b500      	push	{lr}
    955e:	b083      	sub	sp, #12
    9560:	f7f7 fab6 	bl	ad0 <Sys_GetCoreID>
    9564:	4603      	mov	r3, r0
    9566:	9301      	str	r3, [sp, #4]
    9568:	4a0d      	ldr	r2, [pc, #52]	; (95a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    956a:	9b01      	ldr	r3, [sp, #4]
    956c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9570:	1e5a      	subs	r2, r3, #1
    9572:	490b      	ldr	r1, [pc, #44]	; (95a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    9574:	9b01      	ldr	r3, [sp, #4]
    9576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    957a:	4a0a      	ldr	r2, [pc, #40]	; (95a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    957c:	9b01      	ldr	r3, [sp, #4]
    957e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9582:	f003 0301 	and.w	r3, r3, #1
    9586:	2b00      	cmp	r3, #0
    9588:	d106      	bne.n	9598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    958a:	4a05      	ldr	r2, [pc, #20]	; (95a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    958c:	9b01      	ldr	r3, [sp, #4]
    958e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9592:	2b00      	cmp	r3, #0
    9594:	d100      	bne.n	9598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    9596:	b662      	cpsie	i
    9598:	bf00      	nop
    959a:	b003      	add	sp, #12
    959c:	f85d fb04 	ldr.w	pc, [sp], #4
    95a0:	1fff9160 	.word	0x1fff9160
    95a4:	1fff915c 	.word	0x1fff915c

000095a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:
    95a8:	b500      	push	{lr}
    95aa:	b083      	sub	sp, #12
    95ac:	f7f7 fa90 	bl	ad0 <Sys_GetCoreID>
    95b0:	4603      	mov	r3, r0
    95b2:	9301      	str	r3, [sp, #4]
    95b4:	4a10      	ldr	r2, [pc, #64]	; (95f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    95b6:	9b01      	ldr	r3, [sp, #4]
    95b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95bc:	2b00      	cmp	r3, #0
    95be:	d10d      	bne.n	95dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    95c0:	f7f7 f9ad 	bl	91e <Port_schm_read_msr>
    95c4:	9000      	str	r0, [sp, #0]
    95c6:	9b00      	ldr	r3, [sp, #0]
    95c8:	f003 0301 	and.w	r3, r3, #1
    95cc:	2b00      	cmp	r3, #0
    95ce:	d100      	bne.n	95d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
    95d0:	b672      	cpsid	i
    95d2:	490a      	ldr	r1, [pc, #40]	; (95fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    95d4:	9b01      	ldr	r3, [sp, #4]
    95d6:	9a00      	ldr	r2, [sp, #0]
    95d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    95dc:	4a06      	ldr	r2, [pc, #24]	; (95f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    95de:	9b01      	ldr	r3, [sp, #4]
    95e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95e4:	1c5a      	adds	r2, r3, #1
    95e6:	4904      	ldr	r1, [pc, #16]	; (95f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    95e8:	9b01      	ldr	r3, [sp, #4]
    95ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    95ee:	bf00      	nop
    95f0:	b003      	add	sp, #12
    95f2:	f85d fb04 	ldr.w	pc, [sp], #4
    95f6:	bf00      	nop
    95f8:	1fff9168 	.word	0x1fff9168
    95fc:	1fff9164 	.word	0x1fff9164

00009600 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:
    9600:	b500      	push	{lr}
    9602:	b083      	sub	sp, #12
    9604:	f7f7 fa64 	bl	ad0 <Sys_GetCoreID>
    9608:	4603      	mov	r3, r0
    960a:	9301      	str	r3, [sp, #4]
    960c:	4a0d      	ldr	r2, [pc, #52]	; (9644 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    960e:	9b01      	ldr	r3, [sp, #4]
    9610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9614:	1e5a      	subs	r2, r3, #1
    9616:	490b      	ldr	r1, [pc, #44]	; (9644 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    9618:	9b01      	ldr	r3, [sp, #4]
    961a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    961e:	4a0a      	ldr	r2, [pc, #40]	; (9648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    9620:	9b01      	ldr	r3, [sp, #4]
    9622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9626:	f003 0301 	and.w	r3, r3, #1
    962a:	2b00      	cmp	r3, #0
    962c:	d106      	bne.n	963c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    962e:	4a05      	ldr	r2, [pc, #20]	; (9644 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    9630:	9b01      	ldr	r3, [sp, #4]
    9632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9636:	2b00      	cmp	r3, #0
    9638:	d100      	bne.n	963c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    963a:	b662      	cpsie	i
    963c:	bf00      	nop
    963e:	b003      	add	sp, #12
    9640:	f85d fb04 	ldr.w	pc, [sp], #4
    9644:	1fff9168 	.word	0x1fff9168
    9648:	1fff9164 	.word	0x1fff9164

0000964c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:
    964c:	b500      	push	{lr}
    964e:	b083      	sub	sp, #12
    9650:	f7f7 fa3e 	bl	ad0 <Sys_GetCoreID>
    9654:	4603      	mov	r3, r0
    9656:	9301      	str	r3, [sp, #4]
    9658:	4a10      	ldr	r2, [pc, #64]	; (969c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    965a:	9b01      	ldr	r3, [sp, #4]
    965c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9660:	2b00      	cmp	r3, #0
    9662:	d10d      	bne.n	9680 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    9664:	f7f7 f95b 	bl	91e <Port_schm_read_msr>
    9668:	9000      	str	r0, [sp, #0]
    966a:	9b00      	ldr	r3, [sp, #0]
    966c:	f003 0301 	and.w	r3, r3, #1
    9670:	2b00      	cmp	r3, #0
    9672:	d100      	bne.n	9676 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
    9674:	b672      	cpsid	i
    9676:	490a      	ldr	r1, [pc, #40]	; (96a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    9678:	9b01      	ldr	r3, [sp, #4]
    967a:	9a00      	ldr	r2, [sp, #0]
    967c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9680:	4a06      	ldr	r2, [pc, #24]	; (969c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    9682:	9b01      	ldr	r3, [sp, #4]
    9684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9688:	1c5a      	adds	r2, r3, #1
    968a:	4904      	ldr	r1, [pc, #16]	; (969c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    968c:	9b01      	ldr	r3, [sp, #4]
    968e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9692:	bf00      	nop
    9694:	b003      	add	sp, #12
    9696:	f85d fb04 	ldr.w	pc, [sp], #4
    969a:	bf00      	nop
    969c:	1fff9170 	.word	0x1fff9170
    96a0:	1fff916c 	.word	0x1fff916c

000096a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:
    96a4:	b500      	push	{lr}
    96a6:	b083      	sub	sp, #12
    96a8:	f7f7 fa12 	bl	ad0 <Sys_GetCoreID>
    96ac:	4603      	mov	r3, r0
    96ae:	9301      	str	r3, [sp, #4]
    96b0:	4a0d      	ldr	r2, [pc, #52]	; (96e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    96b2:	9b01      	ldr	r3, [sp, #4]
    96b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96b8:	1e5a      	subs	r2, r3, #1
    96ba:	490b      	ldr	r1, [pc, #44]	; (96e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    96bc:	9b01      	ldr	r3, [sp, #4]
    96be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    96c2:	4a0a      	ldr	r2, [pc, #40]	; (96ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    96c4:	9b01      	ldr	r3, [sp, #4]
    96c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ca:	f003 0301 	and.w	r3, r3, #1
    96ce:	2b00      	cmp	r3, #0
    96d0:	d106      	bne.n	96e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    96d2:	4a05      	ldr	r2, [pc, #20]	; (96e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    96d4:	9b01      	ldr	r3, [sp, #4]
    96d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96da:	2b00      	cmp	r3, #0
    96dc:	d100      	bne.n	96e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    96de:	b662      	cpsie	i
    96e0:	bf00      	nop
    96e2:	b003      	add	sp, #12
    96e4:	f85d fb04 	ldr.w	pc, [sp], #4
    96e8:	1fff9170 	.word	0x1fff9170
    96ec:	1fff916c 	.word	0x1fff916c

000096f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:
    96f0:	b500      	push	{lr}
    96f2:	b083      	sub	sp, #12
    96f4:	f7f7 f9ec 	bl	ad0 <Sys_GetCoreID>
    96f8:	4603      	mov	r3, r0
    96fa:	9301      	str	r3, [sp, #4]
    96fc:	4a10      	ldr	r2, [pc, #64]	; (9740 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    96fe:	9b01      	ldr	r3, [sp, #4]
    9700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9704:	2b00      	cmp	r3, #0
    9706:	d10d      	bne.n	9724 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    9708:	f7f7 f909 	bl	91e <Port_schm_read_msr>
    970c:	9000      	str	r0, [sp, #0]
    970e:	9b00      	ldr	r3, [sp, #0]
    9710:	f003 0301 	and.w	r3, r3, #1
    9714:	2b00      	cmp	r3, #0
    9716:	d100      	bne.n	971a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
    9718:	b672      	cpsid	i
    971a:	490a      	ldr	r1, [pc, #40]	; (9744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    971c:	9b01      	ldr	r3, [sp, #4]
    971e:	9a00      	ldr	r2, [sp, #0]
    9720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9724:	4a06      	ldr	r2, [pc, #24]	; (9740 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    9726:	9b01      	ldr	r3, [sp, #4]
    9728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    972c:	1c5a      	adds	r2, r3, #1
    972e:	4904      	ldr	r1, [pc, #16]	; (9740 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    9730:	9b01      	ldr	r3, [sp, #4]
    9732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9736:	bf00      	nop
    9738:	b003      	add	sp, #12
    973a:	f85d fb04 	ldr.w	pc, [sp], #4
    973e:	bf00      	nop
    9740:	1fff9178 	.word	0x1fff9178
    9744:	1fff9174 	.word	0x1fff9174

00009748 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:
    9748:	b500      	push	{lr}
    974a:	b083      	sub	sp, #12
    974c:	f7f7 f9c0 	bl	ad0 <Sys_GetCoreID>
    9750:	4603      	mov	r3, r0
    9752:	9301      	str	r3, [sp, #4]
    9754:	4a0d      	ldr	r2, [pc, #52]	; (978c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9756:	9b01      	ldr	r3, [sp, #4]
    9758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    975c:	1e5a      	subs	r2, r3, #1
    975e:	490b      	ldr	r1, [pc, #44]	; (978c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9760:	9b01      	ldr	r3, [sp, #4]
    9762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9766:	4a0a      	ldr	r2, [pc, #40]	; (9790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    9768:	9b01      	ldr	r3, [sp, #4]
    976a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    976e:	f003 0301 	and.w	r3, r3, #1
    9772:	2b00      	cmp	r3, #0
    9774:	d106      	bne.n	9784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    9776:	4a05      	ldr	r2, [pc, #20]	; (978c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9778:	9b01      	ldr	r3, [sp, #4]
    977a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    977e:	2b00      	cmp	r3, #0
    9780:	d100      	bne.n	9784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    9782:	b662      	cpsie	i
    9784:	bf00      	nop
    9786:	b003      	add	sp, #12
    9788:	f85d fb04 	ldr.w	pc, [sp], #4
    978c:	1fff9178 	.word	0x1fff9178
    9790:	1fff9174 	.word	0x1fff9174

00009794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:
    9794:	b500      	push	{lr}
    9796:	b083      	sub	sp, #12
    9798:	f7f7 f99a 	bl	ad0 <Sys_GetCoreID>
    979c:	4603      	mov	r3, r0
    979e:	9301      	str	r3, [sp, #4]
    97a0:	4a10      	ldr	r2, [pc, #64]	; (97e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    97a2:	9b01      	ldr	r3, [sp, #4]
    97a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97a8:	2b00      	cmp	r3, #0
    97aa:	d10d      	bne.n	97c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    97ac:	f7f7 f8b7 	bl	91e <Port_schm_read_msr>
    97b0:	9000      	str	r0, [sp, #0]
    97b2:	9b00      	ldr	r3, [sp, #0]
    97b4:	f003 0301 	and.w	r3, r3, #1
    97b8:	2b00      	cmp	r3, #0
    97ba:	d100      	bne.n	97be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
    97bc:	b672      	cpsid	i
    97be:	490a      	ldr	r1, [pc, #40]	; (97e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    97c0:	9b01      	ldr	r3, [sp, #4]
    97c2:	9a00      	ldr	r2, [sp, #0]
    97c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    97c8:	4a06      	ldr	r2, [pc, #24]	; (97e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    97ca:	9b01      	ldr	r3, [sp, #4]
    97cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97d0:	1c5a      	adds	r2, r3, #1
    97d2:	4904      	ldr	r1, [pc, #16]	; (97e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    97d4:	9b01      	ldr	r3, [sp, #4]
    97d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    97da:	bf00      	nop
    97dc:	b003      	add	sp, #12
    97de:	f85d fb04 	ldr.w	pc, [sp], #4
    97e2:	bf00      	nop
    97e4:	1fff9180 	.word	0x1fff9180
    97e8:	1fff917c 	.word	0x1fff917c

000097ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:
    97ec:	b500      	push	{lr}
    97ee:	b083      	sub	sp, #12
    97f0:	f7f7 f96e 	bl	ad0 <Sys_GetCoreID>
    97f4:	4603      	mov	r3, r0
    97f6:	9301      	str	r3, [sp, #4]
    97f8:	4a0d      	ldr	r2, [pc, #52]	; (9830 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    97fa:	9b01      	ldr	r3, [sp, #4]
    97fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9800:	1e5a      	subs	r2, r3, #1
    9802:	490b      	ldr	r1, [pc, #44]	; (9830 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    9804:	9b01      	ldr	r3, [sp, #4]
    9806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    980a:	4a0a      	ldr	r2, [pc, #40]	; (9834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    980c:	9b01      	ldr	r3, [sp, #4]
    980e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9812:	f003 0301 	and.w	r3, r3, #1
    9816:	2b00      	cmp	r3, #0
    9818:	d106      	bne.n	9828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    981a:	4a05      	ldr	r2, [pc, #20]	; (9830 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    981c:	9b01      	ldr	r3, [sp, #4]
    981e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9822:	2b00      	cmp	r3, #0
    9824:	d100      	bne.n	9828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    9826:	b662      	cpsie	i
    9828:	bf00      	nop
    982a:	b003      	add	sp, #12
    982c:	f85d fb04 	ldr.w	pc, [sp], #4
    9830:	1fff9180 	.word	0x1fff9180
    9834:	1fff917c 	.word	0x1fff917c

00009838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:
    9838:	b500      	push	{lr}
    983a:	b083      	sub	sp, #12
    983c:	f7f7 f948 	bl	ad0 <Sys_GetCoreID>
    9840:	4603      	mov	r3, r0
    9842:	9301      	str	r3, [sp, #4]
    9844:	4a10      	ldr	r2, [pc, #64]	; (9888 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    9846:	9b01      	ldr	r3, [sp, #4]
    9848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    984c:	2b00      	cmp	r3, #0
    984e:	d10d      	bne.n	986c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    9850:	f7f7 f865 	bl	91e <Port_schm_read_msr>
    9854:	9000      	str	r0, [sp, #0]
    9856:	9b00      	ldr	r3, [sp, #0]
    9858:	f003 0301 	and.w	r3, r3, #1
    985c:	2b00      	cmp	r3, #0
    985e:	d100      	bne.n	9862 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
    9860:	b672      	cpsid	i
    9862:	490a      	ldr	r1, [pc, #40]	; (988c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    9864:	9b01      	ldr	r3, [sp, #4]
    9866:	9a00      	ldr	r2, [sp, #0]
    9868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    986c:	4a06      	ldr	r2, [pc, #24]	; (9888 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    986e:	9b01      	ldr	r3, [sp, #4]
    9870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9874:	1c5a      	adds	r2, r3, #1
    9876:	4904      	ldr	r1, [pc, #16]	; (9888 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    9878:	9b01      	ldr	r3, [sp, #4]
    987a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    987e:	bf00      	nop
    9880:	b003      	add	sp, #12
    9882:	f85d fb04 	ldr.w	pc, [sp], #4
    9886:	bf00      	nop
    9888:	1fff9188 	.word	0x1fff9188
    988c:	1fff9184 	.word	0x1fff9184

00009890 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:
    9890:	b500      	push	{lr}
    9892:	b083      	sub	sp, #12
    9894:	f7f7 f91c 	bl	ad0 <Sys_GetCoreID>
    9898:	4603      	mov	r3, r0
    989a:	9301      	str	r3, [sp, #4]
    989c:	4a0d      	ldr	r2, [pc, #52]	; (98d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    989e:	9b01      	ldr	r3, [sp, #4]
    98a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98a4:	1e5a      	subs	r2, r3, #1
    98a6:	490b      	ldr	r1, [pc, #44]	; (98d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    98a8:	9b01      	ldr	r3, [sp, #4]
    98aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    98ae:	4a0a      	ldr	r2, [pc, #40]	; (98d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    98b0:	9b01      	ldr	r3, [sp, #4]
    98b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98b6:	f003 0301 	and.w	r3, r3, #1
    98ba:	2b00      	cmp	r3, #0
    98bc:	d106      	bne.n	98cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    98be:	4a05      	ldr	r2, [pc, #20]	; (98d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    98c0:	9b01      	ldr	r3, [sp, #4]
    98c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98c6:	2b00      	cmp	r3, #0
    98c8:	d100      	bne.n	98cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    98ca:	b662      	cpsie	i
    98cc:	bf00      	nop
    98ce:	b003      	add	sp, #12
    98d0:	f85d fb04 	ldr.w	pc, [sp], #4
    98d4:	1fff9188 	.word	0x1fff9188
    98d8:	1fff9184 	.word	0x1fff9184

000098dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:
    98dc:	b500      	push	{lr}
    98de:	b083      	sub	sp, #12
    98e0:	f7f7 f8f6 	bl	ad0 <Sys_GetCoreID>
    98e4:	4603      	mov	r3, r0
    98e6:	9301      	str	r3, [sp, #4]
    98e8:	4a10      	ldr	r2, [pc, #64]	; (992c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    98ea:	9b01      	ldr	r3, [sp, #4]
    98ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98f0:	2b00      	cmp	r3, #0
    98f2:	d10d      	bne.n	9910 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    98f4:	f7f7 f813 	bl	91e <Port_schm_read_msr>
    98f8:	9000      	str	r0, [sp, #0]
    98fa:	9b00      	ldr	r3, [sp, #0]
    98fc:	f003 0301 	and.w	r3, r3, #1
    9900:	2b00      	cmp	r3, #0
    9902:	d100      	bne.n	9906 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
    9904:	b672      	cpsid	i
    9906:	490a      	ldr	r1, [pc, #40]	; (9930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    9908:	9b01      	ldr	r3, [sp, #4]
    990a:	9a00      	ldr	r2, [sp, #0]
    990c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9910:	4a06      	ldr	r2, [pc, #24]	; (992c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    9912:	9b01      	ldr	r3, [sp, #4]
    9914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9918:	1c5a      	adds	r2, r3, #1
    991a:	4904      	ldr	r1, [pc, #16]	; (992c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    991c:	9b01      	ldr	r3, [sp, #4]
    991e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9922:	bf00      	nop
    9924:	b003      	add	sp, #12
    9926:	f85d fb04 	ldr.w	pc, [sp], #4
    992a:	bf00      	nop
    992c:	1fff9190 	.word	0x1fff9190
    9930:	1fff918c 	.word	0x1fff918c

00009934 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:
    9934:	b500      	push	{lr}
    9936:	b083      	sub	sp, #12
    9938:	f7f7 f8ca 	bl	ad0 <Sys_GetCoreID>
    993c:	4603      	mov	r3, r0
    993e:	9301      	str	r3, [sp, #4]
    9940:	4a0d      	ldr	r2, [pc, #52]	; (9978 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    9942:	9b01      	ldr	r3, [sp, #4]
    9944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9948:	1e5a      	subs	r2, r3, #1
    994a:	490b      	ldr	r1, [pc, #44]	; (9978 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    994c:	9b01      	ldr	r3, [sp, #4]
    994e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9952:	4a0a      	ldr	r2, [pc, #40]	; (997c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    9954:	9b01      	ldr	r3, [sp, #4]
    9956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    995a:	f003 0301 	and.w	r3, r3, #1
    995e:	2b00      	cmp	r3, #0
    9960:	d106      	bne.n	9970 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    9962:	4a05      	ldr	r2, [pc, #20]	; (9978 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    9964:	9b01      	ldr	r3, [sp, #4]
    9966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    996a:	2b00      	cmp	r3, #0
    996c:	d100      	bne.n	9970 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    996e:	b662      	cpsie	i
    9970:	bf00      	nop
    9972:	b003      	add	sp, #12
    9974:	f85d fb04 	ldr.w	pc, [sp], #4
    9978:	1fff9190 	.word	0x1fff9190
    997c:	1fff918c 	.word	0x1fff918c

00009980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:
    9980:	b500      	push	{lr}
    9982:	b083      	sub	sp, #12
    9984:	f7f7 f8a4 	bl	ad0 <Sys_GetCoreID>
    9988:	4603      	mov	r3, r0
    998a:	9301      	str	r3, [sp, #4]
    998c:	4a10      	ldr	r2, [pc, #64]	; (99d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    998e:	9b01      	ldr	r3, [sp, #4]
    9990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9994:	2b00      	cmp	r3, #0
    9996:	d10d      	bne.n	99b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    9998:	f7f6 ffc1 	bl	91e <Port_schm_read_msr>
    999c:	9000      	str	r0, [sp, #0]
    999e:	9b00      	ldr	r3, [sp, #0]
    99a0:	f003 0301 	and.w	r3, r3, #1
    99a4:	2b00      	cmp	r3, #0
    99a6:	d100      	bne.n	99aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
    99a8:	b672      	cpsid	i
    99aa:	490a      	ldr	r1, [pc, #40]	; (99d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    99ac:	9b01      	ldr	r3, [sp, #4]
    99ae:	9a00      	ldr	r2, [sp, #0]
    99b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    99b4:	4a06      	ldr	r2, [pc, #24]	; (99d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    99b6:	9b01      	ldr	r3, [sp, #4]
    99b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99bc:	1c5a      	adds	r2, r3, #1
    99be:	4904      	ldr	r1, [pc, #16]	; (99d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    99c0:	9b01      	ldr	r3, [sp, #4]
    99c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    99c6:	bf00      	nop
    99c8:	b003      	add	sp, #12
    99ca:	f85d fb04 	ldr.w	pc, [sp], #4
    99ce:	bf00      	nop
    99d0:	1fff9198 	.word	0x1fff9198
    99d4:	1fff9194 	.word	0x1fff9194

000099d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:
    99d8:	b500      	push	{lr}
    99da:	b083      	sub	sp, #12
    99dc:	f7f7 f878 	bl	ad0 <Sys_GetCoreID>
    99e0:	4603      	mov	r3, r0
    99e2:	9301      	str	r3, [sp, #4]
    99e4:	4a0d      	ldr	r2, [pc, #52]	; (9a1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    99e6:	9b01      	ldr	r3, [sp, #4]
    99e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ec:	1e5a      	subs	r2, r3, #1
    99ee:	490b      	ldr	r1, [pc, #44]	; (9a1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    99f0:	9b01      	ldr	r3, [sp, #4]
    99f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    99f6:	4a0a      	ldr	r2, [pc, #40]	; (9a20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    99f8:	9b01      	ldr	r3, [sp, #4]
    99fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99fe:	f003 0301 	and.w	r3, r3, #1
    9a02:	2b00      	cmp	r3, #0
    9a04:	d106      	bne.n	9a14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    9a06:	4a05      	ldr	r2, [pc, #20]	; (9a1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    9a08:	9b01      	ldr	r3, [sp, #4]
    9a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a0e:	2b00      	cmp	r3, #0
    9a10:	d100      	bne.n	9a14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    9a12:	b662      	cpsie	i
    9a14:	bf00      	nop
    9a16:	b003      	add	sp, #12
    9a18:	f85d fb04 	ldr.w	pc, [sp], #4
    9a1c:	1fff9198 	.word	0x1fff9198
    9a20:	1fff9194 	.word	0x1fff9194

00009a24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:
    9a24:	b500      	push	{lr}
    9a26:	b083      	sub	sp, #12
    9a28:	f7f7 f852 	bl	ad0 <Sys_GetCoreID>
    9a2c:	4603      	mov	r3, r0
    9a2e:	9301      	str	r3, [sp, #4]
    9a30:	4a10      	ldr	r2, [pc, #64]	; (9a74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9a32:	9b01      	ldr	r3, [sp, #4]
    9a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a38:	2b00      	cmp	r3, #0
    9a3a:	d10d      	bne.n	9a58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    9a3c:	f7f6 ff6f 	bl	91e <Port_schm_read_msr>
    9a40:	9000      	str	r0, [sp, #0]
    9a42:	9b00      	ldr	r3, [sp, #0]
    9a44:	f003 0301 	and.w	r3, r3, #1
    9a48:	2b00      	cmp	r3, #0
    9a4a:	d100      	bne.n	9a4e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
    9a4c:	b672      	cpsid	i
    9a4e:	490a      	ldr	r1, [pc, #40]	; (9a78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    9a50:	9b01      	ldr	r3, [sp, #4]
    9a52:	9a00      	ldr	r2, [sp, #0]
    9a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9a58:	4a06      	ldr	r2, [pc, #24]	; (9a74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9a5a:	9b01      	ldr	r3, [sp, #4]
    9a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a60:	1c5a      	adds	r2, r3, #1
    9a62:	4904      	ldr	r1, [pc, #16]	; (9a74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9a64:	9b01      	ldr	r3, [sp, #4]
    9a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9a6a:	bf00      	nop
    9a6c:	b003      	add	sp, #12
    9a6e:	f85d fb04 	ldr.w	pc, [sp], #4
    9a72:	bf00      	nop
    9a74:	1fff91a0 	.word	0x1fff91a0
    9a78:	1fff919c 	.word	0x1fff919c

00009a7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:
    9a7c:	b500      	push	{lr}
    9a7e:	b083      	sub	sp, #12
    9a80:	f7f7 f826 	bl	ad0 <Sys_GetCoreID>
    9a84:	4603      	mov	r3, r0
    9a86:	9301      	str	r3, [sp, #4]
    9a88:	4a0d      	ldr	r2, [pc, #52]	; (9ac0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9a8a:	9b01      	ldr	r3, [sp, #4]
    9a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a90:	1e5a      	subs	r2, r3, #1
    9a92:	490b      	ldr	r1, [pc, #44]	; (9ac0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9a94:	9b01      	ldr	r3, [sp, #4]
    9a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9a9a:	4a0a      	ldr	r2, [pc, #40]	; (9ac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    9a9c:	9b01      	ldr	r3, [sp, #4]
    9a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aa2:	f003 0301 	and.w	r3, r3, #1
    9aa6:	2b00      	cmp	r3, #0
    9aa8:	d106      	bne.n	9ab8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    9aaa:	4a05      	ldr	r2, [pc, #20]	; (9ac0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9aac:	9b01      	ldr	r3, [sp, #4]
    9aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ab2:	2b00      	cmp	r3, #0
    9ab4:	d100      	bne.n	9ab8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    9ab6:	b662      	cpsie	i
    9ab8:	bf00      	nop
    9aba:	b003      	add	sp, #12
    9abc:	f85d fb04 	ldr.w	pc, [sp], #4
    9ac0:	1fff91a0 	.word	0x1fff91a0
    9ac4:	1fff919c 	.word	0x1fff919c

00009ac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:
    9ac8:	b500      	push	{lr}
    9aca:	b083      	sub	sp, #12
    9acc:	f7f7 f800 	bl	ad0 <Sys_GetCoreID>
    9ad0:	4603      	mov	r3, r0
    9ad2:	9301      	str	r3, [sp, #4]
    9ad4:	4a10      	ldr	r2, [pc, #64]	; (9b18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9ad6:	9b01      	ldr	r3, [sp, #4]
    9ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9adc:	2b00      	cmp	r3, #0
    9ade:	d10d      	bne.n	9afc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    9ae0:	f7f6 ff1d 	bl	91e <Port_schm_read_msr>
    9ae4:	9000      	str	r0, [sp, #0]
    9ae6:	9b00      	ldr	r3, [sp, #0]
    9ae8:	f003 0301 	and.w	r3, r3, #1
    9aec:	2b00      	cmp	r3, #0
    9aee:	d100      	bne.n	9af2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
    9af0:	b672      	cpsid	i
    9af2:	490a      	ldr	r1, [pc, #40]	; (9b1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    9af4:	9b01      	ldr	r3, [sp, #4]
    9af6:	9a00      	ldr	r2, [sp, #0]
    9af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9afc:	4a06      	ldr	r2, [pc, #24]	; (9b18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9afe:	9b01      	ldr	r3, [sp, #4]
    9b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b04:	1c5a      	adds	r2, r3, #1
    9b06:	4904      	ldr	r1, [pc, #16]	; (9b18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9b08:	9b01      	ldr	r3, [sp, #4]
    9b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9b0e:	bf00      	nop
    9b10:	b003      	add	sp, #12
    9b12:	f85d fb04 	ldr.w	pc, [sp], #4
    9b16:	bf00      	nop
    9b18:	1fff91a8 	.word	0x1fff91a8
    9b1c:	1fff91a4 	.word	0x1fff91a4

00009b20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:
    9b20:	b500      	push	{lr}
    9b22:	b083      	sub	sp, #12
    9b24:	f7f6 ffd4 	bl	ad0 <Sys_GetCoreID>
    9b28:	4603      	mov	r3, r0
    9b2a:	9301      	str	r3, [sp, #4]
    9b2c:	4a0d      	ldr	r2, [pc, #52]	; (9b64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9b2e:	9b01      	ldr	r3, [sp, #4]
    9b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b34:	1e5a      	subs	r2, r3, #1
    9b36:	490b      	ldr	r1, [pc, #44]	; (9b64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9b38:	9b01      	ldr	r3, [sp, #4]
    9b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9b3e:	4a0a      	ldr	r2, [pc, #40]	; (9b68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    9b40:	9b01      	ldr	r3, [sp, #4]
    9b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b46:	f003 0301 	and.w	r3, r3, #1
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	d106      	bne.n	9b5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    9b4e:	4a05      	ldr	r2, [pc, #20]	; (9b64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9b50:	9b01      	ldr	r3, [sp, #4]
    9b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b56:	2b00      	cmp	r3, #0
    9b58:	d100      	bne.n	9b5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    9b5a:	b662      	cpsie	i
    9b5c:	bf00      	nop
    9b5e:	b003      	add	sp, #12
    9b60:	f85d fb04 	ldr.w	pc, [sp], #4
    9b64:	1fff91a8 	.word	0x1fff91a8
    9b68:	1fff91a4 	.word	0x1fff91a4

00009b6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:
    9b6c:	b500      	push	{lr}
    9b6e:	b083      	sub	sp, #12
    9b70:	f7f6 ffae 	bl	ad0 <Sys_GetCoreID>
    9b74:	4603      	mov	r3, r0
    9b76:	9301      	str	r3, [sp, #4]
    9b78:	4a10      	ldr	r2, [pc, #64]	; (9bbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9b7a:	9b01      	ldr	r3, [sp, #4]
    9b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b80:	2b00      	cmp	r3, #0
    9b82:	d10d      	bne.n	9ba0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    9b84:	f7f6 fecb 	bl	91e <Port_schm_read_msr>
    9b88:	9000      	str	r0, [sp, #0]
    9b8a:	9b00      	ldr	r3, [sp, #0]
    9b8c:	f003 0301 	and.w	r3, r3, #1
    9b90:	2b00      	cmp	r3, #0
    9b92:	d100      	bne.n	9b96 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
    9b94:	b672      	cpsid	i
    9b96:	490a      	ldr	r1, [pc, #40]	; (9bc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    9b98:	9b01      	ldr	r3, [sp, #4]
    9b9a:	9a00      	ldr	r2, [sp, #0]
    9b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9ba0:	4a06      	ldr	r2, [pc, #24]	; (9bbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9ba2:	9b01      	ldr	r3, [sp, #4]
    9ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ba8:	1c5a      	adds	r2, r3, #1
    9baa:	4904      	ldr	r1, [pc, #16]	; (9bbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9bac:	9b01      	ldr	r3, [sp, #4]
    9bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9bb2:	bf00      	nop
    9bb4:	b003      	add	sp, #12
    9bb6:	f85d fb04 	ldr.w	pc, [sp], #4
    9bba:	bf00      	nop
    9bbc:	1fff91b0 	.word	0x1fff91b0
    9bc0:	1fff91ac 	.word	0x1fff91ac

00009bc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:
    9bc4:	b500      	push	{lr}
    9bc6:	b083      	sub	sp, #12
    9bc8:	f7f6 ff82 	bl	ad0 <Sys_GetCoreID>
    9bcc:	4603      	mov	r3, r0
    9bce:	9301      	str	r3, [sp, #4]
    9bd0:	4a0d      	ldr	r2, [pc, #52]	; (9c08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    9bd2:	9b01      	ldr	r3, [sp, #4]
    9bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bd8:	1e5a      	subs	r2, r3, #1
    9bda:	490b      	ldr	r1, [pc, #44]	; (9c08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    9bdc:	9b01      	ldr	r3, [sp, #4]
    9bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9be2:	4a0a      	ldr	r2, [pc, #40]	; (9c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    9be4:	9b01      	ldr	r3, [sp, #4]
    9be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bea:	f003 0301 	and.w	r3, r3, #1
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d106      	bne.n	9c00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    9bf2:	4a05      	ldr	r2, [pc, #20]	; (9c08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    9bf4:	9b01      	ldr	r3, [sp, #4]
    9bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bfa:	2b00      	cmp	r3, #0
    9bfc:	d100      	bne.n	9c00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    9bfe:	b662      	cpsie	i
    9c00:	bf00      	nop
    9c02:	b003      	add	sp, #12
    9c04:	f85d fb04 	ldr.w	pc, [sp], #4
    9c08:	1fff91b0 	.word	0x1fff91b0
    9c0c:	1fff91ac 	.word	0x1fff91ac

00009c10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:
    9c10:	b500      	push	{lr}
    9c12:	b083      	sub	sp, #12
    9c14:	f7f6 ff5c 	bl	ad0 <Sys_GetCoreID>
    9c18:	4603      	mov	r3, r0
    9c1a:	9301      	str	r3, [sp, #4]
    9c1c:	4a10      	ldr	r2, [pc, #64]	; (9c60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9c1e:	9b01      	ldr	r3, [sp, #4]
    9c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c24:	2b00      	cmp	r3, #0
    9c26:	d10d      	bne.n	9c44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    9c28:	f7f6 fe79 	bl	91e <Port_schm_read_msr>
    9c2c:	9000      	str	r0, [sp, #0]
    9c2e:	9b00      	ldr	r3, [sp, #0]
    9c30:	f003 0301 	and.w	r3, r3, #1
    9c34:	2b00      	cmp	r3, #0
    9c36:	d100      	bne.n	9c3a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
    9c38:	b672      	cpsid	i
    9c3a:	490a      	ldr	r1, [pc, #40]	; (9c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    9c3c:	9b01      	ldr	r3, [sp, #4]
    9c3e:	9a00      	ldr	r2, [sp, #0]
    9c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9c44:	4a06      	ldr	r2, [pc, #24]	; (9c60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9c46:	9b01      	ldr	r3, [sp, #4]
    9c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c4c:	1c5a      	adds	r2, r3, #1
    9c4e:	4904      	ldr	r1, [pc, #16]	; (9c60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9c50:	9b01      	ldr	r3, [sp, #4]
    9c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9c56:	bf00      	nop
    9c58:	b003      	add	sp, #12
    9c5a:	f85d fb04 	ldr.w	pc, [sp], #4
    9c5e:	bf00      	nop
    9c60:	1fff91b8 	.word	0x1fff91b8
    9c64:	1fff91b4 	.word	0x1fff91b4

00009c68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:
    9c68:	b500      	push	{lr}
    9c6a:	b083      	sub	sp, #12
    9c6c:	f7f6 ff30 	bl	ad0 <Sys_GetCoreID>
    9c70:	4603      	mov	r3, r0
    9c72:	9301      	str	r3, [sp, #4]
    9c74:	4a0d      	ldr	r2, [pc, #52]	; (9cac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9c76:	9b01      	ldr	r3, [sp, #4]
    9c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c7c:	1e5a      	subs	r2, r3, #1
    9c7e:	490b      	ldr	r1, [pc, #44]	; (9cac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9c80:	9b01      	ldr	r3, [sp, #4]
    9c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9c86:	4a0a      	ldr	r2, [pc, #40]	; (9cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    9c88:	9b01      	ldr	r3, [sp, #4]
    9c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c8e:	f003 0301 	and.w	r3, r3, #1
    9c92:	2b00      	cmp	r3, #0
    9c94:	d106      	bne.n	9ca4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    9c96:	4a05      	ldr	r2, [pc, #20]	; (9cac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9c98:	9b01      	ldr	r3, [sp, #4]
    9c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c9e:	2b00      	cmp	r3, #0
    9ca0:	d100      	bne.n	9ca4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    9ca2:	b662      	cpsie	i
    9ca4:	bf00      	nop
    9ca6:	b003      	add	sp, #12
    9ca8:	f85d fb04 	ldr.w	pc, [sp], #4
    9cac:	1fff91b8 	.word	0x1fff91b8
    9cb0:	1fff91b4 	.word	0x1fff91b4

00009cb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:
    9cb4:	b500      	push	{lr}
    9cb6:	b083      	sub	sp, #12
    9cb8:	f7f6 ff0a 	bl	ad0 <Sys_GetCoreID>
    9cbc:	4603      	mov	r3, r0
    9cbe:	9301      	str	r3, [sp, #4]
    9cc0:	4a10      	ldr	r2, [pc, #64]	; (9d04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    9cc2:	9b01      	ldr	r3, [sp, #4]
    9cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cc8:	2b00      	cmp	r3, #0
    9cca:	d10d      	bne.n	9ce8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    9ccc:	f7f6 fe27 	bl	91e <Port_schm_read_msr>
    9cd0:	9000      	str	r0, [sp, #0]
    9cd2:	9b00      	ldr	r3, [sp, #0]
    9cd4:	f003 0301 	and.w	r3, r3, #1
    9cd8:	2b00      	cmp	r3, #0
    9cda:	d100      	bne.n	9cde <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
    9cdc:	b672      	cpsid	i
    9cde:	490a      	ldr	r1, [pc, #40]	; (9d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    9ce0:	9b01      	ldr	r3, [sp, #4]
    9ce2:	9a00      	ldr	r2, [sp, #0]
    9ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9ce8:	4a06      	ldr	r2, [pc, #24]	; (9d04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    9cea:	9b01      	ldr	r3, [sp, #4]
    9cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cf0:	1c5a      	adds	r2, r3, #1
    9cf2:	4904      	ldr	r1, [pc, #16]	; (9d04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    9cf4:	9b01      	ldr	r3, [sp, #4]
    9cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9cfa:	bf00      	nop
    9cfc:	b003      	add	sp, #12
    9cfe:	f85d fb04 	ldr.w	pc, [sp], #4
    9d02:	bf00      	nop
    9d04:	1fff91c0 	.word	0x1fff91c0
    9d08:	1fff91bc 	.word	0x1fff91bc

00009d0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:
    9d0c:	b500      	push	{lr}
    9d0e:	b083      	sub	sp, #12
    9d10:	f7f6 fede 	bl	ad0 <Sys_GetCoreID>
    9d14:	4603      	mov	r3, r0
    9d16:	9301      	str	r3, [sp, #4]
    9d18:	4a0d      	ldr	r2, [pc, #52]	; (9d50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9d1a:	9b01      	ldr	r3, [sp, #4]
    9d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d20:	1e5a      	subs	r2, r3, #1
    9d22:	490b      	ldr	r1, [pc, #44]	; (9d50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9d24:	9b01      	ldr	r3, [sp, #4]
    9d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9d2a:	4a0a      	ldr	r2, [pc, #40]	; (9d54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    9d2c:	9b01      	ldr	r3, [sp, #4]
    9d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d32:	f003 0301 	and.w	r3, r3, #1
    9d36:	2b00      	cmp	r3, #0
    9d38:	d106      	bne.n	9d48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    9d3a:	4a05      	ldr	r2, [pc, #20]	; (9d50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9d3c:	9b01      	ldr	r3, [sp, #4]
    9d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d42:	2b00      	cmp	r3, #0
    9d44:	d100      	bne.n	9d48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    9d46:	b662      	cpsie	i
    9d48:	bf00      	nop
    9d4a:	b003      	add	sp, #12
    9d4c:	f85d fb04 	ldr.w	pc, [sp], #4
    9d50:	1fff91c0 	.word	0x1fff91c0
    9d54:	1fff91bc 	.word	0x1fff91bc

00009d58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:
    9d58:	b500      	push	{lr}
    9d5a:	b083      	sub	sp, #12
    9d5c:	f7f6 feb8 	bl	ad0 <Sys_GetCoreID>
    9d60:	4603      	mov	r3, r0
    9d62:	9301      	str	r3, [sp, #4]
    9d64:	4a10      	ldr	r2, [pc, #64]	; (9da8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9d66:	9b01      	ldr	r3, [sp, #4]
    9d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d6c:	2b00      	cmp	r3, #0
    9d6e:	d10d      	bne.n	9d8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    9d70:	f7f6 fdd5 	bl	91e <Port_schm_read_msr>
    9d74:	9000      	str	r0, [sp, #0]
    9d76:	9b00      	ldr	r3, [sp, #0]
    9d78:	f003 0301 	and.w	r3, r3, #1
    9d7c:	2b00      	cmp	r3, #0
    9d7e:	d100      	bne.n	9d82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
    9d80:	b672      	cpsid	i
    9d82:	490a      	ldr	r1, [pc, #40]	; (9dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    9d84:	9b01      	ldr	r3, [sp, #4]
    9d86:	9a00      	ldr	r2, [sp, #0]
    9d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9d8c:	4a06      	ldr	r2, [pc, #24]	; (9da8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9d8e:	9b01      	ldr	r3, [sp, #4]
    9d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d94:	1c5a      	adds	r2, r3, #1
    9d96:	4904      	ldr	r1, [pc, #16]	; (9da8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9d98:	9b01      	ldr	r3, [sp, #4]
    9d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9d9e:	bf00      	nop
    9da0:	b003      	add	sp, #12
    9da2:	f85d fb04 	ldr.w	pc, [sp], #4
    9da6:	bf00      	nop
    9da8:	1fff91c8 	.word	0x1fff91c8
    9dac:	1fff91c4 	.word	0x1fff91c4

00009db0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:
    9db0:	b500      	push	{lr}
    9db2:	b083      	sub	sp, #12
    9db4:	f7f6 fe8c 	bl	ad0 <Sys_GetCoreID>
    9db8:	4603      	mov	r3, r0
    9dba:	9301      	str	r3, [sp, #4]
    9dbc:	4a0d      	ldr	r2, [pc, #52]	; (9df4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9dbe:	9b01      	ldr	r3, [sp, #4]
    9dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dc4:	1e5a      	subs	r2, r3, #1
    9dc6:	490b      	ldr	r1, [pc, #44]	; (9df4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9dc8:	9b01      	ldr	r3, [sp, #4]
    9dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9dce:	4a0a      	ldr	r2, [pc, #40]	; (9df8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    9dd0:	9b01      	ldr	r3, [sp, #4]
    9dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dd6:	f003 0301 	and.w	r3, r3, #1
    9dda:	2b00      	cmp	r3, #0
    9ddc:	d106      	bne.n	9dec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    9dde:	4a05      	ldr	r2, [pc, #20]	; (9df4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9de0:	9b01      	ldr	r3, [sp, #4]
    9de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9de6:	2b00      	cmp	r3, #0
    9de8:	d100      	bne.n	9dec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    9dea:	b662      	cpsie	i
    9dec:	bf00      	nop
    9dee:	b003      	add	sp, #12
    9df0:	f85d fb04 	ldr.w	pc, [sp], #4
    9df4:	1fff91c8 	.word	0x1fff91c8
    9df8:	1fff91c4 	.word	0x1fff91c4

00009dfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:
    9dfc:	b500      	push	{lr}
    9dfe:	b083      	sub	sp, #12
    9e00:	f7f6 fe66 	bl	ad0 <Sys_GetCoreID>
    9e04:	4603      	mov	r3, r0
    9e06:	9301      	str	r3, [sp, #4]
    9e08:	4a10      	ldr	r2, [pc, #64]	; (9e4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9e0a:	9b01      	ldr	r3, [sp, #4]
    9e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e10:	2b00      	cmp	r3, #0
    9e12:	d10d      	bne.n	9e30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    9e14:	f7f6 fd83 	bl	91e <Port_schm_read_msr>
    9e18:	9000      	str	r0, [sp, #0]
    9e1a:	9b00      	ldr	r3, [sp, #0]
    9e1c:	f003 0301 	and.w	r3, r3, #1
    9e20:	2b00      	cmp	r3, #0
    9e22:	d100      	bne.n	9e26 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
    9e24:	b672      	cpsid	i
    9e26:	490a      	ldr	r1, [pc, #40]	; (9e50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    9e28:	9b01      	ldr	r3, [sp, #4]
    9e2a:	9a00      	ldr	r2, [sp, #0]
    9e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9e30:	4a06      	ldr	r2, [pc, #24]	; (9e4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9e32:	9b01      	ldr	r3, [sp, #4]
    9e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e38:	1c5a      	adds	r2, r3, #1
    9e3a:	4904      	ldr	r1, [pc, #16]	; (9e4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9e3c:	9b01      	ldr	r3, [sp, #4]
    9e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9e42:	bf00      	nop
    9e44:	b003      	add	sp, #12
    9e46:	f85d fb04 	ldr.w	pc, [sp], #4
    9e4a:	bf00      	nop
    9e4c:	1fff91d0 	.word	0x1fff91d0
    9e50:	1fff91cc 	.word	0x1fff91cc

00009e54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:
    9e54:	b500      	push	{lr}
    9e56:	b083      	sub	sp, #12
    9e58:	f7f6 fe3a 	bl	ad0 <Sys_GetCoreID>
    9e5c:	4603      	mov	r3, r0
    9e5e:	9301      	str	r3, [sp, #4]
    9e60:	4a0d      	ldr	r2, [pc, #52]	; (9e98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9e62:	9b01      	ldr	r3, [sp, #4]
    9e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e68:	1e5a      	subs	r2, r3, #1
    9e6a:	490b      	ldr	r1, [pc, #44]	; (9e98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9e6c:	9b01      	ldr	r3, [sp, #4]
    9e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9e72:	4a0a      	ldr	r2, [pc, #40]	; (9e9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    9e74:	9b01      	ldr	r3, [sp, #4]
    9e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e7a:	f003 0301 	and.w	r3, r3, #1
    9e7e:	2b00      	cmp	r3, #0
    9e80:	d106      	bne.n	9e90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    9e82:	4a05      	ldr	r2, [pc, #20]	; (9e98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9e84:	9b01      	ldr	r3, [sp, #4]
    9e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e8a:	2b00      	cmp	r3, #0
    9e8c:	d100      	bne.n	9e90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    9e8e:	b662      	cpsie	i
    9e90:	bf00      	nop
    9e92:	b003      	add	sp, #12
    9e94:	f85d fb04 	ldr.w	pc, [sp], #4
    9e98:	1fff91d0 	.word	0x1fff91d0
    9e9c:	1fff91cc 	.word	0x1fff91cc

00009ea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:
    9ea0:	b500      	push	{lr}
    9ea2:	b083      	sub	sp, #12
    9ea4:	f7f6 fe14 	bl	ad0 <Sys_GetCoreID>
    9ea8:	4603      	mov	r3, r0
    9eaa:	9301      	str	r3, [sp, #4]
    9eac:	4a10      	ldr	r2, [pc, #64]	; (9ef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9eae:	9b01      	ldr	r3, [sp, #4]
    9eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eb4:	2b00      	cmp	r3, #0
    9eb6:	d10d      	bne.n	9ed4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    9eb8:	f7f6 fd31 	bl	91e <Port_schm_read_msr>
    9ebc:	9000      	str	r0, [sp, #0]
    9ebe:	9b00      	ldr	r3, [sp, #0]
    9ec0:	f003 0301 	and.w	r3, r3, #1
    9ec4:	2b00      	cmp	r3, #0
    9ec6:	d100      	bne.n	9eca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
    9ec8:	b672      	cpsid	i
    9eca:	490a      	ldr	r1, [pc, #40]	; (9ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    9ecc:	9b01      	ldr	r3, [sp, #4]
    9ece:	9a00      	ldr	r2, [sp, #0]
    9ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9ed4:	4a06      	ldr	r2, [pc, #24]	; (9ef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9ed6:	9b01      	ldr	r3, [sp, #4]
    9ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9edc:	1c5a      	adds	r2, r3, #1
    9ede:	4904      	ldr	r1, [pc, #16]	; (9ef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9ee0:	9b01      	ldr	r3, [sp, #4]
    9ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9ee6:	bf00      	nop
    9ee8:	b003      	add	sp, #12
    9eea:	f85d fb04 	ldr.w	pc, [sp], #4
    9eee:	bf00      	nop
    9ef0:	1fff91d8 	.word	0x1fff91d8
    9ef4:	1fff91d4 	.word	0x1fff91d4

00009ef8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:
    9ef8:	b500      	push	{lr}
    9efa:	b083      	sub	sp, #12
    9efc:	f7f6 fde8 	bl	ad0 <Sys_GetCoreID>
    9f00:	4603      	mov	r3, r0
    9f02:	9301      	str	r3, [sp, #4]
    9f04:	4a0d      	ldr	r2, [pc, #52]	; (9f3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9f06:	9b01      	ldr	r3, [sp, #4]
    9f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f0c:	1e5a      	subs	r2, r3, #1
    9f0e:	490b      	ldr	r1, [pc, #44]	; (9f3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9f10:	9b01      	ldr	r3, [sp, #4]
    9f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9f16:	4a0a      	ldr	r2, [pc, #40]	; (9f40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    9f18:	9b01      	ldr	r3, [sp, #4]
    9f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f1e:	f003 0301 	and.w	r3, r3, #1
    9f22:	2b00      	cmp	r3, #0
    9f24:	d106      	bne.n	9f34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    9f26:	4a05      	ldr	r2, [pc, #20]	; (9f3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9f28:	9b01      	ldr	r3, [sp, #4]
    9f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f2e:	2b00      	cmp	r3, #0
    9f30:	d100      	bne.n	9f34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    9f32:	b662      	cpsie	i
    9f34:	bf00      	nop
    9f36:	b003      	add	sp, #12
    9f38:	f85d fb04 	ldr.w	pc, [sp], #4
    9f3c:	1fff91d8 	.word	0x1fff91d8
    9f40:	1fff91d4 	.word	0x1fff91d4

00009f44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
    9f44:	b500      	push	{lr}
    9f46:	b083      	sub	sp, #12
    9f48:	f7f6 fdc2 	bl	ad0 <Sys_GetCoreID>
    9f4c:	4603      	mov	r3, r0
    9f4e:	9301      	str	r3, [sp, #4]
    9f50:	4a10      	ldr	r2, [pc, #64]	; (9f94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
    9f52:	9b01      	ldr	r3, [sp, #4]
    9f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f58:	2b00      	cmp	r3, #0
    9f5a:	d10d      	bne.n	9f78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    9f5c:	f7f6 fce8 	bl	930 <Pwm_schm_read_msr>
    9f60:	9000      	str	r0, [sp, #0]
    9f62:	9b00      	ldr	r3, [sp, #0]
    9f64:	f003 0301 	and.w	r3, r3, #1
    9f68:	2b00      	cmp	r3, #0
    9f6a:	d100      	bne.n	9f6e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
    9f6c:	b672      	cpsid	i
    9f6e:	490a      	ldr	r1, [pc, #40]	; (9f98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
    9f70:	9b01      	ldr	r3, [sp, #4]
    9f72:	9a00      	ldr	r2, [sp, #0]
    9f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9f78:	4a06      	ldr	r2, [pc, #24]	; (9f94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
    9f7a:	9b01      	ldr	r3, [sp, #4]
    9f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f80:	1c5a      	adds	r2, r3, #1
    9f82:	4904      	ldr	r1, [pc, #16]	; (9f94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
    9f84:	9b01      	ldr	r3, [sp, #4]
    9f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9f8a:	bf00      	nop
    9f8c:	b003      	add	sp, #12
    9f8e:	f85d fb04 	ldr.w	pc, [sp], #4
    9f92:	bf00      	nop
    9f94:	1fff91e0 	.word	0x1fff91e0
    9f98:	1fff91dc 	.word	0x1fff91dc

00009f9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:
    9f9c:	b500      	push	{lr}
    9f9e:	b083      	sub	sp, #12
    9fa0:	f7f6 fd96 	bl	ad0 <Sys_GetCoreID>
    9fa4:	4603      	mov	r3, r0
    9fa6:	9301      	str	r3, [sp, #4]
    9fa8:	4a0d      	ldr	r2, [pc, #52]	; (9fe0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
    9faa:	9b01      	ldr	r3, [sp, #4]
    9fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fb0:	1e5a      	subs	r2, r3, #1
    9fb2:	490b      	ldr	r1, [pc, #44]	; (9fe0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
    9fb4:	9b01      	ldr	r3, [sp, #4]
    9fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9fba:	4a0a      	ldr	r2, [pc, #40]	; (9fe4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
    9fbc:	9b01      	ldr	r3, [sp, #4]
    9fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fc2:	f003 0301 	and.w	r3, r3, #1
    9fc6:	2b00      	cmp	r3, #0
    9fc8:	d106      	bne.n	9fd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    9fca:	4a05      	ldr	r2, [pc, #20]	; (9fe0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
    9fcc:	9b01      	ldr	r3, [sp, #4]
    9fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fd2:	2b00      	cmp	r3, #0
    9fd4:	d100      	bne.n	9fd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    9fd6:	b662      	cpsie	i
    9fd8:	bf00      	nop
    9fda:	b003      	add	sp, #12
    9fdc:	f85d fb04 	ldr.w	pc, [sp], #4
    9fe0:	1fff91e0 	.word	0x1fff91e0
    9fe4:	1fff91dc 	.word	0x1fff91dc

00009fe8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:
    9fe8:	b500      	push	{lr}
    9fea:	b083      	sub	sp, #12
    9fec:	f7f6 fd70 	bl	ad0 <Sys_GetCoreID>
    9ff0:	4603      	mov	r3, r0
    9ff2:	9301      	str	r3, [sp, #4]
    9ff4:	4a10      	ldr	r2, [pc, #64]	; (a038 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
    9ff6:	9b01      	ldr	r3, [sp, #4]
    9ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ffc:	2b00      	cmp	r3, #0
    9ffe:	d10d      	bne.n	a01c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    a000:	f7f6 fc96 	bl	930 <Pwm_schm_read_msr>
    a004:	9000      	str	r0, [sp, #0]
    a006:	9b00      	ldr	r3, [sp, #0]
    a008:	f003 0301 	and.w	r3, r3, #1
    a00c:	2b00      	cmp	r3, #0
    a00e:	d100      	bne.n	a012 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
    a010:	b672      	cpsid	i
    a012:	490a      	ldr	r1, [pc, #40]	; (a03c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
    a014:	9b01      	ldr	r3, [sp, #4]
    a016:	9a00      	ldr	r2, [sp, #0]
    a018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a01c:	4a06      	ldr	r2, [pc, #24]	; (a038 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
    a01e:	9b01      	ldr	r3, [sp, #4]
    a020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a024:	1c5a      	adds	r2, r3, #1
    a026:	4904      	ldr	r1, [pc, #16]	; (a038 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
    a028:	9b01      	ldr	r3, [sp, #4]
    a02a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a02e:	bf00      	nop
    a030:	b003      	add	sp, #12
    a032:	f85d fb04 	ldr.w	pc, [sp], #4
    a036:	bf00      	nop
    a038:	1fff91e8 	.word	0x1fff91e8
    a03c:	1fff91e4 	.word	0x1fff91e4

0000a040 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:
    a040:	b500      	push	{lr}
    a042:	b083      	sub	sp, #12
    a044:	f7f6 fd44 	bl	ad0 <Sys_GetCoreID>
    a048:	4603      	mov	r3, r0
    a04a:	9301      	str	r3, [sp, #4]
    a04c:	4a0d      	ldr	r2, [pc, #52]	; (a084 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
    a04e:	9b01      	ldr	r3, [sp, #4]
    a050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a054:	1e5a      	subs	r2, r3, #1
    a056:	490b      	ldr	r1, [pc, #44]	; (a084 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
    a058:	9b01      	ldr	r3, [sp, #4]
    a05a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a05e:	4a0a      	ldr	r2, [pc, #40]	; (a088 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
    a060:	9b01      	ldr	r3, [sp, #4]
    a062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a066:	f003 0301 	and.w	r3, r3, #1
    a06a:	2b00      	cmp	r3, #0
    a06c:	d106      	bne.n	a07c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    a06e:	4a05      	ldr	r2, [pc, #20]	; (a084 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
    a070:	9b01      	ldr	r3, [sp, #4]
    a072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a076:	2b00      	cmp	r3, #0
    a078:	d100      	bne.n	a07c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    a07a:	b662      	cpsie	i
    a07c:	bf00      	nop
    a07e:	b003      	add	sp, #12
    a080:	f85d fb04 	ldr.w	pc, [sp], #4
    a084:	1fff91e8 	.word	0x1fff91e8
    a088:	1fff91e4 	.word	0x1fff91e4

0000a08c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:
    a08c:	b500      	push	{lr}
    a08e:	b083      	sub	sp, #12
    a090:	f7f6 fd1e 	bl	ad0 <Sys_GetCoreID>
    a094:	4603      	mov	r3, r0
    a096:	9301      	str	r3, [sp, #4]
    a098:	4a10      	ldr	r2, [pc, #64]	; (a0dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
    a09a:	9b01      	ldr	r3, [sp, #4]
    a09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0a0:	2b00      	cmp	r3, #0
    a0a2:	d10d      	bne.n	a0c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    a0a4:	f7f6 fc44 	bl	930 <Pwm_schm_read_msr>
    a0a8:	9000      	str	r0, [sp, #0]
    a0aa:	9b00      	ldr	r3, [sp, #0]
    a0ac:	f003 0301 	and.w	r3, r3, #1
    a0b0:	2b00      	cmp	r3, #0
    a0b2:	d100      	bne.n	a0b6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
    a0b4:	b672      	cpsid	i
    a0b6:	490a      	ldr	r1, [pc, #40]	; (a0e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
    a0b8:	9b01      	ldr	r3, [sp, #4]
    a0ba:	9a00      	ldr	r2, [sp, #0]
    a0bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a0c0:	4a06      	ldr	r2, [pc, #24]	; (a0dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
    a0c2:	9b01      	ldr	r3, [sp, #4]
    a0c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0c8:	1c5a      	adds	r2, r3, #1
    a0ca:	4904      	ldr	r1, [pc, #16]	; (a0dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
    a0cc:	9b01      	ldr	r3, [sp, #4]
    a0ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a0d2:	bf00      	nop
    a0d4:	b003      	add	sp, #12
    a0d6:	f85d fb04 	ldr.w	pc, [sp], #4
    a0da:	bf00      	nop
    a0dc:	1fff91f0 	.word	0x1fff91f0
    a0e0:	1fff91ec 	.word	0x1fff91ec

0000a0e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:
    a0e4:	b500      	push	{lr}
    a0e6:	b083      	sub	sp, #12
    a0e8:	f7f6 fcf2 	bl	ad0 <Sys_GetCoreID>
    a0ec:	4603      	mov	r3, r0
    a0ee:	9301      	str	r3, [sp, #4]
    a0f0:	4a0d      	ldr	r2, [pc, #52]	; (a128 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
    a0f2:	9b01      	ldr	r3, [sp, #4]
    a0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0f8:	1e5a      	subs	r2, r3, #1
    a0fa:	490b      	ldr	r1, [pc, #44]	; (a128 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
    a0fc:	9b01      	ldr	r3, [sp, #4]
    a0fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a102:	4a0a      	ldr	r2, [pc, #40]	; (a12c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
    a104:	9b01      	ldr	r3, [sp, #4]
    a106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a10a:	f003 0301 	and.w	r3, r3, #1
    a10e:	2b00      	cmp	r3, #0
    a110:	d106      	bne.n	a120 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    a112:	4a05      	ldr	r2, [pc, #20]	; (a128 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
    a114:	9b01      	ldr	r3, [sp, #4]
    a116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a11a:	2b00      	cmp	r3, #0
    a11c:	d100      	bne.n	a120 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    a11e:	b662      	cpsie	i
    a120:	bf00      	nop
    a122:	b003      	add	sp, #12
    a124:	f85d fb04 	ldr.w	pc, [sp], #4
    a128:	1fff91f0 	.word	0x1fff91f0
    a12c:	1fff91ec 	.word	0x1fff91ec

0000a130 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:
    a130:	b500      	push	{lr}
    a132:	b083      	sub	sp, #12
    a134:	f7f6 fccc 	bl	ad0 <Sys_GetCoreID>
    a138:	4603      	mov	r3, r0
    a13a:	9301      	str	r3, [sp, #4]
    a13c:	4a10      	ldr	r2, [pc, #64]	; (a180 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
    a13e:	9b01      	ldr	r3, [sp, #4]
    a140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a144:	2b00      	cmp	r3, #0
    a146:	d10d      	bne.n	a164 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    a148:	f7f6 fbf2 	bl	930 <Pwm_schm_read_msr>
    a14c:	9000      	str	r0, [sp, #0]
    a14e:	9b00      	ldr	r3, [sp, #0]
    a150:	f003 0301 	and.w	r3, r3, #1
    a154:	2b00      	cmp	r3, #0
    a156:	d100      	bne.n	a15a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
    a158:	b672      	cpsid	i
    a15a:	490a      	ldr	r1, [pc, #40]	; (a184 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
    a15c:	9b01      	ldr	r3, [sp, #4]
    a15e:	9a00      	ldr	r2, [sp, #0]
    a160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a164:	4a06      	ldr	r2, [pc, #24]	; (a180 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
    a166:	9b01      	ldr	r3, [sp, #4]
    a168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a16c:	1c5a      	adds	r2, r3, #1
    a16e:	4904      	ldr	r1, [pc, #16]	; (a180 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
    a170:	9b01      	ldr	r3, [sp, #4]
    a172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a176:	bf00      	nop
    a178:	b003      	add	sp, #12
    a17a:	f85d fb04 	ldr.w	pc, [sp], #4
    a17e:	bf00      	nop
    a180:	1fff91f8 	.word	0x1fff91f8
    a184:	1fff91f4 	.word	0x1fff91f4

0000a188 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:
    a188:	b500      	push	{lr}
    a18a:	b083      	sub	sp, #12
    a18c:	f7f6 fca0 	bl	ad0 <Sys_GetCoreID>
    a190:	4603      	mov	r3, r0
    a192:	9301      	str	r3, [sp, #4]
    a194:	4a0d      	ldr	r2, [pc, #52]	; (a1cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
    a196:	9b01      	ldr	r3, [sp, #4]
    a198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a19c:	1e5a      	subs	r2, r3, #1
    a19e:	490b      	ldr	r1, [pc, #44]	; (a1cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
    a1a0:	9b01      	ldr	r3, [sp, #4]
    a1a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a1a6:	4a0a      	ldr	r2, [pc, #40]	; (a1d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
    a1a8:	9b01      	ldr	r3, [sp, #4]
    a1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1ae:	f003 0301 	and.w	r3, r3, #1
    a1b2:	2b00      	cmp	r3, #0
    a1b4:	d106      	bne.n	a1c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    a1b6:	4a05      	ldr	r2, [pc, #20]	; (a1cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
    a1b8:	9b01      	ldr	r3, [sp, #4]
    a1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d100      	bne.n	a1c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    a1c2:	b662      	cpsie	i
    a1c4:	bf00      	nop
    a1c6:	b003      	add	sp, #12
    a1c8:	f85d fb04 	ldr.w	pc, [sp], #4
    a1cc:	1fff91f8 	.word	0x1fff91f8
    a1d0:	1fff91f4 	.word	0x1fff91f4

0000a1d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:
    a1d4:	b500      	push	{lr}
    a1d6:	b083      	sub	sp, #12
    a1d8:	f7f6 fc7a 	bl	ad0 <Sys_GetCoreID>
    a1dc:	4603      	mov	r3, r0
    a1de:	9301      	str	r3, [sp, #4]
    a1e0:	4a10      	ldr	r2, [pc, #64]	; (a224 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
    a1e2:	9b01      	ldr	r3, [sp, #4]
    a1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d10d      	bne.n	a208 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    a1ec:	f7f6 fba0 	bl	930 <Pwm_schm_read_msr>
    a1f0:	9000      	str	r0, [sp, #0]
    a1f2:	9b00      	ldr	r3, [sp, #0]
    a1f4:	f003 0301 	and.w	r3, r3, #1
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d100      	bne.n	a1fe <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
    a1fc:	b672      	cpsid	i
    a1fe:	490a      	ldr	r1, [pc, #40]	; (a228 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
    a200:	9b01      	ldr	r3, [sp, #4]
    a202:	9a00      	ldr	r2, [sp, #0]
    a204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a208:	4a06      	ldr	r2, [pc, #24]	; (a224 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
    a20a:	9b01      	ldr	r3, [sp, #4]
    a20c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a210:	1c5a      	adds	r2, r3, #1
    a212:	4904      	ldr	r1, [pc, #16]	; (a224 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
    a214:	9b01      	ldr	r3, [sp, #4]
    a216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a21a:	bf00      	nop
    a21c:	b003      	add	sp, #12
    a21e:	f85d fb04 	ldr.w	pc, [sp], #4
    a222:	bf00      	nop
    a224:	1fff9200 	.word	0x1fff9200
    a228:	1fff91fc 	.word	0x1fff91fc

0000a22c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:
    a22c:	b500      	push	{lr}
    a22e:	b083      	sub	sp, #12
    a230:	f7f6 fc4e 	bl	ad0 <Sys_GetCoreID>
    a234:	4603      	mov	r3, r0
    a236:	9301      	str	r3, [sp, #4]
    a238:	4a0d      	ldr	r2, [pc, #52]	; (a270 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
    a23a:	9b01      	ldr	r3, [sp, #4]
    a23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a240:	1e5a      	subs	r2, r3, #1
    a242:	490b      	ldr	r1, [pc, #44]	; (a270 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
    a244:	9b01      	ldr	r3, [sp, #4]
    a246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a24a:	4a0a      	ldr	r2, [pc, #40]	; (a274 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
    a24c:	9b01      	ldr	r3, [sp, #4]
    a24e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a252:	f003 0301 	and.w	r3, r3, #1
    a256:	2b00      	cmp	r3, #0
    a258:	d106      	bne.n	a268 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    a25a:	4a05      	ldr	r2, [pc, #20]	; (a270 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
    a25c:	9b01      	ldr	r3, [sp, #4]
    a25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a262:	2b00      	cmp	r3, #0
    a264:	d100      	bne.n	a268 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    a266:	b662      	cpsie	i
    a268:	bf00      	nop
    a26a:	b003      	add	sp, #12
    a26c:	f85d fb04 	ldr.w	pc, [sp], #4
    a270:	1fff9200 	.word	0x1fff9200
    a274:	1fff91fc 	.word	0x1fff91fc

0000a278 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:
    a278:	b500      	push	{lr}
    a27a:	b083      	sub	sp, #12
    a27c:	f7f6 fc28 	bl	ad0 <Sys_GetCoreID>
    a280:	4603      	mov	r3, r0
    a282:	9301      	str	r3, [sp, #4]
    a284:	4a10      	ldr	r2, [pc, #64]	; (a2c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
    a286:	9b01      	ldr	r3, [sp, #4]
    a288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a28c:	2b00      	cmp	r3, #0
    a28e:	d10d      	bne.n	a2ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    a290:	f7f6 fb4e 	bl	930 <Pwm_schm_read_msr>
    a294:	9000      	str	r0, [sp, #0]
    a296:	9b00      	ldr	r3, [sp, #0]
    a298:	f003 0301 	and.w	r3, r3, #1
    a29c:	2b00      	cmp	r3, #0
    a29e:	d100      	bne.n	a2a2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
    a2a0:	b672      	cpsid	i
    a2a2:	490a      	ldr	r1, [pc, #40]	; (a2cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
    a2a4:	9b01      	ldr	r3, [sp, #4]
    a2a6:	9a00      	ldr	r2, [sp, #0]
    a2a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a2ac:	4a06      	ldr	r2, [pc, #24]	; (a2c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
    a2ae:	9b01      	ldr	r3, [sp, #4]
    a2b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2b4:	1c5a      	adds	r2, r3, #1
    a2b6:	4904      	ldr	r1, [pc, #16]	; (a2c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
    a2b8:	9b01      	ldr	r3, [sp, #4]
    a2ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a2be:	bf00      	nop
    a2c0:	b003      	add	sp, #12
    a2c2:	f85d fb04 	ldr.w	pc, [sp], #4
    a2c6:	bf00      	nop
    a2c8:	1fff9208 	.word	0x1fff9208
    a2cc:	1fff9204 	.word	0x1fff9204

0000a2d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:
    a2d0:	b500      	push	{lr}
    a2d2:	b083      	sub	sp, #12
    a2d4:	f7f6 fbfc 	bl	ad0 <Sys_GetCoreID>
    a2d8:	4603      	mov	r3, r0
    a2da:	9301      	str	r3, [sp, #4]
    a2dc:	4a0d      	ldr	r2, [pc, #52]	; (a314 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
    a2de:	9b01      	ldr	r3, [sp, #4]
    a2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2e4:	1e5a      	subs	r2, r3, #1
    a2e6:	490b      	ldr	r1, [pc, #44]	; (a314 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
    a2e8:	9b01      	ldr	r3, [sp, #4]
    a2ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a2ee:	4a0a      	ldr	r2, [pc, #40]	; (a318 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
    a2f0:	9b01      	ldr	r3, [sp, #4]
    a2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2f6:	f003 0301 	and.w	r3, r3, #1
    a2fa:	2b00      	cmp	r3, #0
    a2fc:	d106      	bne.n	a30c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    a2fe:	4a05      	ldr	r2, [pc, #20]	; (a314 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
    a300:	9b01      	ldr	r3, [sp, #4]
    a302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a306:	2b00      	cmp	r3, #0
    a308:	d100      	bne.n	a30c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    a30a:	b662      	cpsie	i
    a30c:	bf00      	nop
    a30e:	b003      	add	sp, #12
    a310:	f85d fb04 	ldr.w	pc, [sp], #4
    a314:	1fff9208 	.word	0x1fff9208
    a318:	1fff9204 	.word	0x1fff9204

0000a31c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:
    a31c:	b500      	push	{lr}
    a31e:	b083      	sub	sp, #12
    a320:	f7f6 fbd6 	bl	ad0 <Sys_GetCoreID>
    a324:	4603      	mov	r3, r0
    a326:	9301      	str	r3, [sp, #4]
    a328:	4a10      	ldr	r2, [pc, #64]	; (a36c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
    a32a:	9b01      	ldr	r3, [sp, #4]
    a32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a330:	2b00      	cmp	r3, #0
    a332:	d10d      	bne.n	a350 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    a334:	f7f6 fafc 	bl	930 <Pwm_schm_read_msr>
    a338:	9000      	str	r0, [sp, #0]
    a33a:	9b00      	ldr	r3, [sp, #0]
    a33c:	f003 0301 	and.w	r3, r3, #1
    a340:	2b00      	cmp	r3, #0
    a342:	d100      	bne.n	a346 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
    a344:	b672      	cpsid	i
    a346:	490a      	ldr	r1, [pc, #40]	; (a370 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
    a348:	9b01      	ldr	r3, [sp, #4]
    a34a:	9a00      	ldr	r2, [sp, #0]
    a34c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a350:	4a06      	ldr	r2, [pc, #24]	; (a36c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
    a352:	9b01      	ldr	r3, [sp, #4]
    a354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a358:	1c5a      	adds	r2, r3, #1
    a35a:	4904      	ldr	r1, [pc, #16]	; (a36c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
    a35c:	9b01      	ldr	r3, [sp, #4]
    a35e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a362:	bf00      	nop
    a364:	b003      	add	sp, #12
    a366:	f85d fb04 	ldr.w	pc, [sp], #4
    a36a:	bf00      	nop
    a36c:	1fff9210 	.word	0x1fff9210
    a370:	1fff920c 	.word	0x1fff920c

0000a374 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:
    a374:	b500      	push	{lr}
    a376:	b083      	sub	sp, #12
    a378:	f7f6 fbaa 	bl	ad0 <Sys_GetCoreID>
    a37c:	4603      	mov	r3, r0
    a37e:	9301      	str	r3, [sp, #4]
    a380:	4a0d      	ldr	r2, [pc, #52]	; (a3b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
    a382:	9b01      	ldr	r3, [sp, #4]
    a384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a388:	1e5a      	subs	r2, r3, #1
    a38a:	490b      	ldr	r1, [pc, #44]	; (a3b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
    a38c:	9b01      	ldr	r3, [sp, #4]
    a38e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a392:	4a0a      	ldr	r2, [pc, #40]	; (a3bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
    a394:	9b01      	ldr	r3, [sp, #4]
    a396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a39a:	f003 0301 	and.w	r3, r3, #1
    a39e:	2b00      	cmp	r3, #0
    a3a0:	d106      	bne.n	a3b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    a3a2:	4a05      	ldr	r2, [pc, #20]	; (a3b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
    a3a4:	9b01      	ldr	r3, [sp, #4]
    a3a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3aa:	2b00      	cmp	r3, #0
    a3ac:	d100      	bne.n	a3b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    a3ae:	b662      	cpsie	i
    a3b0:	bf00      	nop
    a3b2:	b003      	add	sp, #12
    a3b4:	f85d fb04 	ldr.w	pc, [sp], #4
    a3b8:	1fff9210 	.word	0x1fff9210
    a3bc:	1fff920c 	.word	0x1fff920c

0000a3c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:
    a3c0:	b500      	push	{lr}
    a3c2:	b083      	sub	sp, #12
    a3c4:	f7f6 fb84 	bl	ad0 <Sys_GetCoreID>
    a3c8:	4603      	mov	r3, r0
    a3ca:	9301      	str	r3, [sp, #4]
    a3cc:	4a10      	ldr	r2, [pc, #64]	; (a410 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
    a3ce:	9b01      	ldr	r3, [sp, #4]
    a3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3d4:	2b00      	cmp	r3, #0
    a3d6:	d10d      	bne.n	a3f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    a3d8:	f7f6 faaa 	bl	930 <Pwm_schm_read_msr>
    a3dc:	9000      	str	r0, [sp, #0]
    a3de:	9b00      	ldr	r3, [sp, #0]
    a3e0:	f003 0301 	and.w	r3, r3, #1
    a3e4:	2b00      	cmp	r3, #0
    a3e6:	d100      	bne.n	a3ea <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
    a3e8:	b672      	cpsid	i
    a3ea:	490a      	ldr	r1, [pc, #40]	; (a414 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
    a3ec:	9b01      	ldr	r3, [sp, #4]
    a3ee:	9a00      	ldr	r2, [sp, #0]
    a3f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a3f4:	4a06      	ldr	r2, [pc, #24]	; (a410 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
    a3f6:	9b01      	ldr	r3, [sp, #4]
    a3f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3fc:	1c5a      	adds	r2, r3, #1
    a3fe:	4904      	ldr	r1, [pc, #16]	; (a410 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
    a400:	9b01      	ldr	r3, [sp, #4]
    a402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a406:	bf00      	nop
    a408:	b003      	add	sp, #12
    a40a:	f85d fb04 	ldr.w	pc, [sp], #4
    a40e:	bf00      	nop
    a410:	1fff9218 	.word	0x1fff9218
    a414:	1fff9214 	.word	0x1fff9214

0000a418 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:
    a418:	b500      	push	{lr}
    a41a:	b083      	sub	sp, #12
    a41c:	f7f6 fb58 	bl	ad0 <Sys_GetCoreID>
    a420:	4603      	mov	r3, r0
    a422:	9301      	str	r3, [sp, #4]
    a424:	4a0d      	ldr	r2, [pc, #52]	; (a45c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
    a426:	9b01      	ldr	r3, [sp, #4]
    a428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a42c:	1e5a      	subs	r2, r3, #1
    a42e:	490b      	ldr	r1, [pc, #44]	; (a45c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
    a430:	9b01      	ldr	r3, [sp, #4]
    a432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a436:	4a0a      	ldr	r2, [pc, #40]	; (a460 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
    a438:	9b01      	ldr	r3, [sp, #4]
    a43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a43e:	f003 0301 	and.w	r3, r3, #1
    a442:	2b00      	cmp	r3, #0
    a444:	d106      	bne.n	a454 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    a446:	4a05      	ldr	r2, [pc, #20]	; (a45c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
    a448:	9b01      	ldr	r3, [sp, #4]
    a44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a44e:	2b00      	cmp	r3, #0
    a450:	d100      	bne.n	a454 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    a452:	b662      	cpsie	i
    a454:	bf00      	nop
    a456:	b003      	add	sp, #12
    a458:	f85d fb04 	ldr.w	pc, [sp], #4
    a45c:	1fff9218 	.word	0x1fff9218
    a460:	1fff9214 	.word	0x1fff9214

0000a464 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:
    a464:	b500      	push	{lr}
    a466:	b083      	sub	sp, #12
    a468:	f7f6 fb32 	bl	ad0 <Sys_GetCoreID>
    a46c:	4603      	mov	r3, r0
    a46e:	9301      	str	r3, [sp, #4]
    a470:	4a10      	ldr	r2, [pc, #64]	; (a4b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
    a472:	9b01      	ldr	r3, [sp, #4]
    a474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a478:	2b00      	cmp	r3, #0
    a47a:	d10d      	bne.n	a498 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    a47c:	f7f6 fa58 	bl	930 <Pwm_schm_read_msr>
    a480:	9000      	str	r0, [sp, #0]
    a482:	9b00      	ldr	r3, [sp, #0]
    a484:	f003 0301 	and.w	r3, r3, #1
    a488:	2b00      	cmp	r3, #0
    a48a:	d100      	bne.n	a48e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
    a48c:	b672      	cpsid	i
    a48e:	490a      	ldr	r1, [pc, #40]	; (a4b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
    a490:	9b01      	ldr	r3, [sp, #4]
    a492:	9a00      	ldr	r2, [sp, #0]
    a494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a498:	4a06      	ldr	r2, [pc, #24]	; (a4b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
    a49a:	9b01      	ldr	r3, [sp, #4]
    a49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4a0:	1c5a      	adds	r2, r3, #1
    a4a2:	4904      	ldr	r1, [pc, #16]	; (a4b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
    a4a4:	9b01      	ldr	r3, [sp, #4]
    a4a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a4aa:	bf00      	nop
    a4ac:	b003      	add	sp, #12
    a4ae:	f85d fb04 	ldr.w	pc, [sp], #4
    a4b2:	bf00      	nop
    a4b4:	1fff9220 	.word	0x1fff9220
    a4b8:	1fff921c 	.word	0x1fff921c

0000a4bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:
    a4bc:	b500      	push	{lr}
    a4be:	b083      	sub	sp, #12
    a4c0:	f7f6 fb06 	bl	ad0 <Sys_GetCoreID>
    a4c4:	4603      	mov	r3, r0
    a4c6:	9301      	str	r3, [sp, #4]
    a4c8:	4a0d      	ldr	r2, [pc, #52]	; (a500 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
    a4ca:	9b01      	ldr	r3, [sp, #4]
    a4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4d0:	1e5a      	subs	r2, r3, #1
    a4d2:	490b      	ldr	r1, [pc, #44]	; (a500 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
    a4d4:	9b01      	ldr	r3, [sp, #4]
    a4d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a4da:	4a0a      	ldr	r2, [pc, #40]	; (a504 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
    a4dc:	9b01      	ldr	r3, [sp, #4]
    a4de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4e2:	f003 0301 	and.w	r3, r3, #1
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	d106      	bne.n	a4f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    a4ea:	4a05      	ldr	r2, [pc, #20]	; (a500 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
    a4ec:	9b01      	ldr	r3, [sp, #4]
    a4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4f2:	2b00      	cmp	r3, #0
    a4f4:	d100      	bne.n	a4f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    a4f6:	b662      	cpsie	i
    a4f8:	bf00      	nop
    a4fa:	b003      	add	sp, #12
    a4fc:	f85d fb04 	ldr.w	pc, [sp], #4
    a500:	1fff9220 	.word	0x1fff9220
    a504:	1fff921c 	.word	0x1fff921c

0000a508 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:
    a508:	b500      	push	{lr}
    a50a:	b083      	sub	sp, #12
    a50c:	f7f6 fae0 	bl	ad0 <Sys_GetCoreID>
    a510:	4603      	mov	r3, r0
    a512:	9301      	str	r3, [sp, #4]
    a514:	4a10      	ldr	r2, [pc, #64]	; (a558 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
    a516:	9b01      	ldr	r3, [sp, #4]
    a518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a51c:	2b00      	cmp	r3, #0
    a51e:	d10d      	bne.n	a53c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    a520:	f7f6 fa06 	bl	930 <Pwm_schm_read_msr>
    a524:	9000      	str	r0, [sp, #0]
    a526:	9b00      	ldr	r3, [sp, #0]
    a528:	f003 0301 	and.w	r3, r3, #1
    a52c:	2b00      	cmp	r3, #0
    a52e:	d100      	bne.n	a532 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
    a530:	b672      	cpsid	i
    a532:	490a      	ldr	r1, [pc, #40]	; (a55c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
    a534:	9b01      	ldr	r3, [sp, #4]
    a536:	9a00      	ldr	r2, [sp, #0]
    a538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a53c:	4a06      	ldr	r2, [pc, #24]	; (a558 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
    a53e:	9b01      	ldr	r3, [sp, #4]
    a540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a544:	1c5a      	adds	r2, r3, #1
    a546:	4904      	ldr	r1, [pc, #16]	; (a558 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
    a548:	9b01      	ldr	r3, [sp, #4]
    a54a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a54e:	bf00      	nop
    a550:	b003      	add	sp, #12
    a552:	f85d fb04 	ldr.w	pc, [sp], #4
    a556:	bf00      	nop
    a558:	1fff9228 	.word	0x1fff9228
    a55c:	1fff9224 	.word	0x1fff9224

0000a560 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:
    a560:	b500      	push	{lr}
    a562:	b083      	sub	sp, #12
    a564:	f7f6 fab4 	bl	ad0 <Sys_GetCoreID>
    a568:	4603      	mov	r3, r0
    a56a:	9301      	str	r3, [sp, #4]
    a56c:	4a0d      	ldr	r2, [pc, #52]	; (a5a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
    a56e:	9b01      	ldr	r3, [sp, #4]
    a570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a574:	1e5a      	subs	r2, r3, #1
    a576:	490b      	ldr	r1, [pc, #44]	; (a5a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
    a578:	9b01      	ldr	r3, [sp, #4]
    a57a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a57e:	4a0a      	ldr	r2, [pc, #40]	; (a5a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
    a580:	9b01      	ldr	r3, [sp, #4]
    a582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a586:	f003 0301 	and.w	r3, r3, #1
    a58a:	2b00      	cmp	r3, #0
    a58c:	d106      	bne.n	a59c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    a58e:	4a05      	ldr	r2, [pc, #20]	; (a5a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
    a590:	9b01      	ldr	r3, [sp, #4]
    a592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a596:	2b00      	cmp	r3, #0
    a598:	d100      	bne.n	a59c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    a59a:	b662      	cpsie	i
    a59c:	bf00      	nop
    a59e:	b003      	add	sp, #12
    a5a0:	f85d fb04 	ldr.w	pc, [sp], #4
    a5a4:	1fff9228 	.word	0x1fff9228
    a5a8:	1fff9224 	.word	0x1fff9224

0000a5ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:
    a5ac:	b500      	push	{lr}
    a5ae:	b083      	sub	sp, #12
    a5b0:	f7f6 fa8e 	bl	ad0 <Sys_GetCoreID>
    a5b4:	4603      	mov	r3, r0
    a5b6:	9301      	str	r3, [sp, #4]
    a5b8:	4a10      	ldr	r2, [pc, #64]	; (a5fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
    a5ba:	9b01      	ldr	r3, [sp, #4]
    a5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5c0:	2b00      	cmp	r3, #0
    a5c2:	d10d      	bne.n	a5e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    a5c4:	f7f6 f9b4 	bl	930 <Pwm_schm_read_msr>
    a5c8:	9000      	str	r0, [sp, #0]
    a5ca:	9b00      	ldr	r3, [sp, #0]
    a5cc:	f003 0301 	and.w	r3, r3, #1
    a5d0:	2b00      	cmp	r3, #0
    a5d2:	d100      	bne.n	a5d6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
    a5d4:	b672      	cpsid	i
    a5d6:	490a      	ldr	r1, [pc, #40]	; (a600 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
    a5d8:	9b01      	ldr	r3, [sp, #4]
    a5da:	9a00      	ldr	r2, [sp, #0]
    a5dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a5e0:	4a06      	ldr	r2, [pc, #24]	; (a5fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
    a5e2:	9b01      	ldr	r3, [sp, #4]
    a5e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5e8:	1c5a      	adds	r2, r3, #1
    a5ea:	4904      	ldr	r1, [pc, #16]	; (a5fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
    a5ec:	9b01      	ldr	r3, [sp, #4]
    a5ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a5f2:	bf00      	nop
    a5f4:	b003      	add	sp, #12
    a5f6:	f85d fb04 	ldr.w	pc, [sp], #4
    a5fa:	bf00      	nop
    a5fc:	1fff9230 	.word	0x1fff9230
    a600:	1fff922c 	.word	0x1fff922c

0000a604 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:
    a604:	b500      	push	{lr}
    a606:	b083      	sub	sp, #12
    a608:	f7f6 fa62 	bl	ad0 <Sys_GetCoreID>
    a60c:	4603      	mov	r3, r0
    a60e:	9301      	str	r3, [sp, #4]
    a610:	4a0d      	ldr	r2, [pc, #52]	; (a648 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
    a612:	9b01      	ldr	r3, [sp, #4]
    a614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a618:	1e5a      	subs	r2, r3, #1
    a61a:	490b      	ldr	r1, [pc, #44]	; (a648 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
    a61c:	9b01      	ldr	r3, [sp, #4]
    a61e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a622:	4a0a      	ldr	r2, [pc, #40]	; (a64c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
    a624:	9b01      	ldr	r3, [sp, #4]
    a626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a62a:	f003 0301 	and.w	r3, r3, #1
    a62e:	2b00      	cmp	r3, #0
    a630:	d106      	bne.n	a640 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    a632:	4a05      	ldr	r2, [pc, #20]	; (a648 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
    a634:	9b01      	ldr	r3, [sp, #4]
    a636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a63a:	2b00      	cmp	r3, #0
    a63c:	d100      	bne.n	a640 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    a63e:	b662      	cpsie	i
    a640:	bf00      	nop
    a642:	b003      	add	sp, #12
    a644:	f85d fb04 	ldr.w	pc, [sp], #4
    a648:	1fff9230 	.word	0x1fff9230
    a64c:	1fff922c 	.word	0x1fff922c

0000a650 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:
    a650:	b500      	push	{lr}
    a652:	b083      	sub	sp, #12
    a654:	f7f6 fa3c 	bl	ad0 <Sys_GetCoreID>
    a658:	4603      	mov	r3, r0
    a65a:	9301      	str	r3, [sp, #4]
    a65c:	4a10      	ldr	r2, [pc, #64]	; (a6a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
    a65e:	9b01      	ldr	r3, [sp, #4]
    a660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a664:	2b00      	cmp	r3, #0
    a666:	d10d      	bne.n	a684 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    a668:	f7f6 f962 	bl	930 <Pwm_schm_read_msr>
    a66c:	9000      	str	r0, [sp, #0]
    a66e:	9b00      	ldr	r3, [sp, #0]
    a670:	f003 0301 	and.w	r3, r3, #1
    a674:	2b00      	cmp	r3, #0
    a676:	d100      	bne.n	a67a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
    a678:	b672      	cpsid	i
    a67a:	490a      	ldr	r1, [pc, #40]	; (a6a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
    a67c:	9b01      	ldr	r3, [sp, #4]
    a67e:	9a00      	ldr	r2, [sp, #0]
    a680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a684:	4a06      	ldr	r2, [pc, #24]	; (a6a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
    a686:	9b01      	ldr	r3, [sp, #4]
    a688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a68c:	1c5a      	adds	r2, r3, #1
    a68e:	4904      	ldr	r1, [pc, #16]	; (a6a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
    a690:	9b01      	ldr	r3, [sp, #4]
    a692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a696:	bf00      	nop
    a698:	b003      	add	sp, #12
    a69a:	f85d fb04 	ldr.w	pc, [sp], #4
    a69e:	bf00      	nop
    a6a0:	1fff9238 	.word	0x1fff9238
    a6a4:	1fff9234 	.word	0x1fff9234

0000a6a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:
    a6a8:	b500      	push	{lr}
    a6aa:	b083      	sub	sp, #12
    a6ac:	f7f6 fa10 	bl	ad0 <Sys_GetCoreID>
    a6b0:	4603      	mov	r3, r0
    a6b2:	9301      	str	r3, [sp, #4]
    a6b4:	4a0d      	ldr	r2, [pc, #52]	; (a6ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
    a6b6:	9b01      	ldr	r3, [sp, #4]
    a6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6bc:	1e5a      	subs	r2, r3, #1
    a6be:	490b      	ldr	r1, [pc, #44]	; (a6ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
    a6c0:	9b01      	ldr	r3, [sp, #4]
    a6c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a6c6:	4a0a      	ldr	r2, [pc, #40]	; (a6f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
    a6c8:	9b01      	ldr	r3, [sp, #4]
    a6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6ce:	f003 0301 	and.w	r3, r3, #1
    a6d2:	2b00      	cmp	r3, #0
    a6d4:	d106      	bne.n	a6e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    a6d6:	4a05      	ldr	r2, [pc, #20]	; (a6ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
    a6d8:	9b01      	ldr	r3, [sp, #4]
    a6da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6de:	2b00      	cmp	r3, #0
    a6e0:	d100      	bne.n	a6e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    a6e2:	b662      	cpsie	i
    a6e4:	bf00      	nop
    a6e6:	b003      	add	sp, #12
    a6e8:	f85d fb04 	ldr.w	pc, [sp], #4
    a6ec:	1fff9238 	.word	0x1fff9238
    a6f0:	1fff9234 	.word	0x1fff9234

0000a6f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:
    a6f4:	b500      	push	{lr}
    a6f6:	b083      	sub	sp, #12
    a6f8:	f7f6 f9ea 	bl	ad0 <Sys_GetCoreID>
    a6fc:	4603      	mov	r3, r0
    a6fe:	9301      	str	r3, [sp, #4]
    a700:	4a10      	ldr	r2, [pc, #64]	; (a744 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
    a702:	9b01      	ldr	r3, [sp, #4]
    a704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a708:	2b00      	cmp	r3, #0
    a70a:	d10d      	bne.n	a728 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    a70c:	f7f6 f910 	bl	930 <Pwm_schm_read_msr>
    a710:	9000      	str	r0, [sp, #0]
    a712:	9b00      	ldr	r3, [sp, #0]
    a714:	f003 0301 	and.w	r3, r3, #1
    a718:	2b00      	cmp	r3, #0
    a71a:	d100      	bne.n	a71e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
    a71c:	b672      	cpsid	i
    a71e:	490a      	ldr	r1, [pc, #40]	; (a748 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
    a720:	9b01      	ldr	r3, [sp, #4]
    a722:	9a00      	ldr	r2, [sp, #0]
    a724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a728:	4a06      	ldr	r2, [pc, #24]	; (a744 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
    a72a:	9b01      	ldr	r3, [sp, #4]
    a72c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a730:	1c5a      	adds	r2, r3, #1
    a732:	4904      	ldr	r1, [pc, #16]	; (a744 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
    a734:	9b01      	ldr	r3, [sp, #4]
    a736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a73a:	bf00      	nop
    a73c:	b003      	add	sp, #12
    a73e:	f85d fb04 	ldr.w	pc, [sp], #4
    a742:	bf00      	nop
    a744:	1fff9240 	.word	0x1fff9240
    a748:	1fff923c 	.word	0x1fff923c

0000a74c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:
    a74c:	b500      	push	{lr}
    a74e:	b083      	sub	sp, #12
    a750:	f7f6 f9be 	bl	ad0 <Sys_GetCoreID>
    a754:	4603      	mov	r3, r0
    a756:	9301      	str	r3, [sp, #4]
    a758:	4a0d      	ldr	r2, [pc, #52]	; (a790 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
    a75a:	9b01      	ldr	r3, [sp, #4]
    a75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a760:	1e5a      	subs	r2, r3, #1
    a762:	490b      	ldr	r1, [pc, #44]	; (a790 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
    a764:	9b01      	ldr	r3, [sp, #4]
    a766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a76a:	4a0a      	ldr	r2, [pc, #40]	; (a794 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
    a76c:	9b01      	ldr	r3, [sp, #4]
    a76e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a772:	f003 0301 	and.w	r3, r3, #1
    a776:	2b00      	cmp	r3, #0
    a778:	d106      	bne.n	a788 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    a77a:	4a05      	ldr	r2, [pc, #20]	; (a790 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
    a77c:	9b01      	ldr	r3, [sp, #4]
    a77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a782:	2b00      	cmp	r3, #0
    a784:	d100      	bne.n	a788 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    a786:	b662      	cpsie	i
    a788:	bf00      	nop
    a78a:	b003      	add	sp, #12
    a78c:	f85d fb04 	ldr.w	pc, [sp], #4
    a790:	1fff9240 	.word	0x1fff9240
    a794:	1fff923c 	.word	0x1fff923c

0000a798 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:
    a798:	b500      	push	{lr}
    a79a:	b083      	sub	sp, #12
    a79c:	f7f6 f998 	bl	ad0 <Sys_GetCoreID>
    a7a0:	4603      	mov	r3, r0
    a7a2:	9301      	str	r3, [sp, #4]
    a7a4:	4a10      	ldr	r2, [pc, #64]	; (a7e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
    a7a6:	9b01      	ldr	r3, [sp, #4]
    a7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7ac:	2b00      	cmp	r3, #0
    a7ae:	d10d      	bne.n	a7cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    a7b0:	f7f6 f8be 	bl	930 <Pwm_schm_read_msr>
    a7b4:	9000      	str	r0, [sp, #0]
    a7b6:	9b00      	ldr	r3, [sp, #0]
    a7b8:	f003 0301 	and.w	r3, r3, #1
    a7bc:	2b00      	cmp	r3, #0
    a7be:	d100      	bne.n	a7c2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
    a7c0:	b672      	cpsid	i
    a7c2:	490a      	ldr	r1, [pc, #40]	; (a7ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
    a7c4:	9b01      	ldr	r3, [sp, #4]
    a7c6:	9a00      	ldr	r2, [sp, #0]
    a7c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a7cc:	4a06      	ldr	r2, [pc, #24]	; (a7e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
    a7ce:	9b01      	ldr	r3, [sp, #4]
    a7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7d4:	1c5a      	adds	r2, r3, #1
    a7d6:	4904      	ldr	r1, [pc, #16]	; (a7e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
    a7d8:	9b01      	ldr	r3, [sp, #4]
    a7da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a7de:	bf00      	nop
    a7e0:	b003      	add	sp, #12
    a7e2:	f85d fb04 	ldr.w	pc, [sp], #4
    a7e6:	bf00      	nop
    a7e8:	1fff9248 	.word	0x1fff9248
    a7ec:	1fff9244 	.word	0x1fff9244

0000a7f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:
    a7f0:	b500      	push	{lr}
    a7f2:	b083      	sub	sp, #12
    a7f4:	f7f6 f96c 	bl	ad0 <Sys_GetCoreID>
    a7f8:	4603      	mov	r3, r0
    a7fa:	9301      	str	r3, [sp, #4]
    a7fc:	4a0d      	ldr	r2, [pc, #52]	; (a834 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
    a7fe:	9b01      	ldr	r3, [sp, #4]
    a800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a804:	1e5a      	subs	r2, r3, #1
    a806:	490b      	ldr	r1, [pc, #44]	; (a834 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
    a808:	9b01      	ldr	r3, [sp, #4]
    a80a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a80e:	4a0a      	ldr	r2, [pc, #40]	; (a838 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
    a810:	9b01      	ldr	r3, [sp, #4]
    a812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a816:	f003 0301 	and.w	r3, r3, #1
    a81a:	2b00      	cmp	r3, #0
    a81c:	d106      	bne.n	a82c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    a81e:	4a05      	ldr	r2, [pc, #20]	; (a834 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
    a820:	9b01      	ldr	r3, [sp, #4]
    a822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a826:	2b00      	cmp	r3, #0
    a828:	d100      	bne.n	a82c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    a82a:	b662      	cpsie	i
    a82c:	bf00      	nop
    a82e:	b003      	add	sp, #12
    a830:	f85d fb04 	ldr.w	pc, [sp], #4
    a834:	1fff9248 	.word	0x1fff9248
    a838:	1fff9244 	.word	0x1fff9244

0000a83c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:
    a83c:	b500      	push	{lr}
    a83e:	b083      	sub	sp, #12
    a840:	f7f6 f946 	bl	ad0 <Sys_GetCoreID>
    a844:	4603      	mov	r3, r0
    a846:	9301      	str	r3, [sp, #4]
    a848:	4a10      	ldr	r2, [pc, #64]	; (a88c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
    a84a:	9b01      	ldr	r3, [sp, #4]
    a84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a850:	2b00      	cmp	r3, #0
    a852:	d10d      	bne.n	a870 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    a854:	f7f6 f86c 	bl	930 <Pwm_schm_read_msr>
    a858:	9000      	str	r0, [sp, #0]
    a85a:	9b00      	ldr	r3, [sp, #0]
    a85c:	f003 0301 	and.w	r3, r3, #1
    a860:	2b00      	cmp	r3, #0
    a862:	d100      	bne.n	a866 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
    a864:	b672      	cpsid	i
    a866:	490a      	ldr	r1, [pc, #40]	; (a890 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
    a868:	9b01      	ldr	r3, [sp, #4]
    a86a:	9a00      	ldr	r2, [sp, #0]
    a86c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a870:	4a06      	ldr	r2, [pc, #24]	; (a88c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
    a872:	9b01      	ldr	r3, [sp, #4]
    a874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a878:	1c5a      	adds	r2, r3, #1
    a87a:	4904      	ldr	r1, [pc, #16]	; (a88c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
    a87c:	9b01      	ldr	r3, [sp, #4]
    a87e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a882:	bf00      	nop
    a884:	b003      	add	sp, #12
    a886:	f85d fb04 	ldr.w	pc, [sp], #4
    a88a:	bf00      	nop
    a88c:	1fff9250 	.word	0x1fff9250
    a890:	1fff924c 	.word	0x1fff924c

0000a894 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:
    a894:	b500      	push	{lr}
    a896:	b083      	sub	sp, #12
    a898:	f7f6 f91a 	bl	ad0 <Sys_GetCoreID>
    a89c:	4603      	mov	r3, r0
    a89e:	9301      	str	r3, [sp, #4]
    a8a0:	4a0d      	ldr	r2, [pc, #52]	; (a8d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
    a8a2:	9b01      	ldr	r3, [sp, #4]
    a8a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8a8:	1e5a      	subs	r2, r3, #1
    a8aa:	490b      	ldr	r1, [pc, #44]	; (a8d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
    a8ac:	9b01      	ldr	r3, [sp, #4]
    a8ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a8b2:	4a0a      	ldr	r2, [pc, #40]	; (a8dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
    a8b4:	9b01      	ldr	r3, [sp, #4]
    a8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ba:	f003 0301 	and.w	r3, r3, #1
    a8be:	2b00      	cmp	r3, #0
    a8c0:	d106      	bne.n	a8d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    a8c2:	4a05      	ldr	r2, [pc, #20]	; (a8d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
    a8c4:	9b01      	ldr	r3, [sp, #4]
    a8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	d100      	bne.n	a8d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    a8ce:	b662      	cpsie	i
    a8d0:	bf00      	nop
    a8d2:	b003      	add	sp, #12
    a8d4:	f85d fb04 	ldr.w	pc, [sp], #4
    a8d8:	1fff9250 	.word	0x1fff9250
    a8dc:	1fff924c 	.word	0x1fff924c

0000a8e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:
    a8e0:	b500      	push	{lr}
    a8e2:	b083      	sub	sp, #12
    a8e4:	f7f6 f8f4 	bl	ad0 <Sys_GetCoreID>
    a8e8:	4603      	mov	r3, r0
    a8ea:	9301      	str	r3, [sp, #4]
    a8ec:	4a10      	ldr	r2, [pc, #64]	; (a930 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
    a8ee:	9b01      	ldr	r3, [sp, #4]
    a8f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8f4:	2b00      	cmp	r3, #0
    a8f6:	d10d      	bne.n	a914 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    a8f8:	f7f6 f81a 	bl	930 <Pwm_schm_read_msr>
    a8fc:	9000      	str	r0, [sp, #0]
    a8fe:	9b00      	ldr	r3, [sp, #0]
    a900:	f003 0301 	and.w	r3, r3, #1
    a904:	2b00      	cmp	r3, #0
    a906:	d100      	bne.n	a90a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
    a908:	b672      	cpsid	i
    a90a:	490a      	ldr	r1, [pc, #40]	; (a934 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
    a90c:	9b01      	ldr	r3, [sp, #4]
    a90e:	9a00      	ldr	r2, [sp, #0]
    a910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a914:	4a06      	ldr	r2, [pc, #24]	; (a930 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
    a916:	9b01      	ldr	r3, [sp, #4]
    a918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a91c:	1c5a      	adds	r2, r3, #1
    a91e:	4904      	ldr	r1, [pc, #16]	; (a930 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
    a920:	9b01      	ldr	r3, [sp, #4]
    a922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a926:	bf00      	nop
    a928:	b003      	add	sp, #12
    a92a:	f85d fb04 	ldr.w	pc, [sp], #4
    a92e:	bf00      	nop
    a930:	1fff9258 	.word	0x1fff9258
    a934:	1fff9254 	.word	0x1fff9254

0000a938 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:
    a938:	b500      	push	{lr}
    a93a:	b083      	sub	sp, #12
    a93c:	f7f6 f8c8 	bl	ad0 <Sys_GetCoreID>
    a940:	4603      	mov	r3, r0
    a942:	9301      	str	r3, [sp, #4]
    a944:	4a0d      	ldr	r2, [pc, #52]	; (a97c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
    a946:	9b01      	ldr	r3, [sp, #4]
    a948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a94c:	1e5a      	subs	r2, r3, #1
    a94e:	490b      	ldr	r1, [pc, #44]	; (a97c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
    a950:	9b01      	ldr	r3, [sp, #4]
    a952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a956:	4a0a      	ldr	r2, [pc, #40]	; (a980 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
    a958:	9b01      	ldr	r3, [sp, #4]
    a95a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a95e:	f003 0301 	and.w	r3, r3, #1
    a962:	2b00      	cmp	r3, #0
    a964:	d106      	bne.n	a974 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    a966:	4a05      	ldr	r2, [pc, #20]	; (a97c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
    a968:	9b01      	ldr	r3, [sp, #4]
    a96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a96e:	2b00      	cmp	r3, #0
    a970:	d100      	bne.n	a974 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    a972:	b662      	cpsie	i
    a974:	bf00      	nop
    a976:	b003      	add	sp, #12
    a978:	f85d fb04 	ldr.w	pc, [sp], #4
    a97c:	1fff9258 	.word	0x1fff9258
    a980:	1fff9254 	.word	0x1fff9254

0000a984 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:
    a984:	b500      	push	{lr}
    a986:	b083      	sub	sp, #12
    a988:	f7f6 f8a2 	bl	ad0 <Sys_GetCoreID>
    a98c:	4603      	mov	r3, r0
    a98e:	9301      	str	r3, [sp, #4]
    a990:	4a10      	ldr	r2, [pc, #64]	; (a9d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
    a992:	9b01      	ldr	r3, [sp, #4]
    a994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a998:	2b00      	cmp	r3, #0
    a99a:	d10d      	bne.n	a9b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    a99c:	f7f5 ffc8 	bl	930 <Pwm_schm_read_msr>
    a9a0:	9000      	str	r0, [sp, #0]
    a9a2:	9b00      	ldr	r3, [sp, #0]
    a9a4:	f003 0301 	and.w	r3, r3, #1
    a9a8:	2b00      	cmp	r3, #0
    a9aa:	d100      	bne.n	a9ae <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
    a9ac:	b672      	cpsid	i
    a9ae:	490a      	ldr	r1, [pc, #40]	; (a9d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
    a9b0:	9b01      	ldr	r3, [sp, #4]
    a9b2:	9a00      	ldr	r2, [sp, #0]
    a9b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a9b8:	4a06      	ldr	r2, [pc, #24]	; (a9d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
    a9ba:	9b01      	ldr	r3, [sp, #4]
    a9bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9c0:	1c5a      	adds	r2, r3, #1
    a9c2:	4904      	ldr	r1, [pc, #16]	; (a9d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
    a9c4:	9b01      	ldr	r3, [sp, #4]
    a9c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a9ca:	bf00      	nop
    a9cc:	b003      	add	sp, #12
    a9ce:	f85d fb04 	ldr.w	pc, [sp], #4
    a9d2:	bf00      	nop
    a9d4:	1fff9260 	.word	0x1fff9260
    a9d8:	1fff925c 	.word	0x1fff925c

0000a9dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:
    a9dc:	b500      	push	{lr}
    a9de:	b083      	sub	sp, #12
    a9e0:	f7f6 f876 	bl	ad0 <Sys_GetCoreID>
    a9e4:	4603      	mov	r3, r0
    a9e6:	9301      	str	r3, [sp, #4]
    a9e8:	4a0d      	ldr	r2, [pc, #52]	; (aa20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
    a9ea:	9b01      	ldr	r3, [sp, #4]
    a9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9f0:	1e5a      	subs	r2, r3, #1
    a9f2:	490b      	ldr	r1, [pc, #44]	; (aa20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
    a9f4:	9b01      	ldr	r3, [sp, #4]
    a9f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a9fa:	4a0a      	ldr	r2, [pc, #40]	; (aa24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
    a9fc:	9b01      	ldr	r3, [sp, #4]
    a9fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa02:	f003 0301 	and.w	r3, r3, #1
    aa06:	2b00      	cmp	r3, #0
    aa08:	d106      	bne.n	aa18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    aa0a:	4a05      	ldr	r2, [pc, #20]	; (aa20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
    aa0c:	9b01      	ldr	r3, [sp, #4]
    aa0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa12:	2b00      	cmp	r3, #0
    aa14:	d100      	bne.n	aa18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    aa16:	b662      	cpsie	i
    aa18:	bf00      	nop
    aa1a:	b003      	add	sp, #12
    aa1c:	f85d fb04 	ldr.w	pc, [sp], #4
    aa20:	1fff9260 	.word	0x1fff9260
    aa24:	1fff925c 	.word	0x1fff925c

0000aa28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:
    aa28:	b500      	push	{lr}
    aa2a:	b083      	sub	sp, #12
    aa2c:	f7f6 f850 	bl	ad0 <Sys_GetCoreID>
    aa30:	4603      	mov	r3, r0
    aa32:	9301      	str	r3, [sp, #4]
    aa34:	4a10      	ldr	r2, [pc, #64]	; (aa78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
    aa36:	9b01      	ldr	r3, [sp, #4]
    aa38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	d10d      	bne.n	aa5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    aa40:	f7f5 ff76 	bl	930 <Pwm_schm_read_msr>
    aa44:	9000      	str	r0, [sp, #0]
    aa46:	9b00      	ldr	r3, [sp, #0]
    aa48:	f003 0301 	and.w	r3, r3, #1
    aa4c:	2b00      	cmp	r3, #0
    aa4e:	d100      	bne.n	aa52 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
    aa50:	b672      	cpsid	i
    aa52:	490a      	ldr	r1, [pc, #40]	; (aa7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
    aa54:	9b01      	ldr	r3, [sp, #4]
    aa56:	9a00      	ldr	r2, [sp, #0]
    aa58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aa5c:	4a06      	ldr	r2, [pc, #24]	; (aa78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
    aa5e:	9b01      	ldr	r3, [sp, #4]
    aa60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa64:	1c5a      	adds	r2, r3, #1
    aa66:	4904      	ldr	r1, [pc, #16]	; (aa78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
    aa68:	9b01      	ldr	r3, [sp, #4]
    aa6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aa6e:	bf00      	nop
    aa70:	b003      	add	sp, #12
    aa72:	f85d fb04 	ldr.w	pc, [sp], #4
    aa76:	bf00      	nop
    aa78:	1fff9268 	.word	0x1fff9268
    aa7c:	1fff9264 	.word	0x1fff9264

0000aa80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:
    aa80:	b500      	push	{lr}
    aa82:	b083      	sub	sp, #12
    aa84:	f7f6 f824 	bl	ad0 <Sys_GetCoreID>
    aa88:	4603      	mov	r3, r0
    aa8a:	9301      	str	r3, [sp, #4]
    aa8c:	4a0d      	ldr	r2, [pc, #52]	; (aac4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
    aa8e:	9b01      	ldr	r3, [sp, #4]
    aa90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa94:	1e5a      	subs	r2, r3, #1
    aa96:	490b      	ldr	r1, [pc, #44]	; (aac4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
    aa98:	9b01      	ldr	r3, [sp, #4]
    aa9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aa9e:	4a0a      	ldr	r2, [pc, #40]	; (aac8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
    aaa0:	9b01      	ldr	r3, [sp, #4]
    aaa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaa6:	f003 0301 	and.w	r3, r3, #1
    aaaa:	2b00      	cmp	r3, #0
    aaac:	d106      	bne.n	aabc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    aaae:	4a05      	ldr	r2, [pc, #20]	; (aac4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
    aab0:	9b01      	ldr	r3, [sp, #4]
    aab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aab6:	2b00      	cmp	r3, #0
    aab8:	d100      	bne.n	aabc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    aaba:	b662      	cpsie	i
    aabc:	bf00      	nop
    aabe:	b003      	add	sp, #12
    aac0:	f85d fb04 	ldr.w	pc, [sp], #4
    aac4:	1fff9268 	.word	0x1fff9268
    aac8:	1fff9264 	.word	0x1fff9264

0000aacc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:
    aacc:	b500      	push	{lr}
    aace:	b083      	sub	sp, #12
    aad0:	f7f5 fffe 	bl	ad0 <Sys_GetCoreID>
    aad4:	4603      	mov	r3, r0
    aad6:	9301      	str	r3, [sp, #4]
    aad8:	4a10      	ldr	r2, [pc, #64]	; (ab1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
    aada:	9b01      	ldr	r3, [sp, #4]
    aadc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aae0:	2b00      	cmp	r3, #0
    aae2:	d10d      	bne.n	ab00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    aae4:	f7f5 ff24 	bl	930 <Pwm_schm_read_msr>
    aae8:	9000      	str	r0, [sp, #0]
    aaea:	9b00      	ldr	r3, [sp, #0]
    aaec:	f003 0301 	and.w	r3, r3, #1
    aaf0:	2b00      	cmp	r3, #0
    aaf2:	d100      	bne.n	aaf6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
    aaf4:	b672      	cpsid	i
    aaf6:	490a      	ldr	r1, [pc, #40]	; (ab20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
    aaf8:	9b01      	ldr	r3, [sp, #4]
    aafa:	9a00      	ldr	r2, [sp, #0]
    aafc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ab00:	4a06      	ldr	r2, [pc, #24]	; (ab1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
    ab02:	9b01      	ldr	r3, [sp, #4]
    ab04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab08:	1c5a      	adds	r2, r3, #1
    ab0a:	4904      	ldr	r1, [pc, #16]	; (ab1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
    ab0c:	9b01      	ldr	r3, [sp, #4]
    ab0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ab12:	bf00      	nop
    ab14:	b003      	add	sp, #12
    ab16:	f85d fb04 	ldr.w	pc, [sp], #4
    ab1a:	bf00      	nop
    ab1c:	1fff9270 	.word	0x1fff9270
    ab20:	1fff926c 	.word	0x1fff926c

0000ab24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:
    ab24:	b500      	push	{lr}
    ab26:	b083      	sub	sp, #12
    ab28:	f7f5 ffd2 	bl	ad0 <Sys_GetCoreID>
    ab2c:	4603      	mov	r3, r0
    ab2e:	9301      	str	r3, [sp, #4]
    ab30:	4a0d      	ldr	r2, [pc, #52]	; (ab68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
    ab32:	9b01      	ldr	r3, [sp, #4]
    ab34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab38:	1e5a      	subs	r2, r3, #1
    ab3a:	490b      	ldr	r1, [pc, #44]	; (ab68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
    ab3c:	9b01      	ldr	r3, [sp, #4]
    ab3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ab42:	4a0a      	ldr	r2, [pc, #40]	; (ab6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
    ab44:	9b01      	ldr	r3, [sp, #4]
    ab46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab4a:	f003 0301 	and.w	r3, r3, #1
    ab4e:	2b00      	cmp	r3, #0
    ab50:	d106      	bne.n	ab60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    ab52:	4a05      	ldr	r2, [pc, #20]	; (ab68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
    ab54:	9b01      	ldr	r3, [sp, #4]
    ab56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab5a:	2b00      	cmp	r3, #0
    ab5c:	d100      	bne.n	ab60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    ab5e:	b662      	cpsie	i
    ab60:	bf00      	nop
    ab62:	b003      	add	sp, #12
    ab64:	f85d fb04 	ldr.w	pc, [sp], #4
    ab68:	1fff9270 	.word	0x1fff9270
    ab6c:	1fff926c 	.word	0x1fff926c

0000ab70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:
    ab70:	b500      	push	{lr}
    ab72:	b083      	sub	sp, #12
    ab74:	f7f5 ffac 	bl	ad0 <Sys_GetCoreID>
    ab78:	4603      	mov	r3, r0
    ab7a:	9301      	str	r3, [sp, #4]
    ab7c:	4a10      	ldr	r2, [pc, #64]	; (abc0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
    ab7e:	9b01      	ldr	r3, [sp, #4]
    ab80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab84:	2b00      	cmp	r3, #0
    ab86:	d10d      	bne.n	aba4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    ab88:	f7f5 fed2 	bl	930 <Pwm_schm_read_msr>
    ab8c:	9000      	str	r0, [sp, #0]
    ab8e:	9b00      	ldr	r3, [sp, #0]
    ab90:	f003 0301 	and.w	r3, r3, #1
    ab94:	2b00      	cmp	r3, #0
    ab96:	d100      	bne.n	ab9a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
    ab98:	b672      	cpsid	i
    ab9a:	490a      	ldr	r1, [pc, #40]	; (abc4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
    ab9c:	9b01      	ldr	r3, [sp, #4]
    ab9e:	9a00      	ldr	r2, [sp, #0]
    aba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aba4:	4a06      	ldr	r2, [pc, #24]	; (abc0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
    aba6:	9b01      	ldr	r3, [sp, #4]
    aba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abac:	1c5a      	adds	r2, r3, #1
    abae:	4904      	ldr	r1, [pc, #16]	; (abc0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
    abb0:	9b01      	ldr	r3, [sp, #4]
    abb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    abb6:	bf00      	nop
    abb8:	b003      	add	sp, #12
    abba:	f85d fb04 	ldr.w	pc, [sp], #4
    abbe:	bf00      	nop
    abc0:	1fff9278 	.word	0x1fff9278
    abc4:	1fff9274 	.word	0x1fff9274

0000abc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:
    abc8:	b500      	push	{lr}
    abca:	b083      	sub	sp, #12
    abcc:	f7f5 ff80 	bl	ad0 <Sys_GetCoreID>
    abd0:	4603      	mov	r3, r0
    abd2:	9301      	str	r3, [sp, #4]
    abd4:	4a0d      	ldr	r2, [pc, #52]	; (ac0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
    abd6:	9b01      	ldr	r3, [sp, #4]
    abd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abdc:	1e5a      	subs	r2, r3, #1
    abde:	490b      	ldr	r1, [pc, #44]	; (ac0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
    abe0:	9b01      	ldr	r3, [sp, #4]
    abe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    abe6:	4a0a      	ldr	r2, [pc, #40]	; (ac10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
    abe8:	9b01      	ldr	r3, [sp, #4]
    abea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abee:	f003 0301 	and.w	r3, r3, #1
    abf2:	2b00      	cmp	r3, #0
    abf4:	d106      	bne.n	ac04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    abf6:	4a05      	ldr	r2, [pc, #20]	; (ac0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
    abf8:	9b01      	ldr	r3, [sp, #4]
    abfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abfe:	2b00      	cmp	r3, #0
    ac00:	d100      	bne.n	ac04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    ac02:	b662      	cpsie	i
    ac04:	bf00      	nop
    ac06:	b003      	add	sp, #12
    ac08:	f85d fb04 	ldr.w	pc, [sp], #4
    ac0c:	1fff9278 	.word	0x1fff9278
    ac10:	1fff9274 	.word	0x1fff9274

0000ac14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:
    ac14:	b500      	push	{lr}
    ac16:	b083      	sub	sp, #12
    ac18:	f7f5 ff5a 	bl	ad0 <Sys_GetCoreID>
    ac1c:	4603      	mov	r3, r0
    ac1e:	9301      	str	r3, [sp, #4]
    ac20:	4a10      	ldr	r2, [pc, #64]	; (ac64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
    ac22:	9b01      	ldr	r3, [sp, #4]
    ac24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac28:	2b00      	cmp	r3, #0
    ac2a:	d10d      	bne.n	ac48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    ac2c:	f7f5 fe80 	bl	930 <Pwm_schm_read_msr>
    ac30:	9000      	str	r0, [sp, #0]
    ac32:	9b00      	ldr	r3, [sp, #0]
    ac34:	f003 0301 	and.w	r3, r3, #1
    ac38:	2b00      	cmp	r3, #0
    ac3a:	d100      	bne.n	ac3e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
    ac3c:	b672      	cpsid	i
    ac3e:	490a      	ldr	r1, [pc, #40]	; (ac68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
    ac40:	9b01      	ldr	r3, [sp, #4]
    ac42:	9a00      	ldr	r2, [sp, #0]
    ac44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ac48:	4a06      	ldr	r2, [pc, #24]	; (ac64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
    ac4a:	9b01      	ldr	r3, [sp, #4]
    ac4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac50:	1c5a      	adds	r2, r3, #1
    ac52:	4904      	ldr	r1, [pc, #16]	; (ac64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
    ac54:	9b01      	ldr	r3, [sp, #4]
    ac56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ac5a:	bf00      	nop
    ac5c:	b003      	add	sp, #12
    ac5e:	f85d fb04 	ldr.w	pc, [sp], #4
    ac62:	bf00      	nop
    ac64:	1fff9280 	.word	0x1fff9280
    ac68:	1fff927c 	.word	0x1fff927c

0000ac6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:
    ac6c:	b500      	push	{lr}
    ac6e:	b083      	sub	sp, #12
    ac70:	f7f5 ff2e 	bl	ad0 <Sys_GetCoreID>
    ac74:	4603      	mov	r3, r0
    ac76:	9301      	str	r3, [sp, #4]
    ac78:	4a0d      	ldr	r2, [pc, #52]	; (acb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
    ac7a:	9b01      	ldr	r3, [sp, #4]
    ac7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac80:	1e5a      	subs	r2, r3, #1
    ac82:	490b      	ldr	r1, [pc, #44]	; (acb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
    ac84:	9b01      	ldr	r3, [sp, #4]
    ac86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ac8a:	4a0a      	ldr	r2, [pc, #40]	; (acb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
    ac8c:	9b01      	ldr	r3, [sp, #4]
    ac8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac92:	f003 0301 	and.w	r3, r3, #1
    ac96:	2b00      	cmp	r3, #0
    ac98:	d106      	bne.n	aca8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    ac9a:	4a05      	ldr	r2, [pc, #20]	; (acb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
    ac9c:	9b01      	ldr	r3, [sp, #4]
    ac9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aca2:	2b00      	cmp	r3, #0
    aca4:	d100      	bne.n	aca8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    aca6:	b662      	cpsie	i
    aca8:	bf00      	nop
    acaa:	b003      	add	sp, #12
    acac:	f85d fb04 	ldr.w	pc, [sp], #4
    acb0:	1fff9280 	.word	0x1fff9280
    acb4:	1fff927c 	.word	0x1fff927c

0000acb8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:
    acb8:	b500      	push	{lr}
    acba:	b083      	sub	sp, #12
    acbc:	f7f5 ff08 	bl	ad0 <Sys_GetCoreID>
    acc0:	4603      	mov	r3, r0
    acc2:	9301      	str	r3, [sp, #4]
    acc4:	4a10      	ldr	r2, [pc, #64]	; (ad08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
    acc6:	9b01      	ldr	r3, [sp, #4]
    acc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    accc:	2b00      	cmp	r3, #0
    acce:	d10d      	bne.n	acec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    acd0:	f7f5 fe2e 	bl	930 <Pwm_schm_read_msr>
    acd4:	9000      	str	r0, [sp, #0]
    acd6:	9b00      	ldr	r3, [sp, #0]
    acd8:	f003 0301 	and.w	r3, r3, #1
    acdc:	2b00      	cmp	r3, #0
    acde:	d100      	bne.n	ace2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
    ace0:	b672      	cpsid	i
    ace2:	490a      	ldr	r1, [pc, #40]	; (ad0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
    ace4:	9b01      	ldr	r3, [sp, #4]
    ace6:	9a00      	ldr	r2, [sp, #0]
    ace8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    acec:	4a06      	ldr	r2, [pc, #24]	; (ad08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
    acee:	9b01      	ldr	r3, [sp, #4]
    acf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acf4:	1c5a      	adds	r2, r3, #1
    acf6:	4904      	ldr	r1, [pc, #16]	; (ad08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
    acf8:	9b01      	ldr	r3, [sp, #4]
    acfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    acfe:	bf00      	nop
    ad00:	b003      	add	sp, #12
    ad02:	f85d fb04 	ldr.w	pc, [sp], #4
    ad06:	bf00      	nop
    ad08:	1fff9288 	.word	0x1fff9288
    ad0c:	1fff9284 	.word	0x1fff9284

0000ad10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:
    ad10:	b500      	push	{lr}
    ad12:	b083      	sub	sp, #12
    ad14:	f7f5 fedc 	bl	ad0 <Sys_GetCoreID>
    ad18:	4603      	mov	r3, r0
    ad1a:	9301      	str	r3, [sp, #4]
    ad1c:	4a0d      	ldr	r2, [pc, #52]	; (ad54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
    ad1e:	9b01      	ldr	r3, [sp, #4]
    ad20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad24:	1e5a      	subs	r2, r3, #1
    ad26:	490b      	ldr	r1, [pc, #44]	; (ad54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
    ad28:	9b01      	ldr	r3, [sp, #4]
    ad2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ad2e:	4a0a      	ldr	r2, [pc, #40]	; (ad58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
    ad30:	9b01      	ldr	r3, [sp, #4]
    ad32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad36:	f003 0301 	and.w	r3, r3, #1
    ad3a:	2b00      	cmp	r3, #0
    ad3c:	d106      	bne.n	ad4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    ad3e:	4a05      	ldr	r2, [pc, #20]	; (ad54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
    ad40:	9b01      	ldr	r3, [sp, #4]
    ad42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad46:	2b00      	cmp	r3, #0
    ad48:	d100      	bne.n	ad4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    ad4a:	b662      	cpsie	i
    ad4c:	bf00      	nop
    ad4e:	b003      	add	sp, #12
    ad50:	f85d fb04 	ldr.w	pc, [sp], #4
    ad54:	1fff9288 	.word	0x1fff9288
    ad58:	1fff9284 	.word	0x1fff9284

0000ad5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:
    ad5c:	b500      	push	{lr}
    ad5e:	b083      	sub	sp, #12
    ad60:	f7f5 feb6 	bl	ad0 <Sys_GetCoreID>
    ad64:	4603      	mov	r3, r0
    ad66:	9301      	str	r3, [sp, #4]
    ad68:	4a10      	ldr	r2, [pc, #64]	; (adac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
    ad6a:	9b01      	ldr	r3, [sp, #4]
    ad6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad70:	2b00      	cmp	r3, #0
    ad72:	d10d      	bne.n	ad90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    ad74:	f7f5 fddc 	bl	930 <Pwm_schm_read_msr>
    ad78:	9000      	str	r0, [sp, #0]
    ad7a:	9b00      	ldr	r3, [sp, #0]
    ad7c:	f003 0301 	and.w	r3, r3, #1
    ad80:	2b00      	cmp	r3, #0
    ad82:	d100      	bne.n	ad86 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
    ad84:	b672      	cpsid	i
    ad86:	490a      	ldr	r1, [pc, #40]	; (adb0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
    ad88:	9b01      	ldr	r3, [sp, #4]
    ad8a:	9a00      	ldr	r2, [sp, #0]
    ad8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ad90:	4a06      	ldr	r2, [pc, #24]	; (adac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
    ad92:	9b01      	ldr	r3, [sp, #4]
    ad94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad98:	1c5a      	adds	r2, r3, #1
    ad9a:	4904      	ldr	r1, [pc, #16]	; (adac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
    ad9c:	9b01      	ldr	r3, [sp, #4]
    ad9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ada2:	bf00      	nop
    ada4:	b003      	add	sp, #12
    ada6:	f85d fb04 	ldr.w	pc, [sp], #4
    adaa:	bf00      	nop
    adac:	1fff9290 	.word	0x1fff9290
    adb0:	1fff928c 	.word	0x1fff928c

0000adb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:
    adb4:	b500      	push	{lr}
    adb6:	b083      	sub	sp, #12
    adb8:	f7f5 fe8a 	bl	ad0 <Sys_GetCoreID>
    adbc:	4603      	mov	r3, r0
    adbe:	9301      	str	r3, [sp, #4]
    adc0:	4a0d      	ldr	r2, [pc, #52]	; (adf8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
    adc2:	9b01      	ldr	r3, [sp, #4]
    adc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adc8:	1e5a      	subs	r2, r3, #1
    adca:	490b      	ldr	r1, [pc, #44]	; (adf8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
    adcc:	9b01      	ldr	r3, [sp, #4]
    adce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    add2:	4a0a      	ldr	r2, [pc, #40]	; (adfc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
    add4:	9b01      	ldr	r3, [sp, #4]
    add6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adda:	f003 0301 	and.w	r3, r3, #1
    adde:	2b00      	cmp	r3, #0
    ade0:	d106      	bne.n	adf0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    ade2:	4a05      	ldr	r2, [pc, #20]	; (adf8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
    ade4:	9b01      	ldr	r3, [sp, #4]
    ade6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adea:	2b00      	cmp	r3, #0
    adec:	d100      	bne.n	adf0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    adee:	b662      	cpsie	i
    adf0:	bf00      	nop
    adf2:	b003      	add	sp, #12
    adf4:	f85d fb04 	ldr.w	pc, [sp], #4
    adf8:	1fff9290 	.word	0x1fff9290
    adfc:	1fff928c 	.word	0x1fff928c

0000ae00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:
    ae00:	b500      	push	{lr}
    ae02:	b083      	sub	sp, #12
    ae04:	f7f5 fe64 	bl	ad0 <Sys_GetCoreID>
    ae08:	4603      	mov	r3, r0
    ae0a:	9301      	str	r3, [sp, #4]
    ae0c:	4a10      	ldr	r2, [pc, #64]	; (ae50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
    ae0e:	9b01      	ldr	r3, [sp, #4]
    ae10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae14:	2b00      	cmp	r3, #0
    ae16:	d10d      	bne.n	ae34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    ae18:	f7f5 fd8a 	bl	930 <Pwm_schm_read_msr>
    ae1c:	9000      	str	r0, [sp, #0]
    ae1e:	9b00      	ldr	r3, [sp, #0]
    ae20:	f003 0301 	and.w	r3, r3, #1
    ae24:	2b00      	cmp	r3, #0
    ae26:	d100      	bne.n	ae2a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
    ae28:	b672      	cpsid	i
    ae2a:	490a      	ldr	r1, [pc, #40]	; (ae54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
    ae2c:	9b01      	ldr	r3, [sp, #4]
    ae2e:	9a00      	ldr	r2, [sp, #0]
    ae30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ae34:	4a06      	ldr	r2, [pc, #24]	; (ae50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
    ae36:	9b01      	ldr	r3, [sp, #4]
    ae38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae3c:	1c5a      	adds	r2, r3, #1
    ae3e:	4904      	ldr	r1, [pc, #16]	; (ae50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
    ae40:	9b01      	ldr	r3, [sp, #4]
    ae42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ae46:	bf00      	nop
    ae48:	b003      	add	sp, #12
    ae4a:	f85d fb04 	ldr.w	pc, [sp], #4
    ae4e:	bf00      	nop
    ae50:	1fff9298 	.word	0x1fff9298
    ae54:	1fff9294 	.word	0x1fff9294

0000ae58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:
    ae58:	b500      	push	{lr}
    ae5a:	b083      	sub	sp, #12
    ae5c:	f7f5 fe38 	bl	ad0 <Sys_GetCoreID>
    ae60:	4603      	mov	r3, r0
    ae62:	9301      	str	r3, [sp, #4]
    ae64:	4a0d      	ldr	r2, [pc, #52]	; (ae9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
    ae66:	9b01      	ldr	r3, [sp, #4]
    ae68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae6c:	1e5a      	subs	r2, r3, #1
    ae6e:	490b      	ldr	r1, [pc, #44]	; (ae9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
    ae70:	9b01      	ldr	r3, [sp, #4]
    ae72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ae76:	4a0a      	ldr	r2, [pc, #40]	; (aea0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
    ae78:	9b01      	ldr	r3, [sp, #4]
    ae7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae7e:	f003 0301 	and.w	r3, r3, #1
    ae82:	2b00      	cmp	r3, #0
    ae84:	d106      	bne.n	ae94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    ae86:	4a05      	ldr	r2, [pc, #20]	; (ae9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
    ae88:	9b01      	ldr	r3, [sp, #4]
    ae8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae8e:	2b00      	cmp	r3, #0
    ae90:	d100      	bne.n	ae94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    ae92:	b662      	cpsie	i
    ae94:	bf00      	nop
    ae96:	b003      	add	sp, #12
    ae98:	f85d fb04 	ldr.w	pc, [sp], #4
    ae9c:	1fff9298 	.word	0x1fff9298
    aea0:	1fff9294 	.word	0x1fff9294

0000aea4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:
    aea4:	b500      	push	{lr}
    aea6:	b083      	sub	sp, #12
    aea8:	f7f5 fe12 	bl	ad0 <Sys_GetCoreID>
    aeac:	4603      	mov	r3, r0
    aeae:	9301      	str	r3, [sp, #4]
    aeb0:	4a10      	ldr	r2, [pc, #64]	; (aef4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
    aeb2:	9b01      	ldr	r3, [sp, #4]
    aeb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeb8:	2b00      	cmp	r3, #0
    aeba:	d10d      	bne.n	aed8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    aebc:	f7f5 fd38 	bl	930 <Pwm_schm_read_msr>
    aec0:	9000      	str	r0, [sp, #0]
    aec2:	9b00      	ldr	r3, [sp, #0]
    aec4:	f003 0301 	and.w	r3, r3, #1
    aec8:	2b00      	cmp	r3, #0
    aeca:	d100      	bne.n	aece <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
    aecc:	b672      	cpsid	i
    aece:	490a      	ldr	r1, [pc, #40]	; (aef8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
    aed0:	9b01      	ldr	r3, [sp, #4]
    aed2:	9a00      	ldr	r2, [sp, #0]
    aed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aed8:	4a06      	ldr	r2, [pc, #24]	; (aef4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
    aeda:	9b01      	ldr	r3, [sp, #4]
    aedc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aee0:	1c5a      	adds	r2, r3, #1
    aee2:	4904      	ldr	r1, [pc, #16]	; (aef4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
    aee4:	9b01      	ldr	r3, [sp, #4]
    aee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aeea:	bf00      	nop
    aeec:	b003      	add	sp, #12
    aeee:	f85d fb04 	ldr.w	pc, [sp], #4
    aef2:	bf00      	nop
    aef4:	1fff92a0 	.word	0x1fff92a0
    aef8:	1fff929c 	.word	0x1fff929c

0000aefc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:
    aefc:	b500      	push	{lr}
    aefe:	b083      	sub	sp, #12
    af00:	f7f5 fde6 	bl	ad0 <Sys_GetCoreID>
    af04:	4603      	mov	r3, r0
    af06:	9301      	str	r3, [sp, #4]
    af08:	4a0d      	ldr	r2, [pc, #52]	; (af40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
    af0a:	9b01      	ldr	r3, [sp, #4]
    af0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af10:	1e5a      	subs	r2, r3, #1
    af12:	490b      	ldr	r1, [pc, #44]	; (af40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
    af14:	9b01      	ldr	r3, [sp, #4]
    af16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    af1a:	4a0a      	ldr	r2, [pc, #40]	; (af44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
    af1c:	9b01      	ldr	r3, [sp, #4]
    af1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af22:	f003 0301 	and.w	r3, r3, #1
    af26:	2b00      	cmp	r3, #0
    af28:	d106      	bne.n	af38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    af2a:	4a05      	ldr	r2, [pc, #20]	; (af40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
    af2c:	9b01      	ldr	r3, [sp, #4]
    af2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af32:	2b00      	cmp	r3, #0
    af34:	d100      	bne.n	af38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    af36:	b662      	cpsie	i
    af38:	bf00      	nop
    af3a:	b003      	add	sp, #12
    af3c:	f85d fb04 	ldr.w	pc, [sp], #4
    af40:	1fff92a0 	.word	0x1fff92a0
    af44:	1fff929c 	.word	0x1fff929c

0000af48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:
    af48:	b500      	push	{lr}
    af4a:	b083      	sub	sp, #12
    af4c:	f7f5 fdc0 	bl	ad0 <Sys_GetCoreID>
    af50:	4603      	mov	r3, r0
    af52:	9301      	str	r3, [sp, #4]
    af54:	4a10      	ldr	r2, [pc, #64]	; (af98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
    af56:	9b01      	ldr	r3, [sp, #4]
    af58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af5c:	2b00      	cmp	r3, #0
    af5e:	d10d      	bne.n	af7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    af60:	f7f5 fce6 	bl	930 <Pwm_schm_read_msr>
    af64:	9000      	str	r0, [sp, #0]
    af66:	9b00      	ldr	r3, [sp, #0]
    af68:	f003 0301 	and.w	r3, r3, #1
    af6c:	2b00      	cmp	r3, #0
    af6e:	d100      	bne.n	af72 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
    af70:	b672      	cpsid	i
    af72:	490a      	ldr	r1, [pc, #40]	; (af9c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
    af74:	9b01      	ldr	r3, [sp, #4]
    af76:	9a00      	ldr	r2, [sp, #0]
    af78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    af7c:	4a06      	ldr	r2, [pc, #24]	; (af98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
    af7e:	9b01      	ldr	r3, [sp, #4]
    af80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af84:	1c5a      	adds	r2, r3, #1
    af86:	4904      	ldr	r1, [pc, #16]	; (af98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
    af88:	9b01      	ldr	r3, [sp, #4]
    af8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    af8e:	bf00      	nop
    af90:	b003      	add	sp, #12
    af92:	f85d fb04 	ldr.w	pc, [sp], #4
    af96:	bf00      	nop
    af98:	1fff92a8 	.word	0x1fff92a8
    af9c:	1fff92a4 	.word	0x1fff92a4

0000afa0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:
    afa0:	b500      	push	{lr}
    afa2:	b083      	sub	sp, #12
    afa4:	f7f5 fd94 	bl	ad0 <Sys_GetCoreID>
    afa8:	4603      	mov	r3, r0
    afaa:	9301      	str	r3, [sp, #4]
    afac:	4a0d      	ldr	r2, [pc, #52]	; (afe4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
    afae:	9b01      	ldr	r3, [sp, #4]
    afb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afb4:	1e5a      	subs	r2, r3, #1
    afb6:	490b      	ldr	r1, [pc, #44]	; (afe4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
    afb8:	9b01      	ldr	r3, [sp, #4]
    afba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    afbe:	4a0a      	ldr	r2, [pc, #40]	; (afe8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
    afc0:	9b01      	ldr	r3, [sp, #4]
    afc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afc6:	f003 0301 	and.w	r3, r3, #1
    afca:	2b00      	cmp	r3, #0
    afcc:	d106      	bne.n	afdc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    afce:	4a05      	ldr	r2, [pc, #20]	; (afe4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
    afd0:	9b01      	ldr	r3, [sp, #4]
    afd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afd6:	2b00      	cmp	r3, #0
    afd8:	d100      	bne.n	afdc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    afda:	b662      	cpsie	i
    afdc:	bf00      	nop
    afde:	b003      	add	sp, #12
    afe0:	f85d fb04 	ldr.w	pc, [sp], #4
    afe4:	1fff92a8 	.word	0x1fff92a8
    afe8:	1fff92a4 	.word	0x1fff92a4

0000afec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:
    afec:	b500      	push	{lr}
    afee:	b083      	sub	sp, #12
    aff0:	f7f5 fd6e 	bl	ad0 <Sys_GetCoreID>
    aff4:	4603      	mov	r3, r0
    aff6:	9301      	str	r3, [sp, #4]
    aff8:	4a10      	ldr	r2, [pc, #64]	; (b03c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
    affa:	9b01      	ldr	r3, [sp, #4]
    affc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b000:	2b00      	cmp	r3, #0
    b002:	d10d      	bne.n	b020 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    b004:	f7f5 fc94 	bl	930 <Pwm_schm_read_msr>
    b008:	9000      	str	r0, [sp, #0]
    b00a:	9b00      	ldr	r3, [sp, #0]
    b00c:	f003 0301 	and.w	r3, r3, #1
    b010:	2b00      	cmp	r3, #0
    b012:	d100      	bne.n	b016 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
    b014:	b672      	cpsid	i
    b016:	490a      	ldr	r1, [pc, #40]	; (b040 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
    b018:	9b01      	ldr	r3, [sp, #4]
    b01a:	9a00      	ldr	r2, [sp, #0]
    b01c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b020:	4a06      	ldr	r2, [pc, #24]	; (b03c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
    b022:	9b01      	ldr	r3, [sp, #4]
    b024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b028:	1c5a      	adds	r2, r3, #1
    b02a:	4904      	ldr	r1, [pc, #16]	; (b03c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
    b02c:	9b01      	ldr	r3, [sp, #4]
    b02e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b032:	bf00      	nop
    b034:	b003      	add	sp, #12
    b036:	f85d fb04 	ldr.w	pc, [sp], #4
    b03a:	bf00      	nop
    b03c:	1fff92b0 	.word	0x1fff92b0
    b040:	1fff92ac 	.word	0x1fff92ac

0000b044 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:
    b044:	b500      	push	{lr}
    b046:	b083      	sub	sp, #12
    b048:	f7f5 fd42 	bl	ad0 <Sys_GetCoreID>
    b04c:	4603      	mov	r3, r0
    b04e:	9301      	str	r3, [sp, #4]
    b050:	4a0d      	ldr	r2, [pc, #52]	; (b088 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
    b052:	9b01      	ldr	r3, [sp, #4]
    b054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b058:	1e5a      	subs	r2, r3, #1
    b05a:	490b      	ldr	r1, [pc, #44]	; (b088 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
    b05c:	9b01      	ldr	r3, [sp, #4]
    b05e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b062:	4a0a      	ldr	r2, [pc, #40]	; (b08c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
    b064:	9b01      	ldr	r3, [sp, #4]
    b066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b06a:	f003 0301 	and.w	r3, r3, #1
    b06e:	2b00      	cmp	r3, #0
    b070:	d106      	bne.n	b080 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    b072:	4a05      	ldr	r2, [pc, #20]	; (b088 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
    b074:	9b01      	ldr	r3, [sp, #4]
    b076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b07a:	2b00      	cmp	r3, #0
    b07c:	d100      	bne.n	b080 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    b07e:	b662      	cpsie	i
    b080:	bf00      	nop
    b082:	b003      	add	sp, #12
    b084:	f85d fb04 	ldr.w	pc, [sp], #4
    b088:	1fff92b0 	.word	0x1fff92b0
    b08c:	1fff92ac 	.word	0x1fff92ac

0000b090 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:
    b090:	b500      	push	{lr}
    b092:	b083      	sub	sp, #12
    b094:	f7f5 fd1c 	bl	ad0 <Sys_GetCoreID>
    b098:	4603      	mov	r3, r0
    b09a:	9301      	str	r3, [sp, #4]
    b09c:	4a10      	ldr	r2, [pc, #64]	; (b0e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
    b09e:	9b01      	ldr	r3, [sp, #4]
    b0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0a4:	2b00      	cmp	r3, #0
    b0a6:	d10d      	bne.n	b0c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    b0a8:	f7f5 fc42 	bl	930 <Pwm_schm_read_msr>
    b0ac:	9000      	str	r0, [sp, #0]
    b0ae:	9b00      	ldr	r3, [sp, #0]
    b0b0:	f003 0301 	and.w	r3, r3, #1
    b0b4:	2b00      	cmp	r3, #0
    b0b6:	d100      	bne.n	b0ba <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
    b0b8:	b672      	cpsid	i
    b0ba:	490a      	ldr	r1, [pc, #40]	; (b0e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
    b0bc:	9b01      	ldr	r3, [sp, #4]
    b0be:	9a00      	ldr	r2, [sp, #0]
    b0c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b0c4:	4a06      	ldr	r2, [pc, #24]	; (b0e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
    b0c6:	9b01      	ldr	r3, [sp, #4]
    b0c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0cc:	1c5a      	adds	r2, r3, #1
    b0ce:	4904      	ldr	r1, [pc, #16]	; (b0e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
    b0d0:	9b01      	ldr	r3, [sp, #4]
    b0d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b0d6:	bf00      	nop
    b0d8:	b003      	add	sp, #12
    b0da:	f85d fb04 	ldr.w	pc, [sp], #4
    b0de:	bf00      	nop
    b0e0:	1fff92b8 	.word	0x1fff92b8
    b0e4:	1fff92b4 	.word	0x1fff92b4

0000b0e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:
    b0e8:	b500      	push	{lr}
    b0ea:	b083      	sub	sp, #12
    b0ec:	f7f5 fcf0 	bl	ad0 <Sys_GetCoreID>
    b0f0:	4603      	mov	r3, r0
    b0f2:	9301      	str	r3, [sp, #4]
    b0f4:	4a0d      	ldr	r2, [pc, #52]	; (b12c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
    b0f6:	9b01      	ldr	r3, [sp, #4]
    b0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0fc:	1e5a      	subs	r2, r3, #1
    b0fe:	490b      	ldr	r1, [pc, #44]	; (b12c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
    b100:	9b01      	ldr	r3, [sp, #4]
    b102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b106:	4a0a      	ldr	r2, [pc, #40]	; (b130 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
    b108:	9b01      	ldr	r3, [sp, #4]
    b10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b10e:	f003 0301 	and.w	r3, r3, #1
    b112:	2b00      	cmp	r3, #0
    b114:	d106      	bne.n	b124 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    b116:	4a05      	ldr	r2, [pc, #20]	; (b12c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
    b118:	9b01      	ldr	r3, [sp, #4]
    b11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b11e:	2b00      	cmp	r3, #0
    b120:	d100      	bne.n	b124 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    b122:	b662      	cpsie	i
    b124:	bf00      	nop
    b126:	b003      	add	sp, #12
    b128:	f85d fb04 	ldr.w	pc, [sp], #4
    b12c:	1fff92b8 	.word	0x1fff92b8
    b130:	1fff92b4 	.word	0x1fff92b4

0000b134 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:
    b134:	b500      	push	{lr}
    b136:	b083      	sub	sp, #12
    b138:	f7f5 fcca 	bl	ad0 <Sys_GetCoreID>
    b13c:	4603      	mov	r3, r0
    b13e:	9301      	str	r3, [sp, #4]
    b140:	4a10      	ldr	r2, [pc, #64]	; (b184 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
    b142:	9b01      	ldr	r3, [sp, #4]
    b144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b148:	2b00      	cmp	r3, #0
    b14a:	d10d      	bne.n	b168 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    b14c:	f7f5 fbf0 	bl	930 <Pwm_schm_read_msr>
    b150:	9000      	str	r0, [sp, #0]
    b152:	9b00      	ldr	r3, [sp, #0]
    b154:	f003 0301 	and.w	r3, r3, #1
    b158:	2b00      	cmp	r3, #0
    b15a:	d100      	bne.n	b15e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
    b15c:	b672      	cpsid	i
    b15e:	490a      	ldr	r1, [pc, #40]	; (b188 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
    b160:	9b01      	ldr	r3, [sp, #4]
    b162:	9a00      	ldr	r2, [sp, #0]
    b164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b168:	4a06      	ldr	r2, [pc, #24]	; (b184 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
    b16a:	9b01      	ldr	r3, [sp, #4]
    b16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b170:	1c5a      	adds	r2, r3, #1
    b172:	4904      	ldr	r1, [pc, #16]	; (b184 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
    b174:	9b01      	ldr	r3, [sp, #4]
    b176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b17a:	bf00      	nop
    b17c:	b003      	add	sp, #12
    b17e:	f85d fb04 	ldr.w	pc, [sp], #4
    b182:	bf00      	nop
    b184:	1fff92c0 	.word	0x1fff92c0
    b188:	1fff92bc 	.word	0x1fff92bc

0000b18c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:
    b18c:	b500      	push	{lr}
    b18e:	b083      	sub	sp, #12
    b190:	f7f5 fc9e 	bl	ad0 <Sys_GetCoreID>
    b194:	4603      	mov	r3, r0
    b196:	9301      	str	r3, [sp, #4]
    b198:	4a0d      	ldr	r2, [pc, #52]	; (b1d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
    b19a:	9b01      	ldr	r3, [sp, #4]
    b19c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1a0:	1e5a      	subs	r2, r3, #1
    b1a2:	490b      	ldr	r1, [pc, #44]	; (b1d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
    b1a4:	9b01      	ldr	r3, [sp, #4]
    b1a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b1aa:	4a0a      	ldr	r2, [pc, #40]	; (b1d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
    b1ac:	9b01      	ldr	r3, [sp, #4]
    b1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1b2:	f003 0301 	and.w	r3, r3, #1
    b1b6:	2b00      	cmp	r3, #0
    b1b8:	d106      	bne.n	b1c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    b1ba:	4a05      	ldr	r2, [pc, #20]	; (b1d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
    b1bc:	9b01      	ldr	r3, [sp, #4]
    b1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1c2:	2b00      	cmp	r3, #0
    b1c4:	d100      	bne.n	b1c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    b1c6:	b662      	cpsie	i
    b1c8:	bf00      	nop
    b1ca:	b003      	add	sp, #12
    b1cc:	f85d fb04 	ldr.w	pc, [sp], #4
    b1d0:	1fff92c0 	.word	0x1fff92c0
    b1d4:	1fff92bc 	.word	0x1fff92bc

0000b1d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:
    b1d8:	b500      	push	{lr}
    b1da:	b083      	sub	sp, #12
    b1dc:	f7f5 fc78 	bl	ad0 <Sys_GetCoreID>
    b1e0:	4603      	mov	r3, r0
    b1e2:	9301      	str	r3, [sp, #4]
    b1e4:	4a10      	ldr	r2, [pc, #64]	; (b228 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
    b1e6:	9b01      	ldr	r3, [sp, #4]
    b1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1ec:	2b00      	cmp	r3, #0
    b1ee:	d10d      	bne.n	b20c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    b1f0:	f7f5 fb9e 	bl	930 <Pwm_schm_read_msr>
    b1f4:	9000      	str	r0, [sp, #0]
    b1f6:	9b00      	ldr	r3, [sp, #0]
    b1f8:	f003 0301 	and.w	r3, r3, #1
    b1fc:	2b00      	cmp	r3, #0
    b1fe:	d100      	bne.n	b202 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
    b200:	b672      	cpsid	i
    b202:	490a      	ldr	r1, [pc, #40]	; (b22c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
    b204:	9b01      	ldr	r3, [sp, #4]
    b206:	9a00      	ldr	r2, [sp, #0]
    b208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b20c:	4a06      	ldr	r2, [pc, #24]	; (b228 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
    b20e:	9b01      	ldr	r3, [sp, #4]
    b210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b214:	1c5a      	adds	r2, r3, #1
    b216:	4904      	ldr	r1, [pc, #16]	; (b228 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
    b218:	9b01      	ldr	r3, [sp, #4]
    b21a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b21e:	bf00      	nop
    b220:	b003      	add	sp, #12
    b222:	f85d fb04 	ldr.w	pc, [sp], #4
    b226:	bf00      	nop
    b228:	1fff92c8 	.word	0x1fff92c8
    b22c:	1fff92c4 	.word	0x1fff92c4

0000b230 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:
    b230:	b500      	push	{lr}
    b232:	b083      	sub	sp, #12
    b234:	f7f5 fc4c 	bl	ad0 <Sys_GetCoreID>
    b238:	4603      	mov	r3, r0
    b23a:	9301      	str	r3, [sp, #4]
    b23c:	4a0d      	ldr	r2, [pc, #52]	; (b274 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
    b23e:	9b01      	ldr	r3, [sp, #4]
    b240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b244:	1e5a      	subs	r2, r3, #1
    b246:	490b      	ldr	r1, [pc, #44]	; (b274 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
    b248:	9b01      	ldr	r3, [sp, #4]
    b24a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b24e:	4a0a      	ldr	r2, [pc, #40]	; (b278 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
    b250:	9b01      	ldr	r3, [sp, #4]
    b252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b256:	f003 0301 	and.w	r3, r3, #1
    b25a:	2b00      	cmp	r3, #0
    b25c:	d106      	bne.n	b26c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    b25e:	4a05      	ldr	r2, [pc, #20]	; (b274 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
    b260:	9b01      	ldr	r3, [sp, #4]
    b262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b266:	2b00      	cmp	r3, #0
    b268:	d100      	bne.n	b26c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    b26a:	b662      	cpsie	i
    b26c:	bf00      	nop
    b26e:	b003      	add	sp, #12
    b270:	f85d fb04 	ldr.w	pc, [sp], #4
    b274:	1fff92c8 	.word	0x1fff92c8
    b278:	1fff92c4 	.word	0x1fff92c4

0000b27c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:
    b27c:	b500      	push	{lr}
    b27e:	b083      	sub	sp, #12
    b280:	f7f5 fc26 	bl	ad0 <Sys_GetCoreID>
    b284:	4603      	mov	r3, r0
    b286:	9301      	str	r3, [sp, #4]
    b288:	4a10      	ldr	r2, [pc, #64]	; (b2cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
    b28a:	9b01      	ldr	r3, [sp, #4]
    b28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b290:	2b00      	cmp	r3, #0
    b292:	d10d      	bne.n	b2b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    b294:	f7f5 fb4c 	bl	930 <Pwm_schm_read_msr>
    b298:	9000      	str	r0, [sp, #0]
    b29a:	9b00      	ldr	r3, [sp, #0]
    b29c:	f003 0301 	and.w	r3, r3, #1
    b2a0:	2b00      	cmp	r3, #0
    b2a2:	d100      	bne.n	b2a6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
    b2a4:	b672      	cpsid	i
    b2a6:	490a      	ldr	r1, [pc, #40]	; (b2d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
    b2a8:	9b01      	ldr	r3, [sp, #4]
    b2aa:	9a00      	ldr	r2, [sp, #0]
    b2ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b2b0:	4a06      	ldr	r2, [pc, #24]	; (b2cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
    b2b2:	9b01      	ldr	r3, [sp, #4]
    b2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2b8:	1c5a      	adds	r2, r3, #1
    b2ba:	4904      	ldr	r1, [pc, #16]	; (b2cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
    b2bc:	9b01      	ldr	r3, [sp, #4]
    b2be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b2c2:	bf00      	nop
    b2c4:	b003      	add	sp, #12
    b2c6:	f85d fb04 	ldr.w	pc, [sp], #4
    b2ca:	bf00      	nop
    b2cc:	1fff92d0 	.word	0x1fff92d0
    b2d0:	1fff92cc 	.word	0x1fff92cc

0000b2d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:
    b2d4:	b500      	push	{lr}
    b2d6:	b083      	sub	sp, #12
    b2d8:	f7f5 fbfa 	bl	ad0 <Sys_GetCoreID>
    b2dc:	4603      	mov	r3, r0
    b2de:	9301      	str	r3, [sp, #4]
    b2e0:	4a0d      	ldr	r2, [pc, #52]	; (b318 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
    b2e2:	9b01      	ldr	r3, [sp, #4]
    b2e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2e8:	1e5a      	subs	r2, r3, #1
    b2ea:	490b      	ldr	r1, [pc, #44]	; (b318 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
    b2ec:	9b01      	ldr	r3, [sp, #4]
    b2ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b2f2:	4a0a      	ldr	r2, [pc, #40]	; (b31c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
    b2f4:	9b01      	ldr	r3, [sp, #4]
    b2f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2fa:	f003 0301 	and.w	r3, r3, #1
    b2fe:	2b00      	cmp	r3, #0
    b300:	d106      	bne.n	b310 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    b302:	4a05      	ldr	r2, [pc, #20]	; (b318 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
    b304:	9b01      	ldr	r3, [sp, #4]
    b306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b30a:	2b00      	cmp	r3, #0
    b30c:	d100      	bne.n	b310 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    b30e:	b662      	cpsie	i
    b310:	bf00      	nop
    b312:	b003      	add	sp, #12
    b314:	f85d fb04 	ldr.w	pc, [sp], #4
    b318:	1fff92d0 	.word	0x1fff92d0
    b31c:	1fff92cc 	.word	0x1fff92cc

0000b320 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:
    b320:	b500      	push	{lr}
    b322:	b083      	sub	sp, #12
    b324:	f7f5 fbd4 	bl	ad0 <Sys_GetCoreID>
    b328:	4603      	mov	r3, r0
    b32a:	9301      	str	r3, [sp, #4]
    b32c:	4a10      	ldr	r2, [pc, #64]	; (b370 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
    b32e:	9b01      	ldr	r3, [sp, #4]
    b330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b334:	2b00      	cmp	r3, #0
    b336:	d10d      	bne.n	b354 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    b338:	f7f5 fafa 	bl	930 <Pwm_schm_read_msr>
    b33c:	9000      	str	r0, [sp, #0]
    b33e:	9b00      	ldr	r3, [sp, #0]
    b340:	f003 0301 	and.w	r3, r3, #1
    b344:	2b00      	cmp	r3, #0
    b346:	d100      	bne.n	b34a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
    b348:	b672      	cpsid	i
    b34a:	490a      	ldr	r1, [pc, #40]	; (b374 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
    b34c:	9b01      	ldr	r3, [sp, #4]
    b34e:	9a00      	ldr	r2, [sp, #0]
    b350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b354:	4a06      	ldr	r2, [pc, #24]	; (b370 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
    b356:	9b01      	ldr	r3, [sp, #4]
    b358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b35c:	1c5a      	adds	r2, r3, #1
    b35e:	4904      	ldr	r1, [pc, #16]	; (b370 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
    b360:	9b01      	ldr	r3, [sp, #4]
    b362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b366:	bf00      	nop
    b368:	b003      	add	sp, #12
    b36a:	f85d fb04 	ldr.w	pc, [sp], #4
    b36e:	bf00      	nop
    b370:	1fff92d8 	.word	0x1fff92d8
    b374:	1fff92d4 	.word	0x1fff92d4

0000b378 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:
    b378:	b500      	push	{lr}
    b37a:	b083      	sub	sp, #12
    b37c:	f7f5 fba8 	bl	ad0 <Sys_GetCoreID>
    b380:	4603      	mov	r3, r0
    b382:	9301      	str	r3, [sp, #4]
    b384:	4a0d      	ldr	r2, [pc, #52]	; (b3bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
    b386:	9b01      	ldr	r3, [sp, #4]
    b388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b38c:	1e5a      	subs	r2, r3, #1
    b38e:	490b      	ldr	r1, [pc, #44]	; (b3bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
    b390:	9b01      	ldr	r3, [sp, #4]
    b392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b396:	4a0a      	ldr	r2, [pc, #40]	; (b3c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
    b398:	9b01      	ldr	r3, [sp, #4]
    b39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b39e:	f003 0301 	and.w	r3, r3, #1
    b3a2:	2b00      	cmp	r3, #0
    b3a4:	d106      	bne.n	b3b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    b3a6:	4a05      	ldr	r2, [pc, #20]	; (b3bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
    b3a8:	9b01      	ldr	r3, [sp, #4]
    b3aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3ae:	2b00      	cmp	r3, #0
    b3b0:	d100      	bne.n	b3b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    b3b2:	b662      	cpsie	i
    b3b4:	bf00      	nop
    b3b6:	b003      	add	sp, #12
    b3b8:	f85d fb04 	ldr.w	pc, [sp], #4
    b3bc:	1fff92d8 	.word	0x1fff92d8
    b3c0:	1fff92d4 	.word	0x1fff92d4

0000b3c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:
    b3c4:	b500      	push	{lr}
    b3c6:	b083      	sub	sp, #12
    b3c8:	f7f5 fb82 	bl	ad0 <Sys_GetCoreID>
    b3cc:	4603      	mov	r3, r0
    b3ce:	9301      	str	r3, [sp, #4]
    b3d0:	4a10      	ldr	r2, [pc, #64]	; (b414 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
    b3d2:	9b01      	ldr	r3, [sp, #4]
    b3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3d8:	2b00      	cmp	r3, #0
    b3da:	d10d      	bne.n	b3f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    b3dc:	f7f5 faa8 	bl	930 <Pwm_schm_read_msr>
    b3e0:	9000      	str	r0, [sp, #0]
    b3e2:	9b00      	ldr	r3, [sp, #0]
    b3e4:	f003 0301 	and.w	r3, r3, #1
    b3e8:	2b00      	cmp	r3, #0
    b3ea:	d100      	bne.n	b3ee <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
    b3ec:	b672      	cpsid	i
    b3ee:	490a      	ldr	r1, [pc, #40]	; (b418 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
    b3f0:	9b01      	ldr	r3, [sp, #4]
    b3f2:	9a00      	ldr	r2, [sp, #0]
    b3f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b3f8:	4a06      	ldr	r2, [pc, #24]	; (b414 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
    b3fa:	9b01      	ldr	r3, [sp, #4]
    b3fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b400:	1c5a      	adds	r2, r3, #1
    b402:	4904      	ldr	r1, [pc, #16]	; (b414 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
    b404:	9b01      	ldr	r3, [sp, #4]
    b406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b40a:	bf00      	nop
    b40c:	b003      	add	sp, #12
    b40e:	f85d fb04 	ldr.w	pc, [sp], #4
    b412:	bf00      	nop
    b414:	1fff92e0 	.word	0x1fff92e0
    b418:	1fff92dc 	.word	0x1fff92dc

0000b41c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:
    b41c:	b500      	push	{lr}
    b41e:	b083      	sub	sp, #12
    b420:	f7f5 fb56 	bl	ad0 <Sys_GetCoreID>
    b424:	4603      	mov	r3, r0
    b426:	9301      	str	r3, [sp, #4]
    b428:	4a0d      	ldr	r2, [pc, #52]	; (b460 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
    b42a:	9b01      	ldr	r3, [sp, #4]
    b42c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b430:	1e5a      	subs	r2, r3, #1
    b432:	490b      	ldr	r1, [pc, #44]	; (b460 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
    b434:	9b01      	ldr	r3, [sp, #4]
    b436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b43a:	4a0a      	ldr	r2, [pc, #40]	; (b464 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
    b43c:	9b01      	ldr	r3, [sp, #4]
    b43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b442:	f003 0301 	and.w	r3, r3, #1
    b446:	2b00      	cmp	r3, #0
    b448:	d106      	bne.n	b458 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    b44a:	4a05      	ldr	r2, [pc, #20]	; (b460 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
    b44c:	9b01      	ldr	r3, [sp, #4]
    b44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b452:	2b00      	cmp	r3, #0
    b454:	d100      	bne.n	b458 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    b456:	b662      	cpsie	i
    b458:	bf00      	nop
    b45a:	b003      	add	sp, #12
    b45c:	f85d fb04 	ldr.w	pc, [sp], #4
    b460:	1fff92e0 	.word	0x1fff92e0
    b464:	1fff92dc 	.word	0x1fff92dc

0000b468 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:
    b468:	b500      	push	{lr}
    b46a:	b083      	sub	sp, #12
    b46c:	f7f5 fb30 	bl	ad0 <Sys_GetCoreID>
    b470:	4603      	mov	r3, r0
    b472:	9301      	str	r3, [sp, #4]
    b474:	4a10      	ldr	r2, [pc, #64]	; (b4b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
    b476:	9b01      	ldr	r3, [sp, #4]
    b478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b47c:	2b00      	cmp	r3, #0
    b47e:	d10d      	bne.n	b49c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    b480:	f7f5 fa56 	bl	930 <Pwm_schm_read_msr>
    b484:	9000      	str	r0, [sp, #0]
    b486:	9b00      	ldr	r3, [sp, #0]
    b488:	f003 0301 	and.w	r3, r3, #1
    b48c:	2b00      	cmp	r3, #0
    b48e:	d100      	bne.n	b492 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
    b490:	b672      	cpsid	i
    b492:	490a      	ldr	r1, [pc, #40]	; (b4bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
    b494:	9b01      	ldr	r3, [sp, #4]
    b496:	9a00      	ldr	r2, [sp, #0]
    b498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b49c:	4a06      	ldr	r2, [pc, #24]	; (b4b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
    b49e:	9b01      	ldr	r3, [sp, #4]
    b4a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4a4:	1c5a      	adds	r2, r3, #1
    b4a6:	4904      	ldr	r1, [pc, #16]	; (b4b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
    b4a8:	9b01      	ldr	r3, [sp, #4]
    b4aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b4ae:	bf00      	nop
    b4b0:	b003      	add	sp, #12
    b4b2:	f85d fb04 	ldr.w	pc, [sp], #4
    b4b6:	bf00      	nop
    b4b8:	1fff92e8 	.word	0x1fff92e8
    b4bc:	1fff92e4 	.word	0x1fff92e4

0000b4c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:
    b4c0:	b500      	push	{lr}
    b4c2:	b083      	sub	sp, #12
    b4c4:	f7f5 fb04 	bl	ad0 <Sys_GetCoreID>
    b4c8:	4603      	mov	r3, r0
    b4ca:	9301      	str	r3, [sp, #4]
    b4cc:	4a0d      	ldr	r2, [pc, #52]	; (b504 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
    b4ce:	9b01      	ldr	r3, [sp, #4]
    b4d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4d4:	1e5a      	subs	r2, r3, #1
    b4d6:	490b      	ldr	r1, [pc, #44]	; (b504 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
    b4d8:	9b01      	ldr	r3, [sp, #4]
    b4da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b4de:	4a0a      	ldr	r2, [pc, #40]	; (b508 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
    b4e0:	9b01      	ldr	r3, [sp, #4]
    b4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4e6:	f003 0301 	and.w	r3, r3, #1
    b4ea:	2b00      	cmp	r3, #0
    b4ec:	d106      	bne.n	b4fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    b4ee:	4a05      	ldr	r2, [pc, #20]	; (b504 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
    b4f0:	9b01      	ldr	r3, [sp, #4]
    b4f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4f6:	2b00      	cmp	r3, #0
    b4f8:	d100      	bne.n	b4fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    b4fa:	b662      	cpsie	i
    b4fc:	bf00      	nop
    b4fe:	b003      	add	sp, #12
    b500:	f85d fb04 	ldr.w	pc, [sp], #4
    b504:	1fff92e8 	.word	0x1fff92e8
    b508:	1fff92e4 	.word	0x1fff92e4

0000b50c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:
    b50c:	b500      	push	{lr}
    b50e:	b083      	sub	sp, #12
    b510:	f7f5 fade 	bl	ad0 <Sys_GetCoreID>
    b514:	4603      	mov	r3, r0
    b516:	9301      	str	r3, [sp, #4]
    b518:	4a10      	ldr	r2, [pc, #64]	; (b55c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
    b51a:	9b01      	ldr	r3, [sp, #4]
    b51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b520:	2b00      	cmp	r3, #0
    b522:	d10d      	bne.n	b540 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    b524:	f7f5 fa04 	bl	930 <Pwm_schm_read_msr>
    b528:	9000      	str	r0, [sp, #0]
    b52a:	9b00      	ldr	r3, [sp, #0]
    b52c:	f003 0301 	and.w	r3, r3, #1
    b530:	2b00      	cmp	r3, #0
    b532:	d100      	bne.n	b536 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
    b534:	b672      	cpsid	i
    b536:	490a      	ldr	r1, [pc, #40]	; (b560 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
    b538:	9b01      	ldr	r3, [sp, #4]
    b53a:	9a00      	ldr	r2, [sp, #0]
    b53c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b540:	4a06      	ldr	r2, [pc, #24]	; (b55c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
    b542:	9b01      	ldr	r3, [sp, #4]
    b544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b548:	1c5a      	adds	r2, r3, #1
    b54a:	4904      	ldr	r1, [pc, #16]	; (b55c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
    b54c:	9b01      	ldr	r3, [sp, #4]
    b54e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b552:	bf00      	nop
    b554:	b003      	add	sp, #12
    b556:	f85d fb04 	ldr.w	pc, [sp], #4
    b55a:	bf00      	nop
    b55c:	1fff92f0 	.word	0x1fff92f0
    b560:	1fff92ec 	.word	0x1fff92ec

0000b564 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:
    b564:	b500      	push	{lr}
    b566:	b083      	sub	sp, #12
    b568:	f7f5 fab2 	bl	ad0 <Sys_GetCoreID>
    b56c:	4603      	mov	r3, r0
    b56e:	9301      	str	r3, [sp, #4]
    b570:	4a0d      	ldr	r2, [pc, #52]	; (b5a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
    b572:	9b01      	ldr	r3, [sp, #4]
    b574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b578:	1e5a      	subs	r2, r3, #1
    b57a:	490b      	ldr	r1, [pc, #44]	; (b5a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
    b57c:	9b01      	ldr	r3, [sp, #4]
    b57e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b582:	4a0a      	ldr	r2, [pc, #40]	; (b5ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
    b584:	9b01      	ldr	r3, [sp, #4]
    b586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b58a:	f003 0301 	and.w	r3, r3, #1
    b58e:	2b00      	cmp	r3, #0
    b590:	d106      	bne.n	b5a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    b592:	4a05      	ldr	r2, [pc, #20]	; (b5a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
    b594:	9b01      	ldr	r3, [sp, #4]
    b596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b59a:	2b00      	cmp	r3, #0
    b59c:	d100      	bne.n	b5a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    b59e:	b662      	cpsie	i
    b5a0:	bf00      	nop
    b5a2:	b003      	add	sp, #12
    b5a4:	f85d fb04 	ldr.w	pc, [sp], #4
    b5a8:	1fff92f0 	.word	0x1fff92f0
    b5ac:	1fff92ec 	.word	0x1fff92ec

0000b5b0 <Clock_Ip_au8DividerCallbackIndex>:
    b5b0:	0e0d0c00 06030201 0a070409 000b0805     ................

0000b5c0 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000b5d0 <Clock_Ip_au8XoscCallbackIndex>:
    b5d0:	00000100 00000000 00000000 00000000     ................

0000b5e0 <Clock_Ip_au8IrcoscCallbackIndex>:
    b5e0:	03020100 00000004 00000000 00000000     ................

0000b5f0 <Clock_Ip_au8GateCallbackIndex>:
    b5f0:	06010200 01040301 00000500 00000000     ................

0000b600 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000b610 <Clock_Ip_au8PllCallbackIndex>:
    b610:	00000100 00000000 00000000 00000000     ................

0000b620 <Clock_Ip_au8SelectorCallbackIndex>:
    b620:	0a090800 03020109 07060504 00000000     ................

0000b630 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000b640 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000b650 <Clock_Ip_au8ClockFeatures>:
	...
    b660:	01000000 00000000 00000000 00000002     ................
    b670:	00000000 00000300 00000000 00040000     ................
    b680:	00000000 05000000 00000000 00000000     ................
    b690:	00000006 00000000 00000100 00000000     ................
    b6a0:	00010000 00000000 04000000 00000000     ................
    b6b0:	00000000 00000005 00000001 00000401     ................
    b6c0:	00000200 00050100 00030000 04020000     ................
    b6d0:	04000000 02000000 00000005 00000005     ................
    b6e0:	00000403 00000600 00050300 00070000     ................
    b6f0:	05000000 00000000 00000000 00000006     ................
	...
    b730:	00050000 00000000 06000000 00000100     ................
    b740:	00000000 00030007 00000000 00000000     ................
    b750:	00000000 00060000 00000000 07000000     ................
    b760:	00000100 00000000 00030008 00000000     ................
	...
    b778:	00090000 00000000 0a000000 00000100     ................
    b788:	00000000 0003000b 00000000 00000000     ................
    b798:	00000000 000c0000 00000000 0d000000     ................
    b7a8:	00000100 00000000 0003000e 00000000     ................
    b7b8:	00000800 00000000 00090000 00000000     ................
    b7c8:	0a000000 00000000 00000000 0000000b     ................
    b7d8:	00000000 00000b01 00000000 000b0200     ................
    b7e8:	00000000 0b030000 00000000 00000000     ................
	...
    b800:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    b810:	01000000 00000000 00000000 00000007     ................
    b820:	00007300 00000700 00320000 00090000     .s........2.....
    b830:	02000000 07000000 00000000 00000021     ............!...
    b840:	00000009 00000400 00000900 00030000     ................
    b850:	00070000 61000000 07000000 00000000     .......a........
    b860:	00000024 00000007 00002500 00000700     $........%......
    b870:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    b880:	00000000 00000020 38000004 00003800     .... ......8.8..
    b890:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    b8a0:	04000000 00260000 00000026 66000004     ......&.&......f
    b8b0:	00006600 00000400 00370037 00040000     .f......7.7.....
    b8c0:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    b8d0:	2e000004 00002e00 00000200 00404040     ............@@@.
    b8e0:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    b8f0:	0000006b 6c000004 00006c00 00000900     k......l.l......
    b900:	00010000 00090000 00000000 07000000     ................
    b910:	00000000 00000036 00000007 00003100     ....6........1..
    b920:	00000700 00490000 00070000 4a000000     ......I........J
    b930:	07000000 00000000 0000004b 00000007     ........K.......
    b940:	00004c00 00000700 004d0000 00070000     .L........M.....
    b950:	3d000000 03000000 00000000 00000000     ...=............

0000b960 <Clock_Ip_au16SelectorEntryHardwareValue>:
    b960:	01010a03 01010001 04040002 02000603     ................
    b970:	00010810 02020100 00000000 00000007     ................
    b980:	00000009 00000000 00000c0e 00000000     ................
	...

0000b9b8 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    b9b8:	00020000 00000300 00000601 00000000     ................
	...

0000b9e8 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    b9e8:	00000700 00000000 02020000 01010303     ................
    b9f8:	03020606 00000000 00000000 00000000     ................
	...

0000ba18 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    ba18:	00000001 00000000 02020000 01010303     ................
    ba28:	03020606 00000000 00000000 00000000     ................
	...

0000ba48 <Clock_Ip_au8DividerValueHardwareValue>:
    ba48:	00020100 00000003 00000004 00000000     ................
    ba58:	00000005 00000000 00000000 00000000     ................
    ba68:	00000006 00000000 00000000 00000000     ................
	...
    ba88:	00000007                                ....

0000ba8c <Clock_Ip_apxScgPeriphAsyncDivs>:
    ba8c:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000ba9c <Clock_Ip_aeSourceTypeClockName>:
    ba9c:	00000000 00000001 00000001 00000001     ................
    baac:	00000001 00000001 00000001 00000001     ................
    babc:	00000002 00000003 00000001 00000001     ................
    bacc:	00000001 00000001 00000002 00000002     ................
    badc:	00000003 00000003 00000001 00000001     ................
    baec:	00000004 00000004 00000004 00000004     ................
	...

0000bb58 <Clock_Ip_aeHwPllName>:
    bb58:	00000009                                ....

0000bb5c <Clock_Ip_aeHwDfsName>:
    bb5c:	00000057                                W...

0000bb60 <Clock_Ip_axDividerCallbacks>:
    bb60:	00001be5 00001bef 00001c09 00001c23     ............#...
    bb70:	00001c3d 00001c57 00001c71 00001c8b     =...W...q.......
    bb80:	00001ca5 00001cbf 00001cd9 00001cf3     ................
    bb90:	00001d0d 00001d27 00001d41              ....'...A...

0000bb9c <Clock_Ip_axDividerTriggerCallbacks>:
    bb9c:	000020b5 000020b5                       . ... ..

0000bba4 <Clock_Ip_axExtOscCallbacks>:
    bba4:	000020c1 000020c1 000020c1 000020cb     . ... ... ... ..
    bbb4:	000020c1 000020d5 000020ef 00002109     . ... ... ...!..
    bbc4:	0000218d 000021a1                       .!...!..

0000bbcc <Clock_Ip_axFracDivCallbacks>:
    bbcc:	00002361 00002361 0000236b              a#..a#..k#..

0000bbd8 <Clock_Ip_axGateCallbacks>:
    bbd8:	00002385 0000238f 0000248f 000024a9     .#...#...$...$..
    bbe8:	0000243f 00002459 000023ef 00002409     ?$..Y$...#...$..
    bbf8:	0000239f 000023b9 000024df 000024f9     .#...#...$...$..
    bc08:	0000252f 00002549                       /%..I%..

0000bc10 <Clock_Ip_axIntOscCallbacks>:
    bc10:	000026f5 000026f5 000026ff 00002709     .&...&...&...'..
    bc20:	00002723 0000273d 00002751 0000276b     #'..='..Q'..k'..
    bc30:	00002785 00002799 000027b3 000027cd     .'...'...'...'..
    bc40:	00002875 0000288f 000028a9              u(...(...(..

0000bc4c <Clock_Ip_axCmuCallbacks>:
    bc4c:	00002e45 00002e4f 00002e5b 00002e45     E...O...[...E...

0000bc5c <Clock_Ip_axPllCallbacks>:
    bc5c:	00002e65 00002e65 00002e6f 00002e65     e...e...o...e...
    bc6c:	00002e7b 00002e85 00002e9f 00002eb9     {...............
    bc7c:	00002f5d 00002f49                       ]/..I/..

0000bc84 <Clock_Ip_axPcfsCallbacks>:
    bc84:	000030b9                                .0..

0000bc88 <Clock_Ip_axSelectorCallbacks>:
    bc88:	000030c5 000030c5 000030cf 000030e9     .0...0...0...0..
    bc98:	000030c5 00003103 0000311d 00003137     .0...1...1..71..
    bca8:	00003151 0000316b 00003185 0000319f     Q1..k1...1...1..
    bcb8:	000031b9 000031d3 000031ed 00003207     .1...1...1...2..
    bcc8:	00003221 0000323b 00003255 0000326f     !2..;2..U2..o2..
    bcd8:	00003289 000032a3                       .2...2..

0000bce0 <ClockSource>:
    bce0:	00000000 00000008 00000002 00000005     ................
	...
    bcf8:	00000009                                ....

0000bcfc <ResetReasonArray>:
    bcfc:	00000000 00000001 00000002 00000003     ................
    bd0c:	00000004 00000005 00000006 00000007     ................
    bd1c:	00000008 00000009 0000000a 0000000b     ................
    bd2c:	0000000c 0000000d 0000000e              ............

0000bd38 <Port_au32PortCiPortBaseAddr>:
    bd38:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    bd48:	4004d000                                ...@

0000bd4c <Port_au32PortCiGpioBaseAddr>:
    bd4c:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    bd5c:	400ff100                                ...@

0000bd60 <Ftm_Pwm_Ip_aFtmBase>:
    bd60:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

0000bd70 <Mcu_aClockConfigPB>:
	...
    bd78:	1c000102 04000012 01000029 00000002     ........).......
    bd88:	01000001 00000001 00000005 00000001     ................
    bd98:	00000000 00000008 007a1200 00000001     ..........z.....
    bda8:	00000001 00000000 00000057 00000000     ........W.......
    bdb8:	00000057 00000000 00000000 00000000     W...............
	...
    bdd8:	00000019 00000005 0000001a 00000002     ................
    bde8:	0000001b 00000005 0000002a 00000005     ........*.......
    bdf8:	00000028 0000000e 00000029 00000001     (.......).......
    be08:	00000056 0000001c 00000032 0000002a     V.......2...*...
    be18:	0000002b 00000014 0000002c 00000014     +.......,.......
    be28:	0000002d 00000014 0000002e 00000014     -...............
    be38:	0000003f 0000000a 00000040 0000000a     ?.......@.......
    be48:	00000041 00000000 00000042 00000000     A.......B.......
    be58:	00000031 00000000 00000045 00000000     1.......E.......
    be68:	00000046 00000000 00000047 00000000     F.......G.......
    be78:	00000044 00000000 00000030 00000000     D.......0.......
    be88:	0000003d 00000000 00000043 00000000     =.......C.......
    be98:	00000049 00000000 0000004a 00000000     I.......J.......
    bea8:	0000004b 00000000 00000048 00000000     K.......H.......
    beb8:	0000000a 00000001 00000000 0000000b     ................
    bec8:	00000002 00000000 0000000c 00000001     ................
    bed8:	00000000 0000000d 00000002 00000000     ................
    bee8:	0000000e 00000001 00000000 0000000f     ................
    bef8:	00000001 00000000 0000001d 00000001     ................
    bf08:	00000000 0000001e 00000008 00000000     ................
    bf18:	0000001f 00000001 00000000 00000021     ............!...
    bf28:	00000001 00000000 00000022 00000002     ........".......
    bf38:	00000000 00000023 00000001 00000000     ....#...........
    bf48:	00000025 00000003 00000000 00000026     %...........&...
    bf58:	00000004 00000000 00000027 00000002     ........'.......
    bf68:	00000000 00000032 00000001 00000000     ....2...........
    bf78:	00000048 00000001 00000001 00000056     H...........V...
    bf88:	00000001 00000001 00000057 00000000     ........W.......
    bf98:	00000000 00000057 00000000 00000000     ....W...........
    bfa8:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    bfc4:	00000014 00007d00 00000015 00007d00     .....}.......}..
    bfd4:	00000016 00007d00 00000017 00008000     .....}..........
    bfe4:	00000012 00000001 00000013 00000001     ................
    bff4:	00000030 00000000 00000031 00000000     0.......1.......
    c004:	00000032 00000000 00000033 00000000     2.......3.......
    c014:	00000034 00000000 00000035 00000001     4.......5.......
    c024:	00000036 00000000 00000037 00000001     6.......7.......
    c034:	00000038 00000001 00000039 00000000     8.......9.......
    c044:	0000003a 00000000 0000003b 00000000     :.......;.......
    c054:	0000003c 00000000 0000003d 00000000     <.......=.......
    c064:	0000003e 00000000 0000003f 00000001     >.......?.......
    c074:	00000040 00000001 00000041 00000000     @.......A.......
    c084:	00000042 00000000 00000043 00000000     B.......C.......
    c094:	00000044 00000000 00000045 00000000     D.......E.......
    c0a4:	00000046 00000000 00000047 00000000     F.......G.......
    c0b4:	00000048 00000000 00000049 00000000     H.......I.......
    c0c4:	0000004a 00000000 0000004b 00000000     J.......K.......
    c0d4:	0000004c 00000001 0000004d 00000001     L.......M.......
    c0e4:	0000004e 00000000 0000004f 00000000     N.......O.......
    c0f4:	00000050 00000001 00000051 00000001     P.......Q.......
    c104:	00000052 00000001 00000053 00000001     R.......S.......
    c114:	00000054 00000001 00000055 00000000     T.......U.......
    c124:	00000056 00000001 00000057 00000000     V.......W.......
    c134:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0000c168 <Ftm_Pwm_Ip_SyncCfg0>:
	...
    c184:	00000003 00000003                       ........

0000c18c <Ftm_Pwm_Ip_InstCfg0>:
    c18c:	00000003 00000007 00000000 00000000     ................
	...
    c1c0:	0000927c 00000001 00000000 00000000     |...............
    c1d0:	00000000 0000c168                       ....h...

0000c1d8 <Ftm_Pwm_Ip_I0_Ch0>:
    c1d8:	00000000 0000000a 00000000 00000000     ................
    c1e8:	00000000 00000001 00000000 00000000     ................
	...

0000c200 <Ftm_Pwm_Ip_I0_ChArray>:
    c200:	0000c1d8                                ....

0000c204 <Ftm_Pwm_Ip_UserCfg0>:
    c204:	0000c18c 0000c200 00000001 00000000     ................
    c214:	00000000                                ....

0000c218 <Ftm_Pwm_Ip_SyncCfg2>:
	...
    c234:	00000003 00000003                       ........

0000c23c <Ftm_Pwm_Ip_InstCfg2>:
    c23c:	00000003 00000007 00000000 00000000     ................
	...
    c270:	0000927c 00000001 00000000 00000000     |...............
    c280:	00000000 0000c218                       ........

0000c288 <Ftm_Pwm_Ip_I2_Ch0>:
    c288:	00000000 0000000a 00000000 00000000     ................
    c298:	00000000 00000001 00000000 00000000     ................
	...

0000c2b0 <Ftm_Pwm_Ip_I2_ChArray>:
    c2b0:	0000c288                                ....

0000c2b4 <Ftm_Pwm_Ip_UserCfg2>:
    c2b4:	0000c23c 0000c2b0 00000001 00000000     <...............
    c2c4:	00000000                                ....

0000c2c8 <Mcu_Config>:
    c2c8:	0000005a 00000000 00000001 00000001     Z...............
    c2d8:	0000c458 0000bd70 0000c464              X...p...d...

0000c2e4 <OsIf_xPredefinedConfig>:
    c2e4:	00000000 02dc6c00                       .....l..

0000c2ec <OsIf_apxPredefinedConfig>:
    c2ec:	0000c2e4                                ....

0000c2f0 <g_pin_mux_InitConfigArr>:
    c2f0:	4004c000 00000000 00000000 00000002     ...@............
    c300:	00000004 00000002 00000000 00000000     ................
	...
    c318:	4004c000 00000000 0000000f 00000002     ...@............
    c328:	00000002 00000002 00000000 00000000     ................
	...

0000c340 <au8Port_PartitionList>:
    c340:	00000001                                ....

0000c344 <au32Port_PinToPartitionMap>:
    c344:	00000001 00000001                       ........

0000c34c <Port_au16NoUnUsedPadsArrayDefault>:
    c34c:	00010000 00030002 00070006 00090008     ................
    c35c:	000c000b 000e000d 0010000f 00200011     .............. .
    c36c:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    c37c:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    c38c:	00400031 00420041 00460043 00480047     1.@.A.B.C.F.G.H.
    c39c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    c3ac:	00610051 00630062 00650064 00670066     Q.a.b.c.d.e.f.g.
    c3bc:	00690068 006b006a 006d006c 0070006e     h.i.j.k.l.m.n.p.
    c3cc:	00800071 00820081 00840083 00860085     q...............
    c3dc:	00880087 008a0089 008c008b 008e008d     ................
    c3ec:	0090008f                                ....

0000c3f0 <Port_UnUsedPin>:
    c3f0:	00000100 00000001 00000000              ............

0000c3fc <Port_aPinConfigDefault>:
    c3fc:	00000060 00000400 00000000 00000002     `...............
    c40c:	00010000 0000006f 00000200 00000000     ....o...........
    c41c:	00000002 00010000                       ........

0000c424 <Port_Config>:
    c424:	00520002 0000c34c 0000c3f0 0000c3fc     ..R.L...........
	...
    c43c:	0000c344 0000c340 0000c2f0              D...@.......

0000c448 <Power_Ip_RCM_ConfigPB>:
	...

0000c450 <Power_Ip_PMC_ConfigPB>:
    c450:	00000000                                ....

0000c454 <Power_Ip_SMC_ConfigPB>:
    c454:	00000000                                ....

0000c458 <Power_Ip_aModeConfigPB>:
	...

0000c464 <Power_Ip_HwIPsConfigPB>:
    c464:	0000c448 0000c450 0000c454              H...P...T...

0000c470 <Pwm_Channels_PB>:
	...
    c478:	00000001 0000c1d8 00000000 00000001     ................
    c488:	00000001 00000000 00000001 0000c288     ................
    c498:	00000002 00000001                       ........

0000c4a0 <Pwm_Instances_PB>:
    c4a0:	00000000 00000001 0000c204 00000002     ................
    c4b0:	00000001 0000c2b4                       ........

0000c4b8 <Pwm_Config>:
    c4b8:	00000002 0000c470 00000002 0000c4a0     ....p...........

0000c4c8 <__INIT_TABLE>:
    c4c8:	00000002 	.word	0x00000002
    c4cc:	1fff8b10 	.word	0x1fff8b10
    c4d0:	0000c4f0 	.word	0x0000c4f0
    c4d4:	0000c51c 	.word	0x0000c51c
    c4d8:	1fff8800 	.word	0x1fff8800
    c4dc:	00000000 	.word	0x00000000
    c4e0:	00000310 	.word	0x00000310

0000c4e4 <__ZERO_TABLE>:
    c4e4:	00000001 	.word	0x00000001
    c4e8:	1fff8b40 	.word	0x1fff8b40
    c4ec:	1fff9300 	.word	0x1fff9300
