
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000b4b 	.word	0x00000b4b
  10:	00000b4d 	.word	0x00000b4d
  14:	00000b4f 	.word	0x00000b4f
  18:	00000b51 	.word	0x00000b51
	...
  2c:	00000b53 	.word	0x00000b53
  30:	00000b55 	.word	0x00000b55
  34:	00000000 	.word	0x00000000
  38:	00000b57 	.word	0x00000b57
  3c:	00000b59 	.word	0x00000b59
  40:	00000b5b 	.word	0x00000b5b
  44:	00000b5b 	.word	0x00000b5b
  48:	00000b5b 	.word	0x00000b5b
  4c:	00000b5b 	.word	0x00000b5b
  50:	00000b5b 	.word	0x00000b5b
  54:	00000b5b 	.word	0x00000b5b
  58:	00000b5b 	.word	0x00000b5b
  5c:	00000b5b 	.word	0x00000b5b
  60:	00000b5b 	.word	0x00000b5b
  64:	00000b5b 	.word	0x00000b5b
  68:	00000b5b 	.word	0x00000b5b
  6c:	00000b5b 	.word	0x00000b5b
  70:	00000b5b 	.word	0x00000b5b
  74:	00000b5b 	.word	0x00000b5b
  78:	00000b5b 	.word	0x00000b5b
  7c:	00000b5b 	.word	0x00000b5b
  80:	00000b5b 	.word	0x00000b5b
  84:	00000b5b 	.word	0x00000b5b
  88:	00000b5b 	.word	0x00000b5b
  8c:	00000b5b 	.word	0x00000b5b
  90:	00000b5b 	.word	0x00000b5b
  94:	00000b5b 	.word	0x00000b5b
  98:	00000b5b 	.word	0x00000b5b
  9c:	00000b5b 	.word	0x00000b5b
  a0:	00000b5b 	.word	0x00000b5b
  a4:	00000b5b 	.word	0x00000b5b
  a8:	00000b5b 	.word	0x00000b5b
  ac:	00000b5b 	.word	0x00000b5b
  b0:	00000b5b 	.word	0x00000b5b
  b4:	00000b5b 	.word	0x00000b5b
  b8:	00000b5b 	.word	0x00000b5b
  bc:	00000b5b 	.word	0x00000b5b
  c0:	00000b5b 	.word	0x00000b5b
  c4:	00000b5b 	.word	0x00000b5b
  c8:	00000b5b 	.word	0x00000b5b
  cc:	00000b5b 	.word	0x00000b5b
  d0:	00000b5b 	.word	0x00000b5b
  d4:	00000b5b 	.word	0x00000b5b
  d8:	00000b5b 	.word	0x00000b5b
  dc:	00000b5b 	.word	0x00000b5b
  e0:	00000b5b 	.word	0x00000b5b
  e4:	00000b5b 	.word	0x00000b5b
  e8:	00000b5b 	.word	0x00000b5b
  ec:	00000b5b 	.word	0x00000b5b
  f0:	00000b5b 	.word	0x00000b5b
  f4:	00000b5b 	.word	0x00000b5b
  f8:	00000b5b 	.word	0x00000b5b
  fc:	00000b5b 	.word	0x00000b5b
 100:	00000b5b 	.word	0x00000b5b
 104:	00000b5b 	.word	0x00000b5b
 108:	00000b5b 	.word	0x00000b5b
 10c:	00000b5b 	.word	0x00000b5b
 110:	00000b5b 	.word	0x00000b5b
 114:	00000b5b 	.word	0x00000b5b
 118:	00000b5b 	.word	0x00000b5b
 11c:	00000b5b 	.word	0x00000b5b
 120:	00000b5b 	.word	0x00000b5b
 124:	00000b5b 	.word	0x00000b5b
 128:	00000b5b 	.word	0x00000b5b
 12c:	00000b5b 	.word	0x00000b5b
 130:	00000b5b 	.word	0x00000b5b
 134:	00000b5b 	.word	0x00000b5b
 138:	00000b5b 	.word	0x00000b5b
 13c:	00000b5b 	.word	0x00000b5b
 140:	00000b5b 	.word	0x00000b5b
 144:	00000b5b 	.word	0x00000b5b
 148:	00000b5b 	.word	0x00000b5b
 14c:	00000b5b 	.word	0x00000b5b
 150:	00000b5b 	.word	0x00000b5b
 154:	00000b5b 	.word	0x00000b5b
 158:	00000b5b 	.word	0x00000b5b
 15c:	00000b5b 	.word	0x00000b5b
 160:	00000b5b 	.word	0x00000b5b
 164:	00000b5b 	.word	0x00000b5b
 168:	00000b5b 	.word	0x00000b5b
 16c:	00000b5b 	.word	0x00000b5b
 170:	00000b5b 	.word	0x00000b5b
 174:	00000b5b 	.word	0x00000b5b
 178:	00000b5b 	.word	0x00000b5b
 17c:	00000b5b 	.word	0x00000b5b
 180:	00000b5b 	.word	0x00000b5b
 184:	00000b5b 	.word	0x00000b5b
 188:	00000b5b 	.word	0x00000b5b
 18c:	00000b5b 	.word	0x00000b5b
 190:	00000b5b 	.word	0x00000b5b
 194:	00000b5b 	.word	0x00000b5b
 198:	00000b5b 	.word	0x00000b5b
 19c:	00000b5b 	.word	0x00000b5b
 1a0:	00000b5b 	.word	0x00000b5b
 1a4:	00000b5b 	.word	0x00000b5b
 1a8:	00000b5b 	.word	0x00000b5b
 1ac:	00000b5b 	.word	0x00000b5b
 1b0:	00000b5b 	.word	0x00000b5b
 1b4:	00000b5b 	.word	0x00000b5b
 1b8:	00000b5b 	.word	0x00000b5b
 1bc:	00000b5b 	.word	0x00000b5b
 1c0:	00000b5b 	.word	0x00000b5b
 1c4:	00000b5b 	.word	0x00000b5b
 1c8:	00000b5b 	.word	0x00000b5b
 1cc:	00000b5b 	.word	0x00000b5b
 1d0:	00000b5b 	.word	0x00000b5b
 1d4:	00000b5b 	.word	0x00000b5b
 1d8:	00000b5b 	.word	0x00000b5b
 1dc:	00000b5b 	.word	0x00000b5b
 1e0:	00000b5b 	.word	0x00000b5b
 1e4:	00000b5b 	.word	0x00000b5b
 1e8:	00000b5b 	.word	0x00000b5b
 1ec:	00000b5b 	.word	0x00000b5b
 1f0:	00000b5b 	.word	0x00000b5b
 1f4:	00000b5b 	.word	0x00000b5b
 1f8:	00000b5b 	.word	0x00000b5b
 1fc:	00000b5b 	.word	0x00000b5b
 200:	00000b5b 	.word	0x00000b5b
 204:	00000b5b 	.word	0x00000b5b
 208:	00000b5b 	.word	0x00000b5b
 20c:	00000b5b 	.word	0x00000b5b
 210:	00000b5b 	.word	0x00000b5b
 214:	00000b5b 	.word	0x00000b5b
 218:	00000b5b 	.word	0x00000b5b
 21c:	00000b5b 	.word	0x00000b5b
 220:	00000b5b 	.word	0x00000b5b
 224:	00000b5b 	.word	0x00000b5b
 228:	00000b5b 	.word	0x00000b5b
 22c:	00000b5b 	.word	0x00000b5b
 230:	00000b5b 	.word	0x00000b5b
 234:	00000b5b 	.word	0x00000b5b
 238:	00000b5b 	.word	0x00000b5b
 23c:	00000b5b 	.word	0x00000b5b
 240:	00000b5b 	.word	0x00000b5b
 244:	00000b5b 	.word	0x00000b5b
 248:	00000b5b 	.word	0x00000b5b
 24c:	00000b5b 	.word	0x00000b5b
 250:	00000b5b 	.word	0x00000b5b
 254:	00000b5b 	.word	0x00000b5b
 258:	00000b5b 	.word	0x00000b5b
 25c:	00000b5b 	.word	0x00000b5b
 260:	00000b5b 	.word	0x00000b5b
 264:	00000b5b 	.word	0x00000b5b
 268:	00000b5b 	.word	0x00000b5b
 26c:	00000b5b 	.word	0x00000b5b
 270:	00000b5b 	.word	0x00000b5b
 274:	00000b5b 	.word	0x00000b5b
 278:	00000b5b 	.word	0x00000b5b
 27c:	00000b5b 	.word	0x00000b5b
 280:	00000b5b 	.word	0x00000b5b
 284:	00000b5b 	.word	0x00000b5b
 288:	00000b5b 	.word	0x00000b5b
 28c:	00000b5b 	.word	0x00000b5b
 290:	00000b5b 	.word	0x00000b5b
 294:	00000b5b 	.word	0x00000b5b
 298:	00000b5b 	.word	0x00000b5b
 29c:	00000b5b 	.word	0x00000b5b
 2a0:	00000b5b 	.word	0x00000b5b
 2a4:	00000b5b 	.word	0x00000b5b
 2a8:	00000b5b 	.word	0x00000b5b
 2ac:	00000b5b 	.word	0x00000b5b
 2b0:	00000b5b 	.word	0x00000b5b
 2b4:	00000b5b 	.word	0x00000b5b
 2b8:	00000b5b 	.word	0x00000b5b
 2bc:	00000b5b 	.word	0x00000b5b
 2c0:	00000b5b 	.word	0x00000b5b
 2c4:	00000b5b 	.word	0x00000b5b
 2c8:	00000b5b 	.word	0x00000b5b
 2cc:	00000b5b 	.word	0x00000b5b
 2d0:	00000b5b 	.word	0x00000b5b
 2d4:	00000b5b 	.word	0x00000b5b
 2d8:	00000b5b 	.word	0x00000b5b
 2dc:	00000b5b 	.word	0x00000b5b
 2e0:	00000b5b 	.word	0x00000b5b
 2e4:	00000b5b 	.word	0x00000b5b
 2e8:	00000b5b 	.word	0x00000b5b
 2ec:	00000b5b 	.word	0x00000b5b
 2f0:	00000b5b 	.word	0x00000b5b
 2f4:	00000b5b 	.word	0x00000b5b
 2f8:	00000b5b 	.word	0x00000b5b
 2fc:	00000b5b 	.word	0x00000b5b
 300:	00000b5b 	.word	0x00000b5b
 304:	00000b5b 	.word	0x00000b5b
 308:	00000b5b 	.word	0x00000b5b
 30c:	00000b5b 	.word	0x00000b5b

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fa99 	bl	9b8 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb58 	bl	b40 <startup_go_to_user_mode>
     490:	f000 fa34 	bl	8fc <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff92f4 	.word	0x1fff92f4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 faa3 	bl	ae4 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0xac>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0xac>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0xb0>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0xb0>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0xa6>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0xe4>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x24>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0xdc>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0xd6>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0xd2>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0xd2>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0xca>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0xca>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0xb8>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0xb4>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0xe8>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0x70>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0xce>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0xce>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0x9e>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0xc6>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0xc6>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x6>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x6>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0x9e>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0x70>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void EcuM_Init( void );

/* This is dummy delay function prepare just for this example, in a real application 
no delay shall be used */
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f000 f9b3 	bl	c2e <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f000 f963 	bl	b96 <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f000 f973 	bl	bc8 <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8fc:	b508      	push	{r3, lr}
    EcuM_Init();
     8fe:	f000 f823 	bl	948 <EcuM_Init>

    while( 1u )
    {
        /*Duty cycle set to 25%*/
        Pwm_SetDutyCycle( PwmChannel_0, 0x2000 );
     902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     906:	2000      	movs	r0, #0
     908:	f007 ffa2 	bl	8850 <Pwm_SetDutyCycle>
        Delay( 10000 );
     90c:	f242 7010 	movw	r0, #10000	; 0x2710
     910:	f7ff ffce 	bl	8b0 <Delay>
        /*Duty cycle set to 50%*/
        Pwm_SetDutyCycle( PwmChannel_0, 0x4000 );
     914:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     918:	2000      	movs	r0, #0
     91a:	f007 ff99 	bl	8850 <Pwm_SetDutyCycle>
        Delay( 10000 );
     91e:	f242 7010 	movw	r0, #10000	; 0x2710
     922:	f7ff ffc5 	bl	8b0 <Delay>
        /*Duty cycle set to 75%*/
        Pwm_SetDutyCycle( PwmChannel_0, 0x6000 );
     926:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
     92a:	2000      	movs	r0, #0
     92c:	f007 ff90 	bl	8850 <Pwm_SetDutyCycle>
        Delay( 10000 );
     930:	f242 7010 	movw	r0, #10000	; 0x2710
     934:	f7ff ffbc 	bl	8b0 <Delay>
        /*Disable the PWM or set to IDLE*/
        Pwm_SetOutputToIdle( PwmChannel_0 );
     938:	2000      	movs	r0, #0
     93a:	f007 ffc1 	bl	88c0 <Pwm_SetOutputToIdle>
        Delay( 20000 );
     93e:	f644 6020 	movw	r0, #20000	; 0x4e20
     942:	f7ff ffb5 	bl	8b0 <Delay>
        Pwm_SetDutyCycle( PwmChannel_0, 0x2000 );
     946:	e7dc      	b.n	902 <main+0x6>

00000948 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     948:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     94a:	480a      	ldr	r0, [pc, #40]	; (974 <EcuM_Init+0x2c>)
     94c:	f003 feb0 	bl	46b0 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     950:	2000      	movs	r0, #0
     952:	f003 ff01 	bl	4758 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     956:	2000      	movs	r0, #0
     958:	f003 ff22 	bl	47a0 <Mcu_SetMode>
    OsIf_Init(NULL_PTR);
     95c:	2000      	movs	r0, #0
     95e:	f000 f911 	bl	b84 <OsIf_Init>
    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin D0 is configured as output*/
    Port_Init( &Port_Config );
     962:	4805      	ldr	r0, [pc, #20]	; (978 <EcuM_Init+0x30>)
     964:	f004 faa6 	bl	4eb4 <Port_Init>
    Pwm_Init( &Pwm_Config );
     968:	4804      	ldr	r0, [pc, #16]	; (97c <EcuM_Init+0x34>)
     96a:	f007 fe57 	bl	861c <Pwm_Init>
}
     96e:	bf00      	nop
     970:	bd08      	pop	{r3, pc}
     972:	bf00      	nop
     974:	0000c29c 	.word	0x0000c29c
     978:	0000c3bc 	.word	0x0000c3bc
     97c:	0000c42c 	.word	0x0000c42c

00000980 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     980:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     982:	f3ef 8310 	mrs	r3, PRIMASK
     986:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     988:	4623      	mov	r3, r4
}
     98a:	4618      	mov	r0, r3
     98c:	f85d 4b04 	ldr.w	r4, [sp], #4
     990:	4770      	bx	lr

00000992 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     992:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     994:	f3ef 8310 	mrs	r3, PRIMASK
     998:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     99a:	4623      	mov	r3, r4
}
     99c:	4618      	mov	r0, r3
     99e:	f85d 4b04 	ldr.w	r4, [sp], #4
     9a2:	4770      	bx	lr

000009a4 <Pwm_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Pwm_schm_read_msr(void)
{
     9a4:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9a6:	f3ef 8310 	mrs	r3, PRIMASK
     9aa:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9ac:	4623      	mov	r3, r4
}
     9ae:	4618      	mov	r0, r3
     9b0:	f85d 4b04 	ldr.w	r4, [sp], #4
     9b4:	4770      	bx	lr
	...

000009b8 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     9b8:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     9ba:	2300      	movs	r3, #0
     9bc:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     9be:	2300      	movs	r3, #0
     9c0:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     9c2:	2300      	movs	r3, #0
     9c4:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     9c6:	2300      	movs	r3, #0
     9c8:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     9ca:	4b44      	ldr	r3, [pc, #272]	; (adc <init_data_bss+0x124>)
     9cc:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     9ce:	4b44      	ldr	r3, [pc, #272]	; (ae0 <init_data_bss+0x128>)
     9d0:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     9d2:	9b05      	ldr	r3, [sp, #20]
     9d4:	681b      	ldr	r3, [r3, #0]
     9d6:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     9d8:	9b05      	ldr	r3, [sp, #20]
     9da:	3304      	adds	r3, #4
     9dc:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     9de:	9b05      	ldr	r3, [sp, #20]
     9e0:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     9e2:	2300      	movs	r3, #0
     9e4:	9309      	str	r3, [sp, #36]	; 0x24
     9e6:	e03d      	b.n	a64 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     9e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9ea:	4613      	mov	r3, r2
     9ec:	005b      	lsls	r3, r3, #1
     9ee:	4413      	add	r3, r2
     9f0:	009b      	lsls	r3, r3, #2
     9f2:	461a      	mov	r2, r3
     9f4:	9b03      	ldr	r3, [sp, #12]
     9f6:	4413      	add	r3, r2
     9f8:	685b      	ldr	r3, [r3, #4]
     9fa:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     9fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9fe:	4613      	mov	r3, r2
     a00:	005b      	lsls	r3, r3, #1
     a02:	4413      	add	r3, r2
     a04:	009b      	lsls	r3, r3, #2
     a06:	461a      	mov	r2, r3
     a08:	9b03      	ldr	r3, [sp, #12]
     a0a:	4413      	add	r3, r2
     a0c:	681b      	ldr	r3, [r3, #0]
     a0e:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a12:	4613      	mov	r3, r2
     a14:	005b      	lsls	r3, r3, #1
     a16:	4413      	add	r3, r2
     a18:	009b      	lsls	r3, r3, #2
     a1a:	461a      	mov	r2, r3
     a1c:	9b03      	ldr	r3, [sp, #12]
     a1e:	4413      	add	r3, r2
     a20:	689b      	ldr	r3, [r3, #8]
     a22:	4619      	mov	r1, r3
     a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a26:	4613      	mov	r3, r2
     a28:	005b      	lsls	r3, r3, #1
     a2a:	4413      	add	r3, r2
     a2c:	009b      	lsls	r3, r3, #2
     a2e:	461a      	mov	r2, r3
     a30:	9b03      	ldr	r3, [sp, #12]
     a32:	4413      	add	r3, r2
     a34:	685b      	ldr	r3, [r3, #4]
     a36:	1acb      	subs	r3, r1, r3
     a38:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a3a:	2300      	movs	r3, #0
     a3c:	9308      	str	r3, [sp, #32]
     a3e:	e00a      	b.n	a56 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     a40:	9a00      	ldr	r2, [sp, #0]
     a42:	9b08      	ldr	r3, [sp, #32]
     a44:	441a      	add	r2, r3
     a46:	9901      	ldr	r1, [sp, #4]
     a48:	9b08      	ldr	r3, [sp, #32]
     a4a:	440b      	add	r3, r1
     a4c:	7812      	ldrb	r2, [r2, #0]
     a4e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     a50:	9b08      	ldr	r3, [sp, #32]
     a52:	3301      	adds	r3, #1
     a54:	9308      	str	r3, [sp, #32]
     a56:	9a08      	ldr	r2, [sp, #32]
     a58:	9b06      	ldr	r3, [sp, #24]
     a5a:	429a      	cmp	r2, r3
     a5c:	d3f0      	bcc.n	a40 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a60:	3301      	adds	r3, #1
     a62:	9309      	str	r3, [sp, #36]	; 0x24
     a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a66:	9b07      	ldr	r3, [sp, #28]
     a68:	429a      	cmp	r2, r3
     a6a:	d3bd      	bcc.n	9e8 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     a6c:	9b04      	ldr	r3, [sp, #16]
     a6e:	681b      	ldr	r3, [r3, #0]
     a70:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     a72:	9b04      	ldr	r3, [sp, #16]
     a74:	3304      	adds	r3, #4
     a76:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     a78:	9b04      	ldr	r3, [sp, #16]
     a7a:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     a7c:	2300      	movs	r3, #0
     a7e:	9309      	str	r3, [sp, #36]	; 0x24
     a80:	e024      	b.n	acc <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a84:	00db      	lsls	r3, r3, #3
     a86:	9a02      	ldr	r2, [sp, #8]
     a88:	4413      	add	r3, r2
     a8a:	681b      	ldr	r3, [r3, #0]
     a8c:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a90:	00db      	lsls	r3, r3, #3
     a92:	9a02      	ldr	r2, [sp, #8]
     a94:	4413      	add	r3, r2
     a96:	685b      	ldr	r3, [r3, #4]
     a98:	4619      	mov	r1, r3
     a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a9c:	00db      	lsls	r3, r3, #3
     a9e:	9a02      	ldr	r2, [sp, #8]
     aa0:	4413      	add	r3, r2
     aa2:	681b      	ldr	r3, [r3, #0]
     aa4:	1acb      	subs	r3, r1, r3
     aa6:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     aa8:	2300      	movs	r3, #0
     aaa:	9308      	str	r3, [sp, #32]
     aac:	e007      	b.n	abe <init_data_bss+0x106>
        {
            ram[j] = 0U;
     aae:	9a01      	ldr	r2, [sp, #4]
     ab0:	9b08      	ldr	r3, [sp, #32]
     ab2:	4413      	add	r3, r2
     ab4:	2200      	movs	r2, #0
     ab6:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     ab8:	9b08      	ldr	r3, [sp, #32]
     aba:	3301      	adds	r3, #1
     abc:	9308      	str	r3, [sp, #32]
     abe:	9a08      	ldr	r2, [sp, #32]
     ac0:	9b06      	ldr	r3, [sp, #24]
     ac2:	429a      	cmp	r2, r3
     ac4:	d3f3      	bcc.n	aae <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ac8:	3301      	adds	r3, #1
     aca:	9309      	str	r3, [sp, #36]	; 0x24
     acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ace:	9b07      	ldr	r3, [sp, #28]
     ad0:	429a      	cmp	r2, r3
     ad2:	d3d6      	bcc.n	a82 <init_data_bss+0xca>
        }
    }
}
     ad4:	bf00      	nop
     ad6:	bf00      	nop
     ad8:	b00a      	add	sp, #40	; 0x28
     ada:	4770      	bx	lr
     adc:	0000c43c 	.word	0x0000c43c
     ae0:	0000c458 	.word	0x0000c458

00000ae4 <sys_m4_cache_init>:
{
     ae4:	b084      	sub	sp, #16
     ae6:	4603      	mov	r3, r0
     ae8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     aec:	2300      	movs	r3, #0
     aee:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     af2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     af6:	2b00      	cmp	r3, #0
     af8:	d118      	bne.n	b2c <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     afa:	4b10      	ldr	r3, [pc, #64]	; (b3c <sys_m4_cache_init+0x58>)
     afc:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b00:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b02:	4b0e      	ldr	r3, [pc, #56]	; (b3c <sys_m4_cache_init+0x58>)
     b04:	681b      	ldr	r3, [r3, #0]
     b06:	4a0d      	ldr	r2, [pc, #52]	; (b3c <sys_m4_cache_init+0x58>)
     b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b0c:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b0e:	bf00      	nop
     b10:	4b0a      	ldr	r3, [pc, #40]	; (b3c <sys_m4_cache_init+0x58>)
     b12:	681b      	ldr	r3, [r3, #0]
     b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b1c:	d0f8      	beq.n	b10 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     b1e:	4b07      	ldr	r3, [pc, #28]	; (b3c <sys_m4_cache_init+0x58>)
     b20:	681b      	ldr	r3, [r3, #0]
     b22:	4a06      	ldr	r2, [pc, #24]	; (b3c <sys_m4_cache_init+0x58>)
     b24:	f043 0301 	orr.w	r3, r3, #1
     b28:	6013      	str	r3, [r2, #0]
     b2a:	e002      	b.n	b32 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     b2c:	2301      	movs	r3, #1
     b2e:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     b32:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     b36:	4618      	mov	r0, r3
     b38:	b004      	add	sp, #16
     b3a:	4770      	bx	lr
     b3c:	e0082000 	.word	0xe0082000

00000b40 <startup_go_to_user_mode>:
}
     b40:	bf00      	nop
     b42:	4770      	bx	lr

00000b44 <Sys_GetCoreID>:
    return 0U;
     b44:	2300      	movs	r3, #0
}
     b46:	4618      	mov	r0, r3
     b48:	4770      	bx	lr

00000b4a <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     b4a:	e7fe      	b.n	b4a <HardFault_Handler>

00000b4c <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     b4c:	e7fe      	b.n	b4c <MemManage_Handler>

00000b4e <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     b4e:	e7fe      	b.n	b4e <BusFault_Handler>

00000b50 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     b50:	e7fe      	b.n	b50 <UsageFault_Handler>

00000b52 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     b52:	e7fe      	b.n	b52 <SVC_Handler>

00000b54 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     b54:	e7fe      	b.n	b54 <DebugMon_Handler>

00000b56 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     b56:	e7fe      	b.n	b56 <PendSV_Handler>

00000b58 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     b58:	e7fe      	b.n	b58 <SysTick_Handler>

00000b5a <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     b5a:	e7fe      	b.n	b5a <undefined_handler>

00000b5c <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
     b5c:	2300      	movs	r3, #0
}
     b5e:	4618      	mov	r0, r3
     b60:	4770      	bx	lr

00000b62 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
     b62:	b082      	sub	sp, #8
     b64:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
     b66:	2301      	movs	r3, #1
}
     b68:	4618      	mov	r0, r3
     b6a:	b002      	add	sp, #8
     b6c:	4770      	bx	lr

00000b6e <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
     b6e:	b082      	sub	sp, #8
     b70:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
     b72:	bf00      	nop
     b74:	b002      	add	sp, #8
     b76:	4770      	bx	lr

00000b78 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
     b78:	b082      	sub	sp, #8
     b7a:	9001      	str	r0, [sp, #4]
    return Micros;
     b7c:	9b01      	ldr	r3, [sp, #4]
}
     b7e:	4618      	mov	r0, r3
     b80:	b002      	add	sp, #8
     b82:	4770      	bx	lr

00000b84 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
     b84:	b500      	push	{lr}
     b86:	b083      	sub	sp, #12
     b88:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
     b8a:	f000 f86d 	bl	c68 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
     b8e:	bf00      	nop
     b90:	b003      	add	sp, #12
     b92:	f85d fb04 	ldr.w	pc, [sp], #4

00000b96 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
     b96:	b500      	push	{lr}
     b98:	b085      	sub	sp, #20
     b9a:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
     b9c:	2300      	movs	r3, #0
     b9e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     ba0:	9b01      	ldr	r3, [sp, #4]
     ba2:	2b00      	cmp	r3, #0
     ba4:	d003      	beq.n	bae <OsIf_GetCounter+0x18>
     ba6:	9b01      	ldr	r3, [sp, #4]
     ba8:	2b01      	cmp	r3, #1
     baa:	d004      	beq.n	bb6 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     bac:	e007      	b.n	bbe <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
     bae:	f7ff ffd5 	bl	b5c <OsIf_Timer_Dummy_GetCounter>
     bb2:	9003      	str	r0, [sp, #12]
            break;
     bb4:	e003      	b.n	bbe <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
     bb6:	f000 f873 	bl	ca0 <OsIf_Timer_System_GetCounter>
     bba:	9003      	str	r0, [sp, #12]
            break;
     bbc:	bf00      	nop
    }

    return Value;
     bbe:	9b03      	ldr	r3, [sp, #12]
}
     bc0:	4618      	mov	r0, r3
     bc2:	b005      	add	sp, #20
     bc4:	f85d fb04 	ldr.w	pc, [sp], #4

00000bc8 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
     bc8:	b500      	push	{lr}
     bca:	b085      	sub	sp, #20
     bcc:	9001      	str	r0, [sp, #4]
     bce:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     bd0:	2300      	movs	r3, #0
     bd2:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     bd4:	9b00      	ldr	r3, [sp, #0]
     bd6:	2b00      	cmp	r3, #0
     bd8:	d003      	beq.n	be2 <OsIf_GetElapsed+0x1a>
     bda:	9b00      	ldr	r3, [sp, #0]
     bdc:	2b01      	cmp	r3, #1
     bde:	d005      	beq.n	bec <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     be0:	e009      	b.n	bf6 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
     be2:	9801      	ldr	r0, [sp, #4]
     be4:	f7ff ffbd 	bl	b62 <OsIf_Timer_Dummy_GetElapsed>
     be8:	9003      	str	r0, [sp, #12]
            break;
     bea:	e004      	b.n	bf6 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
     bec:	9801      	ldr	r0, [sp, #4]
     bee:	f000 f865 	bl	cbc <OsIf_Timer_System_GetElapsed>
     bf2:	9003      	str	r0, [sp, #12]
            break;
     bf4:	bf00      	nop
    }

    return Value;
     bf6:	9b03      	ldr	r3, [sp, #12]
}
     bf8:	4618      	mov	r0, r3
     bfa:	b005      	add	sp, #20
     bfc:	f85d fb04 	ldr.w	pc, [sp], #4

00000c00 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
     c00:	b500      	push	{lr}
     c02:	b083      	sub	sp, #12
     c04:	9001      	str	r0, [sp, #4]
     c06:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
     c08:	9b00      	ldr	r3, [sp, #0]
     c0a:	2b00      	cmp	r3, #0
     c0c:	d003      	beq.n	c16 <OsIf_SetTimerFrequency+0x16>
     c0e:	9b00      	ldr	r3, [sp, #0]
     c10:	2b01      	cmp	r3, #1
     c12:	d004      	beq.n	c1e <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     c14:	e007      	b.n	c26 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
     c16:	9801      	ldr	r0, [sp, #4]
     c18:	f7ff ffa9 	bl	b6e <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
     c1c:	e003      	b.n	c26 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
     c1e:	9801      	ldr	r0, [sp, #4]
     c20:	f000 f85c 	bl	cdc <OsIf_Timer_System_SetTimerFrequency>
            break;
     c24:	bf00      	nop
    }
}
     c26:	bf00      	nop
     c28:	b003      	add	sp, #12
     c2a:	f85d fb04 	ldr.w	pc, [sp], #4

00000c2e <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
     c2e:	b500      	push	{lr}
     c30:	b085      	sub	sp, #20
     c32:	9001      	str	r0, [sp, #4]
     c34:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     c36:	2300      	movs	r3, #0
     c38:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     c3a:	9b00      	ldr	r3, [sp, #0]
     c3c:	2b00      	cmp	r3, #0
     c3e:	d003      	beq.n	c48 <OsIf_MicrosToTicks+0x1a>
     c40:	9b00      	ldr	r3, [sp, #0]
     c42:	2b01      	cmp	r3, #1
     c44:	d005      	beq.n	c52 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     c46:	e009      	b.n	c5c <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
     c48:	9801      	ldr	r0, [sp, #4]
     c4a:	f7ff ff95 	bl	b78 <OsIf_Timer_Dummy_MicrosToTicks>
     c4e:	9003      	str	r0, [sp, #12]
            break;
     c50:	e004      	b.n	c5c <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
     c52:	9801      	ldr	r0, [sp, #4]
     c54:	f000 f850 	bl	cf8 <OsIf_Timer_System_MicrosToTicks>
     c58:	9003      	str	r0, [sp, #12]
            break;
     c5a:	bf00      	nop
    }

    return Value;
     c5c:	9b03      	ldr	r3, [sp, #12]
}
     c5e:	4618      	mov	r0, r3
     c60:	b005      	add	sp, #20
     c62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000c68 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
     c68:	b500      	push	{lr}
     c6a:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
     c6c:	2300      	movs	r3, #0
     c6e:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
     c70:	4a09      	ldr	r2, [pc, #36]	; (c98 <OsIf_Timer_System_Init+0x30>)
     c72:	9b01      	ldr	r3, [sp, #4]
     c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     c78:	685a      	ldr	r2, [r3, #4]
     c7a:	4908      	ldr	r1, [pc, #32]	; (c9c <OsIf_Timer_System_Init+0x34>)
     c7c:	9b01      	ldr	r3, [sp, #4]
     c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
     c82:	4a06      	ldr	r2, [pc, #24]	; (c9c <OsIf_Timer_System_Init+0x34>)
     c84:	9b01      	ldr	r3, [sp, #4]
     c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     c8a:	4618      	mov	r0, r3
     c8c:	f000 f868 	bl	d60 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
     c90:	bf00      	nop
     c92:	b003      	add	sp, #12
     c94:	f85d fb04 	ldr.w	pc, [sp], #4
     c98:	0000c2c0 	.word	0x0000c2c0
     c9c:	1fff8b40 	.word	0x1fff8b40

00000ca0 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
     ca0:	b500      	push	{lr}
     ca2:	b083      	sub	sp, #12
    uint32 Counter = 0U;
     ca4:	2300      	movs	r3, #0
     ca6:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
     ca8:	2300      	movs	r3, #0
     caa:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
     cac:	f000 f86c 	bl	d88 <OsIf_Timer_System_Internal_GetCounter>
     cb0:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
     cb2:	9b01      	ldr	r3, [sp, #4]
}
     cb4:	4618      	mov	r0, r3
     cb6:	b003      	add	sp, #12
     cb8:	f85d fb04 	ldr.w	pc, [sp], #4

00000cbc <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
     cbc:	b500      	push	{lr}
     cbe:	b085      	sub	sp, #20
     cc0:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
     cc2:	2300      	movs	r3, #0
     cc4:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
     cc6:	2300      	movs	r3, #0
     cc8:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
     cca:	9801      	ldr	r0, [sp, #4]
     ccc:	f000 f864 	bl	d98 <OsIf_Timer_System_Internal_GetElapsed>
     cd0:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
     cd2:	9b03      	ldr	r3, [sp, #12]
}
     cd4:	4618      	mov	r0, r3
     cd6:	b005      	add	sp, #20
     cd8:	f85d fb04 	ldr.w	pc, [sp], #4

00000cdc <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
     cdc:	b084      	sub	sp, #16
     cde:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
     ce0:	2300      	movs	r3, #0
     ce2:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
     ce4:	4903      	ldr	r1, [pc, #12]	; (cf4 <OsIf_Timer_System_SetTimerFrequency+0x18>)
     ce6:	9b03      	ldr	r3, [sp, #12]
     ce8:	9a01      	ldr	r2, [sp, #4]
     cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
     cee:	bf00      	nop
     cf0:	b004      	add	sp, #16
     cf2:	4770      	bx	lr
     cf4:	1fff8b40 	.word	0x1fff8b40

00000cf8 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
     cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cfa:	b087      	sub	sp, #28
     cfc:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
     cfe:	2100      	movs	r1, #0
     d00:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
     d02:	2100      	movs	r1, #0
     d04:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
     d06:	9901      	ldr	r1, [sp, #4]
     d08:	2000      	movs	r0, #0
     d0a:	460e      	mov	r6, r1
     d0c:	4607      	mov	r7, r0
     d0e:	4812      	ldr	r0, [pc, #72]	; (d58 <OsIf_Timer_System_MicrosToTicks+0x60>)
     d10:	9904      	ldr	r1, [sp, #16]
     d12:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
     d16:	2000      	movs	r0, #0
     d18:	460c      	mov	r4, r1
     d1a:	4605      	mov	r5, r0
     d1c:	fb04 f007 	mul.w	r0, r4, r7
     d20:	fb06 f105 	mul.w	r1, r6, r5
     d24:	4401      	add	r1, r0
     d26:	fba6 2304 	umull	r2, r3, r6, r4
     d2a:	4419      	add	r1, r3
     d2c:	460b      	mov	r3, r1
     d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
     d32:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
     d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     d3a:	4a08      	ldr	r2, [pc, #32]	; (d5c <OsIf_Timer_System_MicrosToTicks+0x64>)
     d3c:	f04f 0300 	mov.w	r3, #0
     d40:	f7ff fc30 	bl	5a4 <__aeabi_uldivmod>
     d44:	4602      	mov	r2, r0
     d46:	460b      	mov	r3, r1
     d48:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
     d4c:	9b02      	ldr	r3, [sp, #8]
     d4e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
     d50:	9b05      	ldr	r3, [sp, #20]
}
     d52:	4618      	mov	r0, r3
     d54:	b007      	add	sp, #28
     d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d58:	1fff8b40 	.word	0x1fff8b40
     d5c:	000f4240 	.word	0x000f4240

00000d60 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
     d60:	b082      	sub	sp, #8
     d62:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
     d64:	4b07      	ldr	r3, [pc, #28]	; (d84 <OsIf_Timer_System_Internal_Init+0x24>)
     d66:	2200      	movs	r2, #0
     d68:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
     d6a:	4b06      	ldr	r3, [pc, #24]	; (d84 <OsIf_Timer_System_Internal_Init+0x24>)
     d6c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
     d70:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
     d72:	4b04      	ldr	r3, [pc, #16]	; (d84 <OsIf_Timer_System_Internal_Init+0x24>)
     d74:	2200      	movs	r2, #0
     d76:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
     d78:	4b02      	ldr	r3, [pc, #8]	; (d84 <OsIf_Timer_System_Internal_Init+0x24>)
     d7a:	2205      	movs	r2, #5
     d7c:	601a      	str	r2, [r3, #0]
}
     d7e:	bf00      	nop
     d80:	b002      	add	sp, #8
     d82:	4770      	bx	lr
     d84:	e000e010 	.word	0xe000e010

00000d88 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
     d88:	4b02      	ldr	r3, [pc, #8]	; (d94 <OsIf_Timer_System_Internal_GetCounter+0xc>)
     d8a:	689b      	ldr	r3, [r3, #8]
     d8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
     d90:	4618      	mov	r0, r3
     d92:	4770      	bx	lr
     d94:	e000e010 	.word	0xe000e010

00000d98 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
     d98:	b084      	sub	sp, #16
     d9a:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
     d9c:	4b10      	ldr	r3, [pc, #64]	; (de0 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
     d9e:	689b      	ldr	r3, [r3, #8]
     da0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     da4:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
     da6:	2300      	movs	r3, #0
     da8:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
     daa:	9b01      	ldr	r3, [sp, #4]
     dac:	681b      	ldr	r3, [r3, #0]
     dae:	9a02      	ldr	r2, [sp, #8]
     db0:	429a      	cmp	r2, r3
     db2:	d909      	bls.n	dc8 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
     db4:	9b01      	ldr	r3, [sp, #4]
     db6:	681a      	ldr	r2, [r3, #0]
     db8:	9b02      	ldr	r3, [sp, #8]
     dba:	1ad3      	subs	r3, r2, r3
     dbc:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
     dc0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     dc4:	9303      	str	r3, [sp, #12]
     dc6:	e004      	b.n	dd2 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
     dc8:	9b01      	ldr	r3, [sp, #4]
     dca:	681a      	ldr	r2, [r3, #0]
     dcc:	9b02      	ldr	r3, [sp, #8]
     dce:	1ad3      	subs	r3, r2, r3
     dd0:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
     dd2:	9b01      	ldr	r3, [sp, #4]
     dd4:	9a02      	ldr	r2, [sp, #8]
     dd6:	601a      	str	r2, [r3, #0]

    return dif;
     dd8:	9b03      	ldr	r3, [sp, #12]
}
     dda:	4618      	mov	r0, r3
     ddc:	b004      	add	sp, #16
     dde:	4770      	bx	lr
     de0:	e000e010 	.word	0xe000e010

00000de4 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
     de4:	b082      	sub	sp, #8
     de6:	9001      	str	r0, [sp, #4]
     de8:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
     dea:	bf00      	nop
     dec:	b002      	add	sp, #8
     dee:	4770      	bx	lr

00000df0 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
     df0:	b500      	push	{lr}
     df2:	b085      	sub	sp, #20
     df4:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
     df6:	4b24      	ldr	r3, [pc, #144]	; (e88 <Clock_Ip_UpdateDriverContext+0x98>)
     df8:	2201      	movs	r2, #1
     dfa:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
     dfc:	4b23      	ldr	r3, [pc, #140]	; (e8c <Clock_Ip_UpdateDriverContext+0x9c>)
     dfe:	681b      	ldr	r3, [r3, #0]
     e00:	2102      	movs	r1, #2
     e02:	4618      	mov	r0, r3
     e04:	f003 fc32 	bl	466c <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
     e08:	2300      	movs	r3, #0
     e0a:	f88d 300f 	strb.w	r3, [sp, #15]
     e0e:	e015      	b.n	e3c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
     e10:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e14:	9a01      	ldr	r2, [sp, #4]
     e16:	334a      	adds	r3, #74	; 0x4a
     e18:	00db      	lsls	r3, r3, #3
     e1a:	4413      	add	r3, r2
     e1c:	6858      	ldr	r0, [r3, #4]
     e1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e22:	9a01      	ldr	r2, [sp, #4]
     e24:	334a      	adds	r3, #74	; 0x4a
     e26:	00db      	lsls	r3, r3, #3
     e28:	4413      	add	r3, r2
     e2a:	689b      	ldr	r3, [r3, #8]
     e2c:	4619      	mov	r1, r3
     e2e:	f001 fadc 	bl	23ea <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
     e32:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e36:	3301      	adds	r3, #1
     e38:	f88d 300f 	strb.w	r3, [sp, #15]
     e3c:	9b01      	ldr	r3, [sp, #4]
     e3e:	7bdb      	ldrb	r3, [r3, #15]
     e40:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e44:	429a      	cmp	r2, r3
     e46:	d3e3      	bcc.n	e10 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
     e48:	f000 f824 	bl	e94 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
     e4c:	2301      	movs	r3, #1
     e4e:	f88d 300f 	strb.w	r3, [sp, #15]
     e52:	e00e      	b.n	e72 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
     e54:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e58:	9b01      	ldr	r3, [sp, #4]
     e5a:	327e      	adds	r2, #126	; 0x7e
     e5c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
     e60:	490b      	ldr	r1, [pc, #44]	; (e90 <Clock_Ip_UpdateDriverContext+0xa0>)
     e62:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e66:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
     e68:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e6c:	3301      	adds	r3, #1
     e6e:	f88d 300f 	strb.w	r3, [sp, #15]
     e72:	9b01      	ldr	r3, [sp, #4]
     e74:	7cdb      	ldrb	r3, [r3, #19]
     e76:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e7a:	429a      	cmp	r2, r3
     e7c:	d3ea      	bcc.n	e54 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
     e7e:	bf00      	nop
     e80:	bf00      	nop
     e82:	b005      	add	sp, #20
     e84:	f85d fb04 	ldr.w	pc, [sp], #4
     e88:	1fff8b10 	.word	0x1fff8b10
     e8c:	1fff8b44 	.word	0x1fff8b44
     e90:	1fff8b50 	.word	0x1fff8b50

00000e94 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
     e94:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
     e96:	4b23      	ldr	r3, [pc, #140]	; (f24 <Clock_Ip_CallEmptyCallbacks+0x90>)
     e98:	781b      	ldrb	r3, [r3, #0]
     e9a:	f083 0301 	eor.w	r3, r3, #1
     e9e:	b2db      	uxtb	r3, r3
     ea0:	2b00      	cmp	r3, #0
     ea2:	d03d      	beq.n	f20 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
     ea4:	4b1f      	ldr	r3, [pc, #124]	; (f24 <Clock_Ip_CallEmptyCallbacks+0x90>)
     ea6:	2201      	movs	r2, #1
     ea8:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
     eaa:	4b1f      	ldr	r3, [pc, #124]	; (f28 <Clock_Ip_CallEmptyCallbacks+0x94>)
     eac:	685b      	ldr	r3, [r3, #4]
     eae:	2100      	movs	r1, #0
     eb0:	2000      	movs	r0, #0
     eb2:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
     eb4:	4b1c      	ldr	r3, [pc, #112]	; (f28 <Clock_Ip_CallEmptyCallbacks+0x94>)
     eb6:	689b      	ldr	r3, [r3, #8]
     eb8:	2057      	movs	r0, #87	; 0x57
     eba:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     ebc:	4b1b      	ldr	r3, [pc, #108]	; (f2c <Clock_Ip_CallEmptyCallbacks+0x98>)
     ebe:	681b      	ldr	r3, [r3, #0]
     ec0:	2000      	movs	r0, #0
     ec2:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
     ec4:	4b1a      	ldr	r3, [pc, #104]	; (f30 <Clock_Ip_CallEmptyCallbacks+0x9c>)
     ec6:	681b      	ldr	r3, [r3, #0]
     ec8:	2000      	movs	r0, #0
     eca:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
     ecc:	4b19      	ldr	r3, [pc, #100]	; (f34 <Clock_Ip_CallEmptyCallbacks+0xa0>)
     ece:	681b      	ldr	r3, [r3, #0]
     ed0:	2000      	movs	r0, #0
     ed2:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     ed4:	4b18      	ldr	r3, [pc, #96]	; (f38 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     ed6:	685b      	ldr	r3, [r3, #4]
     ed8:	2000      	movs	r0, #0
     eda:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
     edc:	4b16      	ldr	r3, [pc, #88]	; (f38 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     ede:	689b      	ldr	r3, [r3, #8]
     ee0:	2057      	movs	r0, #87	; 0x57
     ee2:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     ee4:	4b15      	ldr	r3, [pc, #84]	; (f3c <Clock_Ip_CallEmptyCallbacks+0xa8>)
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	2000      	movs	r0, #0
     eea:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
     eec:	4b13      	ldr	r3, [pc, #76]	; (f3c <Clock_Ip_CallEmptyCallbacks+0xa8>)
     eee:	685b      	ldr	r3, [r3, #4]
     ef0:	2100      	movs	r1, #0
     ef2:	2057      	movs	r0, #87	; 0x57
     ef4:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     ef6:	4b12      	ldr	r3, [pc, #72]	; (f40 <Clock_Ip_CallEmptyCallbacks+0xac>)
     ef8:	681b      	ldr	r3, [r3, #0]
     efa:	2000      	movs	r0, #0
     efc:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     efe:	4b11      	ldr	r3, [pc, #68]	; (f44 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     f00:	685b      	ldr	r3, [r3, #4]
     f02:	2000      	movs	r0, #0
     f04:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
     f06:	4b0f      	ldr	r3, [pc, #60]	; (f44 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     f08:	689b      	ldr	r3, [r3, #8]
     f0a:	2057      	movs	r0, #87	; 0x57
     f0c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     f0e:	4b0e      	ldr	r3, [pc, #56]	; (f48 <Clock_Ip_CallEmptyCallbacks+0xb4>)
     f10:	685b      	ldr	r3, [r3, #4]
     f12:	2000      	movs	r0, #0
     f14:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
     f16:	4b0d      	ldr	r3, [pc, #52]	; (f4c <Clock_Ip_CallEmptyCallbacks+0xb8>)
     f18:	681b      	ldr	r3, [r3, #0]
     f1a:	2100      	movs	r1, #0
     f1c:	2000      	movs	r0, #0
     f1e:	4798      	blx	r3
    }
}
     f20:	bf00      	nop
     f22:	bd08      	pop	{r3, pc}
     f24:	1fff8b48 	.word	0x1fff8b48
     f28:	0000bcd0 	.word	0x0000bcd0
     f2c:	0000bbe4 	.word	0x0000bbe4
     f30:	0000bc20 	.word	0x0000bc20
     f34:	0000bc28 	.word	0x0000bc28
     f38:	0000bc50 	.word	0x0000bc50
     f3c:	0000bc5c 	.word	0x0000bc5c
     f40:	0000bc94 	.word	0x0000bc94
     f44:	0000bce0 	.word	0x0000bce0
     f48:	0000bd0c 	.word	0x0000bd0c
     f4c:	0000bd08 	.word	0x0000bd08

00000f50 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
     f50:	b500      	push	{lr}
     f52:	b085      	sub	sp, #20
     f54:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
     f56:	9b01      	ldr	r3, [sp, #4]
     f58:	7adb      	ldrb	r3, [r3, #11]
     f5a:	9303      	str	r3, [sp, #12]
     f5c:	e01f      	b.n	f9e <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     f5e:	9b03      	ldr	r3, [sp, #12]
     f60:	1e5a      	subs	r2, r3, #1
     f62:	9b01      	ldr	r3, [sp, #4]
     f64:	320d      	adds	r2, #13
     f66:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
     f6a:	495a      	ldr	r1, [pc, #360]	; (10d4 <Clock_Ip_ResetClockConfiguration+0x184>)
     f6c:	4613      	mov	r3, r2
     f6e:	00db      	lsls	r3, r3, #3
     f70:	4413      	add	r3, r2
     f72:	440b      	add	r3, r1
     f74:	3301      	adds	r3, #1
     f76:	781b      	ldrb	r3, [r3, #0]
     f78:	461a      	mov	r2, r3
     f7a:	4b57      	ldr	r3, [pc, #348]	; (10d8 <Clock_Ip_ResetClockConfiguration+0x188>)
     f7c:	5c9b      	ldrb	r3, [r3, r2]
     f7e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
     f80:	4a56      	ldr	r2, [pc, #344]	; (10dc <Clock_Ip_ResetClockConfiguration+0x18c>)
     f82:	9b02      	ldr	r3, [sp, #8]
     f84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     f88:	9a03      	ldr	r2, [sp, #12]
     f8a:	3a01      	subs	r2, #1
     f8c:	320d      	adds	r2, #13
     f8e:	00d2      	lsls	r2, r2, #3
     f90:	9901      	ldr	r1, [sp, #4]
     f92:	440a      	add	r2, r1
     f94:	4610      	mov	r0, r2
     f96:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
     f98:	9b03      	ldr	r3, [sp, #12]
     f9a:	3b01      	subs	r3, #1
     f9c:	9303      	str	r3, [sp, #12]
     f9e:	9b03      	ldr	r3, [sp, #12]
     fa0:	2b00      	cmp	r3, #0
     fa2:	d1dc      	bne.n	f5e <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
     fa4:	9b01      	ldr	r3, [sp, #4]
     fa6:	7b9b      	ldrb	r3, [r3, #14]
     fa8:	9303      	str	r3, [sp, #12]
     faa:	e026      	b.n	ffa <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     fac:	9b03      	ldr	r3, [sp, #12]
     fae:	3b01      	subs	r3, #1
     fb0:	9a01      	ldr	r2, [sp, #4]
     fb2:	3324      	adds	r3, #36	; 0x24
     fb4:	011b      	lsls	r3, r3, #4
     fb6:	4413      	add	r3, r2
     fb8:	3304      	adds	r3, #4
     fba:	681a      	ldr	r2, [r3, #0]
     fbc:	4945      	ldr	r1, [pc, #276]	; (10d4 <Clock_Ip_ResetClockConfiguration+0x184>)
     fbe:	4613      	mov	r3, r2
     fc0:	00db      	lsls	r3, r3, #3
     fc2:	4413      	add	r3, r2
     fc4:	440b      	add	r3, r1
     fc6:	3301      	adds	r3, #1
     fc8:	781b      	ldrb	r3, [r3, #0]
     fca:	461a      	mov	r2, r3
     fcc:	4b44      	ldr	r3, [pc, #272]	; (10e0 <Clock_Ip_ResetClockConfiguration+0x190>)
     fce:	5c9b      	ldrb	r3, [r3, r2]
     fd0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
     fd2:	4944      	ldr	r1, [pc, #272]	; (10e4 <Clock_Ip_ResetClockConfiguration+0x194>)
     fd4:	9a02      	ldr	r2, [sp, #8]
     fd6:	4613      	mov	r3, r2
     fd8:	005b      	lsls	r3, r3, #1
     fda:	4413      	add	r3, r2
     fdc:	009b      	lsls	r3, r3, #2
     fde:	440b      	add	r3, r1
     fe0:	681b      	ldr	r3, [r3, #0]
     fe2:	9a03      	ldr	r2, [sp, #12]
     fe4:	3a01      	subs	r2, #1
     fe6:	3224      	adds	r2, #36	; 0x24
     fe8:	0112      	lsls	r2, r2, #4
     fea:	9901      	ldr	r1, [sp, #4]
     fec:	440a      	add	r2, r1
     fee:	3204      	adds	r2, #4
     ff0:	4610      	mov	r0, r2
     ff2:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
     ff4:	9b03      	ldr	r3, [sp, #12]
     ff6:	3b01      	subs	r3, #1
     ff8:	9303      	str	r3, [sp, #12]
     ffa:	9b03      	ldr	r3, [sp, #12]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d1d5      	bne.n	fac <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1000:	9b01      	ldr	r3, [sp, #4]
    1002:	7a9b      	ldrb	r3, [r3, #10]
    1004:	9303      	str	r3, [sp, #12]
    1006:	e02a      	b.n	105e <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1008:	9b03      	ldr	r3, [sp, #12]
    100a:	1e5a      	subs	r2, r3, #1
    100c:	9901      	ldr	r1, [sp, #4]
    100e:	4613      	mov	r3, r2
    1010:	009b      	lsls	r3, r3, #2
    1012:	4413      	add	r3, r2
    1014:	00db      	lsls	r3, r3, #3
    1016:	440b      	add	r3, r1
    1018:	3340      	adds	r3, #64	; 0x40
    101a:	681a      	ldr	r2, [r3, #0]
    101c:	492d      	ldr	r1, [pc, #180]	; (10d4 <Clock_Ip_ResetClockConfiguration+0x184>)
    101e:	4613      	mov	r3, r2
    1020:	00db      	lsls	r3, r3, #3
    1022:	4413      	add	r3, r2
    1024:	440b      	add	r3, r1
    1026:	3301      	adds	r3, #1
    1028:	781b      	ldrb	r3, [r3, #0]
    102a:	461a      	mov	r2, r3
    102c:	4b2e      	ldr	r3, [pc, #184]	; (10e8 <Clock_Ip_ResetClockConfiguration+0x198>)
    102e:	5c9b      	ldrb	r3, [r3, r2]
    1030:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1032:	492e      	ldr	r1, [pc, #184]	; (10ec <Clock_Ip_ResetClockConfiguration+0x19c>)
    1034:	9a02      	ldr	r2, [sp, #8]
    1036:	4613      	mov	r3, r2
    1038:	009b      	lsls	r3, r3, #2
    103a:	4413      	add	r3, r2
    103c:	009b      	lsls	r3, r3, #2
    103e:	440b      	add	r3, r1
    1040:	6819      	ldr	r1, [r3, #0]
    1042:	9b03      	ldr	r3, [sp, #12]
    1044:	1e5a      	subs	r2, r3, #1
    1046:	4613      	mov	r3, r2
    1048:	009b      	lsls	r3, r3, #2
    104a:	4413      	add	r3, r2
    104c:	00db      	lsls	r3, r3, #3
    104e:	3340      	adds	r3, #64	; 0x40
    1050:	9a01      	ldr	r2, [sp, #4]
    1052:	4413      	add	r3, r2
    1054:	4618      	mov	r0, r3
    1056:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1058:	9b03      	ldr	r3, [sp, #12]
    105a:	3b01      	subs	r3, #1
    105c:	9303      	str	r3, [sp, #12]
    105e:	9b03      	ldr	r3, [sp, #12]
    1060:	2b00      	cmp	r3, #0
    1062:	d1d1      	bne.n	1008 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1064:	9b01      	ldr	r3, [sp, #4]
    1066:	7a5b      	ldrb	r3, [r3, #9]
    1068:	9303      	str	r3, [sp, #12]
    106a:	e02b      	b.n	10c4 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    106c:	9b03      	ldr	r3, [sp, #12]
    106e:	1e5a      	subs	r2, r3, #1
    1070:	9901      	ldr	r1, [sp, #4]
    1072:	4613      	mov	r3, r2
    1074:	009b      	lsls	r3, r3, #2
    1076:	4413      	add	r3, r2
    1078:	009b      	lsls	r3, r3, #2
    107a:	440b      	add	r3, r1
    107c:	332c      	adds	r3, #44	; 0x2c
    107e:	681a      	ldr	r2, [r3, #0]
    1080:	4914      	ldr	r1, [pc, #80]	; (10d4 <Clock_Ip_ResetClockConfiguration+0x184>)
    1082:	4613      	mov	r3, r2
    1084:	00db      	lsls	r3, r3, #3
    1086:	4413      	add	r3, r2
    1088:	440b      	add	r3, r1
    108a:	3301      	adds	r3, #1
    108c:	781b      	ldrb	r3, [r3, #0]
    108e:	461a      	mov	r2, r3
    1090:	4b17      	ldr	r3, [pc, #92]	; (10f0 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1092:	5c9b      	ldrb	r3, [r3, r2]
    1094:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1096:	4917      	ldr	r1, [pc, #92]	; (10f4 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1098:	9a02      	ldr	r2, [sp, #8]
    109a:	4613      	mov	r3, r2
    109c:	009b      	lsls	r3, r3, #2
    109e:	4413      	add	r3, r2
    10a0:	009b      	lsls	r3, r3, #2
    10a2:	440b      	add	r3, r1
    10a4:	6819      	ldr	r1, [r3, #0]
    10a6:	9b03      	ldr	r3, [sp, #12]
    10a8:	1e5a      	subs	r2, r3, #1
    10aa:	4613      	mov	r3, r2
    10ac:	009b      	lsls	r3, r3, #2
    10ae:	4413      	add	r3, r2
    10b0:	009b      	lsls	r3, r3, #2
    10b2:	3328      	adds	r3, #40	; 0x28
    10b4:	9a01      	ldr	r2, [sp, #4]
    10b6:	4413      	add	r3, r2
    10b8:	3304      	adds	r3, #4
    10ba:	4618      	mov	r0, r3
    10bc:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    10be:	9b03      	ldr	r3, [sp, #12]
    10c0:	3b01      	subs	r3, #1
    10c2:	9303      	str	r3, [sp, #12]
    10c4:	9b03      	ldr	r3, [sp, #12]
    10c6:	2b00      	cmp	r3, #0
    10c8:	d1d0      	bne.n	106c <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    10ca:	bf00      	nop
    10cc:	bf00      	nop
    10ce:	b005      	add	sp, #20
    10d0:	f85d fb04 	ldr.w	pc, [sp], #4
    10d4:	0000b6d4 	.word	0x0000b6d4
    10d8:	0000b6a4 	.word	0x0000b6a4
    10dc:	0000bd0c 	.word	0x0000bd0c
    10e0:	0000b684 	.word	0x0000b684
    10e4:	0000bc50 	.word	0x0000bc50
    10e8:	0000b694 	.word	0x0000b694
    10ec:	0000bce0 	.word	0x0000bce0
    10f0:	0000b654 	.word	0x0000b654
    10f4:	0000bc28 	.word	0x0000bc28

000010f8 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    10f8:	b500      	push	{lr}
    10fa:	b085      	sub	sp, #20
    10fc:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    10fe:	2301      	movs	r3, #1
    1100:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    1102:	9801      	ldr	r0, [sp, #4]
    1104:	f000 f818 	bl	1138 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1108:	4b0a      	ldr	r3, [pc, #40]	; (1134 <Clock_Ip_Init+0x3c>)
    110a:	781b      	ldrb	r3, [r3, #0]
    110c:	2b00      	cmp	r3, #0
    110e:	d00a      	beq.n	1126 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1110:	f000 fb74 	bl	17fc <Clock_Ip_GetPllStatus>
    1114:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1116:	9b02      	ldr	r3, [sp, #8]
    1118:	2b00      	cmp	r3, #0
    111a:	d106      	bne.n	112a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    111c:	f000 fbf2 	bl	1904 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1120:	2300      	movs	r3, #0
    1122:	9303      	str	r3, [sp, #12]
    1124:	e001      	b.n	112a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1126:	2300      	movs	r3, #0
    1128:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    112a:	9b03      	ldr	r3, [sp, #12]
}
    112c:	4618      	mov	r0, r3
    112e:	b005      	add	sp, #20
    1130:	f85d fb04 	ldr.w	pc, [sp], #4
    1134:	1fff8b4c 	.word	0x1fff8b4c

00001138 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1138:	b510      	push	{r4, lr}
    113a:	b084      	sub	sp, #16
    113c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    113e:	4a9f      	ldr	r2, [pc, #636]	; (13bc <Clock_Ip_InitClock+0x284>)
    1140:	9b01      	ldr	r3, [sp, #4]
    1142:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1144:	2101      	movs	r1, #1
    1146:	9801      	ldr	r0, [sp, #4]
    1148:	f003 fa90 	bl	466c <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    114c:	4b9b      	ldr	r3, [pc, #620]	; (13bc <Clock_Ip_InitClock+0x284>)
    114e:	681b      	ldr	r3, [r3, #0]
    1150:	2b00      	cmp	r3, #0
    1152:	d030      	beq.n	11b6 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1154:	2300      	movs	r3, #0
    1156:	9303      	str	r3, [sp, #12]
    1158:	e027      	b.n	11aa <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    115a:	9901      	ldr	r1, [sp, #4]
    115c:	9a03      	ldr	r2, [sp, #12]
    115e:	4613      	mov	r3, r2
    1160:	009b      	lsls	r3, r3, #2
    1162:	4413      	add	r3, r2
    1164:	009b      	lsls	r3, r3, #2
    1166:	440b      	add	r3, r1
    1168:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    116c:	681a      	ldr	r2, [r3, #0]
    116e:	4994      	ldr	r1, [pc, #592]	; (13c0 <Clock_Ip_InitClock+0x288>)
    1170:	4613      	mov	r3, r2
    1172:	00db      	lsls	r3, r3, #3
    1174:	4413      	add	r3, r2
    1176:	440b      	add	r3, r1
    1178:	3301      	adds	r3, #1
    117a:	781b      	ldrb	r3, [r3, #0]
    117c:	461a      	mov	r2, r3
    117e:	4b91      	ldr	r3, [pc, #580]	; (13c4 <Clock_Ip_InitClock+0x28c>)
    1180:	5c9b      	ldrb	r3, [r3, r2]
    1182:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1184:	4a90      	ldr	r2, [pc, #576]	; (13c8 <Clock_Ip_InitClock+0x290>)
    1186:	9b02      	ldr	r3, [sp, #8]
    1188:	011b      	lsls	r3, r3, #4
    118a:	4413      	add	r3, r2
    118c:	6819      	ldr	r1, [r3, #0]
    118e:	9a03      	ldr	r2, [sp, #12]
    1190:	4613      	mov	r3, r2
    1192:	009b      	lsls	r3, r3, #2
    1194:	4413      	add	r3, r2
    1196:	009b      	lsls	r3, r3, #2
    1198:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    119c:	9a01      	ldr	r2, [sp, #4]
    119e:	4413      	add	r3, r2
    11a0:	4618      	mov	r0, r3
    11a2:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    11a4:	9b03      	ldr	r3, [sp, #12]
    11a6:	3301      	adds	r3, #1
    11a8:	9303      	str	r3, [sp, #12]
    11aa:	9b01      	ldr	r3, [sp, #4]
    11ac:	7c9b      	ldrb	r3, [r3, #18]
    11ae:	461a      	mov	r2, r3
    11b0:	9b03      	ldr	r3, [sp, #12]
    11b2:	4293      	cmp	r3, r2
    11b4:	d3d1      	bcc.n	115a <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    11b6:	9801      	ldr	r0, [sp, #4]
    11b8:	f7ff feca 	bl	f50 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    11bc:	2300      	movs	r3, #0
    11be:	9303      	str	r3, [sp, #12]
    11c0:	e029      	b.n	1216 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    11c2:	9901      	ldr	r1, [sp, #4]
    11c4:	9a03      	ldr	r2, [sp, #12]
    11c6:	4613      	mov	r3, r2
    11c8:	005b      	lsls	r3, r3, #1
    11ca:	4413      	add	r3, r2
    11cc:	009b      	lsls	r3, r3, #2
    11ce:	440b      	add	r3, r1
    11d0:	3314      	adds	r3, #20
    11d2:	681a      	ldr	r2, [r3, #0]
    11d4:	497a      	ldr	r1, [pc, #488]	; (13c0 <Clock_Ip_InitClock+0x288>)
    11d6:	4613      	mov	r3, r2
    11d8:	00db      	lsls	r3, r3, #3
    11da:	4413      	add	r3, r2
    11dc:	440b      	add	r3, r1
    11de:	3301      	adds	r3, #1
    11e0:	781b      	ldrb	r3, [r3, #0]
    11e2:	461a      	mov	r2, r3
    11e4:	4b79      	ldr	r3, [pc, #484]	; (13cc <Clock_Ip_InitClock+0x294>)
    11e6:	5c9b      	ldrb	r3, [r3, r2]
    11e8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    11ea:	4979      	ldr	r1, [pc, #484]	; (13d0 <Clock_Ip_InitClock+0x298>)
    11ec:	9a02      	ldr	r2, [sp, #8]
    11ee:	4613      	mov	r3, r2
    11f0:	005b      	lsls	r3, r3, #1
    11f2:	4413      	add	r3, r2
    11f4:	009b      	lsls	r3, r3, #2
    11f6:	440b      	add	r3, r1
    11f8:	6819      	ldr	r1, [r3, #0]
    11fa:	9a03      	ldr	r2, [sp, #12]
    11fc:	4613      	mov	r3, r2
    11fe:	005b      	lsls	r3, r3, #1
    1200:	4413      	add	r3, r2
    1202:	009b      	lsls	r3, r3, #2
    1204:	3310      	adds	r3, #16
    1206:	9a01      	ldr	r2, [sp, #4]
    1208:	4413      	add	r3, r2
    120a:	3304      	adds	r3, #4
    120c:	4618      	mov	r0, r3
    120e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1210:	9b03      	ldr	r3, [sp, #12]
    1212:	3301      	adds	r3, #1
    1214:	9303      	str	r3, [sp, #12]
    1216:	9b01      	ldr	r3, [sp, #4]
    1218:	7a1b      	ldrb	r3, [r3, #8]
    121a:	461a      	mov	r2, r3
    121c:	9b03      	ldr	r3, [sp, #12]
    121e:	4293      	cmp	r3, r2
    1220:	d3cf      	bcc.n	11c2 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1222:	2300      	movs	r3, #0
    1224:	9303      	str	r3, [sp, #12]
    1226:	e02a      	b.n	127e <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1228:	9901      	ldr	r1, [sp, #4]
    122a:	9a03      	ldr	r2, [sp, #12]
    122c:	4613      	mov	r3, r2
    122e:	009b      	lsls	r3, r3, #2
    1230:	4413      	add	r3, r2
    1232:	009b      	lsls	r3, r3, #2
    1234:	440b      	add	r3, r1
    1236:	332c      	adds	r3, #44	; 0x2c
    1238:	681a      	ldr	r2, [r3, #0]
    123a:	4961      	ldr	r1, [pc, #388]	; (13c0 <Clock_Ip_InitClock+0x288>)
    123c:	4613      	mov	r3, r2
    123e:	00db      	lsls	r3, r3, #3
    1240:	4413      	add	r3, r2
    1242:	440b      	add	r3, r1
    1244:	3301      	adds	r3, #1
    1246:	781b      	ldrb	r3, [r3, #0]
    1248:	461a      	mov	r2, r3
    124a:	4b62      	ldr	r3, [pc, #392]	; (13d4 <Clock_Ip_InitClock+0x29c>)
    124c:	5c9b      	ldrb	r3, [r3, r2]
    124e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    1250:	4961      	ldr	r1, [pc, #388]	; (13d8 <Clock_Ip_InitClock+0x2a0>)
    1252:	9a02      	ldr	r2, [sp, #8]
    1254:	4613      	mov	r3, r2
    1256:	009b      	lsls	r3, r3, #2
    1258:	4413      	add	r3, r2
    125a:	009b      	lsls	r3, r3, #2
    125c:	440b      	add	r3, r1
    125e:	3304      	adds	r3, #4
    1260:	6819      	ldr	r1, [r3, #0]
    1262:	9a03      	ldr	r2, [sp, #12]
    1264:	4613      	mov	r3, r2
    1266:	009b      	lsls	r3, r3, #2
    1268:	4413      	add	r3, r2
    126a:	009b      	lsls	r3, r3, #2
    126c:	3328      	adds	r3, #40	; 0x28
    126e:	9a01      	ldr	r2, [sp, #4]
    1270:	4413      	add	r3, r2
    1272:	3304      	adds	r3, #4
    1274:	4618      	mov	r0, r3
    1276:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1278:	9b03      	ldr	r3, [sp, #12]
    127a:	3301      	adds	r3, #1
    127c:	9303      	str	r3, [sp, #12]
    127e:	9b01      	ldr	r3, [sp, #4]
    1280:	7a5b      	ldrb	r3, [r3, #9]
    1282:	461a      	mov	r2, r3
    1284:	9b03      	ldr	r3, [sp, #12]
    1286:	4293      	cmp	r3, r2
    1288:	d3ce      	bcc.n	1228 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    128a:	9801      	ldr	r0, [sp, #4]
    128c:	f7ff fdb0 	bl	df0 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1290:	2300      	movs	r3, #0
    1292:	9303      	str	r3, [sp, #12]
    1294:	e028      	b.n	12e8 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1296:	9901      	ldr	r1, [sp, #4]
    1298:	9a03      	ldr	r2, [sp, #12]
    129a:	4613      	mov	r3, r2
    129c:	009b      	lsls	r3, r3, #2
    129e:	4413      	add	r3, r2
    12a0:	009b      	lsls	r3, r3, #2
    12a2:	440b      	add	r3, r1
    12a4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    12a8:	681a      	ldr	r2, [r3, #0]
    12aa:	4945      	ldr	r1, [pc, #276]	; (13c0 <Clock_Ip_InitClock+0x288>)
    12ac:	4613      	mov	r3, r2
    12ae:	00db      	lsls	r3, r3, #3
    12b0:	4413      	add	r3, r2
    12b2:	440b      	add	r3, r1
    12b4:	3301      	adds	r3, #1
    12b6:	781b      	ldrb	r3, [r3, #0]
    12b8:	461a      	mov	r2, r3
    12ba:	4b48      	ldr	r3, [pc, #288]	; (13dc <Clock_Ip_InitClock+0x2a4>)
    12bc:	5c9b      	ldrb	r3, [r3, r2]
    12be:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    12c0:	4a47      	ldr	r2, [pc, #284]	; (13e0 <Clock_Ip_InitClock+0x2a8>)
    12c2:	9b02      	ldr	r3, [sp, #8]
    12c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    12c8:	9a03      	ldr	r2, [sp, #12]
    12ca:	4613      	mov	r3, r2
    12cc:	009b      	lsls	r3, r3, #2
    12ce:	4413      	add	r3, r2
    12d0:	009b      	lsls	r3, r3, #2
    12d2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    12d6:	9a01      	ldr	r2, [sp, #4]
    12d8:	4413      	add	r3, r2
    12da:	3304      	adds	r3, #4
    12dc:	9903      	ldr	r1, [sp, #12]
    12de:	4618      	mov	r0, r3
    12e0:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    12e2:	9b03      	ldr	r3, [sp, #12]
    12e4:	3301      	adds	r3, #1
    12e6:	9303      	str	r3, [sp, #12]
    12e8:	9b01      	ldr	r3, [sp, #4]
    12ea:	7c5b      	ldrb	r3, [r3, #17]
    12ec:	461a      	mov	r2, r3
    12ee:	9b03      	ldr	r3, [sp, #12]
    12f0:	4293      	cmp	r3, r2
    12f2:	d3d0      	bcc.n	1296 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    12f4:	2300      	movs	r3, #0
    12f6:	9303      	str	r3, [sp, #12]
    12f8:	e026      	b.n	1348 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    12fa:	9901      	ldr	r1, [sp, #4]
    12fc:	9a03      	ldr	r2, [sp, #12]
    12fe:	4613      	mov	r3, r2
    1300:	005b      	lsls	r3, r3, #1
    1302:	4413      	add	r3, r2
    1304:	009b      	lsls	r3, r3, #2
    1306:	440b      	add	r3, r1
    1308:	f503 730e 	add.w	r3, r3, #568	; 0x238
    130c:	681a      	ldr	r2, [r3, #0]
    130e:	492c      	ldr	r1, [pc, #176]	; (13c0 <Clock_Ip_InitClock+0x288>)
    1310:	4613      	mov	r3, r2
    1312:	00db      	lsls	r3, r3, #3
    1314:	4413      	add	r3, r2
    1316:	440b      	add	r3, r1
    1318:	3301      	adds	r3, #1
    131a:	781b      	ldrb	r3, [r3, #0]
    131c:	461a      	mov	r2, r3
    131e:	4b31      	ldr	r3, [pc, #196]	; (13e4 <Clock_Ip_InitClock+0x2ac>)
    1320:	5c9b      	ldrb	r3, [r3, r2]
    1322:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    1324:	4a30      	ldr	r2, [pc, #192]	; (13e8 <Clock_Ip_InitClock+0x2b0>)
    1326:	9b02      	ldr	r3, [sp, #8]
    1328:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    132c:	9a03      	ldr	r2, [sp, #12]
    132e:	4613      	mov	r3, r2
    1330:	005b      	lsls	r3, r3, #1
    1332:	4413      	add	r3, r2
    1334:	009b      	lsls	r3, r3, #2
    1336:	f503 730e 	add.w	r3, r3, #568	; 0x238
    133a:	9a01      	ldr	r2, [sp, #4]
    133c:	4413      	add	r3, r2
    133e:	4618      	mov	r0, r3
    1340:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1342:	9b03      	ldr	r3, [sp, #12]
    1344:	3301      	adds	r3, #1
    1346:	9303      	str	r3, [sp, #12]
    1348:	9b01      	ldr	r3, [sp, #4]
    134a:	7b5b      	ldrb	r3, [r3, #13]
    134c:	461a      	mov	r2, r3
    134e:	9b03      	ldr	r3, [sp, #12]
    1350:	4293      	cmp	r3, r2
    1352:	d3d2      	bcc.n	12fa <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1354:	2300      	movs	r3, #0
    1356:	9303      	str	r3, [sp, #12]
    1358:	e026      	b.n	13a8 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    135a:	9901      	ldr	r1, [sp, #4]
    135c:	9a03      	ldr	r2, [sp, #12]
    135e:	4613      	mov	r3, r2
    1360:	005b      	lsls	r3, r3, #1
    1362:	4413      	add	r3, r2
    1364:	009b      	lsls	r3, r3, #2
    1366:	440b      	add	r3, r1
    1368:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    136c:	681a      	ldr	r2, [r3, #0]
    136e:	4914      	ldr	r1, [pc, #80]	; (13c0 <Clock_Ip_InitClock+0x288>)
    1370:	4613      	mov	r3, r2
    1372:	00db      	lsls	r3, r3, #3
    1374:	4413      	add	r3, r2
    1376:	440b      	add	r3, r1
    1378:	3301      	adds	r3, #1
    137a:	781b      	ldrb	r3, [r3, #0]
    137c:	461a      	mov	r2, r3
    137e:	4b1b      	ldr	r3, [pc, #108]	; (13ec <Clock_Ip_InitClock+0x2b4>)
    1380:	5c9b      	ldrb	r3, [r3, r2]
    1382:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    1384:	4a1a      	ldr	r2, [pc, #104]	; (13f0 <Clock_Ip_InitClock+0x2b8>)
    1386:	9b02      	ldr	r3, [sp, #8]
    1388:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    138c:	9a03      	ldr	r2, [sp, #12]
    138e:	4613      	mov	r3, r2
    1390:	005b      	lsls	r3, r3, #1
    1392:	4413      	add	r3, r2
    1394:	009b      	lsls	r3, r3, #2
    1396:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    139a:	9a01      	ldr	r2, [sp, #4]
    139c:	4413      	add	r3, r2
    139e:	4618      	mov	r0, r3
    13a0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    13a2:	9b03      	ldr	r3, [sp, #12]
    13a4:	3301      	adds	r3, #1
    13a6:	9303      	str	r3, [sp, #12]
    13a8:	9b01      	ldr	r3, [sp, #4]
    13aa:	7b1b      	ldrb	r3, [r3, #12]
    13ac:	461a      	mov	r2, r3
    13ae:	9b03      	ldr	r3, [sp, #12]
    13b0:	4293      	cmp	r3, r2
    13b2:	d3d2      	bcc.n	135a <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    13b4:	2300      	movs	r3, #0
    13b6:	9303      	str	r3, [sp, #12]
    13b8:	e044      	b.n	1444 <Clock_Ip_InitClock+0x30c>
    13ba:	bf00      	nop
    13bc:	1fff8b44 	.word	0x1fff8b44
    13c0:	0000b6d4 	.word	0x0000b6d4
    13c4:	0000b6c4 	.word	0x0000b6c4
    13c8:	0000bcd0 	.word	0x0000bcd0
    13cc:	0000b664 	.word	0x0000b664
    13d0:	0000bc94 	.word	0x0000bc94
    13d4:	0000b654 	.word	0x0000b654
    13d8:	0000bc28 	.word	0x0000bc28
    13dc:	0000b6b4 	.word	0x0000b6b4
    13e0:	0000bd08 	.word	0x0000bd08
    13e4:	0000b644 	.word	0x0000b644
    13e8:	0000bc20 	.word	0x0000bc20
    13ec:	0000b634 	.word	0x0000b634
    13f0:	0000bbe4 	.word	0x0000bbe4
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    13f4:	9901      	ldr	r1, [sp, #4]
    13f6:	9a03      	ldr	r2, [sp, #12]
    13f8:	4613      	mov	r3, r2
    13fa:	005b      	lsls	r3, r3, #1
    13fc:	4413      	add	r3, r2
    13fe:	009b      	lsls	r3, r3, #2
    1400:	440b      	add	r3, r1
    1402:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1406:	681a      	ldr	r2, [r3, #0]
    1408:	49ac      	ldr	r1, [pc, #688]	; (16bc <Clock_Ip_InitClock+0x584>)
    140a:	4613      	mov	r3, r2
    140c:	00db      	lsls	r3, r3, #3
    140e:	4413      	add	r3, r2
    1410:	440b      	add	r3, r1
    1412:	3301      	adds	r3, #1
    1414:	781b      	ldrb	r3, [r3, #0]
    1416:	461a      	mov	r2, r3
    1418:	4ba9      	ldr	r3, [pc, #676]	; (16c0 <Clock_Ip_InitClock+0x588>)
    141a:	5c9b      	ldrb	r3, [r3, r2]
    141c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    141e:	4aa9      	ldr	r2, [pc, #676]	; (16c4 <Clock_Ip_InitClock+0x58c>)
    1420:	9b02      	ldr	r3, [sp, #8]
    1422:	00db      	lsls	r3, r3, #3
    1424:	4413      	add	r3, r2
    1426:	6859      	ldr	r1, [r3, #4]
    1428:	9a03      	ldr	r2, [sp, #12]
    142a:	4613      	mov	r3, r2
    142c:	005b      	lsls	r3, r3, #1
    142e:	4413      	add	r3, r2
    1430:	009b      	lsls	r3, r3, #2
    1432:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1436:	9a01      	ldr	r2, [sp, #4]
    1438:	4413      	add	r3, r2
    143a:	4618      	mov	r0, r3
    143c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    143e:	9b03      	ldr	r3, [sp, #12]
    1440:	3301      	adds	r3, #1
    1442:	9303      	str	r3, [sp, #12]
    1444:	9b01      	ldr	r3, [sp, #4]
    1446:	7b5b      	ldrb	r3, [r3, #13]
    1448:	461a      	mov	r2, r3
    144a:	9b03      	ldr	r3, [sp, #12]
    144c:	4293      	cmp	r3, r2
    144e:	d3d1      	bcc.n	13f4 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1450:	2300      	movs	r3, #0
    1452:	9303      	str	r3, [sp, #12]
    1454:	e029      	b.n	14aa <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1456:	9901      	ldr	r1, [sp, #4]
    1458:	9a03      	ldr	r2, [sp, #12]
    145a:	4613      	mov	r3, r2
    145c:	009b      	lsls	r3, r3, #2
    145e:	4413      	add	r3, r2
    1460:	00db      	lsls	r3, r3, #3
    1462:	440b      	add	r3, r1
    1464:	3340      	adds	r3, #64	; 0x40
    1466:	681a      	ldr	r2, [r3, #0]
    1468:	4994      	ldr	r1, [pc, #592]	; (16bc <Clock_Ip_InitClock+0x584>)
    146a:	4613      	mov	r3, r2
    146c:	00db      	lsls	r3, r3, #3
    146e:	4413      	add	r3, r2
    1470:	440b      	add	r3, r1
    1472:	3301      	adds	r3, #1
    1474:	781b      	ldrb	r3, [r3, #0]
    1476:	461a      	mov	r2, r3
    1478:	4b93      	ldr	r3, [pc, #588]	; (16c8 <Clock_Ip_InitClock+0x590>)
    147a:	5c9b      	ldrb	r3, [r3, r2]
    147c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    147e:	4993      	ldr	r1, [pc, #588]	; (16cc <Clock_Ip_InitClock+0x594>)
    1480:	9a02      	ldr	r2, [sp, #8]
    1482:	4613      	mov	r3, r2
    1484:	009b      	lsls	r3, r3, #2
    1486:	4413      	add	r3, r2
    1488:	009b      	lsls	r3, r3, #2
    148a:	440b      	add	r3, r1
    148c:	3304      	adds	r3, #4
    148e:	6819      	ldr	r1, [r3, #0]
    1490:	9a03      	ldr	r2, [sp, #12]
    1492:	4613      	mov	r3, r2
    1494:	009b      	lsls	r3, r3, #2
    1496:	4413      	add	r3, r2
    1498:	00db      	lsls	r3, r3, #3
    149a:	3340      	adds	r3, #64	; 0x40
    149c:	9a01      	ldr	r2, [sp, #4]
    149e:	4413      	add	r3, r2
    14a0:	4618      	mov	r0, r3
    14a2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    14a4:	9b03      	ldr	r3, [sp, #12]
    14a6:	3301      	adds	r3, #1
    14a8:	9303      	str	r3, [sp, #12]
    14aa:	9b01      	ldr	r3, [sp, #4]
    14ac:	7a9b      	ldrb	r3, [r3, #10]
    14ae:	461a      	mov	r2, r3
    14b0:	9b03      	ldr	r3, [sp, #12]
    14b2:	4293      	cmp	r3, r2
    14b4:	d3cf      	bcc.n	1456 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    14b6:	2300      	movs	r3, #0
    14b8:	9303      	str	r3, [sp, #12]
    14ba:	e029      	b.n	1510 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    14bc:	9901      	ldr	r1, [sp, #4]
    14be:	9a03      	ldr	r2, [sp, #12]
    14c0:	4613      	mov	r3, r2
    14c2:	009b      	lsls	r3, r3, #2
    14c4:	4413      	add	r3, r2
    14c6:	009b      	lsls	r3, r3, #2
    14c8:	440b      	add	r3, r1
    14ca:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    14ce:	681a      	ldr	r2, [r3, #0]
    14d0:	497a      	ldr	r1, [pc, #488]	; (16bc <Clock_Ip_InitClock+0x584>)
    14d2:	4613      	mov	r3, r2
    14d4:	00db      	lsls	r3, r3, #3
    14d6:	4413      	add	r3, r2
    14d8:	440b      	add	r3, r1
    14da:	3301      	adds	r3, #1
    14dc:	781b      	ldrb	r3, [r3, #0]
    14de:	461a      	mov	r2, r3
    14e0:	4b7b      	ldr	r3, [pc, #492]	; (16d0 <Clock_Ip_InitClock+0x598>)
    14e2:	5c9b      	ldrb	r3, [r3, r2]
    14e4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    14e6:	4a7b      	ldr	r2, [pc, #492]	; (16d4 <Clock_Ip_InitClock+0x59c>)
    14e8:	9b02      	ldr	r3, [sp, #8]
    14ea:	011b      	lsls	r3, r3, #4
    14ec:	4413      	add	r3, r2
    14ee:	3304      	adds	r3, #4
    14f0:	681c      	ldr	r4, [r3, #0]
    14f2:	9a03      	ldr	r2, [sp, #12]
    14f4:	4613      	mov	r3, r2
    14f6:	009b      	lsls	r3, r3, #2
    14f8:	4413      	add	r3, r2
    14fa:	009b      	lsls	r3, r3, #2
    14fc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1500:	9a01      	ldr	r2, [sp, #4]
    1502:	4413      	add	r3, r2
    1504:	9903      	ldr	r1, [sp, #12]
    1506:	4618      	mov	r0, r3
    1508:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    150a:	9b03      	ldr	r3, [sp, #12]
    150c:	3301      	adds	r3, #1
    150e:	9303      	str	r3, [sp, #12]
    1510:	9b01      	ldr	r3, [sp, #4]
    1512:	7c9b      	ldrb	r3, [r3, #18]
    1514:	461a      	mov	r2, r3
    1516:	9b03      	ldr	r3, [sp, #12]
    1518:	4293      	cmp	r3, r2
    151a:	d3cf      	bcc.n	14bc <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    151c:	2300      	movs	r3, #0
    151e:	9303      	str	r3, [sp, #12]
    1520:	e02a      	b.n	1578 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1522:	9901      	ldr	r1, [sp, #4]
    1524:	9a03      	ldr	r2, [sp, #12]
    1526:	4613      	mov	r3, r2
    1528:	009b      	lsls	r3, r3, #2
    152a:	4413      	add	r3, r2
    152c:	009b      	lsls	r3, r3, #2
    152e:	440b      	add	r3, r1
    1530:	332c      	adds	r3, #44	; 0x2c
    1532:	681a      	ldr	r2, [r3, #0]
    1534:	4961      	ldr	r1, [pc, #388]	; (16bc <Clock_Ip_InitClock+0x584>)
    1536:	4613      	mov	r3, r2
    1538:	00db      	lsls	r3, r3, #3
    153a:	4413      	add	r3, r2
    153c:	440b      	add	r3, r1
    153e:	3301      	adds	r3, #1
    1540:	781b      	ldrb	r3, [r3, #0]
    1542:	461a      	mov	r2, r3
    1544:	4b64      	ldr	r3, [pc, #400]	; (16d8 <Clock_Ip_InitClock+0x5a0>)
    1546:	5c9b      	ldrb	r3, [r3, r2]
    1548:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    154a:	4964      	ldr	r1, [pc, #400]	; (16dc <Clock_Ip_InitClock+0x5a4>)
    154c:	9a02      	ldr	r2, [sp, #8]
    154e:	4613      	mov	r3, r2
    1550:	009b      	lsls	r3, r3, #2
    1552:	4413      	add	r3, r2
    1554:	009b      	lsls	r3, r3, #2
    1556:	440b      	add	r3, r1
    1558:	3308      	adds	r3, #8
    155a:	6819      	ldr	r1, [r3, #0]
    155c:	9a03      	ldr	r2, [sp, #12]
    155e:	4613      	mov	r3, r2
    1560:	009b      	lsls	r3, r3, #2
    1562:	4413      	add	r3, r2
    1564:	009b      	lsls	r3, r3, #2
    1566:	3328      	adds	r3, #40	; 0x28
    1568:	9a01      	ldr	r2, [sp, #4]
    156a:	4413      	add	r3, r2
    156c:	3304      	adds	r3, #4
    156e:	4618      	mov	r0, r3
    1570:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1572:	9b03      	ldr	r3, [sp, #12]
    1574:	3301      	adds	r3, #1
    1576:	9303      	str	r3, [sp, #12]
    1578:	9b01      	ldr	r3, [sp, #4]
    157a:	7a5b      	ldrb	r3, [r3, #9]
    157c:	461a      	mov	r2, r3
    157e:	9b03      	ldr	r3, [sp, #12]
    1580:	4293      	cmp	r3, r2
    1582:	d3ce      	bcc.n	1522 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1584:	2300      	movs	r3, #0
    1586:	9303      	str	r3, [sp, #12]
    1588:	e029      	b.n	15de <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    158a:	9901      	ldr	r1, [sp, #4]
    158c:	9a03      	ldr	r2, [sp, #12]
    158e:	4613      	mov	r3, r2
    1590:	009b      	lsls	r3, r3, #2
    1592:	4413      	add	r3, r2
    1594:	00db      	lsls	r3, r3, #3
    1596:	440b      	add	r3, r1
    1598:	3340      	adds	r3, #64	; 0x40
    159a:	681a      	ldr	r2, [r3, #0]
    159c:	4947      	ldr	r1, [pc, #284]	; (16bc <Clock_Ip_InitClock+0x584>)
    159e:	4613      	mov	r3, r2
    15a0:	00db      	lsls	r3, r3, #3
    15a2:	4413      	add	r3, r2
    15a4:	440b      	add	r3, r1
    15a6:	3301      	adds	r3, #1
    15a8:	781b      	ldrb	r3, [r3, #0]
    15aa:	461a      	mov	r2, r3
    15ac:	4b46      	ldr	r3, [pc, #280]	; (16c8 <Clock_Ip_InitClock+0x590>)
    15ae:	5c9b      	ldrb	r3, [r3, r2]
    15b0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    15b2:	4946      	ldr	r1, [pc, #280]	; (16cc <Clock_Ip_InitClock+0x594>)
    15b4:	9a02      	ldr	r2, [sp, #8]
    15b6:	4613      	mov	r3, r2
    15b8:	009b      	lsls	r3, r3, #2
    15ba:	4413      	add	r3, r2
    15bc:	009b      	lsls	r3, r3, #2
    15be:	440b      	add	r3, r1
    15c0:	330c      	adds	r3, #12
    15c2:	6819      	ldr	r1, [r3, #0]
    15c4:	9a03      	ldr	r2, [sp, #12]
    15c6:	4613      	mov	r3, r2
    15c8:	009b      	lsls	r3, r3, #2
    15ca:	4413      	add	r3, r2
    15cc:	00db      	lsls	r3, r3, #3
    15ce:	3340      	adds	r3, #64	; 0x40
    15d0:	9a01      	ldr	r2, [sp, #4]
    15d2:	4413      	add	r3, r2
    15d4:	4618      	mov	r0, r3
    15d6:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    15d8:	9b03      	ldr	r3, [sp, #12]
    15da:	3301      	adds	r3, #1
    15dc:	9303      	str	r3, [sp, #12]
    15de:	9b01      	ldr	r3, [sp, #4]
    15e0:	7a9b      	ldrb	r3, [r3, #10]
    15e2:	461a      	mov	r2, r3
    15e4:	9b03      	ldr	r3, [sp, #12]
    15e6:	4293      	cmp	r3, r2
    15e8:	d3cf      	bcc.n	158a <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    15ea:	2300      	movs	r3, #0
    15ec:	9303      	str	r3, [sp, #12]
    15ee:	e025      	b.n	163c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    15f0:	9a01      	ldr	r2, [sp, #4]
    15f2:	9b03      	ldr	r3, [sp, #12]
    15f4:	3324      	adds	r3, #36	; 0x24
    15f6:	011b      	lsls	r3, r3, #4
    15f8:	4413      	add	r3, r2
    15fa:	3304      	adds	r3, #4
    15fc:	681a      	ldr	r2, [r3, #0]
    15fe:	492f      	ldr	r1, [pc, #188]	; (16bc <Clock_Ip_InitClock+0x584>)
    1600:	4613      	mov	r3, r2
    1602:	00db      	lsls	r3, r3, #3
    1604:	4413      	add	r3, r2
    1606:	440b      	add	r3, r1
    1608:	3301      	adds	r3, #1
    160a:	781b      	ldrb	r3, [r3, #0]
    160c:	461a      	mov	r2, r3
    160e:	4b34      	ldr	r3, [pc, #208]	; (16e0 <Clock_Ip_InitClock+0x5a8>)
    1610:	5c9b      	ldrb	r3, [r3, r2]
    1612:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1614:	4933      	ldr	r1, [pc, #204]	; (16e4 <Clock_Ip_InitClock+0x5ac>)
    1616:	9a02      	ldr	r2, [sp, #8]
    1618:	4613      	mov	r3, r2
    161a:	005b      	lsls	r3, r3, #1
    161c:	4413      	add	r3, r2
    161e:	009b      	lsls	r3, r3, #2
    1620:	440b      	add	r3, r1
    1622:	3304      	adds	r3, #4
    1624:	681b      	ldr	r3, [r3, #0]
    1626:	9a03      	ldr	r2, [sp, #12]
    1628:	3224      	adds	r2, #36	; 0x24
    162a:	0112      	lsls	r2, r2, #4
    162c:	9901      	ldr	r1, [sp, #4]
    162e:	440a      	add	r2, r1
    1630:	3204      	adds	r2, #4
    1632:	4610      	mov	r0, r2
    1634:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1636:	9b03      	ldr	r3, [sp, #12]
    1638:	3301      	adds	r3, #1
    163a:	9303      	str	r3, [sp, #12]
    163c:	9b01      	ldr	r3, [sp, #4]
    163e:	7b9b      	ldrb	r3, [r3, #14]
    1640:	461a      	mov	r2, r3
    1642:	9b03      	ldr	r3, [sp, #12]
    1644:	4293      	cmp	r3, r2
    1646:	d3d3      	bcc.n	15f0 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1648:	4b27      	ldr	r3, [pc, #156]	; (16e8 <Clock_Ip_InitClock+0x5b0>)
    164a:	2200      	movs	r2, #0
    164c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    164e:	4b26      	ldr	r3, [pc, #152]	; (16e8 <Clock_Ip_InitClock+0x5b0>)
    1650:	2200      	movs	r2, #0
    1652:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1654:	4b24      	ldr	r3, [pc, #144]	; (16e8 <Clock_Ip_InitClock+0x5b0>)
    1656:	2201      	movs	r2, #1
    1658:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    165a:	4b23      	ldr	r3, [pc, #140]	; (16e8 <Clock_Ip_InitClock+0x5b0>)
    165c:	2200      	movs	r2, #0
    165e:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1660:	f000 fa9c 	bl	1b9c <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1664:	2300      	movs	r3, #0
    1666:	9303      	str	r3, [sp, #12]
    1668:	e04c      	b.n	1704 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    166a:	9a01      	ldr	r2, [sp, #4]
    166c:	9b03      	ldr	r3, [sp, #12]
    166e:	330d      	adds	r3, #13
    1670:	00db      	lsls	r3, r3, #3
    1672:	4413      	add	r3, r2
    1674:	685b      	ldr	r3, [r3, #4]
    1676:	4a1d      	ldr	r2, [pc, #116]	; (16ec <Clock_Ip_InitClock+0x5b4>)
    1678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    167c:	2b03      	cmp	r3, #3
    167e:	d03b      	beq.n	16f8 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1680:	9b01      	ldr	r3, [sp, #4]
    1682:	9a03      	ldr	r2, [sp, #12]
    1684:	320d      	adds	r2, #13
    1686:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    168a:	490c      	ldr	r1, [pc, #48]	; (16bc <Clock_Ip_InitClock+0x584>)
    168c:	4613      	mov	r3, r2
    168e:	00db      	lsls	r3, r3, #3
    1690:	4413      	add	r3, r2
    1692:	440b      	add	r3, r1
    1694:	3301      	adds	r3, #1
    1696:	781b      	ldrb	r3, [r3, #0]
    1698:	461a      	mov	r2, r3
    169a:	4b15      	ldr	r3, [pc, #84]	; (16f0 <Clock_Ip_InitClock+0x5b8>)
    169c:	5c9b      	ldrb	r3, [r3, r2]
    169e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    16a0:	4a14      	ldr	r2, [pc, #80]	; (16f4 <Clock_Ip_InitClock+0x5bc>)
    16a2:	9b02      	ldr	r3, [sp, #8]
    16a4:	00db      	lsls	r3, r3, #3
    16a6:	4413      	add	r3, r2
    16a8:	685b      	ldr	r3, [r3, #4]
    16aa:	9a03      	ldr	r2, [sp, #12]
    16ac:	320d      	adds	r2, #13
    16ae:	00d2      	lsls	r2, r2, #3
    16b0:	9901      	ldr	r1, [sp, #4]
    16b2:	440a      	add	r2, r1
    16b4:	4610      	mov	r0, r2
    16b6:	4798      	blx	r3
    16b8:	e021      	b.n	16fe <Clock_Ip_InitClock+0x5c6>
    16ba:	bf00      	nop
    16bc:	0000b6d4 	.word	0x0000b6d4
    16c0:	0000b644 	.word	0x0000b644
    16c4:	0000bc20 	.word	0x0000bc20
    16c8:	0000b694 	.word	0x0000b694
    16cc:	0000bce0 	.word	0x0000bce0
    16d0:	0000b6c4 	.word	0x0000b6c4
    16d4:	0000bcd0 	.word	0x0000bcd0
    16d8:	0000b654 	.word	0x0000b654
    16dc:	0000bc28 	.word	0x0000bc28
    16e0:	0000b684 	.word	0x0000b684
    16e4:	0000bc50 	.word	0x0000bc50
    16e8:	1fff8b4c 	.word	0x1fff8b4c
    16ec:	0000bb20 	.word	0x0000bb20
    16f0:	0000b6a4 	.word	0x0000b6a4
    16f4:	0000bd0c 	.word	0x0000bd0c
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    16f8:	4b3a      	ldr	r3, [pc, #232]	; (17e4 <Clock_Ip_InitClock+0x6ac>)
    16fa:	2201      	movs	r2, #1
    16fc:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    16fe:	9b03      	ldr	r3, [sp, #12]
    1700:	3301      	adds	r3, #1
    1702:	9303      	str	r3, [sp, #12]
    1704:	9b01      	ldr	r3, [sp, #4]
    1706:	7adb      	ldrb	r3, [r3, #11]
    1708:	461a      	mov	r2, r3
    170a:	9b03      	ldr	r3, [sp, #12]
    170c:	4293      	cmp	r3, r2
    170e:	d3ac      	bcc.n	166a <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1710:	4b34      	ldr	r3, [pc, #208]	; (17e4 <Clock_Ip_InitClock+0x6ac>)
    1712:	781b      	ldrb	r3, [r3, #0]
    1714:	f083 0301 	eor.w	r3, r3, #1
    1718:	b2db      	uxtb	r3, r3
    171a:	2b00      	cmp	r3, #0
    171c:	d05e      	beq.n	17dc <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    171e:	2300      	movs	r3, #0
    1720:	9303      	str	r3, [sp, #12]
    1722:	e01f      	b.n	1764 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1724:	9a01      	ldr	r2, [sp, #4]
    1726:	9b03      	ldr	r3, [sp, #12]
    1728:	334e      	adds	r3, #78	; 0x4e
    172a:	00db      	lsls	r3, r3, #3
    172c:	4413      	add	r3, r2
    172e:	685a      	ldr	r2, [r3, #4]
    1730:	492d      	ldr	r1, [pc, #180]	; (17e8 <Clock_Ip_InitClock+0x6b0>)
    1732:	4613      	mov	r3, r2
    1734:	00db      	lsls	r3, r3, #3
    1736:	4413      	add	r3, r2
    1738:	440b      	add	r3, r1
    173a:	3301      	adds	r3, #1
    173c:	781b      	ldrb	r3, [r3, #0]
    173e:	461a      	mov	r2, r3
    1740:	4b2a      	ldr	r3, [pc, #168]	; (17ec <Clock_Ip_InitClock+0x6b4>)
    1742:	5c9b      	ldrb	r3, [r3, r2]
    1744:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1746:	4a2a      	ldr	r2, [pc, #168]	; (17f0 <Clock_Ip_InitClock+0x6b8>)
    1748:	9b02      	ldr	r3, [sp, #8]
    174a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    174e:	9a03      	ldr	r2, [sp, #12]
    1750:	324e      	adds	r2, #78	; 0x4e
    1752:	00d2      	lsls	r2, r2, #3
    1754:	9901      	ldr	r1, [sp, #4]
    1756:	440a      	add	r2, r1
    1758:	3204      	adds	r2, #4
    175a:	4610      	mov	r0, r2
    175c:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    175e:	9b03      	ldr	r3, [sp, #12]
    1760:	3301      	adds	r3, #1
    1762:	9303      	str	r3, [sp, #12]
    1764:	9b01      	ldr	r3, [sp, #4]
    1766:	7c1b      	ldrb	r3, [r3, #16]
    1768:	461a      	mov	r2, r3
    176a:	9b03      	ldr	r3, [sp, #12]
    176c:	4293      	cmp	r3, r2
    176e:	d3d9      	bcc.n	1724 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1770:	2300      	movs	r3, #0
    1772:	9303      	str	r3, [sp, #12]
    1774:	e028      	b.n	17c8 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1776:	9901      	ldr	r1, [sp, #4]
    1778:	9a03      	ldr	r2, [sp, #12]
    177a:	4613      	mov	r3, r2
    177c:	009b      	lsls	r3, r3, #2
    177e:	4413      	add	r3, r2
    1780:	009b      	lsls	r3, r3, #2
    1782:	440b      	add	r3, r1
    1784:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1788:	681a      	ldr	r2, [r3, #0]
    178a:	4917      	ldr	r1, [pc, #92]	; (17e8 <Clock_Ip_InitClock+0x6b0>)
    178c:	4613      	mov	r3, r2
    178e:	00db      	lsls	r3, r3, #3
    1790:	4413      	add	r3, r2
    1792:	440b      	add	r3, r1
    1794:	3301      	adds	r3, #1
    1796:	781b      	ldrb	r3, [r3, #0]
    1798:	461a      	mov	r2, r3
    179a:	4b16      	ldr	r3, [pc, #88]	; (17f4 <Clock_Ip_InitClock+0x6bc>)
    179c:	5c9b      	ldrb	r3, [r3, r2]
    179e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    17a0:	4a15      	ldr	r2, [pc, #84]	; (17f8 <Clock_Ip_InitClock+0x6c0>)
    17a2:	9b02      	ldr	r3, [sp, #8]
    17a4:	011b      	lsls	r3, r3, #4
    17a6:	4413      	add	r3, r2
    17a8:	330c      	adds	r3, #12
    17aa:	6819      	ldr	r1, [r3, #0]
    17ac:	9a03      	ldr	r2, [sp, #12]
    17ae:	4613      	mov	r3, r2
    17b0:	009b      	lsls	r3, r3, #2
    17b2:	4413      	add	r3, r2
    17b4:	009b      	lsls	r3, r3, #2
    17b6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    17ba:	9a01      	ldr	r2, [sp, #4]
    17bc:	4413      	add	r3, r2
    17be:	4618      	mov	r0, r3
    17c0:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    17c2:	9b03      	ldr	r3, [sp, #12]
    17c4:	3301      	adds	r3, #1
    17c6:	9303      	str	r3, [sp, #12]
    17c8:	9b01      	ldr	r3, [sp, #4]
    17ca:	7c9b      	ldrb	r3, [r3, #18]
    17cc:	461a      	mov	r2, r3
    17ce:	9b03      	ldr	r3, [sp, #12]
    17d0:	4293      	cmp	r3, r2
    17d2:	d3d0      	bcc.n	1776 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    17d4:	2104      	movs	r1, #4
    17d6:	9801      	ldr	r0, [sp, #4]
    17d8:	f002 ff48 	bl	466c <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    17dc:	bf00      	nop
    17de:	b004      	add	sp, #16
    17e0:	bd10      	pop	{r4, pc}
    17e2:	bf00      	nop
    17e4:	1fff8b4c 	.word	0x1fff8b4c
    17e8:	0000b6d4 	.word	0x0000b6d4
    17ec:	0000b674 	.word	0x0000b674
    17f0:	0000bc5c 	.word	0x0000bc5c
    17f4:	0000b6c4 	.word	0x0000b6c4
    17f8:	0000bcd0 	.word	0x0000bcd0

000017fc <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    17fc:	b500      	push	{lr}
    17fe:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1800:	2302      	movs	r3, #2
    1802:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1804:	2300      	movs	r3, #0
    1806:	9304      	str	r3, [sp, #16]
    1808:	e02c      	b.n	1864 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    180a:	4a36      	ldr	r2, [pc, #216]	; (18e4 <Clock_Ip_GetPllStatus+0xe8>)
    180c:	9b04      	ldr	r3, [sp, #16]
    180e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1812:	4935      	ldr	r1, [pc, #212]	; (18e8 <Clock_Ip_GetPllStatus+0xec>)
    1814:	4613      	mov	r3, r2
    1816:	00db      	lsls	r3, r3, #3
    1818:	4413      	add	r3, r2
    181a:	440b      	add	r3, r1
    181c:	3301      	adds	r3, #1
    181e:	781b      	ldrb	r3, [r3, #0]
    1820:	461a      	mov	r2, r3
    1822:	4b32      	ldr	r3, [pc, #200]	; (18ec <Clock_Ip_GetPllStatus+0xf0>)
    1824:	5c9b      	ldrb	r3, [r3, r2]
    1826:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1828:	4931      	ldr	r1, [pc, #196]	; (18f0 <Clock_Ip_GetPllStatus+0xf4>)
    182a:	9a03      	ldr	r2, [sp, #12]
    182c:	4613      	mov	r3, r2
    182e:	009b      	lsls	r3, r3, #2
    1830:	4413      	add	r3, r2
    1832:	009b      	lsls	r3, r3, #2
    1834:	440b      	add	r3, r1
    1836:	3308      	adds	r3, #8
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	492a      	ldr	r1, [pc, #168]	; (18e4 <Clock_Ip_GetPllStatus+0xe8>)
    183c:	9a04      	ldr	r2, [sp, #16]
    183e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1842:	4610      	mov	r0, r2
    1844:	4798      	blx	r3
    1846:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1848:	9b02      	ldr	r3, [sp, #8]
    184a:	2b01      	cmp	r3, #1
    184c:	d102      	bne.n	1854 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    184e:	2301      	movs	r3, #1
    1850:	9305      	str	r3, [sp, #20]
            break;
    1852:	e00d      	b.n	1870 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1854:	9b02      	ldr	r3, [sp, #8]
    1856:	2b02      	cmp	r3, #2
    1858:	d101      	bne.n	185e <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    185a:	2300      	movs	r3, #0
    185c:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    185e:	9b04      	ldr	r3, [sp, #16]
    1860:	3301      	adds	r3, #1
    1862:	9304      	str	r3, [sp, #16]
    1864:	4b23      	ldr	r3, [pc, #140]	; (18f4 <Clock_Ip_GetPllStatus+0xf8>)
    1866:	789b      	ldrb	r3, [r3, #2]
    1868:	461a      	mov	r2, r3
    186a:	9b04      	ldr	r3, [sp, #16]
    186c:	4293      	cmp	r3, r2
    186e:	d3cc      	bcc.n	180a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1870:	9b05      	ldr	r3, [sp, #20]
    1872:	2b00      	cmp	r3, #0
    1874:	d130      	bne.n	18d8 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1876:	2300      	movs	r3, #0
    1878:	9304      	str	r3, [sp, #16]
    187a:	e027      	b.n	18cc <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    187c:	4a1e      	ldr	r2, [pc, #120]	; (18f8 <Clock_Ip_GetPllStatus+0xfc>)
    187e:	9b04      	ldr	r3, [sp, #16]
    1880:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1884:	4918      	ldr	r1, [pc, #96]	; (18e8 <Clock_Ip_GetPllStatus+0xec>)
    1886:	4613      	mov	r3, r2
    1888:	00db      	lsls	r3, r3, #3
    188a:	4413      	add	r3, r2
    188c:	440b      	add	r3, r1
    188e:	3301      	adds	r3, #1
    1890:	781b      	ldrb	r3, [r3, #0]
    1892:	461a      	mov	r2, r3
    1894:	4b19      	ldr	r3, [pc, #100]	; (18fc <Clock_Ip_GetPllStatus+0x100>)
    1896:	5c9b      	ldrb	r3, [r3, r2]
    1898:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    189a:	4919      	ldr	r1, [pc, #100]	; (1900 <Clock_Ip_GetPllStatus+0x104>)
    189c:	9a03      	ldr	r2, [sp, #12]
    189e:	4613      	mov	r3, r2
    18a0:	005b      	lsls	r3, r3, #1
    18a2:	4413      	add	r3, r2
    18a4:	009b      	lsls	r3, r3, #2
    18a6:	440b      	add	r3, r1
    18a8:	3308      	adds	r3, #8
    18aa:	681b      	ldr	r3, [r3, #0]
    18ac:	4912      	ldr	r1, [pc, #72]	; (18f8 <Clock_Ip_GetPllStatus+0xfc>)
    18ae:	9a04      	ldr	r2, [sp, #16]
    18b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    18b4:	4610      	mov	r0, r2
    18b6:	4798      	blx	r3
    18b8:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    18ba:	9b01      	ldr	r3, [sp, #4]
    18bc:	2b01      	cmp	r3, #1
    18be:	d102      	bne.n	18c6 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    18c0:	2301      	movs	r3, #1
    18c2:	9305      	str	r3, [sp, #20]
                break;
    18c4:	e008      	b.n	18d8 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    18c6:	9b04      	ldr	r3, [sp, #16]
    18c8:	3301      	adds	r3, #1
    18ca:	9304      	str	r3, [sp, #16]
    18cc:	4b09      	ldr	r3, [pc, #36]	; (18f4 <Clock_Ip_GetPllStatus+0xf8>)
    18ce:	78db      	ldrb	r3, [r3, #3]
    18d0:	461a      	mov	r2, r3
    18d2:	9b04      	ldr	r3, [sp, #16]
    18d4:	4293      	cmp	r3, r2
    18d6:	d3d1      	bcc.n	187c <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    18d8:	9b05      	ldr	r3, [sp, #20]
}
    18da:	4618      	mov	r0, r3
    18dc:	b007      	add	sp, #28
    18de:	f85d fb04 	ldr.w	pc, [sp], #4
    18e2:	bf00      	nop
    18e4:	0000bbdc 	.word	0x0000bbdc
    18e8:	0000b6d4 	.word	0x0000b6d4
    18ec:	0000b694 	.word	0x0000b694
    18f0:	0000bce0 	.word	0x0000bce0
    18f4:	1fff8b4c 	.word	0x1fff8b4c
    18f8:	0000bbe0 	.word	0x0000bbe0
    18fc:	0000b684 	.word	0x0000b684
    1900:	0000bc50 	.word	0x0000bc50

00001904 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1904:	b500      	push	{lr}
    1906:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1908:	4b55      	ldr	r3, [pc, #340]	; (1a60 <Clock_Ip_DistributePll+0x15c>)
    190a:	681b      	ldr	r3, [r3, #0]
    190c:	2b00      	cmp	r3, #0
    190e:	f000 80a2 	beq.w	1a56 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1912:	2300      	movs	r3, #0
    1914:	9301      	str	r3, [sp, #4]
    1916:	e02c      	b.n	1972 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1918:	4b51      	ldr	r3, [pc, #324]	; (1a60 <Clock_Ip_DistributePll+0x15c>)
    191a:	681a      	ldr	r2, [r3, #0]
    191c:	9b01      	ldr	r3, [sp, #4]
    191e:	330d      	adds	r3, #13
    1920:	00db      	lsls	r3, r3, #3
    1922:	4413      	add	r3, r2
    1924:	685b      	ldr	r3, [r3, #4]
    1926:	4a4f      	ldr	r2, [pc, #316]	; (1a64 <Clock_Ip_DistributePll+0x160>)
    1928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    192c:	2b03      	cmp	r3, #3
    192e:	d11d      	bne.n	196c <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1930:	4b4b      	ldr	r3, [pc, #300]	; (1a60 <Clock_Ip_DistributePll+0x15c>)
    1932:	681b      	ldr	r3, [r3, #0]
    1934:	9a01      	ldr	r2, [sp, #4]
    1936:	320d      	adds	r2, #13
    1938:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    193c:	494a      	ldr	r1, [pc, #296]	; (1a68 <Clock_Ip_DistributePll+0x164>)
    193e:	4613      	mov	r3, r2
    1940:	00db      	lsls	r3, r3, #3
    1942:	4413      	add	r3, r2
    1944:	440b      	add	r3, r1
    1946:	3301      	adds	r3, #1
    1948:	781b      	ldrb	r3, [r3, #0]
    194a:	461a      	mov	r2, r3
    194c:	4b47      	ldr	r3, [pc, #284]	; (1a6c <Clock_Ip_DistributePll+0x168>)
    194e:	5c9b      	ldrb	r3, [r3, r2]
    1950:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    1952:	4a47      	ldr	r2, [pc, #284]	; (1a70 <Clock_Ip_DistributePll+0x16c>)
    1954:	9b00      	ldr	r3, [sp, #0]
    1956:	00db      	lsls	r3, r3, #3
    1958:	4413      	add	r3, r2
    195a:	685b      	ldr	r3, [r3, #4]
    195c:	4a40      	ldr	r2, [pc, #256]	; (1a60 <Clock_Ip_DistributePll+0x15c>)
    195e:	6811      	ldr	r1, [r2, #0]
    1960:	9a01      	ldr	r2, [sp, #4]
    1962:	320d      	adds	r2, #13
    1964:	00d2      	lsls	r2, r2, #3
    1966:	440a      	add	r2, r1
    1968:	4610      	mov	r0, r2
    196a:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    196c:	9b01      	ldr	r3, [sp, #4]
    196e:	3301      	adds	r3, #1
    1970:	9301      	str	r3, [sp, #4]
    1972:	4b3b      	ldr	r3, [pc, #236]	; (1a60 <Clock_Ip_DistributePll+0x15c>)
    1974:	681b      	ldr	r3, [r3, #0]
    1976:	7adb      	ldrb	r3, [r3, #11]
    1978:	461a      	mov	r2, r3
    197a:	9b01      	ldr	r3, [sp, #4]
    197c:	4293      	cmp	r3, r2
    197e:	d3cb      	bcc.n	1918 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1980:	4b3c      	ldr	r3, [pc, #240]	; (1a74 <Clock_Ip_DistributePll+0x170>)
    1982:	781b      	ldrb	r3, [r3, #0]
    1984:	2b00      	cmp	r3, #0
    1986:	d066      	beq.n	1a56 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1988:	2300      	movs	r3, #0
    198a:	9301      	str	r3, [sp, #4]
    198c:	e021      	b.n	19d2 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    198e:	4b34      	ldr	r3, [pc, #208]	; (1a60 <Clock_Ip_DistributePll+0x15c>)
    1990:	681a      	ldr	r2, [r3, #0]
    1992:	9b01      	ldr	r3, [sp, #4]
    1994:	334e      	adds	r3, #78	; 0x4e
    1996:	00db      	lsls	r3, r3, #3
    1998:	4413      	add	r3, r2
    199a:	685a      	ldr	r2, [r3, #4]
    199c:	4932      	ldr	r1, [pc, #200]	; (1a68 <Clock_Ip_DistributePll+0x164>)
    199e:	4613      	mov	r3, r2
    19a0:	00db      	lsls	r3, r3, #3
    19a2:	4413      	add	r3, r2
    19a4:	440b      	add	r3, r1
    19a6:	3301      	adds	r3, #1
    19a8:	781b      	ldrb	r3, [r3, #0]
    19aa:	461a      	mov	r2, r3
    19ac:	4b32      	ldr	r3, [pc, #200]	; (1a78 <Clock_Ip_DistributePll+0x174>)
    19ae:	5c9b      	ldrb	r3, [r3, r2]
    19b0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    19b2:	4a32      	ldr	r2, [pc, #200]	; (1a7c <Clock_Ip_DistributePll+0x178>)
    19b4:	9b00      	ldr	r3, [sp, #0]
    19b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    19ba:	4a29      	ldr	r2, [pc, #164]	; (1a60 <Clock_Ip_DistributePll+0x15c>)
    19bc:	6811      	ldr	r1, [r2, #0]
    19be:	9a01      	ldr	r2, [sp, #4]
    19c0:	324e      	adds	r2, #78	; 0x4e
    19c2:	00d2      	lsls	r2, r2, #3
    19c4:	440a      	add	r2, r1
    19c6:	3204      	adds	r2, #4
    19c8:	4610      	mov	r0, r2
    19ca:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    19cc:	9b01      	ldr	r3, [sp, #4]
    19ce:	3301      	adds	r3, #1
    19d0:	9301      	str	r3, [sp, #4]
    19d2:	4b23      	ldr	r3, [pc, #140]	; (1a60 <Clock_Ip_DistributePll+0x15c>)
    19d4:	681b      	ldr	r3, [r3, #0]
    19d6:	7c1b      	ldrb	r3, [r3, #16]
    19d8:	461a      	mov	r2, r3
    19da:	9b01      	ldr	r3, [sp, #4]
    19dc:	4293      	cmp	r3, r2
    19de:	d3d6      	bcc.n	198e <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    19e0:	2300      	movs	r3, #0
    19e2:	9301      	str	r3, [sp, #4]
    19e4:	e02a      	b.n	1a3c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    19e6:	4b1e      	ldr	r3, [pc, #120]	; (1a60 <Clock_Ip_DistributePll+0x15c>)
    19e8:	6819      	ldr	r1, [r3, #0]
    19ea:	9a01      	ldr	r2, [sp, #4]
    19ec:	4613      	mov	r3, r2
    19ee:	009b      	lsls	r3, r3, #2
    19f0:	4413      	add	r3, r2
    19f2:	009b      	lsls	r3, r3, #2
    19f4:	440b      	add	r3, r1
    19f6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    19fa:	681a      	ldr	r2, [r3, #0]
    19fc:	491a      	ldr	r1, [pc, #104]	; (1a68 <Clock_Ip_DistributePll+0x164>)
    19fe:	4613      	mov	r3, r2
    1a00:	00db      	lsls	r3, r3, #3
    1a02:	4413      	add	r3, r2
    1a04:	440b      	add	r3, r1
    1a06:	3301      	adds	r3, #1
    1a08:	781b      	ldrb	r3, [r3, #0]
    1a0a:	461a      	mov	r2, r3
    1a0c:	4b1c      	ldr	r3, [pc, #112]	; (1a80 <Clock_Ip_DistributePll+0x17c>)
    1a0e:	5c9b      	ldrb	r3, [r3, r2]
    1a10:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    1a12:	4a1c      	ldr	r2, [pc, #112]	; (1a84 <Clock_Ip_DistributePll+0x180>)
    1a14:	9b00      	ldr	r3, [sp, #0]
    1a16:	011b      	lsls	r3, r3, #4
    1a18:	4413      	add	r3, r2
    1a1a:	330c      	adds	r3, #12
    1a1c:	6819      	ldr	r1, [r3, #0]
    1a1e:	4b10      	ldr	r3, [pc, #64]	; (1a60 <Clock_Ip_DistributePll+0x15c>)
    1a20:	6818      	ldr	r0, [r3, #0]
    1a22:	9a01      	ldr	r2, [sp, #4]
    1a24:	4613      	mov	r3, r2
    1a26:	009b      	lsls	r3, r3, #2
    1a28:	4413      	add	r3, r2
    1a2a:	009b      	lsls	r3, r3, #2
    1a2c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a30:	4403      	add	r3, r0
    1a32:	4618      	mov	r0, r3
    1a34:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1a36:	9b01      	ldr	r3, [sp, #4]
    1a38:	3301      	adds	r3, #1
    1a3a:	9301      	str	r3, [sp, #4]
    1a3c:	4b08      	ldr	r3, [pc, #32]	; (1a60 <Clock_Ip_DistributePll+0x15c>)
    1a3e:	681b      	ldr	r3, [r3, #0]
    1a40:	7c9b      	ldrb	r3, [r3, #18]
    1a42:	461a      	mov	r2, r3
    1a44:	9b01      	ldr	r3, [sp, #4]
    1a46:	4293      	cmp	r3, r2
    1a48:	d3cd      	bcc.n	19e6 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1a4a:	4b05      	ldr	r3, [pc, #20]	; (1a60 <Clock_Ip_DistributePll+0x15c>)
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	2104      	movs	r1, #4
    1a50:	4618      	mov	r0, r3
    1a52:	f002 fe0b 	bl	466c <Clock_Ip_Command>
        }
    }
}
    1a56:	bf00      	nop
    1a58:	b003      	add	sp, #12
    1a5a:	f85d fb04 	ldr.w	pc, [sp], #4
    1a5e:	bf00      	nop
    1a60:	1fff8b44 	.word	0x1fff8b44
    1a64:	0000bb20 	.word	0x0000bb20
    1a68:	0000b6d4 	.word	0x0000b6d4
    1a6c:	0000b6a4 	.word	0x0000b6a4
    1a70:	0000bd0c 	.word	0x0000bd0c
    1a74:	1fff8b4c 	.word	0x1fff8b4c
    1a78:	0000b674 	.word	0x0000b674
    1a7c:	0000bc5c 	.word	0x0000bc5c
    1a80:	0000b6c4 	.word	0x0000b6c4
    1a84:	0000bcd0 	.word	0x0000bcd0

00001a88 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    1a88:	b500      	push	{lr}
    1a8a:	b085      	sub	sp, #20
    1a8c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1a8e:	490c      	ldr	r1, [pc, #48]	; (1ac0 <Clock_Ip_DisableClockMonitor+0x38>)
    1a90:	9a01      	ldr	r2, [sp, #4]
    1a92:	4613      	mov	r3, r2
    1a94:	00db      	lsls	r3, r3, #3
    1a96:	4413      	add	r3, r2
    1a98:	440b      	add	r3, r1
    1a9a:	3301      	adds	r3, #1
    1a9c:	781b      	ldrb	r3, [r3, #0]
    1a9e:	461a      	mov	r2, r3
    1aa0:	4b08      	ldr	r3, [pc, #32]	; (1ac4 <Clock_Ip_DisableClockMonitor+0x3c>)
    1aa2:	5c9b      	ldrb	r3, [r3, r2]
    1aa4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    1aa6:	4a08      	ldr	r2, [pc, #32]	; (1ac8 <Clock_Ip_DisableClockMonitor+0x40>)
    1aa8:	9b03      	ldr	r3, [sp, #12]
    1aaa:	011b      	lsls	r3, r3, #4
    1aac:	4413      	add	r3, r2
    1aae:	3308      	adds	r3, #8
    1ab0:	681b      	ldr	r3, [r3, #0]
    1ab2:	9801      	ldr	r0, [sp, #4]
    1ab4:	4798      	blx	r3
}
    1ab6:	bf00      	nop
    1ab8:	b005      	add	sp, #20
    1aba:	f85d fb04 	ldr.w	pc, [sp], #4
    1abe:	bf00      	nop
    1ac0:	0000b6d4 	.word	0x0000b6d4
    1ac4:	0000b6c4 	.word	0x0000b6c4
    1ac8:	0000bcd0 	.word	0x0000bcd0

00001acc <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    1acc:	b082      	sub	sp, #8
    1ace:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    1ad0:	4a02      	ldr	r2, [pc, #8]	; (1adc <Clock_Ip_InstallNotificationsCallback+0x10>)
    1ad2:	9b01      	ldr	r3, [sp, #4]
    1ad4:	6013      	str	r3, [r2, #0]
}
    1ad6:	bf00      	nop
    1ad8:	b002      	add	sp, #8
    1ada:	4770      	bx	lr
    1adc:	1fff8b14 	.word	0x1fff8b14

00001ae0 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    1ae0:	b500      	push	{lr}
    1ae2:	b085      	sub	sp, #20
    1ae4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1ae6:	490c      	ldr	r1, [pc, #48]	; (1b18 <Clock_Ip_DisableModuleClock+0x38>)
    1ae8:	9a01      	ldr	r2, [sp, #4]
    1aea:	4613      	mov	r3, r2
    1aec:	00db      	lsls	r3, r3, #3
    1aee:	4413      	add	r3, r2
    1af0:	440b      	add	r3, r1
    1af2:	3301      	adds	r3, #1
    1af4:	781b      	ldrb	r3, [r3, #0]
    1af6:	461a      	mov	r2, r3
    1af8:	4b08      	ldr	r3, [pc, #32]	; (1b1c <Clock_Ip_DisableModuleClock+0x3c>)
    1afa:	5c9b      	ldrb	r3, [r3, r2]
    1afc:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    1afe:	4a08      	ldr	r2, [pc, #32]	; (1b20 <Clock_Ip_DisableModuleClock+0x40>)
    1b00:	9b03      	ldr	r3, [sp, #12]
    1b02:	00db      	lsls	r3, r3, #3
    1b04:	4413      	add	r3, r2
    1b06:	685b      	ldr	r3, [r3, #4]
    1b08:	2101      	movs	r1, #1
    1b0a:	9801      	ldr	r0, [sp, #4]
    1b0c:	4798      	blx	r3
}
    1b0e:	bf00      	nop
    1b10:	b005      	add	sp, #20
    1b12:	f85d fb04 	ldr.w	pc, [sp], #4
    1b16:	bf00      	nop
    1b18:	0000b6d4 	.word	0x0000b6d4
    1b1c:	0000b674 	.word	0x0000b674
    1b20:	0000bc5c 	.word	0x0000bc5c

00001b24 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    1b24:	b500      	push	{lr}
    1b26:	b085      	sub	sp, #20
    1b28:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1b2a:	490c      	ldr	r1, [pc, #48]	; (1b5c <Clock_Ip_EnableModuleClock+0x38>)
    1b2c:	9a01      	ldr	r2, [sp, #4]
    1b2e:	4613      	mov	r3, r2
    1b30:	00db      	lsls	r3, r3, #3
    1b32:	4413      	add	r3, r2
    1b34:	440b      	add	r3, r1
    1b36:	3301      	adds	r3, #1
    1b38:	781b      	ldrb	r3, [r3, #0]
    1b3a:	461a      	mov	r2, r3
    1b3c:	4b08      	ldr	r3, [pc, #32]	; (1b60 <Clock_Ip_EnableModuleClock+0x3c>)
    1b3e:	5c9b      	ldrb	r3, [r3, r2]
    1b40:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    1b42:	4a08      	ldr	r2, [pc, #32]	; (1b64 <Clock_Ip_EnableModuleClock+0x40>)
    1b44:	9b03      	ldr	r3, [sp, #12]
    1b46:	00db      	lsls	r3, r3, #3
    1b48:	4413      	add	r3, r2
    1b4a:	685b      	ldr	r3, [r3, #4]
    1b4c:	2100      	movs	r1, #0
    1b4e:	9801      	ldr	r0, [sp, #4]
    1b50:	4798      	blx	r3
}
    1b52:	bf00      	nop
    1b54:	b005      	add	sp, #20
    1b56:	f85d fb04 	ldr.w	pc, [sp], #4
    1b5a:	bf00      	nop
    1b5c:	0000b6d4 	.word	0x0000b6d4
    1b60:	0000b674 	.word	0x0000b674
    1b64:	0000bc5c 	.word	0x0000bc5c

00001b68 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    1b68:	b500      	push	{lr}
    1b6a:	b083      	sub	sp, #12
    1b6c:	9001      	str	r0, [sp, #4]
    1b6e:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    1b70:	4b08      	ldr	r3, [pc, #32]	; (1b94 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    1b72:	2200      	movs	r2, #0
    1b74:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1b76:	4b08      	ldr	r3, [pc, #32]	; (1b98 <Clock_Ip_PowerModeChangeNotification+0x30>)
    1b78:	681b      	ldr	r3, [r3, #0]
    1b7a:	2102      	movs	r1, #2
    1b7c:	4618      	mov	r0, r3
    1b7e:	f002 fd75 	bl	466c <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    1b82:	9900      	ldr	r1, [sp, #0]
    1b84:	9801      	ldr	r0, [sp, #4]
    1b86:	f002 fc51 	bl	442c <Clock_Ip_ClockPowerModeChangeNotification>
}
    1b8a:	bf00      	nop
    1b8c:	b003      	add	sp, #12
    1b8e:	f85d fb04 	ldr.w	pc, [sp], #4
    1b92:	bf00      	nop
    1b94:	1fff8b10 	.word	0x1fff8b10
    1b98:	1fff8b44 	.word	0x1fff8b44

00001b9c <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    1b9c:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    1b9e:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    1ba2:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    1ba4:	4b06      	ldr	r3, [pc, #24]	; (1bc0 <Clock_Ip_SetWaitStates+0x24>)
    1ba6:	785b      	ldrb	r3, [r3, #1]
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d005      	beq.n	1bb8 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    1bac:	9b01      	ldr	r3, [sp, #4]
    1bae:	3b01      	subs	r3, #1
    1bb0:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    1bb2:	9b01      	ldr	r3, [sp, #4]
    1bb4:	2b00      	cmp	r3, #0
    1bb6:	d1f9      	bne.n	1bac <Clock_Ip_SetWaitStates+0x10>
    }
}
    1bb8:	bf00      	nop
    1bba:	b002      	add	sp, #8
    1bbc:	4770      	bx	lr
    1bbe:	bf00      	nop
    1bc0:	1fff8b4c 	.word	0x1fff8b4c

00001bc4 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    1bc4:	b500      	push	{lr}
    1bc6:	b083      	sub	sp, #12
    1bc8:	9001      	str	r0, [sp, #4]
    1bca:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    1bcc:	4b04      	ldr	r3, [pc, #16]	; (1be0 <Clock_Ip_ReportClockErrors+0x1c>)
    1bce:	681b      	ldr	r3, [r3, #0]
    1bd0:	9900      	ldr	r1, [sp, #0]
    1bd2:	9801      	ldr	r0, [sp, #4]
    1bd4:	4798      	blx	r3
}
    1bd6:	bf00      	nop
    1bd8:	b003      	add	sp, #12
    1bda:	f85d fb04 	ldr.w	pc, [sp], #4
    1bde:	bf00      	nop
    1be0:	1fff8b14 	.word	0x1fff8b14

00001be4 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    1be4:	b500      	push	{lr}
    1be6:	b085      	sub	sp, #20
    1be8:	9003      	str	r0, [sp, #12]
    1bea:	9102      	str	r1, [sp, #8]
    1bec:	9201      	str	r2, [sp, #4]
    1bee:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    1bf0:	2000      	movs	r0, #0
    1bf2:	f7fe ffd0 	bl	b96 <OsIf_GetCounter>
    1bf6:	4602      	mov	r2, r0
    1bf8:	9b03      	ldr	r3, [sp, #12]
    1bfa:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    1bfc:	9b02      	ldr	r3, [sp, #8]
    1bfe:	2200      	movs	r2, #0
    1c00:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    1c02:	2100      	movs	r1, #0
    1c04:	9800      	ldr	r0, [sp, #0]
    1c06:	f7ff f812 	bl	c2e <OsIf_MicrosToTicks>
    1c0a:	4602      	mov	r2, r0
    1c0c:	9b01      	ldr	r3, [sp, #4]
    1c0e:	601a      	str	r2, [r3, #0]
}
    1c10:	bf00      	nop
    1c12:	b005      	add	sp, #20
    1c14:	f85d fb04 	ldr.w	pc, [sp], #4

00001c18 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    1c18:	b500      	push	{lr}
    1c1a:	b087      	sub	sp, #28
    1c1c:	9003      	str	r0, [sp, #12]
    1c1e:	9102      	str	r1, [sp, #8]
    1c20:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    1c22:	2300      	movs	r3, #0
    1c24:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    1c28:	2100      	movs	r1, #0
    1c2a:	9803      	ldr	r0, [sp, #12]
    1c2c:	f7fe ffcc 	bl	bc8 <OsIf_GetElapsed>
    1c30:	4602      	mov	r2, r0
    1c32:	9b02      	ldr	r3, [sp, #8]
    1c34:	681b      	ldr	r3, [r3, #0]
    1c36:	441a      	add	r2, r3
    1c38:	9b02      	ldr	r3, [sp, #8]
    1c3a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    1c3c:	9b02      	ldr	r3, [sp, #8]
    1c3e:	681b      	ldr	r3, [r3, #0]
    1c40:	9a01      	ldr	r2, [sp, #4]
    1c42:	429a      	cmp	r2, r3
    1c44:	d802      	bhi.n	1c4c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    1c46:	2301      	movs	r3, #1
    1c48:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    1c4c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1c50:	4618      	mov	r0, r3
    1c52:	b007      	add	sp, #28
    1c54:	f85d fb04 	ldr.w	pc, [sp], #4

00001c58 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    1c58:	b082      	sub	sp, #8
    1c5a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    1c5c:	bf00      	nop
    1c5e:	b002      	add	sp, #8
    1c60:	4770      	bx	lr

00001c62 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    1c62:	b500      	push	{lr}
    1c64:	b083      	sub	sp, #12
    1c66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c68:	9b01      	ldr	r3, [sp, #4]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d002      	beq.n	1c74 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    1c6e:	9801      	ldr	r0, [sp, #4]
    1c70:	f000 f8ad 	bl	1dce <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c74:	bf00      	nop
    1c76:	b003      	add	sp, #12
    1c78:	f85d fb04 	ldr.w	pc, [sp], #4

00001c7c <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    1c7c:	b500      	push	{lr}
    1c7e:	b083      	sub	sp, #12
    1c80:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c82:	9b01      	ldr	r3, [sp, #4]
    1c84:	2b00      	cmp	r3, #0
    1c86:	d002      	beq.n	1c8e <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    1c88:	9801      	ldr	r0, [sp, #4]
    1c8a:	f000 f8cd 	bl	1e28 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c8e:	bf00      	nop
    1c90:	b003      	add	sp, #12
    1c92:	f85d fb04 	ldr.w	pc, [sp], #4

00001c96 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1c96:	b500      	push	{lr}
    1c98:	b083      	sub	sp, #12
    1c9a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c9c:	9b01      	ldr	r3, [sp, #4]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d002      	beq.n	1ca8 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    1ca2:	9801      	ldr	r0, [sp, #4]
    1ca4:	f000 f8ee 	bl	1e84 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1ca8:	bf00      	nop
    1caa:	b003      	add	sp, #12
    1cac:	f85d fb04 	ldr.w	pc, [sp], #4

00001cb0 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1cb0:	b500      	push	{lr}
    1cb2:	b083      	sub	sp, #12
    1cb4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cb6:	9b01      	ldr	r3, [sp, #4]
    1cb8:	2b00      	cmp	r3, #0
    1cba:	d002      	beq.n	1cc2 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    1cbc:	9801      	ldr	r0, [sp, #4]
    1cbe:	f000 f8f9 	bl	1eb4 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cc2:	bf00      	nop
    1cc4:	b003      	add	sp, #12
    1cc6:	f85d fb04 	ldr.w	pc, [sp], #4

00001cca <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1cca:	b500      	push	{lr}
    1ccc:	b083      	sub	sp, #12
    1cce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cd0:	9b01      	ldr	r3, [sp, #4]
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d002      	beq.n	1cdc <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    1cd6:	9801      	ldr	r0, [sp, #4]
    1cd8:	f000 f904 	bl	1ee4 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cdc:	bf00      	nop
    1cde:	b003      	add	sp, #12
    1ce0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ce4 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1ce4:	b500      	push	{lr}
    1ce6:	b083      	sub	sp, #12
    1ce8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cea:	9b01      	ldr	r3, [sp, #4]
    1cec:	2b00      	cmp	r3, #0
    1cee:	d002      	beq.n	1cf6 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    1cf0:	9801      	ldr	r0, [sp, #4]
    1cf2:	f000 f90f 	bl	1f14 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cf6:	bf00      	nop
    1cf8:	b003      	add	sp, #12
    1cfa:	f85d fb04 	ldr.w	pc, [sp], #4

00001cfe <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1cfe:	b500      	push	{lr}
    1d00:	b083      	sub	sp, #12
    1d02:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d04:	9b01      	ldr	r3, [sp, #4]
    1d06:	2b00      	cmp	r3, #0
    1d08:	d002      	beq.n	1d10 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    1d0a:	9801      	ldr	r0, [sp, #4]
    1d0c:	f000 f91a 	bl	1f44 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d10:	bf00      	nop
    1d12:	b003      	add	sp, #12
    1d14:	f85d fb04 	ldr.w	pc, [sp], #4

00001d18 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1d18:	b500      	push	{lr}
    1d1a:	b083      	sub	sp, #12
    1d1c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d1e:	9b01      	ldr	r3, [sp, #4]
    1d20:	2b00      	cmp	r3, #0
    1d22:	d002      	beq.n	1d2a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    1d24:	9801      	ldr	r0, [sp, #4]
    1d26:	f000 f925 	bl	1f74 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d2a:	bf00      	nop
    1d2c:	b003      	add	sp, #12
    1d2e:	f85d fb04 	ldr.w	pc, [sp], #4

00001d32 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1d32:	b500      	push	{lr}
    1d34:	b083      	sub	sp, #12
    1d36:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d38:	9b01      	ldr	r3, [sp, #4]
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d002      	beq.n	1d44 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    1d3e:	9801      	ldr	r0, [sp, #4]
    1d40:	f000 f930 	bl	1fa4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d44:	bf00      	nop
    1d46:	b003      	add	sp, #12
    1d48:	f85d fb04 	ldr.w	pc, [sp], #4

00001d4c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1d4c:	b500      	push	{lr}
    1d4e:	b083      	sub	sp, #12
    1d50:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d52:	9b01      	ldr	r3, [sp, #4]
    1d54:	2b00      	cmp	r3, #0
    1d56:	d002      	beq.n	1d5e <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    1d58:	9801      	ldr	r0, [sp, #4]
    1d5a:	f000 f93b 	bl	1fd4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d5e:	bf00      	nop
    1d60:	b003      	add	sp, #12
    1d62:	f85d fb04 	ldr.w	pc, [sp], #4

00001d66 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1d66:	b500      	push	{lr}
    1d68:	b083      	sub	sp, #12
    1d6a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d6c:	9b01      	ldr	r3, [sp, #4]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d002      	beq.n	1d78 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    1d72:	9801      	ldr	r0, [sp, #4]
    1d74:	f000 f946 	bl	2004 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d78:	bf00      	nop
    1d7a:	b003      	add	sp, #12
    1d7c:	f85d fb04 	ldr.w	pc, [sp], #4

00001d80 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    1d80:	b500      	push	{lr}
    1d82:	b083      	sub	sp, #12
    1d84:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d86:	9b01      	ldr	r3, [sp, #4]
    1d88:	2b00      	cmp	r3, #0
    1d8a:	d002      	beq.n	1d92 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    1d8c:	9801      	ldr	r0, [sp, #4]
    1d8e:	f000 f951 	bl	2034 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d92:	bf00      	nop
    1d94:	b003      	add	sp, #12
    1d96:	f85d fb04 	ldr.w	pc, [sp], #4

00001d9a <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    1d9a:	b500      	push	{lr}
    1d9c:	b083      	sub	sp, #12
    1d9e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1da0:	9b01      	ldr	r3, [sp, #4]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d002      	beq.n	1dac <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    1da6:	9801      	ldr	r0, [sp, #4]
    1da8:	f000 f95e 	bl	2068 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1dac:	bf00      	nop
    1dae:	b003      	add	sp, #12
    1db0:	f85d fb04 	ldr.w	pc, [sp], #4

00001db4 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    1db4:	b500      	push	{lr}
    1db6:	b083      	sub	sp, #12
    1db8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1dba:	9b01      	ldr	r3, [sp, #4]
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d002      	beq.n	1dc6 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    1dc0:	9801      	ldr	r0, [sp, #4]
    1dc2:	f000 f98b 	bl	20dc <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1dc6:	bf00      	nop
    1dc8:	b003      	add	sp, #12
    1dca:	f85d fb04 	ldr.w	pc, [sp], #4

00001dce <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1dce:	b086      	sub	sp, #24
    1dd0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    1dd2:	9b01      	ldr	r3, [sp, #4]
    1dd4:	681a      	ldr	r2, [r3, #0]
    1dd6:	4911      	ldr	r1, [pc, #68]	; (1e1c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    1dd8:	4613      	mov	r3, r2
    1dda:	00db      	lsls	r3, r3, #3
    1ddc:	4413      	add	r3, r2
    1dde:	440b      	add	r3, r1
    1de0:	781b      	ldrb	r3, [r3, #0]
    1de2:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    1de4:	9b01      	ldr	r3, [sp, #4]
    1de6:	685b      	ldr	r3, [r3, #4]
    1de8:	4a0d      	ldr	r2, [pc, #52]	; (1e20 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    1dea:	5cd3      	ldrb	r3, [r2, r3]
    1dec:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    1dee:	4a0d      	ldr	r2, [pc, #52]	; (1e24 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1df0:	9b05      	ldr	r3, [sp, #20]
    1df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1df6:	681b      	ldr	r3, [r3, #0]
    1df8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    1dfa:	9b03      	ldr	r3, [sp, #12]
    1dfc:	f023 0307 	bic.w	r3, r3, #7
    1e00:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    1e02:	9a03      	ldr	r2, [sp, #12]
    1e04:	9b04      	ldr	r3, [sp, #16]
    1e06:	4313      	orrs	r3, r2
    1e08:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    1e0a:	4a06      	ldr	r2, [pc, #24]	; (1e24 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1e0c:	9b05      	ldr	r3, [sp, #20]
    1e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e12:	9a03      	ldr	r2, [sp, #12]
    1e14:	601a      	str	r2, [r3, #0]
}
    1e16:	bf00      	nop
    1e18:	b006      	add	sp, #24
    1e1a:	4770      	bx	lr
    1e1c:	0000b6d4 	.word	0x0000b6d4
    1e20:	0000bacc 	.word	0x0000bacc
    1e24:	0000bb10 	.word	0x0000bb10

00001e28 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e28:	b086      	sub	sp, #24
    1e2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    1e2c:	9b01      	ldr	r3, [sp, #4]
    1e2e:	681a      	ldr	r2, [r3, #0]
    1e30:	4911      	ldr	r1, [pc, #68]	; (1e78 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    1e32:	4613      	mov	r3, r2
    1e34:	00db      	lsls	r3, r3, #3
    1e36:	4413      	add	r3, r2
    1e38:	440b      	add	r3, r1
    1e3a:	781b      	ldrb	r3, [r3, #0]
    1e3c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    1e3e:	9b01      	ldr	r3, [sp, #4]
    1e40:	685b      	ldr	r3, [r3, #4]
    1e42:	4a0e      	ldr	r2, [pc, #56]	; (1e7c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    1e44:	5cd3      	ldrb	r3, [r2, r3]
    1e46:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    1e48:	4a0d      	ldr	r2, [pc, #52]	; (1e80 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1e4a:	9b05      	ldr	r3, [sp, #20]
    1e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e50:	681b      	ldr	r3, [r3, #0]
    1e52:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    1e54:	9b03      	ldr	r3, [sp, #12]
    1e56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1e5a:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    1e5c:	9b04      	ldr	r3, [sp, #16]
    1e5e:	021b      	lsls	r3, r3, #8
    1e60:	9a03      	ldr	r2, [sp, #12]
    1e62:	4313      	orrs	r3, r2
    1e64:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    1e66:	4a06      	ldr	r2, [pc, #24]	; (1e80 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1e68:	9b05      	ldr	r3, [sp, #20]
    1e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e6e:	9a03      	ldr	r2, [sp, #12]
    1e70:	601a      	str	r2, [r3, #0]
}
    1e72:	bf00      	nop
    1e74:	b006      	add	sp, #24
    1e76:	4770      	bx	lr
    1e78:	0000b6d4 	.word	0x0000b6d4
    1e7c:	0000bacc 	.word	0x0000bacc
    1e80:	0000bb10 	.word	0x0000bb10

00001e84 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e84:	b084      	sub	sp, #16
    1e86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1e88:	4b09      	ldr	r3, [pc, #36]	; (1eb0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1e8a:	695b      	ldr	r3, [r3, #20]
    1e8c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    1e8e:	9b03      	ldr	r3, [sp, #12]
    1e90:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1e94:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    1e96:	9b01      	ldr	r3, [sp, #4]
    1e98:	685b      	ldr	r3, [r3, #4]
    1e9a:	3b01      	subs	r3, #1
    1e9c:	041b      	lsls	r3, r3, #16
    1e9e:	9a03      	ldr	r2, [sp, #12]
    1ea0:	4313      	orrs	r3, r2
    1ea2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1ea4:	4a02      	ldr	r2, [pc, #8]	; (1eb0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1ea6:	9b03      	ldr	r3, [sp, #12]
    1ea8:	6153      	str	r3, [r2, #20]
}
    1eaa:	bf00      	nop
    1eac:	b004      	add	sp, #16
    1eae:	4770      	bx	lr
    1eb0:	40064000 	.word	0x40064000

00001eb4 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1eb4:	b084      	sub	sp, #16
    1eb6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1eb8:	4b09      	ldr	r3, [pc, #36]	; (1ee0 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1eba:	695b      	ldr	r3, [r3, #20]
    1ebc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    1ebe:	9b03      	ldr	r3, [sp, #12]
    1ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1ec4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    1ec6:	9b01      	ldr	r3, [sp, #4]
    1ec8:	685b      	ldr	r3, [r3, #4]
    1eca:	3b01      	subs	r3, #1
    1ecc:	011b      	lsls	r3, r3, #4
    1ece:	9a03      	ldr	r2, [sp, #12]
    1ed0:	4313      	orrs	r3, r2
    1ed2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1ed4:	4a02      	ldr	r2, [pc, #8]	; (1ee0 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1ed6:	9b03      	ldr	r3, [sp, #12]
    1ed8:	6153      	str	r3, [r2, #20]
}
    1eda:	bf00      	nop
    1edc:	b004      	add	sp, #16
    1ede:	4770      	bx	lr
    1ee0:	40064000 	.word	0x40064000

00001ee4 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1ee4:	b084      	sub	sp, #16
    1ee6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1ee8:	4b09      	ldr	r3, [pc, #36]	; (1f10 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1eea:	695b      	ldr	r3, [r3, #20]
    1eec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    1eee:	9b03      	ldr	r3, [sp, #12]
    1ef0:	f023 030f 	bic.w	r3, r3, #15
    1ef4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    1ef6:	9b01      	ldr	r3, [sp, #4]
    1ef8:	685b      	ldr	r3, [r3, #4]
    1efa:	3b01      	subs	r3, #1
    1efc:	9a03      	ldr	r2, [sp, #12]
    1efe:	4313      	orrs	r3, r2
    1f00:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1f02:	4a03      	ldr	r2, [pc, #12]	; (1f10 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1f04:	9b03      	ldr	r3, [sp, #12]
    1f06:	6153      	str	r3, [r2, #20]
}
    1f08:	bf00      	nop
    1f0a:	b004      	add	sp, #16
    1f0c:	4770      	bx	lr
    1f0e:	bf00      	nop
    1f10:	40064000 	.word	0x40064000

00001f14 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f14:	b084      	sub	sp, #16
    1f16:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1f18:	4b09      	ldr	r3, [pc, #36]	; (1f40 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1f1a:	699b      	ldr	r3, [r3, #24]
    1f1c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    1f1e:	9b03      	ldr	r3, [sp, #12]
    1f20:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1f24:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    1f26:	9b01      	ldr	r3, [sp, #4]
    1f28:	685b      	ldr	r3, [r3, #4]
    1f2a:	3b01      	subs	r3, #1
    1f2c:	041b      	lsls	r3, r3, #16
    1f2e:	9a03      	ldr	r2, [sp, #12]
    1f30:	4313      	orrs	r3, r2
    1f32:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1f34:	4a02      	ldr	r2, [pc, #8]	; (1f40 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1f36:	9b03      	ldr	r3, [sp, #12]
    1f38:	6193      	str	r3, [r2, #24]
}
    1f3a:	bf00      	nop
    1f3c:	b004      	add	sp, #16
    1f3e:	4770      	bx	lr
    1f40:	40064000 	.word	0x40064000

00001f44 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f44:	b084      	sub	sp, #16
    1f46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1f48:	4b09      	ldr	r3, [pc, #36]	; (1f70 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1f4a:	699b      	ldr	r3, [r3, #24]
    1f4c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    1f4e:	9b03      	ldr	r3, [sp, #12]
    1f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1f54:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    1f56:	9b01      	ldr	r3, [sp, #4]
    1f58:	685b      	ldr	r3, [r3, #4]
    1f5a:	3b01      	subs	r3, #1
    1f5c:	011b      	lsls	r3, r3, #4
    1f5e:	9a03      	ldr	r2, [sp, #12]
    1f60:	4313      	orrs	r3, r2
    1f62:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1f64:	4a02      	ldr	r2, [pc, #8]	; (1f70 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1f66:	9b03      	ldr	r3, [sp, #12]
    1f68:	6193      	str	r3, [r2, #24]
}
    1f6a:	bf00      	nop
    1f6c:	b004      	add	sp, #16
    1f6e:	4770      	bx	lr
    1f70:	40064000 	.word	0x40064000

00001f74 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f74:	b084      	sub	sp, #16
    1f76:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1f78:	4b09      	ldr	r3, [pc, #36]	; (1fa0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1f7a:	699b      	ldr	r3, [r3, #24]
    1f7c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    1f7e:	9b03      	ldr	r3, [sp, #12]
    1f80:	f023 030f 	bic.w	r3, r3, #15
    1f84:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    1f86:	9b01      	ldr	r3, [sp, #4]
    1f88:	685b      	ldr	r3, [r3, #4]
    1f8a:	3b01      	subs	r3, #1
    1f8c:	9a03      	ldr	r2, [sp, #12]
    1f8e:	4313      	orrs	r3, r2
    1f90:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1f92:	4a03      	ldr	r2, [pc, #12]	; (1fa0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1f94:	9b03      	ldr	r3, [sp, #12]
    1f96:	6193      	str	r3, [r2, #24]
}
    1f98:	bf00      	nop
    1f9a:	b004      	add	sp, #16
    1f9c:	4770      	bx	lr
    1f9e:	bf00      	nop
    1fa0:	40064000 	.word	0x40064000

00001fa4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1fa4:	b084      	sub	sp, #16
    1fa6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1fa8:	4b09      	ldr	r3, [pc, #36]	; (1fd0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1faa:	69db      	ldr	r3, [r3, #28]
    1fac:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    1fae:	9b03      	ldr	r3, [sp, #12]
    1fb0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1fb4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    1fb6:	9b01      	ldr	r3, [sp, #4]
    1fb8:	685b      	ldr	r3, [r3, #4]
    1fba:	3b01      	subs	r3, #1
    1fbc:	041b      	lsls	r3, r3, #16
    1fbe:	9a03      	ldr	r2, [sp, #12]
    1fc0:	4313      	orrs	r3, r2
    1fc2:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1fc4:	4a02      	ldr	r2, [pc, #8]	; (1fd0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1fc6:	9b03      	ldr	r3, [sp, #12]
    1fc8:	61d3      	str	r3, [r2, #28]
}
    1fca:	bf00      	nop
    1fcc:	b004      	add	sp, #16
    1fce:	4770      	bx	lr
    1fd0:	40064000 	.word	0x40064000

00001fd4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1fd4:	b084      	sub	sp, #16
    1fd6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1fd8:	4b09      	ldr	r3, [pc, #36]	; (2000 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1fda:	69db      	ldr	r3, [r3, #28]
    1fdc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    1fde:	9b03      	ldr	r3, [sp, #12]
    1fe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1fe4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    1fe6:	9b01      	ldr	r3, [sp, #4]
    1fe8:	685b      	ldr	r3, [r3, #4]
    1fea:	3b01      	subs	r3, #1
    1fec:	011b      	lsls	r3, r3, #4
    1fee:	9a03      	ldr	r2, [sp, #12]
    1ff0:	4313      	orrs	r3, r2
    1ff2:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1ff4:	4a02      	ldr	r2, [pc, #8]	; (2000 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1ff6:	9b03      	ldr	r3, [sp, #12]
    1ff8:	61d3      	str	r3, [r2, #28]
}
    1ffa:	bf00      	nop
    1ffc:	b004      	add	sp, #16
    1ffe:	4770      	bx	lr
    2000:	40064000 	.word	0x40064000

00002004 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2004:	b084      	sub	sp, #16
    2006:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2008:	4b09      	ldr	r3, [pc, #36]	; (2030 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    200a:	69db      	ldr	r3, [r3, #28]
    200c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    200e:	9b03      	ldr	r3, [sp, #12]
    2010:	f023 030f 	bic.w	r3, r3, #15
    2014:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2016:	9b01      	ldr	r3, [sp, #4]
    2018:	685b      	ldr	r3, [r3, #4]
    201a:	3b01      	subs	r3, #1
    201c:	9a03      	ldr	r2, [sp, #12]
    201e:	4313      	orrs	r3, r2
    2020:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2022:	4a03      	ldr	r2, [pc, #12]	; (2030 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2024:	9b03      	ldr	r3, [sp, #12]
    2026:	61d3      	str	r3, [r2, #28]
}
    2028:	bf00      	nop
    202a:	b004      	add	sp, #16
    202c:	4770      	bx	lr
    202e:	bf00      	nop
    2030:	40064000 	.word	0x40064000

00002034 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2034:	b084      	sub	sp, #16
    2036:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2038:	4b0a      	ldr	r3, [pc, #40]	; (2064 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    203a:	685b      	ldr	r3, [r3, #4]
    203c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    203e:	9b03      	ldr	r3, [sp, #12]
    2040:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2044:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2046:	9b01      	ldr	r3, [sp, #4]
    2048:	685b      	ldr	r3, [r3, #4]
    204a:	3b01      	subs	r3, #1
    204c:	021b      	lsls	r3, r3, #8
    204e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2052:	9a03      	ldr	r2, [sp, #12]
    2054:	4313      	orrs	r3, r2
    2056:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2058:	4a02      	ldr	r2, [pc, #8]	; (2064 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    205a:	9b03      	ldr	r3, [sp, #12]
    205c:	6053      	str	r3, [r2, #4]
}
    205e:	bf00      	nop
    2060:	b004      	add	sp, #16
    2062:	4770      	bx	lr
    2064:	40048000 	.word	0x40048000

00002068 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2068:	b084      	sub	sp, #16
    206a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    206c:	4919      	ldr	r1, [pc, #100]	; (20d4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    206e:	9b01      	ldr	r3, [sp, #4]
    2070:	681a      	ldr	r2, [r3, #0]
    2072:	4819      	ldr	r0, [pc, #100]	; (20d8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2074:	4613      	mov	r3, r2
    2076:	00db      	lsls	r3, r3, #3
    2078:	4413      	add	r3, r2
    207a:	4403      	add	r3, r0
    207c:	3305      	adds	r3, #5
    207e:	781b      	ldrb	r3, [r3, #0]
    2080:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2084:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2086:	9b03      	ldr	r3, [sp, #12]
    2088:	f023 030f 	bic.w	r3, r3, #15
    208c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    208e:	9b01      	ldr	r3, [sp, #4]
    2090:	685b      	ldr	r3, [r3, #4]
    2092:	3b01      	subs	r3, #1
    2094:	f003 0307 	and.w	r3, r3, #7
    2098:	9a03      	ldr	r2, [sp, #12]
    209a:	4313      	orrs	r3, r2
    209c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    209e:	9b01      	ldr	r3, [sp, #4]
    20a0:	7a1b      	ldrb	r3, [r3, #8]
    20a2:	3b01      	subs	r3, #1
    20a4:	00db      	lsls	r3, r3, #3
    20a6:	f003 0308 	and.w	r3, r3, #8
    20aa:	9a03      	ldr	r2, [sp, #12]
    20ac:	4313      	orrs	r3, r2
    20ae:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    20b0:	4908      	ldr	r1, [pc, #32]	; (20d4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    20b2:	9b01      	ldr	r3, [sp, #4]
    20b4:	681a      	ldr	r2, [r3, #0]
    20b6:	4808      	ldr	r0, [pc, #32]	; (20d8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    20b8:	4613      	mov	r3, r2
    20ba:	00db      	lsls	r3, r3, #3
    20bc:	4413      	add	r3, r2
    20be:	4403      	add	r3, r0
    20c0:	3305      	adds	r3, #5
    20c2:	781b      	ldrb	r3, [r3, #0]
    20c4:	461a      	mov	r2, r3
    20c6:	9b03      	ldr	r3, [sp, #12]
    20c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    20cc:	bf00      	nop
    20ce:	b004      	add	sp, #16
    20d0:	4770      	bx	lr
    20d2:	bf00      	nop
    20d4:	40065000 	.word	0x40065000
    20d8:	0000b6d4 	.word	0x0000b6d4

000020dc <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    20dc:	b084      	sub	sp, #16
    20de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    20e0:	4b10      	ldr	r3, [pc, #64]	; (2124 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    20e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    20e4:	4a0f      	ldr	r2, [pc, #60]	; (2124 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    20e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    20ea:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    20ec:	4b0d      	ldr	r3, [pc, #52]	; (2124 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    20ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    20f0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    20f2:	9b03      	ldr	r3, [sp, #12]
    20f4:	f023 030f 	bic.w	r3, r3, #15
    20f8:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    20fa:	9b01      	ldr	r3, [sp, #4]
    20fc:	685b      	ldr	r3, [r3, #4]
    20fe:	3b01      	subs	r3, #1
    2100:	005b      	lsls	r3, r3, #1
    2102:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2106:	9b01      	ldr	r3, [sp, #4]
    2108:	7a1b      	ldrb	r3, [r3, #8]
    210a:	3b01      	subs	r3, #1
    210c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2110:	4313      	orrs	r3, r2
    2112:	9a03      	ldr	r2, [sp, #12]
    2114:	4313      	orrs	r3, r2
    2116:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2118:	4a02      	ldr	r2, [pc, #8]	; (2124 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    211a:	9b03      	ldr	r3, [sp, #12]
    211c:	6693      	str	r3, [r2, #104]	; 0x68
}
    211e:	bf00      	nop
    2120:	b004      	add	sp, #16
    2122:	4770      	bx	lr
    2124:	40048000 	.word	0x40048000

00002128 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2128:	b082      	sub	sp, #8
    212a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    212c:	bf00      	nop
    212e:	b002      	add	sp, #8
    2130:	4770      	bx	lr
	...

00002134 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2134:	b082      	sub	sp, #8
    2136:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2138:	bf00      	nop
    213a:	b002      	add	sp, #8
    213c:	4770      	bx	lr

0000213e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    213e:	b082      	sub	sp, #8
    2140:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    2142:	bf00      	nop
    2144:	b002      	add	sp, #8
    2146:	4770      	bx	lr

00002148 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2148:	b500      	push	{lr}
    214a:	b083      	sub	sp, #12
    214c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    214e:	9b01      	ldr	r3, [sp, #4]
    2150:	2b00      	cmp	r3, #0
    2152:	d002      	beq.n	215a <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    2154:	9801      	ldr	r0, [sp, #4]
    2156:	f000 f86a 	bl	222e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    215a:	bf00      	nop
    215c:	b003      	add	sp, #12
    215e:	f85d fb04 	ldr.w	pc, [sp], #4

00002162 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2162:	b500      	push	{lr}
    2164:	b083      	sub	sp, #12
    2166:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2168:	9b01      	ldr	r3, [sp, #4]
    216a:	2b00      	cmp	r3, #0
    216c:	d002      	beq.n	2174 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    216e:	9801      	ldr	r0, [sp, #4]
    2170:	f000 f884 	bl	227c <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    2174:	bf00      	nop
    2176:	b003      	add	sp, #12
    2178:	f85d fb04 	ldr.w	pc, [sp], #4

0000217c <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    217c:	b500      	push	{lr}
    217e:	b089      	sub	sp, #36	; 0x24
    2180:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2182:	2300      	movs	r3, #0
    2184:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2188:	9b01      	ldr	r3, [sp, #4]
    218a:	2b00      	cmp	r3, #0
    218c:	d031      	beq.n	21f2 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    218e:	4b1b      	ldr	r3, [pc, #108]	; (21fc <Clock_Ip_CompleteSOSC+0x80>)
    2190:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2194:	f003 0301 	and.w	r3, r3, #1
    2198:	2b00      	cmp	r3, #0
    219a:	d02a      	beq.n	21f2 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    219c:	aa03      	add	r2, sp, #12
    219e:	a904      	add	r1, sp, #16
    21a0:	a805      	add	r0, sp, #20
    21a2:	f24c 3350 	movw	r3, #50000	; 0xc350
    21a6:	f7ff fd1d 	bl	1be4 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    21aa:	4b14      	ldr	r3, [pc, #80]	; (21fc <Clock_Ip_CompleteSOSC+0x80>)
    21ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21b0:	0e1b      	lsrs	r3, r3, #24
    21b2:	f003 0301 	and.w	r3, r3, #1
    21b6:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    21b8:	9a03      	ldr	r2, [sp, #12]
    21ba:	a904      	add	r1, sp, #16
    21bc:	ab05      	add	r3, sp, #20
    21be:	4618      	mov	r0, r3
    21c0:	f7ff fd2a 	bl	1c18 <Clock_Ip_TimeoutExpired>
    21c4:	4603      	mov	r3, r0
    21c6:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    21ca:	9b06      	ldr	r3, [sp, #24]
    21cc:	2b00      	cmp	r3, #0
    21ce:	d106      	bne.n	21de <Clock_Ip_CompleteSOSC+0x62>
    21d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    21d4:	f083 0301 	eor.w	r3, r3, #1
    21d8:	b2db      	uxtb	r3, r3
    21da:	2b00      	cmp	r3, #0
    21dc:	d1e5      	bne.n	21aa <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    21de:	f89d 301f 	ldrb.w	r3, [sp, #31]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d005      	beq.n	21f2 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    21e6:	9b01      	ldr	r3, [sp, #4]
    21e8:	681b      	ldr	r3, [r3, #0]
    21ea:	4619      	mov	r1, r3
    21ec:	2001      	movs	r0, #1
    21ee:	f7ff fce9 	bl	1bc4 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    21f2:	bf00      	nop
    21f4:	b009      	add	sp, #36	; 0x24
    21f6:	f85d fb04 	ldr.w	pc, [sp], #4
    21fa:	bf00      	nop
    21fc:	40064000 	.word	0x40064000

00002200 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2200:	b500      	push	{lr}
    2202:	b083      	sub	sp, #12
    2204:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    2206:	9801      	ldr	r0, [sp, #4]
    2208:	f000 f8c0 	bl	238c <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    220c:	bf00      	nop
    220e:	b003      	add	sp, #12
    2210:	f85d fb04 	ldr.w	pc, [sp], #4

00002214 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2214:	b500      	push	{lr}
    2216:	b083      	sub	sp, #12
    2218:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    221a:	9b01      	ldr	r3, [sp, #4]
    221c:	2b00      	cmp	r3, #0
    221e:	d002      	beq.n	2226 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    2220:	9801      	ldr	r0, [sp, #4]
    2222:	f000 f8c3 	bl	23ac <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2226:	bf00      	nop
    2228:	b003      	add	sp, #12
    222a:	f85d fb04 	ldr.w	pc, [sp], #4

0000222e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    222e:	b082      	sub	sp, #8
    2230:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    2232:	4b11      	ldr	r3, [pc, #68]	; (2278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2234:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2238:	4a0f      	ldr	r2, [pc, #60]	; (2278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    223a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    223e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    2242:	4b0d      	ldr	r3, [pc, #52]	; (2278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2244:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2248:	4a0b      	ldr	r2, [pc, #44]	; (2278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    224a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    224e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    2252:	4b09      	ldr	r3, [pc, #36]	; (2278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2254:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2258:	4a07      	ldr	r2, [pc, #28]	; (2278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    225a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    225e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    2262:	4b05      	ldr	r3, [pc, #20]	; (2278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2264:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2268:	4a03      	ldr	r2, [pc, #12]	; (2278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    226a:	f023 0301 	bic.w	r3, r3, #1
    226e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2272:	bf00      	nop
    2274:	b002      	add	sp, #8
    2276:	4770      	bx	lr
    2278:	40064000 	.word	0x40064000

0000227c <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    227c:	b082      	sub	sp, #8
    227e:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    2280:	9b01      	ldr	r3, [sp, #4]
    2282:	891b      	ldrh	r3, [r3, #8]
    2284:	2b01      	cmp	r3, #1
    2286:	d174      	bne.n	2372 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2288:	9b01      	ldr	r3, [sp, #4]
    228a:	7bdb      	ldrb	r3, [r3, #15]
    228c:	2b00      	cmp	r3, #0
    228e:	d002      	beq.n	2296 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    2290:	2b01      	cmp	r3, #1
    2292:	d009      	beq.n	22a8 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2294:	e011      	b.n	22ba <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2296:	4b39      	ldr	r3, [pc, #228]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2298:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    229c:	4a37      	ldr	r2, [pc, #220]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    229e:	f023 0308 	bic.w	r3, r3, #8
    22a2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    22a6:	e008      	b.n	22ba <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    22a8:	4b34      	ldr	r3, [pc, #208]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22ae:	4a33      	ldr	r2, [pc, #204]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22b0:	f043 0308 	orr.w	r3, r3, #8
    22b4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    22b8:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    22ba:	4b30      	ldr	r3, [pc, #192]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22c0:	4a2e      	ldr	r2, [pc, #184]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    22c6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    22ca:	9b01      	ldr	r3, [sp, #4]
    22cc:	685b      	ldr	r3, [r3, #4]
    22ce:	4a2c      	ldr	r2, [pc, #176]	; (2380 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    22d0:	4293      	cmp	r3, r2
    22d2:	d90d      	bls.n	22f0 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    22d4:	9b01      	ldr	r3, [sp, #4]
    22d6:	685b      	ldr	r3, [r3, #4]
    22d8:	4a2a      	ldr	r2, [pc, #168]	; (2384 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    22da:	4293      	cmp	r3, r2
    22dc:	d208      	bcs.n	22f0 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    22de:	4b27      	ldr	r3, [pc, #156]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22e4:	4a25      	ldr	r2, [pc, #148]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22e6:	f043 0320 	orr.w	r3, r3, #32
    22ea:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    22ee:	e007      	b.n	2300 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    22f0:	4b22      	ldr	r3, [pc, #136]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22f6:	4a21      	ldr	r2, [pc, #132]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    22fc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    2300:	9b01      	ldr	r3, [sp, #4]
    2302:	7b1b      	ldrb	r3, [r3, #12]
    2304:	2b00      	cmp	r3, #0
    2306:	d108      	bne.n	231a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2308:	4b1c      	ldr	r3, [pc, #112]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    230a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    230e:	4a1b      	ldr	r2, [pc, #108]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2310:	f043 0304 	orr.w	r3, r3, #4
    2314:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2318:	e007      	b.n	232a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    231a:	4b18      	ldr	r3, [pc, #96]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    231c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2320:	4a16      	ldr	r2, [pc, #88]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2322:	f023 0304 	bic.w	r3, r3, #4
    2326:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    232a:	9b01      	ldr	r3, [sp, #4]
    232c:	7c1b      	ldrb	r3, [r3, #16]
    232e:	2b02      	cmp	r3, #2
    2330:	d011      	beq.n	2356 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    2332:	2b02      	cmp	r3, #2
    2334:	dc14      	bgt.n	2360 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    2336:	2b00      	cmp	r3, #0
    2338:	d002      	beq.n	2340 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    233a:	2b01      	cmp	r3, #1
    233c:	d005      	beq.n	234a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    233e:	e00f      	b.n	2360 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2340:	4b0e      	ldr	r3, [pc, #56]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2342:	2201      	movs	r2, #1
    2344:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2348:	e014      	b.n	2374 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    234a:	4b0c      	ldr	r3, [pc, #48]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    234c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2350:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2354:	e00e      	b.n	2374 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2356:	4b09      	ldr	r3, [pc, #36]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2358:	4a0b      	ldr	r2, [pc, #44]	; (2388 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    235a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    235e:	e009      	b.n	2374 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2360:	4b06      	ldr	r3, [pc, #24]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2362:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2366:	4a05      	ldr	r2, [pc, #20]	; (237c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2368:	f043 0301 	orr.w	r3, r3, #1
    236c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    2370:	e000      	b.n	2374 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    2372:	bf00      	nop
}
    2374:	bf00      	nop
    2376:	b002      	add	sp, #8
    2378:	4770      	bx	lr
    237a:	bf00      	nop
    237c:	40064000 	.word	0x40064000
    2380:	003d08ff 	.word	0x003d08ff
    2384:	007a1200 	.word	0x007a1200
    2388:	00030001 	.word	0x00030001

0000238c <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    238c:	b082      	sub	sp, #8
    238e:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    2390:	4b05      	ldr	r3, [pc, #20]	; (23a8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2392:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2396:	4a04      	ldr	r2, [pc, #16]	; (23a8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2398:	f023 0301 	bic.w	r3, r3, #1
    239c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    23a0:	bf00      	nop
    23a2:	b002      	add	sp, #8
    23a4:	4770      	bx	lr
    23a6:	bf00      	nop
    23a8:	40064000 	.word	0x40064000

000023ac <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    23ac:	b082      	sub	sp, #8
    23ae:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    23b0:	9b01      	ldr	r3, [sp, #4]
    23b2:	891b      	ldrh	r3, [r3, #8]
    23b4:	2b01      	cmp	r3, #1
    23b6:	d107      	bne.n	23c8 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    23b8:	4b05      	ldr	r3, [pc, #20]	; (23d0 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    23ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    23be:	4a04      	ldr	r2, [pc, #16]	; (23d0 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    23c0:	f043 0301 	orr.w	r3, r3, #1
    23c4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    23c8:	bf00      	nop
    23ca:	b002      	add	sp, #8
    23cc:	4770      	bx	lr
    23ce:	bf00      	nop
    23d0:	40064000 	.word	0x40064000

000023d4 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    23d4:	b082      	sub	sp, #8
    23d6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    23d8:	bf00      	nop
    23da:	b002      	add	sp, #8
    23dc:	4770      	bx	lr

000023de <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    23de:	b082      	sub	sp, #8
    23e0:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    23e2:	2300      	movs	r3, #0
}
    23e4:	4618      	mov	r0, r3
    23e6:	b002      	add	sp, #8
    23e8:	4770      	bx	lr

000023ea <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    23ea:	b082      	sub	sp, #8
    23ec:	9001      	str	r0, [sp, #4]
    23ee:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    23f0:	bf00      	nop
    23f2:	b002      	add	sp, #8
    23f4:	4770      	bx	lr
	...

000023f8 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    23f8:	b082      	sub	sp, #8
    23fa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    23fc:	bf00      	nop
    23fe:	b002      	add	sp, #8
    2400:	4770      	bx	lr

00002402 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    2402:	b082      	sub	sp, #8
    2404:	9001      	str	r0, [sp, #4]
    2406:	460b      	mov	r3, r1
    2408:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    240c:	bf00      	nop
    240e:	b002      	add	sp, #8
    2410:	4770      	bx	lr

00002412 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    2412:	b500      	push	{lr}
    2414:	b083      	sub	sp, #12
    2416:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2418:	9b01      	ldr	r3, [sp, #4]
    241a:	2b00      	cmp	r3, #0
    241c:	d002      	beq.n	2424 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    241e:	9801      	ldr	r0, [sp, #4]
    2420:	f000 f8e7 	bl	25f2 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2424:	bf00      	nop
    2426:	b003      	add	sp, #12
    2428:	f85d fb04 	ldr.w	pc, [sp], #4

0000242c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    242c:	b500      	push	{lr}
    242e:	b085      	sub	sp, #20
    2430:	9001      	str	r0, [sp, #4]
    2432:	460b      	mov	r3, r1
    2434:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2438:	9b01      	ldr	r3, [sp, #4]
    243a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    243c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2440:	2b00      	cmp	r3, #0
    2442:	d003      	beq.n	244c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    2444:	2300      	movs	r3, #0
    2446:	f8ad 300c 	strh.w	r3, [sp, #12]
    244a:	e002      	b.n	2452 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    244c:	2301      	movs	r3, #1
    244e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    2452:	ab02      	add	r3, sp, #8
    2454:	4618      	mov	r0, r3
    2456:	f7ff ffdc 	bl	2412 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    245a:	bf00      	nop
    245c:	b005      	add	sp, #20
    245e:	f85d fb04 	ldr.w	pc, [sp], #4

00002462 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    2462:	b500      	push	{lr}
    2464:	b083      	sub	sp, #12
    2466:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2468:	9b01      	ldr	r3, [sp, #4]
    246a:	2b00      	cmp	r3, #0
    246c:	d002      	beq.n	2474 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    246e:	9801      	ldr	r0, [sp, #4]
    2470:	f000 f8d6 	bl	2620 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2474:	bf00      	nop
    2476:	b003      	add	sp, #12
    2478:	f85d fb04 	ldr.w	pc, [sp], #4

0000247c <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    247c:	b500      	push	{lr}
    247e:	b085      	sub	sp, #20
    2480:	9001      	str	r0, [sp, #4]
    2482:	460b      	mov	r3, r1
    2484:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2488:	9b01      	ldr	r3, [sp, #4]
    248a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    248c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2490:	2b00      	cmp	r3, #0
    2492:	d003      	beq.n	249c <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2494:	2300      	movs	r3, #0
    2496:	f8ad 300c 	strh.w	r3, [sp, #12]
    249a:	e002      	b.n	24a2 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    249c:	2301      	movs	r3, #1
    249e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    24a2:	ab02      	add	r3, sp, #8
    24a4:	4618      	mov	r0, r3
    24a6:	f7ff ffdc 	bl	2462 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    24aa:	bf00      	nop
    24ac:	b005      	add	sp, #20
    24ae:	f85d fb04 	ldr.w	pc, [sp], #4

000024b2 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    24b2:	b500      	push	{lr}
    24b4:	b083      	sub	sp, #12
    24b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    24b8:	9b01      	ldr	r3, [sp, #4]
    24ba:	2b00      	cmp	r3, #0
    24bc:	d002      	beq.n	24c4 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    24be:	9801      	ldr	r0, [sp, #4]
    24c0:	f000 f8c6 	bl	2650 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    24c4:	bf00      	nop
    24c6:	b003      	add	sp, #12
    24c8:	f85d fb04 	ldr.w	pc, [sp], #4

000024cc <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    24cc:	b500      	push	{lr}
    24ce:	b085      	sub	sp, #20
    24d0:	9001      	str	r0, [sp, #4]
    24d2:	460b      	mov	r3, r1
    24d4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    24d8:	9b01      	ldr	r3, [sp, #4]
    24da:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    24dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24e0:	2b00      	cmp	r3, #0
    24e2:	d003      	beq.n	24ec <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    24e4:	2300      	movs	r3, #0
    24e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    24ea:	e002      	b.n	24f2 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    24ec:	2301      	movs	r3, #1
    24ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    24f2:	ab02      	add	r3, sp, #8
    24f4:	4618      	mov	r0, r3
    24f6:	f7ff ffdc 	bl	24b2 <Clock_Ip_ClockSetSimClkoutEnable>
}
    24fa:	bf00      	nop
    24fc:	b005      	add	sp, #20
    24fe:	f85d fb04 	ldr.w	pc, [sp], #4

00002502 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2502:	b500      	push	{lr}
    2504:	b083      	sub	sp, #12
    2506:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2508:	9b01      	ldr	r3, [sp, #4]
    250a:	2b00      	cmp	r3, #0
    250c:	d002      	beq.n	2514 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    250e:	9801      	ldr	r0, [sp, #4]
    2510:	f000 f8b6 	bl	2680 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2514:	bf00      	nop
    2516:	b003      	add	sp, #12
    2518:	f85d fb04 	ldr.w	pc, [sp], #4

0000251c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    251c:	b500      	push	{lr}
    251e:	b085      	sub	sp, #20
    2520:	9001      	str	r0, [sp, #4]
    2522:	460b      	mov	r3, r1
    2524:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2528:	9b01      	ldr	r3, [sp, #4]
    252a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    252c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2530:	2b00      	cmp	r3, #0
    2532:	d003      	beq.n	253c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2534:	2300      	movs	r3, #0
    2536:	f8ad 300c 	strh.w	r3, [sp, #12]
    253a:	e002      	b.n	2542 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    253c:	2301      	movs	r3, #1
    253e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2542:	ab02      	add	r3, sp, #8
    2544:	4618      	mov	r0, r3
    2546:	f7ff ffdc 	bl	2502 <Clock_Ip_ClockSetPccCgcEnable>
}
    254a:	bf00      	nop
    254c:	b005      	add	sp, #20
    254e:	f85d fb04 	ldr.w	pc, [sp], #4

00002552 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2552:	b500      	push	{lr}
    2554:	b083      	sub	sp, #12
    2556:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2558:	9b01      	ldr	r3, [sp, #4]
    255a:	2b00      	cmp	r3, #0
    255c:	d002      	beq.n	2564 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    255e:	9801      	ldr	r0, [sp, #4]
    2560:	f000 f8bc 	bl	26dc <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2564:	bf00      	nop
    2566:	b003      	add	sp, #12
    2568:	f85d fb04 	ldr.w	pc, [sp], #4

0000256c <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    256c:	b500      	push	{lr}
    256e:	b085      	sub	sp, #20
    2570:	9001      	str	r0, [sp, #4]
    2572:	460b      	mov	r3, r1
    2574:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2578:	9b01      	ldr	r3, [sp, #4]
    257a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    257c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2580:	2b00      	cmp	r3, #0
    2582:	d003      	beq.n	258c <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2584:	2300      	movs	r3, #0
    2586:	f8ad 300c 	strh.w	r3, [sp, #12]
    258a:	e002      	b.n	2592 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    258c:	2301      	movs	r3, #1
    258e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2592:	ab02      	add	r3, sp, #8
    2594:	4618      	mov	r0, r3
    2596:	f7ff ffdc 	bl	2552 <Clock_Ip_ClockSetSimGate>
}
    259a:	bf00      	nop
    259c:	b005      	add	sp, #20
    259e:	f85d fb04 	ldr.w	pc, [sp], #4

000025a2 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    25a2:	b500      	push	{lr}
    25a4:	b083      	sub	sp, #12
    25a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    25a8:	9b01      	ldr	r3, [sp, #4]
    25aa:	2b00      	cmp	r3, #0
    25ac:	d002      	beq.n	25b4 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    25ae:	9801      	ldr	r0, [sp, #4]
    25b0:	f000 f8c0 	bl	2734 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    25b4:	bf00      	nop
    25b6:	b003      	add	sp, #12
    25b8:	f85d fb04 	ldr.w	pc, [sp], #4

000025bc <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    25bc:	b500      	push	{lr}
    25be:	b085      	sub	sp, #20
    25c0:	9001      	str	r0, [sp, #4]
    25c2:	460b      	mov	r3, r1
    25c4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    25c8:	9b01      	ldr	r3, [sp, #4]
    25ca:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    25cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25d0:	2b00      	cmp	r3, #0
    25d2:	d003      	beq.n	25dc <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    25d4:	2300      	movs	r3, #0
    25d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    25da:	e002      	b.n	25e2 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    25dc:	2301      	movs	r3, #1
    25de:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    25e2:	ab02      	add	r3, sp, #8
    25e4:	4618      	mov	r0, r3
    25e6:	f7ff ffdc 	bl	25a2 <Clock_Ip_ClockSetSimTraceEnable>
}
    25ea:	bf00      	nop
    25ec:	b005      	add	sp, #20
    25ee:	f85d fb04 	ldr.w	pc, [sp], #4

000025f2 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    25f2:	b084      	sub	sp, #16
    25f4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    25f6:	4b09      	ldr	r3, [pc, #36]	; (261c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    25f8:	691b      	ldr	r3, [r3, #16]
    25fa:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    25fc:	9b03      	ldr	r3, [sp, #12]
    25fe:	f023 0301 	bic.w	r3, r3, #1
    2602:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2604:	9b01      	ldr	r3, [sp, #4]
    2606:	889b      	ldrh	r3, [r3, #4]
    2608:	461a      	mov	r2, r3
    260a:	9b03      	ldr	r3, [sp, #12]
    260c:	4313      	orrs	r3, r2
    260e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2610:	4a02      	ldr	r2, [pc, #8]	; (261c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2612:	9b03      	ldr	r3, [sp, #12]
    2614:	6113      	str	r3, [r2, #16]
}
    2616:	bf00      	nop
    2618:	b004      	add	sp, #16
    261a:	4770      	bx	lr
    261c:	40048000 	.word	0x40048000

00002620 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2620:	b084      	sub	sp, #16
    2622:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2624:	4b09      	ldr	r3, [pc, #36]	; (264c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2626:	691b      	ldr	r3, [r3, #16]
    2628:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    262a:	9b03      	ldr	r3, [sp, #12]
    262c:	f023 0302 	bic.w	r3, r3, #2
    2630:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2632:	9b01      	ldr	r3, [sp, #4]
    2634:	889b      	ldrh	r3, [r3, #4]
    2636:	005b      	lsls	r3, r3, #1
    2638:	9a03      	ldr	r2, [sp, #12]
    263a:	4313      	orrs	r3, r2
    263c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    263e:	4a03      	ldr	r2, [pc, #12]	; (264c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2640:	9b03      	ldr	r3, [sp, #12]
    2642:	6113      	str	r3, [r2, #16]
}
    2644:	bf00      	nop
    2646:	b004      	add	sp, #16
    2648:	4770      	bx	lr
    264a:	bf00      	nop
    264c:	40048000 	.word	0x40048000

00002650 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2650:	b084      	sub	sp, #16
    2652:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2654:	4b09      	ldr	r3, [pc, #36]	; (267c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2656:	685b      	ldr	r3, [r3, #4]
    2658:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    265a:	9b03      	ldr	r3, [sp, #12]
    265c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2660:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2662:	9b01      	ldr	r3, [sp, #4]
    2664:	889b      	ldrh	r3, [r3, #4]
    2666:	02db      	lsls	r3, r3, #11
    2668:	9a03      	ldr	r2, [sp, #12]
    266a:	4313      	orrs	r3, r2
    266c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    266e:	4a03      	ldr	r2, [pc, #12]	; (267c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2670:	9b03      	ldr	r3, [sp, #12]
    2672:	6053      	str	r3, [r2, #4]
}
    2674:	bf00      	nop
    2676:	b004      	add	sp, #16
    2678:	4770      	bx	lr
    267a:	bf00      	nop
    267c:	40048000 	.word	0x40048000

00002680 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2680:	b084      	sub	sp, #16
    2682:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2684:	4913      	ldr	r1, [pc, #76]	; (26d4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2686:	9b01      	ldr	r3, [sp, #4]
    2688:	681a      	ldr	r2, [r3, #0]
    268a:	4813      	ldr	r0, [pc, #76]	; (26d8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    268c:	4613      	mov	r3, r2
    268e:	00db      	lsls	r3, r3, #3
    2690:	4413      	add	r3, r2
    2692:	4403      	add	r3, r0
    2694:	3306      	adds	r3, #6
    2696:	781b      	ldrb	r3, [r3, #0]
    2698:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    269c:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    269e:	9b03      	ldr	r3, [sp, #12]
    26a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    26a4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    26a6:	9b01      	ldr	r3, [sp, #4]
    26a8:	889b      	ldrh	r3, [r3, #4]
    26aa:	079b      	lsls	r3, r3, #30
    26ac:	9a03      	ldr	r2, [sp, #12]
    26ae:	4313      	orrs	r3, r2
    26b0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    26b2:	4908      	ldr	r1, [pc, #32]	; (26d4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    26b4:	9b01      	ldr	r3, [sp, #4]
    26b6:	681a      	ldr	r2, [r3, #0]
    26b8:	4807      	ldr	r0, [pc, #28]	; (26d8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    26ba:	4613      	mov	r3, r2
    26bc:	00db      	lsls	r3, r3, #3
    26be:	4413      	add	r3, r2
    26c0:	4403      	add	r3, r0
    26c2:	3306      	adds	r3, #6
    26c4:	781b      	ldrb	r3, [r3, #0]
    26c6:	461a      	mov	r2, r3
    26c8:	9b03      	ldr	r3, [sp, #12]
    26ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    26ce:	bf00      	nop
    26d0:	b004      	add	sp, #16
    26d2:	4770      	bx	lr
    26d4:	40065000 	.word	0x40065000
    26d8:	0000b6d4 	.word	0x0000b6d4

000026dc <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    26dc:	b086      	sub	sp, #24
    26de:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    26e0:	9b01      	ldr	r3, [sp, #4]
    26e2:	889b      	ldrh	r3, [r3, #4]
    26e4:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    26e6:	9b01      	ldr	r3, [sp, #4]
    26e8:	681a      	ldr	r2, [r3, #0]
    26ea:	4910      	ldr	r1, [pc, #64]	; (272c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    26ec:	4613      	mov	r3, r2
    26ee:	00db      	lsls	r3, r3, #3
    26f0:	4413      	add	r3, r2
    26f2:	440b      	add	r3, r1
    26f4:	3306      	adds	r3, #6
    26f6:	781b      	ldrb	r3, [r3, #0]
    26f8:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    26fa:	4b0d      	ldr	r3, [pc, #52]	; (2730 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    26fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    26fe:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2700:	2201      	movs	r2, #1
    2702:	9b04      	ldr	r3, [sp, #16]
    2704:	fa02 f303 	lsl.w	r3, r2, r3
    2708:	43db      	mvns	r3, r3
    270a:	9a03      	ldr	r2, [sp, #12]
    270c:	4013      	ands	r3, r2
    270e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2710:	9a05      	ldr	r2, [sp, #20]
    2712:	9b04      	ldr	r3, [sp, #16]
    2714:	fa02 f303 	lsl.w	r3, r2, r3
    2718:	9a03      	ldr	r2, [sp, #12]
    271a:	4313      	orrs	r3, r2
    271c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    271e:	4a04      	ldr	r2, [pc, #16]	; (2730 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2720:	9b03      	ldr	r3, [sp, #12]
    2722:	6413      	str	r3, [r2, #64]	; 0x40
}
    2724:	bf00      	nop
    2726:	b006      	add	sp, #24
    2728:	4770      	bx	lr
    272a:	bf00      	nop
    272c:	0000b6d4 	.word	0x0000b6d4
    2730:	40048000 	.word	0x40048000

00002734 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2734:	b084      	sub	sp, #16
    2736:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2738:	4b0a      	ldr	r3, [pc, #40]	; (2764 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    273a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    273c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    273e:	9b01      	ldr	r3, [sp, #4]
    2740:	889b      	ldrh	r3, [r3, #4]
    2742:	2b01      	cmp	r3, #1
    2744:	d104      	bne.n	2750 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2746:	9b03      	ldr	r3, [sp, #12]
    2748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    274c:	9303      	str	r3, [sp, #12]
    274e:	e003      	b.n	2758 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2750:	9b03      	ldr	r3, [sp, #12]
    2752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2756:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2758:	4a02      	ldr	r2, [pc, #8]	; (2764 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    275a:	9b03      	ldr	r3, [sp, #12]
    275c:	6693      	str	r3, [r2, #104]	; 0x68
}
    275e:	bf00      	nop
    2760:	b004      	add	sp, #16
    2762:	4770      	bx	lr
    2764:	40048000 	.word	0x40048000

00002768 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2768:	b082      	sub	sp, #8
    276a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    276c:	bf00      	nop
    276e:	b002      	add	sp, #8
    2770:	4770      	bx	lr

00002772 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2772:	b082      	sub	sp, #8
    2774:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2776:	bf00      	nop
    2778:	b002      	add	sp, #8
    277a:	4770      	bx	lr

0000277c <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    277c:	b500      	push	{lr}
    277e:	b083      	sub	sp, #12
    2780:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2782:	9b01      	ldr	r3, [sp, #4]
    2784:	2b00      	cmp	r3, #0
    2786:	d002      	beq.n	278e <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2788:	9801      	ldr	r0, [sp, #4]
    278a:	f000 f8d1 	bl	2930 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    278e:	bf00      	nop
    2790:	b003      	add	sp, #12
    2792:	f85d fb04 	ldr.w	pc, [sp], #4

00002796 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2796:	b500      	push	{lr}
    2798:	b083      	sub	sp, #12
    279a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    279c:	9b01      	ldr	r3, [sp, #4]
    279e:	2b00      	cmp	r3, #0
    27a0:	d002      	beq.n	27a8 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    27a2:	9801      	ldr	r0, [sp, #4]
    27a4:	f000 f950 	bl	2a48 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27a8:	bf00      	nop
    27aa:	b003      	add	sp, #12
    27ac:	f85d fb04 	ldr.w	pc, [sp], #4

000027b0 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    27b0:	b500      	push	{lr}
    27b2:	b083      	sub	sp, #12
    27b4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    27b6:	9801      	ldr	r0, [sp, #4]
    27b8:	f000 f98e 	bl	2ad8 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    27bc:	bf00      	nop
    27be:	b003      	add	sp, #12
    27c0:	f85d fb04 	ldr.w	pc, [sp], #4

000027c4 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    27c4:	b500      	push	{lr}
    27c6:	b083      	sub	sp, #12
    27c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27ca:	9b01      	ldr	r3, [sp, #4]
    27cc:	2b00      	cmp	r3, #0
    27ce:	d002      	beq.n	27d6 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    27d0:	9801      	ldr	r0, [sp, #4]
    27d2:	f000 f999 	bl	2b08 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27d6:	bf00      	nop
    27d8:	b003      	add	sp, #12
    27da:	f85d fb04 	ldr.w	pc, [sp], #4

000027de <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    27de:	b500      	push	{lr}
    27e0:	b083      	sub	sp, #12
    27e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27e4:	9b01      	ldr	r3, [sp, #4]
    27e6:	2b00      	cmp	r3, #0
    27e8:	d002      	beq.n	27f0 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    27ea:	9801      	ldr	r0, [sp, #4]
    27ec:	f000 f9b0 	bl	2b50 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27f0:	bf00      	nop
    27f2:	b003      	add	sp, #12
    27f4:	f85d fb04 	ldr.w	pc, [sp], #4

000027f8 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    27f8:	b500      	push	{lr}
    27fa:	b083      	sub	sp, #12
    27fc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    27fe:	9801      	ldr	r0, [sp, #4]
    2800:	f000 f9ba 	bl	2b78 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2804:	bf00      	nop
    2806:	b003      	add	sp, #12
    2808:	f85d fb04 	ldr.w	pc, [sp], #4

0000280c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    280c:	b500      	push	{lr}
    280e:	b083      	sub	sp, #12
    2810:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2812:	9b01      	ldr	r3, [sp, #4]
    2814:	2b00      	cmp	r3, #0
    2816:	d002      	beq.n	281e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2818:	9801      	ldr	r0, [sp, #4]
    281a:	f000 f9bd 	bl	2b98 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    281e:	bf00      	nop
    2820:	b003      	add	sp, #12
    2822:	f85d fb04 	ldr.w	pc, [sp], #4

00002826 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2826:	b500      	push	{lr}
    2828:	b083      	sub	sp, #12
    282a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    282c:	9b01      	ldr	r3, [sp, #4]
    282e:	2b00      	cmp	r3, #0
    2830:	d002      	beq.n	2838 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2832:	9801      	ldr	r0, [sp, #4]
    2834:	f000 f9d4 	bl	2be0 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2838:	bf00      	nop
    283a:	b003      	add	sp, #12
    283c:	f85d fb04 	ldr.w	pc, [sp], #4

00002840 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2840:	b500      	push	{lr}
    2842:	b083      	sub	sp, #12
    2844:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2846:	9801      	ldr	r0, [sp, #4]
    2848:	f000 f9de 	bl	2c08 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    284c:	bf00      	nop
    284e:	b003      	add	sp, #12
    2850:	f85d fb04 	ldr.w	pc, [sp], #4

00002854 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2854:	b500      	push	{lr}
    2856:	b089      	sub	sp, #36	; 0x24
    2858:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    285a:	2300      	movs	r3, #0
    285c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2860:	4b20      	ldr	r3, [pc, #128]	; (28e4 <SetInputSouceSytemClock+0x90>)
    2862:	695b      	ldr	r3, [r3, #20]
    2864:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2866:	9b06      	ldr	r3, [sp, #24]
    2868:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    286c:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    286e:	9b01      	ldr	r3, [sp, #4]
    2870:	061b      	lsls	r3, r3, #24
    2872:	9a06      	ldr	r2, [sp, #24]
    2874:	4313      	orrs	r3, r2
    2876:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2878:	4a1a      	ldr	r2, [pc, #104]	; (28e4 <SetInputSouceSytemClock+0x90>)
    287a:	9b06      	ldr	r3, [sp, #24]
    287c:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    287e:	aa02      	add	r2, sp, #8
    2880:	a903      	add	r1, sp, #12
    2882:	a804      	add	r0, sp, #16
    2884:	f24c 3350 	movw	r3, #50000	; 0xc350
    2888:	f7ff f9ac 	bl	1be4 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    288c:	4b15      	ldr	r3, [pc, #84]	; (28e4 <SetInputSouceSytemClock+0x90>)
    288e:	691b      	ldr	r3, [r3, #16]
    2890:	0e1b      	lsrs	r3, r3, #24
    2892:	f003 030f 	and.w	r3, r3, #15
    2896:	9a01      	ldr	r2, [sp, #4]
    2898:	429a      	cmp	r2, r3
    289a:	bf0c      	ite	eq
    289c:	2301      	moveq	r3, #1
    289e:	2300      	movne	r3, #0
    28a0:	b2db      	uxtb	r3, r3
    28a2:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    28a4:	9a02      	ldr	r2, [sp, #8]
    28a6:	a903      	add	r1, sp, #12
    28a8:	ab04      	add	r3, sp, #16
    28aa:	4618      	mov	r0, r3
    28ac:	f7ff f9b4 	bl	1c18 <Clock_Ip_TimeoutExpired>
    28b0:	4603      	mov	r3, r0
    28b2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    28b6:	9b05      	ldr	r3, [sp, #20]
    28b8:	2b00      	cmp	r3, #0
    28ba:	d106      	bne.n	28ca <SetInputSouceSytemClock+0x76>
    28bc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    28c0:	f083 0301 	eor.w	r3, r3, #1
    28c4:	b2db      	uxtb	r3, r3
    28c6:	2b00      	cmp	r3, #0
    28c8:	d1e0      	bne.n	288c <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    28ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    28ce:	2b00      	cmp	r3, #0
    28d0:	d003      	beq.n	28da <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    28d2:	2105      	movs	r1, #5
    28d4:	2001      	movs	r0, #1
    28d6:	f7ff f975 	bl	1bc4 <Clock_Ip_ReportClockErrors>
    }
}
    28da:	bf00      	nop
    28dc:	b009      	add	sp, #36	; 0x24
    28de:	f85d fb04 	ldr.w	pc, [sp], #4
    28e2:	bf00      	nop
    28e4:	40064000 	.word	0x40064000

000028e8 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    28e8:	b500      	push	{lr}
    28ea:	b083      	sub	sp, #12
    28ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    28ee:	9b01      	ldr	r3, [sp, #4]
    28f0:	2b00      	cmp	r3, #0
    28f2:	d002      	beq.n	28fa <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    28f4:	9801      	ldr	r0, [sp, #4]
    28f6:	f000 f997 	bl	2c28 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    28fa:	bf00      	nop
    28fc:	b003      	add	sp, #12
    28fe:	f85d fb04 	ldr.w	pc, [sp], #4

00002902 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2902:	b500      	push	{lr}
    2904:	b083      	sub	sp, #12
    2906:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2908:	9b01      	ldr	r3, [sp, #4]
    290a:	2b00      	cmp	r3, #0
    290c:	d002      	beq.n	2914 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    290e:	9801      	ldr	r0, [sp, #4]
    2910:	f000 fa7e 	bl	2e10 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2914:	bf00      	nop
    2916:	b003      	add	sp, #12
    2918:	f85d fb04 	ldr.w	pc, [sp], #4

0000291c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    291c:	b500      	push	{lr}
    291e:	b083      	sub	sp, #12
    2920:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2922:	9801      	ldr	r0, [sp, #4]
    2924:	f000 fab8 	bl	2e98 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2928:	bf00      	nop
    292a:	b003      	add	sp, #12
    292c:	f85d fb04 	ldr.w	pc, [sp], #4

00002930 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2930:	b500      	push	{lr}
    2932:	b08b      	sub	sp, #44	; 0x2c
    2934:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2936:	2300      	movs	r3, #0
    2938:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    293c:	9b01      	ldr	r3, [sp, #4]
    293e:	2b00      	cmp	r3, #0
    2940:	d10b      	bne.n	295a <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    2942:	2305      	movs	r3, #5
    2944:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2946:	2301      	movs	r3, #1
    2948:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    294c:	2301      	movs	r3, #1
    294e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    2952:	2301      	movs	r3, #1
    2954:	f88d 3010 	strb.w	r3, [sp, #16]
    2958:	e00e      	b.n	2978 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    295a:	9b01      	ldr	r3, [sp, #4]
    295c:	681b      	ldr	r3, [r3, #0]
    295e:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2960:	9b01      	ldr	r3, [sp, #4]
    2962:	79db      	ldrb	r3, [r3, #7]
    2964:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2968:	9b01      	ldr	r3, [sp, #4]
    296a:	889b      	ldrh	r3, [r3, #4]
    296c:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2970:	9b01      	ldr	r3, [sp, #4]
    2972:	7a1b      	ldrb	r3, [r3, #8]
    2974:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2978:	4b32      	ldr	r3, [pc, #200]	; (2a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    297a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    297e:	4a31      	ldr	r2, [pc, #196]	; (2a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2980:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2984:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2988:	4b2e      	ldr	r3, [pc, #184]	; (2a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    298a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    298e:	4a2d      	ldr	r2, [pc, #180]	; (2a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2990:	f023 0301 	bic.w	r3, r3, #1
    2994:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2998:	4b2a      	ldr	r3, [pc, #168]	; (2a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    299a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    299e:	4a29      	ldr	r2, [pc, #164]	; (2a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    29a0:	f023 0304 	bic.w	r3, r3, #4
    29a4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    29a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    29ac:	2b01      	cmp	r3, #1
    29ae:	d144      	bne.n	2a3a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    29b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    29b4:	4a23      	ldr	r2, [pc, #140]	; (2a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    29b6:	f003 0301 	and.w	r3, r3, #1
    29ba:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    29be:	4b21      	ldr	r3, [pc, #132]	; (2a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    29c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29c4:	4a1f      	ldr	r2, [pc, #124]	; (2a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    29c6:	f043 0301 	orr.w	r3, r3, #1
    29ca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    29ce:	4b1d      	ldr	r3, [pc, #116]	; (2a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    29d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    29d4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    29d8:	009b      	lsls	r3, r3, #2
    29da:	f003 0304 	and.w	r3, r3, #4
    29de:	4919      	ldr	r1, [pc, #100]	; (2a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    29e0:	4313      	orrs	r3, r2
    29e2:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    29e6:	aa05      	add	r2, sp, #20
    29e8:	a906      	add	r1, sp, #24
    29ea:	a807      	add	r0, sp, #28
    29ec:	f24c 3350 	movw	r3, #50000	; 0xc350
    29f0:	f7ff f8f8 	bl	1be4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    29f4:	4b13      	ldr	r3, [pc, #76]	; (2a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    29f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29fa:	0e1b      	lsrs	r3, r3, #24
    29fc:	f003 0301 	and.w	r3, r3, #1
    2a00:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2a02:	9a05      	ldr	r2, [sp, #20]
    2a04:	a906      	add	r1, sp, #24
    2a06:	ab07      	add	r3, sp, #28
    2a08:	4618      	mov	r0, r3
    2a0a:	f7ff f905 	bl	1c18 <Clock_Ip_TimeoutExpired>
    2a0e:	4603      	mov	r3, r0
    2a10:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2a14:	9b08      	ldr	r3, [sp, #32]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d106      	bne.n	2a28 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    2a1a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2a1e:	f083 0301 	eor.w	r3, r3, #1
    2a22:	b2db      	uxtb	r3, r3
    2a24:	2b00      	cmp	r3, #0
    2a26:	d1e5      	bne.n	29f4 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2a28:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	d004      	beq.n	2a3a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    2a30:	9b02      	ldr	r3, [sp, #8]
    2a32:	4619      	mov	r1, r3
    2a34:	2001      	movs	r0, #1
    2a36:	f7ff f8c5 	bl	1bc4 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2a3a:	bf00      	nop
    2a3c:	b00b      	add	sp, #44	; 0x2c
    2a3e:	f85d fb04 	ldr.w	pc, [sp], #4
    2a42:	bf00      	nop
    2a44:	40064000 	.word	0x40064000

00002a48 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2a48:	b500      	push	{lr}
    2a4a:	b089      	sub	sp, #36	; 0x24
    2a4c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2a4e:	2300      	movs	r3, #0
    2a50:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2a54:	4b1f      	ldr	r3, [pc, #124]	; (2ad4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a5a:	4a1e      	ldr	r2, [pc, #120]	; (2ad4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a5c:	f043 0301 	orr.w	r3, r3, #1
    2a60:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    2a64:	4b1b      	ldr	r3, [pc, #108]	; (2ad4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a6a:	4a1a      	ldr	r2, [pc, #104]	; (2ad4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a6c:	f043 0304 	orr.w	r3, r3, #4
    2a70:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2a74:	aa03      	add	r2, sp, #12
    2a76:	a904      	add	r1, sp, #16
    2a78:	a805      	add	r0, sp, #20
    2a7a:	f24c 3350 	movw	r3, #50000	; 0xc350
    2a7e:	f7ff f8b1 	bl	1be4 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2a82:	4b14      	ldr	r3, [pc, #80]	; (2ad4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a88:	0e1b      	lsrs	r3, r3, #24
    2a8a:	f003 0301 	and.w	r3, r3, #1
    2a8e:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2a90:	9a03      	ldr	r2, [sp, #12]
    2a92:	a904      	add	r1, sp, #16
    2a94:	ab05      	add	r3, sp, #20
    2a96:	4618      	mov	r0, r3
    2a98:	f7ff f8be 	bl	1c18 <Clock_Ip_TimeoutExpired>
    2a9c:	4603      	mov	r3, r0
    2a9e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2aa2:	9b06      	ldr	r3, [sp, #24]
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	d106      	bne.n	2ab6 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    2aa8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2aac:	f083 0301 	eor.w	r3, r3, #1
    2ab0:	b2db      	uxtb	r3, r3
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d1e5      	bne.n	2a82 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    2ab6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2aba:	2b00      	cmp	r3, #0
    2abc:	d005      	beq.n	2aca <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2abe:	9b01      	ldr	r3, [sp, #4]
    2ac0:	681b      	ldr	r3, [r3, #0]
    2ac2:	4619      	mov	r1, r3
    2ac4:	2001      	movs	r0, #1
    2ac6:	f7ff f87d 	bl	1bc4 <Clock_Ip_ReportClockErrors>
    }
}
    2aca:	bf00      	nop
    2acc:	b009      	add	sp, #36	; 0x24
    2ace:	f85d fb04 	ldr.w	pc, [sp], #4
    2ad2:	bf00      	nop
    2ad4:	40064000 	.word	0x40064000

00002ad8 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    2ad8:	b082      	sub	sp, #8
    2ada:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    2adc:	4b09      	ldr	r3, [pc, #36]	; (2b04 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ae2:	4a08      	ldr	r2, [pc, #32]	; (2b04 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2ae4:	f023 0301 	bic.w	r3, r3, #1
    2ae8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2aec:	4b05      	ldr	r3, [pc, #20]	; (2b04 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2af2:	4a04      	ldr	r2, [pc, #16]	; (2b04 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2af4:	f023 0304 	bic.w	r3, r3, #4
    2af8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2afc:	bf00      	nop
    2afe:	b002      	add	sp, #8
    2b00:	4770      	bx	lr
    2b02:	bf00      	nop
    2b04:	40064000 	.word	0x40064000

00002b08 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2b08:	b082      	sub	sp, #8
    2b0a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2b0c:	4b0f      	ldr	r3, [pc, #60]	; (2b4c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2b0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b12:	4a0e      	ldr	r2, [pc, #56]	; (2b4c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2b14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2b18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2b1c:	4b0b      	ldr	r3, [pc, #44]	; (2b4c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2b1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b22:	4a0a      	ldr	r2, [pc, #40]	; (2b4c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2b24:	f023 0304 	bic.w	r3, r3, #4
    2b28:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    2b2c:	4b07      	ldr	r3, [pc, #28]	; (2b4c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2b2e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2b32:	9b01      	ldr	r3, [sp, #4]
    2b34:	7a1b      	ldrb	r3, [r3, #8]
    2b36:	009b      	lsls	r3, r3, #2
    2b38:	f003 0304 	and.w	r3, r3, #4
    2b3c:	4903      	ldr	r1, [pc, #12]	; (2b4c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2b3e:	4313      	orrs	r3, r2
    2b40:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2b44:	bf00      	nop
    2b46:	b002      	add	sp, #8
    2b48:	4770      	bx	lr
    2b4a:	bf00      	nop
    2b4c:	40064000 	.word	0x40064000

00002b50 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2b50:	b082      	sub	sp, #8
    2b52:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2b54:	9b01      	ldr	r3, [sp, #4]
    2b56:	889b      	ldrh	r3, [r3, #4]
    2b58:	2b01      	cmp	r3, #1
    2b5a:	d107      	bne.n	2b6c <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    2b5c:	4b05      	ldr	r3, [pc, #20]	; (2b74 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2b5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b62:	4a04      	ldr	r2, [pc, #16]	; (2b74 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2b64:	f043 0304 	orr.w	r3, r3, #4
    2b68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2b6c:	bf00      	nop
    2b6e:	b002      	add	sp, #8
    2b70:	4770      	bx	lr
    2b72:	bf00      	nop
    2b74:	40064000 	.word	0x40064000

00002b78 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    2b78:	b082      	sub	sp, #8
    2b7a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2b7c:	4b05      	ldr	r3, [pc, #20]	; (2b94 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2b7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b82:	4a04      	ldr	r2, [pc, #16]	; (2b94 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2b84:	f023 0304 	bic.w	r3, r3, #4
    2b88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2b8c:	bf00      	nop
    2b8e:	b002      	add	sp, #8
    2b90:	4770      	bx	lr
    2b92:	bf00      	nop
    2b94:	40064000 	.word	0x40064000

00002b98 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2b98:	b082      	sub	sp, #8
    2b9a:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2b9c:	4b0f      	ldr	r3, [pc, #60]	; (2bdc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ba2:	4a0e      	ldr	r2, [pc, #56]	; (2bdc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2ba4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2ba8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2bac:	4b0b      	ldr	r3, [pc, #44]	; (2bdc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2bae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2bb2:	4a0a      	ldr	r2, [pc, #40]	; (2bdc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2bb4:	f023 0302 	bic.w	r3, r3, #2
    2bb8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    2bbc:	4b07      	ldr	r3, [pc, #28]	; (2bdc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2bbe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2bc2:	9b01      	ldr	r3, [sp, #4]
    2bc4:	7a5b      	ldrb	r3, [r3, #9]
    2bc6:	005b      	lsls	r3, r3, #1
    2bc8:	f003 0302 	and.w	r3, r3, #2
    2bcc:	4903      	ldr	r1, [pc, #12]	; (2bdc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2bce:	4313      	orrs	r3, r2
    2bd0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2bd4:	bf00      	nop
    2bd6:	b002      	add	sp, #8
    2bd8:	4770      	bx	lr
    2bda:	bf00      	nop
    2bdc:	40064000 	.word	0x40064000

00002be0 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2be0:	b082      	sub	sp, #8
    2be2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2be4:	9b01      	ldr	r3, [sp, #4]
    2be6:	889b      	ldrh	r3, [r3, #4]
    2be8:	2b01      	cmp	r3, #1
    2bea:	d107      	bne.n	2bfc <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    2bec:	4b05      	ldr	r3, [pc, #20]	; (2c04 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2bee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2bf2:	4a04      	ldr	r2, [pc, #16]	; (2c04 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2bf4:	f043 0302 	orr.w	r3, r3, #2
    2bf8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2bfc:	bf00      	nop
    2bfe:	b002      	add	sp, #8
    2c00:	4770      	bx	lr
    2c02:	bf00      	nop
    2c04:	40064000 	.word	0x40064000

00002c08 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    2c08:	b082      	sub	sp, #8
    2c0a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2c0c:	4b05      	ldr	r3, [pc, #20]	; (2c24 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c12:	4a04      	ldr	r2, [pc, #16]	; (2c24 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2c14:	f023 0302 	bic.w	r3, r3, #2
    2c18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2c1c:	bf00      	nop
    2c1e:	b002      	add	sp, #8
    2c20:	4770      	bx	lr
    2c22:	bf00      	nop
    2c24:	40064000 	.word	0x40064000

00002c28 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2c28:	b500      	push	{lr}
    2c2a:	b08b      	sub	sp, #44	; 0x2c
    2c2c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2c2e:	9b01      	ldr	r3, [sp, #4]
    2c30:	681a      	ldr	r2, [r3, #0]
    2c32:	4975      	ldr	r1, [pc, #468]	; (2e08 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    2c34:	4613      	mov	r3, r2
    2c36:	00db      	lsls	r3, r3, #3
    2c38:	4413      	add	r3, r2
    2c3a:	440b      	add	r3, r1
    2c3c:	781b      	ldrb	r3, [r3, #0]
    2c3e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    2c40:	2300      	movs	r3, #0
    2c42:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    2c46:	2300      	movs	r3, #0
    2c48:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    2c4c:	4b6f      	ldr	r3, [pc, #444]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c52:	4a6e      	ldr	r2, [pc, #440]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2c58:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    2c5c:	4b6b      	ldr	r3, [pc, #428]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    2c66:	2b00      	cmp	r3, #0
    2c68:	d07d      	beq.n	2d66 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    2c6a:	9b01      	ldr	r3, [sp, #4]
    2c6c:	79db      	ldrb	r3, [r3, #7]
    2c6e:	461a      	mov	r2, r3
    2c70:	4b66      	ldr	r3, [pc, #408]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c72:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    2c76:	f003 0303 	and.w	r3, r3, #3
    2c7a:	429a      	cmp	r2, r3
    2c7c:	d10b      	bne.n	2c96 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    2c7e:	9b01      	ldr	r3, [sp, #4]
    2c80:	799b      	ldrb	r3, [r3, #6]
    2c82:	461a      	mov	r2, r3
    2c84:	4b61      	ldr	r3, [pc, #388]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c8a:	08db      	lsrs	r3, r3, #3
    2c8c:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    2c90:	429a      	cmp	r2, r3
    2c92:	f000 80b4 	beq.w	2dfe <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    2c96:	4b5d      	ldr	r3, [pc, #372]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c9c:	f003 0301 	and.w	r3, r3, #1
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	d105      	bne.n	2cb0 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    2ca4:	2301      	movs	r3, #1
    2ca6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    2caa:	2000      	movs	r0, #0
    2cac:	f7ff fd66 	bl	277c <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    2cb0:	2002      	movs	r0, #2
    2cb2:	f7ff fdcf 	bl	2854 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    2cb6:	4b55      	ldr	r3, [pc, #340]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cb8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2cbc:	4a53      	ldr	r2, [pc, #332]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cbe:	f023 0301 	bic.w	r3, r3, #1
    2cc2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    2cc6:	9b01      	ldr	r3, [sp, #4]
    2cc8:	889b      	ldrh	r3, [r3, #4]
    2cca:	2b01      	cmp	r3, #1
    2ccc:	f040 8097 	bne.w	2dfe <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    2cd0:	9b01      	ldr	r3, [sp, #4]
    2cd2:	79db      	ldrb	r3, [r3, #7]
    2cd4:	4a4d      	ldr	r2, [pc, #308]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cd6:	f003 0303 	and.w	r3, r3, #3
    2cda:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    2cde:	4b4b      	ldr	r3, [pc, #300]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2ce0:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2ce4:	9b01      	ldr	r3, [sp, #4]
    2ce6:	799b      	ldrb	r3, [r3, #6]
    2ce8:	00db      	lsls	r3, r3, #3
    2cea:	f003 0308 	and.w	r3, r3, #8
    2cee:	4313      	orrs	r3, r2
    2cf0:	4a46      	ldr	r2, [pc, #280]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cf2:	f043 0301 	orr.w	r3, r3, #1
    2cf6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2cfa:	aa03      	add	r2, sp, #12
    2cfc:	a904      	add	r1, sp, #16
    2cfe:	a805      	add	r0, sp, #20
    2d00:	f24c 3350 	movw	r3, #50000	; 0xc350
    2d04:	f7fe ff6e 	bl	1be4 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2d08:	4b40      	ldr	r3, [pc, #256]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d0e:	0e1b      	lsrs	r3, r3, #24
    2d10:	f003 0301 	and.w	r3, r3, #1
    2d14:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2d16:	9a03      	ldr	r2, [sp, #12]
    2d18:	a904      	add	r1, sp, #16
    2d1a:	ab05      	add	r3, sp, #20
    2d1c:	4618      	mov	r0, r3
    2d1e:	f7fe ff7b 	bl	1c18 <Clock_Ip_TimeoutExpired>
    2d22:	4603      	mov	r3, r0
    2d24:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2d28:	9b06      	ldr	r3, [sp, #24]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d106      	bne.n	2d3c <Clock_Ip_SetFirc_TrustedCall+0x114>
    2d2e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d32:	f083 0301 	eor.w	r3, r3, #1
    2d36:	b2db      	uxtb	r3, r3
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d1e5      	bne.n	2d08 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    2d3c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d40:	2b00      	cmp	r3, #0
    2d42:	d005      	beq.n	2d50 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2d44:	9b01      	ldr	r3, [sp, #4]
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	4619      	mov	r1, r3
    2d4a:	2001      	movs	r0, #1
    2d4c:	f7fe ff3a 	bl	1bc4 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    2d50:	2003      	movs	r0, #3
    2d52:	f7ff fd7f 	bl	2854 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    2d56:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	d04f      	beq.n	2dfe <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    2d5e:	2002      	movs	r0, #2
    2d60:	f7ff fd26 	bl	27b0 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    2d64:	e04b      	b.n	2dfe <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    2d66:	4b29      	ldr	r3, [pc, #164]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d68:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d6c:	4a27      	ldr	r2, [pc, #156]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d6e:	f023 0301 	bic.w	r3, r3, #1
    2d72:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    2d76:	9b01      	ldr	r3, [sp, #4]
    2d78:	889b      	ldrh	r3, [r3, #4]
    2d7a:	2b01      	cmp	r3, #1
    2d7c:	d13f      	bne.n	2dfe <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    2d7e:	9b01      	ldr	r3, [sp, #4]
    2d80:	79db      	ldrb	r3, [r3, #7]
    2d82:	4a22      	ldr	r2, [pc, #136]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d84:	f003 0303 	and.w	r3, r3, #3
    2d88:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    2d8c:	4b1f      	ldr	r3, [pc, #124]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d8e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2d92:	9b01      	ldr	r3, [sp, #4]
    2d94:	799b      	ldrb	r3, [r3, #6]
    2d96:	00db      	lsls	r3, r3, #3
    2d98:	f003 0308 	and.w	r3, r3, #8
    2d9c:	4313      	orrs	r3, r2
    2d9e:	4a1b      	ldr	r2, [pc, #108]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2da0:	f043 0301 	orr.w	r3, r3, #1
    2da4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2da8:	aa03      	add	r2, sp, #12
    2daa:	a904      	add	r1, sp, #16
    2dac:	a805      	add	r0, sp, #20
    2dae:	f24c 3350 	movw	r3, #50000	; 0xc350
    2db2:	f7fe ff17 	bl	1be4 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2db6:	4b15      	ldr	r3, [pc, #84]	; (2e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2db8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2dbc:	0e1b      	lsrs	r3, r3, #24
    2dbe:	f003 0301 	and.w	r3, r3, #1
    2dc2:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2dc4:	9a03      	ldr	r2, [sp, #12]
    2dc6:	a904      	add	r1, sp, #16
    2dc8:	ab05      	add	r3, sp, #20
    2dca:	4618      	mov	r0, r3
    2dcc:	f7fe ff24 	bl	1c18 <Clock_Ip_TimeoutExpired>
    2dd0:	4603      	mov	r3, r0
    2dd2:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2dd6:	9b06      	ldr	r3, [sp, #24]
    2dd8:	2b00      	cmp	r3, #0
    2dda:	d106      	bne.n	2dea <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    2ddc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2de0:	f083 0301 	eor.w	r3, r3, #1
    2de4:	b2db      	uxtb	r3, r3
    2de6:	2b00      	cmp	r3, #0
    2de8:	d1e5      	bne.n	2db6 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    2dea:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2dee:	2b00      	cmp	r3, #0
    2df0:	d005      	beq.n	2dfe <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2df2:	9b01      	ldr	r3, [sp, #4]
    2df4:	681b      	ldr	r3, [r3, #0]
    2df6:	4619      	mov	r1, r3
    2df8:	2001      	movs	r0, #1
    2dfa:	f7fe fee3 	bl	1bc4 <Clock_Ip_ReportClockErrors>
}
    2dfe:	bf00      	nop
    2e00:	b00b      	add	sp, #44	; 0x2c
    2e02:	f85d fb04 	ldr.w	pc, [sp], #4
    2e06:	bf00      	nop
    2e08:	0000b6d4 	.word	0x0000b6d4
    2e0c:	40064000 	.word	0x40064000

00002e10 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2e10:	b500      	push	{lr}
    2e12:	b089      	sub	sp, #36	; 0x24
    2e14:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2e16:	2300      	movs	r3, #0
    2e18:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    2e1c:	9b01      	ldr	r3, [sp, #4]
    2e1e:	889b      	ldrh	r3, [r3, #4]
    2e20:	2b01      	cmp	r3, #1
    2e22:	d132      	bne.n	2e8a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    2e24:	4b1b      	ldr	r3, [pc, #108]	; (2e94 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2e26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2e2a:	4a1a      	ldr	r2, [pc, #104]	; (2e94 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2e2c:	f043 0301 	orr.w	r3, r3, #1
    2e30:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2e34:	aa03      	add	r2, sp, #12
    2e36:	a904      	add	r1, sp, #16
    2e38:	a805      	add	r0, sp, #20
    2e3a:	f24c 3350 	movw	r3, #50000	; 0xc350
    2e3e:	f7fe fed1 	bl	1be4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2e42:	4b14      	ldr	r3, [pc, #80]	; (2e94 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2e44:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2e48:	0e1b      	lsrs	r3, r3, #24
    2e4a:	f003 0301 	and.w	r3, r3, #1
    2e4e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2e50:	9a03      	ldr	r2, [sp, #12]
    2e52:	a904      	add	r1, sp, #16
    2e54:	ab05      	add	r3, sp, #20
    2e56:	4618      	mov	r0, r3
    2e58:	f7fe fede 	bl	1c18 <Clock_Ip_TimeoutExpired>
    2e5c:	4603      	mov	r3, r0
    2e5e:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2e62:	9b06      	ldr	r3, [sp, #24]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d106      	bne.n	2e76 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    2e68:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e6c:	f083 0301 	eor.w	r3, r3, #1
    2e70:	b2db      	uxtb	r3, r3
    2e72:	2b00      	cmp	r3, #0
    2e74:	d1e5      	bne.n	2e42 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    2e76:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d005      	beq.n	2e8a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2e7e:	9b01      	ldr	r3, [sp, #4]
    2e80:	681b      	ldr	r3, [r3, #0]
    2e82:	4619      	mov	r1, r3
    2e84:	2001      	movs	r0, #1
    2e86:	f7fe fe9d 	bl	1bc4 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2e8a:	bf00      	nop
    2e8c:	b009      	add	sp, #36	; 0x24
    2e8e:	f85d fb04 	ldr.w	pc, [sp], #4
    2e92:	bf00      	nop
    2e94:	40064000 	.word	0x40064000

00002e98 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    2e98:	b082      	sub	sp, #8
    2e9a:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    2e9c:	4b05      	ldr	r3, [pc, #20]	; (2eb4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2ea2:	4a04      	ldr	r2, [pc, #16]	; (2eb4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2ea4:	f023 0301 	bic.w	r3, r3, #1
    2ea8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    2eac:	bf00      	nop
    2eae:	b002      	add	sp, #8
    2eb0:	4770      	bx	lr
    2eb2:	bf00      	nop
    2eb4:	40064000 	.word	0x40064000

00002eb8 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    2eb8:	b082      	sub	sp, #8
    2eba:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2ebc:	bf00      	nop
    2ebe:	b002      	add	sp, #8
    2ec0:	4770      	bx	lr

00002ec2 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    2ec2:	b082      	sub	sp, #8
    2ec4:	9001      	str	r0, [sp, #4]
    2ec6:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    2ec8:	bf00      	nop
    2eca:	b002      	add	sp, #8
    2ecc:	4770      	bx	lr

00002ece <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    2ece:	b082      	sub	sp, #8
    2ed0:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2ed2:	bf00      	nop
    2ed4:	b002      	add	sp, #8
    2ed6:	4770      	bx	lr

00002ed8 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    2ed8:	b082      	sub	sp, #8
    2eda:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2edc:	bf00      	nop
    2ede:	b002      	add	sp, #8
    2ee0:	4770      	bx	lr

00002ee2 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    2ee2:	b082      	sub	sp, #8
    2ee4:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    2ee6:	2302      	movs	r3, #2
}
    2ee8:	4618      	mov	r0, r3
    2eea:	b002      	add	sp, #8
    2eec:	4770      	bx	lr

00002eee <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    2eee:	b082      	sub	sp, #8
    2ef0:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    2ef2:	bf00      	nop
    2ef4:	b002      	add	sp, #8
    2ef6:	4770      	bx	lr

00002ef8 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    2ef8:	b500      	push	{lr}
    2efa:	b083      	sub	sp, #12
    2efc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2efe:	9b01      	ldr	r3, [sp, #4]
    2f00:	2b00      	cmp	r3, #0
    2f02:	d002      	beq.n	2f0a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    2f04:	9801      	ldr	r0, [sp, #4]
    2f06:	f000 f870 	bl	2fea <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f0a:	bf00      	nop
    2f0c:	b003      	add	sp, #12
    2f0e:	f85d fb04 	ldr.w	pc, [sp], #4

00002f12 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    2f12:	b500      	push	{lr}
    2f14:	b083      	sub	sp, #12
    2f16:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f18:	9b01      	ldr	r3, [sp, #4]
    2f1a:	2b00      	cmp	r3, #0
    2f1c:	d002      	beq.n	2f24 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    2f1e:	9801      	ldr	r0, [sp, #4]
    2f20:	f000 f89a 	bl	3058 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f24:	bf00      	nop
    2f26:	b003      	add	sp, #12
    2f28:	f85d fb04 	ldr.w	pc, [sp], #4

00002f2c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    2f2c:	b500      	push	{lr}
    2f2e:	b089      	sub	sp, #36	; 0x24
    2f30:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    2f32:	2301      	movs	r3, #1
    2f34:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    2f36:	2300      	movs	r3, #0
    2f38:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    2f3c:	4b1e      	ldr	r3, [pc, #120]	; (2fb8 <Clock_Ip_CompleteSpll+0x8c>)
    2f3e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f42:	f003 0301 	and.w	r3, r3, #1
    2f46:	2b00      	cmp	r3, #0
    2f48:	d02f      	beq.n	2faa <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2f4a:	aa02      	add	r2, sp, #8
    2f4c:	a903      	add	r1, sp, #12
    2f4e:	a804      	add	r0, sp, #16
    2f50:	f24c 3350 	movw	r3, #50000	; 0xc350
    2f54:	f7fe fe46 	bl	1be4 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    2f58:	4b17      	ldr	r3, [pc, #92]	; (2fb8 <Clock_Ip_CompleteSpll+0x8c>)
    2f5a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f5e:	0e1b      	lsrs	r3, r3, #24
    2f60:	f003 0301 	and.w	r3, r3, #1
    2f64:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2f66:	9a02      	ldr	r2, [sp, #8]
    2f68:	a903      	add	r1, sp, #12
    2f6a:	ab04      	add	r3, sp, #16
    2f6c:	4618      	mov	r0, r3
    2f6e:	f7fe fe53 	bl	1c18 <Clock_Ip_TimeoutExpired>
    2f72:	4603      	mov	r3, r0
    2f74:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    2f78:	9b05      	ldr	r3, [sp, #20]
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	d106      	bne.n	2f8c <Clock_Ip_CompleteSpll+0x60>
    2f7e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f82:	f083 0301 	eor.w	r3, r3, #1
    2f86:	b2db      	uxtb	r3, r3
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d1e5      	bne.n	2f58 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    2f8c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f90:	f083 0301 	eor.w	r3, r3, #1
    2f94:	b2db      	uxtb	r3, r3
    2f96:	2b00      	cmp	r3, #0
    2f98:	d002      	beq.n	2fa0 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    2f9a:	2302      	movs	r3, #2
    2f9c:	9307      	str	r3, [sp, #28]
    2f9e:	e006      	b.n	2fae <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    2fa0:	9901      	ldr	r1, [sp, #4]
    2fa2:	2001      	movs	r0, #1
    2fa4:	f7fe fe0e 	bl	1bc4 <Clock_Ip_ReportClockErrors>
    2fa8:	e001      	b.n	2fae <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    2faa:	2300      	movs	r3, #0
    2fac:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    2fae:	9b07      	ldr	r3, [sp, #28]
}
    2fb0:	4618      	mov	r0, r3
    2fb2:	b009      	add	sp, #36	; 0x24
    2fb4:	f85d fb04 	ldr.w	pc, [sp], #4
    2fb8:	40064000 	.word	0x40064000

00002fbc <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    2fbc:	b500      	push	{lr}
    2fbe:	b083      	sub	sp, #12
    2fc0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    2fc2:	9801      	ldr	r0, [sp, #4]
    2fc4:	f000 f886 	bl	30d4 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2fc8:	bf00      	nop
    2fca:	b003      	add	sp, #12
    2fcc:	f85d fb04 	ldr.w	pc, [sp], #4

00002fd0 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    2fd0:	b500      	push	{lr}
    2fd2:	b083      	sub	sp, #12
    2fd4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fd6:	9b01      	ldr	r3, [sp, #4]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d002      	beq.n	2fe2 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    2fdc:	9801      	ldr	r0, [sp, #4]
    2fde:	f000 f891 	bl	3104 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fe2:	bf00      	nop
    2fe4:	b003      	add	sp, #12
    2fe6:	f85d fb04 	ldr.w	pc, [sp], #4

00002fea <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    2fea:	b082      	sub	sp, #8
    2fec:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    2fee:	4b19      	ldr	r3, [pc, #100]	; (3054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2ff0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2ff4:	4a17      	ldr	r2, [pc, #92]	; (3054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2ff6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2ffa:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    2ffe:	4b15      	ldr	r3, [pc, #84]	; (3054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3000:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3004:	4a13      	ldr	r2, [pc, #76]	; (3054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    300a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    300e:	4b11      	ldr	r3, [pc, #68]	; (3054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3010:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3014:	4a0f      	ldr	r2, [pc, #60]	; (3054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3016:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    301a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    301e:	4b0d      	ldr	r3, [pc, #52]	; (3054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3020:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3024:	4a0b      	ldr	r2, [pc, #44]	; (3054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3026:	f023 0301 	bic.w	r3, r3, #1
    302a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    302e:	4b09      	ldr	r3, [pc, #36]	; (3054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3030:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3034:	4a07      	ldr	r2, [pc, #28]	; (3054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3036:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    303a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    303e:	4b05      	ldr	r3, [pc, #20]	; (3054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3040:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3044:	4a03      	ldr	r2, [pc, #12]	; (3054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3046:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    304a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    304e:	bf00      	nop
    3050:	b002      	add	sp, #8
    3052:	4770      	bx	lr
    3054:	40064000 	.word	0x40064000

00003058 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3058:	b082      	sub	sp, #8
    305a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    305c:	9b01      	ldr	r3, [sp, #4]
    305e:	889b      	ldrh	r3, [r3, #4]
    3060:	2b01      	cmp	r3, #1
    3062:	d12f      	bne.n	30c4 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3064:	4b1a      	ldr	r3, [pc, #104]	; (30d0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3066:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    306a:	9b01      	ldr	r3, [sp, #4]
    306c:	7b5b      	ldrb	r3, [r3, #13]
    306e:	3b01      	subs	r3, #1
    3070:	021b      	lsls	r3, r3, #8
    3072:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3076:	9b01      	ldr	r3, [sp, #4]
    3078:	7d1b      	ldrb	r3, [r3, #20]
    307a:	3b10      	subs	r3, #16
    307c:	041b      	lsls	r3, r3, #16
    307e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3082:	430b      	orrs	r3, r1
    3084:	4912      	ldr	r1, [pc, #72]	; (30d0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3086:	4313      	orrs	r3, r2
    3088:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    308c:	9b01      	ldr	r3, [sp, #4]
    308e:	7fdb      	ldrb	r3, [r3, #31]
    3090:	2b02      	cmp	r3, #2
    3092:	d011      	beq.n	30b8 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3094:	2b02      	cmp	r3, #2
    3096:	dc17      	bgt.n	30c8 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3098:	2b00      	cmp	r3, #0
    309a:	d002      	beq.n	30a2 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    309c:	2b01      	cmp	r3, #1
    309e:	d005      	beq.n	30ac <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    30a0:	e012      	b.n	30c8 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    30a2:	4b0b      	ldr	r3, [pc, #44]	; (30d0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    30a4:	2200      	movs	r2, #0
    30a6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    30aa:	e00e      	b.n	30ca <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    30ac:	4b08      	ldr	r3, [pc, #32]	; (30d0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    30ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    30b2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    30b6:	e008      	b.n	30ca <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    30b8:	4b05      	ldr	r3, [pc, #20]	; (30d0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    30ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    30be:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    30c2:	e002      	b.n	30ca <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    30c4:	bf00      	nop
    30c6:	e000      	b.n	30ca <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    30c8:	bf00      	nop
}
    30ca:	bf00      	nop
    30cc:	b002      	add	sp, #8
    30ce:	4770      	bx	lr
    30d0:	40064000 	.word	0x40064000

000030d4 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    30d4:	b082      	sub	sp, #8
    30d6:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    30d8:	4b09      	ldr	r3, [pc, #36]	; (3100 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    30da:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    30de:	4a08      	ldr	r2, [pc, #32]	; (3100 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    30e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    30e4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    30e8:	4b05      	ldr	r3, [pc, #20]	; (3100 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    30ea:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    30ee:	4a04      	ldr	r2, [pc, #16]	; (3100 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    30f0:	f023 0301 	bic.w	r3, r3, #1
    30f4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    30f8:	bf00      	nop
    30fa:	b002      	add	sp, #8
    30fc:	4770      	bx	lr
    30fe:	bf00      	nop
    3100:	40064000 	.word	0x40064000

00003104 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3104:	b082      	sub	sp, #8
    3106:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3108:	9b01      	ldr	r3, [sp, #4]
    310a:	889b      	ldrh	r3, [r3, #4]
    310c:	2b01      	cmp	r3, #1
    310e:	d107      	bne.n	3120 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3110:	4b05      	ldr	r3, [pc, #20]	; (3128 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3112:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3116:	4a04      	ldr	r2, [pc, #16]	; (3128 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3118:	f043 0301 	orr.w	r3, r3, #1
    311c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3120:	bf00      	nop
    3122:	b002      	add	sp, #8
    3124:	4770      	bx	lr
    3126:	bf00      	nop
    3128:	40064000 	.word	0x40064000

0000312c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    312c:	b082      	sub	sp, #8
    312e:	9001      	str	r0, [sp, #4]
    3130:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3132:	bf00      	nop
    3134:	b002      	add	sp, #8
    3136:	4770      	bx	lr

00003138 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3138:	b082      	sub	sp, #8
    313a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    313c:	bf00      	nop
    313e:	b002      	add	sp, #8
    3140:	4770      	bx	lr

00003142 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3142:	b500      	push	{lr}
    3144:	b083      	sub	sp, #12
    3146:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3148:	9b01      	ldr	r3, [sp, #4]
    314a:	2b00      	cmp	r3, #0
    314c:	d002      	beq.n	3154 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    314e:	9801      	ldr	r0, [sp, #4]
    3150:	f000 f8ee 	bl	3330 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3154:	bf00      	nop
    3156:	b003      	add	sp, #12
    3158:	f85d fb04 	ldr.w	pc, [sp], #4

0000315c <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    315c:	b500      	push	{lr}
    315e:	b083      	sub	sp, #12
    3160:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3162:	9b01      	ldr	r3, [sp, #4]
    3164:	2b00      	cmp	r3, #0
    3166:	d002      	beq.n	316e <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    3168:	9801      	ldr	r0, [sp, #4]
    316a:	f000 f8ff 	bl	336c <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    316e:	bf00      	nop
    3170:	b003      	add	sp, #12
    3172:	f85d fb04 	ldr.w	pc, [sp], #4

00003176 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    3176:	b500      	push	{lr}
    3178:	b083      	sub	sp, #12
    317a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    317c:	9b01      	ldr	r3, [sp, #4]
    317e:	2b00      	cmp	r3, #0
    3180:	d002      	beq.n	3188 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    3182:	9801      	ldr	r0, [sp, #4]
    3184:	f000 f912 	bl	33ac <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3188:	bf00      	nop
    318a:	b003      	add	sp, #12
    318c:	f85d fb04 	ldr.w	pc, [sp], #4

00003190 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3190:	b500      	push	{lr}
    3192:	b083      	sub	sp, #12
    3194:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3196:	9b01      	ldr	r3, [sp, #4]
    3198:	2b00      	cmp	r3, #0
    319a:	d002      	beq.n	31a2 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    319c:	9801      	ldr	r0, [sp, #4]
    319e:	f000 f925 	bl	33ec <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31a2:	bf00      	nop
    31a4:	b003      	add	sp, #12
    31a6:	f85d fb04 	ldr.w	pc, [sp], #4

000031aa <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    31aa:	b500      	push	{lr}
    31ac:	b083      	sub	sp, #12
    31ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31b0:	9b01      	ldr	r3, [sp, #4]
    31b2:	2b00      	cmp	r3, #0
    31b4:	d002      	beq.n	31bc <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    31b6:	9801      	ldr	r0, [sp, #4]
    31b8:	f000 f936 	bl	3428 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31bc:	bf00      	nop
    31be:	b003      	add	sp, #12
    31c0:	f85d fb04 	ldr.w	pc, [sp], #4

000031c4 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    31c4:	b500      	push	{lr}
    31c6:	b083      	sub	sp, #12
    31c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31ca:	9b01      	ldr	r3, [sp, #4]
    31cc:	2b00      	cmp	r3, #0
    31ce:	d002      	beq.n	31d6 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    31d0:	9801      	ldr	r0, [sp, #4]
    31d2:	f000 f949 	bl	3468 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31d6:	bf00      	nop
    31d8:	b003      	add	sp, #12
    31da:	f85d fb04 	ldr.w	pc, [sp], #4

000031de <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    31de:	b500      	push	{lr}
    31e0:	b083      	sub	sp, #12
    31e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31e4:	9b01      	ldr	r3, [sp, #4]
    31e6:	2b00      	cmp	r3, #0
    31e8:	d002      	beq.n	31f0 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    31ea:	9801      	ldr	r0, [sp, #4]
    31ec:	f000 f958 	bl	34a0 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31f0:	bf00      	nop
    31f2:	b003      	add	sp, #12
    31f4:	f85d fb04 	ldr.w	pc, [sp], #4

000031f8 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    31f8:	b500      	push	{lr}
    31fa:	b083      	sub	sp, #12
    31fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31fe:	9b01      	ldr	r3, [sp, #4]
    3200:	2b00      	cmp	r3, #0
    3202:	d002      	beq.n	320a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3204:	9801      	ldr	r0, [sp, #4]
    3206:	f000 f969 	bl	34dc <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    320a:	bf00      	nop
    320c:	b003      	add	sp, #12
    320e:	f85d fb04 	ldr.w	pc, [sp], #4

00003212 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3212:	b500      	push	{lr}
    3214:	b083      	sub	sp, #12
    3216:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3218:	9b01      	ldr	r3, [sp, #4]
    321a:	2b00      	cmp	r3, #0
    321c:	d002      	beq.n	3224 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    321e:	9801      	ldr	r0, [sp, #4]
    3220:	f000 f978 	bl	3514 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3224:	bf00      	nop
    3226:	b003      	add	sp, #12
    3228:	f85d fb04 	ldr.w	pc, [sp], #4

0000322c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    322c:	b500      	push	{lr}
    322e:	b083      	sub	sp, #12
    3230:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3232:	9b01      	ldr	r3, [sp, #4]
    3234:	2b00      	cmp	r3, #0
    3236:	d002      	beq.n	323e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    3238:	9801      	ldr	r0, [sp, #4]
    323a:	f000 f989 	bl	3550 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    323e:	bf00      	nop
    3240:	b003      	add	sp, #12
    3242:	f85d fb04 	ldr.w	pc, [sp], #4

00003246 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3246:	b500      	push	{lr}
    3248:	b083      	sub	sp, #12
    324a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    324c:	9b01      	ldr	r3, [sp, #4]
    324e:	2b00      	cmp	r3, #0
    3250:	d002      	beq.n	3258 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    3252:	9801      	ldr	r0, [sp, #4]
    3254:	f000 f998 	bl	3588 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3258:	bf00      	nop
    325a:	b003      	add	sp, #12
    325c:	f85d fb04 	ldr.w	pc, [sp], #4

00003260 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3260:	b500      	push	{lr}
    3262:	b083      	sub	sp, #12
    3264:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3266:	9b01      	ldr	r3, [sp, #4]
    3268:	2b00      	cmp	r3, #0
    326a:	d002      	beq.n	3272 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    326c:	9801      	ldr	r0, [sp, #4]
    326e:	f000 f9a9 	bl	35c4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3272:	bf00      	nop
    3274:	b003      	add	sp, #12
    3276:	f85d fb04 	ldr.w	pc, [sp], #4

0000327a <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    327a:	b500      	push	{lr}
    327c:	b083      	sub	sp, #12
    327e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3280:	9b01      	ldr	r3, [sp, #4]
    3282:	2b00      	cmp	r3, #0
    3284:	d002      	beq.n	328c <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3286:	9801      	ldr	r0, [sp, #4]
    3288:	f000 f9e6 	bl	3658 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    328c:	bf00      	nop
    328e:	b003      	add	sp, #12
    3290:	f85d fb04 	ldr.w	pc, [sp], #4

00003294 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3294:	b500      	push	{lr}
    3296:	b083      	sub	sp, #12
    3298:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    329a:	9b01      	ldr	r3, [sp, #4]
    329c:	2b00      	cmp	r3, #0
    329e:	d002      	beq.n	32a6 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    32a0:	9801      	ldr	r0, [sp, #4]
    32a2:	f000 fa25 	bl	36f0 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32a6:	bf00      	nop
    32a8:	b003      	add	sp, #12
    32aa:	f85d fb04 	ldr.w	pc, [sp], #4

000032ae <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    32ae:	b500      	push	{lr}
    32b0:	b083      	sub	sp, #12
    32b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32b4:	9b01      	ldr	r3, [sp, #4]
    32b6:	2b00      	cmp	r3, #0
    32b8:	d002      	beq.n	32c0 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    32ba:	9801      	ldr	r0, [sp, #4]
    32bc:	f000 fa2a 	bl	3714 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32c0:	bf00      	nop
    32c2:	b003      	add	sp, #12
    32c4:	f85d fb04 	ldr.w	pc, [sp], #4

000032c8 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    32c8:	b500      	push	{lr}
    32ca:	b083      	sub	sp, #12
    32cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32ce:	9b01      	ldr	r3, [sp, #4]
    32d0:	2b00      	cmp	r3, #0
    32d2:	d002      	beq.n	32da <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    32d4:	9801      	ldr	r0, [sp, #4]
    32d6:	f000 fa3b 	bl	3750 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32da:	bf00      	nop
    32dc:	b003      	add	sp, #12
    32de:	f85d fb04 	ldr.w	pc, [sp], #4

000032e2 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    32e2:	b500      	push	{lr}
    32e4:	b083      	sub	sp, #12
    32e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32e8:	9b01      	ldr	r3, [sp, #4]
    32ea:	2b00      	cmp	r3, #0
    32ec:	d002      	beq.n	32f4 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    32ee:	9801      	ldr	r0, [sp, #4]
    32f0:	f000 fa56 	bl	37a0 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32f4:	bf00      	nop
    32f6:	b003      	add	sp, #12
    32f8:	f85d fb04 	ldr.w	pc, [sp], #4

000032fc <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    32fc:	b500      	push	{lr}
    32fe:	b083      	sub	sp, #12
    3300:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3302:	9b01      	ldr	r3, [sp, #4]
    3304:	2b00      	cmp	r3, #0
    3306:	d002      	beq.n	330e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3308:	9801      	ldr	r0, [sp, #4]
    330a:	f000 fa79 	bl	3800 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    330e:	bf00      	nop
    3310:	b003      	add	sp, #12
    3312:	f85d fb04 	ldr.w	pc, [sp], #4

00003316 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3316:	b500      	push	{lr}
    3318:	b083      	sub	sp, #12
    331a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    331c:	9b01      	ldr	r3, [sp, #4]
    331e:	2b00      	cmp	r3, #0
    3320:	d002      	beq.n	3328 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    3322:	9801      	ldr	r0, [sp, #4]
    3324:	f000 fa8a 	bl	383c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3328:	bf00      	nop
    332a:	b003      	add	sp, #12
    332c:	f85d fb04 	ldr.w	pc, [sp], #4

00003330 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3330:	b084      	sub	sp, #16
    3332:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3334:	4b0b      	ldr	r3, [pc, #44]	; (3364 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    3336:	795b      	ldrb	r3, [r3, #5]
    3338:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    333a:	4b0b      	ldr	r3, [pc, #44]	; (3368 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    333c:	695b      	ldr	r3, [r3, #20]
    333e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3340:	9b02      	ldr	r3, [sp, #8]
    3342:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3346:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3348:	9b03      	ldr	r3, [sp, #12]
    334a:	061b      	lsls	r3, r3, #24
    334c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3350:	9a02      	ldr	r2, [sp, #8]
    3352:	4313      	orrs	r3, r2
    3354:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3356:	4a04      	ldr	r2, [pc, #16]	; (3368 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3358:	9b02      	ldr	r3, [sp, #8]
    335a:	6153      	str	r3, [r2, #20]
}
    335c:	bf00      	nop
    335e:	b004      	add	sp, #16
    3360:	4770      	bx	lr
    3362:	bf00      	nop
    3364:	0000ba3c 	.word	0x0000ba3c
    3368:	40064000 	.word	0x40064000

0000336c <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    336c:	b084      	sub	sp, #16
    336e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3370:	9b01      	ldr	r3, [sp, #4]
    3372:	685b      	ldr	r3, [r3, #4]
    3374:	4a0b      	ldr	r2, [pc, #44]	; (33a4 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    3376:	5cd3      	ldrb	r3, [r2, r3]
    3378:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    337a:	4b0b      	ldr	r3, [pc, #44]	; (33a8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    337c:	695b      	ldr	r3, [r3, #20]
    337e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3380:	9b02      	ldr	r3, [sp, #8]
    3382:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3386:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3388:	9b03      	ldr	r3, [sp, #12]
    338a:	061b      	lsls	r3, r3, #24
    338c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3390:	9a02      	ldr	r2, [sp, #8]
    3392:	4313      	orrs	r3, r2
    3394:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3396:	4a04      	ldr	r2, [pc, #16]	; (33a8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3398:	9b02      	ldr	r3, [sp, #8]
    339a:	6153      	str	r3, [r2, #20]
}
    339c:	bf00      	nop
    339e:	b004      	add	sp, #16
    33a0:	4770      	bx	lr
    33a2:	bf00      	nop
    33a4:	0000ba3c 	.word	0x0000ba3c
    33a8:	40064000 	.word	0x40064000

000033ac <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    33ac:	b084      	sub	sp, #16
    33ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    33b0:	9b01      	ldr	r3, [sp, #4]
    33b2:	685b      	ldr	r3, [r3, #4]
    33b4:	4a0b      	ldr	r2, [pc, #44]	; (33e4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    33b6:	5cd3      	ldrb	r3, [r2, r3]
    33b8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    33ba:	4b0b      	ldr	r3, [pc, #44]	; (33e8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    33bc:	699b      	ldr	r3, [r3, #24]
    33be:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    33c0:	9b02      	ldr	r3, [sp, #8]
    33c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    33c6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    33c8:	9b03      	ldr	r3, [sp, #12]
    33ca:	061b      	lsls	r3, r3, #24
    33cc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    33d0:	9a02      	ldr	r2, [sp, #8]
    33d2:	4313      	orrs	r3, r2
    33d4:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    33d6:	4a04      	ldr	r2, [pc, #16]	; (33e8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    33d8:	9b02      	ldr	r3, [sp, #8]
    33da:	6193      	str	r3, [r2, #24]
}
    33dc:	bf00      	nop
    33de:	b004      	add	sp, #16
    33e0:	4770      	bx	lr
    33e2:	bf00      	nop
    33e4:	0000ba3c 	.word	0x0000ba3c
    33e8:	40064000 	.word	0x40064000

000033ec <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    33ec:	b084      	sub	sp, #16
    33ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    33f0:	4b0b      	ldr	r3, [pc, #44]	; (3420 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    33f2:	795b      	ldrb	r3, [r3, #5]
    33f4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    33f6:	4b0b      	ldr	r3, [pc, #44]	; (3424 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    33f8:	69db      	ldr	r3, [r3, #28]
    33fa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    33fc:	9b02      	ldr	r3, [sp, #8]
    33fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3402:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3404:	9b03      	ldr	r3, [sp, #12]
    3406:	061b      	lsls	r3, r3, #24
    3408:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    340c:	9a02      	ldr	r2, [sp, #8]
    340e:	4313      	orrs	r3, r2
    3410:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3412:	4a04      	ldr	r2, [pc, #16]	; (3424 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3414:	9b02      	ldr	r3, [sp, #8]
    3416:	61d3      	str	r3, [r2, #28]
}
    3418:	bf00      	nop
    341a:	b004      	add	sp, #16
    341c:	4770      	bx	lr
    341e:	bf00      	nop
    3420:	0000ba3c 	.word	0x0000ba3c
    3424:	40064000 	.word	0x40064000

00003428 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3428:	b084      	sub	sp, #16
    342a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    342c:	9b01      	ldr	r3, [sp, #4]
    342e:	685b      	ldr	r3, [r3, #4]
    3430:	4a0b      	ldr	r2, [pc, #44]	; (3460 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    3432:	5cd3      	ldrb	r3, [r2, r3]
    3434:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    3436:	4b0b      	ldr	r3, [pc, #44]	; (3464 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3438:	69db      	ldr	r3, [r3, #28]
    343a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    343c:	9b02      	ldr	r3, [sp, #8]
    343e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3442:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3444:	9b03      	ldr	r3, [sp, #12]
    3446:	061b      	lsls	r3, r3, #24
    3448:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    344c:	9a02      	ldr	r2, [sp, #8]
    344e:	4313      	orrs	r3, r2
    3450:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3452:	4a04      	ldr	r2, [pc, #16]	; (3464 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3454:	9b02      	ldr	r3, [sp, #8]
    3456:	61d3      	str	r3, [r2, #28]
}
    3458:	bf00      	nop
    345a:	b004      	add	sp, #16
    345c:	4770      	bx	lr
    345e:	bf00      	nop
    3460:	0000ba3c 	.word	0x0000ba3c
    3464:	40064000 	.word	0x40064000

00003468 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3468:	b084      	sub	sp, #16
    346a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    346c:	4b0a      	ldr	r3, [pc, #40]	; (3498 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    346e:	7b9b      	ldrb	r3, [r3, #14]
    3470:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3472:	4b0a      	ldr	r3, [pc, #40]	; (349c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3474:	691b      	ldr	r3, [r3, #16]
    3476:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3478:	9b02      	ldr	r3, [sp, #8]
    347a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    347e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3480:	9b03      	ldr	r3, [sp, #12]
    3482:	011b      	lsls	r3, r3, #4
    3484:	9a02      	ldr	r2, [sp, #8]
    3486:	4313      	orrs	r3, r2
    3488:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    348a:	4a04      	ldr	r2, [pc, #16]	; (349c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    348c:	9b02      	ldr	r3, [sp, #8]
    348e:	6113      	str	r3, [r2, #16]
}
    3490:	bf00      	nop
    3492:	b004      	add	sp, #16
    3494:	4770      	bx	lr
    3496:	bf00      	nop
    3498:	0000b9e4 	.word	0x0000b9e4
    349c:	40048000 	.word	0x40048000

000034a0 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    34a0:	b084      	sub	sp, #16
    34a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    34a4:	9b01      	ldr	r3, [sp, #4]
    34a6:	685b      	ldr	r3, [r3, #4]
    34a8:	4a0a      	ldr	r2, [pc, #40]	; (34d4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    34aa:	5cd3      	ldrb	r3, [r2, r3]
    34ac:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    34ae:	4b0a      	ldr	r3, [pc, #40]	; (34d8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    34b0:	691b      	ldr	r3, [r3, #16]
    34b2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    34b4:	9b02      	ldr	r3, [sp, #8]
    34b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    34ba:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    34bc:	9b03      	ldr	r3, [sp, #12]
    34be:	011b      	lsls	r3, r3, #4
    34c0:	9a02      	ldr	r2, [sp, #8]
    34c2:	4313      	orrs	r3, r2
    34c4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    34c6:	4a04      	ldr	r2, [pc, #16]	; (34d8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    34c8:	9b02      	ldr	r3, [sp, #8]
    34ca:	6113      	str	r3, [r2, #16]
}
    34cc:	bf00      	nop
    34ce:	b004      	add	sp, #16
    34d0:	4770      	bx	lr
    34d2:	bf00      	nop
    34d4:	0000b9e4 	.word	0x0000b9e4
    34d8:	40048000 	.word	0x40048000

000034dc <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    34dc:	b084      	sub	sp, #16
    34de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    34e0:	4b0a      	ldr	r3, [pc, #40]	; (350c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    34e2:	785b      	ldrb	r3, [r3, #1]
    34e4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    34e6:	4b0a      	ldr	r3, [pc, #40]	; (3510 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    34e8:	691b      	ldr	r3, [r3, #16]
    34ea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    34ec:	9b02      	ldr	r3, [sp, #8]
    34ee:	f023 030c 	bic.w	r3, r3, #12
    34f2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    34f4:	9b03      	ldr	r3, [sp, #12]
    34f6:	009b      	lsls	r3, r3, #2
    34f8:	9a02      	ldr	r2, [sp, #8]
    34fa:	4313      	orrs	r3, r2
    34fc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    34fe:	4a04      	ldr	r2, [pc, #16]	; (3510 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3500:	9b02      	ldr	r3, [sp, #8]
    3502:	6113      	str	r3, [r2, #16]
}
    3504:	bf00      	nop
    3506:	b004      	add	sp, #16
    3508:	4770      	bx	lr
    350a:	bf00      	nop
    350c:	0000ba9c 	.word	0x0000ba9c
    3510:	40048000 	.word	0x40048000

00003514 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3514:	b084      	sub	sp, #16
    3516:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3518:	9b01      	ldr	r3, [sp, #4]
    351a:	685b      	ldr	r3, [r3, #4]
    351c:	4a0a      	ldr	r2, [pc, #40]	; (3548 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    351e:	5cd3      	ldrb	r3, [r2, r3]
    3520:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3522:	4b0a      	ldr	r3, [pc, #40]	; (354c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3524:	691b      	ldr	r3, [r3, #16]
    3526:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3528:	9b02      	ldr	r3, [sp, #8]
    352a:	f023 030c 	bic.w	r3, r3, #12
    352e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3530:	9b03      	ldr	r3, [sp, #12]
    3532:	009b      	lsls	r3, r3, #2
    3534:	9a02      	ldr	r2, [sp, #8]
    3536:	4313      	orrs	r3, r2
    3538:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    353a:	4a04      	ldr	r2, [pc, #16]	; (354c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    353c:	9b02      	ldr	r3, [sp, #8]
    353e:	6113      	str	r3, [r2, #16]
}
    3540:	bf00      	nop
    3542:	b004      	add	sp, #16
    3544:	4770      	bx	lr
    3546:	bf00      	nop
    3548:	0000ba9c 	.word	0x0000ba9c
    354c:	40048000 	.word	0x40048000

00003550 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3550:	b084      	sub	sp, #16
    3552:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3554:	4b0a      	ldr	r3, [pc, #40]	; (3580 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3556:	795b      	ldrb	r3, [r3, #5]
    3558:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    355a:	4b0a      	ldr	r3, [pc, #40]	; (3584 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    355c:	6a1b      	ldr	r3, [r3, #32]
    355e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3560:	9b02      	ldr	r3, [sp, #8]
    3562:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3566:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3568:	9b03      	ldr	r3, [sp, #12]
    356a:	061b      	lsls	r3, r3, #24
    356c:	9a02      	ldr	r2, [sp, #8]
    356e:	4313      	orrs	r3, r2
    3570:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3572:	4a04      	ldr	r2, [pc, #16]	; (3584 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3574:	9b02      	ldr	r3, [sp, #8]
    3576:	6213      	str	r3, [r2, #32]
}
    3578:	bf00      	nop
    357a:	b004      	add	sp, #16
    357c:	4770      	bx	lr
    357e:	bf00      	nop
    3580:	0000ba3c 	.word	0x0000ba3c
    3584:	40064000 	.word	0x40064000

00003588 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3588:	b084      	sub	sp, #16
    358a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    358c:	9b01      	ldr	r3, [sp, #4]
    358e:	685b      	ldr	r3, [r3, #4]
    3590:	4a0a      	ldr	r2, [pc, #40]	; (35bc <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3592:	5cd3      	ldrb	r3, [r2, r3]
    3594:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3596:	4b0a      	ldr	r3, [pc, #40]	; (35c0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3598:	6a1b      	ldr	r3, [r3, #32]
    359a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    359c:	9b02      	ldr	r3, [sp, #8]
    359e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    35a2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    35a4:	9b03      	ldr	r3, [sp, #12]
    35a6:	061b      	lsls	r3, r3, #24
    35a8:	9a02      	ldr	r2, [sp, #8]
    35aa:	4313      	orrs	r3, r2
    35ac:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    35ae:	4a04      	ldr	r2, [pc, #16]	; (35c0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    35b0:	9b02      	ldr	r3, [sp, #8]
    35b2:	6213      	str	r3, [r2, #32]
}
    35b4:	bf00      	nop
    35b6:	b004      	add	sp, #16
    35b8:	4770      	bx	lr
    35ba:	bf00      	nop
    35bc:	0000ba3c 	.word	0x0000ba3c
    35c0:	40064000 	.word	0x40064000

000035c4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    35c4:	b086      	sub	sp, #24
    35c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    35c8:	4b20      	ldr	r3, [pc, #128]	; (364c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    35ca:	795b      	ldrb	r3, [r3, #5]
    35cc:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    35ce:	9b01      	ldr	r3, [sp, #4]
    35d0:	681a      	ldr	r2, [r3, #0]
    35d2:	491f      	ldr	r1, [pc, #124]	; (3650 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    35d4:	4613      	mov	r3, r2
    35d6:	00db      	lsls	r3, r3, #3
    35d8:	4413      	add	r3, r2
    35da:	440b      	add	r3, r1
    35dc:	781b      	ldrb	r3, [r3, #0]
    35de:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    35e0:	4b1c      	ldr	r3, [pc, #112]	; (3654 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    35e2:	68db      	ldr	r3, [r3, #12]
    35e4:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    35e6:	9b03      	ldr	r3, [sp, #12]
    35e8:	2b03      	cmp	r3, #3
    35ea:	d813      	bhi.n	3614 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    35ec:	9b03      	ldr	r3, [sp, #12]
    35ee:	005b      	lsls	r3, r3, #1
    35f0:	3318      	adds	r3, #24
    35f2:	2203      	movs	r2, #3
    35f4:	fa02 f303 	lsl.w	r3, r2, r3
    35f8:	43db      	mvns	r3, r3
    35fa:	9a05      	ldr	r2, [sp, #20]
    35fc:	4013      	ands	r3, r2
    35fe:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3600:	9b03      	ldr	r3, [sp, #12]
    3602:	005b      	lsls	r3, r3, #1
    3604:	3318      	adds	r3, #24
    3606:	9a04      	ldr	r2, [sp, #16]
    3608:	fa02 f303 	lsl.w	r3, r2, r3
    360c:	9a05      	ldr	r2, [sp, #20]
    360e:	4313      	orrs	r3, r2
    3610:	9305      	str	r3, [sp, #20]
    3612:	e014      	b.n	363e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3614:	9b03      	ldr	r3, [sp, #12]
    3616:	3b04      	subs	r3, #4
    3618:	005b      	lsls	r3, r3, #1
    361a:	3310      	adds	r3, #16
    361c:	2203      	movs	r2, #3
    361e:	fa02 f303 	lsl.w	r3, r2, r3
    3622:	43db      	mvns	r3, r3
    3624:	9a05      	ldr	r2, [sp, #20]
    3626:	4013      	ands	r3, r2
    3628:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    362a:	9b03      	ldr	r3, [sp, #12]
    362c:	3b04      	subs	r3, #4
    362e:	005b      	lsls	r3, r3, #1
    3630:	3310      	adds	r3, #16
    3632:	9a04      	ldr	r2, [sp, #16]
    3634:	fa02 f303 	lsl.w	r3, r2, r3
    3638:	9a05      	ldr	r2, [sp, #20]
    363a:	4313      	orrs	r3, r2
    363c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    363e:	4a05      	ldr	r2, [pc, #20]	; (3654 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3640:	9b05      	ldr	r3, [sp, #20]
    3642:	60d3      	str	r3, [r2, #12]
}
    3644:	bf00      	nop
    3646:	b006      	add	sp, #24
    3648:	4770      	bx	lr
    364a:	bf00      	nop
    364c:	0000b9e4 	.word	0x0000b9e4
    3650:	0000b6d4 	.word	0x0000b6d4
    3654:	40048000 	.word	0x40048000

00003658 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3658:	b086      	sub	sp, #24
    365a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    365c:	9b01      	ldr	r3, [sp, #4]
    365e:	685b      	ldr	r3, [r3, #4]
    3660:	4a20      	ldr	r2, [pc, #128]	; (36e4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3662:	5cd3      	ldrb	r3, [r2, r3]
    3664:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3666:	9b01      	ldr	r3, [sp, #4]
    3668:	681a      	ldr	r2, [r3, #0]
    366a:	491f      	ldr	r1, [pc, #124]	; (36e8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    366c:	4613      	mov	r3, r2
    366e:	00db      	lsls	r3, r3, #3
    3670:	4413      	add	r3, r2
    3672:	440b      	add	r3, r1
    3674:	781b      	ldrb	r3, [r3, #0]
    3676:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3678:	4b1c      	ldr	r3, [pc, #112]	; (36ec <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    367a:	68db      	ldr	r3, [r3, #12]
    367c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    367e:	9b03      	ldr	r3, [sp, #12]
    3680:	2b03      	cmp	r3, #3
    3682:	d813      	bhi.n	36ac <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3684:	9b03      	ldr	r3, [sp, #12]
    3686:	005b      	lsls	r3, r3, #1
    3688:	3318      	adds	r3, #24
    368a:	2203      	movs	r2, #3
    368c:	fa02 f303 	lsl.w	r3, r2, r3
    3690:	43db      	mvns	r3, r3
    3692:	9a05      	ldr	r2, [sp, #20]
    3694:	4013      	ands	r3, r2
    3696:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3698:	9b03      	ldr	r3, [sp, #12]
    369a:	005b      	lsls	r3, r3, #1
    369c:	3318      	adds	r3, #24
    369e:	9a04      	ldr	r2, [sp, #16]
    36a0:	fa02 f303 	lsl.w	r3, r2, r3
    36a4:	9a05      	ldr	r2, [sp, #20]
    36a6:	4313      	orrs	r3, r2
    36a8:	9305      	str	r3, [sp, #20]
    36aa:	e014      	b.n	36d6 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    36ac:	9b03      	ldr	r3, [sp, #12]
    36ae:	3b04      	subs	r3, #4
    36b0:	005b      	lsls	r3, r3, #1
    36b2:	3310      	adds	r3, #16
    36b4:	2203      	movs	r2, #3
    36b6:	fa02 f303 	lsl.w	r3, r2, r3
    36ba:	43db      	mvns	r3, r3
    36bc:	9a05      	ldr	r2, [sp, #20]
    36be:	4013      	ands	r3, r2
    36c0:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    36c2:	9b03      	ldr	r3, [sp, #12]
    36c4:	3b04      	subs	r3, #4
    36c6:	005b      	lsls	r3, r3, #1
    36c8:	3310      	adds	r3, #16
    36ca:	9a04      	ldr	r2, [sp, #16]
    36cc:	fa02 f303 	lsl.w	r3, r2, r3
    36d0:	9a05      	ldr	r2, [sp, #20]
    36d2:	4313      	orrs	r3, r2
    36d4:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    36d6:	4a05      	ldr	r2, [pc, #20]	; (36ec <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    36d8:	9b05      	ldr	r3, [sp, #20]
    36da:	60d3      	str	r3, [r2, #12]
}
    36dc:	bf00      	nop
    36de:	b006      	add	sp, #24
    36e0:	4770      	bx	lr
    36e2:	bf00      	nop
    36e4:	0000b9e4 	.word	0x0000b9e4
    36e8:	0000b6d4 	.word	0x0000b6d4
    36ec:	40048000 	.word	0x40048000

000036f0 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    36f0:	b084      	sub	sp, #16
    36f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    36f4:	4b06      	ldr	r3, [pc, #24]	; (3710 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    36f6:	685b      	ldr	r3, [r3, #4]
    36f8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    36fa:	9b03      	ldr	r3, [sp, #12]
    36fc:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3700:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3702:	4a03      	ldr	r2, [pc, #12]	; (3710 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3704:	9b03      	ldr	r3, [sp, #12]
    3706:	6053      	str	r3, [r2, #4]
}
    3708:	bf00      	nop
    370a:	b004      	add	sp, #16
    370c:	4770      	bx	lr
    370e:	bf00      	nop
    3710:	40048000 	.word	0x40048000

00003714 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3714:	b084      	sub	sp, #16
    3716:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3718:	9b01      	ldr	r3, [sp, #4]
    371a:	685b      	ldr	r3, [r3, #4]
    371c:	4a0a      	ldr	r2, [pc, #40]	; (3748 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    371e:	5cd3      	ldrb	r3, [r2, r3]
    3720:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3722:	4b0a      	ldr	r3, [pc, #40]	; (374c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3724:	685b      	ldr	r3, [r3, #4]
    3726:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3728:	9b02      	ldr	r3, [sp, #8]
    372a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    372e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3730:	9b03      	ldr	r3, [sp, #12]
    3732:	011b      	lsls	r3, r3, #4
    3734:	9a02      	ldr	r2, [sp, #8]
    3736:	4313      	orrs	r3, r2
    3738:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    373a:	4a04      	ldr	r2, [pc, #16]	; (374c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    373c:	9b02      	ldr	r3, [sp, #8]
    373e:	6053      	str	r3, [r2, #4]
}
    3740:	bf00      	nop
    3742:	b004      	add	sp, #16
    3744:	4770      	bx	lr
    3746:	bf00      	nop
    3748:	0000b9e4 	.word	0x0000b9e4
    374c:	40048000 	.word	0x40048000

00003750 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3750:	b084      	sub	sp, #16
    3752:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3754:	9b01      	ldr	r3, [sp, #4]
    3756:	681a      	ldr	r2, [r3, #0]
    3758:	490f      	ldr	r1, [pc, #60]	; (3798 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    375a:	4613      	mov	r3, r2
    375c:	00db      	lsls	r3, r3, #3
    375e:	4413      	add	r3, r2
    3760:	440b      	add	r3, r1
    3762:	3304      	adds	r3, #4
    3764:	781b      	ldrb	r3, [r3, #0]
    3766:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3768:	4a0c      	ldr	r2, [pc, #48]	; (379c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    376a:	9b03      	ldr	r3, [sp, #12]
    376c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3770:	490a      	ldr	r1, [pc, #40]	; (379c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3772:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3776:	9b03      	ldr	r3, [sp, #12]
    3778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    377c:	4a07      	ldr	r2, [pc, #28]	; (379c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    377e:	9b03      	ldr	r3, [sp, #12]
    3780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3784:	4905      	ldr	r1, [pc, #20]	; (379c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3786:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    378a:	9b03      	ldr	r3, [sp, #12]
    378c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3790:	bf00      	nop
    3792:	b004      	add	sp, #16
    3794:	4770      	bx	lr
    3796:	bf00      	nop
    3798:	0000b6d4 	.word	0x0000b6d4
    379c:	40065000 	.word	0x40065000

000037a0 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    37a0:	b086      	sub	sp, #24
    37a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    37a4:	9b01      	ldr	r3, [sp, #4]
    37a6:	681a      	ldr	r2, [r3, #0]
    37a8:	4912      	ldr	r1, [pc, #72]	; (37f4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    37aa:	4613      	mov	r3, r2
    37ac:	00db      	lsls	r3, r3, #3
    37ae:	4413      	add	r3, r2
    37b0:	440b      	add	r3, r1
    37b2:	3304      	adds	r3, #4
    37b4:	781b      	ldrb	r3, [r3, #0]
    37b6:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    37b8:	9b01      	ldr	r3, [sp, #4]
    37ba:	685b      	ldr	r3, [r3, #4]
    37bc:	4a0e      	ldr	r2, [pc, #56]	; (37f8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    37be:	5cd3      	ldrb	r3, [r2, r3]
    37c0:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    37c2:	4a0e      	ldr	r2, [pc, #56]	; (37fc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    37c4:	9b05      	ldr	r3, [sp, #20]
    37c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    37ca:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    37cc:	9b03      	ldr	r3, [sp, #12]
    37ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    37d2:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    37d4:	9b04      	ldr	r3, [sp, #16]
    37d6:	061b      	lsls	r3, r3, #24
    37d8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    37dc:	9a03      	ldr	r2, [sp, #12]
    37de:	4313      	orrs	r3, r2
    37e0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    37e2:	4906      	ldr	r1, [pc, #24]	; (37fc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    37e4:	9b05      	ldr	r3, [sp, #20]
    37e6:	9a03      	ldr	r2, [sp, #12]
    37e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    37ec:	bf00      	nop
    37ee:	b006      	add	sp, #24
    37f0:	4770      	bx	lr
    37f2:	bf00      	nop
    37f4:	0000b6d4 	.word	0x0000b6d4
    37f8:	0000ba6c 	.word	0x0000ba6c
    37fc:	40065000 	.word	0x40065000

00003800 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3800:	b084      	sub	sp, #16
    3802:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3804:	4b0b      	ldr	r3, [pc, #44]	; (3834 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3806:	7f1b      	ldrb	r3, [r3, #28]
    3808:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    380a:	4b0b      	ldr	r3, [pc, #44]	; (3838 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    380c:	685b      	ldr	r3, [r3, #4]
    380e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3810:	9b02      	ldr	r3, [sp, #8]
    3812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3816:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3818:	9b03      	ldr	r3, [sp, #12]
    381a:	031b      	lsls	r3, r3, #12
    381c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3820:	9a02      	ldr	r2, [sp, #8]
    3822:	4313      	orrs	r3, r2
    3824:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3826:	4a04      	ldr	r2, [pc, #16]	; (3838 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3828:	9b02      	ldr	r3, [sp, #8]
    382a:	6053      	str	r3, [r2, #4]
}
    382c:	bf00      	nop
    382e:	b004      	add	sp, #16
    3830:	4770      	bx	lr
    3832:	bf00      	nop
    3834:	0000b9e4 	.word	0x0000b9e4
    3838:	40048000 	.word	0x40048000

0000383c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    383c:	b084      	sub	sp, #16
    383e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3840:	9b01      	ldr	r3, [sp, #4]
    3842:	685b      	ldr	r3, [r3, #4]
    3844:	4a0b      	ldr	r2, [pc, #44]	; (3874 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3846:	5cd3      	ldrb	r3, [r2, r3]
    3848:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    384a:	4b0b      	ldr	r3, [pc, #44]	; (3878 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    384c:	685b      	ldr	r3, [r3, #4]
    384e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3850:	9b02      	ldr	r3, [sp, #8]
    3852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3856:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3858:	9b03      	ldr	r3, [sp, #12]
    385a:	031b      	lsls	r3, r3, #12
    385c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3860:	9a02      	ldr	r2, [sp, #8]
    3862:	4313      	orrs	r3, r2
    3864:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3866:	4a04      	ldr	r2, [pc, #16]	; (3878 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3868:	9b02      	ldr	r3, [sp, #8]
    386a:	6053      	str	r3, [r2, #4]
}
    386c:	bf00      	nop
    386e:	b004      	add	sp, #16
    3870:	4770      	bx	lr
    3872:	bf00      	nop
    3874:	0000b9e4 	.word	0x0000b9e4
    3878:	40048000 	.word	0x40048000

0000387c <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    387c:	b500      	push	{lr}
    387e:	b085      	sub	sp, #20
    3880:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3882:	2300      	movs	r3, #0
    3884:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3888:	9b01      	ldr	r3, [sp, #4]
    388a:	2b00      	cmp	r3, #0
    388c:	d037      	beq.n	38fe <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    388e:	2300      	movs	r3, #0
    3890:	9303      	str	r3, [sp, #12]
    3892:	e02b      	b.n	38ec <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3894:	4b29      	ldr	r3, [pc, #164]	; (393c <DisableSafeClock+0xc0>)
    3896:	6819      	ldr	r1, [r3, #0]
    3898:	9a03      	ldr	r2, [sp, #12]
    389a:	4613      	mov	r3, r2
    389c:	005b      	lsls	r3, r3, #1
    389e:	4413      	add	r3, r2
    38a0:	009b      	lsls	r3, r3, #2
    38a2:	440b      	add	r3, r1
    38a4:	3314      	adds	r3, #20
    38a6:	681b      	ldr	r3, [r3, #0]
    38a8:	2b05      	cmp	r3, #5
    38aa:	d11c      	bne.n	38e6 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    38ac:	2301      	movs	r3, #1
    38ae:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    38b2:	4b22      	ldr	r3, [pc, #136]	; (393c <DisableSafeClock+0xc0>)
    38b4:	6819      	ldr	r1, [r3, #0]
    38b6:	9a03      	ldr	r2, [sp, #12]
    38b8:	4613      	mov	r3, r2
    38ba:	005b      	lsls	r3, r3, #1
    38bc:	4413      	add	r3, r2
    38be:	009b      	lsls	r3, r3, #2
    38c0:	440b      	add	r3, r1
    38c2:	3318      	adds	r3, #24
    38c4:	881b      	ldrh	r3, [r3, #0]
    38c6:	2b00      	cmp	r3, #0
    38c8:	d118      	bne.n	38fc <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    38ca:	4b1d      	ldr	r3, [pc, #116]	; (3940 <DisableSafeClock+0xc4>)
    38cc:	791b      	ldrb	r3, [r3, #4]
    38ce:	4619      	mov	r1, r3
    38d0:	4a1c      	ldr	r2, [pc, #112]	; (3944 <DisableSafeClock+0xc8>)
    38d2:	460b      	mov	r3, r1
    38d4:	005b      	lsls	r3, r3, #1
    38d6:	440b      	add	r3, r1
    38d8:	009b      	lsls	r3, r3, #2
    38da:	4413      	add	r3, r2
    38dc:	3308      	adds	r3, #8
    38de:	681b      	ldr	r3, [r3, #0]
    38e0:	2005      	movs	r0, #5
    38e2:	4798      	blx	r3
                }
                break;
    38e4:	e00a      	b.n	38fc <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    38e6:	9b03      	ldr	r3, [sp, #12]
    38e8:	3301      	adds	r3, #1
    38ea:	9303      	str	r3, [sp, #12]
    38ec:	4b13      	ldr	r3, [pc, #76]	; (393c <DisableSafeClock+0xc0>)
    38ee:	681b      	ldr	r3, [r3, #0]
    38f0:	7a1b      	ldrb	r3, [r3, #8]
    38f2:	461a      	mov	r2, r3
    38f4:	9b03      	ldr	r3, [sp, #12]
    38f6:	4293      	cmp	r3, r2
    38f8:	d3cc      	bcc.n	3894 <DisableSafeClock+0x18>
    38fa:	e000      	b.n	38fe <DisableSafeClock+0x82>
                break;
    38fc:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    38fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3902:	f083 0301 	eor.w	r3, r3, #1
    3906:	b2db      	uxtb	r3, r3
    3908:	2b00      	cmp	r3, #0
    390a:	d013      	beq.n	3934 <DisableSafeClock+0xb8>
    390c:	4b0e      	ldr	r3, [pc, #56]	; (3948 <DisableSafeClock+0xcc>)
    390e:	781b      	ldrb	r3, [r3, #0]
    3910:	f083 0301 	eor.w	r3, r3, #1
    3914:	b2db      	uxtb	r3, r3
    3916:	2b00      	cmp	r3, #0
    3918:	d00c      	beq.n	3934 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    391a:	4b09      	ldr	r3, [pc, #36]	; (3940 <DisableSafeClock+0xc4>)
    391c:	791b      	ldrb	r3, [r3, #4]
    391e:	4619      	mov	r1, r3
    3920:	4a08      	ldr	r2, [pc, #32]	; (3944 <DisableSafeClock+0xc8>)
    3922:	460b      	mov	r3, r1
    3924:	005b      	lsls	r3, r3, #1
    3926:	440b      	add	r3, r1
    3928:	009b      	lsls	r3, r3, #2
    392a:	4413      	add	r3, r2
    392c:	3308      	adds	r3, #8
    392e:	681b      	ldr	r3, [r3, #0]
    3930:	2005      	movs	r0, #5
    3932:	4798      	blx	r3
    }
}
    3934:	bf00      	nop
    3936:	b005      	add	sp, #20
    3938:	f85d fb04 	ldr.w	pc, [sp], #4
    393c:	1fff8ba8 	.word	0x1fff8ba8
    3940:	0000b664 	.word	0x0000b664
    3944:	0000bc94 	.word	0x0000bc94
    3948:	1fff8b18 	.word	0x1fff8b18

0000394c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    394c:	4b06      	ldr	r3, [pc, #24]	; (3968 <SetFircToResetValue_TrustedCall+0x1c>)
    394e:	2200      	movs	r2, #0
    3950:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3954:	4b04      	ldr	r3, [pc, #16]	; (3968 <SetFircToResetValue_TrustedCall+0x1c>)
    3956:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    395a:	4a03      	ldr	r2, [pc, #12]	; (3968 <SetFircToResetValue_TrustedCall+0x1c>)
    395c:	f043 0301 	orr.w	r3, r3, #1
    3960:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3964:	bf00      	nop
    3966:	4770      	bx	lr
    3968:	40064000 	.word	0x40064000

0000396c <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    396c:	b084      	sub	sp, #16
    396e:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3970:	2303      	movs	r3, #3
    3972:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3974:	2300      	movs	r3, #0
    3976:	9302      	str	r3, [sp, #8]
    3978:	e028      	b.n	39cc <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    397a:	9b01      	ldr	r3, [sp, #4]
    397c:	9a02      	ldr	r2, [sp, #8]
    397e:	320d      	adds	r2, #13
    3980:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3984:	2b28      	cmp	r3, #40	; 0x28
    3986:	d10b      	bne.n	39a0 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3988:	9a01      	ldr	r2, [sp, #4]
    398a:	9b02      	ldr	r3, [sp, #8]
    398c:	330d      	adds	r3, #13
    398e:	00db      	lsls	r3, r3, #3
    3990:	4413      	add	r3, r2
    3992:	685b      	ldr	r3, [r3, #4]
    3994:	4a2b      	ldr	r2, [pc, #172]	; (3a44 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3996:	5cd3      	ldrb	r3, [r2, r3]
    3998:	011b      	lsls	r3, r3, #4
    399a:	9a03      	ldr	r2, [sp, #12]
    399c:	4313      	orrs	r3, r2
    399e:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    39a0:	9b01      	ldr	r3, [sp, #4]
    39a2:	9a02      	ldr	r2, [sp, #8]
    39a4:	320d      	adds	r2, #13
    39a6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    39aa:	2b29      	cmp	r3, #41	; 0x29
    39ac:	d10b      	bne.n	39c6 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    39ae:	9a01      	ldr	r2, [sp, #4]
    39b0:	9b02      	ldr	r3, [sp, #8]
    39b2:	330d      	adds	r3, #13
    39b4:	00db      	lsls	r3, r3, #3
    39b6:	4413      	add	r3, r2
    39b8:	685b      	ldr	r3, [r3, #4]
    39ba:	4a23      	ldr	r2, [pc, #140]	; (3a48 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    39bc:	5cd3      	ldrb	r3, [r2, r3]
    39be:	009b      	lsls	r3, r3, #2
    39c0:	9a03      	ldr	r2, [sp, #12]
    39c2:	4313      	orrs	r3, r2
    39c4:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    39c6:	9b02      	ldr	r3, [sp, #8]
    39c8:	3301      	adds	r3, #1
    39ca:	9302      	str	r3, [sp, #8]
    39cc:	9b01      	ldr	r3, [sp, #4]
    39ce:	7adb      	ldrb	r3, [r3, #11]
    39d0:	461a      	mov	r2, r3
    39d2:	9b02      	ldr	r3, [sp, #8]
    39d4:	4293      	cmp	r3, r2
    39d6:	d3d0      	bcc.n	397a <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    39d8:	2300      	movs	r3, #0
    39da:	9302      	str	r3, [sp, #8]
    39dc:	e026      	b.n	3a2c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    39de:	9a01      	ldr	r2, [sp, #4]
    39e0:	9b02      	ldr	r3, [sp, #8]
    39e2:	334e      	adds	r3, #78	; 0x4e
    39e4:	00db      	lsls	r3, r3, #3
    39e6:	4413      	add	r3, r2
    39e8:	685b      	ldr	r3, [r3, #4]
    39ea:	2b12      	cmp	r3, #18
    39ec:	d109      	bne.n	3a02 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    39ee:	9a01      	ldr	r2, [sp, #4]
    39f0:	9b02      	ldr	r3, [sp, #8]
    39f2:	334e      	adds	r3, #78	; 0x4e
    39f4:	00db      	lsls	r3, r3, #3
    39f6:	4413      	add	r3, r2
    39f8:	891b      	ldrh	r3, [r3, #8]
    39fa:	005b      	lsls	r3, r3, #1
    39fc:	9a03      	ldr	r2, [sp, #12]
    39fe:	4313      	orrs	r3, r2
    3a00:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    3a02:	9a01      	ldr	r2, [sp, #4]
    3a04:	9b02      	ldr	r3, [sp, #8]
    3a06:	334e      	adds	r3, #78	; 0x4e
    3a08:	00db      	lsls	r3, r3, #3
    3a0a:	4413      	add	r3, r2
    3a0c:	685b      	ldr	r3, [r3, #4]
    3a0e:	2b13      	cmp	r3, #19
    3a10:	d109      	bne.n	3a26 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3a12:	9a01      	ldr	r2, [sp, #4]
    3a14:	9b02      	ldr	r3, [sp, #8]
    3a16:	334e      	adds	r3, #78	; 0x4e
    3a18:	00db      	lsls	r3, r3, #3
    3a1a:	4413      	add	r3, r2
    3a1c:	891b      	ldrh	r3, [r3, #8]
    3a1e:	461a      	mov	r2, r3
    3a20:	9b03      	ldr	r3, [sp, #12]
    3a22:	4313      	orrs	r3, r2
    3a24:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3a26:	9b02      	ldr	r3, [sp, #8]
    3a28:	3301      	adds	r3, #1
    3a2a:	9302      	str	r3, [sp, #8]
    3a2c:	9b01      	ldr	r3, [sp, #4]
    3a2e:	7c1b      	ldrb	r3, [r3, #16]
    3a30:	461a      	mov	r2, r3
    3a32:	9b02      	ldr	r3, [sp, #8]
    3a34:	4293      	cmp	r3, r2
    3a36:	d3d2      	bcc.n	39de <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    3a38:	4a04      	ldr	r2, [pc, #16]	; (3a4c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    3a3a:	9b03      	ldr	r3, [sp, #12]
    3a3c:	6113      	str	r3, [r2, #16]
}
    3a3e:	bf00      	nop
    3a40:	b004      	add	sp, #16
    3a42:	4770      	bx	lr
    3a44:	0000b9e4 	.word	0x0000b9e4
    3a48:	0000ba9c 	.word	0x0000ba9c
    3a4c:	40048000 	.word	0x40048000

00003a50 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    3a50:	b500      	push	{lr}
    3a52:	b089      	sub	sp, #36	; 0x24
    3a54:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3a56:	2300      	movs	r3, #0
    3a58:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    3a5c:	4a21      	ldr	r2, [pc, #132]	; (3ae4 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    3a5e:	9b01      	ldr	r3, [sp, #4]
    3a60:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    3a62:	4b21      	ldr	r3, [pc, #132]	; (3ae8 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3a64:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3a68:	f003 0301 	and.w	r3, r3, #1
    3a6c:	2b00      	cmp	r3, #0
    3a6e:	d12e      	bne.n	3ace <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    3a70:	4b1e      	ldr	r3, [pc, #120]	; (3aec <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3a72:	2200      	movs	r2, #0
    3a74:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    3a76:	f7ff ff69 	bl	394c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a7a:	aa03      	add	r2, sp, #12
    3a7c:	a904      	add	r1, sp, #16
    3a7e:	a805      	add	r0, sp, #20
    3a80:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a84:	f7fe f8ae 	bl	1be4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3a88:	4b17      	ldr	r3, [pc, #92]	; (3ae8 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3a8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3a8e:	0e1b      	lsrs	r3, r3, #24
    3a90:	f003 0301 	and.w	r3, r3, #1
    3a94:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a96:	9a03      	ldr	r2, [sp, #12]
    3a98:	a904      	add	r1, sp, #16
    3a9a:	ab05      	add	r3, sp, #20
    3a9c:	4618      	mov	r0, r3
    3a9e:	f7fe f8bb 	bl	1c18 <Clock_Ip_TimeoutExpired>
    3aa2:	4603      	mov	r3, r0
    3aa4:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    3aa8:	9b06      	ldr	r3, [sp, #24]
    3aaa:	2b00      	cmp	r3, #0
    3aac:	d106      	bne.n	3abc <Clock_Ip_SpecificPlatformInitClock+0x6c>
    3aae:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ab2:	f083 0301 	eor.w	r3, r3, #1
    3ab6:	b2db      	uxtb	r3, r3
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d1e5      	bne.n	3a88 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    3abc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	d007      	beq.n	3ad4 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3ac4:	2105      	movs	r1, #5
    3ac6:	2001      	movs	r0, #1
    3ac8:	f7fe f87c 	bl	1bc4 <Clock_Ip_ReportClockErrors>
    3acc:	e002      	b.n	3ad4 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    3ace:	4b07      	ldr	r3, [pc, #28]	; (3aec <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3ad0:	2201      	movs	r2, #1
    3ad2:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    3ad4:	9801      	ldr	r0, [sp, #4]
    3ad6:	f7ff ff49 	bl	396c <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    3ada:	bf00      	nop
    3adc:	b009      	add	sp, #36	; 0x24
    3ade:	f85d fb04 	ldr.w	pc, [sp], #4
    3ae2:	bf00      	nop
    3ae4:	1fff8ba8 	.word	0x1fff8ba8
    3ae8:	40064000 	.word	0x40064000
    3aec:	1fff8b18 	.word	0x1fff8b18

00003af0 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    3af0:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    3af2:	2300      	movs	r3, #0
    3af4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3af6:	4b29      	ldr	r3, [pc, #164]	; (3b9c <getFircConfig+0xac>)
    3af8:	681b      	ldr	r3, [r3, #0]
    3afa:	2b00      	cmp	r3, #0
    3afc:	d024      	beq.n	3b48 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3afe:	2300      	movs	r3, #0
    3b00:	9301      	str	r3, [sp, #4]
    3b02:	e01a      	b.n	3b3a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3b04:	4b25      	ldr	r3, [pc, #148]	; (3b9c <getFircConfig+0xac>)
    3b06:	6819      	ldr	r1, [r3, #0]
    3b08:	9a01      	ldr	r2, [sp, #4]
    3b0a:	4613      	mov	r3, r2
    3b0c:	005b      	lsls	r3, r3, #1
    3b0e:	4413      	add	r3, r2
    3b10:	009b      	lsls	r3, r3, #2
    3b12:	440b      	add	r3, r1
    3b14:	3314      	adds	r3, #20
    3b16:	681b      	ldr	r3, [r3, #0]
    3b18:	2b05      	cmp	r3, #5
    3b1a:	d10b      	bne.n	3b34 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    3b1c:	4b1f      	ldr	r3, [pc, #124]	; (3b9c <getFircConfig+0xac>)
    3b1e:	6819      	ldr	r1, [r3, #0]
    3b20:	9a01      	ldr	r2, [sp, #4]
    3b22:	4613      	mov	r3, r2
    3b24:	005b      	lsls	r3, r3, #1
    3b26:	4413      	add	r3, r2
    3b28:	009b      	lsls	r3, r3, #2
    3b2a:	3310      	adds	r3, #16
    3b2c:	440b      	add	r3, r1
    3b2e:	3304      	adds	r3, #4
    3b30:	9300      	str	r3, [sp, #0]
                break;
    3b32:	e009      	b.n	3b48 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3b34:	9b01      	ldr	r3, [sp, #4]
    3b36:	3301      	adds	r3, #1
    3b38:	9301      	str	r3, [sp, #4]
    3b3a:	4b18      	ldr	r3, [pc, #96]	; (3b9c <getFircConfig+0xac>)
    3b3c:	681b      	ldr	r3, [r3, #0]
    3b3e:	7a1b      	ldrb	r3, [r3, #8]
    3b40:	461a      	mov	r2, r3
    3b42:	9b01      	ldr	r3, [sp, #4]
    3b44:	4293      	cmp	r3, r2
    3b46:	d3dd      	bcc.n	3b04 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3b48:	9b00      	ldr	r3, [sp, #0]
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d121      	bne.n	3b92 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    3b4e:	4b14      	ldr	r3, [pc, #80]	; (3ba0 <getFircConfig+0xb0>)
    3b50:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    3b52:	4b13      	ldr	r3, [pc, #76]	; (3ba0 <getFircConfig+0xb0>)
    3b54:	2205      	movs	r2, #5
    3b56:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    3b58:	4b12      	ldr	r3, [pc, #72]	; (3ba4 <getFircConfig+0xb4>)
    3b5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b5e:	b29b      	uxth	r3, r3
    3b60:	f003 0301 	and.w	r3, r3, #1
    3b64:	b29a      	uxth	r2, r3
    3b66:	4b0e      	ldr	r3, [pc, #56]	; (3ba0 <getFircConfig+0xb0>)
    3b68:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    3b6a:	4b0e      	ldr	r3, [pc, #56]	; (3ba4 <getFircConfig+0xb4>)
    3b6c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3b70:	b2db      	uxtb	r3, r3
    3b72:	f003 0303 	and.w	r3, r3, #3
    3b76:	b2da      	uxtb	r2, r3
    3b78:	4b09      	ldr	r3, [pc, #36]	; (3ba0 <getFircConfig+0xb0>)
    3b7a:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    3b7c:	4b09      	ldr	r3, [pc, #36]	; (3ba4 <getFircConfig+0xb4>)
    3b7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b82:	b2db      	uxtb	r3, r3
    3b84:	10db      	asrs	r3, r3, #3
    3b86:	b2db      	uxtb	r3, r3
    3b88:	f003 0301 	and.w	r3, r3, #1
    3b8c:	b2da      	uxtb	r2, r3
    3b8e:	4b04      	ldr	r3, [pc, #16]	; (3ba0 <getFircConfig+0xb0>)
    3b90:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    3b92:	9b00      	ldr	r3, [sp, #0]
}
    3b94:	4618      	mov	r0, r3
    3b96:	b002      	add	sp, #8
    3b98:	4770      	bx	lr
    3b9a:	bf00      	nop
    3b9c:	1fff8ba8 	.word	0x1fff8ba8
    3ba0:	1fff8c14 	.word	0x1fff8c14
    3ba4:	40064000 	.word	0x40064000

00003ba8 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    3ba8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    3baa:	2300      	movs	r3, #0
    3bac:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3bae:	4b20      	ldr	r3, [pc, #128]	; (3c30 <getSoscConfig+0x88>)
    3bb0:	681b      	ldr	r3, [r3, #0]
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d024      	beq.n	3c00 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3bb6:	2300      	movs	r3, #0
    3bb8:	9301      	str	r3, [sp, #4]
    3bba:	e01a      	b.n	3bf2 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    3bbc:	4b1c      	ldr	r3, [pc, #112]	; (3c30 <getSoscConfig+0x88>)
    3bbe:	6819      	ldr	r1, [r3, #0]
    3bc0:	9a01      	ldr	r2, [sp, #4]
    3bc2:	4613      	mov	r3, r2
    3bc4:	009b      	lsls	r3, r3, #2
    3bc6:	4413      	add	r3, r2
    3bc8:	009b      	lsls	r3, r3, #2
    3bca:	440b      	add	r3, r1
    3bcc:	332c      	adds	r3, #44	; 0x2c
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	2b08      	cmp	r3, #8
    3bd2:	d10b      	bne.n	3bec <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    3bd4:	4b16      	ldr	r3, [pc, #88]	; (3c30 <getSoscConfig+0x88>)
    3bd6:	6819      	ldr	r1, [r3, #0]
    3bd8:	9a01      	ldr	r2, [sp, #4]
    3bda:	4613      	mov	r3, r2
    3bdc:	009b      	lsls	r3, r3, #2
    3bde:	4413      	add	r3, r2
    3be0:	009b      	lsls	r3, r3, #2
    3be2:	3328      	adds	r3, #40	; 0x28
    3be4:	440b      	add	r3, r1
    3be6:	3304      	adds	r3, #4
    3be8:	9300      	str	r3, [sp, #0]
                break;
    3bea:	e009      	b.n	3c00 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3bec:	9b01      	ldr	r3, [sp, #4]
    3bee:	3301      	adds	r3, #1
    3bf0:	9301      	str	r3, [sp, #4]
    3bf2:	4b0f      	ldr	r3, [pc, #60]	; (3c30 <getSoscConfig+0x88>)
    3bf4:	681b      	ldr	r3, [r3, #0]
    3bf6:	7a5b      	ldrb	r3, [r3, #9]
    3bf8:	461a      	mov	r2, r3
    3bfa:	9b01      	ldr	r3, [sp, #4]
    3bfc:	4293      	cmp	r3, r2
    3bfe:	d3dd      	bcc.n	3bbc <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3c00:	9b00      	ldr	r3, [sp, #0]
    3c02:	2b00      	cmp	r3, #0
    3c04:	d110      	bne.n	3c28 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    3c06:	4b0b      	ldr	r3, [pc, #44]	; (3c34 <getSoscConfig+0x8c>)
    3c08:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    3c0a:	4b0a      	ldr	r3, [pc, #40]	; (3c34 <getSoscConfig+0x8c>)
    3c0c:	2208      	movs	r2, #8
    3c0e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    3c10:	4b09      	ldr	r3, [pc, #36]	; (3c38 <getSoscConfig+0x90>)
    3c12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3c16:	b29b      	uxth	r3, r3
    3c18:	f003 0301 	and.w	r3, r3, #1
    3c1c:	b29a      	uxth	r2, r3
    3c1e:	4b05      	ldr	r3, [pc, #20]	; (3c34 <getSoscConfig+0x8c>)
    3c20:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    3c22:	4b04      	ldr	r3, [pc, #16]	; (3c34 <getSoscConfig+0x8c>)
    3c24:	4a05      	ldr	r2, [pc, #20]	; (3c3c <getSoscConfig+0x94>)
    3c26:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    3c28:	9b00      	ldr	r3, [sp, #0]
}
    3c2a:	4618      	mov	r0, r3
    3c2c:	b002      	add	sp, #8
    3c2e:	4770      	bx	lr
    3c30:	1fff8ba8 	.word	0x1fff8ba8
    3c34:	1fff8c20 	.word	0x1fff8c20
    3c38:	40064000 	.word	0x40064000
    3c3c:	02625a00 	.word	0x02625a00

00003c40 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    3c40:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    3c42:	2300      	movs	r3, #0
    3c44:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3c46:	4b28      	ldr	r3, [pc, #160]	; (3ce8 <getSpllConfig+0xa8>)
    3c48:	681b      	ldr	r3, [r3, #0]
    3c4a:	2b00      	cmp	r3, #0
    3c4c:	d023      	beq.n	3c96 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    3c4e:	2300      	movs	r3, #0
    3c50:	9301      	str	r3, [sp, #4]
    3c52:	e019      	b.n	3c88 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    3c54:	4b24      	ldr	r3, [pc, #144]	; (3ce8 <getSpllConfig+0xa8>)
    3c56:	6819      	ldr	r1, [r3, #0]
    3c58:	9a01      	ldr	r2, [sp, #4]
    3c5a:	4613      	mov	r3, r2
    3c5c:	009b      	lsls	r3, r3, #2
    3c5e:	4413      	add	r3, r2
    3c60:	00db      	lsls	r3, r3, #3
    3c62:	440b      	add	r3, r1
    3c64:	3340      	adds	r3, #64	; 0x40
    3c66:	681b      	ldr	r3, [r3, #0]
    3c68:	2b09      	cmp	r3, #9
    3c6a:	d10a      	bne.n	3c82 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    3c6c:	4b1e      	ldr	r3, [pc, #120]	; (3ce8 <getSpllConfig+0xa8>)
    3c6e:	6819      	ldr	r1, [r3, #0]
    3c70:	9a01      	ldr	r2, [sp, #4]
    3c72:	4613      	mov	r3, r2
    3c74:	009b      	lsls	r3, r3, #2
    3c76:	4413      	add	r3, r2
    3c78:	00db      	lsls	r3, r3, #3
    3c7a:	3340      	adds	r3, #64	; 0x40
    3c7c:	440b      	add	r3, r1
    3c7e:	9300      	str	r3, [sp, #0]
                break;
    3c80:	e009      	b.n	3c96 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    3c82:	9b01      	ldr	r3, [sp, #4]
    3c84:	3301      	adds	r3, #1
    3c86:	9301      	str	r3, [sp, #4]
    3c88:	4b17      	ldr	r3, [pc, #92]	; (3ce8 <getSpllConfig+0xa8>)
    3c8a:	681b      	ldr	r3, [r3, #0]
    3c8c:	7a9b      	ldrb	r3, [r3, #10]
    3c8e:	461a      	mov	r2, r3
    3c90:	9b01      	ldr	r3, [sp, #4]
    3c92:	4293      	cmp	r3, r2
    3c94:	d3de      	bcc.n	3c54 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3c96:	9b00      	ldr	r3, [sp, #0]
    3c98:	2b00      	cmp	r3, #0
    3c9a:	d121      	bne.n	3ce0 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    3c9c:	4b13      	ldr	r3, [pc, #76]	; (3cec <getSpllConfig+0xac>)
    3c9e:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    3ca0:	4b12      	ldr	r3, [pc, #72]	; (3cec <getSpllConfig+0xac>)
    3ca2:	2209      	movs	r2, #9
    3ca4:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    3ca6:	4b12      	ldr	r3, [pc, #72]	; (3cf0 <getSpllConfig+0xb0>)
    3ca8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3cac:	b29b      	uxth	r3, r3
    3cae:	f003 0301 	and.w	r3, r3, #1
    3cb2:	b29a      	uxth	r2, r3
    3cb4:	4b0d      	ldr	r3, [pc, #52]	; (3cec <getSpllConfig+0xac>)
    3cb6:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    3cb8:	4b0d      	ldr	r3, [pc, #52]	; (3cf0 <getSpllConfig+0xb0>)
    3cba:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3cbe:	0a1b      	lsrs	r3, r3, #8
    3cc0:	b2db      	uxtb	r3, r3
    3cc2:	f003 0307 	and.w	r3, r3, #7
    3cc6:	b2da      	uxtb	r2, r3
    3cc8:	4b08      	ldr	r3, [pc, #32]	; (3cec <getSpllConfig+0xac>)
    3cca:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    3ccc:	4b08      	ldr	r3, [pc, #32]	; (3cf0 <getSpllConfig+0xb0>)
    3cce:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3cd2:	0c1b      	lsrs	r3, r3, #16
    3cd4:	b2db      	uxtb	r3, r3
    3cd6:	f003 031f 	and.w	r3, r3, #31
    3cda:	b2da      	uxtb	r2, r3
    3cdc:	4b03      	ldr	r3, [pc, #12]	; (3cec <getSpllConfig+0xac>)
    3cde:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    3ce0:	9b00      	ldr	r3, [sp, #0]
}
    3ce2:	4618      	mov	r0, r3
    3ce4:	b002      	add	sp, #8
    3ce6:	4770      	bx	lr
    3ce8:	1fff8ba8 	.word	0x1fff8ba8
    3cec:	1fff8c34 	.word	0x1fff8c34
    3cf0:	40064000 	.word	0x40064000

00003cf4 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    3cf4:	b086      	sub	sp, #24
    3cf6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    3cf8:	2300      	movs	r3, #0
    3cfa:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    3cfc:	9b01      	ldr	r3, [sp, #4]
    3cfe:	2b1b      	cmp	r3, #27
    3d00:	d00f      	beq.n	3d22 <getSelectorConfig+0x2e>
    3d02:	9b01      	ldr	r3, [sp, #4]
    3d04:	2b1b      	cmp	r3, #27
    3d06:	d80f      	bhi.n	3d28 <getSelectorConfig+0x34>
    3d08:	9b01      	ldr	r3, [sp, #4]
    3d0a:	2b19      	cmp	r3, #25
    3d0c:	d003      	beq.n	3d16 <getSelectorConfig+0x22>
    3d0e:	9b01      	ldr	r3, [sp, #4]
    3d10:	2b1a      	cmp	r3, #26
    3d12:	d003      	beq.n	3d1c <getSelectorConfig+0x28>
    3d14:	e008      	b.n	3d28 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    3d16:	2300      	movs	r3, #0
    3d18:	9304      	str	r3, [sp, #16]
            break;
    3d1a:	e008      	b.n	3d2e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    3d1c:	2301      	movs	r3, #1
    3d1e:	9304      	str	r3, [sp, #16]
            break;
    3d20:	e005      	b.n	3d2e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    3d22:	2302      	movs	r3, #2
    3d24:	9304      	str	r3, [sp, #16]
            break;
    3d26:	e002      	b.n	3d2e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    3d28:	2300      	movs	r3, #0
    3d2a:	9304      	str	r3, [sp, #16]
            break;
    3d2c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3d2e:	4b36      	ldr	r3, [pc, #216]	; (3e08 <getSelectorConfig+0x114>)
    3d30:	681b      	ldr	r3, [r3, #0]
    3d32:	2b00      	cmp	r3, #0
    3d34:	d01d      	beq.n	3d72 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    3d36:	2300      	movs	r3, #0
    3d38:	9303      	str	r3, [sp, #12]
    3d3a:	e013      	b.n	3d64 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    3d3c:	4b32      	ldr	r3, [pc, #200]	; (3e08 <getSelectorConfig+0x114>)
    3d3e:	681b      	ldr	r3, [r3, #0]
    3d40:	9a03      	ldr	r2, [sp, #12]
    3d42:	320d      	adds	r2, #13
    3d44:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3d48:	9a01      	ldr	r2, [sp, #4]
    3d4a:	429a      	cmp	r2, r3
    3d4c:	d107      	bne.n	3d5e <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    3d4e:	4b2e      	ldr	r3, [pc, #184]	; (3e08 <getSelectorConfig+0x114>)
    3d50:	681a      	ldr	r2, [r3, #0]
    3d52:	9b03      	ldr	r3, [sp, #12]
    3d54:	330d      	adds	r3, #13
    3d56:	00db      	lsls	r3, r3, #3
    3d58:	4413      	add	r3, r2
    3d5a:	9305      	str	r3, [sp, #20]
                break;
    3d5c:	e009      	b.n	3d72 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    3d5e:	9b03      	ldr	r3, [sp, #12]
    3d60:	3301      	adds	r3, #1
    3d62:	9303      	str	r3, [sp, #12]
    3d64:	4b28      	ldr	r3, [pc, #160]	; (3e08 <getSelectorConfig+0x114>)
    3d66:	681b      	ldr	r3, [r3, #0]
    3d68:	7adb      	ldrb	r3, [r3, #11]
    3d6a:	461a      	mov	r2, r3
    3d6c:	9b03      	ldr	r3, [sp, #12]
    3d6e:	4293      	cmp	r3, r2
    3d70:	d3e4      	bcc.n	3d3c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3d72:	9b05      	ldr	r3, [sp, #20]
    3d74:	2b00      	cmp	r3, #0
    3d76:	d140      	bne.n	3dfa <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    3d78:	9b04      	ldr	r3, [sp, #16]
    3d7a:	00db      	lsls	r3, r3, #3
    3d7c:	4a23      	ldr	r2, [pc, #140]	; (3e0c <getSelectorConfig+0x118>)
    3d7e:	4413      	add	r3, r2
    3d80:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    3d82:	4922      	ldr	r1, [pc, #136]	; (3e0c <getSelectorConfig+0x118>)
    3d84:	9b04      	ldr	r3, [sp, #16]
    3d86:	9a01      	ldr	r2, [sp, #4]
    3d88:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    3d8c:	9b01      	ldr	r3, [sp, #4]
    3d8e:	2b1b      	cmp	r3, #27
    3d90:	d025      	beq.n	3dde <getSelectorConfig+0xea>
    3d92:	9b01      	ldr	r3, [sp, #4]
    3d94:	2b1b      	cmp	r3, #27
    3d96:	d832      	bhi.n	3dfe <getSelectorConfig+0x10a>
    3d98:	9b01      	ldr	r3, [sp, #4]
    3d9a:	2b19      	cmp	r3, #25
    3d9c:	d003      	beq.n	3da6 <getSelectorConfig+0xb2>
    3d9e:	9b01      	ldr	r3, [sp, #4]
    3da0:	2b1a      	cmp	r3, #26
    3da2:	d00e      	beq.n	3dc2 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3da4:	e02b      	b.n	3dfe <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    3da6:	4b1a      	ldr	r3, [pc, #104]	; (3e10 <getSelectorConfig+0x11c>)
    3da8:	695b      	ldr	r3, [r3, #20]
    3daa:	0e1b      	lsrs	r3, r3, #24
    3dac:	f003 030f 	and.w	r3, r3, #15
    3db0:	4a18      	ldr	r2, [pc, #96]	; (3e14 <getSelectorConfig+0x120>)
    3db2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3db6:	4915      	ldr	r1, [pc, #84]	; (3e0c <getSelectorConfig+0x118>)
    3db8:	9b04      	ldr	r3, [sp, #16]
    3dba:	00db      	lsls	r3, r3, #3
    3dbc:	440b      	add	r3, r1
    3dbe:	605a      	str	r2, [r3, #4]
                break;
    3dc0:	e01e      	b.n	3e00 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    3dc2:	4b13      	ldr	r3, [pc, #76]	; (3e10 <getSelectorConfig+0x11c>)
    3dc4:	699b      	ldr	r3, [r3, #24]
    3dc6:	0e1b      	lsrs	r3, r3, #24
    3dc8:	f003 030f 	and.w	r3, r3, #15
    3dcc:	4a11      	ldr	r2, [pc, #68]	; (3e14 <getSelectorConfig+0x120>)
    3dce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3dd2:	490e      	ldr	r1, [pc, #56]	; (3e0c <getSelectorConfig+0x118>)
    3dd4:	9b04      	ldr	r3, [sp, #16]
    3dd6:	00db      	lsls	r3, r3, #3
    3dd8:	440b      	add	r3, r1
    3dda:	605a      	str	r2, [r3, #4]
                break;
    3ddc:	e010      	b.n	3e00 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    3dde:	4b0c      	ldr	r3, [pc, #48]	; (3e10 <getSelectorConfig+0x11c>)
    3de0:	69db      	ldr	r3, [r3, #28]
    3de2:	0e1b      	lsrs	r3, r3, #24
    3de4:	f003 030f 	and.w	r3, r3, #15
    3de8:	4a0a      	ldr	r2, [pc, #40]	; (3e14 <getSelectorConfig+0x120>)
    3dea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3dee:	4907      	ldr	r1, [pc, #28]	; (3e0c <getSelectorConfig+0x118>)
    3df0:	9b04      	ldr	r3, [sp, #16]
    3df2:	00db      	lsls	r3, r3, #3
    3df4:	440b      	add	r3, r1
    3df6:	605a      	str	r2, [r3, #4]
                break;
    3df8:	e002      	b.n	3e00 <getSelectorConfig+0x10c>
        }
    }
    3dfa:	bf00      	nop
    3dfc:	e000      	b.n	3e00 <getSelectorConfig+0x10c>
                break;
    3dfe:	bf00      	nop

    return ReturnValue;
    3e00:	9b05      	ldr	r3, [sp, #20]
}
    3e02:	4618      	mov	r0, r3
    3e04:	b006      	add	sp, #24
    3e06:	4770      	bx	lr
    3e08:	1fff8ba8 	.word	0x1fff8ba8
    3e0c:	1fff8c5c 	.word	0x1fff8c5c
    3e10:	40064000 	.word	0x40064000
    3e14:	0000bd64 	.word	0x0000bd64

00003e18 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    3e18:	b086      	sub	sp, #24
    3e1a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    3e1c:	2300      	movs	r3, #0
    3e1e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    3e20:	2300      	movs	r3, #0
    3e22:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    3e24:	9b01      	ldr	r3, [sp, #4]
    3e26:	2b1f      	cmp	r3, #31
    3e28:	d00f      	beq.n	3e4a <getCoreDividerConfig+0x32>
    3e2a:	9b01      	ldr	r3, [sp, #4]
    3e2c:	2b1f      	cmp	r3, #31
    3e2e:	d80f      	bhi.n	3e50 <getCoreDividerConfig+0x38>
    3e30:	9b01      	ldr	r3, [sp, #4]
    3e32:	2b1d      	cmp	r3, #29
    3e34:	d003      	beq.n	3e3e <getCoreDividerConfig+0x26>
    3e36:	9b01      	ldr	r3, [sp, #4]
    3e38:	2b1e      	cmp	r3, #30
    3e3a:	d003      	beq.n	3e44 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    3e3c:	e008      	b.n	3e50 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    3e3e:	2300      	movs	r3, #0
    3e40:	9304      	str	r3, [sp, #16]
            break;
    3e42:	e006      	b.n	3e52 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    3e44:	2301      	movs	r3, #1
    3e46:	9304      	str	r3, [sp, #16]
            break;
    3e48:	e003      	b.n	3e52 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    3e4a:	2302      	movs	r3, #2
    3e4c:	9304      	str	r3, [sp, #16]
            break;
    3e4e:	e000      	b.n	3e52 <getCoreDividerConfig+0x3a>
                break;
    3e50:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3e52:	4b41      	ldr	r3, [pc, #260]	; (3f58 <getCoreDividerConfig+0x140>)
    3e54:	681b      	ldr	r3, [r3, #0]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d026      	beq.n	3ea8 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3e5a:	2300      	movs	r3, #0
    3e5c:	9303      	str	r3, [sp, #12]
    3e5e:	e01c      	b.n	3e9a <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    3e60:	4b3d      	ldr	r3, [pc, #244]	; (3f58 <getCoreDividerConfig+0x140>)
    3e62:	6819      	ldr	r1, [r3, #0]
    3e64:	9a03      	ldr	r2, [sp, #12]
    3e66:	4613      	mov	r3, r2
    3e68:	005b      	lsls	r3, r3, #1
    3e6a:	4413      	add	r3, r2
    3e6c:	009b      	lsls	r3, r3, #2
    3e6e:	440b      	add	r3, r1
    3e70:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3e74:	681b      	ldr	r3, [r3, #0]
    3e76:	9a01      	ldr	r2, [sp, #4]
    3e78:	429a      	cmp	r2, r3
    3e7a:	d10b      	bne.n	3e94 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    3e7c:	4b36      	ldr	r3, [pc, #216]	; (3f58 <getCoreDividerConfig+0x140>)
    3e7e:	6819      	ldr	r1, [r3, #0]
    3e80:	9a03      	ldr	r2, [sp, #12]
    3e82:	4613      	mov	r3, r2
    3e84:	005b      	lsls	r3, r3, #1
    3e86:	4413      	add	r3, r2
    3e88:	009b      	lsls	r3, r3, #2
    3e8a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3e8e:	440b      	add	r3, r1
    3e90:	9305      	str	r3, [sp, #20]
                break;
    3e92:	e009      	b.n	3ea8 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3e94:	9b03      	ldr	r3, [sp, #12]
    3e96:	3301      	adds	r3, #1
    3e98:	9303      	str	r3, [sp, #12]
    3e9a:	4b2f      	ldr	r3, [pc, #188]	; (3f58 <getCoreDividerConfig+0x140>)
    3e9c:	681b      	ldr	r3, [r3, #0]
    3e9e:	7b1b      	ldrb	r3, [r3, #12]
    3ea0:	461a      	mov	r2, r3
    3ea2:	9b03      	ldr	r3, [sp, #12]
    3ea4:	4293      	cmp	r3, r2
    3ea6:	d3db      	bcc.n	3e60 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3ea8:	9b05      	ldr	r3, [sp, #20]
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d14d      	bne.n	3f4a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    3eae:	9a04      	ldr	r2, [sp, #16]
    3eb0:	4613      	mov	r3, r2
    3eb2:	005b      	lsls	r3, r3, #1
    3eb4:	4413      	add	r3, r2
    3eb6:	009b      	lsls	r3, r3, #2
    3eb8:	4a28      	ldr	r2, [pc, #160]	; (3f5c <getCoreDividerConfig+0x144>)
    3eba:	4413      	add	r3, r2
    3ebc:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    3ebe:	4927      	ldr	r1, [pc, #156]	; (3f5c <getCoreDividerConfig+0x144>)
    3ec0:	9a04      	ldr	r2, [sp, #16]
    3ec2:	4613      	mov	r3, r2
    3ec4:	005b      	lsls	r3, r3, #1
    3ec6:	4413      	add	r3, r2
    3ec8:	009b      	lsls	r3, r3, #2
    3eca:	440b      	add	r3, r1
    3ecc:	9a01      	ldr	r2, [sp, #4]
    3ece:	601a      	str	r2, [r3, #0]
        switch(Name)
    3ed0:	9b01      	ldr	r3, [sp, #4]
    3ed2:	2b1f      	cmp	r3, #31
    3ed4:	d029      	beq.n	3f2a <getCoreDividerConfig+0x112>
    3ed6:	9b01      	ldr	r3, [sp, #4]
    3ed8:	2b1f      	cmp	r3, #31
    3eda:	d838      	bhi.n	3f4e <getCoreDividerConfig+0x136>
    3edc:	9b01      	ldr	r3, [sp, #4]
    3ede:	2b1d      	cmp	r3, #29
    3ee0:	d003      	beq.n	3eea <getCoreDividerConfig+0xd2>
    3ee2:	9b01      	ldr	r3, [sp, #4]
    3ee4:	2b1e      	cmp	r3, #30
    3ee6:	d010      	beq.n	3f0a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3ee8:	e031      	b.n	3f4e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    3eea:	4b1d      	ldr	r3, [pc, #116]	; (3f60 <getCoreDividerConfig+0x148>)
    3eec:	695b      	ldr	r3, [r3, #20]
    3eee:	0c1b      	lsrs	r3, r3, #16
    3ef0:	f003 030f 	and.w	r3, r3, #15
    3ef4:	1c59      	adds	r1, r3, #1
    3ef6:	4819      	ldr	r0, [pc, #100]	; (3f5c <getCoreDividerConfig+0x144>)
    3ef8:	9a04      	ldr	r2, [sp, #16]
    3efa:	4613      	mov	r3, r2
    3efc:	005b      	lsls	r3, r3, #1
    3efe:	4413      	add	r3, r2
    3f00:	009b      	lsls	r3, r3, #2
    3f02:	4403      	add	r3, r0
    3f04:	3304      	adds	r3, #4
    3f06:	6019      	str	r1, [r3, #0]
                break;
    3f08:	e022      	b.n	3f50 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    3f0a:	4b15      	ldr	r3, [pc, #84]	; (3f60 <getCoreDividerConfig+0x148>)
    3f0c:	699b      	ldr	r3, [r3, #24]
    3f0e:	0c1b      	lsrs	r3, r3, #16
    3f10:	f003 030f 	and.w	r3, r3, #15
    3f14:	1c59      	adds	r1, r3, #1
    3f16:	4811      	ldr	r0, [pc, #68]	; (3f5c <getCoreDividerConfig+0x144>)
    3f18:	9a04      	ldr	r2, [sp, #16]
    3f1a:	4613      	mov	r3, r2
    3f1c:	005b      	lsls	r3, r3, #1
    3f1e:	4413      	add	r3, r2
    3f20:	009b      	lsls	r3, r3, #2
    3f22:	4403      	add	r3, r0
    3f24:	3304      	adds	r3, #4
    3f26:	6019      	str	r1, [r3, #0]
                break;
    3f28:	e012      	b.n	3f50 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    3f2a:	4b0d      	ldr	r3, [pc, #52]	; (3f60 <getCoreDividerConfig+0x148>)
    3f2c:	69db      	ldr	r3, [r3, #28]
    3f2e:	0c1b      	lsrs	r3, r3, #16
    3f30:	f003 030f 	and.w	r3, r3, #15
    3f34:	1c59      	adds	r1, r3, #1
    3f36:	4809      	ldr	r0, [pc, #36]	; (3f5c <getCoreDividerConfig+0x144>)
    3f38:	9a04      	ldr	r2, [sp, #16]
    3f3a:	4613      	mov	r3, r2
    3f3c:	005b      	lsls	r3, r3, #1
    3f3e:	4413      	add	r3, r2
    3f40:	009b      	lsls	r3, r3, #2
    3f42:	4403      	add	r3, r0
    3f44:	3304      	adds	r3, #4
    3f46:	6019      	str	r1, [r3, #0]
                break;
    3f48:	e002      	b.n	3f50 <getCoreDividerConfig+0x138>
        }
    }
    3f4a:	bf00      	nop
    3f4c:	e000      	b.n	3f50 <getCoreDividerConfig+0x138>
                break;
    3f4e:	bf00      	nop

    return ReturnValue;
    3f50:	9b05      	ldr	r3, [sp, #20]
}
    3f52:	4618      	mov	r0, r3
    3f54:	b006      	add	sp, #24
    3f56:	4770      	bx	lr
    3f58:	1fff8ba8 	.word	0x1fff8ba8
    3f5c:	1fff8c74 	.word	0x1fff8c74
    3f60:	40064000 	.word	0x40064000

00003f64 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    3f64:	b086      	sub	sp, #24
    3f66:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    3f68:	2300      	movs	r3, #0
    3f6a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    3f6c:	2300      	movs	r3, #0
    3f6e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    3f70:	9b01      	ldr	r3, [sp, #4]
    3f72:	2b23      	cmp	r3, #35	; 0x23
    3f74:	d00f      	beq.n	3f96 <getBusDividerConfig+0x32>
    3f76:	9b01      	ldr	r3, [sp, #4]
    3f78:	2b23      	cmp	r3, #35	; 0x23
    3f7a:	d80f      	bhi.n	3f9c <getBusDividerConfig+0x38>
    3f7c:	9b01      	ldr	r3, [sp, #4]
    3f7e:	2b21      	cmp	r3, #33	; 0x21
    3f80:	d003      	beq.n	3f8a <getBusDividerConfig+0x26>
    3f82:	9b01      	ldr	r3, [sp, #4]
    3f84:	2b22      	cmp	r3, #34	; 0x22
    3f86:	d003      	beq.n	3f90 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    3f88:	e008      	b.n	3f9c <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    3f8a:	2300      	movs	r3, #0
    3f8c:	9304      	str	r3, [sp, #16]
            break;
    3f8e:	e006      	b.n	3f9e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    3f90:	2301      	movs	r3, #1
    3f92:	9304      	str	r3, [sp, #16]
            break;
    3f94:	e003      	b.n	3f9e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    3f96:	2302      	movs	r3, #2
    3f98:	9304      	str	r3, [sp, #16]
            break;
    3f9a:	e000      	b.n	3f9e <getBusDividerConfig+0x3a>
                break;
    3f9c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3f9e:	4b41      	ldr	r3, [pc, #260]	; (40a4 <getBusDividerConfig+0x140>)
    3fa0:	681b      	ldr	r3, [r3, #0]
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d026      	beq.n	3ff4 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3fa6:	2300      	movs	r3, #0
    3fa8:	9303      	str	r3, [sp, #12]
    3faa:	e01c      	b.n	3fe6 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    3fac:	4b3d      	ldr	r3, [pc, #244]	; (40a4 <getBusDividerConfig+0x140>)
    3fae:	6819      	ldr	r1, [r3, #0]
    3fb0:	9a03      	ldr	r2, [sp, #12]
    3fb2:	4613      	mov	r3, r2
    3fb4:	005b      	lsls	r3, r3, #1
    3fb6:	4413      	add	r3, r2
    3fb8:	009b      	lsls	r3, r3, #2
    3fba:	440b      	add	r3, r1
    3fbc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3fc0:	681b      	ldr	r3, [r3, #0]
    3fc2:	9a01      	ldr	r2, [sp, #4]
    3fc4:	429a      	cmp	r2, r3
    3fc6:	d10b      	bne.n	3fe0 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    3fc8:	4b36      	ldr	r3, [pc, #216]	; (40a4 <getBusDividerConfig+0x140>)
    3fca:	6819      	ldr	r1, [r3, #0]
    3fcc:	9a03      	ldr	r2, [sp, #12]
    3fce:	4613      	mov	r3, r2
    3fd0:	005b      	lsls	r3, r3, #1
    3fd2:	4413      	add	r3, r2
    3fd4:	009b      	lsls	r3, r3, #2
    3fd6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3fda:	440b      	add	r3, r1
    3fdc:	9305      	str	r3, [sp, #20]
                break;
    3fde:	e009      	b.n	3ff4 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3fe0:	9b03      	ldr	r3, [sp, #12]
    3fe2:	3301      	adds	r3, #1
    3fe4:	9303      	str	r3, [sp, #12]
    3fe6:	4b2f      	ldr	r3, [pc, #188]	; (40a4 <getBusDividerConfig+0x140>)
    3fe8:	681b      	ldr	r3, [r3, #0]
    3fea:	7b1b      	ldrb	r3, [r3, #12]
    3fec:	461a      	mov	r2, r3
    3fee:	9b03      	ldr	r3, [sp, #12]
    3ff0:	4293      	cmp	r3, r2
    3ff2:	d3db      	bcc.n	3fac <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3ff4:	9b05      	ldr	r3, [sp, #20]
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d14d      	bne.n	4096 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    3ffa:	9a04      	ldr	r2, [sp, #16]
    3ffc:	4613      	mov	r3, r2
    3ffe:	005b      	lsls	r3, r3, #1
    4000:	4413      	add	r3, r2
    4002:	009b      	lsls	r3, r3, #2
    4004:	4a28      	ldr	r2, [pc, #160]	; (40a8 <getBusDividerConfig+0x144>)
    4006:	4413      	add	r3, r2
    4008:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    400a:	4927      	ldr	r1, [pc, #156]	; (40a8 <getBusDividerConfig+0x144>)
    400c:	9a04      	ldr	r2, [sp, #16]
    400e:	4613      	mov	r3, r2
    4010:	005b      	lsls	r3, r3, #1
    4012:	4413      	add	r3, r2
    4014:	009b      	lsls	r3, r3, #2
    4016:	440b      	add	r3, r1
    4018:	9a01      	ldr	r2, [sp, #4]
    401a:	601a      	str	r2, [r3, #0]
        switch(Name)
    401c:	9b01      	ldr	r3, [sp, #4]
    401e:	2b23      	cmp	r3, #35	; 0x23
    4020:	d029      	beq.n	4076 <getBusDividerConfig+0x112>
    4022:	9b01      	ldr	r3, [sp, #4]
    4024:	2b23      	cmp	r3, #35	; 0x23
    4026:	d838      	bhi.n	409a <getBusDividerConfig+0x136>
    4028:	9b01      	ldr	r3, [sp, #4]
    402a:	2b21      	cmp	r3, #33	; 0x21
    402c:	d003      	beq.n	4036 <getBusDividerConfig+0xd2>
    402e:	9b01      	ldr	r3, [sp, #4]
    4030:	2b22      	cmp	r3, #34	; 0x22
    4032:	d010      	beq.n	4056 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4034:	e031      	b.n	409a <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4036:	4b1d      	ldr	r3, [pc, #116]	; (40ac <getBusDividerConfig+0x148>)
    4038:	695b      	ldr	r3, [r3, #20]
    403a:	091b      	lsrs	r3, r3, #4
    403c:	f003 030f 	and.w	r3, r3, #15
    4040:	1c59      	adds	r1, r3, #1
    4042:	4819      	ldr	r0, [pc, #100]	; (40a8 <getBusDividerConfig+0x144>)
    4044:	9a04      	ldr	r2, [sp, #16]
    4046:	4613      	mov	r3, r2
    4048:	005b      	lsls	r3, r3, #1
    404a:	4413      	add	r3, r2
    404c:	009b      	lsls	r3, r3, #2
    404e:	4403      	add	r3, r0
    4050:	3304      	adds	r3, #4
    4052:	6019      	str	r1, [r3, #0]
                break;
    4054:	e022      	b.n	409c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4056:	4b15      	ldr	r3, [pc, #84]	; (40ac <getBusDividerConfig+0x148>)
    4058:	699b      	ldr	r3, [r3, #24]
    405a:	091b      	lsrs	r3, r3, #4
    405c:	f003 030f 	and.w	r3, r3, #15
    4060:	1c59      	adds	r1, r3, #1
    4062:	4811      	ldr	r0, [pc, #68]	; (40a8 <getBusDividerConfig+0x144>)
    4064:	9a04      	ldr	r2, [sp, #16]
    4066:	4613      	mov	r3, r2
    4068:	005b      	lsls	r3, r3, #1
    406a:	4413      	add	r3, r2
    406c:	009b      	lsls	r3, r3, #2
    406e:	4403      	add	r3, r0
    4070:	3304      	adds	r3, #4
    4072:	6019      	str	r1, [r3, #0]
                break;
    4074:	e012      	b.n	409c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4076:	4b0d      	ldr	r3, [pc, #52]	; (40ac <getBusDividerConfig+0x148>)
    4078:	69db      	ldr	r3, [r3, #28]
    407a:	091b      	lsrs	r3, r3, #4
    407c:	f003 030f 	and.w	r3, r3, #15
    4080:	1c59      	adds	r1, r3, #1
    4082:	4809      	ldr	r0, [pc, #36]	; (40a8 <getBusDividerConfig+0x144>)
    4084:	9a04      	ldr	r2, [sp, #16]
    4086:	4613      	mov	r3, r2
    4088:	005b      	lsls	r3, r3, #1
    408a:	4413      	add	r3, r2
    408c:	009b      	lsls	r3, r3, #2
    408e:	4403      	add	r3, r0
    4090:	3304      	adds	r3, #4
    4092:	6019      	str	r1, [r3, #0]
                break;
    4094:	e002      	b.n	409c <getBusDividerConfig+0x138>
        }
    }
    4096:	bf00      	nop
    4098:	e000      	b.n	409c <getBusDividerConfig+0x138>
                break;
    409a:	bf00      	nop

    return ReturnValue;
    409c:	9b05      	ldr	r3, [sp, #20]
}
    409e:	4618      	mov	r0, r3
    40a0:	b006      	add	sp, #24
    40a2:	4770      	bx	lr
    40a4:	1fff8ba8 	.word	0x1fff8ba8
    40a8:	1fff8c98 	.word	0x1fff8c98
    40ac:	40064000 	.word	0x40064000

000040b0 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    40b0:	b086      	sub	sp, #24
    40b2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    40b4:	2300      	movs	r3, #0
    40b6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    40b8:	2300      	movs	r3, #0
    40ba:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    40bc:	9b01      	ldr	r3, [sp, #4]
    40be:	2b27      	cmp	r3, #39	; 0x27
    40c0:	d00f      	beq.n	40e2 <getSlowDividerConfig+0x32>
    40c2:	9b01      	ldr	r3, [sp, #4]
    40c4:	2b27      	cmp	r3, #39	; 0x27
    40c6:	d80f      	bhi.n	40e8 <getSlowDividerConfig+0x38>
    40c8:	9b01      	ldr	r3, [sp, #4]
    40ca:	2b25      	cmp	r3, #37	; 0x25
    40cc:	d003      	beq.n	40d6 <getSlowDividerConfig+0x26>
    40ce:	9b01      	ldr	r3, [sp, #4]
    40d0:	2b26      	cmp	r3, #38	; 0x26
    40d2:	d003      	beq.n	40dc <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    40d4:	e008      	b.n	40e8 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    40d6:	2300      	movs	r3, #0
    40d8:	9304      	str	r3, [sp, #16]
            break;
    40da:	e006      	b.n	40ea <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    40dc:	2301      	movs	r3, #1
    40de:	9304      	str	r3, [sp, #16]
            break;
    40e0:	e003      	b.n	40ea <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    40e2:	2302      	movs	r3, #2
    40e4:	9304      	str	r3, [sp, #16]
            break;
    40e6:	e000      	b.n	40ea <getSlowDividerConfig+0x3a>
                break;
    40e8:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    40ea:	4b40      	ldr	r3, [pc, #256]	; (41ec <getSlowDividerConfig+0x13c>)
    40ec:	681b      	ldr	r3, [r3, #0]
    40ee:	2b00      	cmp	r3, #0
    40f0:	d026      	beq.n	4140 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    40f2:	2300      	movs	r3, #0
    40f4:	9303      	str	r3, [sp, #12]
    40f6:	e01c      	b.n	4132 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    40f8:	4b3c      	ldr	r3, [pc, #240]	; (41ec <getSlowDividerConfig+0x13c>)
    40fa:	6819      	ldr	r1, [r3, #0]
    40fc:	9a03      	ldr	r2, [sp, #12]
    40fe:	4613      	mov	r3, r2
    4100:	005b      	lsls	r3, r3, #1
    4102:	4413      	add	r3, r2
    4104:	009b      	lsls	r3, r3, #2
    4106:	440b      	add	r3, r1
    4108:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    410c:	681b      	ldr	r3, [r3, #0]
    410e:	9a01      	ldr	r2, [sp, #4]
    4110:	429a      	cmp	r2, r3
    4112:	d10b      	bne.n	412c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4114:	4b35      	ldr	r3, [pc, #212]	; (41ec <getSlowDividerConfig+0x13c>)
    4116:	6819      	ldr	r1, [r3, #0]
    4118:	9a03      	ldr	r2, [sp, #12]
    411a:	4613      	mov	r3, r2
    411c:	005b      	lsls	r3, r3, #1
    411e:	4413      	add	r3, r2
    4120:	009b      	lsls	r3, r3, #2
    4122:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4126:	440b      	add	r3, r1
    4128:	9305      	str	r3, [sp, #20]
                break;
    412a:	e009      	b.n	4140 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    412c:	9b03      	ldr	r3, [sp, #12]
    412e:	3301      	adds	r3, #1
    4130:	9303      	str	r3, [sp, #12]
    4132:	4b2e      	ldr	r3, [pc, #184]	; (41ec <getSlowDividerConfig+0x13c>)
    4134:	681b      	ldr	r3, [r3, #0]
    4136:	7b1b      	ldrb	r3, [r3, #12]
    4138:	461a      	mov	r2, r3
    413a:	9b03      	ldr	r3, [sp, #12]
    413c:	4293      	cmp	r3, r2
    413e:	d3db      	bcc.n	40f8 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4140:	9b05      	ldr	r3, [sp, #20]
    4142:	2b00      	cmp	r3, #0
    4144:	d14a      	bne.n	41dc <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    4146:	9a04      	ldr	r2, [sp, #16]
    4148:	4613      	mov	r3, r2
    414a:	005b      	lsls	r3, r3, #1
    414c:	4413      	add	r3, r2
    414e:	009b      	lsls	r3, r3, #2
    4150:	4a27      	ldr	r2, [pc, #156]	; (41f0 <getSlowDividerConfig+0x140>)
    4152:	4413      	add	r3, r2
    4154:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    4156:	4926      	ldr	r1, [pc, #152]	; (41f0 <getSlowDividerConfig+0x140>)
    4158:	9a04      	ldr	r2, [sp, #16]
    415a:	4613      	mov	r3, r2
    415c:	005b      	lsls	r3, r3, #1
    415e:	4413      	add	r3, r2
    4160:	009b      	lsls	r3, r3, #2
    4162:	440b      	add	r3, r1
    4164:	9a01      	ldr	r2, [sp, #4]
    4166:	601a      	str	r2, [r3, #0]
        switch(Name)
    4168:	9b01      	ldr	r3, [sp, #4]
    416a:	2b27      	cmp	r3, #39	; 0x27
    416c:	d027      	beq.n	41be <getSlowDividerConfig+0x10e>
    416e:	9b01      	ldr	r3, [sp, #4]
    4170:	2b27      	cmp	r3, #39	; 0x27
    4172:	d835      	bhi.n	41e0 <getSlowDividerConfig+0x130>
    4174:	9b01      	ldr	r3, [sp, #4]
    4176:	2b25      	cmp	r3, #37	; 0x25
    4178:	d003      	beq.n	4182 <getSlowDividerConfig+0xd2>
    417a:	9b01      	ldr	r3, [sp, #4]
    417c:	2b26      	cmp	r3, #38	; 0x26
    417e:	d00f      	beq.n	41a0 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4180:	e02e      	b.n	41e0 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    4182:	4b1c      	ldr	r3, [pc, #112]	; (41f4 <getSlowDividerConfig+0x144>)
    4184:	695b      	ldr	r3, [r3, #20]
    4186:	f003 030f 	and.w	r3, r3, #15
    418a:	1c59      	adds	r1, r3, #1
    418c:	4818      	ldr	r0, [pc, #96]	; (41f0 <getSlowDividerConfig+0x140>)
    418e:	9a04      	ldr	r2, [sp, #16]
    4190:	4613      	mov	r3, r2
    4192:	005b      	lsls	r3, r3, #1
    4194:	4413      	add	r3, r2
    4196:	009b      	lsls	r3, r3, #2
    4198:	4403      	add	r3, r0
    419a:	3304      	adds	r3, #4
    419c:	6019      	str	r1, [r3, #0]
                break;
    419e:	e020      	b.n	41e2 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    41a0:	4b14      	ldr	r3, [pc, #80]	; (41f4 <getSlowDividerConfig+0x144>)
    41a2:	699b      	ldr	r3, [r3, #24]
    41a4:	f003 030f 	and.w	r3, r3, #15
    41a8:	1c59      	adds	r1, r3, #1
    41aa:	4811      	ldr	r0, [pc, #68]	; (41f0 <getSlowDividerConfig+0x140>)
    41ac:	9a04      	ldr	r2, [sp, #16]
    41ae:	4613      	mov	r3, r2
    41b0:	005b      	lsls	r3, r3, #1
    41b2:	4413      	add	r3, r2
    41b4:	009b      	lsls	r3, r3, #2
    41b6:	4403      	add	r3, r0
    41b8:	3304      	adds	r3, #4
    41ba:	6019      	str	r1, [r3, #0]
                break;
    41bc:	e011      	b.n	41e2 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    41be:	4b0d      	ldr	r3, [pc, #52]	; (41f4 <getSlowDividerConfig+0x144>)
    41c0:	69db      	ldr	r3, [r3, #28]
    41c2:	f003 030f 	and.w	r3, r3, #15
    41c6:	1c59      	adds	r1, r3, #1
    41c8:	4809      	ldr	r0, [pc, #36]	; (41f0 <getSlowDividerConfig+0x140>)
    41ca:	9a04      	ldr	r2, [sp, #16]
    41cc:	4613      	mov	r3, r2
    41ce:	005b      	lsls	r3, r3, #1
    41d0:	4413      	add	r3, r2
    41d2:	009b      	lsls	r3, r3, #2
    41d4:	4403      	add	r3, r0
    41d6:	3304      	adds	r3, #4
    41d8:	6019      	str	r1, [r3, #0]
                break;
    41da:	e002      	b.n	41e2 <getSlowDividerConfig+0x132>
        }
    }
    41dc:	bf00      	nop
    41de:	e000      	b.n	41e2 <getSlowDividerConfig+0x132>
                break;
    41e0:	bf00      	nop

    return ReturnValue;
    41e2:	9b05      	ldr	r3, [sp, #20]
}
    41e4:	4618      	mov	r0, r3
    41e6:	b006      	add	sp, #24
    41e8:	4770      	bx	lr
    41ea:	bf00      	nop
    41ec:	1fff8ba8 	.word	0x1fff8ba8
    41f0:	1fff8cbc 	.word	0x1fff8cbc
    41f4:	40064000 	.word	0x40064000

000041f8 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    41f8:	b500      	push	{lr}
    41fa:	b083      	sub	sp, #12
    41fc:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    41fe:	4b64      	ldr	r3, [pc, #400]	; (4390 <Clock_Ip_ClockInitializeObjects+0x198>)
    4200:	781b      	ldrb	r3, [r3, #0]
    4202:	f083 0301 	eor.w	r3, r3, #1
    4206:	b2db      	uxtb	r3, r3
    4208:	2b00      	cmp	r3, #0
    420a:	d05b      	beq.n	42c4 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    420c:	4b60      	ldr	r3, [pc, #384]	; (4390 <Clock_Ip_ClockInitializeObjects+0x198>)
    420e:	2201      	movs	r2, #1
    4210:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    4212:	4b60      	ldr	r3, [pc, #384]	; (4394 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4214:	785b      	ldrb	r3, [r3, #1]
    4216:	461a      	mov	r2, r3
    4218:	4613      	mov	r3, r2
    421a:	009b      	lsls	r3, r3, #2
    421c:	4413      	add	r3, r2
    421e:	009b      	lsls	r3, r3, #2
    4220:	4a5d      	ldr	r2, [pc, #372]	; (4398 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    4222:	4413      	add	r3, r2
    4224:	4a5d      	ldr	r2, [pc, #372]	; (439c <Clock_Ip_ClockInitializeObjects+0x1a4>)
    4226:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4228:	4b5d      	ldr	r3, [pc, #372]	; (43a0 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    422a:	785b      	ldrb	r3, [r3, #1]
    422c:	461a      	mov	r2, r3
    422e:	4613      	mov	r3, r2
    4230:	009b      	lsls	r3, r3, #2
    4232:	4413      	add	r3, r2
    4234:	009b      	lsls	r3, r3, #2
    4236:	4a5b      	ldr	r2, [pc, #364]	; (43a4 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    4238:	4413      	add	r3, r2
    423a:	4a5b      	ldr	r2, [pc, #364]	; (43a8 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    423c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    423e:	4b5b      	ldr	r3, [pc, #364]	; (43ac <Clock_Ip_ClockInitializeObjects+0x1b4>)
    4240:	791b      	ldrb	r3, [r3, #4]
    4242:	461a      	mov	r2, r3
    4244:	4613      	mov	r3, r2
    4246:	005b      	lsls	r3, r3, #1
    4248:	4413      	add	r3, r2
    424a:	009b      	lsls	r3, r3, #2
    424c:	4a58      	ldr	r2, [pc, #352]	; (43b0 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    424e:	4413      	add	r3, r2
    4250:	4a58      	ldr	r2, [pc, #352]	; (43b4 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    4252:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    4254:	4b58      	ldr	r3, [pc, #352]	; (43b8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4256:	795b      	ldrb	r3, [r3, #5]
    4258:	00db      	lsls	r3, r3, #3
    425a:	4a58      	ldr	r2, [pc, #352]	; (43bc <Clock_Ip_ClockInitializeObjects+0x1c4>)
    425c:	4413      	add	r3, r2
    425e:	4a58      	ldr	r2, [pc, #352]	; (43c0 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    4260:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    4262:	4b55      	ldr	r3, [pc, #340]	; (43b8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4264:	79db      	ldrb	r3, [r3, #7]
    4266:	00db      	lsls	r3, r3, #3
    4268:	4a54      	ldr	r2, [pc, #336]	; (43bc <Clock_Ip_ClockInitializeObjects+0x1c4>)
    426a:	4413      	add	r3, r2
    426c:	4a55      	ldr	r2, [pc, #340]	; (43c4 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    426e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    4270:	4b55      	ldr	r3, [pc, #340]	; (43c8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4272:	799b      	ldrb	r3, [r3, #6]
    4274:	009b      	lsls	r3, r3, #2
    4276:	4a55      	ldr	r2, [pc, #340]	; (43cc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4278:	4413      	add	r3, r2
    427a:	4a55      	ldr	r2, [pc, #340]	; (43d0 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    427c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    427e:	4b52      	ldr	r3, [pc, #328]	; (43c8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4280:	7a1b      	ldrb	r3, [r3, #8]
    4282:	009b      	lsls	r3, r3, #2
    4284:	4a51      	ldr	r2, [pc, #324]	; (43cc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4286:	4413      	add	r3, r2
    4288:	4a52      	ldr	r2, [pc, #328]	; (43d4 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    428a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    428c:	4b4e      	ldr	r3, [pc, #312]	; (43c8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    428e:	7a5b      	ldrb	r3, [r3, #9]
    4290:	009b      	lsls	r3, r3, #2
    4292:	4a4e      	ldr	r2, [pc, #312]	; (43cc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4294:	4413      	add	r3, r2
    4296:	4a50      	ldr	r2, [pc, #320]	; (43d8 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4298:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    429a:	4b4b      	ldr	r3, [pc, #300]	; (43c8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    429c:	7adb      	ldrb	r3, [r3, #11]
    429e:	009b      	lsls	r3, r3, #2
    42a0:	4a4a      	ldr	r2, [pc, #296]	; (43cc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    42a2:	4413      	add	r3, r2
    42a4:	4a4d      	ldr	r2, [pc, #308]	; (43dc <Clock_Ip_ClockInitializeObjects+0x1e4>)
    42a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    42a8:	4b47      	ldr	r3, [pc, #284]	; (43c8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    42aa:	7b1b      	ldrb	r3, [r3, #12]
    42ac:	009b      	lsls	r3, r3, #2
    42ae:	4a47      	ldr	r2, [pc, #284]	; (43cc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    42b0:	4413      	add	r3, r2
    42b2:	4a4b      	ldr	r2, [pc, #300]	; (43e0 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    42b4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    42b6:	4b44      	ldr	r3, [pc, #272]	; (43c8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    42b8:	7b9b      	ldrb	r3, [r3, #14]
    42ba:	009b      	lsls	r3, r3, #2
    42bc:	4a43      	ldr	r2, [pc, #268]	; (43cc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    42be:	4413      	add	r3, r2
    42c0:	4a48      	ldr	r2, [pc, #288]	; (43e4 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    42c2:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    42c4:	4b48      	ldr	r3, [pc, #288]	; (43e8 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    42c6:	781b      	ldrb	r3, [r3, #0]
    42c8:	2b00      	cmp	r3, #0
    42ca:	d002      	beq.n	42d2 <Clock_Ip_ClockInitializeObjects+0xda>
    42cc:	9b01      	ldr	r3, [sp, #4]
    42ce:	2b00      	cmp	r3, #0
    42d0:	d003      	beq.n	42da <Clock_Ip_ClockInitializeObjects+0xe2>
    42d2:	4b46      	ldr	r3, [pc, #280]	; (43ec <Clock_Ip_ClockInitializeObjects+0x1f4>)
    42d4:	781b      	ldrb	r3, [r3, #0]
    42d6:	2b00      	cmp	r3, #0
    42d8:	d056      	beq.n	4388 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    42da:	f7ff fc09 	bl	3af0 <getFircConfig>
    42de:	4603      	mov	r3, r0
    42e0:	4a43      	ldr	r2, [pc, #268]	; (43f0 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    42e2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    42e4:	f7ff fc60 	bl	3ba8 <getSoscConfig>
    42e8:	4603      	mov	r3, r0
    42ea:	4a42      	ldr	r2, [pc, #264]	; (43f4 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    42ec:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    42ee:	f7ff fca7 	bl	3c40 <getSpllConfig>
    42f2:	4603      	mov	r3, r0
    42f4:	4a40      	ldr	r2, [pc, #256]	; (43f8 <Clock_Ip_ClockInitializeObjects+0x200>)
    42f6:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    42f8:	2019      	movs	r0, #25
    42fa:	f7ff fcfb 	bl	3cf4 <getSelectorConfig>
    42fe:	4603      	mov	r3, r0
    4300:	4a3e      	ldr	r2, [pc, #248]	; (43fc <Clock_Ip_ClockInitializeObjects+0x204>)
    4302:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    4304:	201a      	movs	r0, #26
    4306:	f7ff fcf5 	bl	3cf4 <getSelectorConfig>
    430a:	4603      	mov	r3, r0
    430c:	4a3c      	ldr	r2, [pc, #240]	; (4400 <Clock_Ip_ClockInitializeObjects+0x208>)
    430e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    4310:	201b      	movs	r0, #27
    4312:	f7ff fcef 	bl	3cf4 <getSelectorConfig>
    4316:	4603      	mov	r3, r0
    4318:	4a3a      	ldr	r2, [pc, #232]	; (4404 <Clock_Ip_ClockInitializeObjects+0x20c>)
    431a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    431c:	201d      	movs	r0, #29
    431e:	f7ff fd7b 	bl	3e18 <getCoreDividerConfig>
    4322:	4603      	mov	r3, r0
    4324:	4a38      	ldr	r2, [pc, #224]	; (4408 <Clock_Ip_ClockInitializeObjects+0x210>)
    4326:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4328:	201e      	movs	r0, #30
    432a:	f7ff fd75 	bl	3e18 <getCoreDividerConfig>
    432e:	4603      	mov	r3, r0
    4330:	4a36      	ldr	r2, [pc, #216]	; (440c <Clock_Ip_ClockInitializeObjects+0x214>)
    4332:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    4334:	201f      	movs	r0, #31
    4336:	f7ff fd6f 	bl	3e18 <getCoreDividerConfig>
    433a:	4603      	mov	r3, r0
    433c:	4a34      	ldr	r2, [pc, #208]	; (4410 <Clock_Ip_ClockInitializeObjects+0x218>)
    433e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    4340:	2021      	movs	r0, #33	; 0x21
    4342:	f7ff fe0f 	bl	3f64 <getBusDividerConfig>
    4346:	4603      	mov	r3, r0
    4348:	4a32      	ldr	r2, [pc, #200]	; (4414 <Clock_Ip_ClockInitializeObjects+0x21c>)
    434a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    434c:	2022      	movs	r0, #34	; 0x22
    434e:	f7ff fe09 	bl	3f64 <getBusDividerConfig>
    4352:	4603      	mov	r3, r0
    4354:	4a30      	ldr	r2, [pc, #192]	; (4418 <Clock_Ip_ClockInitializeObjects+0x220>)
    4356:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    4358:	2023      	movs	r0, #35	; 0x23
    435a:	f7ff fe03 	bl	3f64 <getBusDividerConfig>
    435e:	4603      	mov	r3, r0
    4360:	4a2e      	ldr	r2, [pc, #184]	; (441c <Clock_Ip_ClockInitializeObjects+0x224>)
    4362:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    4364:	2025      	movs	r0, #37	; 0x25
    4366:	f7ff fea3 	bl	40b0 <getSlowDividerConfig>
    436a:	4603      	mov	r3, r0
    436c:	4a2c      	ldr	r2, [pc, #176]	; (4420 <Clock_Ip_ClockInitializeObjects+0x228>)
    436e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    4370:	2026      	movs	r0, #38	; 0x26
    4372:	f7ff fe9d 	bl	40b0 <getSlowDividerConfig>
    4376:	4603      	mov	r3, r0
    4378:	4a2a      	ldr	r2, [pc, #168]	; (4424 <Clock_Ip_ClockInitializeObjects+0x22c>)
    437a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    437c:	2027      	movs	r0, #39	; 0x27
    437e:	f7ff fe97 	bl	40b0 <getSlowDividerConfig>
    4382:	4603      	mov	r3, r0
    4384:	4a28      	ldr	r2, [pc, #160]	; (4428 <Clock_Ip_ClockInitializeObjects+0x230>)
    4386:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4388:	bf00      	nop
    438a:	b003      	add	sp, #12
    438c:	f85d fb04 	ldr.w	pc, [sp], #4
    4390:	1fff8ce0 	.word	0x1fff8ce0
    4394:	0000b694 	.word	0x0000b694
    4398:	0000bce0 	.word	0x0000bce0
    439c:	1fff8bac 	.word	0x1fff8bac
    43a0:	0000b654 	.word	0x0000b654
    43a4:	0000bc28 	.word	0x0000bc28
    43a8:	1fff8bb0 	.word	0x1fff8bb0
    43ac:	0000b664 	.word	0x0000b664
    43b0:	0000bc94 	.word	0x0000bc94
    43b4:	1fff8bb4 	.word	0x1fff8bb4
    43b8:	0000b6a4 	.word	0x0000b6a4
    43bc:	0000bd0c 	.word	0x0000bd0c
    43c0:	1fff8bb8 	.word	0x1fff8bb8
    43c4:	1fff8bf4 	.word	0x1fff8bf4
    43c8:	0000b634 	.word	0x0000b634
    43cc:	0000bbe4 	.word	0x0000bbe4
    43d0:	1fff8bbc 	.word	0x1fff8bbc
    43d4:	1fff8bf8 	.word	0x1fff8bf8
    43d8:	1fff8bc0 	.word	0x1fff8bc0
    43dc:	1fff8bfc 	.word	0x1fff8bfc
    43e0:	1fff8bc4 	.word	0x1fff8bc4
    43e4:	1fff8c00 	.word	0x1fff8c00
    43e8:	1fff8b19 	.word	0x1fff8b19
    43ec:	1fff8b10 	.word	0x1fff8b10
    43f0:	1fff8bc8 	.word	0x1fff8bc8
    43f4:	1fff8bcc 	.word	0x1fff8bcc
    43f8:	1fff8bd0 	.word	0x1fff8bd0
    43fc:	1fff8bd4 	.word	0x1fff8bd4
    4400:	1fff8bd8 	.word	0x1fff8bd8
    4404:	1fff8c04 	.word	0x1fff8c04
    4408:	1fff8bdc 	.word	0x1fff8bdc
    440c:	1fff8be0 	.word	0x1fff8be0
    4410:	1fff8c08 	.word	0x1fff8c08
    4414:	1fff8be4 	.word	0x1fff8be4
    4418:	1fff8be8 	.word	0x1fff8be8
    441c:	1fff8c0c 	.word	0x1fff8c0c
    4420:	1fff8bec 	.word	0x1fff8bec
    4424:	1fff8bf0 	.word	0x1fff8bf0
    4428:	1fff8c10 	.word	0x1fff8c10

0000442c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    442c:	b500      	push	{lr}
    442e:	b083      	sub	sp, #12
    4430:	9001      	str	r0, [sp, #4]
    4432:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4434:	9b01      	ldr	r3, [sp, #4]
    4436:	2b03      	cmp	r3, #3
    4438:	f000 8090 	beq.w	455c <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    443c:	9b01      	ldr	r3, [sp, #4]
    443e:	2b03      	cmp	r3, #3
    4440:	f200 80d3 	bhi.w	45ea <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    4444:	9b01      	ldr	r3, [sp, #4]
    4446:	2b00      	cmp	r3, #0
    4448:	d040      	beq.n	44cc <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    444a:	9b01      	ldr	r3, [sp, #4]
    444c:	3b01      	subs	r3, #1
    444e:	2b01      	cmp	r3, #1
    4450:	f200 80cb 	bhi.w	45ea <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    4454:	9b00      	ldr	r3, [sp, #0]
    4456:	2b00      	cmp	r3, #0
    4458:	f040 80c9 	bne.w	45ee <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    445c:	4b68      	ldr	r3, [pc, #416]	; (4600 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    445e:	2200      	movs	r2, #0
    4460:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    4462:	4b68      	ldr	r3, [pc, #416]	; (4604 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4464:	681b      	ldr	r3, [r3, #0]
    4466:	685b      	ldr	r3, [r3, #4]
    4468:	4a67      	ldr	r2, [pc, #412]	; (4608 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    446a:	6812      	ldr	r2, [r2, #0]
    446c:	4610      	mov	r0, r2
    446e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    4470:	4b66      	ldr	r3, [pc, #408]	; (460c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4472:	681b      	ldr	r3, [r3, #0]
    4474:	681b      	ldr	r3, [r3, #0]
    4476:	4a66      	ldr	r2, [pc, #408]	; (4610 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4478:	6812      	ldr	r2, [r2, #0]
    447a:	4610      	mov	r0, r2
    447c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    447e:	4b65      	ldr	r3, [pc, #404]	; (4614 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4480:	681b      	ldr	r3, [r3, #0]
    4482:	681b      	ldr	r3, [r3, #0]
    4484:	4a64      	ldr	r2, [pc, #400]	; (4618 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4486:	6812      	ldr	r2, [r2, #0]
    4488:	4610      	mov	r0, r2
    448a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    448c:	4b63      	ldr	r3, [pc, #396]	; (461c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    448e:	681b      	ldr	r3, [r3, #0]
    4490:	681b      	ldr	r3, [r3, #0]
    4492:	4a63      	ldr	r2, [pc, #396]	; (4620 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4494:	6812      	ldr	r2, [r2, #0]
    4496:	4610      	mov	r0, r2
    4498:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    449a:	4b62      	ldr	r3, [pc, #392]	; (4624 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    449c:	681b      	ldr	r3, [r3, #0]
    449e:	691b      	ldr	r3, [r3, #16]
    44a0:	4a61      	ldr	r2, [pc, #388]	; (4628 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    44a2:	6812      	ldr	r2, [r2, #0]
    44a4:	6812      	ldr	r2, [r2, #0]
    44a6:	4610      	mov	r0, r2
    44a8:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    44aa:	4b60      	ldr	r3, [pc, #384]	; (462c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    44ac:	681b      	ldr	r3, [r3, #0]
    44ae:	68db      	ldr	r3, [r3, #12]
    44b0:	4a5f      	ldr	r2, [pc, #380]	; (4630 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    44b2:	6812      	ldr	r2, [r2, #0]
    44b4:	6812      	ldr	r2, [r2, #0]
    44b6:	4610      	mov	r0, r2
    44b8:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    44ba:	4b5e      	ldr	r3, [pc, #376]	; (4634 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    44bc:	681b      	ldr	r3, [r3, #0]
    44be:	689b      	ldr	r3, [r3, #8]
    44c0:	4a5d      	ldr	r2, [pc, #372]	; (4638 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    44c2:	6812      	ldr	r2, [r2, #0]
    44c4:	6812      	ldr	r2, [r2, #0]
    44c6:	4610      	mov	r0, r2
    44c8:	4798      	blx	r3
            }
        }
        break;
    44ca:	e090      	b.n	45ee <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    44cc:	9b00      	ldr	r3, [sp, #0]
    44ce:	2b02      	cmp	r3, #2
    44d0:	f040 808f 	bne.w	45f2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    44d4:	4b4a      	ldr	r3, [pc, #296]	; (4600 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    44d6:	2201      	movs	r2, #1
    44d8:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    44da:	4b56      	ldr	r3, [pc, #344]	; (4634 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	685b      	ldr	r3, [r3, #4]
    44e0:	4a55      	ldr	r2, [pc, #340]	; (4638 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    44e2:	6812      	ldr	r2, [r2, #0]
    44e4:	4610      	mov	r0, r2
    44e6:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    44e8:	4b50      	ldr	r3, [pc, #320]	; (462c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	691b      	ldr	r3, [r3, #16]
    44ee:	4a50      	ldr	r2, [pc, #320]	; (4630 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    44f0:	6812      	ldr	r2, [r2, #0]
    44f2:	4610      	mov	r0, r2
    44f4:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    44f6:	4b4d      	ldr	r3, [pc, #308]	; (462c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    44f8:	681b      	ldr	r3, [r3, #0]
    44fa:	689b      	ldr	r3, [r3, #8]
    44fc:	4a4c      	ldr	r2, [pc, #304]	; (4630 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    44fe:	6812      	ldr	r2, [r2, #0]
    4500:	4610      	mov	r0, r2
    4502:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4504:	4b47      	ldr	r3, [pc, #284]	; (4624 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4506:	681b      	ldr	r3, [r3, #0]
    4508:	68db      	ldr	r3, [r3, #12]
    450a:	4a47      	ldr	r2, [pc, #284]	; (4628 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    450c:	6812      	ldr	r2, [r2, #0]
    450e:	4610      	mov	r0, r2
    4510:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4512:	4b44      	ldr	r3, [pc, #272]	; (4624 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4514:	681b      	ldr	r3, [r3, #0]
    4516:	689b      	ldr	r3, [r3, #8]
    4518:	4a43      	ldr	r2, [pc, #268]	; (4628 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    451a:	6812      	ldr	r2, [r2, #0]
    451c:	6812      	ldr	r2, [r2, #0]
    451e:	4610      	mov	r0, r2
    4520:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4522:	4b38      	ldr	r3, [pc, #224]	; (4604 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4524:	681b      	ldr	r3, [r3, #0]
    4526:	685b      	ldr	r3, [r3, #4]
    4528:	4a44      	ldr	r2, [pc, #272]	; (463c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    452a:	6812      	ldr	r2, [r2, #0]
    452c:	4610      	mov	r0, r2
    452e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4530:	4b36      	ldr	r3, [pc, #216]	; (460c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4532:	681b      	ldr	r3, [r3, #0]
    4534:	681b      	ldr	r3, [r3, #0]
    4536:	4a42      	ldr	r2, [pc, #264]	; (4640 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4538:	6812      	ldr	r2, [r2, #0]
    453a:	4610      	mov	r0, r2
    453c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    453e:	4b35      	ldr	r3, [pc, #212]	; (4614 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4540:	681b      	ldr	r3, [r3, #0]
    4542:	681b      	ldr	r3, [r3, #0]
    4544:	4a3f      	ldr	r2, [pc, #252]	; (4644 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4546:	6812      	ldr	r2, [r2, #0]
    4548:	4610      	mov	r0, r2
    454a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    454c:	4b33      	ldr	r3, [pc, #204]	; (461c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	681b      	ldr	r3, [r3, #0]
    4552:	4a3d      	ldr	r2, [pc, #244]	; (4648 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4554:	6812      	ldr	r2, [r2, #0]
    4556:	4610      	mov	r0, r2
    4558:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    455a:	e04a      	b.n	45f2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    455c:	9b00      	ldr	r3, [sp, #0]
    455e:	2b02      	cmp	r3, #2
    4560:	d149      	bne.n	45f6 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4562:	4b27      	ldr	r3, [pc, #156]	; (4600 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4564:	2201      	movs	r2, #1
    4566:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4568:	4b32      	ldr	r3, [pc, #200]	; (4634 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    456a:	681b      	ldr	r3, [r3, #0]
    456c:	685b      	ldr	r3, [r3, #4]
    456e:	4a32      	ldr	r2, [pc, #200]	; (4638 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4570:	6812      	ldr	r2, [r2, #0]
    4572:	4610      	mov	r0, r2
    4574:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4576:	4b2d      	ldr	r3, [pc, #180]	; (462c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4578:	681b      	ldr	r3, [r3, #0]
    457a:	691b      	ldr	r3, [r3, #16]
    457c:	4a2c      	ldr	r2, [pc, #176]	; (4630 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    457e:	6812      	ldr	r2, [r2, #0]
    4580:	4610      	mov	r0, r2
    4582:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4584:	4b29      	ldr	r3, [pc, #164]	; (462c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4586:	681b      	ldr	r3, [r3, #0]
    4588:	689b      	ldr	r3, [r3, #8]
    458a:	4a29      	ldr	r2, [pc, #164]	; (4630 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    458c:	6812      	ldr	r2, [r2, #0]
    458e:	4610      	mov	r0, r2
    4590:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4592:	4b24      	ldr	r3, [pc, #144]	; (4624 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4594:	681b      	ldr	r3, [r3, #0]
    4596:	68db      	ldr	r3, [r3, #12]
    4598:	4a23      	ldr	r2, [pc, #140]	; (4628 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    459a:	6812      	ldr	r2, [r2, #0]
    459c:	4610      	mov	r0, r2
    459e:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    45a0:	4b20      	ldr	r3, [pc, #128]	; (4624 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    45a2:	681b      	ldr	r3, [r3, #0]
    45a4:	689b      	ldr	r3, [r3, #8]
    45a6:	4a20      	ldr	r2, [pc, #128]	; (4628 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    45a8:	6812      	ldr	r2, [r2, #0]
    45aa:	6812      	ldr	r2, [r2, #0]
    45ac:	4610      	mov	r0, r2
    45ae:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    45b0:	4b26      	ldr	r3, [pc, #152]	; (464c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    45b2:	681b      	ldr	r3, [r3, #0]
    45b4:	685b      	ldr	r3, [r3, #4]
    45b6:	4a26      	ldr	r2, [pc, #152]	; (4650 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    45b8:	6812      	ldr	r2, [r2, #0]
    45ba:	4610      	mov	r0, r2
    45bc:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    45be:	4b25      	ldr	r3, [pc, #148]	; (4654 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    45c0:	681b      	ldr	r3, [r3, #0]
    45c2:	681b      	ldr	r3, [r3, #0]
    45c4:	4a24      	ldr	r2, [pc, #144]	; (4658 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    45c6:	6812      	ldr	r2, [r2, #0]
    45c8:	4610      	mov	r0, r2
    45ca:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    45cc:	4b23      	ldr	r3, [pc, #140]	; (465c <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    45ce:	681b      	ldr	r3, [r3, #0]
    45d0:	681b      	ldr	r3, [r3, #0]
    45d2:	4a23      	ldr	r2, [pc, #140]	; (4660 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    45d4:	6812      	ldr	r2, [r2, #0]
    45d6:	4610      	mov	r0, r2
    45d8:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    45da:	4b22      	ldr	r3, [pc, #136]	; (4664 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    45dc:	681b      	ldr	r3, [r3, #0]
    45de:	681b      	ldr	r3, [r3, #0]
    45e0:	4a21      	ldr	r2, [pc, #132]	; (4668 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    45e2:	6812      	ldr	r2, [r2, #0]
    45e4:	4610      	mov	r0, r2
    45e6:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    45e8:	e005      	b.n	45f6 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    45ea:	bf00      	nop
    45ec:	e004      	b.n	45f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    45ee:	bf00      	nop
    45f0:	e002      	b.n	45f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    45f2:	bf00      	nop
    45f4:	e000      	b.n	45f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    45f6:	bf00      	nop
    }

}
    45f8:	bf00      	nop
    45fa:	b003      	add	sp, #12
    45fc:	f85d fb04 	ldr.w	pc, [sp], #4
    4600:	1fff8b19 	.word	0x1fff8b19
    4604:	1fff8bb8 	.word	0x1fff8bb8
    4608:	1fff8bd8 	.word	0x1fff8bd8
    460c:	1fff8bbc 	.word	0x1fff8bbc
    4610:	1fff8be0 	.word	0x1fff8be0
    4614:	1fff8bc0 	.word	0x1fff8bc0
    4618:	1fff8be8 	.word	0x1fff8be8
    461c:	1fff8bc4 	.word	0x1fff8bc4
    4620:	1fff8bf0 	.word	0x1fff8bf0
    4624:	1fff8bac 	.word	0x1fff8bac
    4628:	1fff8bd0 	.word	0x1fff8bd0
    462c:	1fff8bb0 	.word	0x1fff8bb0
    4630:	1fff8bcc 	.word	0x1fff8bcc
    4634:	1fff8bb4 	.word	0x1fff8bb4
    4638:	1fff8bc8 	.word	0x1fff8bc8
    463c:	1fff8bd4 	.word	0x1fff8bd4
    4640:	1fff8bdc 	.word	0x1fff8bdc
    4644:	1fff8be4 	.word	0x1fff8be4
    4648:	1fff8bec 	.word	0x1fff8bec
    464c:	1fff8bf4 	.word	0x1fff8bf4
    4650:	1fff8c04 	.word	0x1fff8c04
    4654:	1fff8bf8 	.word	0x1fff8bf8
    4658:	1fff8c08 	.word	0x1fff8c08
    465c:	1fff8bfc 	.word	0x1fff8bfc
    4660:	1fff8c0c 	.word	0x1fff8c0c
    4664:	1fff8c00 	.word	0x1fff8c00
    4668:	1fff8c10 	.word	0x1fff8c10

0000466c <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    466c:	b500      	push	{lr}
    466e:	b083      	sub	sp, #12
    4670:	9001      	str	r0, [sp, #4]
    4672:	9100      	str	r1, [sp, #0]
    switch(Command)
    4674:	9b00      	ldr	r3, [sp, #0]
    4676:	2b04      	cmp	r3, #4
    4678:	d010      	beq.n	469c <Clock_Ip_Command+0x30>
    467a:	9b00      	ldr	r3, [sp, #0]
    467c:	2b04      	cmp	r3, #4
    467e:	d811      	bhi.n	46a4 <Clock_Ip_Command+0x38>
    4680:	9b00      	ldr	r3, [sp, #0]
    4682:	2b01      	cmp	r3, #1
    4684:	d006      	beq.n	4694 <Clock_Ip_Command+0x28>
    4686:	9b00      	ldr	r3, [sp, #0]
    4688:	2b02      	cmp	r3, #2
    468a:	d10b      	bne.n	46a4 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    468c:	9801      	ldr	r0, [sp, #4]
    468e:	f7ff fdb3 	bl	41f8 <Clock_Ip_ClockInitializeObjects>
            break;
    4692:	e008      	b.n	46a6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4694:	9801      	ldr	r0, [sp, #4]
    4696:	f7ff f9db 	bl	3a50 <Clock_Ip_SpecificPlatformInitClock>
            break;
    469a:	e004      	b.n	46a6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    469c:	9801      	ldr	r0, [sp, #4]
    469e:	f7ff f8ed 	bl	387c <DisableSafeClock>
            break;
    46a2:	e000      	b.n	46a6 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    46a4:	bf00      	nop
    }
}
    46a6:	bf00      	nop
    46a8:	b003      	add	sp, #12
    46aa:	f85d fb04 	ldr.w	pc, [sp], #4
    46ae:	bf00      	nop

000046b0 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    46b0:	b500      	push	{lr}
    46b2:	b085      	sub	sp, #20
    46b4:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    46b6:	4a20      	ldr	r2, [pc, #128]	; (4738 <Mcu_Init+0x88>)
    46b8:	9b01      	ldr	r3, [sp, #4]
    46ba:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    46bc:	2300      	movs	r3, #0
    46be:	9303      	str	r3, [sp, #12]
    46c0:	e010      	b.n	46e4 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    46c2:	4b1d      	ldr	r3, [pc, #116]	; (4738 <Mcu_Init+0x88>)
    46c4:	681b      	ldr	r3, [r3, #0]
    46c6:	6919      	ldr	r1, [r3, #16]
    46c8:	9a03      	ldr	r2, [sp, #12]
    46ca:	4613      	mov	r3, r2
    46cc:	005b      	lsls	r3, r3, #1
    46ce:	4413      	add	r3, r2
    46d0:	009b      	lsls	r3, r3, #2
    46d2:	440b      	add	r3, r1
    46d4:	681b      	ldr	r3, [r3, #0]
    46d6:	9a03      	ldr	r2, [sp, #12]
    46d8:	b2d1      	uxtb	r1, r2
    46da:	4a18      	ldr	r2, [pc, #96]	; (473c <Mcu_Init+0x8c>)
    46dc:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    46de:	9b03      	ldr	r3, [sp, #12]
    46e0:	3301      	adds	r3, #1
    46e2:	9303      	str	r3, [sp, #12]
    46e4:	4b14      	ldr	r3, [pc, #80]	; (4738 <Mcu_Init+0x88>)
    46e6:	681b      	ldr	r3, [r3, #0]
    46e8:	689b      	ldr	r3, [r3, #8]
    46ea:	9a03      	ldr	r2, [sp, #12]
    46ec:	429a      	cmp	r2, r3
    46ee:	d3e8      	bcc.n	46c2 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    46f0:	2300      	movs	r3, #0
    46f2:	9303      	str	r3, [sp, #12]
    46f4:	e010      	b.n	4718 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    46f6:	4b10      	ldr	r3, [pc, #64]	; (4738 <Mcu_Init+0x88>)
    46f8:	681b      	ldr	r3, [r3, #0]
    46fa:	6959      	ldr	r1, [r3, #20]
    46fc:	9a03      	ldr	r2, [sp, #12]
    46fe:	4613      	mov	r3, r2
    4700:	01db      	lsls	r3, r3, #7
    4702:	1a9b      	subs	r3, r3, r2
    4704:	00db      	lsls	r3, r3, #3
    4706:	440b      	add	r3, r1
    4708:	681b      	ldr	r3, [r3, #0]
    470a:	9a03      	ldr	r2, [sp, #12]
    470c:	b2d1      	uxtb	r1, r2
    470e:	4a0c      	ldr	r2, [pc, #48]	; (4740 <Mcu_Init+0x90>)
    4710:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4712:	9b03      	ldr	r3, [sp, #12]
    4714:	3301      	adds	r3, #1
    4716:	9303      	str	r3, [sp, #12]
    4718:	4b07      	ldr	r3, [pc, #28]	; (4738 <Mcu_Init+0x88>)
    471a:	681b      	ldr	r3, [r3, #0]
    471c:	68db      	ldr	r3, [r3, #12]
    471e:	9a03      	ldr	r2, [sp, #12]
    4720:	429a      	cmp	r2, r3
    4722:	d3e8      	bcc.n	46f6 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4724:	4b04      	ldr	r3, [pc, #16]	; (4738 <Mcu_Init+0x88>)
    4726:	681b      	ldr	r3, [r3, #0]
    4728:	699b      	ldr	r3, [r3, #24]
    472a:	4618      	mov	r0, r3
    472c:	f000 f88a 	bl	4844 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4730:	bf00      	nop
    4732:	b005      	add	sp, #20
    4734:	f85d fb04 	ldr.w	pc, [sp], #4
    4738:	1fff8cec 	.word	0x1fff8cec
    473c:	1fff8ce8 	.word	0x1fff8ce8
    4740:	1fff8ce4 	.word	0x1fff8ce4

00004744 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4744:	b084      	sub	sp, #16
    4746:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4748:	2301      	movs	r3, #1
    474a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    474e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4752:	4618      	mov	r0, r3
    4754:	b004      	add	sp, #16
    4756:	4770      	bx	lr

00004758 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4758:	b500      	push	{lr}
    475a:	b085      	sub	sp, #20
    475c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    475e:	4a0e      	ldr	r2, [pc, #56]	; (4798 <Mcu_InitClock+0x40>)
    4760:	9b01      	ldr	r3, [sp, #4]
    4762:	4413      	add	r3, r2
    4764:	781b      	ldrb	r3, [r3, #0]
    4766:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    476a:	4b0c      	ldr	r3, [pc, #48]	; (479c <Mcu_InitClock+0x44>)
    476c:	681b      	ldr	r3, [r3, #0]
    476e:	6959      	ldr	r1, [r3, #20]
    4770:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4774:	4613      	mov	r3, r2
    4776:	01db      	lsls	r3, r3, #7
    4778:	1a9b      	subs	r3, r3, r2
    477a:	00db      	lsls	r3, r3, #3
    477c:	440b      	add	r3, r1
    477e:	4618      	mov	r0, r3
    4780:	f000 f86a 	bl	4858 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4784:	2300      	movs	r3, #0
    4786:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    478a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    478e:	4618      	mov	r0, r3
    4790:	b005      	add	sp, #20
    4792:	f85d fb04 	ldr.w	pc, [sp], #4
    4796:	bf00      	nop
    4798:	1fff8ce4 	.word	0x1fff8ce4
    479c:	1fff8cec 	.word	0x1fff8cec

000047a0 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    47a0:	b500      	push	{lr}
    47a2:	b085      	sub	sp, #20
    47a4:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    47a6:	4a0d      	ldr	r2, [pc, #52]	; (47dc <Mcu_SetMode+0x3c>)
    47a8:	9b01      	ldr	r3, [sp, #4]
    47aa:	4413      	add	r3, r2
    47ac:	781b      	ldrb	r3, [r3, #0]
    47ae:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    47b2:	f004 fa1b 	bl	8bec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    47b6:	4b0a      	ldr	r3, [pc, #40]	; (47e0 <Mcu_SetMode+0x40>)
    47b8:	681b      	ldr	r3, [r3, #0]
    47ba:	6919      	ldr	r1, [r3, #16]
    47bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    47c0:	4613      	mov	r3, r2
    47c2:	005b      	lsls	r3, r3, #1
    47c4:	4413      	add	r3, r2
    47c6:	009b      	lsls	r3, r3, #2
    47c8:	440b      	add	r3, r1
    47ca:	4618      	mov	r0, r3
    47cc:	f000 f84e 	bl	486c <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    47d0:	f004 fa38 	bl	8c44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    47d4:	bf00      	nop
    47d6:	b005      	add	sp, #20
    47d8:	f85d fb04 	ldr.w	pc, [sp], #4
    47dc:	1fff8ce8 	.word	0x1fff8ce8
    47e0:	1fff8cec 	.word	0x1fff8cec

000047e4 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    47e4:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    47e6:	2302      	movs	r3, #2
    47e8:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    47ea:	9b01      	ldr	r3, [sp, #4]
}
    47ec:	4618      	mov	r0, r3
    47ee:	b002      	add	sp, #8
    47f0:	4770      	bx	lr

000047f2 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    47f2:	b500      	push	{lr}
    47f4:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    47f6:	f000 f843 	bl	4880 <Mcu_Ipw_GetResetReason>
    47fa:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    47fc:	9b01      	ldr	r3, [sp, #4]
}
    47fe:	4618      	mov	r0, r3
    4800:	b003      	add	sp, #12
    4802:	f85d fb04 	ldr.w	pc, [sp], #4

00004806 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4806:	b500      	push	{lr}
    4808:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    480a:	f000 f83f 	bl	488c <Mcu_Ipw_GetResetRawValue>
    480e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4810:	9b01      	ldr	r3, [sp, #4]
}
    4812:	4618      	mov	r0, r3
    4814:	b003      	add	sp, #12
    4816:	f85d fb04 	ldr.w	pc, [sp], #4

0000481a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    481a:	b500      	push	{lr}
    481c:	b083      	sub	sp, #12
    481e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4820:	9801      	ldr	r0, [sp, #4]
    4822:	f000 f839 	bl	4898 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4826:	bf00      	nop
    4828:	b003      	add	sp, #12
    482a:	f85d fb04 	ldr.w	pc, [sp], #4

0000482e <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    482e:	b082      	sub	sp, #8
    4830:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4832:	4b03      	ldr	r3, [pc, #12]	; (4840 <Mcu_ClkSrcFailureNotification+0x12>)
    4834:	681b      	ldr	r3, [r3, #0]
    4836:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4838:	bf00      	nop
    483a:	b002      	add	sp, #8
    483c:	4770      	bx	lr
    483e:	bf00      	nop
    4840:	1fff8cec 	.word	0x1fff8cec

00004844 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4844:	b500      	push	{lr}
    4846:	b083      	sub	sp, #12
    4848:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    484a:	9801      	ldr	r0, [sp, #4]
    484c:	f000 f882 	bl	4954 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4850:	bf00      	nop
    4852:	b003      	add	sp, #12
    4854:	f85d fb04 	ldr.w	pc, [sp], #4

00004858 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4858:	b500      	push	{lr}
    485a:	b083      	sub	sp, #12
    485c:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    485e:	9801      	ldr	r0, [sp, #4]
    4860:	f7fc fc6a 	bl	1138 <Clock_Ip_InitClock>
}
    4864:	bf00      	nop
    4866:	b003      	add	sp, #12
    4868:	f85d fb04 	ldr.w	pc, [sp], #4

0000486c <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    486c:	b500      	push	{lr}
    486e:	b083      	sub	sp, #12
    4870:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4872:	9801      	ldr	r0, [sp, #4]
    4874:	f000 f820 	bl	48b8 <Power_Ip_SetMode>
}
    4878:	bf00      	nop
    487a:	b003      	add	sp, #12
    487c:	f85d fb04 	ldr.w	pc, [sp], #4

00004880 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4880:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4882:	f000 f84f 	bl	4924 <Power_Ip_GetResetReason>
    4886:	4603      	mov	r3, r0
}
    4888:	4618      	mov	r0, r3
    488a:	bd08      	pop	{r3, pc}

0000488c <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    488c:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    488e:	f000 f857 	bl	4940 <Power_Ip_GetResetRawValue>
    4892:	4603      	mov	r3, r0
}
    4894:	4618      	mov	r0, r3
    4896:	bd08      	pop	{r3, pc}

00004898 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4898:	b500      	push	{lr}
    489a:	b083      	sub	sp, #12
    489c:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    489e:	9b01      	ldr	r3, [sp, #4]
    48a0:	2b00      	cmp	r3, #0
    48a2:	d102      	bne.n	48aa <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    48a4:	f000 f86c 	bl	4980 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    48a8:	e001      	b.n	48ae <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    48aa:	f000 f86e 	bl	498a <Power_Ip_EnableSleepOnExit>
}
    48ae:	bf00      	nop
    48b0:	b003      	add	sp, #12
    48b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000048b8 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    48b8:	b500      	push	{lr}
    48ba:	b085      	sub	sp, #20
    48bc:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    48be:	9b01      	ldr	r3, [sp, #4]
    48c0:	685b      	ldr	r3, [r3, #4]
    48c2:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    48c4:	9802      	ldr	r0, [sp, #8]
    48c6:	f000 f9f5 	bl	4cb4 <Power_Ip_SMC_ModeCheckEntry>
    48ca:	4603      	mov	r3, r0
    48cc:	2b00      	cmp	r3, #0
    48ce:	d002      	beq.n	48d6 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    48d0:	2301      	movs	r3, #1
    48d2:	9303      	str	r3, [sp, #12]
    48d4:	e003      	b.n	48de <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    48d6:	9801      	ldr	r0, [sp, #4]
    48d8:	f000 fa1e 	bl	4d18 <Power_Ip_SMC_ModeConfig>
    48dc:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    48de:	9b03      	ldr	r3, [sp, #12]
    48e0:	2b01      	cmp	r3, #1
    48e2:	d103      	bne.n	48ec <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    48e4:	21ff      	movs	r1, #255	; 0xff
    48e6:	2003      	movs	r0, #3
    48e8:	f000 f8f4 	bl	4ad4 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    48ec:	bf00      	nop
    48ee:	b005      	add	sp, #20
    48f0:	f85d fb04 	ldr.w	pc, [sp], #4

000048f4 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    48f4:	b084      	sub	sp, #16
    48f6:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    48f8:	230c      	movs	r3, #12
    48fa:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    48fc:	4a08      	ldr	r2, [pc, #32]	; (4920 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    48fe:	9b01      	ldr	r3, [sp, #4]
    4900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4904:	2b0e      	cmp	r3, #14
    4906:	d805      	bhi.n	4914 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4908:	4a05      	ldr	r2, [pc, #20]	; (4920 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    490a:	9b01      	ldr	r3, [sp, #4]
    490c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4910:	9303      	str	r3, [sp, #12]
    4912:	e001      	b.n	4918 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4914:	230c      	movs	r3, #12
    4916:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4918:	9b03      	ldr	r3, [sp, #12]
}
    491a:	4618      	mov	r0, r3
    491c:	b004      	add	sp, #16
    491e:	4770      	bx	lr
    4920:	0000bd80 	.word	0x0000bd80

00004924 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4924:	b500      	push	{lr}
    4926:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4928:	f000 f940 	bl	4bac <Power_Ip_RCM_GetResetReason>
    492c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    492e:	9801      	ldr	r0, [sp, #4]
    4930:	f7ff ffe0 	bl	48f4 <Power_Ip_ConvertIntergeToResetType>
    4934:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4936:	9b00      	ldr	r3, [sp, #0]
}
    4938:	4618      	mov	r0, r3
    493a:	b003      	add	sp, #12
    493c:	f85d fb04 	ldr.w	pc, [sp], #4

00004940 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    4940:	b500      	push	{lr}
    4942:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4944:	f000 f98a 	bl	4c5c <Power_Ip_RCM_GetResetRawValue>
    4948:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    494a:	9b01      	ldr	r3, [sp, #4]
}
    494c:	4618      	mov	r0, r3
    494e:	b003      	add	sp, #12
    4950:	f85d fb04 	ldr.w	pc, [sp], #4

00004954 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4954:	b500      	push	{lr}
    4956:	b083      	sub	sp, #12
    4958:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    495a:	9b01      	ldr	r3, [sp, #4]
    495c:	681b      	ldr	r3, [r3, #0]
    495e:	4618      	mov	r0, r3
    4960:	f000 f90e 	bl	4b80 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4964:	9b01      	ldr	r3, [sp, #4]
    4966:	685b      	ldr	r3, [r3, #4]
    4968:	4618      	mov	r0, r3
    496a:	f000 f86d 	bl	4a48 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    496e:	9b01      	ldr	r3, [sp, #4]
    4970:	689b      	ldr	r3, [r3, #8]
    4972:	4618      	mov	r0, r3
    4974:	f000 f990 	bl	4c98 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4978:	bf00      	nop
    497a:	b003      	add	sp, #12
    497c:	f85d fb04 	ldr.w	pc, [sp], #4

00004980 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4980:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4982:	f000 f811 	bl	49a8 <Power_Ip_CM4_DisableSleepOnExit>
}
    4986:	bf00      	nop
    4988:	bd08      	pop	{r3, pc}

0000498a <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    498a:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    498c:	f000 f820 	bl	49d0 <Power_Ip_CM4_EnableSleepOnExit>
}
    4990:	bf00      	nop
    4992:	bd08      	pop	{r3, pc}

00004994 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4994:	b082      	sub	sp, #8
    4996:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4998:	4a02      	ldr	r2, [pc, #8]	; (49a4 <Power_Ip_InstallNotificationsCallback+0x10>)
    499a:	9b01      	ldr	r3, [sp, #4]
    499c:	6013      	str	r3, [r2, #0]
}
    499e:	bf00      	nop
    49a0:	b002      	add	sp, #8
    49a2:	4770      	bx	lr
    49a4:	1fff8b1c 	.word	0x1fff8b1c

000049a8 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    49a8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    49aa:	2300      	movs	r3, #0
    49ac:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    49ae:	4b07      	ldr	r3, [pc, #28]	; (49cc <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	685b      	ldr	r3, [r3, #4]
    49b4:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    49b6:	9b01      	ldr	r3, [sp, #4]
    49b8:	f023 0302 	bic.w	r3, r3, #2
    49bc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    49be:	4b03      	ldr	r3, [pc, #12]	; (49cc <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    49c0:	681b      	ldr	r3, [r3, #0]
    49c2:	9a01      	ldr	r2, [sp, #4]
    49c4:	605a      	str	r2, [r3, #4]
}
    49c6:	bf00      	nop
    49c8:	b002      	add	sp, #8
    49ca:	4770      	bx	lr
    49cc:	1fff8b20 	.word	0x1fff8b20

000049d0 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    49d0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    49d2:	2300      	movs	r3, #0
    49d4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    49d6:	4b07      	ldr	r3, [pc, #28]	; (49f4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    49d8:	681b      	ldr	r3, [r3, #0]
    49da:	685b      	ldr	r3, [r3, #4]
    49dc:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    49de:	9b01      	ldr	r3, [sp, #4]
    49e0:	f043 0302 	orr.w	r3, r3, #2
    49e4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    49e6:	4b03      	ldr	r3, [pc, #12]	; (49f4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    49e8:	681b      	ldr	r3, [r3, #0]
    49ea:	9a01      	ldr	r2, [sp, #4]
    49ec:	605a      	str	r2, [r3, #4]
}
    49ee:	bf00      	nop
    49f0:	b002      	add	sp, #8
    49f2:	4770      	bx	lr
    49f4:	1fff8b20 	.word	0x1fff8b20

000049f8 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    49f8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    49fa:	2300      	movs	r3, #0
    49fc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    49fe:	4b07      	ldr	r3, [pc, #28]	; (4a1c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4a00:	681b      	ldr	r3, [r3, #0]
    4a02:	685b      	ldr	r3, [r3, #4]
    4a04:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    4a06:	9b01      	ldr	r3, [sp, #4]
    4a08:	f043 0304 	orr.w	r3, r3, #4
    4a0c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4a0e:	4b03      	ldr	r3, [pc, #12]	; (4a1c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4a10:	681b      	ldr	r3, [r3, #0]
    4a12:	9a01      	ldr	r2, [sp, #4]
    4a14:	605a      	str	r2, [r3, #4]
}
    4a16:	bf00      	nop
    4a18:	b002      	add	sp, #8
    4a1a:	4770      	bx	lr
    4a1c:	1fff8b20 	.word	0x1fff8b20

00004a20 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    4a20:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4a22:	2300      	movs	r3, #0
    4a24:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4a26:	4b07      	ldr	r3, [pc, #28]	; (4a44 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4a28:	681b      	ldr	r3, [r3, #0]
    4a2a:	685b      	ldr	r3, [r3, #4]
    4a2c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    4a2e:	9b01      	ldr	r3, [sp, #4]
    4a30:	f023 0304 	bic.w	r3, r3, #4
    4a34:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4a36:	4b03      	ldr	r3, [pc, #12]	; (4a44 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4a38:	681b      	ldr	r3, [r3, #0]
    4a3a:	9a01      	ldr	r2, [sp, #4]
    4a3c:	605a      	str	r2, [r3, #4]
}
    4a3e:	bf00      	nop
    4a40:	b002      	add	sp, #8
    4a42:	4770      	bx	lr
    4a44:	1fff8b20 	.word	0x1fff8b20

00004a48 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    4a48:	b084      	sub	sp, #16
    4a4a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    4a4c:	4b20      	ldr	r3, [pc, #128]	; (4ad0 <Power_Ip_PMC_PowerInit+0x88>)
    4a4e:	781b      	ldrb	r3, [r3, #0]
    4a50:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    4a54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a58:	f003 030f 	and.w	r3, r3, #15
    4a5c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    4a60:	9b01      	ldr	r3, [sp, #4]
    4a62:	781a      	ldrb	r2, [r3, #0]
    4a64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a68:	4313      	orrs	r3, r2
    4a6a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    4a6e:	4a18      	ldr	r2, [pc, #96]	; (4ad0 <Power_Ip_PMC_PowerInit+0x88>)
    4a70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a74:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    4a76:	4b16      	ldr	r3, [pc, #88]	; (4ad0 <Power_Ip_PMC_PowerInit+0x88>)
    4a78:	785b      	ldrb	r3, [r3, #1]
    4a7a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    4a7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a82:	f003 031f 	and.w	r3, r3, #31
    4a86:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    4a8a:	9b01      	ldr	r3, [sp, #4]
    4a8c:	785a      	ldrb	r2, [r3, #1]
    4a8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a92:	4313      	orrs	r3, r2
    4a94:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    4a98:	4a0d      	ldr	r2, [pc, #52]	; (4ad0 <Power_Ip_PMC_PowerInit+0x88>)
    4a9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a9e:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    4aa0:	4b0b      	ldr	r3, [pc, #44]	; (4ad0 <Power_Ip_PMC_PowerInit+0x88>)
    4aa2:	789b      	ldrb	r3, [r3, #2]
    4aa4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    4aa8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4aac:	f003 0338 	and.w	r3, r3, #56	; 0x38
    4ab0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    4ab4:	9b01      	ldr	r3, [sp, #4]
    4ab6:	789a      	ldrb	r2, [r3, #2]
    4ab8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4abc:	4313      	orrs	r3, r2
    4abe:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    4ac2:	4a03      	ldr	r2, [pc, #12]	; (4ad0 <Power_Ip_PMC_PowerInit+0x88>)
    4ac4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4ac8:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    4aca:	bf00      	nop
    4acc:	b004      	add	sp, #16
    4ace:	4770      	bx	lr
    4ad0:	4007d000 	.word	0x4007d000

00004ad4 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4ad4:	b500      	push	{lr}
    4ad6:	b083      	sub	sp, #12
    4ad8:	9001      	str	r0, [sp, #4]
    4ada:	460b      	mov	r3, r1
    4adc:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    4ae0:	4b05      	ldr	r3, [pc, #20]	; (4af8 <Power_Ip_ReportPowerErrors+0x24>)
    4ae2:	681b      	ldr	r3, [r3, #0]
    4ae4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4ae8:	4611      	mov	r1, r2
    4aea:	9801      	ldr	r0, [sp, #4]
    4aec:	4798      	blx	r3
}
    4aee:	bf00      	nop
    4af0:	b003      	add	sp, #12
    4af2:	f85d fb04 	ldr.w	pc, [sp], #4
    4af6:	bf00      	nop
    4af8:	1fff8b1c 	.word	0x1fff8b1c

00004afc <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4afc:	b082      	sub	sp, #8
    4afe:	9001      	str	r0, [sp, #4]
    4b00:	460b      	mov	r3, r1
    4b02:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    4b06:	bf00      	nop
    4b08:	b002      	add	sp, #8
    4b0a:	4770      	bx	lr

00004b0c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    4b0c:	b500      	push	{lr}
    4b0e:	b085      	sub	sp, #20
    4b10:	9003      	str	r0, [sp, #12]
    4b12:	9102      	str	r1, [sp, #8]
    4b14:	9201      	str	r2, [sp, #4]
    4b16:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    4b18:	2000      	movs	r0, #0
    4b1a:	f7fc f83c 	bl	b96 <OsIf_GetCounter>
    4b1e:	4602      	mov	r2, r0
    4b20:	9b03      	ldr	r3, [sp, #12]
    4b22:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    4b24:	9b02      	ldr	r3, [sp, #8]
    4b26:	2200      	movs	r2, #0
    4b28:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    4b2a:	2100      	movs	r1, #0
    4b2c:	9800      	ldr	r0, [sp, #0]
    4b2e:	f7fc f87e 	bl	c2e <OsIf_MicrosToTicks>
    4b32:	4602      	mov	r2, r0
    4b34:	9b01      	ldr	r3, [sp, #4]
    4b36:	601a      	str	r2, [r3, #0]
}
    4b38:	bf00      	nop
    4b3a:	b005      	add	sp, #20
    4b3c:	f85d fb04 	ldr.w	pc, [sp], #4

00004b40 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    4b40:	b500      	push	{lr}
    4b42:	b087      	sub	sp, #28
    4b44:	9003      	str	r0, [sp, #12]
    4b46:	9102      	str	r1, [sp, #8]
    4b48:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    4b4a:	2300      	movs	r3, #0
    4b4c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    4b50:	2100      	movs	r1, #0
    4b52:	9803      	ldr	r0, [sp, #12]
    4b54:	f7fc f838 	bl	bc8 <OsIf_GetElapsed>
    4b58:	4602      	mov	r2, r0
    4b5a:	9b02      	ldr	r3, [sp, #8]
    4b5c:	681b      	ldr	r3, [r3, #0]
    4b5e:	441a      	add	r2, r3
    4b60:	9b02      	ldr	r3, [sp, #8]
    4b62:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    4b64:	9b02      	ldr	r3, [sp, #8]
    4b66:	681b      	ldr	r3, [r3, #0]
    4b68:	9a01      	ldr	r2, [sp, #4]
    4b6a:	429a      	cmp	r2, r3
    4b6c:	d802      	bhi.n	4b74 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    4b6e:	2301      	movs	r3, #1
    4b70:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    4b74:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    4b78:	4618      	mov	r0, r3
    4b7a:	b007      	add	sp, #28
    4b7c:	f85d fb04 	ldr.w	pc, [sp], #4

00004b80 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    4b80:	b082      	sub	sp, #8
    4b82:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    4b84:	9b01      	ldr	r3, [sp, #4]
    4b86:	681a      	ldr	r2, [r3, #0]
    4b88:	4907      	ldr	r1, [pc, #28]	; (4ba8 <Power_Ip_RCM_ResetInit+0x28>)
    4b8a:	f641 7307 	movw	r3, #7943	; 0x1f07
    4b8e:	4013      	ands	r3, r2
    4b90:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    4b92:	9b01      	ldr	r3, [sp, #4]
    4b94:	685a      	ldr	r2, [r3, #4]
    4b96:	4904      	ldr	r1, [pc, #16]	; (4ba8 <Power_Ip_RCM_ResetInit+0x28>)
    4b98:	f642 73ff 	movw	r3, #12287	; 0x2fff
    4b9c:	4013      	ands	r3, r2
    4b9e:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    4ba0:	bf00      	nop
    4ba2:	b002      	add	sp, #8
    4ba4:	4770      	bx	lr
    4ba6:	bf00      	nop
    4ba8:	4007f000 	.word	0x4007f000

00004bac <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    4bac:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    4bae:	230c      	movs	r3, #12
    4bb0:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    4bb2:	2300      	movs	r3, #0
    4bb4:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    4bb6:	2300      	movs	r3, #0
    4bb8:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    4bba:	2300      	movs	r3, #0
    4bbc:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4bbe:	4b25      	ldr	r3, [pc, #148]	; (4c54 <Power_Ip_RCM_GetResetReason+0xa8>)
    4bc0:	699a      	ldr	r2, [r3, #24]
    4bc2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4bc6:	4013      	ands	r3, r2
    4bc8:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    4bca:	9b03      	ldr	r3, [sp, #12]
    4bcc:	2b00      	cmp	r3, #0
    4bce:	d008      	beq.n	4be2 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4bd0:	4920      	ldr	r1, [pc, #128]	; (4c54 <Power_Ip_RCM_GetResetReason+0xa8>)
    4bd2:	9a03      	ldr	r2, [sp, #12]
    4bd4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4bd8:	4013      	ands	r3, r2
    4bda:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4bdc:	4a1e      	ldr	r2, [pc, #120]	; (4c58 <Power_Ip_RCM_GetResetReason+0xac>)
    4bde:	9b03      	ldr	r3, [sp, #12]
    4be0:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    4be2:	4b1d      	ldr	r3, [pc, #116]	; (4c58 <Power_Ip_RCM_GetResetReason+0xac>)
    4be4:	681b      	ldr	r3, [r3, #0]
    4be6:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    4be8:	9a02      	ldr	r2, [sp, #8]
    4bea:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4bee:	4013      	ands	r3, r2
    4bf0:	2b82      	cmp	r3, #130	; 0x82
    4bf2:	d102      	bne.n	4bfa <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    4bf4:	2305      	movs	r3, #5
    4bf6:	9307      	str	r3, [sp, #28]
    4bf8:	e027      	b.n	4c4a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    4bfa:	2300      	movs	r3, #0
    4bfc:	9306      	str	r3, [sp, #24]
    4bfe:	e021      	b.n	4c44 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    4c00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4c04:	9b06      	ldr	r3, [sp, #24]
    4c06:	fa22 f303 	lsr.w	r3, r2, r3
    4c0a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    4c0c:	9a01      	ldr	r2, [sp, #4]
    4c0e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    4c12:	4013      	ands	r3, r2
    4c14:	2b00      	cmp	r3, #0
    4c16:	d012      	beq.n	4c3e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    4c18:	9a01      	ldr	r2, [sp, #4]
    4c1a:	9b02      	ldr	r3, [sp, #8]
    4c1c:	4013      	ands	r3, r2
    4c1e:	2b00      	cmp	r3, #0
    4c20:	d00a      	beq.n	4c38 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    4c22:	9b05      	ldr	r3, [sp, #20]
    4c24:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    4c26:	9b04      	ldr	r3, [sp, #16]
    4c28:	3301      	adds	r3, #1
    4c2a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    4c2c:	9b04      	ldr	r3, [sp, #16]
    4c2e:	2b01      	cmp	r3, #1
    4c30:	d902      	bls.n	4c38 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    4c32:	230d      	movs	r3, #13
    4c34:	9307      	str	r3, [sp, #28]
                        break;
    4c36:	e008      	b.n	4c4a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    4c38:	9b05      	ldr	r3, [sp, #20]
    4c3a:	3301      	adds	r3, #1
    4c3c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    4c3e:	9b06      	ldr	r3, [sp, #24]
    4c40:	3301      	adds	r3, #1
    4c42:	9306      	str	r3, [sp, #24]
    4c44:	9b06      	ldr	r3, [sp, #24]
    4c46:	2b1f      	cmp	r3, #31
    4c48:	d9da      	bls.n	4c00 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    4c4a:	9b07      	ldr	r3, [sp, #28]
}
    4c4c:	4618      	mov	r0, r3
    4c4e:	b008      	add	sp, #32
    4c50:	4770      	bx	lr
    4c52:	bf00      	nop
    4c54:	4007f000 	.word	0x4007f000
    4c58:	1fff8cf0 	.word	0x1fff8cf0

00004c5c <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    4c5c:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4c5e:	4b0c      	ldr	r3, [pc, #48]	; (4c90 <Power_Ip_RCM_GetResetRawValue+0x34>)
    4c60:	699a      	ldr	r2, [r3, #24]
    4c62:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c66:	4013      	ands	r3, r2
    4c68:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    4c6a:	9b01      	ldr	r3, [sp, #4]
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d008      	beq.n	4c82 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4c70:	4907      	ldr	r1, [pc, #28]	; (4c90 <Power_Ip_RCM_GetResetRawValue+0x34>)
    4c72:	9a01      	ldr	r2, [sp, #4]
    4c74:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c78:	4013      	ands	r3, r2
    4c7a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4c7c:	4a05      	ldr	r2, [pc, #20]	; (4c94 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c7e:	9b01      	ldr	r3, [sp, #4]
    4c80:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    4c82:	4b04      	ldr	r3, [pc, #16]	; (4c94 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c84:	681b      	ldr	r3, [r3, #0]
    4c86:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    4c88:	9b00      	ldr	r3, [sp, #0]
}
    4c8a:	4618      	mov	r0, r3
    4c8c:	b002      	add	sp, #8
    4c8e:	4770      	bx	lr
    4c90:	4007f000 	.word	0x4007f000
    4c94:	1fff8cf0 	.word	0x1fff8cf0

00004c98 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    4c98:	b082      	sub	sp, #8
    4c9a:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    4c9c:	9b01      	ldr	r3, [sp, #4]
    4c9e:	681b      	ldr	r3, [r3, #0]
    4ca0:	4a03      	ldr	r2, [pc, #12]	; (4cb0 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    4ca2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    4ca6:	6093      	str	r3, [r2, #8]
}
    4ca8:	bf00      	nop
    4caa:	b002      	add	sp, #8
    4cac:	4770      	bx	lr
    4cae:	bf00      	nop
    4cb0:	4007e000 	.word	0x4007e000

00004cb4 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    4cb4:	b084      	sub	sp, #16
    4cb6:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    4cb8:	2301      	movs	r3, #1
    4cba:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    4cbc:	4b15      	ldr	r3, [pc, #84]	; (4d14 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    4cbe:	695b      	ldr	r3, [r3, #20]
    4cc0:	b2db      	uxtb	r3, r3
    4cc2:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    4cc4:	9b01      	ldr	r3, [sp, #4]
    4cc6:	2b02      	cmp	r3, #2
    4cc8:	d012      	beq.n	4cf0 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    4cca:	9b01      	ldr	r3, [sp, #4]
    4ccc:	2b02      	cmp	r3, #2
    4cce:	d818      	bhi.n	4d02 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    4cd0:	9b01      	ldr	r3, [sp, #4]
    4cd2:	2b00      	cmp	r3, #0
    4cd4:	d003      	beq.n	4cde <Power_Ip_SMC_ModeCheckEntry+0x2a>
    4cd6:	9b01      	ldr	r3, [sp, #4]
    4cd8:	2b01      	cmp	r3, #1
    4cda:	d003      	beq.n	4ce4 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    4cdc:	e011      	b.n	4d02 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    4cde:	2300      	movs	r3, #0
    4ce0:	9303      	str	r3, [sp, #12]
            break;
    4ce2:	e013      	b.n	4d0c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    4ce4:	9b02      	ldr	r3, [sp, #8]
    4ce6:	2b01      	cmp	r3, #1
    4ce8:	d10d      	bne.n	4d06 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    4cea:	2300      	movs	r3, #0
    4cec:	9303      	str	r3, [sp, #12]
            break;
    4cee:	e00a      	b.n	4d06 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    4cf0:	9b02      	ldr	r3, [sp, #8]
    4cf2:	2b01      	cmp	r3, #1
    4cf4:	d002      	beq.n	4cfc <Power_Ip_SMC_ModeCheckEntry+0x48>
    4cf6:	9b02      	ldr	r3, [sp, #8]
    4cf8:	2b10      	cmp	r3, #16
    4cfa:	d106      	bne.n	4d0a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    4cfc:	2300      	movs	r3, #0
    4cfe:	9303      	str	r3, [sp, #12]
            break;
    4d00:	e003      	b.n	4d0a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    4d02:	bf00      	nop
    4d04:	e002      	b.n	4d0c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    4d06:	bf00      	nop
    4d08:	e000      	b.n	4d0c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    4d0a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    4d0c:	9b03      	ldr	r3, [sp, #12]
}
    4d0e:	4618      	mov	r0, r3
    4d10:	b004      	add	sp, #16
    4d12:	4770      	bx	lr
    4d14:	4007e000 	.word	0x4007e000

00004d18 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4d18:	b500      	push	{lr}
    4d1a:	b08b      	sub	sp, #44	; 0x2c
    4d1c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    4d1e:	2300      	movs	r3, #0
    4d20:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    4d22:	2300      	movs	r3, #0
    4d24:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    4d26:	2300      	movs	r3, #0
    4d28:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    4d2c:	9b01      	ldr	r3, [sp, #4]
    4d2e:	685b      	ldr	r3, [r3, #4]
    4d30:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    4d32:	9b08      	ldr	r3, [sp, #32]
    4d34:	2b02      	cmp	r3, #2
    4d36:	d076      	beq.n	4e26 <Power_Ip_SMC_ModeConfig+0x10e>
    4d38:	9b08      	ldr	r3, [sp, #32]
    4d3a:	2b02      	cmp	r3, #2
    4d3c:	f200 80ab 	bhi.w	4e96 <Power_Ip_SMC_ModeConfig+0x17e>
    4d40:	9b08      	ldr	r3, [sp, #32]
    4d42:	2b00      	cmp	r3, #0
    4d44:	d003      	beq.n	4d4e <Power_Ip_SMC_ModeConfig+0x36>
    4d46:	9b08      	ldr	r3, [sp, #32]
    4d48:	2b01      	cmp	r3, #1
    4d4a:	d034      	beq.n	4db6 <Power_Ip_SMC_ModeConfig+0x9e>
    4d4c:	e0a3      	b.n	4e96 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    4d4e:	4b58      	ldr	r3, [pc, #352]	; (4eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    4d50:	68db      	ldr	r3, [r3, #12]
    4d52:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4d54:	9b06      	ldr	r3, [sp, #24]
    4d56:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4d5a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    4d5c:	4a54      	ldr	r2, [pc, #336]	; (4eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    4d5e:	9b06      	ldr	r3, [sp, #24]
    4d60:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4d62:	aa02      	add	r2, sp, #8
    4d64:	a903      	add	r1, sp, #12
    4d66:	a804      	add	r0, sp, #16
    4d68:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d6c:	f7ff fece 	bl	4b0c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4d70:	9a02      	ldr	r2, [sp, #8]
    4d72:	a903      	add	r1, sp, #12
    4d74:	ab04      	add	r3, sp, #16
    4d76:	4618      	mov	r0, r3
    4d78:	f7ff fee2 	bl	4b40 <Power_Ip_TimeoutExpired>
    4d7c:	4603      	mov	r3, r0
    4d7e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    4d82:	4b4b      	ldr	r3, [pc, #300]	; (4eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    4d84:	695b      	ldr	r3, [r3, #20]
    4d86:	f003 0301 	and.w	r3, r3, #1
    4d8a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4d8c:	9b05      	ldr	r3, [sp, #20]
    4d8e:	2b01      	cmp	r3, #1
    4d90:	d006      	beq.n	4da0 <Power_Ip_SMC_ModeConfig+0x88>
    4d92:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d96:	f083 0301 	eor.w	r3, r3, #1
    4d9a:	b2db      	uxtb	r3, r3
    4d9c:	2b00      	cmp	r3, #0
    4d9e:	d1e7      	bne.n	4d70 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    4da0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4da4:	2b00      	cmp	r3, #0
    4da6:	d079      	beq.n	4e9c <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4da8:	2301      	movs	r3, #1
    4daa:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4dac:	21ff      	movs	r1, #255	; 0xff
    4dae:	2000      	movs	r0, #0
    4db0:	f7ff fe90 	bl	4ad4 <Power_Ip_ReportPowerErrors>
            }

            break;
    4db4:	e072      	b.n	4e9c <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    4db6:	4b3e      	ldr	r3, [pc, #248]	; (4eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    4db8:	68db      	ldr	r3, [r3, #12]
    4dba:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4dbc:	9b06      	ldr	r3, [sp, #24]
    4dbe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4dc2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    4dc4:	9b06      	ldr	r3, [sp, #24]
    4dc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    4dca:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    4dcc:	4a38      	ldr	r2, [pc, #224]	; (4eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    4dce:	9b06      	ldr	r3, [sp, #24]
    4dd0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4dd2:	aa02      	add	r2, sp, #8
    4dd4:	a903      	add	r1, sp, #12
    4dd6:	a804      	add	r0, sp, #16
    4dd8:	f24c 3350 	movw	r3, #50000	; 0xc350
    4ddc:	f7ff fe96 	bl	4b0c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4de0:	9a02      	ldr	r2, [sp, #8]
    4de2:	a903      	add	r1, sp, #12
    4de4:	ab04      	add	r3, sp, #16
    4de6:	4618      	mov	r0, r3
    4de8:	f7ff feaa 	bl	4b40 <Power_Ip_TimeoutExpired>
    4dec:	4603      	mov	r3, r0
    4dee:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    4df2:	4b2f      	ldr	r3, [pc, #188]	; (4eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    4df4:	695b      	ldr	r3, [r3, #20]
    4df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4dfa:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4dfc:	9b05      	ldr	r3, [sp, #20]
    4dfe:	2b80      	cmp	r3, #128	; 0x80
    4e00:	d006      	beq.n	4e10 <Power_Ip_SMC_ModeConfig+0xf8>
    4e02:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e06:	f083 0301 	eor.w	r3, r3, #1
    4e0a:	b2db      	uxtb	r3, r3
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d1e7      	bne.n	4de0 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    4e10:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e14:	2b00      	cmp	r3, #0
    4e16:	d043      	beq.n	4ea0 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e18:	2301      	movs	r3, #1
    4e1a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e1c:	21ff      	movs	r1, #255	; 0xff
    4e1e:	2000      	movs	r0, #0
    4e20:	f7ff fe58 	bl	4ad4 <Power_Ip_ReportPowerErrors>
            }

            break;
    4e24:	e03c      	b.n	4ea0 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    4e26:	4b22      	ldr	r3, [pc, #136]	; (4eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    4e28:	68db      	ldr	r3, [r3, #12]
    4e2a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4e2c:	9b06      	ldr	r3, [sp, #24]
    4e2e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4e32:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    4e34:	9b06      	ldr	r3, [sp, #24]
    4e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4e3a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    4e3c:	4a1c      	ldr	r2, [pc, #112]	; (4eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    4e3e:	9b06      	ldr	r3, [sp, #24]
    4e40:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4e42:	aa02      	add	r2, sp, #8
    4e44:	a903      	add	r1, sp, #12
    4e46:	a804      	add	r0, sp, #16
    4e48:	f24c 3350 	movw	r3, #50000	; 0xc350
    4e4c:	f7ff fe5e 	bl	4b0c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4e50:	9a02      	ldr	r2, [sp, #8]
    4e52:	a903      	add	r1, sp, #12
    4e54:	ab04      	add	r3, sp, #16
    4e56:	4618      	mov	r0, r3
    4e58:	f7ff fe72 	bl	4b40 <Power_Ip_TimeoutExpired>
    4e5c:	4603      	mov	r3, r0
    4e5e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    4e62:	4b13      	ldr	r3, [pc, #76]	; (4eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    4e64:	695b      	ldr	r3, [r3, #20]
    4e66:	f003 0304 	and.w	r3, r3, #4
    4e6a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4e6c:	9b05      	ldr	r3, [sp, #20]
    4e6e:	2b04      	cmp	r3, #4
    4e70:	d006      	beq.n	4e80 <Power_Ip_SMC_ModeConfig+0x168>
    4e72:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e76:	f083 0301 	eor.w	r3, r3, #1
    4e7a:	b2db      	uxtb	r3, r3
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d1e7      	bne.n	4e50 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    4e80:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e84:	2b00      	cmp	r3, #0
    4e86:	d00d      	beq.n	4ea4 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e88:	2301      	movs	r3, #1
    4e8a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e8c:	21ff      	movs	r1, #255	; 0xff
    4e8e:	2000      	movs	r0, #0
    4e90:	f7ff fe20 	bl	4ad4 <Power_Ip_ReportPowerErrors>
            }

            break;
    4e94:	e006      	b.n	4ea4 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e96:	2301      	movs	r3, #1
    4e98:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    4e9a:	e004      	b.n	4ea6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e9c:	bf00      	nop
    4e9e:	e002      	b.n	4ea6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4ea0:	bf00      	nop
    4ea2:	e000      	b.n	4ea6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4ea4:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    4ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    4ea8:	4618      	mov	r0, r3
    4eaa:	b00b      	add	sp, #44	; 0x2c
    4eac:	f85d fb04 	ldr.w	pc, [sp], #4
    4eb0:	4007e000 	.word	0x4007e000

00004eb4 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    4eb4:	b500      	push	{lr}
    4eb6:	b085      	sub	sp, #20
    4eb8:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    4eba:	9b01      	ldr	r3, [sp, #4]
    4ebc:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    4ebe:	9803      	ldr	r0, [sp, #12]
    4ec0:	f000 fbc8 	bl	5654 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    4ec4:	4a03      	ldr	r2, [pc, #12]	; (4ed4 <Port_Init+0x20>)
    4ec6:	9b03      	ldr	r3, [sp, #12]
    4ec8:	6013      	str	r3, [r2, #0]
        }
    }
}
    4eca:	bf00      	nop
    4ecc:	b005      	add	sp, #20
    4ece:	f85d fb04 	ldr.w	pc, [sp], #4
    4ed2:	bf00      	nop
    4ed4:	1fff8cf4 	.word	0x1fff8cf4

00004ed8 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    4ed8:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    4eda:	4b03      	ldr	r3, [pc, #12]	; (4ee8 <Port_RefreshPortDirection+0x10>)
    4edc:	681b      	ldr	r3, [r3, #0]
    4ede:	4618      	mov	r0, r3
    4ee0:	f000 fc10 	bl	5704 <Port_Ipw_RefreshPortDirection>
    }
}
    4ee4:	bf00      	nop
    4ee6:	bd08      	pop	{r3, pc}
    4ee8:	1fff8cf4 	.word	0x1fff8cf4

00004eec <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    4eec:	b086      	sub	sp, #24
    4eee:	9003      	str	r0, [sp, #12]
    4ef0:	9102      	str	r1, [sp, #8]
    4ef2:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    4ef4:	23ff      	movs	r3, #255	; 0xff
    4ef6:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    4ef8:	9b03      	ldr	r3, [sp, #12]
    4efa:	4a39      	ldr	r2, [pc, #228]	; (4fe0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    4efc:	4293      	cmp	r3, r2
    4efe:	d151      	bne.n	4fa4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    4f00:	9b02      	ldr	r3, [sp, #8]
    4f02:	2b10      	cmp	r3, #16
    4f04:	d867      	bhi.n	4fd6 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    4f06:	a201      	add	r2, pc, #4	; (adr r2, 4f0c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    4f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4f0c:	00004f51 	.word	0x00004f51
    4f10:	00004f5f 	.word	0x00004f5f
    4f14:	00004fd7 	.word	0x00004fd7
    4f18:	00004fd7 	.word	0x00004fd7
    4f1c:	00004fd7 	.word	0x00004fd7
    4f20:	00004fd7 	.word	0x00004fd7
    4f24:	00004fd7 	.word	0x00004fd7
    4f28:	00004fd7 	.word	0x00004fd7
    4f2c:	00004fd7 	.word	0x00004fd7
    4f30:	00004fd7 	.word	0x00004fd7
    4f34:	00004fd7 	.word	0x00004fd7
    4f38:	00004fd7 	.word	0x00004fd7
    4f3c:	00004fd7 	.word	0x00004fd7
    4f40:	00004f6d 	.word	0x00004f6d
    4f44:	00004f7b 	.word	0x00004f7b
    4f48:	00004f89 	.word	0x00004f89
    4f4c:	00004f97 	.word	0x00004f97
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    4f50:	2301      	movs	r3, #1
    4f52:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f54:	9a05      	ldr	r2, [sp, #20]
    4f56:	9b01      	ldr	r3, [sp, #4]
    4f58:	4313      	orrs	r3, r2
    4f5a:	9305      	str	r3, [sp, #20]
                break;
    4f5c:	e03c      	b.n	4fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    4f5e:	2302      	movs	r3, #2
    4f60:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f62:	9a05      	ldr	r2, [sp, #20]
    4f64:	9b01      	ldr	r3, [sp, #4]
    4f66:	4313      	orrs	r3, r2
    4f68:	9305      	str	r3, [sp, #20]
                break;
    4f6a:	e035      	b.n	4fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    4f6c:	2304      	movs	r3, #4
    4f6e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f70:	9a05      	ldr	r2, [sp, #20]
    4f72:	9b01      	ldr	r3, [sp, #4]
    4f74:	4313      	orrs	r3, r2
    4f76:	9305      	str	r3, [sp, #20]
                break;
    4f78:	e02e      	b.n	4fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    4f7a:	2308      	movs	r3, #8
    4f7c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f7e:	9a05      	ldr	r2, [sp, #20]
    4f80:	9b01      	ldr	r3, [sp, #4]
    4f82:	4313      	orrs	r3, r2
    4f84:	9305      	str	r3, [sp, #20]
                break;
    4f86:	e027      	b.n	4fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    4f88:	230e      	movs	r3, #14
    4f8a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f8c:	9a05      	ldr	r2, [sp, #20]
    4f8e:	9b01      	ldr	r3, [sp, #4]
    4f90:	4013      	ands	r3, r2
    4f92:	9305      	str	r3, [sp, #20]
                break;
    4f94:	e020      	b.n	4fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    4f96:	230d      	movs	r3, #13
    4f98:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f9a:	9a05      	ldr	r2, [sp, #20]
    4f9c:	9b01      	ldr	r3, [sp, #4]
    4f9e:	4013      	ands	r3, r2
    4fa0:	9305      	str	r3, [sp, #20]
                break;
    4fa2:	e019      	b.n	4fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    4fa4:	9b03      	ldr	r3, [sp, #12]
    4fa6:	4a0f      	ldr	r2, [pc, #60]	; (4fe4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    4fa8:	4293      	cmp	r3, r2
    4faa:	d115      	bne.n	4fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    4fac:	9b02      	ldr	r3, [sp, #8]
    4fae:	2b00      	cmp	r3, #0
    4fb0:	d003      	beq.n	4fba <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    4fb2:	9b02      	ldr	r3, [sp, #8]
    4fb4:	2b01      	cmp	r3, #1
    4fb6:	d007      	beq.n	4fc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    4fb8:	e00e      	b.n	4fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    4fba:	230b      	movs	r3, #11
    4fbc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4fbe:	9a05      	ldr	r2, [sp, #20]
    4fc0:	9b01      	ldr	r3, [sp, #4]
    4fc2:	4013      	ands	r3, r2
    4fc4:	9305      	str	r3, [sp, #20]
                break;
    4fc6:	e007      	b.n	4fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    4fc8:	2307      	movs	r3, #7
    4fca:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4fcc:	9a05      	ldr	r2, [sp, #20]
    4fce:	9b01      	ldr	r3, [sp, #4]
    4fd0:	4013      	ands	r3, r2
    4fd2:	9305      	str	r3, [sp, #20]
                break;
    4fd4:	e000      	b.n	4fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    4fd6:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    4fd8:	9b05      	ldr	r3, [sp, #20]
}
    4fda:	4618      	mov	r0, r3
    4fdc:	b006      	add	sp, #24
    4fde:	4770      	bx	lr
    4fe0:	4004a000 	.word	0x4004a000
    4fe4:	4004b000 	.word	0x4004b000

00004fe8 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    4fe8:	b500      	push	{lr}
    4fea:	b089      	sub	sp, #36	; 0x24
    4fec:	9003      	str	r0, [sp, #12]
    4fee:	9102      	str	r1, [sp, #8]
    4ff0:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    4ff2:	9b01      	ldr	r3, [sp, #4]
    4ff4:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    4ff6:	9b01      	ldr	r3, [sp, #4]
    4ff8:	2b08      	cmp	r3, #8
    4ffa:	d121      	bne.n	5040 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    4ffc:	4b13      	ldr	r3, [pc, #76]	; (504c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4ffe:	685b      	ldr	r3, [r3, #4]
    5000:	f003 030f 	and.w	r3, r3, #15
    5004:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5006:	9a06      	ldr	r2, [sp, #24]
    5008:	9902      	ldr	r1, [sp, #8]
    500a:	9803      	ldr	r0, [sp, #12]
    500c:	f7ff ff6e 	bl	4eec <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5010:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5012:	9b05      	ldr	r3, [sp, #20]
    5014:	2bff      	cmp	r3, #255	; 0xff
    5016:	d011      	beq.n	503c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5018:	f004 f878 	bl	910c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    501c:	4b0b      	ldr	r3, [pc, #44]	; (504c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    501e:	685b      	ldr	r3, [r3, #4]
    5020:	4a0a      	ldr	r2, [pc, #40]	; (504c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5022:	f023 030f 	bic.w	r3, r3, #15
    5026:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5028:	4b08      	ldr	r3, [pc, #32]	; (504c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    502a:	685a      	ldr	r2, [r3, #4]
    502c:	9b05      	ldr	r3, [sp, #20]
    502e:	f003 030f 	and.w	r3, r3, #15
    5032:	4906      	ldr	r1, [pc, #24]	; (504c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5034:	4313      	orrs	r3, r2
    5036:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5038:	f004 f894 	bl	9164 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    503c:	2300      	movs	r3, #0
    503e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5040:	9b07      	ldr	r3, [sp, #28]
}
    5042:	4618      	mov	r0, r3
    5044:	b009      	add	sp, #36	; 0x24
    5046:	f85d fb04 	ldr.w	pc, [sp], #4
    504a:	bf00      	nop
    504c:	40048000 	.word	0x40048000

00005050 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5050:	b500      	push	{lr}
    5052:	b087      	sub	sp, #28
    5054:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5056:	2300      	movs	r3, #0
    5058:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    505a:	2300      	movs	r3, #0
    505c:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    505e:	2300      	movs	r3, #0
    5060:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5062:	9b01      	ldr	r3, [sp, #4]
    5064:	68db      	ldr	r3, [r3, #12]
    5066:	2b02      	cmp	r3, #2
    5068:	d00a      	beq.n	5080 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    506a:	9b05      	ldr	r3, [sp, #20]
    506c:	f043 0302 	orr.w	r3, r3, #2
    5070:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5072:	9b01      	ldr	r3, [sp, #4]
    5074:	68db      	ldr	r3, [r3, #12]
    5076:	f003 0301 	and.w	r3, r3, #1
    507a:	9a05      	ldr	r2, [sp, #20]
    507c:	4313      	orrs	r3, r2
    507e:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5080:	9b01      	ldr	r3, [sp, #4]
    5082:	699b      	ldr	r3, [r3, #24]
    5084:	019b      	lsls	r3, r3, #6
    5086:	f003 0340 	and.w	r3, r3, #64	; 0x40
    508a:	9a05      	ldr	r2, [sp, #20]
    508c:	4313      	orrs	r3, r2
    508e:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5090:	9b01      	ldr	r3, [sp, #4]
    5092:	6a1b      	ldr	r3, [r3, #32]
    5094:	03db      	lsls	r3, r3, #15
    5096:	b29b      	uxth	r3, r3
    5098:	9a05      	ldr	r2, [sp, #20]
    509a:	4313      	orrs	r3, r2
    509c:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    509e:	9b01      	ldr	r3, [sp, #4]
    50a0:	7f1b      	ldrb	r3, [r3, #28]
    50a2:	2b00      	cmp	r3, #0
    50a4:	d001      	beq.n	50aa <Port_Ci_Port_Ip_PinInit+0x5a>
    50a6:	2310      	movs	r3, #16
    50a8:	e000      	b.n	50ac <Port_Ci_Port_Ip_PinInit+0x5c>
    50aa:	2300      	movs	r3, #0
    50ac:	9a05      	ldr	r2, [sp, #20]
    50ae:	4313      	orrs	r3, r2
    50b0:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    50b2:	9b01      	ldr	r3, [sp, #4]
    50b4:	691b      	ldr	r3, [r3, #16]
    50b6:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    50b8:	9b01      	ldr	r3, [sp, #4]
    50ba:	6818      	ldr	r0, [r3, #0]
    50bc:	9b01      	ldr	r3, [sp, #4]
    50be:	689b      	ldr	r3, [r3, #8]
    50c0:	9a04      	ldr	r2, [sp, #16]
    50c2:	4619      	mov	r1, r3
    50c4:	f7ff ff90 	bl	4fe8 <Port_Ci_Port_Ip_ConfigureInterleave>
    50c8:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    50ca:	9b03      	ldr	r3, [sp, #12]
    50cc:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    50ce:	9b04      	ldr	r3, [sp, #16]
    50d0:	021b      	lsls	r3, r3, #8
    50d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    50d6:	9a05      	ldr	r2, [sp, #20]
    50d8:	4313      	orrs	r3, r2
    50da:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    50dc:	f003 fe7c 	bl	8dd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    50e0:	9b01      	ldr	r3, [sp, #4]
    50e2:	681b      	ldr	r3, [r3, #0]
    50e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    50e8:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    50ea:	9b01      	ldr	r3, [sp, #4]
    50ec:	689b      	ldr	r3, [r3, #8]
    50ee:	2201      	movs	r2, #1
    50f0:	fa02 f303 	lsl.w	r3, r2, r3
    50f4:	43db      	mvns	r3, r3
    50f6:	9a02      	ldr	r2, [sp, #8]
    50f8:	4013      	ands	r3, r2
    50fa:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    50fc:	9b01      	ldr	r3, [sp, #4]
    50fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5102:	2b00      	cmp	r3, #0
    5104:	d001      	beq.n	510a <Port_Ci_Port_Ip_PinInit+0xba>
    5106:	2201      	movs	r2, #1
    5108:	e000      	b.n	510c <Port_Ci_Port_Ip_PinInit+0xbc>
    510a:	2200      	movs	r2, #0
    510c:	9b01      	ldr	r3, [sp, #4]
    510e:	689b      	ldr	r3, [r3, #8]
    5110:	fa02 f303 	lsl.w	r3, r2, r3
    5114:	9a02      	ldr	r2, [sp, #8]
    5116:	4313      	orrs	r3, r2
    5118:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    511a:	9b01      	ldr	r3, [sp, #4]
    511c:	681b      	ldr	r3, [r3, #0]
    511e:	9a02      	ldr	r2, [sp, #8]
    5120:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5124:	f003 fe84 	bl	8e30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5128:	9b04      	ldr	r3, [sp, #16]
    512a:	2b01      	cmp	r3, #1
    512c:	d16d      	bne.n	520a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    512e:	9b01      	ldr	r3, [sp, #4]
    5130:	695b      	ldr	r3, [r3, #20]
    5132:	2b02      	cmp	r3, #2
    5134:	d138      	bne.n	51a8 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    5136:	9b01      	ldr	r3, [sp, #4]
    5138:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    513c:	2b01      	cmp	r3, #1
    513e:	d10f      	bne.n	5160 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    5140:	f003 fe9c 	bl	8e7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    5144:	9b01      	ldr	r3, [sp, #4]
    5146:	685b      	ldr	r3, [r3, #4]
    5148:	6859      	ldr	r1, [r3, #4]
    514a:	9b01      	ldr	r3, [sp, #4]
    514c:	689b      	ldr	r3, [r3, #8]
    514e:	2201      	movs	r2, #1
    5150:	409a      	lsls	r2, r3
    5152:	9b01      	ldr	r3, [sp, #4]
    5154:	685b      	ldr	r3, [r3, #4]
    5156:	430a      	orrs	r2, r1
    5158:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    515a:	f003 febb 	bl	8ed4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    515e:	e013      	b.n	5188 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    5160:	9b01      	ldr	r3, [sp, #4]
    5162:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5166:	2b00      	cmp	r3, #0
    5168:	d10e      	bne.n	5188 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    516a:	f003 fed9 	bl	8f20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    516e:	9b01      	ldr	r3, [sp, #4]
    5170:	685b      	ldr	r3, [r3, #4]
    5172:	6899      	ldr	r1, [r3, #8]
    5174:	9b01      	ldr	r3, [sp, #4]
    5176:	689b      	ldr	r3, [r3, #8]
    5178:	2201      	movs	r2, #1
    517a:	409a      	lsls	r2, r3
    517c:	9b01      	ldr	r3, [sp, #4]
    517e:	685b      	ldr	r3, [r3, #4]
    5180:	430a      	orrs	r2, r1
    5182:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5184:	f003 fef8 	bl	8f78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5188:	f003 ff1c 	bl	8fc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    518c:	9b01      	ldr	r3, [sp, #4]
    518e:	685b      	ldr	r3, [r3, #4]
    5190:	6959      	ldr	r1, [r3, #20]
    5192:	9b01      	ldr	r3, [sp, #4]
    5194:	689b      	ldr	r3, [r3, #8]
    5196:	2201      	movs	r2, #1
    5198:	409a      	lsls	r2, r3
    519a:	9b01      	ldr	r3, [sp, #4]
    519c:	685b      	ldr	r3, [r3, #4]
    519e:	430a      	orrs	r2, r1
    51a0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    51a2:	f003 ff3b 	bl	901c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    51a6:	e030      	b.n	520a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    51a8:	f003 ff0c 	bl	8fc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    51ac:	9b01      	ldr	r3, [sp, #4]
    51ae:	685b      	ldr	r3, [r3, #4]
    51b0:	6959      	ldr	r1, [r3, #20]
    51b2:	9b01      	ldr	r3, [sp, #4]
    51b4:	689b      	ldr	r3, [r3, #8]
    51b6:	2201      	movs	r2, #1
    51b8:	fa02 f303 	lsl.w	r3, r2, r3
    51bc:	43da      	mvns	r2, r3
    51be:	9b01      	ldr	r3, [sp, #4]
    51c0:	685b      	ldr	r3, [r3, #4]
    51c2:	400a      	ands	r2, r1
    51c4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    51c6:	f003 ff29 	bl	901c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    51ca:	f003 ff4d 	bl	9068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    51ce:	9b01      	ldr	r3, [sp, #4]
    51d0:	685b      	ldr	r3, [r3, #4]
    51d2:	6999      	ldr	r1, [r3, #24]
    51d4:	9b01      	ldr	r3, [sp, #4]
    51d6:	689b      	ldr	r3, [r3, #8]
    51d8:	2201      	movs	r2, #1
    51da:	fa02 f303 	lsl.w	r3, r2, r3
    51de:	43da      	mvns	r2, r3
    51e0:	9b01      	ldr	r3, [sp, #4]
    51e2:	685b      	ldr	r3, [r3, #4]
    51e4:	400a      	ands	r2, r1
    51e6:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    51e8:	9b01      	ldr	r3, [sp, #4]
    51ea:	695b      	ldr	r3, [r3, #20]
    51ec:	2b03      	cmp	r3, #3
    51ee:	d10a      	bne.n	5206 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    51f0:	9b01      	ldr	r3, [sp, #4]
    51f2:	685b      	ldr	r3, [r3, #4]
    51f4:	6999      	ldr	r1, [r3, #24]
    51f6:	9b01      	ldr	r3, [sp, #4]
    51f8:	689b      	ldr	r3, [r3, #8]
    51fa:	2201      	movs	r2, #1
    51fc:	409a      	lsls	r2, r3
    51fe:	9b01      	ldr	r3, [sp, #4]
    5200:	685b      	ldr	r3, [r3, #4]
    5202:	430a      	orrs	r2, r1
    5204:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    5206:	f003 ff5b 	bl	90c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    520a:	9b01      	ldr	r3, [sp, #4]
    520c:	681b      	ldr	r3, [r3, #0]
    520e:	9a01      	ldr	r2, [sp, #4]
    5210:	6892      	ldr	r2, [r2, #8]
    5212:	9905      	ldr	r1, [sp, #20]
    5214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5218:	bf00      	nop
    521a:	b007      	add	sp, #28
    521c:	f85d fb04 	ldr.w	pc, [sp], #4

00005220 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    5220:	b500      	push	{lr}
    5222:	b085      	sub	sp, #20
    5224:	9001      	str	r0, [sp, #4]
    5226:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    5228:	2300      	movs	r3, #0
    522a:	9303      	str	r3, [sp, #12]
    522c:	e00d      	b.n	524a <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    522e:	9a03      	ldr	r2, [sp, #12]
    5230:	4613      	mov	r3, r2
    5232:	009b      	lsls	r3, r3, #2
    5234:	4413      	add	r3, r2
    5236:	00db      	lsls	r3, r3, #3
    5238:	461a      	mov	r2, r3
    523a:	9b00      	ldr	r3, [sp, #0]
    523c:	4413      	add	r3, r2
    523e:	4618      	mov	r0, r3
    5240:	f7ff ff06 	bl	5050 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    5244:	9b03      	ldr	r3, [sp, #12]
    5246:	3301      	adds	r3, #1
    5248:	9303      	str	r3, [sp, #12]
    524a:	9a03      	ldr	r2, [sp, #12]
    524c:	9b01      	ldr	r3, [sp, #4]
    524e:	429a      	cmp	r2, r3
    5250:	d3ed      	bcc.n	522e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    5252:	2300      	movs	r3, #0
}
    5254:	4618      	mov	r0, r3
    5256:	b005      	add	sp, #20
    5258:	f85d fb04 	ldr.w	pc, [sp], #4

0000525c <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    525c:	b500      	push	{lr}
    525e:	b087      	sub	sp, #28
    5260:	9003      	str	r0, [sp, #12]
    5262:	9102      	str	r1, [sp, #8]
    5264:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    5266:	9a01      	ldr	r2, [sp, #4]
    5268:	9902      	ldr	r1, [sp, #8]
    526a:	9803      	ldr	r0, [sp, #12]
    526c:	f7ff febc 	bl	4fe8 <Port_Ci_Port_Ip_ConfigureInterleave>
    5270:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    5272:	f003 ff9d 	bl	91b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    5276:	9b03      	ldr	r3, [sp, #12]
    5278:	9a02      	ldr	r2, [sp, #8]
    527a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    527e:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    5280:	9b04      	ldr	r3, [sp, #16]
    5282:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5286:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5288:	9b05      	ldr	r3, [sp, #20]
    528a:	021b      	lsls	r3, r3, #8
    528c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5290:	9a04      	ldr	r2, [sp, #16]
    5292:	4313      	orrs	r3, r2
    5294:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5296:	9b03      	ldr	r3, [sp, #12]
    5298:	9a02      	ldr	r2, [sp, #8]
    529a:	9904      	ldr	r1, [sp, #16]
    529c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    52a0:	f003 ffb2 	bl	9208 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    52a4:	bf00      	nop
    52a6:	b007      	add	sp, #28
    52a8:	f85d fb04 	ldr.w	pc, [sp], #4

000052ac <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    52ac:	b500      	push	{lr}
    52ae:	b083      	sub	sp, #12
    52b0:	9001      	str	r0, [sp, #4]
    52b2:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    52b4:	f003 ffce 	bl	9254 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    52b8:	9b01      	ldr	r3, [sp, #4]
    52ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    52be:	2101      	movs	r1, #1
    52c0:	9b00      	ldr	r3, [sp, #0]
    52c2:	fa01 f303 	lsl.w	r3, r1, r3
    52c6:	431a      	orrs	r2, r3
    52c8:	9b01      	ldr	r3, [sp, #4]
    52ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    52ce:	f003 ffed 	bl	92ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    52d2:	bf00      	nop
    52d4:	b003      	add	sp, #12
    52d6:	f85d fb04 	ldr.w	pc, [sp], #4

000052da <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    52da:	b500      	push	{lr}
    52dc:	b083      	sub	sp, #12
    52de:	9001      	str	r0, [sp, #4]
    52e0:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    52e2:	f004 f809 	bl	92f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    52e6:	9b01      	ldr	r3, [sp, #4]
    52e8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    52ec:	2101      	movs	r1, #1
    52ee:	9b00      	ldr	r3, [sp, #0]
    52f0:	fa01 f303 	lsl.w	r3, r1, r3
    52f4:	43db      	mvns	r3, r3
    52f6:	401a      	ands	r2, r3
    52f8:	9b01      	ldr	r3, [sp, #4]
    52fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    52fe:	f004 f827 	bl	9350 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    5302:	bf00      	nop
    5304:	b003      	add	sp, #12
    5306:	f85d fb04 	ldr.w	pc, [sp], #4

0000530a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    530a:	b082      	sub	sp, #8
    530c:	9001      	str	r0, [sp, #4]
    530e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    5310:	9b00      	ldr	r3, [sp, #0]
    5312:	785b      	ldrb	r3, [r3, #1]
    5314:	f003 0201 	and.w	r2, r3, #1
    5318:	9b01      	ldr	r3, [sp, #4]
    531a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    531e:	9b00      	ldr	r3, [sp, #0]
    5320:	789b      	ldrb	r3, [r3, #2]
    5322:	f003 021f 	and.w	r2, r3, #31
    5326:	9b01      	ldr	r3, [sp, #4]
    5328:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    532c:	bf00      	nop
    532e:	b002      	add	sp, #8
    5330:	4770      	bx	lr

00005332 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    5332:	b086      	sub	sp, #24
    5334:	9003      	str	r0, [sp, #12]
    5336:	9301      	str	r3, [sp, #4]
    5338:	460b      	mov	r3, r1
    533a:	f8ad 300a 	strh.w	r3, [sp, #10]
    533e:	4613      	mov	r3, r2
    5340:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    5344:	2300      	movs	r3, #0
    5346:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    534a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    534e:	f043 0301 	orr.w	r3, r3, #1
    5352:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    5356:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    535a:	f043 0302 	orr.w	r3, r3, #2
    535e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    5362:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5366:	f043 0310 	orr.w	r3, r3, #16
    536a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    536e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5376:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    537a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    537e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    5382:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5386:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    538a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    538e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    5392:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5396:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    539a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    539e:	4013      	ands	r3, r2
    53a0:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    53a4:	9b01      	ldr	r3, [sp, #4]
    53a6:	2b00      	cmp	r3, #0
    53a8:	d003      	beq.n	53b2 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    53aa:	9b01      	ldr	r3, [sp, #4]
    53ac:	2b01      	cmp	r3, #1
    53ae:	d00a      	beq.n	53c6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    53b0:	e013      	b.n	53da <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    53b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    53b6:	041a      	lsls	r2, r3, #16
    53b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53bc:	431a      	orrs	r2, r3
    53be:	9b03      	ldr	r3, [sp, #12]
    53c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    53c4:	e009      	b.n	53da <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    53c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    53ca:	041a      	lsls	r2, r3, #16
    53cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53d0:	431a      	orrs	r2, r3
    53d2:	9b03      	ldr	r3, [sp, #12]
    53d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    53d8:	bf00      	nop
    }
}
    53da:	bf00      	nop
    53dc:	b006      	add	sp, #24
    53de:	4770      	bx	lr

000053e0 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    53e0:	b500      	push	{lr}
    53e2:	b087      	sub	sp, #28
    53e4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    53e6:	9b01      	ldr	r3, [sp, #4]
    53e8:	885b      	ldrh	r3, [r3, #2]
    53ea:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    53ee:	9b01      	ldr	r3, [sp, #4]
    53f0:	689b      	ldr	r3, [r3, #8]
    53f2:	7a1b      	ldrb	r3, [r3, #8]
    53f4:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    53f8:	9b01      	ldr	r3, [sp, #4]
    53fa:	689b      	ldr	r3, [r3, #8]
    53fc:	681b      	ldr	r3, [r3, #0]
    53fe:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    5400:	9b01      	ldr	r3, [sp, #4]
    5402:	689b      	ldr	r3, [r3, #8]
    5404:	685b      	ldr	r3, [r3, #4]
    5406:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5408:	2300      	movs	r3, #0
    540a:	f8ad 3016 	strh.w	r3, [sp, #22]
    540e:	e111      	b.n	5634 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    5410:	9b02      	ldr	r3, [sp, #8]
    5412:	2b02      	cmp	r3, #2
    5414:	d169      	bne.n	54ea <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    5416:	f89d 3013 	ldrb.w	r3, [sp, #19]
    541a:	2b01      	cmp	r3, #1
    541c:	d11a      	bne.n	5454 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    541e:	9b01      	ldr	r3, [sp, #4]
    5420:	685a      	ldr	r2, [r3, #4]
    5422:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5426:	005b      	lsls	r3, r3, #1
    5428:	4413      	add	r3, r2
    542a:	881b      	ldrh	r3, [r3, #0]
    542c:	f003 021f 	and.w	r2, r3, #31
    5430:	9b01      	ldr	r3, [sp, #4]
    5432:	6859      	ldr	r1, [r3, #4]
    5434:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5438:	005b      	lsls	r3, r3, #1
    543a:	440b      	add	r3, r1
    543c:	881b      	ldrh	r3, [r3, #0]
    543e:	095b      	lsrs	r3, r3, #5
    5440:	b29b      	uxth	r3, r3
    5442:	4619      	mov	r1, r3
    5444:	4b81      	ldr	r3, [pc, #516]	; (564c <Port_Ipw_Init_UnusedPins+0x26c>)
    5446:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    544a:	2101      	movs	r1, #1
    544c:	fa01 f202 	lsl.w	r2, r1, r2
    5450:	605a      	str	r2, [r3, #4]
    5452:	e01d      	b.n	5490 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    5454:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5458:	2b00      	cmp	r3, #0
    545a:	d119      	bne.n	5490 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    545c:	9b01      	ldr	r3, [sp, #4]
    545e:	685a      	ldr	r2, [r3, #4]
    5460:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5464:	005b      	lsls	r3, r3, #1
    5466:	4413      	add	r3, r2
    5468:	881b      	ldrh	r3, [r3, #0]
    546a:	f003 021f 	and.w	r2, r3, #31
    546e:	9b01      	ldr	r3, [sp, #4]
    5470:	6859      	ldr	r1, [r3, #4]
    5472:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5476:	005b      	lsls	r3, r3, #1
    5478:	440b      	add	r3, r1
    547a:	881b      	ldrh	r3, [r3, #0]
    547c:	095b      	lsrs	r3, r3, #5
    547e:	b29b      	uxth	r3, r3
    5480:	4619      	mov	r1, r3
    5482:	4b72      	ldr	r3, [pc, #456]	; (564c <Port_Ipw_Init_UnusedPins+0x26c>)
    5484:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5488:	2101      	movs	r1, #1
    548a:	fa01 f202 	lsl.w	r2, r1, r2
    548e:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5490:	f003 ff84 	bl	939c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5494:	9b01      	ldr	r3, [sp, #4]
    5496:	685a      	ldr	r2, [r3, #4]
    5498:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    549c:	005b      	lsls	r3, r3, #1
    549e:	4413      	add	r3, r2
    54a0:	881b      	ldrh	r3, [r3, #0]
    54a2:	095b      	lsrs	r3, r3, #5
    54a4:	b29b      	uxth	r3, r3
    54a6:	461a      	mov	r2, r3
    54a8:	4b68      	ldr	r3, [pc, #416]	; (564c <Port_Ipw_Init_UnusedPins+0x26c>)
    54aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54ae:	6959      	ldr	r1, [r3, #20]
    54b0:	9b01      	ldr	r3, [sp, #4]
    54b2:	685a      	ldr	r2, [r3, #4]
    54b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54b8:	005b      	lsls	r3, r3, #1
    54ba:	4413      	add	r3, r2
    54bc:	881b      	ldrh	r3, [r3, #0]
    54be:	f003 031f 	and.w	r3, r3, #31
    54c2:	2201      	movs	r2, #1
    54c4:	409a      	lsls	r2, r3
    54c6:	9b01      	ldr	r3, [sp, #4]
    54c8:	6858      	ldr	r0, [r3, #4]
    54ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54ce:	005b      	lsls	r3, r3, #1
    54d0:	4403      	add	r3, r0
    54d2:	881b      	ldrh	r3, [r3, #0]
    54d4:	095b      	lsrs	r3, r3, #5
    54d6:	b29b      	uxth	r3, r3
    54d8:	4618      	mov	r0, r3
    54da:	4b5c      	ldr	r3, [pc, #368]	; (564c <Port_Ipw_Init_UnusedPins+0x26c>)
    54dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    54e0:	430a      	orrs	r2, r1
    54e2:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    54e4:	f003 ff86 	bl	93f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    54e8:	e086      	b.n	55f8 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    54ea:	f003 ff57 	bl	939c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    54ee:	9b01      	ldr	r3, [sp, #4]
    54f0:	685a      	ldr	r2, [r3, #4]
    54f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54f6:	005b      	lsls	r3, r3, #1
    54f8:	4413      	add	r3, r2
    54fa:	881b      	ldrh	r3, [r3, #0]
    54fc:	095b      	lsrs	r3, r3, #5
    54fe:	b29b      	uxth	r3, r3
    5500:	461a      	mov	r2, r3
    5502:	4b52      	ldr	r3, [pc, #328]	; (564c <Port_Ipw_Init_UnusedPins+0x26c>)
    5504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5508:	6959      	ldr	r1, [r3, #20]
    550a:	9b01      	ldr	r3, [sp, #4]
    550c:	685a      	ldr	r2, [r3, #4]
    550e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5512:	005b      	lsls	r3, r3, #1
    5514:	4413      	add	r3, r2
    5516:	881b      	ldrh	r3, [r3, #0]
    5518:	f003 031f 	and.w	r3, r3, #31
    551c:	2201      	movs	r2, #1
    551e:	fa02 f303 	lsl.w	r3, r2, r3
    5522:	43da      	mvns	r2, r3
    5524:	9b01      	ldr	r3, [sp, #4]
    5526:	6858      	ldr	r0, [r3, #4]
    5528:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    552c:	005b      	lsls	r3, r3, #1
    552e:	4403      	add	r3, r0
    5530:	881b      	ldrh	r3, [r3, #0]
    5532:	095b      	lsrs	r3, r3, #5
    5534:	b29b      	uxth	r3, r3
    5536:	4618      	mov	r0, r3
    5538:	4b44      	ldr	r3, [pc, #272]	; (564c <Port_Ipw_Init_UnusedPins+0x26c>)
    553a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    553e:	400a      	ands	r2, r1
    5540:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5542:	f003 ff57 	bl	93f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5546:	f003 ff7b 	bl	9440 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    554a:	9b01      	ldr	r3, [sp, #4]
    554c:	685a      	ldr	r2, [r3, #4]
    554e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5552:	005b      	lsls	r3, r3, #1
    5554:	4413      	add	r3, r2
    5556:	881b      	ldrh	r3, [r3, #0]
    5558:	095b      	lsrs	r3, r3, #5
    555a:	b29b      	uxth	r3, r3
    555c:	461a      	mov	r2, r3
    555e:	4b3b      	ldr	r3, [pc, #236]	; (564c <Port_Ipw_Init_UnusedPins+0x26c>)
    5560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5564:	6999      	ldr	r1, [r3, #24]
    5566:	9b01      	ldr	r3, [sp, #4]
    5568:	685a      	ldr	r2, [r3, #4]
    556a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    556e:	005b      	lsls	r3, r3, #1
    5570:	4413      	add	r3, r2
    5572:	881b      	ldrh	r3, [r3, #0]
    5574:	f003 031f 	and.w	r3, r3, #31
    5578:	2201      	movs	r2, #1
    557a:	fa02 f303 	lsl.w	r3, r2, r3
    557e:	43da      	mvns	r2, r3
    5580:	9b01      	ldr	r3, [sp, #4]
    5582:	6858      	ldr	r0, [r3, #4]
    5584:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5588:	005b      	lsls	r3, r3, #1
    558a:	4403      	add	r3, r0
    558c:	881b      	ldrh	r3, [r3, #0]
    558e:	095b      	lsrs	r3, r3, #5
    5590:	b29b      	uxth	r3, r3
    5592:	4618      	mov	r0, r3
    5594:	4b2d      	ldr	r3, [pc, #180]	; (564c <Port_Ipw_Init_UnusedPins+0x26c>)
    5596:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    559a:	400a      	ands	r2, r1
    559c:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    559e:	9b02      	ldr	r3, [sp, #8]
    55a0:	2b03      	cmp	r3, #3
    55a2:	d127      	bne.n	55f4 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    55a4:	9b01      	ldr	r3, [sp, #4]
    55a6:	685a      	ldr	r2, [r3, #4]
    55a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55ac:	005b      	lsls	r3, r3, #1
    55ae:	4413      	add	r3, r2
    55b0:	881b      	ldrh	r3, [r3, #0]
    55b2:	095b      	lsrs	r3, r3, #5
    55b4:	b29b      	uxth	r3, r3
    55b6:	461a      	mov	r2, r3
    55b8:	4b24      	ldr	r3, [pc, #144]	; (564c <Port_Ipw_Init_UnusedPins+0x26c>)
    55ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    55be:	6999      	ldr	r1, [r3, #24]
    55c0:	9b01      	ldr	r3, [sp, #4]
    55c2:	685a      	ldr	r2, [r3, #4]
    55c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55c8:	005b      	lsls	r3, r3, #1
    55ca:	4413      	add	r3, r2
    55cc:	881b      	ldrh	r3, [r3, #0]
    55ce:	f003 031f 	and.w	r3, r3, #31
    55d2:	2201      	movs	r2, #1
    55d4:	409a      	lsls	r2, r3
    55d6:	9b01      	ldr	r3, [sp, #4]
    55d8:	6858      	ldr	r0, [r3, #4]
    55da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55de:	005b      	lsls	r3, r3, #1
    55e0:	4403      	add	r3, r0
    55e2:	881b      	ldrh	r3, [r3, #0]
    55e4:	095b      	lsrs	r3, r3, #5
    55e6:	b29b      	uxth	r3, r3
    55e8:	4618      	mov	r0, r3
    55ea:	4b18      	ldr	r3, [pc, #96]	; (564c <Port_Ipw_Init_UnusedPins+0x26c>)
    55ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    55f0:	430a      	orrs	r2, r1
    55f2:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    55f4:	f003 ff50 	bl	9498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    55f8:	9b01      	ldr	r3, [sp, #4]
    55fa:	685a      	ldr	r2, [r3, #4]
    55fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5600:	005b      	lsls	r3, r3, #1
    5602:	4413      	add	r3, r2
    5604:	881b      	ldrh	r3, [r3, #0]
    5606:	095b      	lsrs	r3, r3, #5
    5608:	b29b      	uxth	r3, r3
    560a:	461a      	mov	r2, r3
    560c:	4b10      	ldr	r3, [pc, #64]	; (5650 <Port_Ipw_Init_UnusedPins+0x270>)
    560e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5612:	9a01      	ldr	r2, [sp, #4]
    5614:	6851      	ldr	r1, [r2, #4]
    5616:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    561a:	0052      	lsls	r2, r2, #1
    561c:	440a      	add	r2, r1
    561e:	8812      	ldrh	r2, [r2, #0]
    5620:	f002 021f 	and.w	r2, r2, #31
    5624:	9903      	ldr	r1, [sp, #12]
    5626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    562a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    562e:	3301      	adds	r3, #1
    5630:	f8ad 3016 	strh.w	r3, [sp, #22]
    5634:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5638:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    563c:	429a      	cmp	r2, r3
    563e:	f4ff aee7 	bcc.w	5410 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    5642:	bf00      	nop
    5644:	bf00      	nop
    5646:	b007      	add	sp, #28
    5648:	f85d fb04 	ldr.w	pc, [sp], #4
    564c:	0000bdd0 	.word	0x0000bdd0
    5650:	0000bdbc 	.word	0x0000bdbc

00005654 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5654:	b500      	push	{lr}
    5656:	b085      	sub	sp, #20
    5658:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    565a:	9b01      	ldr	r3, [sp, #4]
    565c:	7c1b      	ldrb	r3, [r3, #16]
    565e:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5662:	2300      	movs	r3, #0
    5664:	f8ad 300e 	strh.w	r3, [sp, #14]
    5668:	e035      	b.n	56d6 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    566a:	9b01      	ldr	r3, [sp, #4]
    566c:	695a      	ldr	r2, [r3, #20]
    566e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5672:	00db      	lsls	r3, r3, #3
    5674:	4413      	add	r3, r2
    5676:	781b      	ldrb	r3, [r3, #0]
    5678:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    567c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5680:	4a1f      	ldr	r2, [pc, #124]	; (5700 <Port_Ipw_Init+0xac>)
    5682:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5686:	9b01      	ldr	r3, [sp, #4]
    5688:	695a      	ldr	r2, [r3, #20]
    568a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    568e:	00db      	lsls	r3, r3, #3
    5690:	4413      	add	r3, r2
    5692:	4619      	mov	r1, r3
    5694:	f7ff fe39 	bl	530a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5698:	f004 f86c 	bl	9774 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    569c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    56a0:	4a17      	ldr	r2, [pc, #92]	; (5700 <Port_Ipw_Init+0xac>)
    56a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    56a6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    56aa:	9b01      	ldr	r3, [sp, #4]
    56ac:	695a      	ldr	r2, [r3, #20]
    56ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    56b2:	00db      	lsls	r3, r3, #3
    56b4:	4413      	add	r3, r2
    56b6:	685a      	ldr	r2, [r3, #4]
    56b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    56bc:	4810      	ldr	r0, [pc, #64]	; (5700 <Port_Ipw_Init+0xac>)
    56be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    56c2:	430a      	orrs	r2, r1
    56c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    56c8:	f004 f880 	bl	97cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    56cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    56d0:	3301      	adds	r3, #1
    56d2:	f8ad 300e 	strh.w	r3, [sp, #14]
    56d6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    56da:	b29b      	uxth	r3, r3
    56dc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56e0:	429a      	cmp	r2, r3
    56e2:	d3c2      	bcc.n	566a <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    56e4:	9b01      	ldr	r3, [sp, #4]
    56e6:	6a1b      	ldr	r3, [r3, #32]
    56e8:	4619      	mov	r1, r3
    56ea:	2001      	movs	r0, #1
    56ec:	f7ff fd98 	bl	5220 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    56f0:	9801      	ldr	r0, [sp, #4]
    56f2:	f7ff fe75 	bl	53e0 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    56f6:	bf00      	nop
    56f8:	b005      	add	sp, #20
    56fa:	f85d fb04 	ldr.w	pc, [sp], #4
    56fe:	bf00      	nop
    5700:	0000bdbc 	.word	0x0000bdbc

00005704 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5704:	b500      	push	{lr}
    5706:	b085      	sub	sp, #20
    5708:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    570a:	9b01      	ldr	r3, [sp, #4]
    570c:	881b      	ldrh	r3, [r3, #0]
    570e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5712:	2300      	movs	r3, #0
    5714:	f8ad 300e 	strh.w	r3, [sp, #14]
    5718:	e0d2      	b.n	58c0 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    571a:	9b01      	ldr	r3, [sp, #4]
    571c:	68d9      	ldr	r1, [r3, #12]
    571e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5722:	4613      	mov	r3, r2
    5724:	009b      	lsls	r3, r3, #2
    5726:	4413      	add	r3, r2
    5728:	009b      	lsls	r3, r3, #2
    572a:	440b      	add	r3, r1
    572c:	7c5b      	ldrb	r3, [r3, #17]
    572e:	f083 0301 	eor.w	r3, r3, #1
    5732:	b2db      	uxtb	r3, r3
    5734:	2b00      	cmp	r3, #0
    5736:	f000 80be 	beq.w	58b6 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    573a:	9b01      	ldr	r3, [sp, #4]
    573c:	68d9      	ldr	r1, [r3, #12]
    573e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5742:	4613      	mov	r3, r2
    5744:	009b      	lsls	r3, r3, #2
    5746:	4413      	add	r3, r2
    5748:	009b      	lsls	r3, r3, #2
    574a:	440b      	add	r3, r1
    574c:	7c1b      	ldrb	r3, [r3, #16]
    574e:	2b00      	cmp	r3, #0
    5750:	f000 80b1 	beq.w	58b6 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    5754:	9b01      	ldr	r3, [sp, #4]
    5756:	68d9      	ldr	r1, [r3, #12]
    5758:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    575c:	4613      	mov	r3, r2
    575e:	009b      	lsls	r3, r3, #2
    5760:	4413      	add	r3, r2
    5762:	009b      	lsls	r3, r3, #2
    5764:	440b      	add	r3, r1
    5766:	881b      	ldrh	r3, [r3, #0]
    5768:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    576c:	9b01      	ldr	r3, [sp, #4]
    576e:	68d9      	ldr	r1, [r3, #12]
    5770:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5774:	4613      	mov	r3, r2
    5776:	009b      	lsls	r3, r3, #2
    5778:	4413      	add	r3, r2
    577a:	009b      	lsls	r3, r3, #2
    577c:	440b      	add	r3, r1
    577e:	68db      	ldr	r3, [r3, #12]
    5780:	2b02      	cmp	r3, #2
    5782:	d11d      	bne.n	57c0 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5784:	f004 f93e 	bl	9a04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5788:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    578c:	095b      	lsrs	r3, r3, #5
    578e:	b29b      	uxth	r3, r3
    5790:	461a      	mov	r2, r3
    5792:	4b51      	ldr	r3, [pc, #324]	; (58d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5798:	6959      	ldr	r1, [r3, #20]
    579a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    579e:	f003 031f 	and.w	r3, r3, #31
    57a2:	2201      	movs	r2, #1
    57a4:	409a      	lsls	r2, r3
    57a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57aa:	095b      	lsrs	r3, r3, #5
    57ac:	b29b      	uxth	r3, r3
    57ae:	4618      	mov	r0, r3
    57b0:	4b49      	ldr	r3, [pc, #292]	; (58d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    57b6:	430a      	orrs	r2, r1
    57b8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    57ba:	f004 f94f 	bl	9a5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    57be:	e07a      	b.n	58b6 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    57c0:	9b01      	ldr	r3, [sp, #4]
    57c2:	68d9      	ldr	r1, [r3, #12]
    57c4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    57c8:	4613      	mov	r3, r2
    57ca:	009b      	lsls	r3, r3, #2
    57cc:	4413      	add	r3, r2
    57ce:	009b      	lsls	r3, r3, #2
    57d0:	440b      	add	r3, r1
    57d2:	68db      	ldr	r3, [r3, #12]
    57d4:	2b01      	cmp	r3, #1
    57d6:	d00b      	beq.n	57f0 <Port_Ipw_RefreshPortDirection+0xec>
    57d8:	9b01      	ldr	r3, [sp, #4]
    57da:	68d9      	ldr	r1, [r3, #12]
    57dc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    57e0:	4613      	mov	r3, r2
    57e2:	009b      	lsls	r3, r3, #2
    57e4:	4413      	add	r3, r2
    57e6:	009b      	lsls	r3, r3, #2
    57e8:	440b      	add	r3, r1
    57ea:	68db      	ldr	r3, [r3, #12]
    57ec:	2b03      	cmp	r3, #3
    57ee:	d162      	bne.n	58b6 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    57f0:	f004 f908 	bl	9a04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    57f4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57f8:	095b      	lsrs	r3, r3, #5
    57fa:	b29b      	uxth	r3, r3
    57fc:	461a      	mov	r2, r3
    57fe:	4b36      	ldr	r3, [pc, #216]	; (58d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5804:	6959      	ldr	r1, [r3, #20]
    5806:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    580a:	f003 031f 	and.w	r3, r3, #31
    580e:	2201      	movs	r2, #1
    5810:	fa02 f303 	lsl.w	r3, r2, r3
    5814:	43da      	mvns	r2, r3
    5816:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    581a:	095b      	lsrs	r3, r3, #5
    581c:	b29b      	uxth	r3, r3
    581e:	4618      	mov	r0, r3
    5820:	4b2d      	ldr	r3, [pc, #180]	; (58d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5822:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5826:	400a      	ands	r2, r1
    5828:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    582a:	f004 f917 	bl	9a5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    582e:	f004 f93b 	bl	9aa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5832:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5836:	095b      	lsrs	r3, r3, #5
    5838:	b29b      	uxth	r3, r3
    583a:	461a      	mov	r2, r3
    583c:	4b26      	ldr	r3, [pc, #152]	; (58d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    583e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5842:	6999      	ldr	r1, [r3, #24]
    5844:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5848:	f003 031f 	and.w	r3, r3, #31
    584c:	2201      	movs	r2, #1
    584e:	fa02 f303 	lsl.w	r3, r2, r3
    5852:	43da      	mvns	r2, r3
    5854:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5858:	095b      	lsrs	r3, r3, #5
    585a:	b29b      	uxth	r3, r3
    585c:	4618      	mov	r0, r3
    585e:	4b1e      	ldr	r3, [pc, #120]	; (58d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5860:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5864:	400a      	ands	r2, r1
    5866:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5868:	9b01      	ldr	r3, [sp, #4]
    586a:	68d9      	ldr	r1, [r3, #12]
    586c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5870:	4613      	mov	r3, r2
    5872:	009b      	lsls	r3, r3, #2
    5874:	4413      	add	r3, r2
    5876:	009b      	lsls	r3, r3, #2
    5878:	440b      	add	r3, r1
    587a:	68db      	ldr	r3, [r3, #12]
    587c:	2b03      	cmp	r3, #3
    587e:	d118      	bne.n	58b2 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5880:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5884:	095b      	lsrs	r3, r3, #5
    5886:	b29b      	uxth	r3, r3
    5888:	461a      	mov	r2, r3
    588a:	4b13      	ldr	r3, [pc, #76]	; (58d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    588c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5890:	6999      	ldr	r1, [r3, #24]
    5892:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5896:	f003 031f 	and.w	r3, r3, #31
    589a:	2201      	movs	r2, #1
    589c:	409a      	lsls	r2, r3
    589e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    58a2:	095b      	lsrs	r3, r3, #5
    58a4:	b29b      	uxth	r3, r3
    58a6:	4618      	mov	r0, r3
    58a8:	4b0b      	ldr	r3, [pc, #44]	; (58d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    58aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    58ae:	430a      	orrs	r2, r1
    58b0:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    58b2:	f004 f925 	bl	9b00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    58b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    58ba:	3301      	adds	r3, #1
    58bc:	f8ad 300e 	strh.w	r3, [sp, #14]
    58c0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    58c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    58c8:	429a      	cmp	r2, r3
    58ca:	f4ff af26 	bcc.w	571a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    58ce:	bf00      	nop
    58d0:	bf00      	nop
    58d2:	b005      	add	sp, #20
    58d4:	f85d fb04 	ldr.w	pc, [sp], #4
    58d8:	0000bdd0 	.word	0x0000bdd0

000058dc <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    58dc:	b082      	sub	sp, #8
    58de:	9001      	str	r0, [sp, #4]
    58e0:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    58e2:	9b01      	ldr	r3, [sp, #4]
    58e4:	681b      	ldr	r3, [r3, #0]
    58e6:	f023 0207 	bic.w	r2, r3, #7
    58ea:	9b00      	ldr	r3, [sp, #0]
    58ec:	f003 0307 	and.w	r3, r3, #7
    58f0:	431a      	orrs	r2, r3
    58f2:	9b01      	ldr	r3, [sp, #4]
    58f4:	601a      	str	r2, [r3, #0]
}
    58f6:	bf00      	nop
    58f8:	b002      	add	sp, #8
    58fa:	4770      	bx	lr

000058fc <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    58fc:	b082      	sub	sp, #8
    58fe:	9001      	str	r0, [sp, #4]
    5900:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    5902:	9b01      	ldr	r3, [sp, #4]
    5904:	681b      	ldr	r3, [r3, #0]
    5906:	f023 0218 	bic.w	r2, r3, #24
    590a:	9b00      	ldr	r3, [sp, #0]
    590c:	00db      	lsls	r3, r3, #3
    590e:	f003 0318 	and.w	r3, r3, #24
    5912:	431a      	orrs	r2, r3
    5914:	9b01      	ldr	r3, [sp, #4]
    5916:	601a      	str	r2, [r3, #0]
}
    5918:	bf00      	nop
    591a:	b002      	add	sp, #8
    591c:	4770      	bx	lr

0000591e <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    591e:	b082      	sub	sp, #8
    5920:	9001      	str	r0, [sp, #4]
    5922:	460b      	mov	r3, r1
    5924:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    5928:	9b01      	ldr	r3, [sp, #4]
    592a:	681b      	ldr	r3, [r3, #0]
    592c:	f023 0320 	bic.w	r3, r3, #32
    5930:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5934:	2a00      	cmp	r2, #0
    5936:	d001      	beq.n	593c <Ftm_Pwm_Ip_SetCpwms+0x1e>
    5938:	2220      	movs	r2, #32
    593a:	e000      	b.n	593e <Ftm_Pwm_Ip_SetCpwms+0x20>
    593c:	2200      	movs	r2, #0
    593e:	431a      	orrs	r2, r3
    5940:	9b01      	ldr	r3, [sp, #4]
    5942:	601a      	str	r2, [r3, #0]
}
    5944:	bf00      	nop
    5946:	b002      	add	sp, #8
    5948:	4770      	bx	lr

0000594a <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    594a:	b082      	sub	sp, #8
    594c:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    594e:	9b01      	ldr	r3, [sp, #4]
    5950:	681b      	ldr	r3, [r3, #0]
    5952:	f003 0320 	and.w	r3, r3, #32
    5956:	2b00      	cmp	r3, #0
    5958:	bf14      	ite	ne
    595a:	2301      	movne	r3, #1
    595c:	2300      	moveq	r3, #0
    595e:	b2db      	uxtb	r3, r3
}
    5960:	4618      	mov	r0, r3
    5962:	b002      	add	sp, #8
    5964:	4770      	bx	lr

00005966 <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    5966:	b082      	sub	sp, #8
    5968:	9001      	str	r0, [sp, #4]
    596a:	460b      	mov	r3, r1
    596c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    5970:	9b01      	ldr	r3, [sp, #4]
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5978:	f89d 2003 	ldrb.w	r2, [sp, #3]
    597c:	2a00      	cmp	r2, #0
    597e:	d002      	beq.n	5986 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    5980:	f44f 7280 	mov.w	r2, #256	; 0x100
    5984:	e000      	b.n	5988 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    5986:	2200      	movs	r2, #0
    5988:	431a      	orrs	r2, r3
    598a:	9b01      	ldr	r3, [sp, #4]
    598c:	601a      	str	r2, [r3, #0]
}
    598e:	bf00      	nop
    5990:	b002      	add	sp, #8
    5992:	4770      	bx	lr

00005994 <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    5994:	b082      	sub	sp, #8
    5996:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    5998:	9b01      	ldr	r3, [sp, #4]
    599a:	681b      	ldr	r3, [r3, #0]
    599c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    59a0:	9b01      	ldr	r3, [sp, #4]
    59a2:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    59a4:	bf00      	nop
    59a6:	b002      	add	sp, #8
    59a8:	4770      	bx	lr

000059aa <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    59aa:	b082      	sub	sp, #8
    59ac:	9001      	str	r0, [sp, #4]
    59ae:	460b      	mov	r3, r1
    59b0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    59b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    59b8:	3310      	adds	r3, #16
    59ba:	2201      	movs	r2, #1
    59bc:	409a      	lsls	r2, r3
    59be:	9b01      	ldr	r3, [sp, #4]
    59c0:	681b      	ldr	r3, [r3, #0]
    59c2:	431a      	orrs	r2, r3
    59c4:	9b01      	ldr	r3, [sp, #4]
    59c6:	601a      	str	r2, [r3, #0]
}
    59c8:	bf00      	nop
    59ca:	b002      	add	sp, #8
    59cc:	4770      	bx	lr

000059ce <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    59ce:	b082      	sub	sp, #8
    59d0:	9001      	str	r0, [sp, #4]
    59d2:	460b      	mov	r3, r1
    59d4:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    59d8:	9b01      	ldr	r3, [sp, #4]
    59da:	685b      	ldr	r3, [r3, #4]
    59dc:	0c1b      	lsrs	r3, r3, #16
    59de:	041b      	lsls	r3, r3, #16
    59e0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    59e4:	431a      	orrs	r2, r3
    59e6:	9b01      	ldr	r3, [sp, #4]
    59e8:	605a      	str	r2, [r3, #4]
}
    59ea:	bf00      	nop
    59ec:	b002      	add	sp, #8
    59ee:	4770      	bx	lr

000059f0 <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    59f0:	b082      	sub	sp, #8
    59f2:	9001      	str	r0, [sp, #4]
    59f4:	460b      	mov	r3, r1
    59f6:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    59fa:	9b01      	ldr	r3, [sp, #4]
    59fc:	689b      	ldr	r3, [r3, #8]
    59fe:	0c1b      	lsrs	r3, r3, #16
    5a00:	041b      	lsls	r3, r3, #16
    5a02:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5a06:	431a      	orrs	r2, r3
    5a08:	9b01      	ldr	r3, [sp, #4]
    5a0a:	609a      	str	r2, [r3, #8]
}
    5a0c:	bf00      	nop
    5a0e:	b002      	add	sp, #8
    5a10:	4770      	bx	lr

00005a12 <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    5a12:	b084      	sub	sp, #16
    5a14:	9001      	str	r0, [sp, #4]
    5a16:	460b      	mov	r3, r1
    5a18:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    5a1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5a20:	9a01      	ldr	r2, [sp, #4]
    5a22:	3301      	adds	r3, #1
    5a24:	00db      	lsls	r3, r3, #3
    5a26:	4413      	add	r3, r2
    5a28:	685b      	ldr	r3, [r3, #4]
    5a2a:	089b      	lsrs	r3, r3, #2
    5a2c:	b2db      	uxtb	r3, r3
    5a2e:	f003 0301 	and.w	r3, r3, #1
    5a32:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    5a36:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5a3a:	9a01      	ldr	r2, [sp, #4]
    5a3c:	3301      	adds	r3, #1
    5a3e:	00db      	lsls	r3, r3, #3
    5a40:	4413      	add	r3, r2
    5a42:	685b      	ldr	r3, [r3, #4]
    5a44:	08db      	lsrs	r3, r3, #3
    5a46:	b2db      	uxtb	r3, r3
    5a48:	005b      	lsls	r3, r3, #1
    5a4a:	b2db      	uxtb	r3, r3
    5a4c:	f003 0302 	and.w	r3, r3, #2
    5a50:	b2da      	uxtb	r2, r3
    5a52:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a56:	4313      	orrs	r3, r2
    5a58:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    5a5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5a60:	4618      	mov	r0, r3
    5a62:	b004      	add	sp, #16
    5a64:	4770      	bx	lr

00005a66 <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    5a66:	b086      	sub	sp, #24
    5a68:	9003      	str	r0, [sp, #12]
    5a6a:	460b      	mov	r3, r1
    5a6c:	9201      	str	r2, [sp, #4]
    5a6e:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    5a72:	9b01      	ldr	r3, [sp, #4]
    5a74:	009b      	lsls	r3, r3, #2
    5a76:	f003 0304 	and.w	r3, r3, #4
    5a7a:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    5a7c:	9b01      	ldr	r3, [sp, #4]
    5a7e:	009b      	lsls	r3, r3, #2
    5a80:	f003 0308 	and.w	r3, r3, #8
    5a84:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    5a86:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a8a:	9a03      	ldr	r2, [sp, #12]
    5a8c:	3301      	adds	r3, #1
    5a8e:	00db      	lsls	r3, r3, #3
    5a90:	4413      	add	r3, r2
    5a92:	685b      	ldr	r3, [r3, #4]
    5a94:	f023 0104 	bic.w	r1, r3, #4
    5a98:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a9c:	9a05      	ldr	r2, [sp, #20]
    5a9e:	430a      	orrs	r2, r1
    5aa0:	9903      	ldr	r1, [sp, #12]
    5aa2:	3301      	adds	r3, #1
    5aa4:	00db      	lsls	r3, r3, #3
    5aa6:	440b      	add	r3, r1
    5aa8:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    5aaa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5aae:	9a03      	ldr	r2, [sp, #12]
    5ab0:	3301      	adds	r3, #1
    5ab2:	00db      	lsls	r3, r3, #3
    5ab4:	4413      	add	r3, r2
    5ab6:	685b      	ldr	r3, [r3, #4]
    5ab8:	f023 0108 	bic.w	r1, r3, #8
    5abc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5ac0:	9a04      	ldr	r2, [sp, #16]
    5ac2:	430a      	orrs	r2, r1
    5ac4:	9903      	ldr	r1, [sp, #12]
    5ac6:	3301      	adds	r3, #1
    5ac8:	00db      	lsls	r3, r3, #3
    5aca:	440b      	add	r3, r1
    5acc:	605a      	str	r2, [r3, #4]
}
    5ace:	bf00      	nop
    5ad0:	b006      	add	sp, #24
    5ad2:	4770      	bx	lr

00005ad4 <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    5ad4:	b086      	sub	sp, #24
    5ad6:	9003      	str	r0, [sp, #12]
    5ad8:	460b      	mov	r3, r1
    5ada:	9201      	str	r2, [sp, #4]
    5adc:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    5ae0:	9b01      	ldr	r3, [sp, #4]
    5ae2:	009b      	lsls	r3, r3, #2
    5ae4:	f003 0310 	and.w	r3, r3, #16
    5ae8:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    5aea:	9b01      	ldr	r3, [sp, #4]
    5aec:	009b      	lsls	r3, r3, #2
    5aee:	f003 0320 	and.w	r3, r3, #32
    5af2:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    5af4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5af8:	9a03      	ldr	r2, [sp, #12]
    5afa:	3301      	adds	r3, #1
    5afc:	00db      	lsls	r3, r3, #3
    5afe:	4413      	add	r3, r2
    5b00:	685b      	ldr	r3, [r3, #4]
    5b02:	f023 0110 	bic.w	r1, r3, #16
    5b06:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5b0a:	9a05      	ldr	r2, [sp, #20]
    5b0c:	430a      	orrs	r2, r1
    5b0e:	9903      	ldr	r1, [sp, #12]
    5b10:	3301      	adds	r3, #1
    5b12:	00db      	lsls	r3, r3, #3
    5b14:	440b      	add	r3, r1
    5b16:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    5b18:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5b1c:	9a03      	ldr	r2, [sp, #12]
    5b1e:	3301      	adds	r3, #1
    5b20:	00db      	lsls	r3, r3, #3
    5b22:	4413      	add	r3, r2
    5b24:	685b      	ldr	r3, [r3, #4]
    5b26:	f023 0120 	bic.w	r1, r3, #32
    5b2a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5b2e:	9a04      	ldr	r2, [sp, #16]
    5b30:	430a      	orrs	r2, r1
    5b32:	9903      	ldr	r1, [sp, #12]
    5b34:	3301      	adds	r3, #1
    5b36:	00db      	lsls	r3, r3, #3
    5b38:	440b      	add	r3, r1
    5b3a:	605a      	str	r2, [r3, #4]
}
    5b3c:	bf00      	nop
    5b3e:	b006      	add	sp, #24
    5b40:	4770      	bx	lr

00005b42 <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    5b42:	b084      	sub	sp, #16
    5b44:	9001      	str	r0, [sp, #4]
    5b46:	460b      	mov	r3, r1
    5b48:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    5b4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b50:	9a01      	ldr	r2, [sp, #4]
    5b52:	3301      	adds	r3, #1
    5b54:	00db      	lsls	r3, r3, #3
    5b56:	4413      	add	r3, r2
    5b58:	685b      	ldr	r3, [r3, #4]
    5b5a:	091b      	lsrs	r3, r3, #4
    5b5c:	b2db      	uxtb	r3, r3
    5b5e:	f003 0301 	and.w	r3, r3, #1
    5b62:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    5b66:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b6a:	9a01      	ldr	r2, [sp, #4]
    5b6c:	3301      	adds	r3, #1
    5b6e:	00db      	lsls	r3, r3, #3
    5b70:	4413      	add	r3, r2
    5b72:	685b      	ldr	r3, [r3, #4]
    5b74:	095b      	lsrs	r3, r3, #5
    5b76:	b2db      	uxtb	r3, r3
    5b78:	005b      	lsls	r3, r3, #1
    5b7a:	b2db      	uxtb	r3, r3
    5b7c:	f003 0302 	and.w	r3, r3, #2
    5b80:	b2da      	uxtb	r2, r3
    5b82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5b86:	4313      	orrs	r3, r2
    5b88:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    5b8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5b90:	4618      	mov	r0, r3
    5b92:	b004      	add	sp, #16
    5b94:	4770      	bx	lr

00005b96 <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    5b96:	b082      	sub	sp, #8
    5b98:	9001      	str	r0, [sp, #4]
    5b9a:	460b      	mov	r3, r1
    5b9c:	f88d 3003 	strb.w	r3, [sp, #3]
    5ba0:	4613      	mov	r3, r2
    5ba2:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    5ba6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5baa:	9a01      	ldr	r2, [sp, #4]
    5bac:	3301      	adds	r3, #1
    5bae:	00db      	lsls	r3, r3, #3
    5bb0:	4413      	add	r3, r2
    5bb2:	685b      	ldr	r3, [r3, #4]
    5bb4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    5bb8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5bbc:	2b00      	cmp	r3, #0
    5bbe:	d001      	beq.n	5bc4 <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    5bc0:	2140      	movs	r1, #64	; 0x40
    5bc2:	e000      	b.n	5bc6 <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    5bc4:	2100      	movs	r1, #0
    5bc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5bca:	430a      	orrs	r2, r1
    5bcc:	9901      	ldr	r1, [sp, #4]
    5bce:	3301      	adds	r3, #1
    5bd0:	00db      	lsls	r3, r3, #3
    5bd2:	440b      	add	r3, r1
    5bd4:	605a      	str	r2, [r3, #4]
}
    5bd6:	bf00      	nop
    5bd8:	b002      	add	sp, #8
    5bda:	4770      	bx	lr

00005bdc <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    5bdc:	b082      	sub	sp, #8
    5bde:	9001      	str	r0, [sp, #4]
    5be0:	460b      	mov	r3, r1
    5be2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    5be6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5bea:	9a01      	ldr	r2, [sp, #4]
    5bec:	3301      	adds	r3, #1
    5bee:	00db      	lsls	r3, r3, #3
    5bf0:	4413      	add	r3, r2
    5bf2:	685a      	ldr	r2, [r3, #4]
    5bf4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    5bfc:	9901      	ldr	r1, [sp, #4]
    5bfe:	3301      	adds	r3, #1
    5c00:	00db      	lsls	r3, r3, #3
    5c02:	440b      	add	r3, r1
    5c04:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    5c06:	bf00      	nop
    5c08:	b002      	add	sp, #8
    5c0a:	4770      	bx	lr

00005c0c <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    5c0c:	b082      	sub	sp, #8
    5c0e:	9001      	str	r0, [sp, #4]
    5c10:	460b      	mov	r3, r1
    5c12:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    5c16:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5c1a:	9a01      	ldr	r2, [sp, #4]
    5c1c:	3301      	adds	r3, #1
    5c1e:	00db      	lsls	r3, r3, #3
    5c20:	4413      	add	r3, r2
    5c22:	685b      	ldr	r3, [r3, #4]
    5c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5c28:	2b00      	cmp	r3, #0
    5c2a:	bf14      	ite	ne
    5c2c:	2301      	movne	r3, #1
    5c2e:	2300      	moveq	r3, #0
    5c30:	b2db      	uxtb	r3, r3
}
    5c32:	4618      	mov	r0, r3
    5c34:	b002      	add	sp, #8
    5c36:	4770      	bx	lr

00005c38 <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    5c38:	b082      	sub	sp, #8
    5c3a:	9001      	str	r0, [sp, #4]
    5c3c:	460b      	mov	r3, r1
    5c3e:	f88d 3003 	strb.w	r3, [sp, #3]
    5c42:	4613      	mov	r3, r2
    5c44:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    5c48:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5c4c:	f8bd 2000 	ldrh.w	r2, [sp]
    5c50:	9901      	ldr	r1, [sp, #4]
    5c52:	3301      	adds	r3, #1
    5c54:	00db      	lsls	r3, r3, #3
    5c56:	440b      	add	r3, r1
    5c58:	609a      	str	r2, [r3, #8]
}
    5c5a:	bf00      	nop
    5c5c:	b002      	add	sp, #8
    5c5e:	4770      	bx	lr

00005c60 <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    5c60:	b082      	sub	sp, #8
    5c62:	9001      	str	r0, [sp, #4]
    5c64:	460b      	mov	r3, r1
    5c66:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    5c6a:	9b01      	ldr	r3, [sp, #4]
    5c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5c6e:	0c1b      	lsrs	r3, r3, #16
    5c70:	041b      	lsls	r3, r3, #16
    5c72:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5c76:	431a      	orrs	r2, r3
    5c78:	9b01      	ldr	r3, [sp, #4]
    5c7a:	64da      	str	r2, [r3, #76]	; 0x4c
}
    5c7c:	bf00      	nop
    5c7e:	b002      	add	sp, #8
    5c80:	4770      	bx	lr

00005c82 <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    5c82:	b082      	sub	sp, #8
    5c84:	9001      	str	r0, [sp, #4]
    5c86:	460b      	mov	r3, r1
    5c88:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    5c8c:	9b01      	ldr	r3, [sp, #4]
    5c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5c90:	f023 0301 	bic.w	r3, r3, #1
    5c94:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5c98:	2a00      	cmp	r2, #0
    5c9a:	d001      	beq.n	5ca0 <Ftm_Pwm_Ip_Enable+0x1e>
    5c9c:	2201      	movs	r2, #1
    5c9e:	e000      	b.n	5ca2 <Ftm_Pwm_Ip_Enable+0x20>
    5ca0:	2200      	movs	r2, #0
    5ca2:	431a      	orrs	r2, r3
    5ca4:	9b01      	ldr	r3, [sp, #4]
    5ca6:	655a      	str	r2, [r3, #84]	; 0x54
}
    5ca8:	bf00      	nop
    5caa:	b002      	add	sp, #8
    5cac:	4770      	bx	lr

00005cae <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    5cae:	b082      	sub	sp, #8
    5cb0:	9001      	str	r0, [sp, #4]
    5cb2:	460b      	mov	r3, r1
    5cb4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    5cb8:	9b01      	ldr	r3, [sp, #4]
    5cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5cbc:	f023 0308 	bic.w	r3, r3, #8
    5cc0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5cc4:	2a00      	cmp	r2, #0
    5cc6:	d001      	beq.n	5ccc <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    5cc8:	2208      	movs	r2, #8
    5cca:	e000      	b.n	5cce <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    5ccc:	2200      	movs	r2, #0
    5cce:	431a      	orrs	r2, r3
    5cd0:	9b01      	ldr	r3, [sp, #4]
    5cd2:	655a      	str	r2, [r3, #84]	; 0x54
}
    5cd4:	bf00      	nop
    5cd6:	b002      	add	sp, #8
    5cd8:	4770      	bx	lr

00005cda <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    5cda:	b082      	sub	sp, #8
    5cdc:	9001      	str	r0, [sp, #4]
    5cde:	460b      	mov	r3, r1
    5ce0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    5ce4:	9b01      	ldr	r3, [sp, #4]
    5ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5ce8:	f023 0301 	bic.w	r3, r3, #1
    5cec:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5cf0:	2a00      	cmp	r2, #0
    5cf2:	d001      	beq.n	5cf8 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    5cf4:	2201      	movs	r2, #1
    5cf6:	e000      	b.n	5cfa <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    5cf8:	2200      	movs	r2, #0
    5cfa:	431a      	orrs	r2, r3
    5cfc:	9b01      	ldr	r3, [sp, #4]
    5cfe:	659a      	str	r2, [r3, #88]	; 0x58
}
    5d00:	bf00      	nop
    5d02:	b002      	add	sp, #8
    5d04:	4770      	bx	lr

00005d06 <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    5d06:	b082      	sub	sp, #8
    5d08:	9001      	str	r0, [sp, #4]
    5d0a:	460b      	mov	r3, r1
    5d0c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    5d10:	9b01      	ldr	r3, [sp, #4]
    5d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5d14:	f023 0302 	bic.w	r3, r3, #2
    5d18:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5d1c:	2a00      	cmp	r2, #0
    5d1e:	d001      	beq.n	5d24 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    5d20:	2202      	movs	r2, #2
    5d22:	e000      	b.n	5d26 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    5d24:	2200      	movs	r2, #0
    5d26:	431a      	orrs	r2, r3
    5d28:	9b01      	ldr	r3, [sp, #4]
    5d2a:	659a      	str	r2, [r3, #88]	; 0x58
}
    5d2c:	bf00      	nop
    5d2e:	b002      	add	sp, #8
    5d30:	4770      	bx	lr

00005d32 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    5d32:	b082      	sub	sp, #8
    5d34:	9001      	str	r0, [sp, #4]
    5d36:	460b      	mov	r3, r1
    5d38:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    5d3c:	9b01      	ldr	r3, [sp, #4]
    5d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5d40:	f023 0308 	bic.w	r3, r3, #8
    5d44:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5d48:	2a00      	cmp	r2, #0
    5d4a:	d001      	beq.n	5d50 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    5d4c:	2208      	movs	r2, #8
    5d4e:	e000      	b.n	5d52 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    5d50:	2200      	movs	r2, #0
    5d52:	431a      	orrs	r2, r3
    5d54:	9b01      	ldr	r3, [sp, #4]
    5d56:	659a      	str	r2, [r3, #88]	; 0x58
}
    5d58:	bf00      	nop
    5d5a:	b002      	add	sp, #8
    5d5c:	4770      	bx	lr

00005d5e <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    5d5e:	b082      	sub	sp, #8
    5d60:	9001      	str	r0, [sp, #4]
    5d62:	460b      	mov	r3, r1
    5d64:	f88d 3003 	strb.w	r3, [sp, #3]
    5d68:	4613      	mov	r3, r2
    5d6a:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5d6e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5d72:	2b00      	cmp	r3, #0
    5d74:	d00a      	beq.n	5d8c <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    5d76:	9b01      	ldr	r3, [sp, #4]
    5d78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    5d7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5d7e:	2110      	movs	r1, #16
    5d80:	fa01 f303 	lsl.w	r3, r1, r3
    5d84:	431a      	orrs	r2, r3
    5d86:	9b01      	ldr	r3, [sp, #4]
    5d88:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    5d8a:	e00a      	b.n	5da2 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    5d8c:	9b01      	ldr	r3, [sp, #4]
    5d8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    5d90:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5d94:	2110      	movs	r1, #16
    5d96:	fa01 f303 	lsl.w	r3, r1, r3
    5d9a:	43db      	mvns	r3, r3
    5d9c:	401a      	ands	r2, r3
    5d9e:	9b01      	ldr	r3, [sp, #4]
    5da0:	659a      	str	r2, [r3, #88]	; 0x58
}
    5da2:	bf00      	nop
    5da4:	b002      	add	sp, #8
    5da6:	4770      	bx	lr

00005da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    5da8:	b082      	sub	sp, #8
    5daa:	9001      	str	r0, [sp, #4]
    5dac:	460b      	mov	r3, r1
    5dae:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    5db2:	9b01      	ldr	r3, [sp, #4]
    5db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5dba:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5dbe:	2a00      	cmp	r2, #0
    5dc0:	d001      	beq.n	5dc6 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    5dc2:	2280      	movs	r2, #128	; 0x80
    5dc4:	e000      	b.n	5dc8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    5dc6:	2200      	movs	r2, #0
    5dc8:	431a      	orrs	r2, r3
    5dca:	9b01      	ldr	r3, [sp, #4]
    5dcc:	659a      	str	r2, [r3, #88]	; 0x58
}
    5dce:	bf00      	nop
    5dd0:	b002      	add	sp, #8
    5dd2:	4770      	bx	lr

00005dd4 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    5dd4:	b084      	sub	sp, #16
    5dd6:	9003      	str	r0, [sp, #12]
    5dd8:	460b      	mov	r3, r1
    5dda:	9201      	str	r2, [sp, #4]
    5ddc:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    5de0:	9b01      	ldr	r3, [sp, #4]
    5de2:	2b01      	cmp	r3, #1
    5de4:	d10a      	bne.n	5dfc <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    5de6:	9b03      	ldr	r3, [sp, #12]
    5de8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    5dea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5dee:	2101      	movs	r1, #1
    5df0:	fa01 f303 	lsl.w	r3, r1, r3
    5df4:	431a      	orrs	r2, r3
    5df6:	9b03      	ldr	r3, [sp, #12]
    5df8:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    5dfa:	e00a      	b.n	5e12 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    5dfc:	9b03      	ldr	r3, [sp, #12]
    5dfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    5e00:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5e04:	2101      	movs	r1, #1
    5e06:	fa01 f303 	lsl.w	r3, r1, r3
    5e0a:	43db      	mvns	r3, r3
    5e0c:	401a      	ands	r2, r3
    5e0e:	9b03      	ldr	r3, [sp, #12]
    5e10:	65da      	str	r2, [r3, #92]	; 0x5c
}
    5e12:	bf00      	nop
    5e14:	b004      	add	sp, #16
    5e16:	4770      	bx	lr

00005e18 <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    5e18:	b082      	sub	sp, #8
    5e1a:	9001      	str	r0, [sp, #4]
    5e1c:	460b      	mov	r3, r1
    5e1e:	f88d 3003 	strb.w	r3, [sp, #3]
    5e22:	4613      	mov	r3, r2
    5e24:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    5e28:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5e2c:	2b00      	cmp	r3, #0
    5e2e:	d00a      	beq.n	5e46 <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    5e30:	9b01      	ldr	r3, [sp, #4]
    5e32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5e34:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e38:	2101      	movs	r1, #1
    5e3a:	fa01 f303 	lsl.w	r3, r1, r3
    5e3e:	431a      	orrs	r2, r3
    5e40:	9b01      	ldr	r3, [sp, #4]
    5e42:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    5e44:	e00a      	b.n	5e5c <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    5e46:	9b01      	ldr	r3, [sp, #4]
    5e48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5e4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e4e:	2101      	movs	r1, #1
    5e50:	fa01 f303 	lsl.w	r3, r1, r3
    5e54:	43db      	mvns	r3, r3
    5e56:	401a      	ands	r2, r3
    5e58:	9b01      	ldr	r3, [sp, #4]
    5e5a:	661a      	str	r2, [r3, #96]	; 0x60
}
    5e5c:	bf00      	nop
    5e5e:	b002      	add	sp, #8
    5e60:	4770      	bx	lr

00005e62 <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    5e62:	b082      	sub	sp, #8
    5e64:	9001      	str	r0, [sp, #4]
    5e66:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    5e68:	9b01      	ldr	r3, [sp, #4]
    5e6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5e6c:	9b00      	ldr	r3, [sp, #0]
    5e6e:	43db      	mvns	r3, r3
    5e70:	401a      	ands	r2, r3
    5e72:	9b00      	ldr	r3, [sp, #0]
    5e74:	431a      	orrs	r2, r3
    5e76:	9b01      	ldr	r3, [sp, #4]
    5e78:	661a      	str	r2, [r3, #96]	; 0x60
}
    5e7a:	bf00      	nop
    5e7c:	b002      	add	sp, #8
    5e7e:	4770      	bx	lr

00005e80 <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    5e80:	b082      	sub	sp, #8
    5e82:	9001      	str	r0, [sp, #4]
    5e84:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    5e86:	9b01      	ldr	r3, [sp, #4]
    5e88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5e8a:	9b00      	ldr	r3, [sp, #0]
    5e8c:	43db      	mvns	r3, r3
    5e8e:	401a      	ands	r2, r3
    5e90:	9b01      	ldr	r3, [sp, #4]
    5e92:	661a      	str	r2, [r3, #96]	; 0x60
}
    5e94:	bf00      	nop
    5e96:	b002      	add	sp, #8
    5e98:	4770      	bx	lr

00005e9a <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    5e9a:	b082      	sub	sp, #8
    5e9c:	9001      	str	r0, [sp, #4]
    5e9e:	460b      	mov	r3, r1
    5ea0:	f88d 3003 	strb.w	r3, [sp, #3]
    5ea4:	4613      	mov	r3, r2
    5ea6:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5eaa:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5eae:	2b00      	cmp	r3, #0
    5eb0:	d00b      	beq.n	5eca <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5eb2:	9b01      	ldr	r3, [sp, #4]
    5eb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5eb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5eba:	00db      	lsls	r3, r3, #3
    5ebc:	2101      	movs	r1, #1
    5ebe:	fa01 f303 	lsl.w	r3, r1, r3
    5ec2:	431a      	orrs	r2, r3
    5ec4:	9b01      	ldr	r3, [sp, #4]
    5ec6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5ec8:	e00b      	b.n	5ee2 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5eca:	9b01      	ldr	r3, [sp, #4]
    5ecc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5ece:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ed2:	00db      	lsls	r3, r3, #3
    5ed4:	2101      	movs	r1, #1
    5ed6:	fa01 f303 	lsl.w	r3, r1, r3
    5eda:	43db      	mvns	r3, r3
    5edc:	401a      	ands	r2, r3
    5ede:	9b01      	ldr	r3, [sp, #4]
    5ee0:	665a      	str	r2, [r3, #100]	; 0x64
}
    5ee2:	bf00      	nop
    5ee4:	b002      	add	sp, #8
    5ee6:	4770      	bx	lr

00005ee8 <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    5ee8:	b082      	sub	sp, #8
    5eea:	9001      	str	r0, [sp, #4]
    5eec:	460b      	mov	r3, r1
    5eee:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    5ef2:	9b01      	ldr	r3, [sp, #4]
    5ef4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5ef6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5efa:	00db      	lsls	r3, r3, #3
    5efc:	fa22 f303 	lsr.w	r3, r2, r3
    5f00:	f003 0301 	and.w	r3, r3, #1
    5f04:	2b00      	cmp	r3, #0
    5f06:	bf14      	ite	ne
    5f08:	2301      	movne	r3, #1
    5f0a:	2300      	moveq	r3, #0
    5f0c:	b2db      	uxtb	r3, r3
}
    5f0e:	4618      	mov	r0, r3
    5f10:	b002      	add	sp, #8
    5f12:	4770      	bx	lr

00005f14 <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    5f14:	b082      	sub	sp, #8
    5f16:	9001      	str	r0, [sp, #4]
    5f18:	460b      	mov	r3, r1
    5f1a:	f88d 3003 	strb.w	r3, [sp, #3]
    5f1e:	4613      	mov	r3, r2
    5f20:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    5f24:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5f28:	2b00      	cmp	r3, #0
    5f2a:	d00b      	beq.n	5f44 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5f2c:	9b01      	ldr	r3, [sp, #4]
    5f2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f30:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f34:	00db      	lsls	r3, r3, #3
    5f36:	2102      	movs	r1, #2
    5f38:	fa01 f303 	lsl.w	r3, r1, r3
    5f3c:	431a      	orrs	r2, r3
    5f3e:	9b01      	ldr	r3, [sp, #4]
    5f40:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5f42:	e00b      	b.n	5f5c <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5f44:	9b01      	ldr	r3, [sp, #4]
    5f46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f48:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f4c:	00db      	lsls	r3, r3, #3
    5f4e:	2102      	movs	r1, #2
    5f50:	fa01 f303 	lsl.w	r3, r1, r3
    5f54:	43db      	mvns	r3, r3
    5f56:	401a      	ands	r2, r3
    5f58:	9b01      	ldr	r3, [sp, #4]
    5f5a:	665a      	str	r2, [r3, #100]	; 0x64
}
    5f5c:	bf00      	nop
    5f5e:	b002      	add	sp, #8
    5f60:	4770      	bx	lr

00005f62 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    5f62:	b082      	sub	sp, #8
    5f64:	9001      	str	r0, [sp, #4]
    5f66:	460b      	mov	r3, r1
    5f68:	f88d 3003 	strb.w	r3, [sp, #3]
    5f6c:	4613      	mov	r3, r2
    5f6e:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5f72:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5f76:	2b00      	cmp	r3, #0
    5f78:	d00b      	beq.n	5f92 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5f7a:	9b01      	ldr	r3, [sp, #4]
    5f7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f82:	00db      	lsls	r3, r3, #3
    5f84:	2110      	movs	r1, #16
    5f86:	fa01 f303 	lsl.w	r3, r1, r3
    5f8a:	431a      	orrs	r2, r3
    5f8c:	9b01      	ldr	r3, [sp, #4]
    5f8e:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5f90:	e00b      	b.n	5faa <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5f92:	9b01      	ldr	r3, [sp, #4]
    5f94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f96:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f9a:	00db      	lsls	r3, r3, #3
    5f9c:	2110      	movs	r1, #16
    5f9e:	fa01 f303 	lsl.w	r3, r1, r3
    5fa2:	43db      	mvns	r3, r3
    5fa4:	401a      	ands	r2, r3
    5fa6:	9b01      	ldr	r3, [sp, #4]
    5fa8:	665a      	str	r2, [r3, #100]	; 0x64
}
    5faa:	bf00      	nop
    5fac:	b002      	add	sp, #8
    5fae:	4770      	bx	lr

00005fb0 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    5fb0:	b082      	sub	sp, #8
    5fb2:	9001      	str	r0, [sp, #4]
    5fb4:	460b      	mov	r3, r1
    5fb6:	f88d 3003 	strb.w	r3, [sp, #3]
    5fba:	4613      	mov	r3, r2
    5fbc:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5fc0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5fc4:	2b00      	cmp	r3, #0
    5fc6:	d00b      	beq.n	5fe0 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5fc8:	9b01      	ldr	r3, [sp, #4]
    5fca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5fcc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5fd0:	00db      	lsls	r3, r3, #3
    5fd2:	2120      	movs	r1, #32
    5fd4:	fa01 f303 	lsl.w	r3, r1, r3
    5fd8:	431a      	orrs	r2, r3
    5fda:	9b01      	ldr	r3, [sp, #4]
    5fdc:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5fde:	e00b      	b.n	5ff8 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5fe0:	9b01      	ldr	r3, [sp, #4]
    5fe2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5fe4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5fe8:	00db      	lsls	r3, r3, #3
    5fea:	2120      	movs	r1, #32
    5fec:	fa01 f303 	lsl.w	r3, r1, r3
    5ff0:	43db      	mvns	r3, r3
    5ff2:	401a      	ands	r2, r3
    5ff4:	9b01      	ldr	r3, [sp, #4]
    5ff6:	665a      	str	r2, [r3, #100]	; 0x64
}
    5ff8:	bf00      	nop
    5ffa:	b002      	add	sp, #8
    5ffc:	4770      	bx	lr

00005ffe <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    5ffe:	b082      	sub	sp, #8
    6000:	9001      	str	r0, [sp, #4]
    6002:	460b      	mov	r3, r1
    6004:	f88d 3003 	strb.w	r3, [sp, #3]
    6008:	4613      	mov	r3, r2
    600a:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    600e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6012:	2b00      	cmp	r3, #0
    6014:	d00b      	beq.n	602e <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    6016:	9b01      	ldr	r3, [sp, #4]
    6018:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    601a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    601e:	00db      	lsls	r3, r3, #3
    6020:	2180      	movs	r1, #128	; 0x80
    6022:	fa01 f303 	lsl.w	r3, r1, r3
    6026:	431a      	orrs	r2, r3
    6028:	9b01      	ldr	r3, [sp, #4]
    602a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    602c:	e00b      	b.n	6046 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    602e:	9b01      	ldr	r3, [sp, #4]
    6030:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    6032:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6036:	00db      	lsls	r3, r3, #3
    6038:	2180      	movs	r1, #128	; 0x80
    603a:	fa01 f303 	lsl.w	r3, r1, r3
    603e:	43db      	mvns	r3, r3
    6040:	401a      	ands	r2, r3
    6042:	9b01      	ldr	r3, [sp, #4]
    6044:	665a      	str	r2, [r3, #100]	; 0x64
}
    6046:	bf00      	nop
    6048:	b002      	add	sp, #8
    604a:	4770      	bx	lr

0000604c <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    604c:	b082      	sub	sp, #8
    604e:	9001      	str	r0, [sp, #4]
    6050:	460b      	mov	r3, r1
    6052:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    6056:	9b01      	ldr	r3, [sp, #4]
    6058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    605a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    605e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6066:	431a      	orrs	r2, r3
    6068:	9b01      	ldr	r3, [sp, #4]
    606a:	669a      	str	r2, [r3, #104]	; 0x68
}
    606c:	bf00      	nop
    606e:	b002      	add	sp, #8
    6070:	4770      	bx	lr

00006072 <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    6072:	b082      	sub	sp, #8
    6074:	9001      	str	r0, [sp, #4]
    6076:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    6078:	9b01      	ldr	r3, [sp, #4]
    607a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    607c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    6080:	9b00      	ldr	r3, [sp, #0]
    6082:	b2db      	uxtb	r3, r3
    6084:	019b      	lsls	r3, r3, #6
    6086:	b2db      	uxtb	r3, r3
    6088:	431a      	orrs	r2, r3
    608a:	9b01      	ldr	r3, [sp, #4]
    608c:	669a      	str	r2, [r3, #104]	; 0x68
}
    608e:	bf00      	nop
    6090:	b002      	add	sp, #8
    6092:	4770      	bx	lr

00006094 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    6094:	b082      	sub	sp, #8
    6096:	9001      	str	r0, [sp, #4]
    6098:	460b      	mov	r3, r1
    609a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    609e:	9b01      	ldr	r3, [sp, #4]
    60a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    60a2:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    60a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    60aa:	041b      	lsls	r3, r3, #16
    60ac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    60b0:	431a      	orrs	r2, r3
    60b2:	9b01      	ldr	r3, [sp, #4]
    60b4:	669a      	str	r2, [r3, #104]	; 0x68
}
    60b6:	bf00      	nop
    60b8:	b002      	add	sp, #8
    60ba:	4770      	bx	lr

000060bc <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    60bc:	b082      	sub	sp, #8
    60be:	9001      	str	r0, [sp, #4]
    60c0:	460b      	mov	r3, r1
    60c2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    60c6:	9b01      	ldr	r3, [sp, #4]
    60c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    60ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    60ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
    60d2:	2a00      	cmp	r2, #0
    60d4:	d001      	beq.n	60da <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    60d6:	2240      	movs	r2, #64	; 0x40
    60d8:	e000      	b.n	60dc <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    60da:	2200      	movs	r2, #0
    60dc:	431a      	orrs	r2, r3
    60de:	9b01      	ldr	r3, [sp, #4]
    60e0:	66da      	str	r2, [r3, #108]	; 0x6c
}
    60e2:	bf00      	nop
    60e4:	b002      	add	sp, #8
    60e6:	4770      	bx	lr

000060e8 <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    60e8:	b082      	sub	sp, #8
    60ea:	9001      	str	r0, [sp, #4]
    60ec:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    60ee:	9b01      	ldr	r3, [sp, #4]
    60f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    60f2:	9b00      	ldr	r3, [sp, #0]
    60f4:	43db      	mvns	r3, r3
    60f6:	401a      	ands	r2, r3
    60f8:	9b01      	ldr	r3, [sp, #4]
    60fa:	66da      	str	r2, [r3, #108]	; 0x6c
}
    60fc:	bf00      	nop
    60fe:	b002      	add	sp, #8
    6100:	4770      	bx	lr

00006102 <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    6102:	b082      	sub	sp, #8
    6104:	9001      	str	r0, [sp, #4]
    6106:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    6108:	9b01      	ldr	r3, [sp, #4]
    610a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    610c:	9b00      	ldr	r3, [sp, #0]
    610e:	43db      	mvns	r3, r3
    6110:	401a      	ands	r2, r3
    6112:	9b00      	ldr	r3, [sp, #0]
    6114:	431a      	orrs	r2, r3
    6116:	9b01      	ldr	r3, [sp, #4]
    6118:	66da      	str	r2, [r3, #108]	; 0x6c
}
    611a:	bf00      	nop
    611c:	b002      	add	sp, #8
    611e:	4770      	bx	lr

00006120 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    6120:	b084      	sub	sp, #16
    6122:	9003      	str	r0, [sp, #12]
    6124:	460b      	mov	r3, r1
    6126:	9201      	str	r2, [sp, #4]
    6128:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    612c:	9b01      	ldr	r3, [sp, #4]
    612e:	2b00      	cmp	r3, #0
    6130:	d10b      	bne.n	614a <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    6132:	9b03      	ldr	r3, [sp, #12]
    6134:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    6136:	f89d 300b 	ldrb.w	r3, [sp, #11]
    613a:	2101      	movs	r1, #1
    613c:	fa01 f303 	lsl.w	r3, r1, r3
    6140:	43db      	mvns	r3, r3
    6142:	401a      	ands	r2, r3
    6144:	9b03      	ldr	r3, [sp, #12]
    6146:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    6148:	e009      	b.n	615e <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    614a:	9b03      	ldr	r3, [sp, #12]
    614c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    614e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6152:	2101      	movs	r1, #1
    6154:	fa01 f303 	lsl.w	r3, r1, r3
    6158:	431a      	orrs	r2, r3
    615a:	9b03      	ldr	r3, [sp, #12]
    615c:	671a      	str	r2, [r3, #112]	; 0x70
}
    615e:	bf00      	nop
    6160:	b004      	add	sp, #16
    6162:	4770      	bx	lr

00006164 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    6164:	b082      	sub	sp, #8
    6166:	9001      	str	r0, [sp, #4]
    6168:	460b      	mov	r3, r1
    616a:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    616e:	9b01      	ldr	r3, [sp, #4]
    6170:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    6172:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6176:	fa22 f303 	lsr.w	r3, r2, r3
    617a:	f003 0301 	and.w	r3, r3, #1
    617e:	2b01      	cmp	r3, #1
    6180:	bf0c      	ite	eq
    6182:	2301      	moveq	r3, #1
    6184:	2300      	movne	r3, #0
    6186:	b2db      	uxtb	r3, r3
}
    6188:	4618      	mov	r0, r3
    618a:	b002      	add	sp, #8
    618c:	4770      	bx	lr

0000618e <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    618e:	b082      	sub	sp, #8
    6190:	9001      	str	r0, [sp, #4]
    6192:	460b      	mov	r3, r1
    6194:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    6198:	9b01      	ldr	r3, [sp, #4]
    619a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    619e:	f023 021f 	bic.w	r2, r3, #31
    61a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    61a6:	f003 031f 	and.w	r3, r3, #31
    61aa:	431a      	orrs	r2, r3
    61ac:	9b01      	ldr	r3, [sp, #4]
    61ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    61b2:	bf00      	nop
    61b4:	b002      	add	sp, #8
    61b6:	4770      	bx	lr

000061b8 <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    61b8:	b082      	sub	sp, #8
    61ba:	9001      	str	r0, [sp, #4]
    61bc:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    61be:	9b01      	ldr	r3, [sp, #4]
    61c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    61c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    61c8:	9b00      	ldr	r3, [sp, #0]
    61ca:	019b      	lsls	r3, r3, #6
    61cc:	b2db      	uxtb	r3, r3
    61ce:	431a      	orrs	r2, r3
    61d0:	9b01      	ldr	r3, [sp, #4]
    61d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    61d6:	bf00      	nop
    61d8:	b002      	add	sp, #8
    61da:	4770      	bx	lr

000061dc <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    61dc:	b082      	sub	sp, #8
    61de:	9001      	str	r0, [sp, #4]
    61e0:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    61e2:	9b01      	ldr	r3, [sp, #4]
    61e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    61e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    61ec:	9b00      	ldr	r3, [sp, #0]
    61ee:	02db      	lsls	r3, r3, #11
    61f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    61f4:	431a      	orrs	r2, r3
    61f6:	9b01      	ldr	r3, [sp, #4]
    61f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    61fc:	bf00      	nop
    61fe:	b002      	add	sp, #8
    6200:	4770      	bx	lr

00006202 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    6202:	b082      	sub	sp, #8
    6204:	9001      	str	r0, [sp, #4]
    6206:	460b      	mov	r3, r1
    6208:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    620c:	9b01      	ldr	r3, [sp, #4]
    620e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6212:	f023 0301 	bic.w	r3, r3, #1
    6216:	f89d 2003 	ldrb.w	r2, [sp, #3]
    621a:	2a00      	cmp	r2, #0
    621c:	d001      	beq.n	6222 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    621e:	2201      	movs	r2, #1
    6220:	e000      	b.n	6224 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    6222:	2200      	movs	r2, #0
    6224:	431a      	orrs	r2, r3
    6226:	9b01      	ldr	r3, [sp, #4]
    6228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    622c:	bf00      	nop
    622e:	b002      	add	sp, #8
    6230:	4770      	bx	lr

00006232 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    6232:	b082      	sub	sp, #8
    6234:	9001      	str	r0, [sp, #4]
    6236:	460b      	mov	r3, r1
    6238:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    623c:	9b01      	ldr	r3, [sp, #4]
    623e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6242:	f023 0304 	bic.w	r3, r3, #4
    6246:	f89d 2003 	ldrb.w	r2, [sp, #3]
    624a:	2a00      	cmp	r2, #0
    624c:	d001      	beq.n	6252 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    624e:	2204      	movs	r2, #4
    6250:	e000      	b.n	6254 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    6252:	2200      	movs	r2, #0
    6254:	431a      	orrs	r2, r3
    6256:	9b01      	ldr	r3, [sp, #4]
    6258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    625c:	bf00      	nop
    625e:	b002      	add	sp, #8
    6260:	4770      	bx	lr

00006262 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    6262:	b082      	sub	sp, #8
    6264:	9001      	str	r0, [sp, #4]
    6266:	460b      	mov	r3, r1
    6268:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    626c:	9b01      	ldr	r3, [sp, #4]
    626e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6272:	f023 0310 	bic.w	r3, r3, #16
    6276:	f89d 2003 	ldrb.w	r2, [sp, #3]
    627a:	2a00      	cmp	r2, #0
    627c:	d001      	beq.n	6282 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    627e:	2210      	movs	r2, #16
    6280:	e000      	b.n	6284 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    6282:	2200      	movs	r2, #0
    6284:	431a      	orrs	r2, r3
    6286:	9b01      	ldr	r3, [sp, #4]
    6288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    628c:	bf00      	nop
    628e:	b002      	add	sp, #8
    6290:	4770      	bx	lr

00006292 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    6292:	b082      	sub	sp, #8
    6294:	9001      	str	r0, [sp, #4]
    6296:	460b      	mov	r3, r1
    6298:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    629c:	9b01      	ldr	r3, [sp, #4]
    629e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    62a2:	f023 0320 	bic.w	r3, r3, #32
    62a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    62aa:	2a00      	cmp	r2, #0
    62ac:	d001      	beq.n	62b2 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    62ae:	2220      	movs	r2, #32
    62b0:	e000      	b.n	62b4 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    62b2:	2200      	movs	r2, #0
    62b4:	431a      	orrs	r2, r3
    62b6:	9b01      	ldr	r3, [sp, #4]
    62b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    62bc:	bf00      	nop
    62be:	b002      	add	sp, #8
    62c0:	4770      	bx	lr

000062c2 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    62c2:	b082      	sub	sp, #8
    62c4:	9001      	str	r0, [sp, #4]
    62c6:	460b      	mov	r3, r1
    62c8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    62cc:	9b01      	ldr	r3, [sp, #4]
    62ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    62d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    62d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    62da:	2a00      	cmp	r2, #0
    62dc:	d001      	beq.n	62e2 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    62de:	2280      	movs	r2, #128	; 0x80
    62e0:	e000      	b.n	62e4 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    62e2:	2200      	movs	r2, #0
    62e4:	431a      	orrs	r2, r3
    62e6:	9b01      	ldr	r3, [sp, #4]
    62e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    62ec:	bf00      	nop
    62ee:	b002      	add	sp, #8
    62f0:	4770      	bx	lr

000062f2 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    62f2:	b082      	sub	sp, #8
    62f4:	9001      	str	r0, [sp, #4]
    62f6:	460b      	mov	r3, r1
    62f8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    62fc:	9b01      	ldr	r3, [sp, #4]
    62fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6306:	f89d 2003 	ldrb.w	r2, [sp, #3]
    630a:	2a00      	cmp	r2, #0
    630c:	d002      	beq.n	6314 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    630e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6312:	e000      	b.n	6316 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    6314:	2200      	movs	r2, #0
    6316:	431a      	orrs	r2, r3
    6318:	9b01      	ldr	r3, [sp, #4]
    631a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    631e:	bf00      	nop
    6320:	b002      	add	sp, #8
    6322:	4770      	bx	lr

00006324 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    6324:	b082      	sub	sp, #8
    6326:	9001      	str	r0, [sp, #4]
    6328:	460b      	mov	r3, r1
    632a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    632e:	9b01      	ldr	r3, [sp, #4]
    6330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    6338:	f89d 2003 	ldrb.w	r2, [sp, #3]
    633c:	2a00      	cmp	r2, #0
    633e:	d002      	beq.n	6346 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    6340:	f44f 7200 	mov.w	r2, #512	; 0x200
    6344:	e000      	b.n	6348 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    6346:	2200      	movs	r2, #0
    6348:	431a      	orrs	r2, r3
    634a:	9b01      	ldr	r3, [sp, #4]
    634c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6350:	bf00      	nop
    6352:	b002      	add	sp, #8
    6354:	4770      	bx	lr

00006356 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    6356:	b082      	sub	sp, #8
    6358:	9001      	str	r0, [sp, #4]
    635a:	460b      	mov	r3, r1
    635c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    6360:	9b01      	ldr	r3, [sp, #4]
    6362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    636a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    636e:	2a00      	cmp	r2, #0
    6370:	d002      	beq.n	6378 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    6372:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6376:	e000      	b.n	637a <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    6378:	2200      	movs	r2, #0
    637a:	431a      	orrs	r2, r3
    637c:	9b01      	ldr	r3, [sp, #4]
    637e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6382:	bf00      	nop
    6384:	b002      	add	sp, #8
    6386:	4770      	bx	lr

00006388 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    6388:	b082      	sub	sp, #8
    638a:	9001      	str	r0, [sp, #4]
    638c:	460b      	mov	r3, r1
    638e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    6392:	9b01      	ldr	r3, [sp, #4]
    6394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    639c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    63a0:	2a00      	cmp	r2, #0
    63a2:	d002      	beq.n	63aa <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    63a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    63a8:	e000      	b.n	63ac <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    63aa:	2200      	movs	r2, #0
    63ac:	431a      	orrs	r2, r3
    63ae:	9b01      	ldr	r3, [sp, #4]
    63b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    63b4:	bf00      	nop
    63b6:	b002      	add	sp, #8
    63b8:	4770      	bx	lr

000063ba <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    63ba:	b082      	sub	sp, #8
    63bc:	9001      	str	r0, [sp, #4]
    63be:	460b      	mov	r3, r1
    63c0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    63c4:	9b01      	ldr	r3, [sp, #4]
    63c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    63ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    63ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
    63d2:	2a00      	cmp	r2, #0
    63d4:	d002      	beq.n	63dc <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    63d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    63da:	e000      	b.n	63de <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    63dc:	2200      	movs	r2, #0
    63de:	431a      	orrs	r2, r3
    63e0:	9b01      	ldr	r3, [sp, #4]
    63e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    63e6:	bf00      	nop
    63e8:	b002      	add	sp, #8
    63ea:	4770      	bx	lr

000063ec <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    63ec:	b082      	sub	sp, #8
    63ee:	9001      	str	r0, [sp, #4]
    63f0:	460b      	mov	r3, r1
    63f2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    63f6:	9b01      	ldr	r3, [sp, #4]
    63f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    63fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6400:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6404:	2a00      	cmp	r2, #0
    6406:	d002      	beq.n	640e <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    6408:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    640c:	e000      	b.n	6410 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    640e:	2200      	movs	r2, #0
    6410:	431a      	orrs	r2, r3
    6412:	9b01      	ldr	r3, [sp, #4]
    6414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6418:	bf00      	nop
    641a:	b002      	add	sp, #8
    641c:	4770      	bx	lr

0000641e <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    641e:	b082      	sub	sp, #8
    6420:	9001      	str	r0, [sp, #4]
    6422:	460b      	mov	r3, r1
    6424:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    6428:	9b01      	ldr	r3, [sp, #4]
    642a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    642e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    6432:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6436:	2a00      	cmp	r2, #0
    6438:	d002      	beq.n	6440 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    643a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    643e:	e000      	b.n	6442 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    6440:	2200      	movs	r2, #0
    6442:	431a      	orrs	r2, r3
    6444:	9b01      	ldr	r3, [sp, #4]
    6446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    644a:	bf00      	nop
    644c:	b002      	add	sp, #8
    644e:	4770      	bx	lr

00006450 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    6450:	b082      	sub	sp, #8
    6452:	9001      	str	r0, [sp, #4]
    6454:	460b      	mov	r3, r1
    6456:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    645a:	9b01      	ldr	r3, [sp, #4]
    645c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    6464:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6468:	2a00      	cmp	r2, #0
    646a:	d002      	beq.n	6472 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    646c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    6470:	e000      	b.n	6474 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    6472:	2200      	movs	r2, #0
    6474:	431a      	orrs	r2, r3
    6476:	9b01      	ldr	r3, [sp, #4]
    6478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    647c:	bf00      	nop
    647e:	b002      	add	sp, #8
    6480:	4770      	bx	lr

00006482 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    6482:	b082      	sub	sp, #8
    6484:	9001      	str	r0, [sp, #4]
    6486:	460b      	mov	r3, r1
    6488:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    648c:	9b01      	ldr	r3, [sp, #4]
    648e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6492:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    6496:	f89d 2003 	ldrb.w	r2, [sp, #3]
    649a:	2a00      	cmp	r2, #0
    649c:	d002      	beq.n	64a4 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    649e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    64a2:	e000      	b.n	64a6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    64a4:	2200      	movs	r2, #0
    64a6:	431a      	orrs	r2, r3
    64a8:	9b01      	ldr	r3, [sp, #4]
    64aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    64ae:	bf00      	nop
    64b0:	b002      	add	sp, #8
    64b2:	4770      	bx	lr

000064b4 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    64b4:	b084      	sub	sp, #16
    64b6:	9001      	str	r0, [sp, #4]
    64b8:	460b      	mov	r3, r1
    64ba:	f88d 3003 	strb.w	r3, [sp, #3]
    64be:	4613      	mov	r3, r2
    64c0:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    64c4:	9b01      	ldr	r3, [sp, #4]
    64c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    64c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    64cc:	fa22 f303 	lsr.w	r3, r2, r3
    64d0:	b2db      	uxtb	r3, r3
    64d2:	f003 0301 	and.w	r3, r3, #1
    64d6:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    64da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    64de:	2b00      	cmp	r3, #0
    64e0:	bf14      	ite	ne
    64e2:	2301      	movne	r3, #1
    64e4:	2300      	moveq	r3, #0
    64e6:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    64ea:	f89d 2002 	ldrb.w	r2, [sp, #2]
    64ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    64f2:	429a      	cmp	r2, r3
    64f4:	d00d      	beq.n	6512 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    64f6:	9b01      	ldr	r3, [sp, #4]
    64f8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    64fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6500:	3308      	adds	r3, #8
    6502:	2101      	movs	r1, #1
    6504:	fa01 f303 	lsl.w	r3, r1, r3
    6508:	431a      	orrs	r2, r3
    650a:	9b01      	ldr	r3, [sp, #4]
    650c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    6510:	e00d      	b.n	652e <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    6512:	9b01      	ldr	r3, [sp, #4]
    6514:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    6518:	f89d 3003 	ldrb.w	r3, [sp, #3]
    651c:	3308      	adds	r3, #8
    651e:	2101      	movs	r1, #1
    6520:	fa01 f303 	lsl.w	r3, r1, r3
    6524:	43db      	mvns	r3, r3
    6526:	401a      	ands	r2, r3
    6528:	9b01      	ldr	r3, [sp, #4]
    652a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    652e:	bf00      	nop
    6530:	b004      	add	sp, #16
    6532:	4770      	bx	lr

00006534 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    6534:	b082      	sub	sp, #8
    6536:	9001      	str	r0, [sp, #4]
    6538:	460b      	mov	r3, r1
    653a:	f88d 3003 	strb.w	r3, [sp, #3]
    653e:	4613      	mov	r3, r2
    6540:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    6544:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6548:	2b00      	cmp	r3, #0
    654a:	d00c      	beq.n	6566 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    654c:	9b01      	ldr	r3, [sp, #4]
    654e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    6552:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6556:	2101      	movs	r1, #1
    6558:	fa01 f303 	lsl.w	r3, r1, r3
    655c:	431a      	orrs	r2, r3
    655e:	9b01      	ldr	r3, [sp, #4]
    6560:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    6564:	e00c      	b.n	6580 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    6566:	9b01      	ldr	r3, [sp, #4]
    6568:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    656c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6570:	2101      	movs	r1, #1
    6572:	fa01 f303 	lsl.w	r3, r1, r3
    6576:	43db      	mvns	r3, r3
    6578:	401a      	ands	r2, r3
    657a:	9b01      	ldr	r3, [sp, #4]
    657c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6580:	bf00      	nop
    6582:	b002      	add	sp, #8
    6584:	4770      	bx	lr

00006586 <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    6586:	b082      	sub	sp, #8
    6588:	9001      	str	r0, [sp, #4]
    658a:	460b      	mov	r3, r1
    658c:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    6590:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    6594:	9b01      	ldr	r3, [sp, #4]
    6596:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    659a:	bf00      	nop
    659c:	b002      	add	sp, #8
    659e:	4770      	bx	lr

000065a0 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    65a0:	b082      	sub	sp, #8
    65a2:	9001      	str	r0, [sp, #4]
    65a4:	460b      	mov	r3, r1
    65a6:	f88d 3003 	strb.w	r3, [sp, #3]
    65aa:	4613      	mov	r3, r2
    65ac:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    65b0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    65b4:	2b00      	cmp	r3, #0
    65b6:	d00c      	beq.n	65d2 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    65b8:	9b01      	ldr	r3, [sp, #4]
    65ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    65be:	f89d 3003 	ldrb.w	r3, [sp, #3]
    65c2:	2101      	movs	r1, #1
    65c4:	fa01 f303 	lsl.w	r3, r1, r3
    65c8:	431a      	orrs	r2, r3
    65ca:	9b01      	ldr	r3, [sp, #4]
    65cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    65d0:	e00c      	b.n	65ec <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    65d2:	9b01      	ldr	r3, [sp, #4]
    65d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    65d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    65dc:	2101      	movs	r1, #1
    65de:	fa01 f303 	lsl.w	r3, r1, r3
    65e2:	43db      	mvns	r3, r3
    65e4:	401a      	ands	r2, r3
    65e6:	9b01      	ldr	r3, [sp, #4]
    65e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    65ec:	bf00      	nop
    65ee:	b002      	add	sp, #8
    65f0:	4770      	bx	lr

000065f2 <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    65f2:	b082      	sub	sp, #8
    65f4:	9001      	str	r0, [sp, #4]
    65f6:	460b      	mov	r3, r1
    65f8:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    65fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6600:	2b00      	cmp	r3, #0
    6602:	d008      	beq.n	6616 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    6604:	9b01      	ldr	r3, [sp, #4]
    6606:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    660a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    660e:	9b01      	ldr	r3, [sp, #4]
    6610:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    6614:	e007      	b.n	6626 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    6616:	9b01      	ldr	r3, [sp, #4]
    6618:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    661c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6620:	9b01      	ldr	r3, [sp, #4]
    6622:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    6626:	bf00      	nop
    6628:	b002      	add	sp, #8
    662a:	4770      	bx	lr

0000662c <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    662c:	b082      	sub	sp, #8
    662e:	9001      	str	r0, [sp, #4]
    6630:	460b      	mov	r3, r1
    6632:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    6636:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    663a:	9b01      	ldr	r3, [sp, #4]
    663c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    6640:	bf00      	nop
    6642:	b002      	add	sp, #8
    6644:	4770      	bx	lr

00006646 <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    6646:	b082      	sub	sp, #8
    6648:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    664a:	9b01      	ldr	r3, [sp, #4]
    664c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    6650:	b29b      	uxth	r3, r3
}
    6652:	4618      	mov	r0, r3
    6654:	b002      	add	sp, #8
    6656:	4770      	bx	lr

00006658 <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    6658:	b082      	sub	sp, #8
    665a:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    665c:	9b01      	ldr	r3, [sp, #4]
    665e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6660:	b29b      	uxth	r3, r3
}
    6662:	4618      	mov	r0, r3
    6664:	b002      	add	sp, #8
    6666:	4770      	bx	lr

00006668 <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    6668:	b500      	push	{lr}
    666a:	b085      	sub	sp, #20
    666c:	9001      	str	r0, [sp, #4]
    666e:	460b      	mov	r3, r1
    6670:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    6674:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6678:	085b      	lsrs	r3, r3, #1
    667a:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    667e:	9b01      	ldr	r3, [sp, #4]
    6680:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    6682:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6686:	00db      	lsls	r3, r3, #3
    6688:	2101      	movs	r1, #1
    668a:	fa01 f303 	lsl.w	r3, r1, r3
    668e:	401a      	ands	r2, r3
    6690:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6694:	00db      	lsls	r3, r3, #3
    6696:	fa22 f303 	lsr.w	r3, r2, r3
    669a:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    669e:	9b01      	ldr	r3, [sp, #4]
    66a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    66a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    66a6:	00db      	lsls	r3, r3, #3
    66a8:	2180      	movs	r1, #128	; 0x80
    66aa:	fa01 f303 	lsl.w	r3, r1, r3
    66ae:	401a      	ands	r2, r3
    66b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    66b4:	00db      	lsls	r3, r3, #3
    66b6:	fa22 f303 	lsr.w	r3, r2, r3
    66ba:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    66be:	f89d 3009 	ldrb.w	r3, [sp, #9]
    66c2:	2b80      	cmp	r3, #128	; 0x80
    66c4:	d101      	bne.n	66ca <Ftm_Pwm_Ip_GetChannelMode+0x62>
    66c6:	2301      	movs	r3, #1
    66c8:	e000      	b.n	66cc <Ftm_Pwm_Ip_GetChannelMode+0x64>
    66ca:	2300      	movs	r3, #0
    66cc:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    66d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    66d4:	4619      	mov	r1, r3
    66d6:	9801      	ldr	r0, [sp, #4]
    66d8:	f7ff f99b 	bl	5a12 <Ftm_Pwm_Ip_GetChnEdgeLevel>
    66dc:	4603      	mov	r3, r0
    66de:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    66e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    66e6:	4619      	mov	r1, r3
    66e8:	9801      	ldr	r0, [sp, #4]
    66ea:	f7ff fa2a 	bl	5b42 <Ftm_Pwm_Ip_GetChnMode>
    66ee:	4603      	mov	r3, r0
    66f0:	009b      	lsls	r3, r3, #2
    66f2:	b2da      	uxtb	r2, r3
    66f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    66f8:	4313      	orrs	r3, r2
    66fa:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    66fe:	9801      	ldr	r0, [sp, #4]
    6700:	f7ff f923 	bl	594a <Ftm_Pwm_Ip_GetCpwms>
    6704:	4603      	mov	r3, r0
    6706:	b2db      	uxtb	r3, r3
    6708:	011b      	lsls	r3, r3, #4
    670a:	b2da      	uxtb	r2, r3
    670c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6710:	4313      	orrs	r3, r2
    6712:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    6716:	f89d 300a 	ldrb.w	r3, [sp, #10]
    671a:	015b      	lsls	r3, r3, #5
    671c:	b2da      	uxtb	r2, r3
    671e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6722:	4313      	orrs	r3, r2
    6724:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    6728:	f89d 3009 	ldrb.w	r3, [sp, #9]
    672c:	019b      	lsls	r3, r3, #6
    672e:	b2da      	uxtb	r2, r3
    6730:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6734:	4313      	orrs	r3, r2
    6736:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    673a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    673e:	2b62      	cmp	r3, #98	; 0x62
    6740:	d055      	beq.n	67ee <Ftm_Pwm_Ip_GetChannelMode+0x186>
    6742:	2b62      	cmp	r3, #98	; 0x62
    6744:	dc59      	bgt.n	67fa <Ftm_Pwm_Ip_GetChannelMode+0x192>
    6746:	2b22      	cmp	r3, #34	; 0x22
    6748:	dc3c      	bgt.n	67c4 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    674a:	2b09      	cmp	r3, #9
    674c:	db55      	blt.n	67fa <Ftm_Pwm_Ip_GetChannelMode+0x192>
    674e:	3b09      	subs	r3, #9
    6750:	2b19      	cmp	r3, #25
    6752:	d852      	bhi.n	67fa <Ftm_Pwm_Ip_GetChannelMode+0x192>
    6754:	a201      	add	r2, pc, #4	; (adr r2, 675c <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    6756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    675a:	bf00      	nop
    675c:	000067d1 	.word	0x000067d1
    6760:	000067cb 	.word	0x000067cb
    6764:	000067fb 	.word	0x000067fb
    6768:	000067fb 	.word	0x000067fb
    676c:	000067fb 	.word	0x000067fb
    6770:	000067fb 	.word	0x000067fb
    6774:	000067fb 	.word	0x000067fb
    6778:	000067fb 	.word	0x000067fb
    677c:	000067dd 	.word	0x000067dd
    6780:	000067d7 	.word	0x000067d7
    6784:	000067fb 	.word	0x000067fb
    6788:	000067fb 	.word	0x000067fb
    678c:	000067fb 	.word	0x000067fb
    6790:	000067fb 	.word	0x000067fb
    6794:	000067fb 	.word	0x000067fb
    6798:	000067fb 	.word	0x000067fb
    679c:	000067fb 	.word	0x000067fb
    67a0:	000067fb 	.word	0x000067fb
    67a4:	000067fb 	.word	0x000067fb
    67a8:	000067fb 	.word	0x000067fb
    67ac:	000067fb 	.word	0x000067fb
    67b0:	000067fb 	.word	0x000067fb
    67b4:	000067fb 	.word	0x000067fb
    67b8:	000067fb 	.word	0x000067fb
    67bc:	000067e9 	.word	0x000067e9
    67c0:	000067e3 	.word	0x000067e3
    67c4:	2b61      	cmp	r3, #97	; 0x61
    67c6:	d015      	beq.n	67f4 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    67c8:	e017      	b.n	67fa <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    67ca:	230a      	movs	r3, #10
    67cc:	9303      	str	r3, [sp, #12]
            break;
    67ce:	e017      	b.n	6800 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    67d0:	2309      	movs	r3, #9
    67d2:	9303      	str	r3, [sp, #12]
            break;
    67d4:	e014      	b.n	6800 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    67d6:	2312      	movs	r3, #18
    67d8:	9303      	str	r3, [sp, #12]
            break;
    67da:	e011      	b.n	6800 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    67dc:	2311      	movs	r3, #17
    67de:	9303      	str	r3, [sp, #12]
            break;
    67e0:	e00e      	b.n	6800 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    67e2:	2322      	movs	r3, #34	; 0x22
    67e4:	9303      	str	r3, [sp, #12]
            break;
    67e6:	e00b      	b.n	6800 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    67e8:	2321      	movs	r3, #33	; 0x21
    67ea:	9303      	str	r3, [sp, #12]
            break;
    67ec:	e008      	b.n	6800 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    67ee:	2362      	movs	r3, #98	; 0x62
    67f0:	9303      	str	r3, [sp, #12]
            break;
    67f2:	e005      	b.n	6800 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    67f4:	2361      	movs	r3, #97	; 0x61
    67f6:	9303      	str	r3, [sp, #12]
            break;
    67f8:	e002      	b.n	6800 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    67fa:	23ff      	movs	r3, #255	; 0xff
    67fc:	9303      	str	r3, [sp, #12]
            break;
    67fe:	bf00      	nop
    }

    return ChMode; 
    6800:	9b03      	ldr	r3, [sp, #12]
}
    6802:	4618      	mov	r0, r3
    6804:	b005      	add	sp, #20
    6806:	f85d fb04 	ldr.w	pc, [sp], #4

0000680a <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    680a:	b082      	sub	sp, #8
    680c:	9001      	str	r0, [sp, #4]
    680e:	460b      	mov	r3, r1
    6810:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    6814:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6818:	2b00      	cmp	r3, #0
    681a:	d006      	beq.n	682a <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    681c:	9b01      	ldr	r3, [sp, #4]
    681e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6820:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    6824:	9b01      	ldr	r3, [sp, #4]
    6826:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    6828:	e00b      	b.n	6842 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    682a:	9b01      	ldr	r3, [sp, #4]
    682c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    682e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6832:	2b00      	cmp	r3, #0
    6834:	d005      	beq.n	6842 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    6836:	9b01      	ldr	r3, [sp, #4]
    6838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    683a:	f043 0204 	orr.w	r2, r3, #4
    683e:	9b01      	ldr	r3, [sp, #4]
    6840:	655a      	str	r2, [r3, #84]	; 0x54
}
    6842:	bf00      	nop
    6844:	b002      	add	sp, #8
    6846:	4770      	bx	lr

00006848 <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    6848:	b500      	push	{lr}
    684a:	b085      	sub	sp, #20
    684c:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    684e:	2100      	movs	r1, #0
    6850:	9801      	ldr	r0, [sp, #4]
    6852:	f7ff ffda 	bl	680a <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    6856:	9b01      	ldr	r3, [sp, #4]
    6858:	681a      	ldr	r2, [r3, #0]
    685a:	9b01      	ldr	r3, [sp, #4]
    685c:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    685e:	9b01      	ldr	r3, [sp, #4]
    6860:	2200      	movs	r2, #0
    6862:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    6864:	9b01      	ldr	r3, [sp, #4]
    6866:	2200      	movs	r2, #0
    6868:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    686a:	9b01      	ldr	r3, [sp, #4]
    686c:	2200      	movs	r2, #0
    686e:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    6870:	9b01      	ldr	r3, [sp, #4]
    6872:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    6874:	9b01      	ldr	r3, [sp, #4]
    6876:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    6878:	9b01      	ldr	r3, [sp, #4]
    687a:	2204      	movs	r2, #4
    687c:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    687e:	9b01      	ldr	r3, [sp, #4]
    6880:	2200      	movs	r2, #0
    6882:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    6884:	9b01      	ldr	r3, [sp, #4]
    6886:	2200      	movs	r2, #0
    6888:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    688a:	9b01      	ldr	r3, [sp, #4]
    688c:	2200      	movs	r2, #0
    688e:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    6890:	9b01      	ldr	r3, [sp, #4]
    6892:	2200      	movs	r2, #0
    6894:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    6896:	9b01      	ldr	r3, [sp, #4]
    6898:	2200      	movs	r2, #0
    689a:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    689c:	9b01      	ldr	r3, [sp, #4]
    689e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    68a0:	9b01      	ldr	r3, [sp, #4]
    68a2:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    68a4:	9b01      	ldr	r3, [sp, #4]
    68a6:	2200      	movs	r2, #0
    68a8:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    68aa:	9b01      	ldr	r3, [sp, #4]
    68ac:	2200      	movs	r2, #0
    68ae:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    68b0:	9b01      	ldr	r3, [sp, #4]
    68b2:	2200      	movs	r2, #0
    68b4:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    68b6:	9b01      	ldr	r3, [sp, #4]
    68b8:	2200      	movs	r2, #0
    68ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    68be:	9b01      	ldr	r3, [sp, #4]
    68c0:	2200      	movs	r2, #0
    68c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    68c6:	9b01      	ldr	r3, [sp, #4]
    68c8:	2200      	movs	r2, #0
    68ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    68ce:	9b01      	ldr	r3, [sp, #4]
    68d0:	2200      	movs	r2, #0
    68d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    68d6:	9b01      	ldr	r3, [sp, #4]
    68d8:	2200      	movs	r2, #0
    68da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    68de:	9b01      	ldr	r3, [sp, #4]
    68e0:	2200      	movs	r2, #0
    68e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    68e6:	9b01      	ldr	r3, [sp, #4]
    68e8:	2200      	movs	r2, #0
    68ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    68ee:	2300      	movs	r3, #0
    68f0:	f88d 300f 	strb.w	r3, [sp, #15]
    68f4:	e014      	b.n	6920 <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    68f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    68fa:	9a01      	ldr	r2, [sp, #4]
    68fc:	3301      	adds	r3, #1
    68fe:	00db      	lsls	r3, r3, #3
    6900:	4413      	add	r3, r2
    6902:	2200      	movs	r2, #0
    6904:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    6906:	f89d 300f 	ldrb.w	r3, [sp, #15]
    690a:	9a01      	ldr	r2, [sp, #4]
    690c:	3301      	adds	r3, #1
    690e:	00db      	lsls	r3, r3, #3
    6910:	4413      	add	r3, r2
    6912:	2200      	movs	r2, #0
    6914:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    6916:	f89d 300f 	ldrb.w	r3, [sp, #15]
    691a:	3301      	adds	r3, #1
    691c:	f88d 300f 	strb.w	r3, [sp, #15]
    6920:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6924:	2b07      	cmp	r3, #7
    6926:	d9e6      	bls.n	68f6 <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    6928:	bf00      	nop
    692a:	bf00      	nop
    692c:	b005      	add	sp, #20
    692e:	f85d fb04 	ldr.w	pc, [sp], #4

00006932 <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    6932:	b084      	sub	sp, #16
    6934:	9001      	str	r0, [sp, #4]
    6936:	460b      	mov	r3, r1
    6938:	f88d 3003 	strb.w	r3, [sp, #3]
    693c:	4613      	mov	r3, r2
    693e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    6942:	2300      	movs	r3, #0
    6944:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    6946:	f89d 3003 	ldrb.w	r3, [sp, #3]
    694a:	2b01      	cmp	r3, #1
    694c:	d806      	bhi.n	695c <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    694e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6952:	2210      	movs	r2, #16
    6954:	fa02 f303 	lsl.w	r3, r2, r3
    6958:	9303      	str	r3, [sp, #12]
    695a:	e013      	b.n	6984 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    695c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6960:	2b05      	cmp	r3, #5
    6962:	d807      	bhi.n	6974 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    6964:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6968:	3b02      	subs	r3, #2
    696a:	2201      	movs	r2, #1
    696c:	fa02 f303 	lsl.w	r3, r2, r3
    6970:	9303      	str	r3, [sp, #12]
    6972:	e007      	b.n	6984 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    6974:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6978:	3b06      	subs	r3, #6
    697a:	f44f 7280 	mov.w	r2, #256	; 0x100
    697e:	fa02 f303 	lsl.w	r3, r2, r3
    6982:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    6984:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6988:	2b00      	cmp	r3, #0
    698a:	d006      	beq.n	699a <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    698c:	9b01      	ldr	r3, [sp, #4]
    698e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    6990:	9b03      	ldr	r3, [sp, #12]
    6992:	431a      	orrs	r2, r3
    6994:	9b01      	ldr	r3, [sp, #4]
    6996:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    6998:	e006      	b.n	69a8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    699a:	9b01      	ldr	r3, [sp, #4]
    699c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    699e:	9b03      	ldr	r3, [sp, #12]
    69a0:	43db      	mvns	r3, r3
    69a2:	401a      	ands	r2, r3
    69a4:	9b01      	ldr	r3, [sp, #4]
    69a6:	66da      	str	r2, [r3, #108]	; 0x6c
}
    69a8:	bf00      	nop
    69aa:	b004      	add	sp, #16
    69ac:	4770      	bx	lr

000069ae <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    69ae:	b082      	sub	sp, #8
    69b0:	9001      	str	r0, [sp, #4]
    69b2:	9100      	str	r1, [sp, #0]
    69b4:	9b00      	ldr	r3, [sp, #0]
    69b6:	2b03      	cmp	r3, #3
    69b8:	d82a      	bhi.n	6a10 <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    69ba:	a201      	add	r2, pc, #4	; (adr r2, 69c0 <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    69bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    69c0:	000069d1 	.word	0x000069d1
    69c4:	000069df 	.word	0x000069df
    69c8:	000069f1 	.word	0x000069f1
    69cc:	00006a03 	.word	0x00006a03
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    69d0:	9b01      	ldr	r3, [sp, #4]
    69d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    69d4:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    69d8:	9b01      	ldr	r3, [sp, #4]
    69da:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    69dc:	e019      	b.n	6a12 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    69de:	9b01      	ldr	r3, [sp, #4]
    69e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    69e2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    69e6:	f043 0220 	orr.w	r2, r3, #32
    69ea:	9b01      	ldr	r3, [sp, #4]
    69ec:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    69ee:	e010      	b.n	6a12 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    69f0:	9b01      	ldr	r3, [sp, #4]
    69f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    69f4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    69f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    69fc:	9b01      	ldr	r3, [sp, #4]
    69fe:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    6a00:	e007      	b.n	6a12 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    6a02:	9b01      	ldr	r3, [sp, #4]
    6a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6a06:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    6a0a:	9b01      	ldr	r3, [sp, #4]
    6a0c:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    6a0e:	e000      	b.n	6a12 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    6a10:	bf00      	nop
    }
}
    6a12:	bf00      	nop
    6a14:	b002      	add	sp, #8
    6a16:	4770      	bx	lr

00006a18 <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    6a18:	b082      	sub	sp, #8
    6a1a:	9001      	str	r0, [sp, #4]
    6a1c:	460b      	mov	r3, r1
    6a1e:	f88d 3003 	strb.w	r3, [sp, #3]
    6a22:	4613      	mov	r3, r2
    6a24:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    6a28:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6a2c:	2b00      	cmp	r3, #0
    6a2e:	d00b      	beq.n	6a48 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    6a30:	9b01      	ldr	r3, [sp, #4]
    6a32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    6a34:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6a38:	00db      	lsls	r3, r3, #3
    6a3a:	2140      	movs	r1, #64	; 0x40
    6a3c:	fa01 f303 	lsl.w	r3, r1, r3
    6a40:	431a      	orrs	r2, r3
    6a42:	9b01      	ldr	r3, [sp, #4]
    6a44:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    6a46:	e00b      	b.n	6a60 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    6a48:	9b01      	ldr	r3, [sp, #4]
    6a4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    6a4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6a50:	00db      	lsls	r3, r3, #3
    6a52:	2140      	movs	r1, #64	; 0x40
    6a54:	fa01 f303 	lsl.w	r3, r1, r3
    6a58:	43db      	mvns	r3, r3
    6a5a:	401a      	ands	r2, r3
    6a5c:	9b01      	ldr	r3, [sp, #4]
    6a5e:	665a      	str	r2, [r3, #100]	; 0x64
}
    6a60:	bf00      	nop
    6a62:	b002      	add	sp, #8
    6a64:	4770      	bx	lr

00006a66 <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    6a66:	b082      	sub	sp, #8
    6a68:	9001      	str	r0, [sp, #4]
    6a6a:	460b      	mov	r3, r1
    6a6c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    6a70:	9b01      	ldr	r3, [sp, #4]
    6a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6a78:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6a7c:	2a00      	cmp	r2, #0
    6a7e:	d001      	beq.n	6a84 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    6a80:	2280      	movs	r2, #128	; 0x80
    6a82:	e000      	b.n	6a86 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    6a84:	2200      	movs	r2, #0
    6a86:	431a      	orrs	r2, r3
    6a88:	9b01      	ldr	r3, [sp, #4]
    6a8a:	655a      	str	r2, [r3, #84]	; 0x54
}
    6a8c:	bf00      	nop
    6a8e:	b002      	add	sp, #8
    6a90:	4770      	bx	lr

00006a92 <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    6a92:	b082      	sub	sp, #8
    6a94:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    6a96:	9b01      	ldr	r3, [sp, #4]
    6a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    6a9e:	9b01      	ldr	r3, [sp, #4]
    6aa0:	675a      	str	r2, [r3, #116]	; 0x74
}
    6aa2:	bf00      	nop
    6aa4:	b002      	add	sp, #8
    6aa6:	4770      	bx	lr

00006aa8 <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    6aa8:	b082      	sub	sp, #8
    6aaa:	9001      	str	r0, [sp, #4]
    6aac:	460b      	mov	r3, r1
    6aae:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    6ab2:	9b01      	ldr	r3, [sp, #4]
    6ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6ab6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    6aba:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6abe:	021b      	lsls	r3, r3, #8
    6ac0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    6ac4:	431a      	orrs	r2, r3
    6ac6:	9b01      	ldr	r3, [sp, #4]
    6ac8:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6aca:	bf00      	nop
    6acc:	b002      	add	sp, #8
    6ace:	4770      	bx	lr

00006ad0 <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    6ad0:	b082      	sub	sp, #8
    6ad2:	9001      	str	r0, [sp, #4]
    6ad4:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    6ad6:	9b01      	ldr	r3, [sp, #4]
    6ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6ada:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6ade:	9a00      	ldr	r2, [sp, #0]
    6ae0:	2a00      	cmp	r2, #0
    6ae2:	d002      	beq.n	6aea <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    6ae4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6ae8:	e000      	b.n	6aec <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    6aea:	2200      	movs	r2, #0
    6aec:	431a      	orrs	r2, r3
    6aee:	9b01      	ldr	r3, [sp, #4]
    6af0:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6af2:	bf00      	nop
    6af4:	b002      	add	sp, #8
    6af6:	4770      	bx	lr

00006af8 <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    6af8:	b086      	sub	sp, #24
    6afa:	9003      	str	r0, [sp, #12]
    6afc:	460b      	mov	r3, r1
    6afe:	9201      	str	r2, [sp, #4]
    6b00:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    6b04:	9b01      	ldr	r3, [sp, #4]
    6b06:	2b00      	cmp	r3, #0
    6b08:	bf14      	ite	ne
    6b0a:	2301      	movne	r3, #1
    6b0c:	2300      	moveq	r3, #0
    6b0e:	b2db      	uxtb	r3, r3
    6b10:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    6b12:	9b03      	ldr	r3, [sp, #12]
    6b14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6b18:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6b1c:	2101      	movs	r1, #1
    6b1e:	fa01 f303 	lsl.w	r3, r1, r3
    6b22:	43db      	mvns	r3, r3
    6b24:	401a      	ands	r2, r3
    6b26:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6b2a:	9905      	ldr	r1, [sp, #20]
    6b2c:	fa01 f303 	lsl.w	r3, r1, r3
    6b30:	431a      	orrs	r2, r3
    6b32:	9b03      	ldr	r3, [sp, #12]
    6b34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    6b38:	bf00      	nop
    6b3a:	b006      	add	sp, #24
    6b3c:	4770      	bx	lr

00006b3e <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    6b3e:	b084      	sub	sp, #16
    6b40:	9001      	str	r0, [sp, #4]
    6b42:	460b      	mov	r3, r1
    6b44:	f88d 3003 	strb.w	r3, [sp, #3]
    6b48:	4613      	mov	r3, r2
    6b4a:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    6b4e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6b52:	2b00      	cmp	r3, #0
    6b54:	d001      	beq.n	6b5a <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    6b56:	2301      	movs	r3, #1
    6b58:	e000      	b.n	6b5c <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    6b5a:	2300      	movs	r3, #0
    6b5c:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    6b5e:	9b01      	ldr	r3, [sp, #4]
    6b60:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    6b62:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b66:	2101      	movs	r1, #1
    6b68:	fa01 f303 	lsl.w	r3, r1, r3
    6b6c:	43db      	mvns	r3, r3
    6b6e:	401a      	ands	r2, r3
    6b70:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b74:	9903      	ldr	r1, [sp, #12]
    6b76:	fa01 f303 	lsl.w	r3, r1, r3
    6b7a:	431a      	orrs	r2, r3
    6b7c:	9b01      	ldr	r3, [sp, #4]
    6b7e:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6b80:	bf00      	nop
    6b82:	b004      	add	sp, #16
    6b84:	4770      	bx	lr

00006b86 <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    6b86:	b084      	sub	sp, #16
    6b88:	9001      	str	r0, [sp, #4]
    6b8a:	460b      	mov	r3, r1
    6b8c:	f88d 3003 	strb.w	r3, [sp, #3]
    6b90:	4613      	mov	r3, r2
    6b92:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    6b96:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d001      	beq.n	6ba2 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    6b9e:	2301      	movs	r3, #1
    6ba0:	e000      	b.n	6ba4 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    6ba2:	2300      	movs	r3, #0
    6ba4:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    6ba6:	9b01      	ldr	r3, [sp, #4]
    6ba8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    6baa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6bae:	2110      	movs	r1, #16
    6bb0:	fa01 f303 	lsl.w	r3, r1, r3
    6bb4:	43db      	mvns	r3, r3
    6bb6:	401a      	ands	r2, r3
    6bb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6bbc:	9903      	ldr	r1, [sp, #12]
    6bbe:	fa01 f303 	lsl.w	r3, r1, r3
    6bc2:	011b      	lsls	r3, r3, #4
    6bc4:	431a      	orrs	r2, r3
    6bc6:	9b01      	ldr	r3, [sp, #4]
    6bc8:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6bca:	bf00      	nop
    6bcc:	b004      	add	sp, #16
    6bce:	4770      	bx	lr

00006bd0 <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    6bd0:	b082      	sub	sp, #8
    6bd2:	9001      	str	r0, [sp, #4]
    6bd4:	460b      	mov	r3, r1
    6bd6:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    6bda:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6bde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6be2:	409a      	lsls	r2, r3
    6be4:	9b01      	ldr	r3, [sp, #4]
    6be6:	6a1b      	ldr	r3, [r3, #32]
    6be8:	431a      	orrs	r2, r3
    6bea:	9b01      	ldr	r3, [sp, #4]
    6bec:	621a      	str	r2, [r3, #32]
}
    6bee:	bf00      	nop
    6bf0:	b002      	add	sp, #8
    6bf2:	4770      	bx	lr

00006bf4 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    6bf4:	b084      	sub	sp, #16
    6bf6:	4603      	mov	r3, r0
    6bf8:	f88d 3007 	strb.w	r3, [sp, #7]
    6bfc:	460b      	mov	r3, r1
    6bfe:	f8ad 3004 	strh.w	r3, [sp, #4]
    6c02:	4613      	mov	r3, r2
    6c04:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    6c08:	2300      	movs	r3, #0
    6c0a:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    6c0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c12:	4a17      	ldr	r2, [pc, #92]	; (6c70 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    6c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6c18:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c1c:	429a      	cmp	r2, r3
    6c1e:	d107      	bne.n	6c30 <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    6c20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c24:	4a12      	ldr	r2, [pc, #72]	; (6c70 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    6c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6c2a:	f8ad 300e 	strh.w	r3, [sp, #14]
    6c2e:	e019      	b.n	6c64 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    6c30:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6c34:	2b00      	cmp	r3, #0
    6c36:	d104      	bne.n	6c42 <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    6c38:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6c3c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6c40:	e010      	b.n	6c64 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    6c42:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    6c46:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6c4a:	4413      	add	r3, r2
    6c4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6c50:	4907      	ldr	r1, [pc, #28]	; (6c70 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    6c52:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    6c56:	fb93 f1f2 	sdiv	r1, r3, r2
    6c5a:	fb01 f202 	mul.w	r2, r1, r2
    6c5e:	1a9b      	subs	r3, r3, r2
    6c60:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    6c64:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    6c68:	4618      	mov	r0, r3
    6c6a:	b004      	add	sp, #16
    6c6c:	4770      	bx	lr
    6c6e:	bf00      	nop
    6c70:	1fff8cfc 	.word	0x1fff8cfc

00006c74 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    6c74:	b500      	push	{lr}
    6c76:	b085      	sub	sp, #20
    6c78:	4603      	mov	r3, r0
    6c7a:	9100      	str	r1, [sp, #0]
    6c7c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6c80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c84:	4a40      	ldr	r2, [pc, #256]	; (6d88 <Ftm_Pwm_Ip_InitPair+0x114>)
    6c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c8a:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    6c8c:	2300      	movs	r3, #0
    6c8e:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    6c92:	2300      	movs	r3, #0
    6c94:	f88d 300a 	strb.w	r3, [sp, #10]
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    6c98:	9b00      	ldr	r3, [sp, #0]
    6c9a:	781b      	ldrb	r3, [r3, #0]
    6c9c:	005b      	lsls	r3, r3, #1
    6c9e:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    6ca2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6ca6:	3301      	adds	r3, #1
    6ca8:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    6cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cb0:	9a00      	ldr	r2, [sp, #0]
    6cb2:	7812      	ldrb	r2, [r2, #0]
    6cb4:	4610      	mov	r0, r2
    6cb6:	9a00      	ldr	r2, [sp, #0]
    6cb8:	8951      	ldrh	r1, [r2, #10]
    6cba:	4a34      	ldr	r2, [pc, #208]	; (6d8c <Ftm_Pwm_Ip_InitPair+0x118>)
    6cbc:	009b      	lsls	r3, r3, #2
    6cbe:	4403      	add	r3, r0
    6cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    6cc4:	9b00      	ldr	r3, [sp, #0]
    6cc6:	7819      	ldrb	r1, [r3, #0]
    6cc8:	9b00      	ldr	r3, [sp, #0]
    6cca:	789b      	ldrb	r3, [r3, #2]
    6ccc:	461a      	mov	r2, r3
    6cce:	9803      	ldr	r0, [sp, #12]
    6cd0:	f7ff f920 	bl	5f14 <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    6cd4:	9b00      	ldr	r3, [sp, #0]
    6cd6:	789b      	ldrb	r3, [r3, #2]
    6cd8:	2b00      	cmp	r3, #0
    6cda:	d02f      	beq.n	6d3c <Ftm_Pwm_Ip_InitPair+0xc8>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    6cdc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6ce0:	4619      	mov	r1, r3
    6ce2:	9803      	ldr	r0, [sp, #12]
    6ce4:	f7ff fa3e 	bl	6164 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    6ce8:	4603      	mov	r3, r0
    6cea:	2b01      	cmp	r3, #1
    6cec:	d113      	bne.n	6d16 <Ftm_Pwm_Ip_InitPair+0xa2>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    6cee:	9b00      	ldr	r3, [sp, #0]
    6cf0:	685b      	ldr	r3, [r3, #4]
    6cf2:	2b01      	cmp	r3, #1
    6cf4:	d107      	bne.n	6d06 <Ftm_Pwm_Ip_InitPair+0x92>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    6cf6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6cfa:	2200      	movs	r2, #0
    6cfc:	4619      	mov	r1, r3
    6cfe:	9803      	ldr	r0, [sp, #12]
    6d00:	f7ff fa0e 	bl	6120 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    6d04:	e01a      	b.n	6d3c <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    6d06:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6d0a:	2201      	movs	r2, #1
    6d0c:	4619      	mov	r1, r3
    6d0e:	9803      	ldr	r0, [sp, #12]
    6d10:	f7ff fa06 	bl	6120 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    6d14:	e012      	b.n	6d3c <Ftm_Pwm_Ip_InitPair+0xc8>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    6d16:	9b00      	ldr	r3, [sp, #0]
    6d18:	685b      	ldr	r3, [r3, #4]
    6d1a:	2b01      	cmp	r3, #1
    6d1c:	d107      	bne.n	6d2e <Ftm_Pwm_Ip_InitPair+0xba>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    6d1e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6d22:	2201      	movs	r2, #1
    6d24:	4619      	mov	r1, r3
    6d26:	9803      	ldr	r0, [sp, #12]
    6d28:	f7ff f9fa 	bl	6120 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    6d2c:	e006      	b.n	6d3c <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    6d2e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6d32:	2200      	movs	r2, #0
    6d34:	4619      	mov	r1, r3
    6d36:	9803      	ldr	r0, [sp, #12]
    6d38:	f7ff f9f2 	bl	6120 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    6d3c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6d40:	4619      	mov	r1, r3
    6d42:	9803      	ldr	r0, [sp, #12]
    6d44:	f7fe fe31 	bl	59aa <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    6d48:	9b00      	ldr	r3, [sp, #0]
    6d4a:	7819      	ldrb	r1, [r3, #0]
    6d4c:	9b00      	ldr	r3, [sp, #0]
    6d4e:	7a5b      	ldrb	r3, [r3, #9]
    6d50:	461a      	mov	r2, r3
    6d52:	9803      	ldr	r0, [sp, #12]
    6d54:	f7ff f92c 	bl	5fb0 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    6d58:	9b00      	ldr	r3, [sp, #0]
    6d5a:	7819      	ldrb	r1, [r3, #0]
    6d5c:	9b00      	ldr	r3, [sp, #0]
    6d5e:	785b      	ldrb	r3, [r3, #1]
    6d60:	461a      	mov	r2, r3
    6d62:	9803      	ldr	r0, [sp, #12]
    6d64:	f7ff f8fd 	bl	5f62 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    6d68:	9b00      	ldr	r3, [sp, #0]
    6d6a:	7a1a      	ldrb	r2, [r3, #8]
    6d6c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6d70:	4619      	mov	r1, r3
    6d72:	9803      	ldr	r0, [sp, #12]
    6d74:	f7ff fddd 	bl	6932 <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    6d78:	2101      	movs	r1, #1
    6d7a:	9803      	ldr	r0, [sp, #12]
    6d7c:	f7ff f814 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    6d80:	bf00      	nop
    6d82:	b005      	add	sp, #20
    6d84:	f85d fb04 	ldr.w	pc, [sp], #4
    6d88:	0000bde4 	.word	0x0000bde4
    6d8c:	1fff8d44 	.word	0x1fff8d44

00006d90 <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    6d90:	b500      	push	{lr}
    6d92:	b085      	sub	sp, #20
    6d94:	4603      	mov	r3, r0
    6d96:	460a      	mov	r2, r1
    6d98:	f88d 3007 	strb.w	r3, [sp, #7]
    6d9c:	4613      	mov	r3, r2
    6d9e:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6da2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6da6:	4a0a      	ldr	r2, [pc, #40]	; (6dd0 <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    6da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dac:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    6dae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6db2:	2200      	movs	r2, #0
    6db4:	4619      	mov	r1, r3
    6db6:	9803      	ldr	r0, [sp, #12]
    6db8:	f7fe feed 	bl	5b96 <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    6dbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6dc0:	4619      	mov	r1, r3
    6dc2:	9803      	ldr	r0, [sp, #12]
    6dc4:	f7fe ff0a 	bl	5bdc <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    6dc8:	bf00      	nop
    6dca:	b005      	add	sp, #20
    6dcc:	f85d fb04 	ldr.w	pc, [sp], #4
    6dd0:	0000bde4 	.word	0x0000bde4

00006dd4 <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    6dd4:	b500      	push	{lr}
    6dd6:	b085      	sub	sp, #20
    6dd8:	4603      	mov	r3, r0
    6dda:	9100      	str	r1, [sp, #0]
    6ddc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6de0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6de4:	4a53      	ldr	r2, [pc, #332]	; (6f34 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    6de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dea:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    6dec:	9b00      	ldr	r3, [sp, #0]
    6dee:	681b      	ldr	r3, [r3, #0]
    6df0:	2b00      	cmp	r3, #0
    6df2:	d002      	beq.n	6dfa <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    6df4:	2b01      	cmp	r3, #1
    6df6:	d04c      	beq.n	6e92 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    6df8:	e097      	b.n	6f2a <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    6dfa:	9b00      	ldr	r3, [sp, #0]
    6dfc:	699b      	ldr	r3, [r3, #24]
    6dfe:	2b00      	cmp	r3, #0
    6e00:	bf14      	ite	ne
    6e02:	2301      	movne	r3, #1
    6e04:	2300      	moveq	r3, #0
    6e06:	b2db      	uxtb	r3, r3
    6e08:	4619      	mov	r1, r3
    6e0a:	9803      	ldr	r0, [sp, #12]
    6e0c:	f7ff faa3 	bl	6356 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    6e10:	2100      	movs	r1, #0
    6e12:	9803      	ldr	r0, [sp, #12]
    6e14:	f7ff fb1c 	bl	6450 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    6e18:	9b00      	ldr	r3, [sp, #0]
    6e1a:	691b      	ldr	r3, [r3, #16]
    6e1c:	2b00      	cmp	r3, #0
    6e1e:	bf14      	ite	ne
    6e20:	2301      	movne	r3, #1
    6e22:	2300      	moveq	r3, #0
    6e24:	b2db      	uxtb	r3, r3
    6e26:	4619      	mov	r1, r3
    6e28:	9803      	ldr	r0, [sp, #12]
    6e2a:	f7ff faad 	bl	6388 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    6e2e:	2100      	movs	r1, #0
    6e30:	9803      	ldr	r0, [sp, #12]
    6e32:	f7ff fb26 	bl	6482 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    6e36:	9b00      	ldr	r3, [sp, #0]
    6e38:	695b      	ldr	r3, [r3, #20]
    6e3a:	2b00      	cmp	r3, #0
    6e3c:	bf14      	ite	ne
    6e3e:	2301      	movne	r3, #1
    6e40:	2300      	moveq	r3, #0
    6e42:	b2db      	uxtb	r3, r3
    6e44:	4619      	mov	r1, r3
    6e46:	9803      	ldr	r0, [sp, #12]
    6e48:	f7ff fab7 	bl	63ba <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    6e4c:	2100      	movs	r1, #0
    6e4e:	9803      	ldr	r0, [sp, #12]
    6e50:	f7ff fb17 	bl	6482 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6e54:	9b00      	ldr	r3, [sp, #0]
    6e56:	69db      	ldr	r3, [r3, #28]
    6e58:	2b00      	cmp	r3, #0
    6e5a:	bf14      	ite	ne
    6e5c:	2301      	movne	r3, #1
    6e5e:	2300      	moveq	r3, #0
    6e60:	b2db      	uxtb	r3, r3
    6e62:	4619      	mov	r1, r3
    6e64:	9803      	ldr	r0, [sp, #12]
    6e66:	f7ff fa5d 	bl	6324 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    6e6a:	2100      	movs	r1, #0
    6e6c:	9803      	ldr	r0, [sp, #12]
    6e6e:	f7ff fad6 	bl	641e <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6e72:	9b00      	ldr	r3, [sp, #0]
    6e74:	6a1b      	ldr	r3, [r3, #32]
    6e76:	2b00      	cmp	r3, #0
    6e78:	bf14      	ite	ne
    6e7a:	2301      	movne	r3, #1
    6e7c:	2300      	moveq	r3, #0
    6e7e:	b2db      	uxtb	r3, r3
    6e80:	4619      	mov	r1, r3
    6e82:	9803      	ldr	r0, [sp, #12]
    6e84:	f7ff fa35 	bl	62f2 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    6e88:	2100      	movs	r1, #0
    6e8a:	9803      	ldr	r0, [sp, #12]
    6e8c:	f7ff faae 	bl	63ec <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    6e90:	e04b      	b.n	6f2a <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    6e92:	2100      	movs	r1, #0
    6e94:	9803      	ldr	r0, [sp, #12]
    6e96:	f7ff fa5e 	bl	6356 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    6e9a:	9b00      	ldr	r3, [sp, #0]
    6e9c:	699b      	ldr	r3, [r3, #24]
    6e9e:	2b00      	cmp	r3, #0
    6ea0:	bf14      	ite	ne
    6ea2:	2301      	movne	r3, #1
    6ea4:	2300      	moveq	r3, #0
    6ea6:	b2db      	uxtb	r3, r3
    6ea8:	4619      	mov	r1, r3
    6eaa:	9803      	ldr	r0, [sp, #12]
    6eac:	f7ff fad0 	bl	6450 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    6eb0:	2100      	movs	r1, #0
    6eb2:	9803      	ldr	r0, [sp, #12]
    6eb4:	f7ff fa68 	bl	6388 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    6eb8:	9b00      	ldr	r3, [sp, #0]
    6eba:	691b      	ldr	r3, [r3, #16]
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	bf14      	ite	ne
    6ec0:	2301      	movne	r3, #1
    6ec2:	2300      	moveq	r3, #0
    6ec4:	b2db      	uxtb	r3, r3
    6ec6:	4619      	mov	r1, r3
    6ec8:	9803      	ldr	r0, [sp, #12]
    6eca:	f7ff fada 	bl	6482 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    6ece:	2100      	movs	r1, #0
    6ed0:	9803      	ldr	r0, [sp, #12]
    6ed2:	f7ff fa72 	bl	63ba <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    6ed6:	9b00      	ldr	r3, [sp, #0]
    6ed8:	695b      	ldr	r3, [r3, #20]
    6eda:	2b00      	cmp	r3, #0
    6edc:	bf14      	ite	ne
    6ede:	2301      	movne	r3, #1
    6ee0:	2300      	moveq	r3, #0
    6ee2:	b2db      	uxtb	r3, r3
    6ee4:	4619      	mov	r1, r3
    6ee6:	9803      	ldr	r0, [sp, #12]
    6ee8:	f7ff facb 	bl	6482 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    6eec:	2100      	movs	r1, #0
    6eee:	9803      	ldr	r0, [sp, #12]
    6ef0:	f7ff fa18 	bl	6324 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6ef4:	9b00      	ldr	r3, [sp, #0]
    6ef6:	69db      	ldr	r3, [r3, #28]
    6ef8:	2b00      	cmp	r3, #0
    6efa:	bf14      	ite	ne
    6efc:	2301      	movne	r3, #1
    6efe:	2300      	moveq	r3, #0
    6f00:	b2db      	uxtb	r3, r3
    6f02:	4619      	mov	r1, r3
    6f04:	9803      	ldr	r0, [sp, #12]
    6f06:	f7ff fa8a 	bl	641e <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    6f0a:	2100      	movs	r1, #0
    6f0c:	9803      	ldr	r0, [sp, #12]
    6f0e:	f7ff f9f0 	bl	62f2 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6f12:	9b00      	ldr	r3, [sp, #0]
    6f14:	6a1b      	ldr	r3, [r3, #32]
    6f16:	2b00      	cmp	r3, #0
    6f18:	bf14      	ite	ne
    6f1a:	2301      	movne	r3, #1
    6f1c:	2300      	moveq	r3, #0
    6f1e:	b2db      	uxtb	r3, r3
    6f20:	4619      	mov	r1, r3
    6f22:	9803      	ldr	r0, [sp, #12]
    6f24:	f7ff fa62 	bl	63ec <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    6f28:	bf00      	nop
    }
}
    6f2a:	bf00      	nop
    6f2c:	b005      	add	sp, #20
    6f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    6f32:	bf00      	nop
    6f34:	0000bde4 	.word	0x0000bde4

00006f38 <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    6f38:	b500      	push	{lr}
    6f3a:	b085      	sub	sp, #20
    6f3c:	4603      	mov	r3, r0
    6f3e:	9100      	str	r1, [sp, #0]
    6f40:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6f44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f48:	4a19      	ldr	r2, [pc, #100]	; (6fb0 <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    6f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f4e:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6f50:	9b00      	ldr	r3, [sp, #0]
    6f52:	699b      	ldr	r3, [r3, #24]
    6f54:	2b00      	cmp	r3, #0
    6f56:	bf14      	ite	ne
    6f58:	2301      	movne	r3, #1
    6f5a:	2300      	moveq	r3, #0
    6f5c:	b2db      	uxtb	r3, r3
    6f5e:	4619      	mov	r1, r3
    6f60:	9803      	ldr	r0, [sp, #12]
    6f62:	f7fe fee6 	bl	5d32 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6f66:	9b00      	ldr	r3, [sp, #0]
    6f68:	691b      	ldr	r3, [r3, #16]
    6f6a:	2b00      	cmp	r3, #0
    6f6c:	bf14      	ite	ne
    6f6e:	2301      	movne	r3, #1
    6f70:	2300      	moveq	r3, #0
    6f72:	b2db      	uxtb	r3, r3
    6f74:	4619      	mov	r1, r3
    6f76:	9803      	ldr	r0, [sp, #12]
    6f78:	f7ff f973 	bl	6262 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6f7c:	9b00      	ldr	r3, [sp, #0]
    6f7e:	695b      	ldr	r3, [r3, #20]
    6f80:	2b00      	cmp	r3, #0
    6f82:	bf14      	ite	ne
    6f84:	2301      	movne	r3, #1
    6f86:	2300      	moveq	r3, #0
    6f88:	b2db      	uxtb	r3, r3
    6f8a:	4619      	mov	r1, r3
    6f8c:	9803      	ldr	r0, [sp, #12]
    6f8e:	f7ff f980 	bl	6292 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6f92:	9b00      	ldr	r3, [sp, #0]
    6f94:	69db      	ldr	r3, [r3, #28]
    6f96:	2b00      	cmp	r3, #0
    6f98:	bf14      	ite	ne
    6f9a:	2301      	movne	r3, #1
    6f9c:	2300      	moveq	r3, #0
    6f9e:	b2db      	uxtb	r3, r3
    6fa0:	4619      	mov	r1, r3
    6fa2:	9803      	ldr	r0, [sp, #12]
    6fa4:	f7ff f945 	bl	6232 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    6fa8:	bf00      	nop
    6faa:	b005      	add	sp, #20
    6fac:	f85d fb04 	ldr.w	pc, [sp], #4
    6fb0:	0000bde4 	.word	0x0000bde4

00006fb4 <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    6fb4:	b500      	push	{lr}
    6fb6:	b087      	sub	sp, #28
    6fb8:	4603      	mov	r3, r0
    6fba:	9100      	str	r1, [sp, #0]
    6fbc:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6fc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6fc4:	4a42      	ldr	r2, [pc, #264]	; (70d0 <Ftm_Pwm_Ip_UpdateSync+0x11c>)
    6fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fca:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    6fcc:	2300      	movs	r3, #0
    6fce:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    6fd0:	2300      	movs	r3, #0
    6fd2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(SyncCfg != NULL_PTR);
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    6fd6:	9b00      	ldr	r3, [sp, #0]
    6fd8:	791b      	ldrb	r3, [r3, #4]
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d107      	bne.n	6fee <Ftm_Pwm_Ip_UpdateSync+0x3a>
    6fde:	9b00      	ldr	r3, [sp, #0]
    6fe0:	795b      	ldrb	r3, [r3, #5]
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d103      	bne.n	6fee <Ftm_Pwm_Ip_UpdateSync+0x3a>
    6fe6:	9b00      	ldr	r3, [sp, #0]
    6fe8:	799b      	ldrb	r3, [r3, #6]
    6fea:	2b00      	cmp	r3, #0
    6fec:	d001      	beq.n	6ff2 <Ftm_Pwm_Ip_UpdateSync+0x3e>
    6fee:	2301      	movs	r3, #1
    6ff0:	e000      	b.n	6ff4 <Ftm_Pwm_Ip_UpdateSync+0x40>
    6ff2:	2300      	movs	r3, #0
    6ff4:	f88d 300f 	strb.w	r3, [sp, #15]
    6ff8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ffc:	f003 0301 	and.w	r3, r3, #1
    7000:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    7004:	9b00      	ldr	r3, [sp, #0]
    7006:	681b      	ldr	r3, [r3, #0]
    7008:	2b00      	cmp	r3, #0
    700a:	d105      	bne.n	7018 <Ftm_Pwm_Ip_UpdateSync+0x64>
    700c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7010:	2b00      	cmp	r3, #0
    7012:	d001      	beq.n	7018 <Ftm_Pwm_Ip_UpdateSync+0x64>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    7014:	2301      	movs	r3, #1
    7016:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    7018:	9b00      	ldr	r3, [sp, #0]
    701a:	6a1b      	ldr	r3, [r3, #32]
    701c:	2b02      	cmp	r3, #2
    701e:	d101      	bne.n	7024 <Ftm_Pwm_Ip_UpdateSync+0x70>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    7020:	2301      	movs	r3, #1
    7022:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    7024:	9b05      	ldr	r3, [sp, #20]
    7026:	2b00      	cmp	r3, #0
    7028:	d14c      	bne.n	70c4 <Ftm_Pwm_Ip_UpdateSync+0x110>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    702a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    702e:	9900      	ldr	r1, [sp, #0]
    7030:	4618      	mov	r0, r3
    7032:	f7ff fecf 	bl	6dd4 <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    7036:	2101      	movs	r1, #1
    7038:	9804      	ldr	r0, [sp, #16]
    703a:	f7ff f942 	bl	62c2 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    703e:	9b00      	ldr	r3, [sp, #0]
    7040:	791b      	ldrb	r3, [r3, #4]
    7042:	461a      	mov	r2, r3
    7044:	2100      	movs	r1, #0
    7046:	9804      	ldr	r0, [sp, #16]
    7048:	f7fe fe89 	bl	5d5e <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    704c:	9b00      	ldr	r3, [sp, #0]
    704e:	795b      	ldrb	r3, [r3, #5]
    7050:	461a      	mov	r2, r3
    7052:	2101      	movs	r1, #1
    7054:	9804      	ldr	r0, [sp, #16]
    7056:	f7fe fe82 	bl	5d5e <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    705a:	9b00      	ldr	r3, [sp, #0]
    705c:	799b      	ldrb	r3, [r3, #6]
    705e:	461a      	mov	r2, r3
    7060:	2102      	movs	r1, #2
    7062:	9804      	ldr	r0, [sp, #16]
    7064:	f7fe fe7b 	bl	5d5e <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    7068:	9b00      	ldr	r3, [sp, #0]
    706a:	79db      	ldrb	r3, [r3, #7]
    706c:	4619      	mov	r1, r3
    706e:	9804      	ldr	r0, [sp, #16]
    7070:	f7ff f8c7 	bl	6202 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    7074:	9b00      	ldr	r3, [sp, #0]
    7076:	7a1b      	ldrb	r3, [r3, #8]
    7078:	4619      	mov	r1, r3
    707a:	9804      	ldr	r0, [sp, #16]
    707c:	f7fe fe43 	bl	5d06 <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    7080:	9b00      	ldr	r3, [sp, #0]
    7082:	7a5b      	ldrb	r3, [r3, #9]
    7084:	4619      	mov	r1, r3
    7086:	9804      	ldr	r0, [sp, #16]
    7088:	f7fe fe27 	bl	5cda <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    708c:	9b00      	ldr	r3, [sp, #0]
    708e:	7a9b      	ldrb	r3, [r3, #10]
    7090:	2b00      	cmp	r3, #0
    7092:	d005      	beq.n	70a0 <Ftm_Pwm_Ip_UpdateSync+0xec>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    7094:	9b00      	ldr	r3, [sp, #0]
    7096:	899b      	ldrh	r3, [r3, #12]
    7098:	4619      	mov	r1, r3
    709a:	9804      	ldr	r0, [sp, #16]
    709c:	f7ff fac6 	bl	662c <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    70a0:	9b00      	ldr	r3, [sp, #0]
    70a2:	7a9b      	ldrb	r3, [r3, #10]
    70a4:	4619      	mov	r1, r3
    70a6:	9804      	ldr	r0, [sp, #16]
    70a8:	f7ff faa3 	bl	65f2 <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    70ac:	9b00      	ldr	r3, [sp, #0]
    70ae:	7b9b      	ldrb	r3, [r3, #14]
    70b0:	4619      	mov	r1, r3
    70b2:	9804      	ldr	r0, [sp, #16]
    70b4:	f7ff f86b 	bl	618e <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    70b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    70bc:	9900      	ldr	r1, [sp, #0]
    70be:	4618      	mov	r0, r3
    70c0:	f7ff ff3a 	bl	6f38 <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    70c4:	9b05      	ldr	r3, [sp, #20]
}
    70c6:	4618      	mov	r0, r3
    70c8:	b007      	add	sp, #28
    70ca:	f85d fb04 	ldr.w	pc, [sp], #4
    70ce:	bf00      	nop
    70d0:	0000bde4 	.word	0x0000bde4

000070d4 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    70d4:	b500      	push	{lr}
    70d6:	b085      	sub	sp, #20
    70d8:	4603      	mov	r3, r0
    70da:	9100      	str	r1, [sp, #0]
    70dc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    70e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    70e4:	4a1f      	ldr	r2, [pc, #124]	; (7164 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    70e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ea:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    70ec:	9803      	ldr	r0, [sp, #12]
    70ee:	f7ff fbab 	bl	6848 <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    70f2:	2100      	movs	r1, #0
    70f4:	9803      	ldr	r0, [sp, #12]
    70f6:	f7fe fc01 	bl	58fc <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    70fa:	9803      	ldr	r0, [sp, #12]
    70fc:	f7fe fc4a 	bl	5994 <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    7100:	9b00      	ldr	r3, [sp, #0]
    7102:	68db      	ldr	r3, [r3, #12]
    7104:	2b00      	cmp	r3, #0
    7106:	bf14      	ite	ne
    7108:	2301      	movne	r3, #1
    710a:	2300      	moveq	r3, #0
    710c:	b2db      	uxtb	r3, r3
    710e:	4619      	mov	r1, r3
    7110:	9803      	ldr	r0, [sp, #12]
    7112:	f7fe fc04 	bl	591e <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    7116:	2100      	movs	r1, #0
    7118:	9803      	ldr	r0, [sp, #12]
    711a:	f7fe fdb2 	bl	5c82 <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    711e:	9b00      	ldr	r3, [sp, #0]
    7120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7122:	4619      	mov	r1, r3
    7124:	9803      	ldr	r0, [sp, #12]
    7126:	f7ff f847 	bl	61b8 <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    712a:	9b00      	ldr	r3, [sp, #0]
    712c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    712e:	b2db      	uxtb	r3, r3
    7130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7134:	b2db      	uxtb	r3, r3
    7136:	4619      	mov	r1, r3
    7138:	9803      	ldr	r0, [sp, #12]
    713a:	f7fe ff87 	bl	604c <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    713e:	9b00      	ldr	r3, [sp, #0]
    7140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    7142:	099b      	lsrs	r3, r3, #6
    7144:	b29b      	uxth	r3, r3
    7146:	b2db      	uxtb	r3, r3
    7148:	4619      	mov	r1, r3
    714a:	9803      	ldr	r0, [sp, #12]
    714c:	f7fe ffa2 	bl	6094 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    7150:	9b00      	ldr	r3, [sp, #0]
    7152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7154:	4619      	mov	r1, r3
    7156:	9803      	ldr	r0, [sp, #12]
    7158:	f7fe ff8b 	bl	6072 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    715c:	bf00      	nop
    715e:	b005      	add	sp, #20
    7160:	f85d fb04 	ldr.w	pc, [sp], #4
    7164:	0000bde4 	.word	0x0000bde4

00007168 <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    7168:	b500      	push	{lr}
    716a:	b085      	sub	sp, #20
    716c:	4603      	mov	r3, r0
    716e:	9100      	str	r1, [sp, #0]
    7170:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7174:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7178:	4a39      	ldr	r2, [pc, #228]	; (7260 <Ftm_Pwm_Ip_InitInstance+0xf8>)
    717a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    717e:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    7180:	4b38      	ldr	r3, [pc, #224]	; (7264 <Ftm_Pwm_Ip_InitInstance+0xfc>)
    7182:	9302      	str	r3, [sp, #8]
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    7184:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7188:	4619      	mov	r1, r3
    718a:	9802      	ldr	r0, [sp, #8]
    718c:	f7ff fd20 	bl	6bd0 <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    7190:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7194:	9900      	ldr	r1, [sp, #0]
    7196:	4618      	mov	r0, r3
    7198:	f7ff ff9c 	bl	70d4 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    719c:	9b00      	ldr	r3, [sp, #0]
    719e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    71a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71a4:	4611      	mov	r1, r2
    71a6:	4618      	mov	r0, r3
    71a8:	f7ff ff04 	bl	6fb4 <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    71ac:	2100      	movs	r1, #0
    71ae:	9803      	ldr	r0, [sp, #12]
    71b0:	f7fe fd56 	bl	5c60 <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    71b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71b8:	9a00      	ldr	r2, [sp, #0]
    71ba:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    71bc:	4a2a      	ldr	r2, [pc, #168]	; (7268 <Ftm_Pwm_Ip_InitInstance+0x100>)
    71be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    71c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71c6:	9a00      	ldr	r2, [sp, #0]
    71c8:	6812      	ldr	r2, [r2, #0]
    71ca:	4928      	ldr	r1, [pc, #160]	; (726c <Ftm_Pwm_Ip_InitInstance+0x104>)
    71cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    71d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71d4:	9a00      	ldr	r2, [sp, #0]
    71d6:	6852      	ldr	r2, [r2, #4]
    71d8:	4925      	ldr	r1, [pc, #148]	; (7270 <Ftm_Pwm_Ip_InitInstance+0x108>)
    71da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    71de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71e2:	9a00      	ldr	r2, [sp, #0]
    71e4:	6892      	ldr	r2, [r2, #8]
    71e6:	4923      	ldr	r1, [pc, #140]	; (7274 <Ftm_Pwm_Ip_InitInstance+0x10c>)
    71e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    71ec:	9b00      	ldr	r3, [sp, #0]
    71ee:	7c1b      	ldrb	r3, [r3, #16]
    71f0:	2b00      	cmp	r3, #0
    71f2:	d00e      	beq.n	7212 <Ftm_Pwm_Ip_InitInstance+0xaa>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    71f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71f8:	9a00      	ldr	r2, [sp, #0]
    71fa:	6952      	ldr	r2, [r2, #20]
    71fc:	491e      	ldr	r1, [pc, #120]	; (7278 <Ftm_Pwm_Ip_InitInstance+0x110>)
    71fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    7202:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7206:	9a00      	ldr	r2, [sp, #0]
    7208:	6992      	ldr	r2, [r2, #24]
    720a:	491b      	ldr	r1, [pc, #108]	; (7278 <Ftm_Pwm_Ip_InitInstance+0x110>)
    720c:	00db      	lsls	r3, r3, #3
    720e:	440b      	add	r3, r1
    7210:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    7212:	9b00      	ldr	r3, [sp, #0]
    7214:	68db      	ldr	r3, [r3, #12]
    7216:	2b01      	cmp	r3, #1
    7218:	d108      	bne.n	722c <Ftm_Pwm_Ip_InitInstance+0xc4>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    721a:	9b00      	ldr	r3, [sp, #0]
    721c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    721e:	085b      	lsrs	r3, r3, #1
    7220:	b29b      	uxth	r3, r3
    7222:	4619      	mov	r1, r3
    7224:	9803      	ldr	r0, [sp, #12]
    7226:	f7fe fbe3 	bl	59f0 <Ftm_Pwm_Ip_SetMod>
    722a:	e007      	b.n	723c <Ftm_Pwm_Ip_InitInstance+0xd4>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    722c:	9b00      	ldr	r3, [sp, #0]
    722e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    7230:	3b01      	subs	r3, #1
    7232:	b29b      	uxth	r3, r3
    7234:	4619      	mov	r1, r3
    7236:	9803      	ldr	r0, [sp, #12]
    7238:	f7fe fbda 	bl	59f0 <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    723c:	9b00      	ldr	r3, [sp, #0]
    723e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    7242:	4619      	mov	r1, r3
    7244:	9803      	ldr	r0, [sp, #12]
    7246:	f7fe ff39 	bl	60bc <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    724a:	9b00      	ldr	r3, [sp, #0]
    724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    724e:	4619      	mov	r1, r3
    7250:	9803      	ldr	r0, [sp, #12]
    7252:	f7fe ffc3 	bl	61dc <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    7256:	bf00      	nop
    7258:	b005      	add	sp, #20
    725a:	f85d fb04 	ldr.w	pc, [sp], #4
    725e:	bf00      	nop
    7260:	0000bde4 	.word	0x0000bde4
    7264:	40048000 	.word	0x40048000
    7268:	1fff8cfc 	.word	0x1fff8cfc
    726c:	1fff8ff4 	.word	0x1fff8ff4
    7270:	1fff9004 	.word	0x1fff9004
    7274:	1fff9014 	.word	0x1fff9014
    7278:	1fff8ea4 	.word	0x1fff8ea4

0000727c <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    727c:	b500      	push	{lr}
    727e:	b085      	sub	sp, #20
    7280:	4603      	mov	r3, r0
    7282:	9100      	str	r1, [sp, #0]
    7284:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7288:	f89d 3007 	ldrb.w	r3, [sp, #7]
    728c:	4a1a      	ldr	r2, [pc, #104]	; (72f8 <Ftm_Pwm_Ip_InitInstanceStart+0x7c>)
    728e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7292:	9303      	str	r3, [sp, #12]
    DevAssert(NULL_PTR != UserInstCfg);
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    7294:	9b00      	ldr	r3, [sp, #0]
    7296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    729a:	4619      	mov	r1, r3
    729c:	9803      	ldr	r0, [sp, #12]
    729e:	f7ff fc03 	bl	6aa8 <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    72a2:	9b00      	ldr	r3, [sp, #0]
    72a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    72a6:	4619      	mov	r1, r3
    72a8:	9803      	ldr	r0, [sp, #12]
    72aa:	f7ff fc11 	bl	6ad0 <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    72ae:	9b00      	ldr	r3, [sp, #0]
    72b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    72b2:	4619      	mov	r1, r3
    72b4:	9803      	ldr	r0, [sp, #12]
    72b6:	f7ff fb7a 	bl	69ae <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    72ba:	2101      	movs	r1, #1
    72bc:	9803      	ldr	r0, [sp, #12]
    72be:	f7fe fce0 	bl	5c82 <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    72c2:	2101      	movs	r1, #1
    72c4:	9803      	ldr	r0, [sp, #12]
    72c6:	f7fe fcf2 	bl	5cae <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    72ca:	9b00      	ldr	r3, [sp, #0]
    72cc:	685b      	ldr	r3, [r3, #4]
    72ce:	4619      	mov	r1, r3
    72d0:	9803      	ldr	r0, [sp, #12]
    72d2:	f7fe fb03 	bl	58dc <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    72d6:	9b00      	ldr	r3, [sp, #0]
    72d8:	681b      	ldr	r3, [r3, #0]
    72da:	4619      	mov	r1, r3
    72dc:	9803      	ldr	r0, [sp, #12]
    72de:	f7fe fb0d 	bl	58fc <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    72e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    72e6:	4a05      	ldr	r2, [pc, #20]	; (72fc <Ftm_Pwm_Ip_InitInstanceStart+0x80>)
    72e8:	2101      	movs	r1, #1
    72ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    72ee:	bf00      	nop
    72f0:	b005      	add	sp, #20
    72f2:	f85d fb04 	ldr.w	pc, [sp], #4
    72f6:	bf00      	nop
    72f8:	0000bde4 	.word	0x0000bde4
    72fc:	1fff8ec4 	.word	0x1fff8ec4

00007300 <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    7300:	b500      	push	{lr}
    7302:	b085      	sub	sp, #20
    7304:	4603      	mov	r3, r0
    7306:	9100      	str	r1, [sp, #0]
    7308:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    730c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7310:	4a37      	ldr	r2, [pc, #220]	; (73f0 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    7312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7316:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    7318:	2300      	movs	r3, #0
    731a:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    731e:	2300      	movs	r3, #0
    7320:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    7324:	9b00      	ldr	r3, [sp, #0]
    7326:	781b      	ldrb	r3, [r3, #0]
    7328:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    732c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7330:	085b      	lsrs	r3, r3, #1
    7332:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    7336:	f89d 300a 	ldrb.w	r3, [sp, #10]
    733a:	2201      	movs	r2, #1
    733c:	4619      	mov	r1, r3
    733e:	9803      	ldr	r0, [sp, #12]
    7340:	f7fe fe36 	bl	5fb0 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    7344:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7348:	2201      	movs	r2, #1
    734a:	4619      	mov	r1, r3
    734c:	9803      	ldr	r0, [sp, #12]
    734e:	f7ff fb63 	bl	6a18 <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    7352:	9b00      	ldr	r3, [sp, #0]
    7354:	685b      	ldr	r3, [r3, #4]
    7356:	2b22      	cmp	r3, #34	; 0x22
    7358:	d003      	beq.n	7362 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    735a:	9b00      	ldr	r3, [sp, #0]
    735c:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    735e:	2b21      	cmp	r3, #33	; 0x21
    7360:	d113      	bne.n	738a <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    7362:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7366:	005b      	lsls	r3, r3, #1
    7368:	b2db      	uxtb	r3, r3
    736a:	3301      	adds	r3, #1
    736c:	b2d9      	uxtb	r1, r3
    736e:	9b00      	ldr	r3, [sp, #0]
    7370:	685b      	ldr	r3, [r3, #4]
    7372:	461a      	mov	r2, r3
    7374:	9803      	ldr	r0, [sp, #12]
    7376:	f7fe fb76 	bl	5a66 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    737a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    737e:	2201      	movs	r2, #1
    7380:	4619      	mov	r1, r3
    7382:	9803      	ldr	r0, [sp, #12]
    7384:	f7fe fd89 	bl	5e9a <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    7388:	e021      	b.n	73ce <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    738a:	9b00      	ldr	r3, [sp, #0]
    738c:	685b      	ldr	r3, [r3, #4]
    738e:	2b62      	cmp	r3, #98	; 0x62
    7390:	d003      	beq.n	739a <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    7392:	9b00      	ldr	r3, [sp, #0]
    7394:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    7396:	2b61      	cmp	r3, #97	; 0x61
    7398:	d119      	bne.n	73ce <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    739a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    739e:	005b      	lsls	r3, r3, #1
    73a0:	b2db      	uxtb	r3, r3
    73a2:	3301      	adds	r3, #1
    73a4:	b2d9      	uxtb	r1, r3
    73a6:	9b00      	ldr	r3, [sp, #0]
    73a8:	685b      	ldr	r3, [r3, #4]
    73aa:	461a      	mov	r2, r3
    73ac:	9803      	ldr	r0, [sp, #12]
    73ae:	f7fe fb5a 	bl	5a66 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    73b2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    73b6:	2201      	movs	r2, #1
    73b8:	4619      	mov	r1, r3
    73ba:	9803      	ldr	r0, [sp, #12]
    73bc:	f7fe fd6d 	bl	5e9a <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    73c0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    73c4:	2201      	movs	r2, #1
    73c6:	4619      	mov	r1, r3
    73c8:	9803      	ldr	r0, [sp, #12]
    73ca:	f7fe fe18 	bl	5ffe <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    73ce:	9b00      	ldr	r3, [sp, #0]
    73d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    73d2:	2b00      	cmp	r3, #0
    73d4:	d007      	beq.n	73e6 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    73d6:	9b00      	ldr	r3, [sp, #0]
    73d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    73da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73de:	4611      	mov	r1, r2
    73e0:	4618      	mov	r0, r3
    73e2:	f7ff fc47 	bl	6c74 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    73e6:	bf00      	nop
    73e8:	b005      	add	sp, #20
    73ea:	f85d fb04 	ldr.w	pc, [sp], #4
    73ee:	bf00      	nop
    73f0:	0000bde4 	.word	0x0000bde4

000073f4 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    73f4:	b500      	push	{lr}
    73f6:	b085      	sub	sp, #20
    73f8:	4603      	mov	r3, r0
    73fa:	9100      	str	r1, [sp, #0]
    73fc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7400:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7404:	4a15      	ldr	r2, [pc, #84]	; (745c <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    7406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    740a:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    740c:	9b00      	ldr	r3, [sp, #0]
    740e:	7819      	ldrb	r1, [r3, #0]
    7410:	9b00      	ldr	r3, [sp, #0]
    7412:	7ddb      	ldrb	r3, [r3, #23]
    7414:	461a      	mov	r2, r3
    7416:	9803      	ldr	r0, [sp, #12]
    7418:	f7ff fa8b 	bl	6932 <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    741c:	9b00      	ldr	r3, [sp, #0]
    741e:	7819      	ldrb	r1, [r3, #0]
    7420:	9b00      	ldr	r3, [sp, #0]
    7422:	7e1b      	ldrb	r3, [r3, #24]
    7424:	461a      	mov	r2, r3
    7426:	9803      	ldr	r0, [sp, #12]
    7428:	f7ff f8ba 	bl	65a0 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    742c:	9b00      	ldr	r3, [sp, #0]
    742e:	7819      	ldrb	r1, [r3, #0]
    7430:	9b00      	ldr	r3, [sp, #0]
    7432:	7d5b      	ldrb	r3, [r3, #21]
    7434:	461a      	mov	r2, r3
    7436:	9803      	ldr	r0, [sp, #12]
    7438:	f7ff f87c 	bl	6534 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    743c:	9b00      	ldr	r3, [sp, #0]
    743e:	7819      	ldrb	r1, [r3, #0]
    7440:	9b00      	ldr	r3, [sp, #0]
    7442:	7d9b      	ldrb	r3, [r3, #22]
    7444:	461a      	mov	r2, r3
    7446:	9803      	ldr	r0, [sp, #12]
    7448:	f7ff f834 	bl	64b4 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    744c:	2101      	movs	r1, #1
    744e:	9803      	ldr	r0, [sp, #12]
    7450:	f7fe fcaa 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    7454:	bf00      	nop
    7456:	b005      	add	sp, #20
    7458:	f85d fb04 	ldr.w	pc, [sp], #4
    745c:	0000bde4 	.word	0x0000bde4

00007460 <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    7460:	b500      	push	{lr}
    7462:	b085      	sub	sp, #20
    7464:	4603      	mov	r3, r0
    7466:	9100      	str	r1, [sp, #0]
    7468:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    746c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7470:	4a48      	ldr	r2, [pc, #288]	; (7594 <Ftm_Pwm_Ip_InitChannel+0x134>)
    7472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7476:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    7478:	2300      	movs	r3, #0
    747a:	f88d 300b 	strb.w	r3, [sp, #11]
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(NULL_PTR != UserChCfg);
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    747e:	9b00      	ldr	r3, [sp, #0]
    7480:	781b      	ldrb	r3, [r3, #0]
    7482:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    7486:	f89d 2007 	ldrb.w	r2, [sp, #7]
    748a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    748e:	9900      	ldr	r1, [sp, #0]
    7490:	8b48      	ldrh	r0, [r1, #26]
    7492:	4941      	ldr	r1, [pc, #260]	; (7598 <Ftm_Pwm_Ip_InitChannel+0x138>)
    7494:	00d2      	lsls	r2, r2, #3
    7496:	4413      	add	r3, r2
    7498:	4602      	mov	r2, r0
    749a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    749e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    74a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74a6:	9a00      	ldr	r2, [sp, #0]
    74a8:	69d2      	ldr	r2, [r2, #28]
    74aa:	483c      	ldr	r0, [pc, #240]	; (759c <Ftm_Pwm_Ip_InitChannel+0x13c>)
    74ac:	00c9      	lsls	r1, r1, #3
    74ae:	440b      	add	r3, r1
    74b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    74b4:	9b00      	ldr	r3, [sp, #0]
    74b6:	6a1a      	ldr	r2, [r3, #32]
    74b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74bc:	4619      	mov	r1, r3
    74be:	9803      	ldr	r0, [sp, #12]
    74c0:	f7fe fe2e 	bl	6120 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    74c4:	9b00      	ldr	r3, [sp, #0]
    74c6:	69da      	ldr	r2, [r3, #28]
    74c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74cc:	4619      	mov	r1, r3
    74ce:	9803      	ldr	r0, [sp, #12]
    74d0:	f7fe fc80 	bl	5dd4 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    74d4:	9b00      	ldr	r3, [sp, #0]
    74d6:	685a      	ldr	r2, [r3, #4]
    74d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74dc:	4619      	mov	r1, r3
    74de:	9803      	ldr	r0, [sp, #12]
    74e0:	f7fe fac1 	bl	5a66 <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    74e4:	9b00      	ldr	r3, [sp, #0]
    74e6:	685a      	ldr	r2, [r3, #4]
    74e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74ec:	4619      	mov	r1, r3
    74ee:	9803      	ldr	r0, [sp, #12]
    74f0:	f7fe faf0 	bl	5ad4 <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    74f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74f8:	9900      	ldr	r1, [sp, #0]
    74fa:	4618      	mov	r0, r3
    74fc:	f7ff ff00 	bl	7300 <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    7500:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7504:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7508:	4923      	ldr	r1, [pc, #140]	; (7598 <Ftm_Pwm_Ip_InitChannel+0x138>)
    750a:	00d2      	lsls	r2, r2, #3
    750c:	4413      	add	r3, r2
    750e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    7512:	f89d 100b 	ldrb.w	r1, [sp, #11]
    7516:	f89d 0007 	ldrb.w	r0, [sp, #7]
    751a:	2301      	movs	r3, #1
    751c:	f000 f9c0 	bl	78a0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    7520:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7524:	9900      	ldr	r1, [sp, #0]
    7526:	4618      	mov	r0, r3
    7528:	f7ff ff64 	bl	73f4 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    752c:	9b00      	ldr	r3, [sp, #0]
    752e:	7d1b      	ldrb	r3, [r3, #20]
    7530:	2b00      	cmp	r3, #0
    7532:	d005      	beq.n	7540 <Ftm_Pwm_Ip_InitChannel+0xe0>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    7534:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7538:	4619      	mov	r1, r3
    753a:	9803      	ldr	r0, [sp, #12]
    753c:	f7fe fa35 	bl	59aa <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    7540:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7544:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7548:	4915      	ldr	r1, [pc, #84]	; (75a0 <Ftm_Pwm_Ip_InitChannel+0x140>)
    754a:	00d2      	lsls	r2, r2, #3
    754c:	4413      	add	r3, r2
    754e:	2201      	movs	r2, #1
    7550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    7554:	9b00      	ldr	r3, [sp, #0]
    7556:	7a1b      	ldrb	r3, [r3, #8]
    7558:	2b00      	cmp	r3, #0
    755a:	d016      	beq.n	758a <Ftm_Pwm_Ip_InitChannel+0x12a>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    755c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7560:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7564:	9a00      	ldr	r2, [sp, #0]
    7566:	68d2      	ldr	r2, [r2, #12]
    7568:	480e      	ldr	r0, [pc, #56]	; (75a4 <Ftm_Pwm_Ip_InitChannel+0x144>)
    756a:	00c9      	lsls	r1, r1, #3
    756c:	440b      	add	r3, r1
    756e:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    7572:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7576:	f89d 300b 	ldrb.w	r3, [sp, #11]
    757a:	9a00      	ldr	r2, [sp, #0]
    757c:	6912      	ldr	r2, [r2, #16]
    757e:	4809      	ldr	r0, [pc, #36]	; (75a4 <Ftm_Pwm_Ip_InitChannel+0x144>)
    7580:	00c9      	lsls	r1, r1, #3
    7582:	440b      	add	r3, r1
    7584:	00db      	lsls	r3, r3, #3
    7586:	4403      	add	r3, r0
    7588:	605a      	str	r2, [r3, #4]
    }

}
    758a:	bf00      	nop
    758c:	b005      	add	sp, #20
    758e:	f85d fb04 	ldr.w	pc, [sp], #4
    7592:	bf00      	nop
    7594:	0000bde4 	.word	0x0000bde4
    7598:	1fff8d04 	.word	0x1fff8d04
    759c:	1fff8f74 	.word	0x1fff8f74
    75a0:	1fff8ed4 	.word	0x1fff8ed4
    75a4:	1fff8da4 	.word	0x1fff8da4

000075a8 <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    75a8:	b500      	push	{lr}
    75aa:	b085      	sub	sp, #20
    75ac:	4603      	mov	r3, r0
    75ae:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    75b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75b6:	4a17      	ldr	r2, [pc, #92]	; (7614 <Ftm_Pwm_Ip_DeInitInstance+0x6c>)
    75b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75bc:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    75be:	2100      	movs	r1, #0
    75c0:	9803      	ldr	r0, [sp, #12]
    75c2:	f7fe f99b 	bl	58fc <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    75c6:	2100      	movs	r1, #0
    75c8:	9803      	ldr	r0, [sp, #12]
    75ca:	f7fe fd63 	bl	6094 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    75ce:	2101      	movs	r1, #1
    75d0:	9803      	ldr	r0, [sp, #12]
    75d2:	f7fe fd4e 	bl	6072 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    75d6:	2100      	movs	r1, #0
    75d8:	9803      	ldr	r0, [sp, #12]
    75da:	f7fe fd37 	bl	604c <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    75de:	2100      	movs	r1, #0
    75e0:	9803      	ldr	r0, [sp, #12]
    75e2:	f7fe fde9 	bl	61b8 <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    75e6:	2100      	movs	r1, #0
    75e8:	9803      	ldr	r0, [sp, #12]
    75ea:	f7fe f9bc 	bl	5966 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    75ee:	2100      	movs	r1, #0
    75f0:	9803      	ldr	r0, [sp, #12]
    75f2:	f7fe f9fd 	bl	59f0 <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    75f6:	2100      	movs	r1, #0
    75f8:	9803      	ldr	r0, [sp, #12]
    75fa:	f7fe f9e8 	bl	59ce <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    75fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7602:	4a05      	ldr	r2, [pc, #20]	; (7618 <Ftm_Pwm_Ip_DeInitInstance+0x70>)
    7604:	2100      	movs	r1, #0
    7606:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    760a:	bf00      	nop
    760c:	b005      	add	sp, #20
    760e:	f85d fb04 	ldr.w	pc, [sp], #4
    7612:	bf00      	nop
    7614:	0000bde4 	.word	0x0000bde4
    7618:	1fff8ec4 	.word	0x1fff8ec4

0000761c <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    761c:	b500      	push	{lr}
    761e:	b085      	sub	sp, #20
    7620:	4603      	mov	r3, r0
    7622:	460a      	mov	r2, r1
    7624:	f88d 3007 	strb.w	r3, [sp, #7]
    7628:	4613      	mov	r3, r2
    762a:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    762e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7632:	4a29      	ldr	r2, [pc, #164]	; (76d8 <Ftm_Pwm_Ip_DeInitChannel+0xbc>)
    7634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7638:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    763a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    763e:	085b      	lsrs	r3, r3, #1
    7640:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    7644:	f89d 2006 	ldrb.w	r2, [sp, #6]
    7648:	f89d 3007 	ldrb.w	r3, [sp, #7]
    764c:	4611      	mov	r1, r2
    764e:	4618      	mov	r0, r3
    7650:	f7ff fb9e 	bl	6d90 <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    7654:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7658:	f89d 3006 	ldrb.w	r3, [sp, #6]
    765c:	491f      	ldr	r1, [pc, #124]	; (76dc <Ftm_Pwm_Ip_DeInitChannel+0xc0>)
    765e:	00d2      	lsls	r2, r2, #3
    7660:	4413      	add	r3, r2
    7662:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    7666:	f89d 1006 	ldrb.w	r1, [sp, #6]
    766a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    766e:	2301      	movs	r3, #1
    7670:	f000 fa4c 	bl	7b0c <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    7674:	2100      	movs	r1, #0
    7676:	9803      	ldr	r0, [sp, #12]
    7678:	f7fe fb96 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    767c:	2101      	movs	r1, #1
    767e:	9803      	ldr	r0, [sp, #12]
    7680:	f7fe fb57 	bl	5d32 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    7684:	2101      	movs	r1, #1
    7686:	9803      	ldr	r0, [sp, #12]
    7688:	f7fe fe65 	bl	6356 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    768c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7690:	2200      	movs	r2, #0
    7692:	4619      	mov	r1, r3
    7694:	9803      	ldr	r0, [sp, #12]
    7696:	f7fe fbbf 	bl	5e18 <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    769a:	2101      	movs	r1, #1
    769c:	9803      	ldr	r0, [sp, #12]
    769e:	f7fe fb83 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    76a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    76a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    76aa:	005b      	lsls	r3, r3, #1
    76ac:	490c      	ldr	r1, [pc, #48]	; (76e0 <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    76ae:	00d2      	lsls	r2, r2, #3
    76b0:	440a      	add	r2, r1
    76b2:	4413      	add	r3, r2
    76b4:	2200      	movs	r2, #0
    76b6:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    76b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    76bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    76c0:	005b      	lsls	r3, r3, #1
    76c2:	3301      	adds	r3, #1
    76c4:	4906      	ldr	r1, [pc, #24]	; (76e0 <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    76c6:	00d2      	lsls	r2, r2, #3
    76c8:	440a      	add	r2, r1
    76ca:	4413      	add	r3, r2
    76cc:	2200      	movs	r2, #0
    76ce:	701a      	strb	r2, [r3, #0]

}
    76d0:	bf00      	nop
    76d2:	b005      	add	sp, #20
    76d4:	f85d fb04 	ldr.w	pc, [sp], #4
    76d8:	0000bde4 	.word	0x0000bde4
    76dc:	1fff8f74 	.word	0x1fff8f74
    76e0:	1fff8f54 	.word	0x1fff8f54

000076e4 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    76e4:	b500      	push	{lr}
    76e6:	b085      	sub	sp, #20
    76e8:	4603      	mov	r3, r0
    76ea:	9100      	str	r1, [sp, #0]
    76ec:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    76f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76f4:	4a15      	ldr	r2, [pc, #84]	; (774c <Ftm_Pwm_Ip_InitChFault+0x68>)
    76f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76fa:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    76fc:	9b00      	ldr	r3, [sp, #0]
    76fe:	7819      	ldrb	r1, [r3, #0]
    7700:	9b00      	ldr	r3, [sp, #0]
    7702:	685b      	ldr	r3, [r3, #4]
    7704:	461a      	mov	r2, r3
    7706:	9803      	ldr	r0, [sp, #12]
    7708:	f7ff f9f6 	bl	6af8 <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    770c:	9b00      	ldr	r3, [sp, #0]
    770e:	7819      	ldrb	r1, [r3, #0]
    7710:	9b00      	ldr	r3, [sp, #0]
    7712:	7a1b      	ldrb	r3, [r3, #8]
    7714:	461a      	mov	r2, r3
    7716:	9803      	ldr	r0, [sp, #12]
    7718:	f7ff fa35 	bl	6b86 <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    771c:	9b00      	ldr	r3, [sp, #0]
    771e:	781b      	ldrb	r3, [r3, #0]
    7720:	2201      	movs	r2, #1
    7722:	4619      	mov	r1, r3
    7724:	9803      	ldr	r0, [sp, #12]
    7726:	f7ff fa0a 	bl	6b3e <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    772a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    772e:	9a00      	ldr	r2, [sp, #0]
    7730:	7812      	ldrb	r2, [r2, #0]
    7732:	4610      	mov	r0, r2
    7734:	9a00      	ldr	r2, [sp, #0]
    7736:	68d2      	ldr	r2, [r2, #12]
    7738:	4905      	ldr	r1, [pc, #20]	; (7750 <Ftm_Pwm_Ip_InitChFault+0x6c>)
    773a:	009b      	lsls	r3, r3, #2
    773c:	4403      	add	r3, r0
    773e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7742:	bf00      	nop
    7744:	b005      	add	sp, #20
    7746:	f85d fb04 	ldr.w	pc, [sp], #4
    774a:	bf00      	nop
    774c:	0000bde4 	.word	0x0000bde4
    7750:	1fff8d64 	.word	0x1fff8d64

00007754 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    7754:	b500      	push	{lr}
    7756:	b085      	sub	sp, #20
    7758:	4603      	mov	r3, r0
    775a:	9100      	str	r1, [sp, #0]
    775c:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    7760:	2300      	movs	r3, #0
    7762:	f88d 300f 	strb.w	r3, [sp, #15]
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    7766:	4b29      	ldr	r3, [pc, #164]	; (780c <Ftm_Pwm_Ip_Init+0xb8>)
    7768:	2200      	movs	r2, #0
    776a:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    776c:	9b00      	ldr	r3, [sp, #0]
    776e:	681a      	ldr	r2, [r3, #0]
    7770:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7774:	4611      	mov	r1, r2
    7776:	4618      	mov	r0, r3
    7778:	f7ff fcf6 	bl	7168 <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    777c:	2300      	movs	r3, #0
    777e:	f88d 300f 	strb.w	r3, [sp, #15]
    7782:	e011      	b.n	77a8 <Ftm_Pwm_Ip_Init+0x54>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    7784:	9b00      	ldr	r3, [sp, #0]
    7786:	685a      	ldr	r2, [r3, #4]
    7788:	f89d 300f 	ldrb.w	r3, [sp, #15]
    778c:	009b      	lsls	r3, r3, #2
    778e:	4413      	add	r3, r2
    7790:	681a      	ldr	r2, [r3, #0]
    7792:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7796:	4611      	mov	r1, r2
    7798:	4618      	mov	r0, r3
    779a:	f7ff fe61 	bl	7460 <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    779e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    77a2:	3301      	adds	r3, #1
    77a4:	f88d 300f 	strb.w	r3, [sp, #15]
    77a8:	9b00      	ldr	r3, [sp, #0]
    77aa:	7a1b      	ldrb	r3, [r3, #8]
    77ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    77b0:	429a      	cmp	r2, r3
    77b2:	d3e7      	bcc.n	7784 <Ftm_Pwm_Ip_Init+0x30>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    77b4:	9b00      	ldr	r3, [sp, #0]
    77b6:	7c1b      	ldrb	r3, [r3, #16]
    77b8:	2b00      	cmp	r3, #0
    77ba:	d01b      	beq.n	77f4 <Ftm_Pwm_Ip_Init+0xa0>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    77bc:	2300      	movs	r3, #0
    77be:	f88d 300f 	strb.w	r3, [sp, #15]
    77c2:	e011      	b.n	77e8 <Ftm_Pwm_Ip_Init+0x94>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    77c4:	9b00      	ldr	r3, [sp, #0]
    77c6:	68da      	ldr	r2, [r3, #12]
    77c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    77cc:	009b      	lsls	r3, r3, #2
    77ce:	4413      	add	r3, r2
    77d0:	681a      	ldr	r2, [r3, #0]
    77d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77d6:	4611      	mov	r1, r2
    77d8:	4618      	mov	r0, r3
    77da:	f7ff ff83 	bl	76e4 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    77de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    77e2:	3301      	adds	r3, #1
    77e4:	f88d 300f 	strb.w	r3, [sp, #15]
    77e8:	9b00      	ldr	r3, [sp, #0]
    77ea:	7c1b      	ldrb	r3, [r3, #16]
    77ec:	f89d 200f 	ldrb.w	r2, [sp, #15]
    77f0:	429a      	cmp	r2, r3
    77f2:	d3e7      	bcc.n	77c4 <Ftm_Pwm_Ip_Init+0x70>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    77f4:	9b00      	ldr	r3, [sp, #0]
    77f6:	681a      	ldr	r2, [r3, #0]
    77f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77fc:	4611      	mov	r1, r2
    77fe:	4618      	mov	r0, r3
    7800:	f7ff fd3c 	bl	727c <Ftm_Pwm_Ip_InitInstanceStart>
}
    7804:	bf00      	nop
    7806:	b005      	add	sp, #20
    7808:	f85d fb04 	ldr.w	pc, [sp], #4
    780c:	1fff8cf8 	.word	0x1fff8cf8

00007810 <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    7810:	b500      	push	{lr}
    7812:	b085      	sub	sp, #20
    7814:	4603      	mov	r3, r0
    7816:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    781a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    781e:	4a1e      	ldr	r2, [pc, #120]	; (7898 <Ftm_Pwm_Ip_DeInit+0x88>)
    7820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7824:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    7826:	2300      	movs	r3, #0
    7828:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    782c:	9802      	ldr	r0, [sp, #8]
    782e:	f7ff f80b 	bl	6848 <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    7832:	2300      	movs	r3, #0
    7834:	f88d 300f 	strb.w	r3, [sp, #15]
    7838:	e021      	b.n	787e <Ftm_Pwm_Ip_DeInit+0x6e>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    783a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    783e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7842:	4916      	ldr	r1, [pc, #88]	; (789c <Ftm_Pwm_Ip_DeInit+0x8c>)
    7844:	00d2      	lsls	r2, r2, #3
    7846:	4413      	add	r3, r2
    7848:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    784c:	2b00      	cmp	r3, #0
    784e:	d011      	beq.n	7874 <Ftm_Pwm_Ip_DeInit+0x64>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    7850:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7854:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7858:	4611      	mov	r1, r2
    785a:	4618      	mov	r0, r3
    785c:	f7ff fede 	bl	761c <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    7860:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7864:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7868:	490c      	ldr	r1, [pc, #48]	; (789c <Ftm_Pwm_Ip_DeInit+0x8c>)
    786a:	00d2      	lsls	r2, r2, #3
    786c:	4413      	add	r3, r2
    786e:	2200      	movs	r2, #0
    7870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    7874:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7878:	3301      	adds	r3, #1
    787a:	f88d 300f 	strb.w	r3, [sp, #15]
    787e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7882:	2b07      	cmp	r3, #7
    7884:	d9d9      	bls.n	783a <Ftm_Pwm_Ip_DeInit+0x2a>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    7886:	f89d 3007 	ldrb.w	r3, [sp, #7]
    788a:	4618      	mov	r0, r3
    788c:	f7ff fe8c 	bl	75a8 <Ftm_Pwm_Ip_DeInitInstance>
}
    7890:	bf00      	nop
    7892:	b005      	add	sp, #20
    7894:	f85d fb04 	ldr.w	pc, [sp], #4
    7898:	0000bde4 	.word	0x0000bde4
    789c:	1fff8ed4 	.word	0x1fff8ed4

000078a0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    78a0:	b510      	push	{r4, lr}
    78a2:	b088      	sub	sp, #32
    78a4:	4604      	mov	r4, r0
    78a6:	4608      	mov	r0, r1
    78a8:	4611      	mov	r1, r2
    78aa:	461a      	mov	r2, r3
    78ac:	4623      	mov	r3, r4
    78ae:	f88d 300f 	strb.w	r3, [sp, #15]
    78b2:	4603      	mov	r3, r0
    78b4:	f88d 300e 	strb.w	r3, [sp, #14]
    78b8:	460b      	mov	r3, r1
    78ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    78be:	4613      	mov	r3, r2
    78c0:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    78c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    78c8:	4a54      	ldr	r2, [pc, #336]	; (7a1c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x17c>)
    78ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78ce:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    78d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    78d4:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    78d8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    78dc:	085b      	lsrs	r3, r3, #1
    78de:	f88d 3019 	strb.w	r3, [sp, #25]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    78e2:	f002 fb71 	bl	9fc8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    78e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    78ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
    78ee:	494c      	ldr	r1, [pc, #304]	; (7a20 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x180>)
    78f0:	00d2      	lsls	r2, r2, #3
    78f2:	4413      	add	r3, r2
    78f4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    78f8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    78fc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7900:	4619      	mov	r1, r3
    7902:	9807      	ldr	r0, [sp, #28]
    7904:	f7fe feb0 	bl	6668 <Ftm_Pwm_Ip_GetChannelMode>
    7908:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    790a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    790e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7912:	4944      	ldr	r1, [pc, #272]	; (7a24 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    7914:	00d2      	lsls	r2, r2, #3
    7916:	4413      	add	r3, r2
    7918:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    791c:	2b02      	cmp	r3, #2
    791e:	d111      	bne.n	7944 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xa4>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    7920:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7924:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7928:	493e      	ldr	r1, [pc, #248]	; (7a24 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    792a:	00d2      	lsls	r2, r2, #3
    792c:	4413      	add	r3, r2
    792e:	2201      	movs	r2, #1
    7930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    7934:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7938:	f89d 000f 	ldrb.w	r0, [sp, #15]
    793c:	2300      	movs	r3, #0
    793e:	2200      	movs	r2, #0
    7940:	f000 f8e4 	bl	7b0c <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    7944:	9b05      	ldr	r3, [sp, #20]
    7946:	2b0a      	cmp	r3, #10
    7948:	d008      	beq.n	795c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
    794a:	9b05      	ldr	r3, [sp, #20]
    794c:	2b09      	cmp	r3, #9
    794e:	d005      	beq.n	795c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    7950:	9b05      	ldr	r3, [sp, #20]
    7952:	2b12      	cmp	r3, #18
    7954:	d002      	beq.n	795c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    7956:	9b05      	ldr	r3, [sp, #20]
    7958:	2b11      	cmp	r3, #17
    795a:	d10c      	bne.n	7976 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xd6>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    795c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    7960:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7964:	f89d 000f 	ldrb.w	r0, [sp, #15]
    7968:	f89d 300b 	ldrb.w	r3, [sp, #11]
    796c:	9300      	str	r3, [sp, #0]
    796e:	2300      	movs	r3, #0
    7970:	f000 f992 	bl	7c98 <Ftm_Pwm_Ip_UpdatePwmChannel>
    7974:	e04c      	b.n	7a10 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7976:	9b05      	ldr	r3, [sp, #20]
    7978:	2b22      	cmp	r3, #34	; 0x22
    797a:	d008      	beq.n	798e <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
    797c:	9b05      	ldr	r3, [sp, #20]
    797e:	2b62      	cmp	r3, #98	; 0x62
    7980:	d005      	beq.n	798e <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7982:	9b05      	ldr	r3, [sp, #20]
    7984:	2b61      	cmp	r3, #97	; 0x61
    7986:	d002      	beq.n	798e <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7988:	9b05      	ldr	r3, [sp, #20]
    798a:	2b21      	cmp	r3, #33	; 0x21
    798c:	d140      	bne.n	7a10 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    798e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7992:	f89d 3019 	ldrb.w	r3, [sp, #25]
    7996:	4924      	ldr	r1, [pc, #144]	; (7a28 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    7998:	0092      	lsls	r2, r2, #2
    799a:	4413      	add	r3, r2
    799c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    79a0:	2b00      	cmp	r3, #0
    79a2:	d10d      	bne.n	79c0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x120>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    79a4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    79a8:	f89d 100e 	ldrb.w	r1, [sp, #14]
    79ac:	f89d 000f 	ldrb.w	r0, [sp, #15]
    79b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79b4:	9300      	str	r3, [sp, #0]
    79b6:	4613      	mov	r3, r2
    79b8:	2200      	movs	r2, #0
    79ba:	f000 f96d 	bl	7c98 <Ftm_Pwm_Ip_UpdatePwmChannel>
    79be:	e027      	b.n	7a10 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    79c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    79c4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    79c8:	4917      	ldr	r1, [pc, #92]	; (7a28 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    79ca:	0092      	lsls	r2, r2, #2
    79cc:	4413      	add	r3, r2
    79ce:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    79d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    79d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    79da:	4618      	mov	r0, r3
    79dc:	f7ff f90a 	bl	6bf4 <Ftm_Pwm_Ip_CalculatePhaseShift>
    79e0:	4603      	mov	r3, r0
    79e2:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    79e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    79ea:	f89d 3019 	ldrb.w	r3, [sp, #25]
    79ee:	490e      	ldr	r1, [pc, #56]	; (7a28 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    79f0:	0092      	lsls	r2, r2, #2
    79f2:	4413      	add	r3, r2
    79f4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    79f8:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    79fc:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7a00:	f89d 000f 	ldrb.w	r0, [sp, #15]
    7a04:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7a08:	9300      	str	r3, [sp, #0]
    7a0a:	4623      	mov	r3, r4
    7a0c:	f000 f944 	bl	7c98 <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    7a10:	f002 fb06 	bl	a020 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    7a14:	bf00      	nop
    7a16:	b008      	add	sp, #32
    7a18:	bd10      	pop	{r4, pc}
    7a1a:	bf00      	nop
    7a1c:	0000bde4 	.word	0x0000bde4
    7a20:	1fff8d04 	.word	0x1fff8d04
    7a24:	1fff8ed4 	.word	0x1fff8ed4
    7a28:	1fff8d44 	.word	0x1fff8d44

00007a2c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    7a2c:	b510      	push	{r4, lr}
    7a2e:	b084      	sub	sp, #16
    7a30:	4604      	mov	r4, r0
    7a32:	4608      	mov	r0, r1
    7a34:	4611      	mov	r1, r2
    7a36:	461a      	mov	r2, r3
    7a38:	4623      	mov	r3, r4
    7a3a:	f88d 3007 	strb.w	r3, [sp, #7]
    7a3e:	4603      	mov	r3, r0
    7a40:	f88d 3006 	strb.w	r3, [sp, #6]
    7a44:	460b      	mov	r3, r1
    7a46:	f8ad 3004 	strh.w	r3, [sp, #4]
    7a4a:	4613      	mov	r3, r2
    7a4c:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    7a50:	2300      	movs	r3, #0
    7a52:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7a56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a5a:	4a29      	ldr	r2, [pc, #164]	; (7b00 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd4>)
    7a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a60:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    7a62:	f002 fb03 	bl	a06c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    7a66:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7a6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a6e:	4925      	ldr	r1, [pc, #148]	; (7b04 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    7a70:	00d2      	lsls	r2, r2, #3
    7a72:	4413      	add	r3, r2
    7a74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    7a78:	2b02      	cmp	r3, #2
    7a7a:	d111      	bne.n	7aa0 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x74>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    7a7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7a80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a84:	491f      	ldr	r1, [pc, #124]	; (7b04 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    7a86:	00d2      	lsls	r2, r2, #3
    7a88:	4413      	add	r3, r2
    7a8a:	2201      	movs	r2, #1
    7a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    7a90:	f89d 1006 	ldrb.w	r1, [sp, #6]
    7a94:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7a98:	2300      	movs	r3, #0
    7a9a:	2200      	movs	r2, #0
    7a9c:	f000 f836 	bl	7b0c <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    7aa0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7aa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7aa8:	2200      	movs	r2, #0
    7aaa:	4618      	mov	r0, r3
    7aac:	f000 f988 	bl	7dc0 <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    7ab0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ab4:	4914      	ldr	r1, [pc, #80]	; (7b08 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xdc>)
    7ab6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7aba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    7abe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7ac2:	2b00      	cmp	r3, #0
    7ac4:	d103      	bne.n	7ace <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xa2>
    {
        TempDutyCycle = (uint16)0U;
    7ac6:	2300      	movs	r3, #0
    7ac8:	f8ad 300e 	strh.w	r3, [sp, #14]
    7acc:	e003      	b.n	7ad6 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xaa>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    7ace:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7ad2:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    7ad6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7ada:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7ade:	f89d 1006 	ldrb.w	r1, [sp, #6]
    7ae2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7ae6:	f7ff fedb 	bl	78a0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    7aea:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7aee:	4619      	mov	r1, r3
    7af0:	9802      	ldr	r0, [sp, #8]
    7af2:	f7fe f959 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    7af6:	f002 fae5 	bl	a0c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    7afa:	bf00      	nop
    7afc:	b004      	add	sp, #16
    7afe:	bd10      	pop	{r4, pc}
    7b00:	0000bde4 	.word	0x0000bde4
    7b04:	1fff8ed4 	.word	0x1fff8ed4
    7b08:	1fff8cfc 	.word	0x1fff8cfc

00007b0c <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    7b0c:	b500      	push	{lr}
    7b0e:	b089      	sub	sp, #36	; 0x24
    7b10:	9200      	str	r2, [sp, #0]
    7b12:	461a      	mov	r2, r3
    7b14:	4603      	mov	r3, r0
    7b16:	f88d 3007 	strb.w	r3, [sp, #7]
    7b1a:	460b      	mov	r3, r1
    7b1c:	f88d 3006 	strb.w	r3, [sp, #6]
    7b20:	4613      	mov	r3, r2
    7b22:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7b26:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b2a:	4a58      	ldr	r2, [pc, #352]	; (7c8c <Ftm_Pwm_Ip_SwOutputControl+0x180>)
    7b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b30:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    7b32:	2300      	movs	r3, #0
    7b34:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    7b38:	2300      	movs	r3, #0
    7b3a:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    7b3e:	2300      	movs	r3, #0
    7b40:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    7b44:	2300      	movs	r3, #0
    7b46:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    7b4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b4e:	4619      	mov	r1, r3
    7b50:	9805      	ldr	r0, [sp, #20]
    7b52:	f7fe fd89 	bl	6668 <Ftm_Pwm_Ip_GetChannelMode>
    7b56:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    7b58:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7b5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b60:	494b      	ldr	r1, [pc, #300]	; (7c90 <Ftm_Pwm_Ip_SwOutputControl+0x184>)
    7b62:	00d2      	lsls	r2, r2, #3
    7b64:	4413      	add	r3, r2
    7b66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    7b6a:	2b02      	cmp	r3, #2
    7b6c:	d109      	bne.n	7b82 <Ftm_Pwm_Ip_SwOutputControl+0x76>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    7b6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7b72:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b76:	4947      	ldr	r1, [pc, #284]	; (7c94 <Ftm_Pwm_Ip_SwOutputControl+0x188>)
    7b78:	00d2      	lsls	r2, r2, #3
    7b7a:	4413      	add	r3, r2
    7b7c:	2200      	movs	r2, #0
    7b7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    7b82:	9805      	ldr	r0, [sp, #20]
    7b84:	f7fe fd5f 	bl	6646 <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    7b88:	4603      	mov	r3, r0
    7b8a:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7b8e:	9b03      	ldr	r3, [sp, #12]
    7b90:	2b22      	cmp	r3, #34	; 0x22
    7b92:	d008      	beq.n	7ba6 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
    7b94:	9b03      	ldr	r3, [sp, #12]
    7b96:	2b62      	cmp	r3, #98	; 0x62
    7b98:	d005      	beq.n	7ba6 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7b9a:	9b03      	ldr	r3, [sp, #12]
    7b9c:	2b61      	cmp	r3, #97	; 0x61
    7b9e:	d002      	beq.n	7ba6 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7ba0:	9b03      	ldr	r3, [sp, #12]
    7ba2:	2b21      	cmp	r3, #33	; 0x21
    7ba4:	d103      	bne.n	7bae <Ftm_Pwm_Ip_SwOutputControl+0xa2>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    7ba6:	2303      	movs	r3, #3
    7ba8:	f8ad 301c 	strh.w	r3, [sp, #28]
    7bac:	e002      	b.n	7bb4 <Ftm_Pwm_Ip_SwOutputControl+0xa8>
    }
    else
    {
        ChannelMask = (uint16)1U;
    7bae:	2301      	movs	r3, #1
    7bb0:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    7bb4:	9805      	ldr	r0, [sp, #20]
    7bb6:	f7fe fd4f 	bl	6658 <Ftm_Pwm_Ip_GetPolInstance>
    7bba:	4603      	mov	r3, r0
    7bbc:	4619      	mov	r1, r3
    7bbe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7bc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7bc6:	fa02 f303 	lsl.w	r3, r2, r3
    7bca:	b29b      	uxth	r3, r3
    7bcc:	400b      	ands	r3, r1
    7bce:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    7bd2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    7bd6:	021b      	lsls	r3, r3, #8
    7bd8:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    7bdc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7be0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7be4:	3308      	adds	r3, #8
    7be6:	fa02 f303 	lsl.w	r3, r2, r3
    7bea:	b29b      	uxth	r3, r3
    7bec:	43db      	mvns	r3, r3
    7bee:	b29a      	uxth	r2, r3
    7bf0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7bf4:	4013      	ands	r3, r2
    7bf6:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    7bfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bfe:	2b00      	cmp	r3, #0
    7c00:	d027      	beq.n	7c52 <Ftm_Pwm_Ip_SwOutputControl+0x146>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    7c02:	9b00      	ldr	r3, [sp, #0]
    7c04:	2b01      	cmp	r3, #1
    7c06:	d109      	bne.n	7c1c <Ftm_Pwm_Ip_SwOutputControl+0x110>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    7c08:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7c0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7c10:	3308      	adds	r3, #8
    7c12:	fa02 f303 	lsl.w	r3, r2, r3
    7c16:	f8ad 301a 	strh.w	r3, [sp, #26]
    7c1a:	e002      	b.n	7c22 <Ftm_Pwm_Ip_SwOutputControl+0x116>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    7c1c:	2300      	movs	r3, #0
    7c1e:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    7c22:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    7c26:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    7c2a:	4053      	eors	r3, r2
    7c2c:	b29a      	uxth	r2, r3
    7c2e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7c32:	4313      	orrs	r3, r2
    7c34:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    7c38:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7c3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7c40:	fa02 f303 	lsl.w	r3, r2, r3
    7c44:	b29a      	uxth	r2, r3
    7c46:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7c4a:	4313      	orrs	r3, r2
    7c4c:	f8ad 301e 	strh.w	r3, [sp, #30]
    7c50:	e00d      	b.n	7c6e <Ftm_Pwm_Ip_SwOutputControl+0x162>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    7c52:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7c56:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7c5a:	fa02 f303 	lsl.w	r3, r2, r3
    7c5e:	b29b      	uxth	r3, r3
    7c60:	43db      	mvns	r3, r3
    7c62:	b29a      	uxth	r2, r3
    7c64:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7c68:	4013      	ands	r3, r2
    7c6a:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    7c6e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7c72:	4619      	mov	r1, r3
    7c74:	9805      	ldr	r0, [sp, #20]
    7c76:	f7fe fc86 	bl	6586 <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    7c7a:	2101      	movs	r1, #1
    7c7c:	9805      	ldr	r0, [sp, #20]
    7c7e:	f7fe f893 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    7c82:	bf00      	nop
    7c84:	b009      	add	sp, #36	; 0x24
    7c86:	f85d fb04 	ldr.w	pc, [sp], #4
    7c8a:	bf00      	nop
    7c8c:	0000bde4 	.word	0x0000bde4
    7c90:	1fff8ed4 	.word	0x1fff8ed4
    7c94:	1fff8d04 	.word	0x1fff8d04

00007c98 <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    7c98:	b510      	push	{r4, lr}
    7c9a:	b086      	sub	sp, #24
    7c9c:	4604      	mov	r4, r0
    7c9e:	4608      	mov	r0, r1
    7ca0:	4611      	mov	r1, r2
    7ca2:	461a      	mov	r2, r3
    7ca4:	4623      	mov	r3, r4
    7ca6:	f88d 3007 	strb.w	r3, [sp, #7]
    7caa:	4603      	mov	r3, r0
    7cac:	f88d 3006 	strb.w	r3, [sp, #6]
    7cb0:	460b      	mov	r3, r1
    7cb2:	f8ad 3004 	strh.w	r3, [sp, #4]
    7cb6:	4613      	mov	r3, r2
    7cb8:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7cbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cc0:	4a3d      	ldr	r2, [pc, #244]	; (7db8 <Ftm_Pwm_Ip_UpdatePwmChannel+0x120>)
    7cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cc6:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    7cc8:	2300      	movs	r3, #0
    7cca:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    7ccc:	2300      	movs	r3, #0
    7cce:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    7cd2:	2300      	movs	r3, #0
    7cd4:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    7cd8:	2300      	movs	r3, #0
    7cda:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    7cde:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7ce2:	085b      	lsrs	r3, r3, #1
    7ce4:	f88d 3009 	strb.w	r3, [sp, #9]
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    7ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cec:	4a33      	ldr	r2, [pc, #204]	; (7dbc <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>)
    7cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7cf2:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    7cf6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7cfa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7cfe:	429a      	cmp	r2, r3
    7d00:	d805      	bhi.n	7d0e <Ftm_Pwm_Ip_UpdatePwmChannel+0x76>
    7d02:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    7d06:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7d0a:	429a      	cmp	r2, r3
    7d0c:	d903      	bls.n	7d16 <Ftm_Pwm_Ip_UpdatePwmChannel+0x7e>
    7d0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7d12:	2b00      	cmp	r3, #0
    7d14:	d108      	bne.n	7d28 <Ftm_Pwm_Ip_UpdatePwmChannel+0x90>
    {
        HwFirstEdge = FirstEdge;
    7d16:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7d1a:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    7d1e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d22:	f8ad 3010 	strh.w	r3, [sp, #16]
    7d26:	e001      	b.n	7d2c <Ftm_Pwm_Ip_UpdatePwmChannel+0x94>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    7d28:	2301      	movs	r3, #1
    7d2a:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    7d2c:	9b05      	ldr	r3, [sp, #20]
    7d2e:	2b00      	cmp	r3, #0
    7d30:	d13e      	bne.n	7db0 <Ftm_Pwm_Ip_UpdatePwmChannel+0x118>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    7d32:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7d36:	4619      	mov	r1, r3
    7d38:	9803      	ldr	r0, [sp, #12]
    7d3a:	f7fe f8d5 	bl	5ee8 <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    7d3e:	4603      	mov	r3, r0
    7d40:	2b00      	cmp	r3, #0
    7d42:	d016      	beq.n	7d72 <Ftm_Pwm_Ip_UpdatePwmChannel+0xda>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    7d44:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7d48:	005b      	lsls	r3, r3, #1
    7d4a:	b2db      	uxtb	r3, r3
    7d4c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    7d50:	4619      	mov	r1, r3
    7d52:	9803      	ldr	r0, [sp, #12]
    7d54:	f7fd ff70 	bl	5c38 <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    7d58:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7d5c:	005b      	lsls	r3, r3, #1
    7d5e:	b2db      	uxtb	r3, r3
    7d60:	3301      	adds	r3, #1
    7d62:	b2db      	uxtb	r3, r3
    7d64:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    7d68:	4619      	mov	r1, r3
    7d6a:	9803      	ldr	r0, [sp, #12]
    7d6c:	f7fd ff64 	bl	5c38 <Ftm_Pwm_Ip_SetChnCountVal>
    7d70:	e018      	b.n	7da4 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    7d72:	9803      	ldr	r0, [sp, #12]
    7d74:	f7fd fde9 	bl	594a <Ftm_Pwm_Ip_GetCpwms>
    7d78:	4603      	mov	r3, r0
    7d7a:	2b01      	cmp	r3, #1
    7d7c:	d10a      	bne.n	7d94 <Ftm_Pwm_Ip_UpdatePwmChannel+0xfc>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    7d7e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    7d82:	085b      	lsrs	r3, r3, #1
    7d84:	b29a      	uxth	r2, r3
    7d86:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d8a:	4619      	mov	r1, r3
    7d8c:	9803      	ldr	r0, [sp, #12]
    7d8e:	f7fd ff53 	bl	5c38 <Ftm_Pwm_Ip_SetChnCountVal>
    7d92:	e007      	b.n	7da4 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    7d94:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    7d98:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d9c:	4619      	mov	r1, r3
    7d9e:	9803      	ldr	r0, [sp, #12]
    7da0:	f7fd ff4a 	bl	5c38 <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    7da4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    7da8:	4619      	mov	r1, r3
    7daa:	9803      	ldr	r0, [sp, #12]
    7dac:	f7fd fffc 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    7db0:	9b05      	ldr	r3, [sp, #20]
}
    7db2:	4618      	mov	r0, r3
    7db4:	b006      	add	sp, #24
    7db6:	bd10      	pop	{r4, pc}
    7db8:	0000bde4 	.word	0x0000bde4
    7dbc:	1fff8cfc 	.word	0x1fff8cfc

00007dc0 <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    7dc0:	b500      	push	{lr}
    7dc2:	b085      	sub	sp, #20
    7dc4:	4603      	mov	r3, r0
    7dc6:	9100      	str	r1, [sp, #0]
    7dc8:	f88d 3007 	strb.w	r3, [sp, #7]
    7dcc:	4613      	mov	r3, r2
    7dce:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7dd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7dd6:	4a16      	ldr	r2, [pc, #88]	; (7e30 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x70>)
    7dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ddc:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    7dde:	2300      	movs	r3, #0
    7de0:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    FtmPeriod = NewValue;
    7de2:	9b00      	ldr	r3, [sp, #0]
    7de4:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    7de6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7dea:	9a00      	ldr	r2, [sp, #0]
    7dec:	b291      	uxth	r1, r2
    7dee:	4a11      	ldr	r2, [pc, #68]	; (7e34 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x74>)
    7df0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    7df4:	9802      	ldr	r0, [sp, #8]
    7df6:	f7fd fda8 	bl	594a <Ftm_Pwm_Ip_GetCpwms>
    7dfa:	4603      	mov	r3, r0
    7dfc:	2b01      	cmp	r3, #1
    7dfe:	d103      	bne.n	7e08 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x48>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    7e00:	9b03      	ldr	r3, [sp, #12]
    7e02:	085b      	lsrs	r3, r3, #1
    7e04:	9303      	str	r3, [sp, #12]
    7e06:	e002      	b.n	7e0e <Ftm_Pwm_Ip_UpdatePwmPeriod+0x4e>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    7e08:	9b03      	ldr	r3, [sp, #12]
    7e0a:	3b01      	subs	r3, #1
    7e0c:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    7e0e:	9b03      	ldr	r3, [sp, #12]
    7e10:	b29b      	uxth	r3, r3
    7e12:	4619      	mov	r1, r3
    7e14:	9802      	ldr	r0, [sp, #8]
    7e16:	f7fd fdeb 	bl	59f0 <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    7e1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e1e:	4619      	mov	r1, r3
    7e20:	9802      	ldr	r0, [sp, #8]
    7e22:	f7fd ffc1 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    7e26:	2300      	movs	r3, #0
}
    7e28:	4618      	mov	r0, r3
    7e2a:	b005      	add	sp, #20
    7e2c:	f85d fb04 	ldr.w	pc, [sp], #4
    7e30:	0000bde4 	.word	0x0000bde4
    7e34:	1fff8cfc 	.word	0x1fff8cfc

00007e38 <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    7e38:	b500      	push	{lr}
    7e3a:	b085      	sub	sp, #20
    7e3c:	4603      	mov	r3, r0
    7e3e:	460a      	mov	r2, r1
    7e40:	f88d 3007 	strb.w	r3, [sp, #7]
    7e44:	4613      	mov	r3, r2
    7e46:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7e4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e4e:	4a0d      	ldr	r2, [pc, #52]	; (7e84 <Ftm_Pwm_Ip_GetOutputState+0x4c>)
    7e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e54:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    7e56:	f002 f9ad 	bl	a1b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    7e5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e5e:	4619      	mov	r1, r3
    7e60:	9802      	ldr	r0, [sp, #8]
    7e62:	f7fd fed3 	bl	5c0c <Ftm_Pwm_Ip_GetChOutputValue>
    7e66:	4603      	mov	r3, r0
    7e68:	2b00      	cmp	r3, #0
    7e6a:	d002      	beq.n	7e72 <Ftm_Pwm_Ip_GetOutputState+0x3a>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    7e6c:	2301      	movs	r3, #1
    7e6e:	9303      	str	r3, [sp, #12]
    7e70:	e001      	b.n	7e76 <Ftm_Pwm_Ip_GetOutputState+0x3e>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    7e72:	2300      	movs	r3, #0
    7e74:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    7e76:	f002 f9c9 	bl	a20c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    7e7a:	9b03      	ldr	r3, [sp, #12]
}
    7e7c:	4618      	mov	r0, r3
    7e7e:	b005      	add	sp, #20
    7e80:	f85d fb04 	ldr.w	pc, [sp], #4
    7e84:	0000bde4 	.word	0x0000bde4

00007e88 <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    7e88:	b500      	push	{lr}
    7e8a:	b087      	sub	sp, #28
    7e8c:	4603      	mov	r3, r0
    7e8e:	9100      	str	r1, [sp, #0]
    7e90:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7e94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e98:	4a38      	ldr	r2, [pc, #224]	; (7f7c <Ftm_Pwm_Ip_DisableNotification+0xf4>)
    7e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e9e:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    7ea0:	9b00      	ldr	r3, [sp, #0]
    7ea2:	f88d 3013 	strb.w	r3, [sp, #19]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    7ea6:	f002 f9d7 	bl	a258 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    7eaa:	9b00      	ldr	r3, [sp, #0]
    7eac:	2b00      	cmp	r3, #0
    7eae:	d014      	beq.n	7eda <Ftm_Pwm_Ip_DisableNotification+0x52>
    7eb0:	9b00      	ldr	r3, [sp, #0]
    7eb2:	2b01      	cmp	r3, #1
    7eb4:	d011      	beq.n	7eda <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    7eb6:	9b00      	ldr	r3, [sp, #0]
    7eb8:	2b02      	cmp	r3, #2
    7eba:	d00e      	beq.n	7eda <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    7ebc:	9b00      	ldr	r3, [sp, #0]
    7ebe:	2b03      	cmp	r3, #3
    7ec0:	d00b      	beq.n	7eda <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    7ec2:	9b00      	ldr	r3, [sp, #0]
    7ec4:	2b04      	cmp	r3, #4
    7ec6:	d008      	beq.n	7eda <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    7ec8:	9b00      	ldr	r3, [sp, #0]
    7eca:	2b05      	cmp	r3, #5
    7ecc:	d005      	beq.n	7eda <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    7ece:	9b00      	ldr	r3, [sp, #0]
    7ed0:	2b06      	cmp	r3, #6
    7ed2:	d002      	beq.n	7eda <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    7ed4:	9b00      	ldr	r3, [sp, #0]
    7ed6:	2b07      	cmp	r3, #7
    7ed8:	d136      	bne.n	7f48 <Ftm_Pwm_Ip_DisableNotification+0xc0>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    7eda:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7ede:	085b      	lsrs	r3, r3, #1
    7ee0:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    7ee4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7ee8:	4619      	mov	r1, r3
    7eea:	9805      	ldr	r0, [sp, #20]
    7eec:	f7fe fbbc 	bl	6668 <Ftm_Pwm_Ip_GetChannelMode>
    7ef0:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    7ef2:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7ef6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7efa:	4611      	mov	r1, r2
    7efc:	4618      	mov	r0, r3
    7efe:	f7fe ff47 	bl	6d90 <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7f02:	9b03      	ldr	r3, [sp, #12]
    7f04:	2b22      	cmp	r3, #34	; 0x22
    7f06:	d008      	beq.n	7f1a <Ftm_Pwm_Ip_DisableNotification+0x92>
    7f08:	9b03      	ldr	r3, [sp, #12]
    7f0a:	2b62      	cmp	r3, #98	; 0x62
    7f0c:	d005      	beq.n	7f1a <Ftm_Pwm_Ip_DisableNotification+0x92>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7f0e:	9b03      	ldr	r3, [sp, #12]
    7f10:	2b61      	cmp	r3, #97	; 0x61
    7f12:	d002      	beq.n	7f1a <Ftm_Pwm_Ip_DisableNotification+0x92>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7f14:	9b03      	ldr	r3, [sp, #12]
    7f16:	2b21      	cmp	r3, #33	; 0x21
    7f18:	d129      	bne.n	7f6e <Ftm_Pwm_Ip_DisableNotification+0xe6>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    7f1a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7f1e:	005b      	lsls	r3, r3, #1
    7f20:	b2da      	uxtb	r2, r3
    7f22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f26:	4611      	mov	r1, r2
    7f28:	4618      	mov	r0, r3
    7f2a:	f7fe ff31 	bl	6d90 <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    7f2e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7f32:	005b      	lsls	r3, r3, #1
    7f34:	b2db      	uxtb	r3, r3
    7f36:	3301      	adds	r3, #1
    7f38:	b2da      	uxtb	r2, r3
    7f3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f3e:	4611      	mov	r1, r2
    7f40:	4618      	mov	r0, r3
    7f42:	f7fe ff25 	bl	6d90 <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7f46:	e012      	b.n	7f6e <Ftm_Pwm_Ip_DisableNotification+0xe6>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    7f48:	9b00      	ldr	r3, [sp, #0]
    7f4a:	2b0a      	cmp	r3, #10
    7f4c:	d107      	bne.n	7f5e <Ftm_Pwm_Ip_DisableNotification+0xd6>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
    7f4e:	2100      	movs	r1, #0
    7f50:	9805      	ldr	r0, [sp, #20]
    7f52:	f7fe fd88 	bl	6a66 <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    7f56:	9805      	ldr	r0, [sp, #20]
    7f58:	f7fe fd9b 	bl	6a92 <Ftm_Pwm_Ip_ClearFaultFlag>
    7f5c:	e008      	b.n	7f70 <Ftm_Pwm_Ip_DisableNotification+0xe8>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    7f5e:	9805      	ldr	r0, [sp, #20]
    7f60:	f7fd fd18 	bl	5994 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    7f64:	2100      	movs	r1, #0
    7f66:	9805      	ldr	r0, [sp, #20]
    7f68:	f7fd fcfd 	bl	5966 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    7f6c:	e000      	b.n	7f70 <Ftm_Pwm_Ip_DisableNotification+0xe8>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7f6e:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
    7f70:	f002 f99e 	bl	a2b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
    7f74:	bf00      	nop
    7f76:	b007      	add	sp, #28
    7f78:	f85d fb04 	ldr.w	pc, [sp], #4
    7f7c:	0000bde4 	.word	0x0000bde4

00007f80 <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
    7f80:	b500      	push	{lr}
    7f82:	b087      	sub	sp, #28
    7f84:	4603      	mov	r3, r0
    7f86:	460a      	mov	r2, r1
    7f88:	f88d 3007 	strb.w	r3, [sp, #7]
    7f8c:	4613      	mov	r3, r2
    7f8e:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7f92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f96:	4a22      	ldr	r2, [pc, #136]	; (8020 <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
    7f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f9c:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
    7f9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7fa2:	085b      	lsrs	r3, r3, #1
    7fa4:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    7fa8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7fac:	4619      	mov	r1, r3
    7fae:	9805      	ldr	r0, [sp, #20]
    7fb0:	f7fe fb5a 	bl	6668 <Ftm_Pwm_Ip_GetChannelMode>
    7fb4:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
    7fb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7fba:	2201      	movs	r2, #1
    7fbc:	4619      	mov	r1, r3
    7fbe:	9805      	ldr	r0, [sp, #20]
    7fc0:	f7fd fde9 	bl	5b96 <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7fc4:	9b03      	ldr	r3, [sp, #12]
    7fc6:	2b22      	cmp	r3, #34	; 0x22
    7fc8:	d008      	beq.n	7fdc <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
    7fca:	9b03      	ldr	r3, [sp, #12]
    7fcc:	2b62      	cmp	r3, #98	; 0x62
    7fce:	d005      	beq.n	7fdc <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7fd0:	9b03      	ldr	r3, [sp, #12]
    7fd2:	2b61      	cmp	r3, #97	; 0x61
    7fd4:	d002      	beq.n	7fdc <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7fd6:	9b03      	ldr	r3, [sp, #12]
    7fd8:	2b21      	cmp	r3, #33	; 0x21
    7fda:	d11d      	bne.n	8018 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
    7fdc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7fe0:	005b      	lsls	r3, r3, #1
    7fe2:	b2db      	uxtb	r3, r3
    7fe4:	3301      	adds	r3, #1
    7fe6:	b2db      	uxtb	r3, r3
    7fe8:	4619      	mov	r1, r3
    7fea:	9805      	ldr	r0, [sp, #20]
    7fec:	f7fd fdf6 	bl	5bdc <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
    7ff0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7ff4:	005b      	lsls	r3, r3, #1
    7ff6:	b2db      	uxtb	r3, r3
    7ff8:	2201      	movs	r2, #1
    7ffa:	4619      	mov	r1, r3
    7ffc:	9805      	ldr	r0, [sp, #20]
    7ffe:	f7fd fdca 	bl	5b96 <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
    8002:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8006:	005b      	lsls	r3, r3, #1
    8008:	b2db      	uxtb	r3, r3
    800a:	3301      	adds	r3, #1
    800c:	b2db      	uxtb	r3, r3
    800e:	2201      	movs	r2, #1
    8010:	4619      	mov	r1, r3
    8012:	9805      	ldr	r0, [sp, #20]
    8014:	f7fd fdbf 	bl	5b96 <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
    8018:	bf00      	nop
    801a:	b007      	add	sp, #28
    801c:	f85d fb04 	ldr.w	pc, [sp], #4
    8020:	0000bde4 	.word	0x0000bde4

00008024 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
    8024:	b500      	push	{lr}
    8026:	b085      	sub	sp, #20
    8028:	4603      	mov	r3, r0
    802a:	9100      	str	r1, [sp, #0]
    802c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8030:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8034:	4a23      	ldr	r2, [pc, #140]	; (80c4 <Ftm_Pwm_Ip_EnableNotification+0xa0>)
    8036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    803a:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
    803c:	9b00      	ldr	r3, [sp, #0]
    803e:	f88d 300b 	strb.w	r3, [sp, #11]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
    8042:	f002 f95b 	bl	a2fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    8046:	9b00      	ldr	r3, [sp, #0]
    8048:	2b00      	cmp	r3, #0
    804a:	d014      	beq.n	8076 <Ftm_Pwm_Ip_EnableNotification+0x52>
    804c:	9b00      	ldr	r3, [sp, #0]
    804e:	2b01      	cmp	r3, #1
    8050:	d011      	beq.n	8076 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    8052:	9b00      	ldr	r3, [sp, #0]
    8054:	2b02      	cmp	r3, #2
    8056:	d00e      	beq.n	8076 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    8058:	9b00      	ldr	r3, [sp, #0]
    805a:	2b03      	cmp	r3, #3
    805c:	d00b      	beq.n	8076 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    805e:	9b00      	ldr	r3, [sp, #0]
    8060:	2b04      	cmp	r3, #4
    8062:	d008      	beq.n	8076 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    8064:	9b00      	ldr	r3, [sp, #0]
    8066:	2b05      	cmp	r3, #5
    8068:	d005      	beq.n	8076 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    806a:	9b00      	ldr	r3, [sp, #0]
    806c:	2b06      	cmp	r3, #6
    806e:	d002      	beq.n	8076 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    8070:	9b00      	ldr	r3, [sp, #0]
    8072:	2b07      	cmp	r3, #7
    8074:	d10e      	bne.n	8094 <Ftm_Pwm_Ip_EnableNotification+0x70>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
    8076:	f89d 300b 	ldrb.w	r3, [sp, #11]
    807a:	4619      	mov	r1, r3
    807c:	9803      	ldr	r0, [sp, #12]
    807e:	f7fd fdad 	bl	5bdc <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
    8082:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8086:	f89d 3007 	ldrb.w	r3, [sp, #7]
    808a:	4611      	mov	r1, r2
    808c:	4618      	mov	r0, r3
    808e:	f7ff ff77 	bl	7f80 <Ftm_Pwm_Ip_SetNormalNotificationCase>
    8092:	e011      	b.n	80b8 <Ftm_Pwm_Ip_EnableNotification+0x94>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    8094:	9b00      	ldr	r3, [sp, #0]
    8096:	2b0a      	cmp	r3, #10
    8098:	d107      	bne.n	80aa <Ftm_Pwm_Ip_EnableNotification+0x86>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    809a:	9803      	ldr	r0, [sp, #12]
    809c:	f7fe fcf9 	bl	6a92 <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
    80a0:	2101      	movs	r1, #1
    80a2:	9803      	ldr	r0, [sp, #12]
    80a4:	f7fe fcdf 	bl	6a66 <Ftm_Pwm_Ip_SetFaultInterruptEnable>
    80a8:	e006      	b.n	80b8 <Ftm_Pwm_Ip_EnableNotification+0x94>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    80aa:	9803      	ldr	r0, [sp, #12]
    80ac:	f7fd fc72 	bl	5994 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
    80b0:	2101      	movs	r1, #1
    80b2:	9803      	ldr	r0, [sp, #12]
    80b4:	f7fd fc57 	bl	5966 <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
    80b8:	f002 f94c 	bl	a354 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
    80bc:	bf00      	nop
    80be:	b005      	add	sp, #20
    80c0:	f85d fb04 	ldr.w	pc, [sp], #4
    80c4:	0000bde4 	.word	0x0000bde4

000080c8 <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
    80c8:	b500      	push	{lr}
    80ca:	b085      	sub	sp, #20
    80cc:	4603      	mov	r3, r0
    80ce:	9100      	str	r1, [sp, #0]
    80d0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    80d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80d8:	4a0c      	ldr	r2, [pc, #48]	; (810c <Ftm_Pwm_Ip_SetPowerState+0x44>)
    80da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80de:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
    80e0:	9b00      	ldr	r3, [sp, #0]
    80e2:	2b01      	cmp	r3, #1
    80e4:	d104      	bne.n	80f0 <Ftm_Pwm_Ip_SetPowerState+0x28>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    80e6:	2100      	movs	r1, #0
    80e8:	9803      	ldr	r0, [sp, #12]
    80ea:	f7fd fc07 	bl	58fc <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
    80ee:	e008      	b.n	8102 <Ftm_Pwm_Ip_SetPowerState+0x3a>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    80f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80f4:	4a06      	ldr	r2, [pc, #24]	; (8110 <Ftm_Pwm_Ip_SetPowerState+0x48>)
    80f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80fa:	4619      	mov	r1, r3
    80fc:	9803      	ldr	r0, [sp, #12]
    80fe:	f7fd fbfd 	bl	58fc <Ftm_Pwm_Ip_SetClockSource>
}
    8102:	bf00      	nop
    8104:	b005      	add	sp, #20
    8106:	f85d fb04 	ldr.w	pc, [sp], #4
    810a:	bf00      	nop
    810c:	0000bde4 	.word	0x0000bde4
    8110:	1fff8ff4 	.word	0x1fff8ff4

00008114 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
    8114:	b500      	push	{lr}
    8116:	b085      	sub	sp, #20
    8118:	4603      	mov	r3, r0
    811a:	9100      	str	r1, [sp, #0]
    811c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8120:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8124:	4a0e      	ldr	r2, [pc, #56]	; (8160 <Ftm_Pwm_Ip_SetClockMode+0x4c>)
    8126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    812a:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
    812c:	9b00      	ldr	r3, [sp, #0]
    812e:	2b01      	cmp	r3, #1
    8130:	d109      	bne.n	8146 <Ftm_Pwm_Ip_SetClockMode+0x32>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
    8132:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8136:	4a0b      	ldr	r2, [pc, #44]	; (8164 <Ftm_Pwm_Ip_SetClockMode+0x50>)
    8138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    813c:	4619      	mov	r1, r3
    813e:	9803      	ldr	r0, [sp, #12]
    8140:	f7fd fbcc 	bl	58dc <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
    8144:	e008      	b.n	8158 <Ftm_Pwm_Ip_SetClockMode+0x44>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    8146:	f89d 3007 	ldrb.w	r3, [sp, #7]
    814a:	4a07      	ldr	r2, [pc, #28]	; (8168 <Ftm_Pwm_Ip_SetClockMode+0x54>)
    814c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8150:	4619      	mov	r1, r3
    8152:	9803      	ldr	r0, [sp, #12]
    8154:	f7fd fbc2 	bl	58dc <Ftm_Pwm_Ip_SetClockPs>
}
    8158:	bf00      	nop
    815a:	b005      	add	sp, #20
    815c:	f85d fb04 	ldr.w	pc, [sp], #4
    8160:	0000bde4 	.word	0x0000bde4
    8164:	1fff9014 	.word	0x1fff9014
    8168:	1fff9004 	.word	0x1fff9004

0000816c <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
    816c:	b500      	push	{lr}
    816e:	b085      	sub	sp, #20
    8170:	4603      	mov	r3, r0
    8172:	460a      	mov	r2, r1
    8174:	f88d 3007 	strb.w	r3, [sp, #7]
    8178:	4613      	mov	r3, r2
    817a:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    817e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8182:	4a07      	ldr	r2, [pc, #28]	; (81a0 <Ftm_Pwm_Ip_ResetCounter+0x34>)
    8184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8188:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
    818a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    818e:	4619      	mov	r1, r3
    8190:	9803      	ldr	r0, [sp, #12]
    8192:	f7fe f8ae 	bl	62f2 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
    8196:	bf00      	nop
    8198:	b005      	add	sp, #20
    819a:	f85d fb04 	ldr.w	pc, [sp], #4
    819e:	bf00      	nop
    81a0:	0000bde4 	.word	0x0000bde4

000081a4 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
    81a4:	b084      	sub	sp, #16
    81a6:	4603      	mov	r3, r0
    81a8:	460a      	mov	r2, r1
    81aa:	f88d 3007 	strb.w	r3, [sp, #7]
    81ae:	4613      	mov	r3, r2
    81b0:	f88d 3006 	strb.w	r3, [sp, #6]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
    81b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    81b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    81bc:	4905      	ldr	r1, [pc, #20]	; (81d4 <Ftm_Pwm_Ip_GetChannelState+0x30>)
    81be:	00d2      	lsls	r2, r2, #3
    81c0:	4413      	add	r3, r2
    81c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    81c6:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
    81ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    81ce:	4618      	mov	r0, r3
    81d0:	b004      	add	sp, #16
    81d2:	4770      	bx	lr
    81d4:	1fff8d04 	.word	0x1fff8d04

000081d8 <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
    81d8:	b500      	push	{lr}
    81da:	b087      	sub	sp, #28
    81dc:	9202      	str	r2, [sp, #8]
    81de:	9301      	str	r3, [sp, #4]
    81e0:	4603      	mov	r3, r0
    81e2:	f88d 300f 	strb.w	r3, [sp, #15]
    81e6:	460b      	mov	r3, r1
    81e8:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    81ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    81f0:	4a1f      	ldr	r2, [pc, #124]	; (8270 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x98>)
    81f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81f6:	9304      	str	r3, [sp, #16]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
    81f8:	2300      	movs	r3, #0
    81fa:	f88d 3017 	strb.w	r3, [sp, #23]
    81fe:	e026      	b.n	824e <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x76>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
    8200:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8204:	9a02      	ldr	r2, [sp, #8]
    8206:	4413      	add	r3, r2
    8208:	7819      	ldrb	r1, [r3, #0]
    820a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    820e:	005b      	lsls	r3, r3, #1
    8210:	9a01      	ldr	r2, [sp, #4]
    8212:	4413      	add	r3, r2
    8214:	881b      	ldrh	r3, [r3, #0]
    8216:	461a      	mov	r2, r3
    8218:	9804      	ldr	r0, [sp, #16]
    821a:	f7fd fd0d 	bl	5c38 <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
    821e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8222:	005b      	lsls	r3, r3, #1
    8224:	9a01      	ldr	r2, [sp, #4]
    8226:	441a      	add	r2, r3
    8228:	f89d 300f 	ldrb.w	r3, [sp, #15]
    822c:	f89d 1017 	ldrb.w	r1, [sp, #23]
    8230:	9802      	ldr	r0, [sp, #8]
    8232:	4401      	add	r1, r0
    8234:	7809      	ldrb	r1, [r1, #0]
    8236:	4608      	mov	r0, r1
    8238:	8811      	ldrh	r1, [r2, #0]
    823a:	4a0e      	ldr	r2, [pc, #56]	; (8274 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9c>)
    823c:	00db      	lsls	r3, r3, #3
    823e:	4403      	add	r3, r0
    8240:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
    8244:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8248:	3301      	adds	r3, #1
    824a:	f88d 3017 	strb.w	r3, [sp, #23]
    824e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8252:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8256:	429a      	cmp	r2, r3
    8258:	d3d2      	bcc.n	8200 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x28>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    825a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    825e:	4619      	mov	r1, r3
    8260:	9804      	ldr	r0, [sp, #16]
    8262:	f7fd fda1 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    8266:	bf00      	nop
    8268:	b007      	add	sp, #28
    826a:	f85d fb04 	ldr.w	pc, [sp], #4
    826e:	bf00      	nop
    8270:	0000bde4 	.word	0x0000bde4
    8274:	1fff8d04 	.word	0x1fff8d04

00008278 <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
    8278:	b500      	push	{lr}
    827a:	b085      	sub	sp, #20
    827c:	4603      	mov	r3, r0
    827e:	9100      	str	r1, [sp, #0]
    8280:	f88d 3007 	strb.w	r3, [sp, #7]
    8284:	4613      	mov	r3, r2
    8286:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    828a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    828e:	4a0b      	ldr	r2, [pc, #44]	; (82bc <Ftm_Pwm_Ip_MaskOutputChannels+0x44>)
    8290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8294:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
    8296:	f002 f8d5 	bl	a444 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
    829a:	9900      	ldr	r1, [sp, #0]
    829c:	9803      	ldr	r0, [sp, #12]
    829e:	f7fd fde0 	bl	5e62 <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    82a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    82a6:	4619      	mov	r1, r3
    82a8:	9803      	ldr	r0, [sp, #12]
    82aa:	f7fd fd7d 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
    82ae:	f002 f8f5 	bl	a49c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
    82b2:	bf00      	nop
    82b4:	b005      	add	sp, #20
    82b6:	f85d fb04 	ldr.w	pc, [sp], #4
    82ba:	bf00      	nop
    82bc:	0000bde4 	.word	0x0000bde4

000082c0 <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
    82c0:	b500      	push	{lr}
    82c2:	b085      	sub	sp, #20
    82c4:	4603      	mov	r3, r0
    82c6:	9100      	str	r1, [sp, #0]
    82c8:	f88d 3007 	strb.w	r3, [sp, #7]
    82cc:	4613      	mov	r3, r2
    82ce:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    82d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82d6:	4a0b      	ldr	r2, [pc, #44]	; (8304 <Ftm_Pwm_Ip_UnMaskOutputChannels+0x44>)
    82d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82dc:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
    82de:	f002 f903 	bl	a4e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
    82e2:	9900      	ldr	r1, [sp, #0]
    82e4:	9803      	ldr	r0, [sp, #12]
    82e6:	f7fd fdcb 	bl	5e80 <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    82ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    82ee:	4619      	mov	r1, r3
    82f0:	9803      	ldr	r0, [sp, #12]
    82f2:	f7fd fd59 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
    82f6:	f002 f923 	bl	a540 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
    82fa:	bf00      	nop
    82fc:	b005      	add	sp, #20
    82fe:	f85d fb04 	ldr.w	pc, [sp], #4
    8302:	bf00      	nop
    8304:	0000bde4 	.word	0x0000bde4

00008308 <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
    8308:	b510      	push	{r4, lr}
    830a:	b084      	sub	sp, #16
    830c:	4604      	mov	r4, r0
    830e:	4608      	mov	r0, r1
    8310:	4611      	mov	r1, r2
    8312:	461a      	mov	r2, r3
    8314:	4623      	mov	r3, r4
    8316:	f88d 3007 	strb.w	r3, [sp, #7]
    831a:	4603      	mov	r3, r0
    831c:	f88d 3006 	strb.w	r3, [sp, #6]
    8320:	460b      	mov	r3, r1
    8322:	f8ad 3004 	strh.w	r3, [sp, #4]
    8326:	4613      	mov	r3, r2
    8328:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    832c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8330:	4a2e      	ldr	r2, [pc, #184]	; (83ec <Ftm_Pwm_Ip_SetPhaseShift+0xe4>)
    8332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8336:	9303      	str	r3, [sp, #12]
    {
        RetVal = FALSE;
    }
    DevAssert(RetVal != FALSE);
#endif
    PairChId = Channel >> 1U;
    8338:	f89d 3006 	ldrb.w	r3, [sp, #6]
    833c:	085b      	lsrs	r3, r3, #1
    833e:	f88d 300b 	strb.w	r3, [sp, #11]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    8342:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8346:	492a      	ldr	r1, [pc, #168]	; (83f0 <Ftm_Pwm_Ip_SetPhaseShift+0xe8>)
    8348:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    834c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
    8350:	f002 f91c 	bl	a58c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    8354:	9803      	ldr	r0, [sp, #12]
    8356:	f7fd faf8 	bl	594a <Ftm_Pwm_Ip_GetCpwms>
    835a:	4603      	mov	r3, r0
    835c:	2b01      	cmp	r3, #1
    835e:	d108      	bne.n	8372 <Ftm_Pwm_Ip_SetPhaseShift+0x6a>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
    8360:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8364:	085b      	lsrs	r3, r3, #1
    8366:	b29b      	uxth	r3, r3
    8368:	4619      	mov	r1, r3
    836a:	9803      	ldr	r0, [sp, #12]
    836c:	f7fd fb40 	bl	59f0 <Ftm_Pwm_Ip_SetMod>
    8370:	e007      	b.n	8382 <Ftm_Pwm_Ip_SetPhaseShift+0x7a>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
    8372:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8376:	3b01      	subs	r3, #1
    8378:	b29b      	uxth	r3, r3
    837a:	4619      	mov	r1, r3
    837c:	9803      	ldr	r0, [sp, #12]
    837e:	f7fd fb37 	bl	59f0 <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
    8382:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8386:	005b      	lsls	r3, r3, #1
    8388:	b2db      	uxtb	r3, r3
    838a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    838e:	4619      	mov	r1, r3
    8390:	9803      	ldr	r0, [sp, #12]
    8392:	f7fd fc51 	bl	5c38 <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
    8396:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    839a:	085b      	lsrs	r3, r3, #1
    839c:	f8ad 3008 	strh.w	r3, [sp, #8]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
    83a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    83a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    83a8:	4912      	ldr	r1, [pc, #72]	; (83f4 <Ftm_Pwm_Ip_SetPhaseShift+0xec>)
    83aa:	00d2      	lsls	r2, r2, #3
    83ac:	4413      	add	r3, r2
    83ae:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    83b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
    83b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    83ba:	005b      	lsls	r3, r3, #1
    83bc:	b2db      	uxtb	r3, r3
    83be:	3301      	adds	r3, #1
    83c0:	b2d9      	uxtb	r1, r3
    83c2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    83c6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    83ca:	4413      	add	r3, r2
    83cc:	b29b      	uxth	r3, r3
    83ce:	461a      	mov	r2, r3
    83d0:	9803      	ldr	r0, [sp, #12]
    83d2:	f7fd fc31 	bl	5c38 <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    83d6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    83da:	4619      	mov	r1, r3
    83dc:	9803      	ldr	r0, [sp, #12]
    83de:	f7fd fce3 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
    83e2:	f002 f8ff 	bl	a5e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
    83e6:	bf00      	nop
    83e8:	b004      	add	sp, #16
    83ea:	bd10      	pop	{r4, pc}
    83ec:	0000bde4 	.word	0x0000bde4
    83f0:	1fff8cfc 	.word	0x1fff8cfc
    83f4:	1fff8d04 	.word	0x1fff8d04

000083f8 <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
    83f8:	b510      	push	{r4, lr}
    83fa:	b086      	sub	sp, #24
    83fc:	4604      	mov	r4, r0
    83fe:	4608      	mov	r0, r1
    8400:	4611      	mov	r1, r2
    8402:	461a      	mov	r2, r3
    8404:	4623      	mov	r3, r4
    8406:	f88d 300f 	strb.w	r3, [sp, #15]
    840a:	4603      	mov	r3, r0
    840c:	f88d 300e 	strb.w	r3, [sp, #14]
    8410:	460b      	mov	r3, r1
    8412:	f8ad 300c 	strh.w	r3, [sp, #12]
    8416:	4613      	mov	r3, r2
    8418:	f8ad 300a 	strh.w	r3, [sp, #10]
        }
    }
    DevAssert(RetVal != FALSE);

#endif
    PairId = Channel >> 1U;
    841c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8420:	085b      	lsrs	r3, r3, #1
    8422:	f88d 3016 	strb.w	r3, [sp, #22]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
    8426:	f89d 200f 	ldrb.w	r2, [sp, #15]
    842a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    842e:	492d      	ldr	r1, [pc, #180]	; (84e4 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xec>)
    8430:	0092      	lsls	r2, r2, #2
    8432:	4413      	add	r3, r2
    8434:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    8438:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    843c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8440:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8444:	4928      	ldr	r1, [pc, #160]	; (84e8 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf0>)
    8446:	00d2      	lsls	r2, r2, #3
    8448:	4413      	add	r3, r2
    844a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    844e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
    8452:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8456:	f8ad 3014 	strh.w	r3, [sp, #20]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
    845a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    845e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    8462:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8466:	4618      	mov	r0, r3
    8468:	f7fe fbc4 	bl	6bf4 <Ftm_Pwm_Ip_CalculatePhaseShift>
    846c:	4603      	mov	r3, r0
    846e:	f8ad 3012 	strh.w	r3, [sp, #18]

    if (TRUE == SyncUpdate)
    8472:	f89d 3020 	ldrb.w	r3, [sp, #32]
    8476:	2b00      	cmp	r3, #0
    8478:	d003      	beq.n	8482 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x8a>
    {
        SoftwareTrigger = FALSE;
    847a:	2300      	movs	r3, #0
    847c:	f88d 3017 	strb.w	r3, [sp, #23]
    8480:	e002      	b.n	8488 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
    }
    else
    {
        SoftwareTrigger = TRUE;
    8482:	2301      	movs	r3, #1
    8484:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    8488:	f89d 200f 	ldrb.w	r2, [sp, #15]
    848c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8490:	4916      	ldr	r1, [pc, #88]	; (84ec <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    8492:	00d2      	lsls	r2, r2, #3
    8494:	4413      	add	r3, r2
    8496:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    849a:	2b02      	cmp	r3, #2
    849c:	d111      	bne.n	84c2 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xca>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    849e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    84a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    84a6:	4911      	ldr	r1, [pc, #68]	; (84ec <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    84a8:	00d2      	lsls	r2, r2, #3
    84aa:	4413      	add	r3, r2
    84ac:	2201      	movs	r2, #1
    84ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    84b2:	f89d 100e 	ldrb.w	r1, [sp, #14]
    84b6:	f89d 000f 	ldrb.w	r0, [sp, #15]
    84ba:	2300      	movs	r3, #0
    84bc:	2200      	movs	r2, #0
    84be:	f7ff fb25 	bl	7b0c <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    84c2:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    84c6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    84ca:	f89d 100e 	ldrb.w	r1, [sp, #14]
    84ce:	f89d 000f 	ldrb.w	r0, [sp, #15]
    84d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    84d6:	9300      	str	r3, [sp, #0]
    84d8:	4623      	mov	r3, r4
    84da:	f7ff fbdd 	bl	7c98 <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
    84de:	bf00      	nop
    84e0:	b006      	add	sp, #24
    84e2:	bd10      	pop	{r4, pc}
    84e4:	1fff8d44 	.word	0x1fff8d44
    84e8:	1fff8d04 	.word	0x1fff8d04
    84ec:	1fff8ed4 	.word	0x1fff8ed4

000084f0 <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
    84f0:	b500      	push	{lr}
    84f2:	b085      	sub	sp, #20
    84f4:	4603      	mov	r3, r0
    84f6:	9100      	str	r1, [sp, #0]
    84f8:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    84fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8500:	4a07      	ldr	r2, [pc, #28]	; (8520 <Ftm_Pwm_Ip_DisableTrigger+0x30>)
    8502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8506:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
    8508:	f002 f892 	bl	a630 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
    850c:	9900      	ldr	r1, [sp, #0]
    850e:	9803      	ldr	r0, [sp, #12]
    8510:	f7fd fdea 	bl	60e8 <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
    8514:	f002 f8b8 	bl	a688 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
    8518:	bf00      	nop
    851a:	b005      	add	sp, #20
    851c:	f85d fb04 	ldr.w	pc, [sp], #4
    8520:	0000bde4 	.word	0x0000bde4

00008524 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
    8524:	b500      	push	{lr}
    8526:	b085      	sub	sp, #20
    8528:	4603      	mov	r3, r0
    852a:	9100      	str	r1, [sp, #0]
    852c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8530:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8534:	4a07      	ldr	r2, [pc, #28]	; (8554 <Ftm_Pwm_Ip_EnableTrigger+0x30>)
    8536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    853a:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
    853c:	f002 f8ca 	bl	a6d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
    8540:	9900      	ldr	r1, [sp, #0]
    8542:	9803      	ldr	r0, [sp, #12]
    8544:	f7fd fddd 	bl	6102 <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
    8548:	f002 f8f0 	bl	a72c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
    854c:	bf00      	nop
    854e:	b005      	add	sp, #20
    8550:	f85d fb04 	ldr.w	pc, [sp], #4
    8554:	0000bde4 	.word	0x0000bde4

00008558 <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
    8558:	b500      	push	{lr}
    855a:	b085      	sub	sp, #20
    855c:	4603      	mov	r3, r0
    855e:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8562:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8566:	4a08      	ldr	r2, [pc, #32]	; (8588 <Ftm_Pwm_Ip_SyncUpdate+0x30>)
    8568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    856c:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
    856e:	f002 f903 	bl	a778 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    8572:	2101      	movs	r1, #1
    8574:	9803      	ldr	r0, [sp, #12]
    8576:	f7fd fc17 	bl	5da8 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
    857a:	f002 f929 	bl	a7d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
    857e:	bf00      	nop
    8580:	b005      	add	sp, #20
    8582:	f85d fb04 	ldr.w	pc, [sp], #4
    8586:	bf00      	nop
    8588:	0000bde4 	.word	0x0000bde4

0000858c <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
    858c:	b500      	push	{lr}
    858e:	b085      	sub	sp, #20
    8590:	4603      	mov	r3, r0
    8592:	f88d 3007 	strb.w	r3, [sp, #7]
    8596:	460b      	mov	r3, r1
    8598:	f88d 3006 	strb.w	r3, [sp, #6]
    859c:	4613      	mov	r3, r2
    859e:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    85a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    85a6:	4a17      	ldr	r2, [pc, #92]	; (8604 <Ftm_Pwm_Ip_SetChannelDeadTime+0x78>)
    85a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85ac:	9303      	str	r3, [sp, #12]
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
    85ae:	f002 f935 	bl	a81c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
    85b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    85b6:	2b3f      	cmp	r3, #63	; 0x3f
    85b8:	d80b      	bhi.n	85d2 <Ftm_Pwm_Ip_SetChannelDeadTime+0x46>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
    85ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    85be:	b2db      	uxtb	r3, r3
    85c0:	4619      	mov	r1, r3
    85c2:	9803      	ldr	r0, [sp, #12]
    85c4:	f7fd fd42 	bl	604c <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    85c8:	2100      	movs	r1, #0
    85ca:	9803      	ldr	r0, [sp, #12]
    85cc:	f7fd fd62 	bl	6094 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    85d0:	e012      	b.n	85f8 <Ftm_Pwm_Ip_SetChannelDeadTime+0x6c>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
    85d2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    85d6:	b2db      	uxtb	r3, r3
    85d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    85dc:	b2db      	uxtb	r3, r3
    85de:	4619      	mov	r1, r3
    85e0:	9803      	ldr	r0, [sp, #12]
    85e2:	f7fd fd33 	bl	604c <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
    85e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    85ea:	099b      	lsrs	r3, r3, #6
    85ec:	b29b      	uxth	r3, r3
    85ee:	b2db      	uxtb	r3, r3
    85f0:	4619      	mov	r1, r3
    85f2:	9803      	ldr	r0, [sp, #12]
    85f4:	f7fd fd4e 	bl	6094 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
    85f8:	f002 f93c 	bl	a874 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
    85fc:	bf00      	nop
    85fe:	b005      	add	sp, #20
    8600:	f85d fb04 	ldr.w	pc, [sp], #4
    8604:	0000bde4 	.word	0x0000bde4

00008608 <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
    8608:	b082      	sub	sp, #8
    860a:	9001      	str	r0, [sp, #4]
    860c:	460b      	mov	r3, r1
    860e:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
    8612:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
    8616:	4618      	mov	r0, r3
    8618:	b002      	add	sp, #8
    861a:	4770      	bx	lr

0000861c <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
    861c:	b510      	push	{r4, lr}
    861e:	b084      	sub	sp, #16
    8620:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    8622:	2300      	movs	r3, #0
    8624:	9302      	str	r3, [sp, #8]
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
    8626:	493e      	ldr	r1, [pc, #248]	; (8720 <Pwm_Init+0x104>)
    8628:	9a02      	ldr	r2, [sp, #8]
    862a:	4613      	mov	r3, r2
    862c:	009b      	lsls	r3, r3, #2
    862e:	4413      	add	r3, r2
    8630:	009b      	lsls	r3, r3, #2
    8632:	440b      	add	r3, r1
    8634:	9a01      	ldr	r2, [sp, #4]
    8636:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    8638:	2300      	movs	r3, #0
    863a:	f88d 300f 	strb.w	r3, [sp, #15]
    863e:	e017      	b.n	8670 <Pwm_Init+0x54>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
    8640:	4937      	ldr	r1, [pc, #220]	; (8720 <Pwm_Init+0x104>)
    8642:	9a02      	ldr	r2, [sp, #8]
    8644:	4613      	mov	r3, r2
    8646:	009b      	lsls	r3, r3, #2
    8648:	4413      	add	r3, r2
    864a:	009b      	lsls	r3, r3, #2
    864c:	440b      	add	r3, r1
    864e:	681b      	ldr	r3, [r3, #0]
    8650:	68d9      	ldr	r1, [r3, #12]
    8652:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8656:	4613      	mov	r3, r2
    8658:	005b      	lsls	r3, r3, #1
    865a:	4413      	add	r3, r2
    865c:	009b      	lsls	r3, r3, #2
    865e:	440b      	add	r3, r1
    8660:	4618      	mov	r0, r3
    8662:	f000 f997 	bl	8994 <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    8666:	f89d 300f 	ldrb.w	r3, [sp, #15]
    866a:	3301      	adds	r3, #1
    866c:	f88d 300f 	strb.w	r3, [sp, #15]
    8670:	492b      	ldr	r1, [pc, #172]	; (8720 <Pwm_Init+0x104>)
    8672:	9a02      	ldr	r2, [sp, #8]
    8674:	4613      	mov	r3, r2
    8676:	009b      	lsls	r3, r3, #2
    8678:	4413      	add	r3, r2
    867a:	009b      	lsls	r3, r3, #2
    867c:	440b      	add	r3, r1
    867e:	681b      	ldr	r3, [r3, #0]
    8680:	7a1b      	ldrb	r3, [r3, #8]
    8682:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8686:	429a      	cmp	r2, r3
    8688:	d3da      	bcc.n	8640 <Pwm_Init+0x24>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    868a:	2300      	movs	r3, #0
    868c:	f88d 300f 	strb.w	r3, [sp, #15]
    8690:	e034      	b.n	86fc <Pwm_Init+0xe0>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
    8692:	4923      	ldr	r1, [pc, #140]	; (8720 <Pwm_Init+0x104>)
    8694:	9a02      	ldr	r2, [sp, #8]
    8696:	4613      	mov	r3, r2
    8698:	009b      	lsls	r3, r3, #2
    869a:	4413      	add	r3, r2
    869c:	009b      	lsls	r3, r3, #2
    869e:	440b      	add	r3, r1
    86a0:	681b      	ldr	r3, [r3, #0]
    86a2:	6859      	ldr	r1, [r3, #4]
    86a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    86a8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    86ac:	4613      	mov	r3, r2
    86ae:	005b      	lsls	r3, r3, #1
    86b0:	4413      	add	r3, r2
    86b2:	00db      	lsls	r3, r3, #3
    86b4:	4419      	add	r1, r3
    86b6:	4c1a      	ldr	r4, [pc, #104]	; (8720 <Pwm_Init+0x104>)
    86b8:	9a02      	ldr	r2, [sp, #8]
    86ba:	4613      	mov	r3, r2
    86bc:	009b      	lsls	r3, r3, #2
    86be:	4413      	add	r3, r2
    86c0:	4403      	add	r3, r0
    86c2:	3302      	adds	r3, #2
    86c4:	009b      	lsls	r3, r3, #2
    86c6:	4423      	add	r3, r4
    86c8:	6059      	str	r1, [r3, #4]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
    86ca:	4915      	ldr	r1, [pc, #84]	; (8720 <Pwm_Init+0x104>)
    86cc:	9a02      	ldr	r2, [sp, #8]
    86ce:	4613      	mov	r3, r2
    86d0:	009b      	lsls	r3, r3, #2
    86d2:	4413      	add	r3, r2
    86d4:	009b      	lsls	r3, r3, #2
    86d6:	440b      	add	r3, r1
    86d8:	681b      	ldr	r3, [r3, #0]
    86da:	6859      	ldr	r1, [r3, #4]
    86dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    86e0:	4613      	mov	r3, r2
    86e2:	005b      	lsls	r3, r3, #1
    86e4:	4413      	add	r3, r2
    86e6:	00db      	lsls	r3, r3, #3
    86e8:	3308      	adds	r3, #8
    86ea:	440b      	add	r3, r1
    86ec:	4618      	mov	r0, r3
    86ee:	f000 f92f 	bl	8950 <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    86f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    86f6:	3301      	adds	r3, #1
    86f8:	f88d 300f 	strb.w	r3, [sp, #15]
    86fc:	4908      	ldr	r1, [pc, #32]	; (8720 <Pwm_Init+0x104>)
    86fe:	9a02      	ldr	r2, [sp, #8]
    8700:	4613      	mov	r3, r2
    8702:	009b      	lsls	r3, r3, #2
    8704:	4413      	add	r3, r2
    8706:	009b      	lsls	r3, r3, #2
    8708:	440b      	add	r3, r1
    870a:	681b      	ldr	r3, [r3, #0]
    870c:	781b      	ldrb	r3, [r3, #0]
    870e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8712:	429a      	cmp	r2, r3
    8714:	d3bd      	bcc.n	8692 <Pwm_Init+0x76>
#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
#endif
}
    8716:	bf00      	nop
    8718:	bf00      	nop
    871a:	b004      	add	sp, #16
    871c:	bd10      	pop	{r4, pc}
    871e:	bf00      	nop
    8720:	1fff8b24 	.word	0x1fff8b24

00008724 <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
    8724:	b500      	push	{lr}
    8726:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    8728:	2300      	movs	r3, #0
    872a:	9302      	str	r3, [sp, #8]
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    872c:	2300      	movs	r3, #0
    872e:	f88d 300f 	strb.w	r3, [sp, #15]
    8732:	e02a      	b.n	878a <Pwm_DeInit+0x66>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
    8734:	4945      	ldr	r1, [pc, #276]	; (884c <Pwm_DeInit+0x128>)
    8736:	9a02      	ldr	r2, [sp, #8]
    8738:	4613      	mov	r3, r2
    873a:	009b      	lsls	r3, r3, #2
    873c:	4413      	add	r3, r2
    873e:	009b      	lsls	r3, r3, #2
    8740:	440b      	add	r3, r1
    8742:	330c      	adds	r3, #12
    8744:	6819      	ldr	r1, [r3, #0]
    8746:	f89d 200f 	ldrb.w	r2, [sp, #15]
    874a:	4613      	mov	r3, r2
    874c:	005b      	lsls	r3, r3, #1
    874e:	4413      	add	r3, r2
    8750:	00db      	lsls	r3, r3, #3
    8752:	440b      	add	r3, r1
    8754:	f103 0008 	add.w	r0, r3, #8
    8758:	493c      	ldr	r1, [pc, #240]	; (884c <Pwm_DeInit+0x128>)
    875a:	9a02      	ldr	r2, [sp, #8]
    875c:	4613      	mov	r3, r2
    875e:	009b      	lsls	r3, r3, #2
    8760:	4413      	add	r3, r2
    8762:	009b      	lsls	r3, r3, #2
    8764:	440b      	add	r3, r1
    8766:	330c      	adds	r3, #12
    8768:	6819      	ldr	r1, [r3, #0]
    876a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    876e:	4613      	mov	r3, r2
    8770:	005b      	lsls	r3, r3, #1
    8772:	4413      	add	r3, r2
    8774:	00db      	lsls	r3, r3, #3
    8776:	440b      	add	r3, r1
    8778:	695b      	ldr	r3, [r3, #20]
    877a:	4619      	mov	r1, r3
    877c:	f000 f960 	bl	8a40 <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    8780:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8784:	3301      	adds	r3, #1
    8786:	f88d 300f 	strb.w	r3, [sp, #15]
    878a:	4930      	ldr	r1, [pc, #192]	; (884c <Pwm_DeInit+0x128>)
    878c:	9a02      	ldr	r2, [sp, #8]
    878e:	4613      	mov	r3, r2
    8790:	009b      	lsls	r3, r3, #2
    8792:	4413      	add	r3, r2
    8794:	009b      	lsls	r3, r3, #2
    8796:	440b      	add	r3, r1
    8798:	681b      	ldr	r3, [r3, #0]
    879a:	781b      	ldrb	r3, [r3, #0]
    879c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    87a0:	429a      	cmp	r2, r3
    87a2:	d3c7      	bcc.n	8734 <Pwm_DeInit+0x10>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
    87a4:	4929      	ldr	r1, [pc, #164]	; (884c <Pwm_DeInit+0x128>)
    87a6:	9a02      	ldr	r2, [sp, #8]
    87a8:	4613      	mov	r3, r2
    87aa:	009b      	lsls	r3, r3, #2
    87ac:	4413      	add	r3, r2
    87ae:	009b      	lsls	r3, r3, #2
    87b0:	440b      	add	r3, r1
    87b2:	681b      	ldr	r3, [r3, #0]
    87b4:	9301      	str	r3, [sp, #4]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    87b6:	2300      	movs	r3, #0
    87b8:	f88d 300f 	strb.w	r3, [sp, #15]
    87bc:	e010      	b.n	87e0 <Pwm_DeInit+0xbc>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
    87be:	9b01      	ldr	r3, [sp, #4]
    87c0:	68d9      	ldr	r1, [r3, #12]
    87c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    87c6:	4613      	mov	r3, r2
    87c8:	005b      	lsls	r3, r3, #1
    87ca:	4413      	add	r3, r2
    87cc:	009b      	lsls	r3, r3, #2
    87ce:	440b      	add	r3, r1
    87d0:	4618      	mov	r0, r3
    87d2:	f000 f955 	bl	8a80 <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    87d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    87da:	3301      	adds	r3, #1
    87dc:	f88d 300f 	strb.w	r3, [sp, #15]
    87e0:	491a      	ldr	r1, [pc, #104]	; (884c <Pwm_DeInit+0x128>)
    87e2:	9a02      	ldr	r2, [sp, #8]
    87e4:	4613      	mov	r3, r2
    87e6:	009b      	lsls	r3, r3, #2
    87e8:	4413      	add	r3, r2
    87ea:	009b      	lsls	r3, r3, #2
    87ec:	440b      	add	r3, r1
    87ee:	681b      	ldr	r3, [r3, #0]
    87f0:	7a1b      	ldrb	r3, [r3, #8]
    87f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    87f6:	429a      	cmp	r2, r3
    87f8:	d3e1      	bcc.n	87be <Pwm_DeInit+0x9a>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
    87fa:	4914      	ldr	r1, [pc, #80]	; (884c <Pwm_DeInit+0x128>)
    87fc:	9a02      	ldr	r2, [sp, #8]
    87fe:	4613      	mov	r3, r2
    8800:	009b      	lsls	r3, r3, #2
    8802:	4413      	add	r3, r2
    8804:	009b      	lsls	r3, r3, #2
    8806:	440b      	add	r3, r1
    8808:	2200      	movs	r2, #0
    880a:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    880c:	2300      	movs	r3, #0
    880e:	f88d 300f 	strb.w	r3, [sp, #15]
    8812:	e011      	b.n	8838 <Pwm_DeInit+0x114>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
    8814:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8818:	480c      	ldr	r0, [pc, #48]	; (884c <Pwm_DeInit+0x128>)
    881a:	9a02      	ldr	r2, [sp, #8]
    881c:	4613      	mov	r3, r2
    881e:	009b      	lsls	r3, r3, #2
    8820:	4413      	add	r3, r2
    8822:	440b      	add	r3, r1
    8824:	3302      	adds	r3, #2
    8826:	009b      	lsls	r3, r3, #2
    8828:	4403      	add	r3, r0
    882a:	2200      	movs	r2, #0
    882c:	605a      	str	r2, [r3, #4]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    882e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8832:	3301      	adds	r3, #1
    8834:	f88d 300f 	strb.w	r3, [sp, #15]
    8838:	f89d 300f 	ldrb.w	r3, [sp, #15]
    883c:	2b00      	cmp	r3, #0
    883e:	d0e9      	beq.n	8814 <Pwm_DeInit+0xf0>
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
#endif

}
    8840:	bf00      	nop
    8842:	bf00      	nop
    8844:	b005      	add	sp, #20
    8846:	f85d fb04 	ldr.w	pc, [sp], #4
    884a:	bf00      	nop
    884c:	1fff8b24 	.word	0x1fff8b24

00008850 <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
    8850:	b500      	push	{lr}
    8852:	b087      	sub	sp, #28
    8854:	4603      	mov	r3, r0
    8856:	460a      	mov	r2, r1
    8858:	f88d 3007 	strb.w	r3, [sp, #7]
    885c:	4613      	mov	r3, r2
    885e:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
    8862:	2300      	movs	r3, #0
    8864:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    8868:	2300      	movs	r3, #0
    886a:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    886c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8870:	4619      	mov	r1, r3
    8872:	9804      	ldr	r0, [sp, #16]
    8874:	f7ff fec8 	bl	8608 <Pwm_GetPartitionChannelIdx>
    8878:	4603      	mov	r3, r0
    887a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    887e:	490f      	ldr	r1, [pc, #60]	; (88bc <Pwm_SetDutyCycle+0x6c>)
    8880:	9a04      	ldr	r2, [sp, #16]
    8882:	4613      	mov	r3, r2
    8884:	009b      	lsls	r3, r3, #2
    8886:	4413      	add	r3, r2
    8888:	009b      	lsls	r3, r3, #2
    888a:	440b      	add	r3, r1
    888c:	330c      	adds	r3, #12
    888e:	6819      	ldr	r1, [r3, #0]
    8890:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8894:	4613      	mov	r3, r2
    8896:	005b      	lsls	r3, r3, #1
    8898:	4413      	add	r3, r2
    889a:	00db      	lsls	r3, r3, #3
    889c:	440b      	add	r3, r1
    889e:	f103 0208 	add.w	r2, r3, #8
    88a2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    88a6:	4611      	mov	r1, r2
    88a8:	4618      	mov	r0, r3
    88aa:	f000 f905 	bl	8ab8 <Pwm_Ipw_SetDutyCycle>
    88ae:	4603      	mov	r3, r0
    88b0:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    88b4:	bf00      	nop
    88b6:	b007      	add	sp, #28
    88b8:	f85d fb04 	ldr.w	pc, [sp], #4
    88bc:	1fff8b24 	.word	0x1fff8b24

000088c0 <Pwm_SetOutputToIdle>:
*
* @implements   Pwm_SetOutputToIdle_Activity
*
*/
void Pwm_SetOutputToIdle(Pwm_ChannelType ChannelNumber)
{
    88c0:	b500      	push	{lr}
    88c2:	b085      	sub	sp, #20
    88c4:	4603      	mov	r3, r0
    88c6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    88ca:	2300      	movs	r3, #0
    88cc:	9303      	str	r3, [sp, #12]
#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETOUTPUTTOIDLE_ID))
    {
#endif

        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    88ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88d2:	4619      	mov	r1, r3
    88d4:	9803      	ldr	r0, [sp, #12]
    88d6:	f7ff fe97 	bl	8608 <Pwm_GetPartitionChannelIdx>
    88da:	4603      	mov	r3, r0
    88dc:	f88d 300b 	strb.w	r3, [sp, #11]
        if((Std_ReturnType)E_OK == Pwm_ValidateSetOutPutToIdle(CoreId, PartitionChannelIdx))
        {
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

            /* All validations passed. Here starts the actual functional code of the function */
            Pwm_Ipw_SetOutputToIdle((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].ChannelIdleState, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    88e0:	491a      	ldr	r1, [pc, #104]	; (894c <Pwm_SetOutputToIdle+0x8c>)
    88e2:	9a03      	ldr	r2, [sp, #12]
    88e4:	4613      	mov	r3, r2
    88e6:	009b      	lsls	r3, r3, #2
    88e8:	4413      	add	r3, r2
    88ea:	009b      	lsls	r3, r3, #2
    88ec:	440b      	add	r3, r1
    88ee:	330c      	adds	r3, #12
    88f0:	6819      	ldr	r1, [r3, #0]
    88f2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    88f6:	4613      	mov	r3, r2
    88f8:	005b      	lsls	r3, r3, #1
    88fa:	4413      	add	r3, r2
    88fc:	00db      	lsls	r3, r3, #3
    88fe:	440b      	add	r3, r1
    8900:	6958      	ldr	r0, [r3, #20]
    8902:	4912      	ldr	r1, [pc, #72]	; (894c <Pwm_SetOutputToIdle+0x8c>)
    8904:	9a03      	ldr	r2, [sp, #12]
    8906:	4613      	mov	r3, r2
    8908:	009b      	lsls	r3, r3, #2
    890a:	4413      	add	r3, r2
    890c:	009b      	lsls	r3, r3, #2
    890e:	440b      	add	r3, r1
    8910:	330c      	adds	r3, #12
    8912:	6819      	ldr	r1, [r3, #0]
    8914:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8918:	4613      	mov	r3, r2
    891a:	005b      	lsls	r3, r3, #1
    891c:	4413      	add	r3, r2
    891e:	00db      	lsls	r3, r3, #3
    8920:	440b      	add	r3, r1
    8922:	3308      	adds	r3, #8
    8924:	4619      	mov	r1, r3
    8926:	f000 f913 	bl	8b50 <Pwm_Ipw_SetOutputToIdle>

            /* Mark the channel in idle output mode */
            Pwm_aState[CoreId].PwmChannelIdleState[PartitionChannelIdx] = TRUE;
    892a:	f89d 100b 	ldrb.w	r1, [sp, #11]
    892e:	4807      	ldr	r0, [pc, #28]	; (894c <Pwm_SetOutputToIdle+0x8c>)
    8930:	9a03      	ldr	r2, [sp, #12]
    8932:	4613      	mov	r3, r2
    8934:	009b      	lsls	r3, r3, #2
    8936:	4413      	add	r3, r2
    8938:	009b      	lsls	r3, r3, #2
    893a:	4403      	add	r3, r0
    893c:	440b      	add	r3, r1
    893e:	3310      	adds	r3, #16
    8940:	2201      	movs	r2, #1
    8942:	701a      	strb	r2, [r3, #0]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    8944:	bf00      	nop
    8946:	b005      	add	sp, #20
    8948:	f85d fb04 	ldr.w	pc, [sp], #4
    894c:	1fff8b24 	.word	0x1fff8b24

00008950 <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
    8950:	b410      	push	{r4}
    8952:	b083      	sub	sp, #12
    8954:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
    8956:	9b01      	ldr	r3, [sp, #4]
    8958:	681b      	ldr	r3, [r3, #0]
    895a:	2b00      	cmp	r3, #0
    895c:	d010      	beq.n	8980 <Pwm_Ipw_Init+0x30>
    895e:	2b01      	cmp	r3, #1
    8960:	d110      	bne.n	8984 <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
    8962:	9b01      	ldr	r3, [sp, #4]
    8964:	7a1b      	ldrb	r3, [r3, #8]
    8966:	461c      	mov	r4, r3
    8968:	9b01      	ldr	r3, [sp, #4]
    896a:	685b      	ldr	r3, [r3, #4]
    896c:	781b      	ldrb	r3, [r3, #0]
    896e:	4618      	mov	r0, r3
    8970:	9b01      	ldr	r3, [sp, #4]
    8972:	8959      	ldrh	r1, [r3, #10]
    8974:	4a06      	ldr	r2, [pc, #24]	; (8990 <Pwm_Ipw_Init+0x40>)
    8976:	00e3      	lsls	r3, r4, #3
    8978:	4403      	add	r3, r0
    897a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    897e:	e002      	b.n	8986 <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    8980:	bf00      	nop
    8982:	e000      	b.n	8986 <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
    8984:	bf00      	nop
    }
}
    8986:	bf00      	nop
    8988:	b003      	add	sp, #12
    898a:	f85d 4b04 	ldr.w	r4, [sp], #4
    898e:	4770      	bx	lr
    8990:	1fff90a4 	.word	0x1fff90a4

00008994 <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    8994:	b500      	push	{lr}
    8996:	b085      	sub	sp, #20
    8998:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
    899a:	2300      	movs	r3, #0
    899c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
    89a0:	2300      	movs	r3, #0
    89a2:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
    89a6:	9b01      	ldr	r3, [sp, #4]
    89a8:	685b      	ldr	r3, [r3, #4]
    89aa:	2b00      	cmp	r3, #0
    89ac:	d03c      	beq.n	8a28 <Pwm_Ipw_InitInstance+0x94>
    89ae:	2b01      	cmp	r3, #1
    89b0:	d13c      	bne.n	8a2c <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    89b2:	9b01      	ldr	r3, [sp, #4]
    89b4:	689b      	ldr	r3, [r3, #8]
    89b6:	2b00      	cmp	r3, #0
    89b8:	d03a      	beq.n	8a30 <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
    89ba:	9b01      	ldr	r3, [sp, #4]
    89bc:	781a      	ldrb	r2, [r3, #0]
    89be:	9b01      	ldr	r3, [sp, #4]
    89c0:	689b      	ldr	r3, [r3, #8]
    89c2:	4619      	mov	r1, r3
    89c4:	4610      	mov	r0, r2
    89c6:	f7fe fec5 	bl	7754 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    89ca:	2300      	movs	r3, #0
    89cc:	f88d 300f 	strb.w	r3, [sp, #15]
    89d0:	e022      	b.n	8a18 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
    89d2:	9b01      	ldr	r3, [sp, #4]
    89d4:	689b      	ldr	r3, [r3, #8]
    89d6:	685a      	ldr	r2, [r3, #4]
    89d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    89dc:	009b      	lsls	r3, r3, #2
    89de:	4413      	add	r3, r2
    89e0:	681b      	ldr	r3, [r3, #0]
    89e2:	781b      	ldrb	r3, [r3, #0]
    89e4:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
    89e8:	9b01      	ldr	r3, [sp, #4]
    89ea:	689b      	ldr	r3, [r3, #8]
    89ec:	685a      	ldr	r2, [r3, #4]
    89ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    89f2:	009b      	lsls	r3, r3, #2
    89f4:	4413      	add	r3, r2
    89f6:	681a      	ldr	r2, [r3, #0]
    89f8:	9b01      	ldr	r3, [sp, #4]
    89fa:	781b      	ldrb	r3, [r3, #0]
    89fc:	4619      	mov	r1, r3
    89fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a02:	6a12      	ldr	r2, [r2, #32]
    8a04:	480d      	ldr	r0, [pc, #52]	; (8a3c <Pwm_Ipw_InitInstance+0xa8>)
    8a06:	00c9      	lsls	r1, r1, #3
    8a08:	440b      	add	r3, r1
    8a0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    8a0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a12:	3301      	adds	r3, #1
    8a14:	f88d 300f 	strb.w	r3, [sp, #15]
    8a18:	9b01      	ldr	r3, [sp, #4]
    8a1a:	689b      	ldr	r3, [r3, #8]
    8a1c:	7a1b      	ldrb	r3, [r3, #8]
    8a1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8a22:	429a      	cmp	r2, r3
    8a24:	d3d5      	bcc.n	89d2 <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
    8a26:	e003      	b.n	8a30 <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    8a28:	bf00      	nop
    8a2a:	e002      	b.n	8a32 <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
    8a2c:	bf00      	nop
    8a2e:	e000      	b.n	8a32 <Pwm_Ipw_InitInstance+0x9e>
            break;
    8a30:	bf00      	nop
    }
}
    8a32:	bf00      	nop
    8a34:	b005      	add	sp, #20
    8a36:	f85d fb04 	ldr.w	pc, [sp], #4
    8a3a:	bf00      	nop
    8a3c:	1fff9024 	.word	0x1fff9024

00008a40 <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
    8a40:	b082      	sub	sp, #8
    8a42:	9001      	str	r0, [sp, #4]
    8a44:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
    8a46:	9b01      	ldr	r3, [sp, #4]
    8a48:	681b      	ldr	r3, [r3, #0]
    8a4a:	2b00      	cmp	r3, #0
    8a4c:	d00f      	beq.n	8a6e <Pwm_Ipw_DeInit+0x2e>
    8a4e:	2b01      	cmp	r3, #1
    8a50:	d10f      	bne.n	8a72 <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    8a52:	9b01      	ldr	r3, [sp, #4]
    8a54:	7a1b      	ldrb	r3, [r3, #8]
    8a56:	4618      	mov	r0, r3
    8a58:	9b01      	ldr	r3, [sp, #4]
    8a5a:	685b      	ldr	r3, [r3, #4]
    8a5c:	781b      	ldrb	r3, [r3, #0]
    8a5e:	4619      	mov	r1, r3
    8a60:	4a06      	ldr	r2, [pc, #24]	; (8a7c <Pwm_Ipw_DeInit+0x3c>)
    8a62:	00c3      	lsls	r3, r0, #3
    8a64:	440b      	add	r3, r1
    8a66:	2100      	movs	r1, #0
    8a68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    8a6c:	e002      	b.n	8a74 <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    8a6e:	bf00      	nop
    8a70:	e000      	b.n	8a74 <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
    8a72:	bf00      	nop
    }
    (void) ChannelIdleState;

}
    8a74:	bf00      	nop
    8a76:	b002      	add	sp, #8
    8a78:	4770      	bx	lr
    8a7a:	bf00      	nop
    8a7c:	1fff90a4 	.word	0x1fff90a4

00008a80 <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    8a80:	b500      	push	{lr}
    8a82:	b083      	sub	sp, #12
    8a84:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
    8a86:	9b01      	ldr	r3, [sp, #4]
    8a88:	685b      	ldr	r3, [r3, #4]
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	d00b      	beq.n	8aa6 <Pwm_Ipw_DeInitInstance+0x26>
    8a8e:	2b01      	cmp	r3, #1
    8a90:	d10b      	bne.n	8aaa <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    8a92:	9b01      	ldr	r3, [sp, #4]
    8a94:	689b      	ldr	r3, [r3, #8]
    8a96:	2b00      	cmp	r3, #0
    8a98:	d009      	beq.n	8aae <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
    8a9a:	9b01      	ldr	r3, [sp, #4]
    8a9c:	781b      	ldrb	r3, [r3, #0]
    8a9e:	4618      	mov	r0, r3
    8aa0:	f7fe feb6 	bl	7810 <Ftm_Pwm_Ip_DeInit>
            }
            break;
    8aa4:	e003      	b.n	8aae <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    8aa6:	bf00      	nop
    8aa8:	e002      	b.n	8ab0 <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
    8aaa:	bf00      	nop
    8aac:	e000      	b.n	8ab0 <Pwm_Ipw_DeInitInstance+0x30>
            break;
    8aae:	bf00      	nop
    }
}
    8ab0:	bf00      	nop
    8ab2:	b003      	add	sp, #12
    8ab4:	f85d fb04 	ldr.w	pc, [sp], #4

00008ab8 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
    8ab8:	b500      	push	{lr}
    8aba:	b085      	sub	sp, #20
    8abc:	4603      	mov	r3, r0
    8abe:	9100      	str	r1, [sp, #0]
    8ac0:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
    8ac4:	2300      	movs	r3, #0
    8ac6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    8aca:	2300      	movs	r3, #0
    8acc:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
    8ad0:	9b00      	ldr	r3, [sp, #0]
    8ad2:	681b      	ldr	r3, [r3, #0]
    8ad4:	2b00      	cmp	r3, #0
    8ad6:	d02c      	beq.n	8b32 <Pwm_Ipw_SetDutyCycle+0x7a>
    8ad8:	2b01      	cmp	r3, #1
    8ada:	d12c      	bne.n	8b36 <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    8adc:	9b00      	ldr	r3, [sp, #0]
    8ade:	685b      	ldr	r3, [r3, #4]
    8ae0:	2b00      	cmp	r3, #0
    8ae2:	d02a      	beq.n	8b3a <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
    8ae4:	9b00      	ldr	r3, [sp, #0]
    8ae6:	7a1b      	ldrb	r3, [r3, #8]
    8ae8:	461a      	mov	r2, r3
    8aea:	4b17      	ldr	r3, [pc, #92]	; (8b48 <Pwm_Ipw_SetDutyCycle+0x90>)
    8aec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    8af0:	461a      	mov	r2, r3
    8af2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8af6:	fb02 f303 	mul.w	r3, r2, r3
    8afa:	0bdb      	lsrs	r3, r3, #15
    8afc:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    8b00:	9b00      	ldr	r3, [sp, #0]
    8b02:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    8b04:	9b00      	ldr	r3, [sp, #0]
    8b06:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    8b08:	7819      	ldrb	r1, [r3, #0]
    8b0a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    8b0e:	2301      	movs	r3, #1
    8b10:	f7fe fec6 	bl	78a0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    8b14:	9b00      	ldr	r3, [sp, #0]
    8b16:	7a1b      	ldrb	r3, [r3, #8]
    8b18:	4618      	mov	r0, r3
    8b1a:	9b00      	ldr	r3, [sp, #0]
    8b1c:	685b      	ldr	r3, [r3, #4]
    8b1e:	781b      	ldrb	r3, [r3, #0]
    8b20:	461a      	mov	r2, r3
    8b22:	490a      	ldr	r1, [pc, #40]	; (8b4c <Pwm_Ipw_SetDutyCycle+0x94>)
    8b24:	00c3      	lsls	r3, r0, #3
    8b26:	4413      	add	r3, r2
    8b28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8b2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    8b30:	e003      	b.n	8b3a <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    8b32:	bf00      	nop
    8b34:	e002      	b.n	8b3c <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
    8b36:	bf00      	nop
    8b38:	e000      	b.n	8b3c <Pwm_Ipw_SetDutyCycle+0x84>
            break;
    8b3a:	bf00      	nop
    }

    return RetVal;
    8b3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8b40:	4618      	mov	r0, r3
    8b42:	b005      	add	sp, #20
    8b44:	f85d fb04 	ldr.w	pc, [sp], #4
    8b48:	1fff8cfc 	.word	0x1fff8cfc
    8b4c:	1fff90a4 	.word	0x1fff90a4

00008b50 <Pwm_Ipw_SetOutputToIdle>:
*
* @return       void
*
*/
void Pwm_Ipw_SetOutputToIdle(const Pwm_OutputStateType IdleState, const Pwm_IpwChannelConfigType * const IpConfig)
{
    8b50:	b500      	push	{lr}
    8b52:	b085      	sub	sp, #20
    8b54:	9001      	str	r0, [sp, #4]
    8b56:	9100      	str	r1, [sp, #0]
#if (PWM_FTM_USED == STD_ON)
    uint8 Instance  =  IpConfig->ChannelInstanceId;
    8b58:	9b00      	ldr	r3, [sp, #0]
    8b5a:	7a1b      	ldrb	r3, [r3, #8]
    8b5c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Channel   =  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId;
    8b60:	9b00      	ldr	r3, [sp, #0]
    8b62:	685b      	ldr	r3, [r3, #4]
    8b64:	781b      	ldrb	r3, [r3, #0]
    8b66:	f88d 300e 	strb.w	r3, [sp, #14]
#endif

    switch(IpConfig->ChannelType)
    8b6a:	9b00      	ldr	r3, [sp, #0]
    8b6c:	681b      	ldr	r3, [r3, #0]
    8b6e:	2b00      	cmp	r3, #0
    8b70:	d02e      	beq.n	8bd0 <Pwm_Ipw_SetOutputToIdle+0x80>
    8b72:	2b01      	cmp	r3, #1
    8b74:	d12e      	bne.n	8bd4 <Pwm_Ipw_SetOutputToIdle+0x84>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if ((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    8b76:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8b7a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8b7e:	4919      	ldr	r1, [pc, #100]	; (8be4 <Pwm_Ipw_SetOutputToIdle+0x94>)
    8b80:	00d2      	lsls	r2, r2, #3
    8b82:	4413      	add	r3, r2
    8b84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8b88:	2b01      	cmp	r3, #1
    8b8a:	d125      	bne.n	8bd8 <Pwm_Ipw_SetOutputToIdle+0x88>
            {
                /* update new state of channel */
                Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE;
    8b8c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8b90:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8b94:	4913      	ldr	r1, [pc, #76]	; (8be4 <Pwm_Ipw_SetOutputToIdle+0x94>)
    8b96:	00d2      	lsls	r2, r2, #3
    8b98:	4413      	add	r3, r2
    8b9a:	2202      	movs	r2, #2
    8b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                
                Ftm_Pwm_Ip_SwOutputControl(Instance,
                                           Channel,
                                           ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->InitOut,
    8ba0:	9b00      	ldr	r3, [sp, #0]
    8ba2:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_SwOutputControl(Instance,
    8ba4:	69da      	ldr	r2, [r3, #28]
    8ba6:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8baa:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8bae:	2301      	movs	r3, #1
    8bb0:	f7fe ffac 	bl	7b0c <Ftm_Pwm_Ip_SwOutputControl>
                                           TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    8bb4:	9b00      	ldr	r3, [sp, #0]
    8bb6:	7a1b      	ldrb	r3, [r3, #8]
    8bb8:	4618      	mov	r0, r3
    8bba:	9b00      	ldr	r3, [sp, #0]
    8bbc:	685b      	ldr	r3, [r3, #4]
    8bbe:	781b      	ldrb	r3, [r3, #0]
    8bc0:	4619      	mov	r1, r3
    8bc2:	4a09      	ldr	r2, [pc, #36]	; (8be8 <Pwm_Ipw_SetOutputToIdle+0x98>)
    8bc4:	00c3      	lsls	r3, r0, #3
    8bc6:	440b      	add	r3, r1
    8bc8:	2100      	movs	r1, #0
    8bca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            else
            {
                /* Do Nothing */
            }
            break;
    8bce:	e003      	b.n	8bd8 <Pwm_Ipw_SetOutputToIdle+0x88>
            /* Nothing to do. this feature is not supported for Flexio */
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    8bd0:	bf00      	nop
    8bd2:	e002      	b.n	8bda <Pwm_Ipw_SetOutputToIdle+0x8a>
        default:
            /* Nothing to do. */
            break;
    8bd4:	bf00      	nop
    8bd6:	e000      	b.n	8bda <Pwm_Ipw_SetOutputToIdle+0x8a>
            break;
    8bd8:	bf00      	nop
    }

    (void) IdleState;

}
    8bda:	bf00      	nop
    8bdc:	b005      	add	sp, #20
    8bde:	f85d fb04 	ldr.w	pc, [sp], #4
    8be2:	bf00      	nop
    8be4:	1fff8ed4 	.word	0x1fff8ed4
    8be8:	1fff90a4 	.word	0x1fff90a4

00008bec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    8bec:	b500      	push	{lr}
    8bee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8bf0:	f7f7 ffa8 	bl	b44 <Sys_GetCoreID>
    8bf4:	4603      	mov	r3, r0
    8bf6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    8bf8:	4a10      	ldr	r2, [pc, #64]	; (8c3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8bfa:	9b01      	ldr	r3, [sp, #4]
    8bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c00:	2b00      	cmp	r3, #0
    8c02:	d10d      	bne.n	8c20 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8c04:	f7f7 febc 	bl	980 <Mcu_schm_read_msr>
    8c08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8c0a:	9b00      	ldr	r3, [sp, #0]
    8c0c:	f003 0301 	and.w	r3, r3, #1
    8c10:	2b00      	cmp	r3, #0
    8c12:	d100      	bne.n	8c16 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8c14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    8c16:	490a      	ldr	r1, [pc, #40]	; (8c40 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    8c18:	9b01      	ldr	r3, [sp, #4]
    8c1a:	9a00      	ldr	r2, [sp, #0]
    8c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    8c20:	4a06      	ldr	r2, [pc, #24]	; (8c3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8c22:	9b01      	ldr	r3, [sp, #4]
    8c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c28:	1c5a      	adds	r2, r3, #1
    8c2a:	4904      	ldr	r1, [pc, #16]	; (8c3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8c2c:	9b01      	ldr	r3, [sp, #4]
    8c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8c32:	bf00      	nop
    8c34:	b003      	add	sp, #12
    8c36:	f85d fb04 	ldr.w	pc, [sp], #4
    8c3a:	bf00      	nop
    8c3c:	1fff90e8 	.word	0x1fff90e8
    8c40:	1fff90e4 	.word	0x1fff90e4

00008c44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    8c44:	b500      	push	{lr}
    8c46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c48:	f7f7 ff7c 	bl	b44 <Sys_GetCoreID>
    8c4c:	4603      	mov	r3, r0
    8c4e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    8c50:	4a0d      	ldr	r2, [pc, #52]	; (8c88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    8c52:	9b01      	ldr	r3, [sp, #4]
    8c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c58:	1e5a      	subs	r2, r3, #1
    8c5a:	490b      	ldr	r1, [pc, #44]	; (8c88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    8c5c:	9b01      	ldr	r3, [sp, #4]
    8c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    8c62:	4a0a      	ldr	r2, [pc, #40]	; (8c8c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    8c64:	9b01      	ldr	r3, [sp, #4]
    8c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c6a:	f003 0301 	and.w	r3, r3, #1
    8c6e:	2b00      	cmp	r3, #0
    8c70:	d106      	bne.n	8c80 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    8c72:	4a05      	ldr	r2, [pc, #20]	; (8c88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    8c74:	9b01      	ldr	r3, [sp, #4]
    8c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c7a:	2b00      	cmp	r3, #0
    8c7c:	d100      	bne.n	8c80 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8c7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8c80:	bf00      	nop
    8c82:	b003      	add	sp, #12
    8c84:	f85d fb04 	ldr.w	pc, [sp], #4
    8c88:	1fff90e8 	.word	0x1fff90e8
    8c8c:	1fff90e4 	.word	0x1fff90e4

00008c90 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    8c90:	b500      	push	{lr}
    8c92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c94:	f7f7 ff56 	bl	b44 <Sys_GetCoreID>
    8c98:	4603      	mov	r3, r0
    8c9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    8c9c:	4a10      	ldr	r2, [pc, #64]	; (8ce0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8c9e:	9b01      	ldr	r3, [sp, #4]
    8ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ca4:	2b00      	cmp	r3, #0
    8ca6:	d10d      	bne.n	8cc4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8ca8:	f7f7 fe6a 	bl	980 <Mcu_schm_read_msr>
    8cac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8cae:	9b00      	ldr	r3, [sp, #0]
    8cb0:	f003 0301 	and.w	r3, r3, #1
    8cb4:	2b00      	cmp	r3, #0
    8cb6:	d100      	bne.n	8cba <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8cb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    8cba:	490a      	ldr	r1, [pc, #40]	; (8ce4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    8cbc:	9b01      	ldr	r3, [sp, #4]
    8cbe:	9a00      	ldr	r2, [sp, #0]
    8cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    8cc4:	4a06      	ldr	r2, [pc, #24]	; (8ce0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8cc6:	9b01      	ldr	r3, [sp, #4]
    8cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ccc:	1c5a      	adds	r2, r3, #1
    8cce:	4904      	ldr	r1, [pc, #16]	; (8ce0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8cd0:	9b01      	ldr	r3, [sp, #4]
    8cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8cd6:	bf00      	nop
    8cd8:	b003      	add	sp, #12
    8cda:	f85d fb04 	ldr.w	pc, [sp], #4
    8cde:	bf00      	nop
    8ce0:	1fff90f0 	.word	0x1fff90f0
    8ce4:	1fff90ec 	.word	0x1fff90ec

00008ce8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    8ce8:	b500      	push	{lr}
    8cea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8cec:	f7f7 ff2a 	bl	b44 <Sys_GetCoreID>
    8cf0:	4603      	mov	r3, r0
    8cf2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    8cf4:	4a0d      	ldr	r2, [pc, #52]	; (8d2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8cf6:	9b01      	ldr	r3, [sp, #4]
    8cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cfc:	1e5a      	subs	r2, r3, #1
    8cfe:	490b      	ldr	r1, [pc, #44]	; (8d2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8d00:	9b01      	ldr	r3, [sp, #4]
    8d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    8d06:	4a0a      	ldr	r2, [pc, #40]	; (8d30 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    8d08:	9b01      	ldr	r3, [sp, #4]
    8d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d0e:	f003 0301 	and.w	r3, r3, #1
    8d12:	2b00      	cmp	r3, #0
    8d14:	d106      	bne.n	8d24 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    8d16:	4a05      	ldr	r2, [pc, #20]	; (8d2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8d18:	9b01      	ldr	r3, [sp, #4]
    8d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d1e:	2b00      	cmp	r3, #0
    8d20:	d100      	bne.n	8d24 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8d22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8d24:	bf00      	nop
    8d26:	b003      	add	sp, #12
    8d28:	f85d fb04 	ldr.w	pc, [sp], #4
    8d2c:	1fff90f0 	.word	0x1fff90f0
    8d30:	1fff90ec 	.word	0x1fff90ec

00008d34 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    8d34:	b500      	push	{lr}
    8d36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d38:	f7f7 ff04 	bl	b44 <Sys_GetCoreID>
    8d3c:	4603      	mov	r3, r0
    8d3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    8d40:	4a10      	ldr	r2, [pc, #64]	; (8d84 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8d42:	9b01      	ldr	r3, [sp, #4]
    8d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d48:	2b00      	cmp	r3, #0
    8d4a:	d10d      	bne.n	8d68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8d4c:	f7f7 fe18 	bl	980 <Mcu_schm_read_msr>
    8d50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8d52:	9b00      	ldr	r3, [sp, #0]
    8d54:	f003 0301 	and.w	r3, r3, #1
    8d58:	2b00      	cmp	r3, #0
    8d5a:	d100      	bne.n	8d5e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8d5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    8d5e:	490a      	ldr	r1, [pc, #40]	; (8d88 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    8d60:	9b01      	ldr	r3, [sp, #4]
    8d62:	9a00      	ldr	r2, [sp, #0]
    8d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    8d68:	4a06      	ldr	r2, [pc, #24]	; (8d84 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8d6a:	9b01      	ldr	r3, [sp, #4]
    8d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d70:	1c5a      	adds	r2, r3, #1
    8d72:	4904      	ldr	r1, [pc, #16]	; (8d84 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8d74:	9b01      	ldr	r3, [sp, #4]
    8d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d7a:	bf00      	nop
    8d7c:	b003      	add	sp, #12
    8d7e:	f85d fb04 	ldr.w	pc, [sp], #4
    8d82:	bf00      	nop
    8d84:	1fff90f8 	.word	0x1fff90f8
    8d88:	1fff90f4 	.word	0x1fff90f4

00008d8c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    8d8c:	b500      	push	{lr}
    8d8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d90:	f7f7 fed8 	bl	b44 <Sys_GetCoreID>
    8d94:	4603      	mov	r3, r0
    8d96:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    8d98:	4a0d      	ldr	r2, [pc, #52]	; (8dd0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8d9a:	9b01      	ldr	r3, [sp, #4]
    8d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8da0:	1e5a      	subs	r2, r3, #1
    8da2:	490b      	ldr	r1, [pc, #44]	; (8dd0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8da4:	9b01      	ldr	r3, [sp, #4]
    8da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    8daa:	4a0a      	ldr	r2, [pc, #40]	; (8dd4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    8dac:	9b01      	ldr	r3, [sp, #4]
    8dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8db2:	f003 0301 	and.w	r3, r3, #1
    8db6:	2b00      	cmp	r3, #0
    8db8:	d106      	bne.n	8dc8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    8dba:	4a05      	ldr	r2, [pc, #20]	; (8dd0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8dbc:	9b01      	ldr	r3, [sp, #4]
    8dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dc2:	2b00      	cmp	r3, #0
    8dc4:	d100      	bne.n	8dc8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8dc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8dc8:	bf00      	nop
    8dca:	b003      	add	sp, #12
    8dcc:	f85d fb04 	ldr.w	pc, [sp], #4
    8dd0:	1fff90f8 	.word	0x1fff90f8
    8dd4:	1fff90f4 	.word	0x1fff90f4

00008dd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    8dd8:	b500      	push	{lr}
    8dda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ddc:	f7f7 feb2 	bl	b44 <Sys_GetCoreID>
    8de0:	4603      	mov	r3, r0
    8de2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    8de4:	4a10      	ldr	r2, [pc, #64]	; (8e28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8de6:	9b01      	ldr	r3, [sp, #4]
    8de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dec:	2b00      	cmp	r3, #0
    8dee:	d10d      	bne.n	8e0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8df0:	f7f7 fdcf 	bl	992 <Port_schm_read_msr>
    8df4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8df6:	9b00      	ldr	r3, [sp, #0]
    8df8:	f003 0301 	and.w	r3, r3, #1
    8dfc:	2b00      	cmp	r3, #0
    8dfe:	d100      	bne.n	8e02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8e00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    8e02:	490a      	ldr	r1, [pc, #40]	; (8e2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    8e04:	9b01      	ldr	r3, [sp, #4]
    8e06:	9a00      	ldr	r2, [sp, #0]
    8e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    8e0c:	4a06      	ldr	r2, [pc, #24]	; (8e28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8e0e:	9b01      	ldr	r3, [sp, #4]
    8e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e14:	1c5a      	adds	r2, r3, #1
    8e16:	4904      	ldr	r1, [pc, #16]	; (8e28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8e18:	9b01      	ldr	r3, [sp, #4]
    8e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e1e:	bf00      	nop
    8e20:	b003      	add	sp, #12
    8e22:	f85d fb04 	ldr.w	pc, [sp], #4
    8e26:	bf00      	nop
    8e28:	1fff9100 	.word	0x1fff9100
    8e2c:	1fff90fc 	.word	0x1fff90fc

00008e30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    8e30:	b500      	push	{lr}
    8e32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e34:	f7f7 fe86 	bl	b44 <Sys_GetCoreID>
    8e38:	4603      	mov	r3, r0
    8e3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    8e3c:	4a0d      	ldr	r2, [pc, #52]	; (8e74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8e3e:	9b01      	ldr	r3, [sp, #4]
    8e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e44:	1e5a      	subs	r2, r3, #1
    8e46:	490b      	ldr	r1, [pc, #44]	; (8e74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8e48:	9b01      	ldr	r3, [sp, #4]
    8e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    8e4e:	4a0a      	ldr	r2, [pc, #40]	; (8e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    8e50:	9b01      	ldr	r3, [sp, #4]
    8e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e56:	f003 0301 	and.w	r3, r3, #1
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d106      	bne.n	8e6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    8e5e:	4a05      	ldr	r2, [pc, #20]	; (8e74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8e60:	9b01      	ldr	r3, [sp, #4]
    8e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e66:	2b00      	cmp	r3, #0
    8e68:	d100      	bne.n	8e6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8e6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8e6c:	bf00      	nop
    8e6e:	b003      	add	sp, #12
    8e70:	f85d fb04 	ldr.w	pc, [sp], #4
    8e74:	1fff9100 	.word	0x1fff9100
    8e78:	1fff90fc 	.word	0x1fff90fc

00008e7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    8e7c:	b500      	push	{lr}
    8e7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e80:	f7f7 fe60 	bl	b44 <Sys_GetCoreID>
    8e84:	4603      	mov	r3, r0
    8e86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    8e88:	4a10      	ldr	r2, [pc, #64]	; (8ecc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8e8a:	9b01      	ldr	r3, [sp, #4]
    8e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e90:	2b00      	cmp	r3, #0
    8e92:	d10d      	bne.n	8eb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8e94:	f7f7 fd7d 	bl	992 <Port_schm_read_msr>
    8e98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8e9a:	9b00      	ldr	r3, [sp, #0]
    8e9c:	f003 0301 	and.w	r3, r3, #1
    8ea0:	2b00      	cmp	r3, #0
    8ea2:	d100      	bne.n	8ea6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8ea4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    8ea6:	490a      	ldr	r1, [pc, #40]	; (8ed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    8ea8:	9b01      	ldr	r3, [sp, #4]
    8eaa:	9a00      	ldr	r2, [sp, #0]
    8eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    8eb0:	4a06      	ldr	r2, [pc, #24]	; (8ecc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8eb2:	9b01      	ldr	r3, [sp, #4]
    8eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eb8:	1c5a      	adds	r2, r3, #1
    8eba:	4904      	ldr	r1, [pc, #16]	; (8ecc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8ebc:	9b01      	ldr	r3, [sp, #4]
    8ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8ec2:	bf00      	nop
    8ec4:	b003      	add	sp, #12
    8ec6:	f85d fb04 	ldr.w	pc, [sp], #4
    8eca:	bf00      	nop
    8ecc:	1fff9108 	.word	0x1fff9108
    8ed0:	1fff9104 	.word	0x1fff9104

00008ed4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    8ed4:	b500      	push	{lr}
    8ed6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ed8:	f7f7 fe34 	bl	b44 <Sys_GetCoreID>
    8edc:	4603      	mov	r3, r0
    8ede:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    8ee0:	4a0d      	ldr	r2, [pc, #52]	; (8f18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8ee2:	9b01      	ldr	r3, [sp, #4]
    8ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ee8:	1e5a      	subs	r2, r3, #1
    8eea:	490b      	ldr	r1, [pc, #44]	; (8f18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8eec:	9b01      	ldr	r3, [sp, #4]
    8eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    8ef2:	4a0a      	ldr	r2, [pc, #40]	; (8f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    8ef4:	9b01      	ldr	r3, [sp, #4]
    8ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8efa:	f003 0301 	and.w	r3, r3, #1
    8efe:	2b00      	cmp	r3, #0
    8f00:	d106      	bne.n	8f10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    8f02:	4a05      	ldr	r2, [pc, #20]	; (8f18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8f04:	9b01      	ldr	r3, [sp, #4]
    8f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f0a:	2b00      	cmp	r3, #0
    8f0c:	d100      	bne.n	8f10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8f0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8f10:	bf00      	nop
    8f12:	b003      	add	sp, #12
    8f14:	f85d fb04 	ldr.w	pc, [sp], #4
    8f18:	1fff9108 	.word	0x1fff9108
    8f1c:	1fff9104 	.word	0x1fff9104

00008f20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    8f20:	b500      	push	{lr}
    8f22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f24:	f7f7 fe0e 	bl	b44 <Sys_GetCoreID>
    8f28:	4603      	mov	r3, r0
    8f2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    8f2c:	4a10      	ldr	r2, [pc, #64]	; (8f70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8f2e:	9b01      	ldr	r3, [sp, #4]
    8f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f34:	2b00      	cmp	r3, #0
    8f36:	d10d      	bne.n	8f54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8f38:	f7f7 fd2b 	bl	992 <Port_schm_read_msr>
    8f3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8f3e:	9b00      	ldr	r3, [sp, #0]
    8f40:	f003 0301 	and.w	r3, r3, #1
    8f44:	2b00      	cmp	r3, #0
    8f46:	d100      	bne.n	8f4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8f48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    8f4a:	490a      	ldr	r1, [pc, #40]	; (8f74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    8f4c:	9b01      	ldr	r3, [sp, #4]
    8f4e:	9a00      	ldr	r2, [sp, #0]
    8f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    8f54:	4a06      	ldr	r2, [pc, #24]	; (8f70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8f56:	9b01      	ldr	r3, [sp, #4]
    8f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f5c:	1c5a      	adds	r2, r3, #1
    8f5e:	4904      	ldr	r1, [pc, #16]	; (8f70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8f60:	9b01      	ldr	r3, [sp, #4]
    8f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f66:	bf00      	nop
    8f68:	b003      	add	sp, #12
    8f6a:	f85d fb04 	ldr.w	pc, [sp], #4
    8f6e:	bf00      	nop
    8f70:	1fff9110 	.word	0x1fff9110
    8f74:	1fff910c 	.word	0x1fff910c

00008f78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    8f78:	b500      	push	{lr}
    8f7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f7c:	f7f7 fde2 	bl	b44 <Sys_GetCoreID>
    8f80:	4603      	mov	r3, r0
    8f82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    8f84:	4a0d      	ldr	r2, [pc, #52]	; (8fbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8f86:	9b01      	ldr	r3, [sp, #4]
    8f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f8c:	1e5a      	subs	r2, r3, #1
    8f8e:	490b      	ldr	r1, [pc, #44]	; (8fbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8f90:	9b01      	ldr	r3, [sp, #4]
    8f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    8f96:	4a0a      	ldr	r2, [pc, #40]	; (8fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    8f98:	9b01      	ldr	r3, [sp, #4]
    8f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f9e:	f003 0301 	and.w	r3, r3, #1
    8fa2:	2b00      	cmp	r3, #0
    8fa4:	d106      	bne.n	8fb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    8fa6:	4a05      	ldr	r2, [pc, #20]	; (8fbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8fa8:	9b01      	ldr	r3, [sp, #4]
    8faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d100      	bne.n	8fb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8fb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8fb4:	bf00      	nop
    8fb6:	b003      	add	sp, #12
    8fb8:	f85d fb04 	ldr.w	pc, [sp], #4
    8fbc:	1fff9110 	.word	0x1fff9110
    8fc0:	1fff910c 	.word	0x1fff910c

00008fc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    8fc4:	b500      	push	{lr}
    8fc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8fc8:	f7f7 fdbc 	bl	b44 <Sys_GetCoreID>
    8fcc:	4603      	mov	r3, r0
    8fce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    8fd0:	4a10      	ldr	r2, [pc, #64]	; (9014 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8fd2:	9b01      	ldr	r3, [sp, #4]
    8fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fd8:	2b00      	cmp	r3, #0
    8fda:	d10d      	bne.n	8ff8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8fdc:	f7f7 fcd9 	bl	992 <Port_schm_read_msr>
    8fe0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8fe2:	9b00      	ldr	r3, [sp, #0]
    8fe4:	f003 0301 	and.w	r3, r3, #1
    8fe8:	2b00      	cmp	r3, #0
    8fea:	d100      	bne.n	8fee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8fec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    8fee:	490a      	ldr	r1, [pc, #40]	; (9018 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    8ff0:	9b01      	ldr	r3, [sp, #4]
    8ff2:	9a00      	ldr	r2, [sp, #0]
    8ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    8ff8:	4a06      	ldr	r2, [pc, #24]	; (9014 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8ffa:	9b01      	ldr	r3, [sp, #4]
    8ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9000:	1c5a      	adds	r2, r3, #1
    9002:	4904      	ldr	r1, [pc, #16]	; (9014 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    9004:	9b01      	ldr	r3, [sp, #4]
    9006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    900a:	bf00      	nop
    900c:	b003      	add	sp, #12
    900e:	f85d fb04 	ldr.w	pc, [sp], #4
    9012:	bf00      	nop
    9014:	1fff9118 	.word	0x1fff9118
    9018:	1fff9114 	.word	0x1fff9114

0000901c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    901c:	b500      	push	{lr}
    901e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9020:	f7f7 fd90 	bl	b44 <Sys_GetCoreID>
    9024:	4603      	mov	r3, r0
    9026:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    9028:	4a0d      	ldr	r2, [pc, #52]	; (9060 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    902a:	9b01      	ldr	r3, [sp, #4]
    902c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9030:	1e5a      	subs	r2, r3, #1
    9032:	490b      	ldr	r1, [pc, #44]	; (9060 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    9034:	9b01      	ldr	r3, [sp, #4]
    9036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    903a:	4a0a      	ldr	r2, [pc, #40]	; (9064 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    903c:	9b01      	ldr	r3, [sp, #4]
    903e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9042:	f003 0301 	and.w	r3, r3, #1
    9046:	2b00      	cmp	r3, #0
    9048:	d106      	bne.n	9058 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    904a:	4a05      	ldr	r2, [pc, #20]	; (9060 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    904c:	9b01      	ldr	r3, [sp, #4]
    904e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9052:	2b00      	cmp	r3, #0
    9054:	d100      	bne.n	9058 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9056:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9058:	bf00      	nop
    905a:	b003      	add	sp, #12
    905c:	f85d fb04 	ldr.w	pc, [sp], #4
    9060:	1fff9118 	.word	0x1fff9118
    9064:	1fff9114 	.word	0x1fff9114

00009068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    9068:	b500      	push	{lr}
    906a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    906c:	f7f7 fd6a 	bl	b44 <Sys_GetCoreID>
    9070:	4603      	mov	r3, r0
    9072:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    9074:	4a10      	ldr	r2, [pc, #64]	; (90b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    9076:	9b01      	ldr	r3, [sp, #4]
    9078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    907c:	2b00      	cmp	r3, #0
    907e:	d10d      	bne.n	909c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9080:	f7f7 fc87 	bl	992 <Port_schm_read_msr>
    9084:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9086:	9b00      	ldr	r3, [sp, #0]
    9088:	f003 0301 	and.w	r3, r3, #1
    908c:	2b00      	cmp	r3, #0
    908e:	d100      	bne.n	9092 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9090:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    9092:	490a      	ldr	r1, [pc, #40]	; (90bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    9094:	9b01      	ldr	r3, [sp, #4]
    9096:	9a00      	ldr	r2, [sp, #0]
    9098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    909c:	4a06      	ldr	r2, [pc, #24]	; (90b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    909e:	9b01      	ldr	r3, [sp, #4]
    90a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90a4:	1c5a      	adds	r2, r3, #1
    90a6:	4904      	ldr	r1, [pc, #16]	; (90b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    90a8:	9b01      	ldr	r3, [sp, #4]
    90aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    90ae:	bf00      	nop
    90b0:	b003      	add	sp, #12
    90b2:	f85d fb04 	ldr.w	pc, [sp], #4
    90b6:	bf00      	nop
    90b8:	1fff9120 	.word	0x1fff9120
    90bc:	1fff911c 	.word	0x1fff911c

000090c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    90c0:	b500      	push	{lr}
    90c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90c4:	f7f7 fd3e 	bl	b44 <Sys_GetCoreID>
    90c8:	4603      	mov	r3, r0
    90ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    90cc:	4a0d      	ldr	r2, [pc, #52]	; (9104 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    90ce:	9b01      	ldr	r3, [sp, #4]
    90d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90d4:	1e5a      	subs	r2, r3, #1
    90d6:	490b      	ldr	r1, [pc, #44]	; (9104 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    90d8:	9b01      	ldr	r3, [sp, #4]
    90da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    90de:	4a0a      	ldr	r2, [pc, #40]	; (9108 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    90e0:	9b01      	ldr	r3, [sp, #4]
    90e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90e6:	f003 0301 	and.w	r3, r3, #1
    90ea:	2b00      	cmp	r3, #0
    90ec:	d106      	bne.n	90fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    90ee:	4a05      	ldr	r2, [pc, #20]	; (9104 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    90f0:	9b01      	ldr	r3, [sp, #4]
    90f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90f6:	2b00      	cmp	r3, #0
    90f8:	d100      	bne.n	90fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    90fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    90fc:	bf00      	nop
    90fe:	b003      	add	sp, #12
    9100:	f85d fb04 	ldr.w	pc, [sp], #4
    9104:	1fff9120 	.word	0x1fff9120
    9108:	1fff911c 	.word	0x1fff911c

0000910c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    910c:	b500      	push	{lr}
    910e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9110:	f7f7 fd18 	bl	b44 <Sys_GetCoreID>
    9114:	4603      	mov	r3, r0
    9116:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    9118:	4a10      	ldr	r2, [pc, #64]	; (915c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    911a:	9b01      	ldr	r3, [sp, #4]
    911c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9120:	2b00      	cmp	r3, #0
    9122:	d10d      	bne.n	9140 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9124:	f7f7 fc35 	bl	992 <Port_schm_read_msr>
    9128:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    912a:	9b00      	ldr	r3, [sp, #0]
    912c:	f003 0301 	and.w	r3, r3, #1
    9130:	2b00      	cmp	r3, #0
    9132:	d100      	bne.n	9136 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9134:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    9136:	490a      	ldr	r1, [pc, #40]	; (9160 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    9138:	9b01      	ldr	r3, [sp, #4]
    913a:	9a00      	ldr	r2, [sp, #0]
    913c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    9140:	4a06      	ldr	r2, [pc, #24]	; (915c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    9142:	9b01      	ldr	r3, [sp, #4]
    9144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9148:	1c5a      	adds	r2, r3, #1
    914a:	4904      	ldr	r1, [pc, #16]	; (915c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    914c:	9b01      	ldr	r3, [sp, #4]
    914e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9152:	bf00      	nop
    9154:	b003      	add	sp, #12
    9156:	f85d fb04 	ldr.w	pc, [sp], #4
    915a:	bf00      	nop
    915c:	1fff9128 	.word	0x1fff9128
    9160:	1fff9124 	.word	0x1fff9124

00009164 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    9164:	b500      	push	{lr}
    9166:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9168:	f7f7 fcec 	bl	b44 <Sys_GetCoreID>
    916c:	4603      	mov	r3, r0
    916e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    9170:	4a0d      	ldr	r2, [pc, #52]	; (91a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    9172:	9b01      	ldr	r3, [sp, #4]
    9174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9178:	1e5a      	subs	r2, r3, #1
    917a:	490b      	ldr	r1, [pc, #44]	; (91a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    917c:	9b01      	ldr	r3, [sp, #4]
    917e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    9182:	4a0a      	ldr	r2, [pc, #40]	; (91ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    9184:	9b01      	ldr	r3, [sp, #4]
    9186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    918a:	f003 0301 	and.w	r3, r3, #1
    918e:	2b00      	cmp	r3, #0
    9190:	d106      	bne.n	91a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    9192:	4a05      	ldr	r2, [pc, #20]	; (91a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    9194:	9b01      	ldr	r3, [sp, #4]
    9196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    919a:	2b00      	cmp	r3, #0
    919c:	d100      	bne.n	91a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    919e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    91a0:	bf00      	nop
    91a2:	b003      	add	sp, #12
    91a4:	f85d fb04 	ldr.w	pc, [sp], #4
    91a8:	1fff9128 	.word	0x1fff9128
    91ac:	1fff9124 	.word	0x1fff9124

000091b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    91b0:	b500      	push	{lr}
    91b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    91b4:	f7f7 fcc6 	bl	b44 <Sys_GetCoreID>
    91b8:	4603      	mov	r3, r0
    91ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    91bc:	4a10      	ldr	r2, [pc, #64]	; (9200 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    91be:	9b01      	ldr	r3, [sp, #4]
    91c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91c4:	2b00      	cmp	r3, #0
    91c6:	d10d      	bne.n	91e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    91c8:	f7f7 fbe3 	bl	992 <Port_schm_read_msr>
    91cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    91ce:	9b00      	ldr	r3, [sp, #0]
    91d0:	f003 0301 	and.w	r3, r3, #1
    91d4:	2b00      	cmp	r3, #0
    91d6:	d100      	bne.n	91da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    91d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    91da:	490a      	ldr	r1, [pc, #40]	; (9204 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    91dc:	9b01      	ldr	r3, [sp, #4]
    91de:	9a00      	ldr	r2, [sp, #0]
    91e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    91e4:	4a06      	ldr	r2, [pc, #24]	; (9200 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    91e6:	9b01      	ldr	r3, [sp, #4]
    91e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91ec:	1c5a      	adds	r2, r3, #1
    91ee:	4904      	ldr	r1, [pc, #16]	; (9200 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    91f0:	9b01      	ldr	r3, [sp, #4]
    91f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    91f6:	bf00      	nop
    91f8:	b003      	add	sp, #12
    91fa:	f85d fb04 	ldr.w	pc, [sp], #4
    91fe:	bf00      	nop
    9200:	1fff9130 	.word	0x1fff9130
    9204:	1fff912c 	.word	0x1fff912c

00009208 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    9208:	b500      	push	{lr}
    920a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    920c:	f7f7 fc9a 	bl	b44 <Sys_GetCoreID>
    9210:	4603      	mov	r3, r0
    9212:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    9214:	4a0d      	ldr	r2, [pc, #52]	; (924c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    9216:	9b01      	ldr	r3, [sp, #4]
    9218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    921c:	1e5a      	subs	r2, r3, #1
    921e:	490b      	ldr	r1, [pc, #44]	; (924c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    9220:	9b01      	ldr	r3, [sp, #4]
    9222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    9226:	4a0a      	ldr	r2, [pc, #40]	; (9250 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    9228:	9b01      	ldr	r3, [sp, #4]
    922a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    922e:	f003 0301 	and.w	r3, r3, #1
    9232:	2b00      	cmp	r3, #0
    9234:	d106      	bne.n	9244 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    9236:	4a05      	ldr	r2, [pc, #20]	; (924c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    9238:	9b01      	ldr	r3, [sp, #4]
    923a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    923e:	2b00      	cmp	r3, #0
    9240:	d100      	bne.n	9244 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9242:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9244:	bf00      	nop
    9246:	b003      	add	sp, #12
    9248:	f85d fb04 	ldr.w	pc, [sp], #4
    924c:	1fff9130 	.word	0x1fff9130
    9250:	1fff912c 	.word	0x1fff912c

00009254 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    9254:	b500      	push	{lr}
    9256:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9258:	f7f7 fc74 	bl	b44 <Sys_GetCoreID>
    925c:	4603      	mov	r3, r0
    925e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    9260:	4a10      	ldr	r2, [pc, #64]	; (92a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    9262:	9b01      	ldr	r3, [sp, #4]
    9264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9268:	2b00      	cmp	r3, #0
    926a:	d10d      	bne.n	9288 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    926c:	f7f7 fb91 	bl	992 <Port_schm_read_msr>
    9270:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9272:	9b00      	ldr	r3, [sp, #0]
    9274:	f003 0301 	and.w	r3, r3, #1
    9278:	2b00      	cmp	r3, #0
    927a:	d100      	bne.n	927e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    927c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    927e:	490a      	ldr	r1, [pc, #40]	; (92a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    9280:	9b01      	ldr	r3, [sp, #4]
    9282:	9a00      	ldr	r2, [sp, #0]
    9284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    9288:	4a06      	ldr	r2, [pc, #24]	; (92a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    928a:	9b01      	ldr	r3, [sp, #4]
    928c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9290:	1c5a      	adds	r2, r3, #1
    9292:	4904      	ldr	r1, [pc, #16]	; (92a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    9294:	9b01      	ldr	r3, [sp, #4]
    9296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    929a:	bf00      	nop
    929c:	b003      	add	sp, #12
    929e:	f85d fb04 	ldr.w	pc, [sp], #4
    92a2:	bf00      	nop
    92a4:	1fff9138 	.word	0x1fff9138
    92a8:	1fff9134 	.word	0x1fff9134

000092ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    92ac:	b500      	push	{lr}
    92ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    92b0:	f7f7 fc48 	bl	b44 <Sys_GetCoreID>
    92b4:	4603      	mov	r3, r0
    92b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    92b8:	4a0d      	ldr	r2, [pc, #52]	; (92f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    92ba:	9b01      	ldr	r3, [sp, #4]
    92bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92c0:	1e5a      	subs	r2, r3, #1
    92c2:	490b      	ldr	r1, [pc, #44]	; (92f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    92c4:	9b01      	ldr	r3, [sp, #4]
    92c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    92ca:	4a0a      	ldr	r2, [pc, #40]	; (92f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    92cc:	9b01      	ldr	r3, [sp, #4]
    92ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92d2:	f003 0301 	and.w	r3, r3, #1
    92d6:	2b00      	cmp	r3, #0
    92d8:	d106      	bne.n	92e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    92da:	4a05      	ldr	r2, [pc, #20]	; (92f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    92dc:	9b01      	ldr	r3, [sp, #4]
    92de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92e2:	2b00      	cmp	r3, #0
    92e4:	d100      	bne.n	92e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    92e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    92e8:	bf00      	nop
    92ea:	b003      	add	sp, #12
    92ec:	f85d fb04 	ldr.w	pc, [sp], #4
    92f0:	1fff9138 	.word	0x1fff9138
    92f4:	1fff9134 	.word	0x1fff9134

000092f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    92f8:	b500      	push	{lr}
    92fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    92fc:	f7f7 fc22 	bl	b44 <Sys_GetCoreID>
    9300:	4603      	mov	r3, r0
    9302:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    9304:	4a10      	ldr	r2, [pc, #64]	; (9348 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    9306:	9b01      	ldr	r3, [sp, #4]
    9308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    930c:	2b00      	cmp	r3, #0
    930e:	d10d      	bne.n	932c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9310:	f7f7 fb3f 	bl	992 <Port_schm_read_msr>
    9314:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9316:	9b00      	ldr	r3, [sp, #0]
    9318:	f003 0301 	and.w	r3, r3, #1
    931c:	2b00      	cmp	r3, #0
    931e:	d100      	bne.n	9322 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9320:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    9322:	490a      	ldr	r1, [pc, #40]	; (934c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    9324:	9b01      	ldr	r3, [sp, #4]
    9326:	9a00      	ldr	r2, [sp, #0]
    9328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    932c:	4a06      	ldr	r2, [pc, #24]	; (9348 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    932e:	9b01      	ldr	r3, [sp, #4]
    9330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9334:	1c5a      	adds	r2, r3, #1
    9336:	4904      	ldr	r1, [pc, #16]	; (9348 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    9338:	9b01      	ldr	r3, [sp, #4]
    933a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    933e:	bf00      	nop
    9340:	b003      	add	sp, #12
    9342:	f85d fb04 	ldr.w	pc, [sp], #4
    9346:	bf00      	nop
    9348:	1fff9140 	.word	0x1fff9140
    934c:	1fff913c 	.word	0x1fff913c

00009350 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    9350:	b500      	push	{lr}
    9352:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9354:	f7f7 fbf6 	bl	b44 <Sys_GetCoreID>
    9358:	4603      	mov	r3, r0
    935a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    935c:	4a0d      	ldr	r2, [pc, #52]	; (9394 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    935e:	9b01      	ldr	r3, [sp, #4]
    9360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9364:	1e5a      	subs	r2, r3, #1
    9366:	490b      	ldr	r1, [pc, #44]	; (9394 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    9368:	9b01      	ldr	r3, [sp, #4]
    936a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    936e:	4a0a      	ldr	r2, [pc, #40]	; (9398 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    9370:	9b01      	ldr	r3, [sp, #4]
    9372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9376:	f003 0301 	and.w	r3, r3, #1
    937a:	2b00      	cmp	r3, #0
    937c:	d106      	bne.n	938c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    937e:	4a05      	ldr	r2, [pc, #20]	; (9394 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    9380:	9b01      	ldr	r3, [sp, #4]
    9382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9386:	2b00      	cmp	r3, #0
    9388:	d100      	bne.n	938c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    938a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    938c:	bf00      	nop
    938e:	b003      	add	sp, #12
    9390:	f85d fb04 	ldr.w	pc, [sp], #4
    9394:	1fff9140 	.word	0x1fff9140
    9398:	1fff913c 	.word	0x1fff913c

0000939c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    939c:	b500      	push	{lr}
    939e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    93a0:	f7f7 fbd0 	bl	b44 <Sys_GetCoreID>
    93a4:	4603      	mov	r3, r0
    93a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    93a8:	4a10      	ldr	r2, [pc, #64]	; (93ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    93aa:	9b01      	ldr	r3, [sp, #4]
    93ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93b0:	2b00      	cmp	r3, #0
    93b2:	d10d      	bne.n	93d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    93b4:	f7f7 faed 	bl	992 <Port_schm_read_msr>
    93b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    93ba:	9b00      	ldr	r3, [sp, #0]
    93bc:	f003 0301 	and.w	r3, r3, #1
    93c0:	2b00      	cmp	r3, #0
    93c2:	d100      	bne.n	93c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    93c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    93c6:	490a      	ldr	r1, [pc, #40]	; (93f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    93c8:	9b01      	ldr	r3, [sp, #4]
    93ca:	9a00      	ldr	r2, [sp, #0]
    93cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    93d0:	4a06      	ldr	r2, [pc, #24]	; (93ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    93d2:	9b01      	ldr	r3, [sp, #4]
    93d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93d8:	1c5a      	adds	r2, r3, #1
    93da:	4904      	ldr	r1, [pc, #16]	; (93ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    93dc:	9b01      	ldr	r3, [sp, #4]
    93de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    93e2:	bf00      	nop
    93e4:	b003      	add	sp, #12
    93e6:	f85d fb04 	ldr.w	pc, [sp], #4
    93ea:	bf00      	nop
    93ec:	1fff9148 	.word	0x1fff9148
    93f0:	1fff9144 	.word	0x1fff9144

000093f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    93f4:	b500      	push	{lr}
    93f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    93f8:	f7f7 fba4 	bl	b44 <Sys_GetCoreID>
    93fc:	4603      	mov	r3, r0
    93fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    9400:	4a0d      	ldr	r2, [pc, #52]	; (9438 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    9402:	9b01      	ldr	r3, [sp, #4]
    9404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9408:	1e5a      	subs	r2, r3, #1
    940a:	490b      	ldr	r1, [pc, #44]	; (9438 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    940c:	9b01      	ldr	r3, [sp, #4]
    940e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    9412:	4a0a      	ldr	r2, [pc, #40]	; (943c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    9414:	9b01      	ldr	r3, [sp, #4]
    9416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    941a:	f003 0301 	and.w	r3, r3, #1
    941e:	2b00      	cmp	r3, #0
    9420:	d106      	bne.n	9430 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    9422:	4a05      	ldr	r2, [pc, #20]	; (9438 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    9424:	9b01      	ldr	r3, [sp, #4]
    9426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    942a:	2b00      	cmp	r3, #0
    942c:	d100      	bne.n	9430 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    942e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9430:	bf00      	nop
    9432:	b003      	add	sp, #12
    9434:	f85d fb04 	ldr.w	pc, [sp], #4
    9438:	1fff9148 	.word	0x1fff9148
    943c:	1fff9144 	.word	0x1fff9144

00009440 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    9440:	b500      	push	{lr}
    9442:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9444:	f7f7 fb7e 	bl	b44 <Sys_GetCoreID>
    9448:	4603      	mov	r3, r0
    944a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    944c:	4a10      	ldr	r2, [pc, #64]	; (9490 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    944e:	9b01      	ldr	r3, [sp, #4]
    9450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9454:	2b00      	cmp	r3, #0
    9456:	d10d      	bne.n	9474 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9458:	f7f7 fa9b 	bl	992 <Port_schm_read_msr>
    945c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    945e:	9b00      	ldr	r3, [sp, #0]
    9460:	f003 0301 	and.w	r3, r3, #1
    9464:	2b00      	cmp	r3, #0
    9466:	d100      	bne.n	946a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9468:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    946a:	490a      	ldr	r1, [pc, #40]	; (9494 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    946c:	9b01      	ldr	r3, [sp, #4]
    946e:	9a00      	ldr	r2, [sp, #0]
    9470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    9474:	4a06      	ldr	r2, [pc, #24]	; (9490 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    9476:	9b01      	ldr	r3, [sp, #4]
    9478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    947c:	1c5a      	adds	r2, r3, #1
    947e:	4904      	ldr	r1, [pc, #16]	; (9490 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    9480:	9b01      	ldr	r3, [sp, #4]
    9482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9486:	bf00      	nop
    9488:	b003      	add	sp, #12
    948a:	f85d fb04 	ldr.w	pc, [sp], #4
    948e:	bf00      	nop
    9490:	1fff9150 	.word	0x1fff9150
    9494:	1fff914c 	.word	0x1fff914c

00009498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    9498:	b500      	push	{lr}
    949a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    949c:	f7f7 fb52 	bl	b44 <Sys_GetCoreID>
    94a0:	4603      	mov	r3, r0
    94a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    94a4:	4a0d      	ldr	r2, [pc, #52]	; (94dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    94a6:	9b01      	ldr	r3, [sp, #4]
    94a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94ac:	1e5a      	subs	r2, r3, #1
    94ae:	490b      	ldr	r1, [pc, #44]	; (94dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    94b0:	9b01      	ldr	r3, [sp, #4]
    94b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    94b6:	4a0a      	ldr	r2, [pc, #40]	; (94e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    94b8:	9b01      	ldr	r3, [sp, #4]
    94ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94be:	f003 0301 	and.w	r3, r3, #1
    94c2:	2b00      	cmp	r3, #0
    94c4:	d106      	bne.n	94d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    94c6:	4a05      	ldr	r2, [pc, #20]	; (94dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    94c8:	9b01      	ldr	r3, [sp, #4]
    94ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94ce:	2b00      	cmp	r3, #0
    94d0:	d100      	bne.n	94d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    94d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    94d4:	bf00      	nop
    94d6:	b003      	add	sp, #12
    94d8:	f85d fb04 	ldr.w	pc, [sp], #4
    94dc:	1fff9150 	.word	0x1fff9150
    94e0:	1fff914c 	.word	0x1fff914c

000094e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    94e4:	b500      	push	{lr}
    94e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94e8:	f7f7 fb2c 	bl	b44 <Sys_GetCoreID>
    94ec:	4603      	mov	r3, r0
    94ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    94f0:	4a10      	ldr	r2, [pc, #64]	; (9534 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    94f2:	9b01      	ldr	r3, [sp, #4]
    94f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94f8:	2b00      	cmp	r3, #0
    94fa:	d10d      	bne.n	9518 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    94fc:	f7f7 fa49 	bl	992 <Port_schm_read_msr>
    9500:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9502:	9b00      	ldr	r3, [sp, #0]
    9504:	f003 0301 	and.w	r3, r3, #1
    9508:	2b00      	cmp	r3, #0
    950a:	d100      	bne.n	950e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    950c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    950e:	490a      	ldr	r1, [pc, #40]	; (9538 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    9510:	9b01      	ldr	r3, [sp, #4]
    9512:	9a00      	ldr	r2, [sp, #0]
    9514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    9518:	4a06      	ldr	r2, [pc, #24]	; (9534 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    951a:	9b01      	ldr	r3, [sp, #4]
    951c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9520:	1c5a      	adds	r2, r3, #1
    9522:	4904      	ldr	r1, [pc, #16]	; (9534 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    9524:	9b01      	ldr	r3, [sp, #4]
    9526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    952a:	bf00      	nop
    952c:	b003      	add	sp, #12
    952e:	f85d fb04 	ldr.w	pc, [sp], #4
    9532:	bf00      	nop
    9534:	1fff9158 	.word	0x1fff9158
    9538:	1fff9154 	.word	0x1fff9154

0000953c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    953c:	b500      	push	{lr}
    953e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9540:	f7f7 fb00 	bl	b44 <Sys_GetCoreID>
    9544:	4603      	mov	r3, r0
    9546:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    9548:	4a0d      	ldr	r2, [pc, #52]	; (9580 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    954a:	9b01      	ldr	r3, [sp, #4]
    954c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9550:	1e5a      	subs	r2, r3, #1
    9552:	490b      	ldr	r1, [pc, #44]	; (9580 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    9554:	9b01      	ldr	r3, [sp, #4]
    9556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    955a:	4a0a      	ldr	r2, [pc, #40]	; (9584 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    955c:	9b01      	ldr	r3, [sp, #4]
    955e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9562:	f003 0301 	and.w	r3, r3, #1
    9566:	2b00      	cmp	r3, #0
    9568:	d106      	bne.n	9578 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    956a:	4a05      	ldr	r2, [pc, #20]	; (9580 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    956c:	9b01      	ldr	r3, [sp, #4]
    956e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9572:	2b00      	cmp	r3, #0
    9574:	d100      	bne.n	9578 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9576:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9578:	bf00      	nop
    957a:	b003      	add	sp, #12
    957c:	f85d fb04 	ldr.w	pc, [sp], #4
    9580:	1fff9158 	.word	0x1fff9158
    9584:	1fff9154 	.word	0x1fff9154

00009588 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    9588:	b500      	push	{lr}
    958a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    958c:	f7f7 fada 	bl	b44 <Sys_GetCoreID>
    9590:	4603      	mov	r3, r0
    9592:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    9594:	4a10      	ldr	r2, [pc, #64]	; (95d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    9596:	9b01      	ldr	r3, [sp, #4]
    9598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    959c:	2b00      	cmp	r3, #0
    959e:	d10d      	bne.n	95bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    95a0:	f7f7 f9f7 	bl	992 <Port_schm_read_msr>
    95a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    95a6:	9b00      	ldr	r3, [sp, #0]
    95a8:	f003 0301 	and.w	r3, r3, #1
    95ac:	2b00      	cmp	r3, #0
    95ae:	d100      	bne.n	95b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    95b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    95b2:	490a      	ldr	r1, [pc, #40]	; (95dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    95b4:	9b01      	ldr	r3, [sp, #4]
    95b6:	9a00      	ldr	r2, [sp, #0]
    95b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    95bc:	4a06      	ldr	r2, [pc, #24]	; (95d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    95be:	9b01      	ldr	r3, [sp, #4]
    95c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95c4:	1c5a      	adds	r2, r3, #1
    95c6:	4904      	ldr	r1, [pc, #16]	; (95d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    95c8:	9b01      	ldr	r3, [sp, #4]
    95ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    95ce:	bf00      	nop
    95d0:	b003      	add	sp, #12
    95d2:	f85d fb04 	ldr.w	pc, [sp], #4
    95d6:	bf00      	nop
    95d8:	1fff9160 	.word	0x1fff9160
    95dc:	1fff915c 	.word	0x1fff915c

000095e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    95e0:	b500      	push	{lr}
    95e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    95e4:	f7f7 faae 	bl	b44 <Sys_GetCoreID>
    95e8:	4603      	mov	r3, r0
    95ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    95ec:	4a0d      	ldr	r2, [pc, #52]	; (9624 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    95ee:	9b01      	ldr	r3, [sp, #4]
    95f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95f4:	1e5a      	subs	r2, r3, #1
    95f6:	490b      	ldr	r1, [pc, #44]	; (9624 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    95f8:	9b01      	ldr	r3, [sp, #4]
    95fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    95fe:	4a0a      	ldr	r2, [pc, #40]	; (9628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    9600:	9b01      	ldr	r3, [sp, #4]
    9602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9606:	f003 0301 	and.w	r3, r3, #1
    960a:	2b00      	cmp	r3, #0
    960c:	d106      	bne.n	961c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    960e:	4a05      	ldr	r2, [pc, #20]	; (9624 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    9610:	9b01      	ldr	r3, [sp, #4]
    9612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9616:	2b00      	cmp	r3, #0
    9618:	d100      	bne.n	961c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    961a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    961c:	bf00      	nop
    961e:	b003      	add	sp, #12
    9620:	f85d fb04 	ldr.w	pc, [sp], #4
    9624:	1fff9160 	.word	0x1fff9160
    9628:	1fff915c 	.word	0x1fff915c

0000962c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    962c:	b500      	push	{lr}
    962e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9630:	f7f7 fa88 	bl	b44 <Sys_GetCoreID>
    9634:	4603      	mov	r3, r0
    9636:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    9638:	4a10      	ldr	r2, [pc, #64]	; (967c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    963a:	9b01      	ldr	r3, [sp, #4]
    963c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9640:	2b00      	cmp	r3, #0
    9642:	d10d      	bne.n	9660 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9644:	f7f7 f9a5 	bl	992 <Port_schm_read_msr>
    9648:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    964a:	9b00      	ldr	r3, [sp, #0]
    964c:	f003 0301 	and.w	r3, r3, #1
    9650:	2b00      	cmp	r3, #0
    9652:	d100      	bne.n	9656 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9654:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    9656:	490a      	ldr	r1, [pc, #40]	; (9680 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    9658:	9b01      	ldr	r3, [sp, #4]
    965a:	9a00      	ldr	r2, [sp, #0]
    965c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    9660:	4a06      	ldr	r2, [pc, #24]	; (967c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    9662:	9b01      	ldr	r3, [sp, #4]
    9664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9668:	1c5a      	adds	r2, r3, #1
    966a:	4904      	ldr	r1, [pc, #16]	; (967c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    966c:	9b01      	ldr	r3, [sp, #4]
    966e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9672:	bf00      	nop
    9674:	b003      	add	sp, #12
    9676:	f85d fb04 	ldr.w	pc, [sp], #4
    967a:	bf00      	nop
    967c:	1fff9168 	.word	0x1fff9168
    9680:	1fff9164 	.word	0x1fff9164

00009684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    9684:	b500      	push	{lr}
    9686:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9688:	f7f7 fa5c 	bl	b44 <Sys_GetCoreID>
    968c:	4603      	mov	r3, r0
    968e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    9690:	4a0d      	ldr	r2, [pc, #52]	; (96c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    9692:	9b01      	ldr	r3, [sp, #4]
    9694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9698:	1e5a      	subs	r2, r3, #1
    969a:	490b      	ldr	r1, [pc, #44]	; (96c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    969c:	9b01      	ldr	r3, [sp, #4]
    969e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    96a2:	4a0a      	ldr	r2, [pc, #40]	; (96cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    96a4:	9b01      	ldr	r3, [sp, #4]
    96a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96aa:	f003 0301 	and.w	r3, r3, #1
    96ae:	2b00      	cmp	r3, #0
    96b0:	d106      	bne.n	96c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    96b2:	4a05      	ldr	r2, [pc, #20]	; (96c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    96b4:	9b01      	ldr	r3, [sp, #4]
    96b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ba:	2b00      	cmp	r3, #0
    96bc:	d100      	bne.n	96c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    96be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    96c0:	bf00      	nop
    96c2:	b003      	add	sp, #12
    96c4:	f85d fb04 	ldr.w	pc, [sp], #4
    96c8:	1fff9168 	.word	0x1fff9168
    96cc:	1fff9164 	.word	0x1fff9164

000096d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    96d0:	b500      	push	{lr}
    96d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    96d4:	f7f7 fa36 	bl	b44 <Sys_GetCoreID>
    96d8:	4603      	mov	r3, r0
    96da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    96dc:	4a10      	ldr	r2, [pc, #64]	; (9720 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    96de:	9b01      	ldr	r3, [sp, #4]
    96e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96e4:	2b00      	cmp	r3, #0
    96e6:	d10d      	bne.n	9704 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    96e8:	f7f7 f953 	bl	992 <Port_schm_read_msr>
    96ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    96ee:	9b00      	ldr	r3, [sp, #0]
    96f0:	f003 0301 	and.w	r3, r3, #1
    96f4:	2b00      	cmp	r3, #0
    96f6:	d100      	bne.n	96fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    96f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    96fa:	490a      	ldr	r1, [pc, #40]	; (9724 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    96fc:	9b01      	ldr	r3, [sp, #4]
    96fe:	9a00      	ldr	r2, [sp, #0]
    9700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    9704:	4a06      	ldr	r2, [pc, #24]	; (9720 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    9706:	9b01      	ldr	r3, [sp, #4]
    9708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    970c:	1c5a      	adds	r2, r3, #1
    970e:	4904      	ldr	r1, [pc, #16]	; (9720 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    9710:	9b01      	ldr	r3, [sp, #4]
    9712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9716:	bf00      	nop
    9718:	b003      	add	sp, #12
    971a:	f85d fb04 	ldr.w	pc, [sp], #4
    971e:	bf00      	nop
    9720:	1fff9170 	.word	0x1fff9170
    9724:	1fff916c 	.word	0x1fff916c

00009728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    9728:	b500      	push	{lr}
    972a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    972c:	f7f7 fa0a 	bl	b44 <Sys_GetCoreID>
    9730:	4603      	mov	r3, r0
    9732:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    9734:	4a0d      	ldr	r2, [pc, #52]	; (976c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    9736:	9b01      	ldr	r3, [sp, #4]
    9738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    973c:	1e5a      	subs	r2, r3, #1
    973e:	490b      	ldr	r1, [pc, #44]	; (976c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    9740:	9b01      	ldr	r3, [sp, #4]
    9742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    9746:	4a0a      	ldr	r2, [pc, #40]	; (9770 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    9748:	9b01      	ldr	r3, [sp, #4]
    974a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    974e:	f003 0301 	and.w	r3, r3, #1
    9752:	2b00      	cmp	r3, #0
    9754:	d106      	bne.n	9764 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    9756:	4a05      	ldr	r2, [pc, #20]	; (976c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    9758:	9b01      	ldr	r3, [sp, #4]
    975a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    975e:	2b00      	cmp	r3, #0
    9760:	d100      	bne.n	9764 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9762:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9764:	bf00      	nop
    9766:	b003      	add	sp, #12
    9768:	f85d fb04 	ldr.w	pc, [sp], #4
    976c:	1fff9170 	.word	0x1fff9170
    9770:	1fff916c 	.word	0x1fff916c

00009774 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    9774:	b500      	push	{lr}
    9776:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9778:	f7f7 f9e4 	bl	b44 <Sys_GetCoreID>
    977c:	4603      	mov	r3, r0
    977e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    9780:	4a10      	ldr	r2, [pc, #64]	; (97c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    9782:	9b01      	ldr	r3, [sp, #4]
    9784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9788:	2b00      	cmp	r3, #0
    978a:	d10d      	bne.n	97a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    978c:	f7f7 f901 	bl	992 <Port_schm_read_msr>
    9790:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9792:	9b00      	ldr	r3, [sp, #0]
    9794:	f003 0301 	and.w	r3, r3, #1
    9798:	2b00      	cmp	r3, #0
    979a:	d100      	bne.n	979e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    979c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    979e:	490a      	ldr	r1, [pc, #40]	; (97c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    97a0:	9b01      	ldr	r3, [sp, #4]
    97a2:	9a00      	ldr	r2, [sp, #0]
    97a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    97a8:	4a06      	ldr	r2, [pc, #24]	; (97c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    97aa:	9b01      	ldr	r3, [sp, #4]
    97ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97b0:	1c5a      	adds	r2, r3, #1
    97b2:	4904      	ldr	r1, [pc, #16]	; (97c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    97b4:	9b01      	ldr	r3, [sp, #4]
    97b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    97ba:	bf00      	nop
    97bc:	b003      	add	sp, #12
    97be:	f85d fb04 	ldr.w	pc, [sp], #4
    97c2:	bf00      	nop
    97c4:	1fff9178 	.word	0x1fff9178
    97c8:	1fff9174 	.word	0x1fff9174

000097cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    97cc:	b500      	push	{lr}
    97ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    97d0:	f7f7 f9b8 	bl	b44 <Sys_GetCoreID>
    97d4:	4603      	mov	r3, r0
    97d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    97d8:	4a0d      	ldr	r2, [pc, #52]	; (9810 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    97da:	9b01      	ldr	r3, [sp, #4]
    97dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e0:	1e5a      	subs	r2, r3, #1
    97e2:	490b      	ldr	r1, [pc, #44]	; (9810 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    97e4:	9b01      	ldr	r3, [sp, #4]
    97e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    97ea:	4a0a      	ldr	r2, [pc, #40]	; (9814 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    97ec:	9b01      	ldr	r3, [sp, #4]
    97ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97f2:	f003 0301 	and.w	r3, r3, #1
    97f6:	2b00      	cmp	r3, #0
    97f8:	d106      	bne.n	9808 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    97fa:	4a05      	ldr	r2, [pc, #20]	; (9810 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    97fc:	9b01      	ldr	r3, [sp, #4]
    97fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9802:	2b00      	cmp	r3, #0
    9804:	d100      	bne.n	9808 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9806:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9808:	bf00      	nop
    980a:	b003      	add	sp, #12
    980c:	f85d fb04 	ldr.w	pc, [sp], #4
    9810:	1fff9178 	.word	0x1fff9178
    9814:	1fff9174 	.word	0x1fff9174

00009818 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    9818:	b500      	push	{lr}
    981a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    981c:	f7f7 f992 	bl	b44 <Sys_GetCoreID>
    9820:	4603      	mov	r3, r0
    9822:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    9824:	4a10      	ldr	r2, [pc, #64]	; (9868 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    9826:	9b01      	ldr	r3, [sp, #4]
    9828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    982c:	2b00      	cmp	r3, #0
    982e:	d10d      	bne.n	984c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9830:	f7f7 f8af 	bl	992 <Port_schm_read_msr>
    9834:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9836:	9b00      	ldr	r3, [sp, #0]
    9838:	f003 0301 	and.w	r3, r3, #1
    983c:	2b00      	cmp	r3, #0
    983e:	d100      	bne.n	9842 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9840:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    9842:	490a      	ldr	r1, [pc, #40]	; (986c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    9844:	9b01      	ldr	r3, [sp, #4]
    9846:	9a00      	ldr	r2, [sp, #0]
    9848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    984c:	4a06      	ldr	r2, [pc, #24]	; (9868 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    984e:	9b01      	ldr	r3, [sp, #4]
    9850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9854:	1c5a      	adds	r2, r3, #1
    9856:	4904      	ldr	r1, [pc, #16]	; (9868 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    9858:	9b01      	ldr	r3, [sp, #4]
    985a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    985e:	bf00      	nop
    9860:	b003      	add	sp, #12
    9862:	f85d fb04 	ldr.w	pc, [sp], #4
    9866:	bf00      	nop
    9868:	1fff9180 	.word	0x1fff9180
    986c:	1fff917c 	.word	0x1fff917c

00009870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    9870:	b500      	push	{lr}
    9872:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9874:	f7f7 f966 	bl	b44 <Sys_GetCoreID>
    9878:	4603      	mov	r3, r0
    987a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    987c:	4a0d      	ldr	r2, [pc, #52]	; (98b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    987e:	9b01      	ldr	r3, [sp, #4]
    9880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9884:	1e5a      	subs	r2, r3, #1
    9886:	490b      	ldr	r1, [pc, #44]	; (98b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    9888:	9b01      	ldr	r3, [sp, #4]
    988a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    988e:	4a0a      	ldr	r2, [pc, #40]	; (98b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    9890:	9b01      	ldr	r3, [sp, #4]
    9892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9896:	f003 0301 	and.w	r3, r3, #1
    989a:	2b00      	cmp	r3, #0
    989c:	d106      	bne.n	98ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    989e:	4a05      	ldr	r2, [pc, #20]	; (98b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    98a0:	9b01      	ldr	r3, [sp, #4]
    98a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98a6:	2b00      	cmp	r3, #0
    98a8:	d100      	bne.n	98ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    98aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    98ac:	bf00      	nop
    98ae:	b003      	add	sp, #12
    98b0:	f85d fb04 	ldr.w	pc, [sp], #4
    98b4:	1fff9180 	.word	0x1fff9180
    98b8:	1fff917c 	.word	0x1fff917c

000098bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    98bc:	b500      	push	{lr}
    98be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    98c0:	f7f7 f940 	bl	b44 <Sys_GetCoreID>
    98c4:	4603      	mov	r3, r0
    98c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    98c8:	4a10      	ldr	r2, [pc, #64]	; (990c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    98ca:	9b01      	ldr	r3, [sp, #4]
    98cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98d0:	2b00      	cmp	r3, #0
    98d2:	d10d      	bne.n	98f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    98d4:	f7f7 f85d 	bl	992 <Port_schm_read_msr>
    98d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    98da:	9b00      	ldr	r3, [sp, #0]
    98dc:	f003 0301 	and.w	r3, r3, #1
    98e0:	2b00      	cmp	r3, #0
    98e2:	d100      	bne.n	98e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    98e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    98e6:	490a      	ldr	r1, [pc, #40]	; (9910 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    98e8:	9b01      	ldr	r3, [sp, #4]
    98ea:	9a00      	ldr	r2, [sp, #0]
    98ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    98f0:	4a06      	ldr	r2, [pc, #24]	; (990c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    98f2:	9b01      	ldr	r3, [sp, #4]
    98f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98f8:	1c5a      	adds	r2, r3, #1
    98fa:	4904      	ldr	r1, [pc, #16]	; (990c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    98fc:	9b01      	ldr	r3, [sp, #4]
    98fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9902:	bf00      	nop
    9904:	b003      	add	sp, #12
    9906:	f85d fb04 	ldr.w	pc, [sp], #4
    990a:	bf00      	nop
    990c:	1fff9188 	.word	0x1fff9188
    9910:	1fff9184 	.word	0x1fff9184

00009914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    9914:	b500      	push	{lr}
    9916:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9918:	f7f7 f914 	bl	b44 <Sys_GetCoreID>
    991c:	4603      	mov	r3, r0
    991e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    9920:	4a0d      	ldr	r2, [pc, #52]	; (9958 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    9922:	9b01      	ldr	r3, [sp, #4]
    9924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9928:	1e5a      	subs	r2, r3, #1
    992a:	490b      	ldr	r1, [pc, #44]	; (9958 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    992c:	9b01      	ldr	r3, [sp, #4]
    992e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    9932:	4a0a      	ldr	r2, [pc, #40]	; (995c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    9934:	9b01      	ldr	r3, [sp, #4]
    9936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    993a:	f003 0301 	and.w	r3, r3, #1
    993e:	2b00      	cmp	r3, #0
    9940:	d106      	bne.n	9950 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    9942:	4a05      	ldr	r2, [pc, #20]	; (9958 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    9944:	9b01      	ldr	r3, [sp, #4]
    9946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    994a:	2b00      	cmp	r3, #0
    994c:	d100      	bne.n	9950 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    994e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9950:	bf00      	nop
    9952:	b003      	add	sp, #12
    9954:	f85d fb04 	ldr.w	pc, [sp], #4
    9958:	1fff9188 	.word	0x1fff9188
    995c:	1fff9184 	.word	0x1fff9184

00009960 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    9960:	b500      	push	{lr}
    9962:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9964:	f7f7 f8ee 	bl	b44 <Sys_GetCoreID>
    9968:	4603      	mov	r3, r0
    996a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    996c:	4a10      	ldr	r2, [pc, #64]	; (99b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    996e:	9b01      	ldr	r3, [sp, #4]
    9970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9974:	2b00      	cmp	r3, #0
    9976:	d10d      	bne.n	9994 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9978:	f7f7 f80b 	bl	992 <Port_schm_read_msr>
    997c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    997e:	9b00      	ldr	r3, [sp, #0]
    9980:	f003 0301 	and.w	r3, r3, #1
    9984:	2b00      	cmp	r3, #0
    9986:	d100      	bne.n	998a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9988:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    998a:	490a      	ldr	r1, [pc, #40]	; (99b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    998c:	9b01      	ldr	r3, [sp, #4]
    998e:	9a00      	ldr	r2, [sp, #0]
    9990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    9994:	4a06      	ldr	r2, [pc, #24]	; (99b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    9996:	9b01      	ldr	r3, [sp, #4]
    9998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    999c:	1c5a      	adds	r2, r3, #1
    999e:	4904      	ldr	r1, [pc, #16]	; (99b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    99a0:	9b01      	ldr	r3, [sp, #4]
    99a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    99a6:	bf00      	nop
    99a8:	b003      	add	sp, #12
    99aa:	f85d fb04 	ldr.w	pc, [sp], #4
    99ae:	bf00      	nop
    99b0:	1fff9190 	.word	0x1fff9190
    99b4:	1fff918c 	.word	0x1fff918c

000099b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    99b8:	b500      	push	{lr}
    99ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    99bc:	f7f7 f8c2 	bl	b44 <Sys_GetCoreID>
    99c0:	4603      	mov	r3, r0
    99c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    99c4:	4a0d      	ldr	r2, [pc, #52]	; (99fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    99c6:	9b01      	ldr	r3, [sp, #4]
    99c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99cc:	1e5a      	subs	r2, r3, #1
    99ce:	490b      	ldr	r1, [pc, #44]	; (99fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    99d0:	9b01      	ldr	r3, [sp, #4]
    99d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    99d6:	4a0a      	ldr	r2, [pc, #40]	; (9a00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    99d8:	9b01      	ldr	r3, [sp, #4]
    99da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99de:	f003 0301 	and.w	r3, r3, #1
    99e2:	2b00      	cmp	r3, #0
    99e4:	d106      	bne.n	99f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    99e6:	4a05      	ldr	r2, [pc, #20]	; (99fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    99e8:	9b01      	ldr	r3, [sp, #4]
    99ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ee:	2b00      	cmp	r3, #0
    99f0:	d100      	bne.n	99f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    99f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    99f4:	bf00      	nop
    99f6:	b003      	add	sp, #12
    99f8:	f85d fb04 	ldr.w	pc, [sp], #4
    99fc:	1fff9190 	.word	0x1fff9190
    9a00:	1fff918c 	.word	0x1fff918c

00009a04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    9a04:	b500      	push	{lr}
    9a06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a08:	f7f7 f89c 	bl	b44 <Sys_GetCoreID>
    9a0c:	4603      	mov	r3, r0
    9a0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    9a10:	4a10      	ldr	r2, [pc, #64]	; (9a54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    9a12:	9b01      	ldr	r3, [sp, #4]
    9a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a18:	2b00      	cmp	r3, #0
    9a1a:	d10d      	bne.n	9a38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9a1c:	f7f6 ffb9 	bl	992 <Port_schm_read_msr>
    9a20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9a22:	9b00      	ldr	r3, [sp, #0]
    9a24:	f003 0301 	and.w	r3, r3, #1
    9a28:	2b00      	cmp	r3, #0
    9a2a:	d100      	bne.n	9a2e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9a2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    9a2e:	490a      	ldr	r1, [pc, #40]	; (9a58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    9a30:	9b01      	ldr	r3, [sp, #4]
    9a32:	9a00      	ldr	r2, [sp, #0]
    9a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    9a38:	4a06      	ldr	r2, [pc, #24]	; (9a54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    9a3a:	9b01      	ldr	r3, [sp, #4]
    9a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a40:	1c5a      	adds	r2, r3, #1
    9a42:	4904      	ldr	r1, [pc, #16]	; (9a54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    9a44:	9b01      	ldr	r3, [sp, #4]
    9a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a4a:	bf00      	nop
    9a4c:	b003      	add	sp, #12
    9a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    9a52:	bf00      	nop
    9a54:	1fff9198 	.word	0x1fff9198
    9a58:	1fff9194 	.word	0x1fff9194

00009a5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    9a5c:	b500      	push	{lr}
    9a5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a60:	f7f7 f870 	bl	b44 <Sys_GetCoreID>
    9a64:	4603      	mov	r3, r0
    9a66:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    9a68:	4a0d      	ldr	r2, [pc, #52]	; (9aa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    9a6a:	9b01      	ldr	r3, [sp, #4]
    9a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a70:	1e5a      	subs	r2, r3, #1
    9a72:	490b      	ldr	r1, [pc, #44]	; (9aa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    9a74:	9b01      	ldr	r3, [sp, #4]
    9a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    9a7a:	4a0a      	ldr	r2, [pc, #40]	; (9aa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    9a7c:	9b01      	ldr	r3, [sp, #4]
    9a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a82:	f003 0301 	and.w	r3, r3, #1
    9a86:	2b00      	cmp	r3, #0
    9a88:	d106      	bne.n	9a98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    9a8a:	4a05      	ldr	r2, [pc, #20]	; (9aa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    9a8c:	9b01      	ldr	r3, [sp, #4]
    9a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a92:	2b00      	cmp	r3, #0
    9a94:	d100      	bne.n	9a98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9a96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9a98:	bf00      	nop
    9a9a:	b003      	add	sp, #12
    9a9c:	f85d fb04 	ldr.w	pc, [sp], #4
    9aa0:	1fff9198 	.word	0x1fff9198
    9aa4:	1fff9194 	.word	0x1fff9194

00009aa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    9aa8:	b500      	push	{lr}
    9aaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9aac:	f7f7 f84a 	bl	b44 <Sys_GetCoreID>
    9ab0:	4603      	mov	r3, r0
    9ab2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    9ab4:	4a10      	ldr	r2, [pc, #64]	; (9af8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9ab6:	9b01      	ldr	r3, [sp, #4]
    9ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9abc:	2b00      	cmp	r3, #0
    9abe:	d10d      	bne.n	9adc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9ac0:	f7f6 ff67 	bl	992 <Port_schm_read_msr>
    9ac4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9ac6:	9b00      	ldr	r3, [sp, #0]
    9ac8:	f003 0301 	and.w	r3, r3, #1
    9acc:	2b00      	cmp	r3, #0
    9ace:	d100      	bne.n	9ad2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9ad0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    9ad2:	490a      	ldr	r1, [pc, #40]	; (9afc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    9ad4:	9b01      	ldr	r3, [sp, #4]
    9ad6:	9a00      	ldr	r2, [sp, #0]
    9ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    9adc:	4a06      	ldr	r2, [pc, #24]	; (9af8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9ade:	9b01      	ldr	r3, [sp, #4]
    9ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ae4:	1c5a      	adds	r2, r3, #1
    9ae6:	4904      	ldr	r1, [pc, #16]	; (9af8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9ae8:	9b01      	ldr	r3, [sp, #4]
    9aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9aee:	bf00      	nop
    9af0:	b003      	add	sp, #12
    9af2:	f85d fb04 	ldr.w	pc, [sp], #4
    9af6:	bf00      	nop
    9af8:	1fff91a0 	.word	0x1fff91a0
    9afc:	1fff919c 	.word	0x1fff919c

00009b00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    9b00:	b500      	push	{lr}
    9b02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b04:	f7f7 f81e 	bl	b44 <Sys_GetCoreID>
    9b08:	4603      	mov	r3, r0
    9b0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    9b0c:	4a0d      	ldr	r2, [pc, #52]	; (9b44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9b0e:	9b01      	ldr	r3, [sp, #4]
    9b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b14:	1e5a      	subs	r2, r3, #1
    9b16:	490b      	ldr	r1, [pc, #44]	; (9b44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9b18:	9b01      	ldr	r3, [sp, #4]
    9b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    9b1e:	4a0a      	ldr	r2, [pc, #40]	; (9b48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    9b20:	9b01      	ldr	r3, [sp, #4]
    9b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b26:	f003 0301 	and.w	r3, r3, #1
    9b2a:	2b00      	cmp	r3, #0
    9b2c:	d106      	bne.n	9b3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    9b2e:	4a05      	ldr	r2, [pc, #20]	; (9b44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9b30:	9b01      	ldr	r3, [sp, #4]
    9b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b36:	2b00      	cmp	r3, #0
    9b38:	d100      	bne.n	9b3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9b3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9b3c:	bf00      	nop
    9b3e:	b003      	add	sp, #12
    9b40:	f85d fb04 	ldr.w	pc, [sp], #4
    9b44:	1fff91a0 	.word	0x1fff91a0
    9b48:	1fff919c 	.word	0x1fff919c

00009b4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    9b4c:	b500      	push	{lr}
    9b4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b50:	f7f6 fff8 	bl	b44 <Sys_GetCoreID>
    9b54:	4603      	mov	r3, r0
    9b56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    9b58:	4a10      	ldr	r2, [pc, #64]	; (9b9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9b5a:	9b01      	ldr	r3, [sp, #4]
    9b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b60:	2b00      	cmp	r3, #0
    9b62:	d10d      	bne.n	9b80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9b64:	f7f6 ff15 	bl	992 <Port_schm_read_msr>
    9b68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9b6a:	9b00      	ldr	r3, [sp, #0]
    9b6c:	f003 0301 	and.w	r3, r3, #1
    9b70:	2b00      	cmp	r3, #0
    9b72:	d100      	bne.n	9b76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9b74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    9b76:	490a      	ldr	r1, [pc, #40]	; (9ba0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    9b78:	9b01      	ldr	r3, [sp, #4]
    9b7a:	9a00      	ldr	r2, [sp, #0]
    9b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    9b80:	4a06      	ldr	r2, [pc, #24]	; (9b9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9b82:	9b01      	ldr	r3, [sp, #4]
    9b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b88:	1c5a      	adds	r2, r3, #1
    9b8a:	4904      	ldr	r1, [pc, #16]	; (9b9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9b8c:	9b01      	ldr	r3, [sp, #4]
    9b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9b92:	bf00      	nop
    9b94:	b003      	add	sp, #12
    9b96:	f85d fb04 	ldr.w	pc, [sp], #4
    9b9a:	bf00      	nop
    9b9c:	1fff91a8 	.word	0x1fff91a8
    9ba0:	1fff91a4 	.word	0x1fff91a4

00009ba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    9ba4:	b500      	push	{lr}
    9ba6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ba8:	f7f6 ffcc 	bl	b44 <Sys_GetCoreID>
    9bac:	4603      	mov	r3, r0
    9bae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    9bb0:	4a0d      	ldr	r2, [pc, #52]	; (9be8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9bb2:	9b01      	ldr	r3, [sp, #4]
    9bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bb8:	1e5a      	subs	r2, r3, #1
    9bba:	490b      	ldr	r1, [pc, #44]	; (9be8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9bbc:	9b01      	ldr	r3, [sp, #4]
    9bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    9bc2:	4a0a      	ldr	r2, [pc, #40]	; (9bec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    9bc4:	9b01      	ldr	r3, [sp, #4]
    9bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bca:	f003 0301 	and.w	r3, r3, #1
    9bce:	2b00      	cmp	r3, #0
    9bd0:	d106      	bne.n	9be0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    9bd2:	4a05      	ldr	r2, [pc, #20]	; (9be8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9bd4:	9b01      	ldr	r3, [sp, #4]
    9bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bda:	2b00      	cmp	r3, #0
    9bdc:	d100      	bne.n	9be0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9bde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9be0:	bf00      	nop
    9be2:	b003      	add	sp, #12
    9be4:	f85d fb04 	ldr.w	pc, [sp], #4
    9be8:	1fff91a8 	.word	0x1fff91a8
    9bec:	1fff91a4 	.word	0x1fff91a4

00009bf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    9bf0:	b500      	push	{lr}
    9bf2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9bf4:	f7f6 ffa6 	bl	b44 <Sys_GetCoreID>
    9bf8:	4603      	mov	r3, r0
    9bfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    9bfc:	4a10      	ldr	r2, [pc, #64]	; (9c40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9bfe:	9b01      	ldr	r3, [sp, #4]
    9c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c04:	2b00      	cmp	r3, #0
    9c06:	d10d      	bne.n	9c24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9c08:	f7f6 fec3 	bl	992 <Port_schm_read_msr>
    9c0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9c0e:	9b00      	ldr	r3, [sp, #0]
    9c10:	f003 0301 	and.w	r3, r3, #1
    9c14:	2b00      	cmp	r3, #0
    9c16:	d100      	bne.n	9c1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9c18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    9c1a:	490a      	ldr	r1, [pc, #40]	; (9c44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    9c1c:	9b01      	ldr	r3, [sp, #4]
    9c1e:	9a00      	ldr	r2, [sp, #0]
    9c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    9c24:	4a06      	ldr	r2, [pc, #24]	; (9c40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9c26:	9b01      	ldr	r3, [sp, #4]
    9c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c2c:	1c5a      	adds	r2, r3, #1
    9c2e:	4904      	ldr	r1, [pc, #16]	; (9c40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9c30:	9b01      	ldr	r3, [sp, #4]
    9c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9c36:	bf00      	nop
    9c38:	b003      	add	sp, #12
    9c3a:	f85d fb04 	ldr.w	pc, [sp], #4
    9c3e:	bf00      	nop
    9c40:	1fff91b0 	.word	0x1fff91b0
    9c44:	1fff91ac 	.word	0x1fff91ac

00009c48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    9c48:	b500      	push	{lr}
    9c4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c4c:	f7f6 ff7a 	bl	b44 <Sys_GetCoreID>
    9c50:	4603      	mov	r3, r0
    9c52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    9c54:	4a0d      	ldr	r2, [pc, #52]	; (9c8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    9c56:	9b01      	ldr	r3, [sp, #4]
    9c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c5c:	1e5a      	subs	r2, r3, #1
    9c5e:	490b      	ldr	r1, [pc, #44]	; (9c8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    9c60:	9b01      	ldr	r3, [sp, #4]
    9c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    9c66:	4a0a      	ldr	r2, [pc, #40]	; (9c90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    9c68:	9b01      	ldr	r3, [sp, #4]
    9c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c6e:	f003 0301 	and.w	r3, r3, #1
    9c72:	2b00      	cmp	r3, #0
    9c74:	d106      	bne.n	9c84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    9c76:	4a05      	ldr	r2, [pc, #20]	; (9c8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    9c78:	9b01      	ldr	r3, [sp, #4]
    9c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c7e:	2b00      	cmp	r3, #0
    9c80:	d100      	bne.n	9c84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9c82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9c84:	bf00      	nop
    9c86:	b003      	add	sp, #12
    9c88:	f85d fb04 	ldr.w	pc, [sp], #4
    9c8c:	1fff91b0 	.word	0x1fff91b0
    9c90:	1fff91ac 	.word	0x1fff91ac

00009c94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    9c94:	b500      	push	{lr}
    9c96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c98:	f7f6 ff54 	bl	b44 <Sys_GetCoreID>
    9c9c:	4603      	mov	r3, r0
    9c9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    9ca0:	4a10      	ldr	r2, [pc, #64]	; (9ce4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9ca2:	9b01      	ldr	r3, [sp, #4]
    9ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d10d      	bne.n	9cc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9cac:	f7f6 fe71 	bl	992 <Port_schm_read_msr>
    9cb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9cb2:	9b00      	ldr	r3, [sp, #0]
    9cb4:	f003 0301 	and.w	r3, r3, #1
    9cb8:	2b00      	cmp	r3, #0
    9cba:	d100      	bne.n	9cbe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9cbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    9cbe:	490a      	ldr	r1, [pc, #40]	; (9ce8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    9cc0:	9b01      	ldr	r3, [sp, #4]
    9cc2:	9a00      	ldr	r2, [sp, #0]
    9cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    9cc8:	4a06      	ldr	r2, [pc, #24]	; (9ce4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9cca:	9b01      	ldr	r3, [sp, #4]
    9ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cd0:	1c5a      	adds	r2, r3, #1
    9cd2:	4904      	ldr	r1, [pc, #16]	; (9ce4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9cd4:	9b01      	ldr	r3, [sp, #4]
    9cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9cda:	bf00      	nop
    9cdc:	b003      	add	sp, #12
    9cde:	f85d fb04 	ldr.w	pc, [sp], #4
    9ce2:	bf00      	nop
    9ce4:	1fff91b8 	.word	0x1fff91b8
    9ce8:	1fff91b4 	.word	0x1fff91b4

00009cec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    9cec:	b500      	push	{lr}
    9cee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9cf0:	f7f6 ff28 	bl	b44 <Sys_GetCoreID>
    9cf4:	4603      	mov	r3, r0
    9cf6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    9cf8:	4a0d      	ldr	r2, [pc, #52]	; (9d30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9cfa:	9b01      	ldr	r3, [sp, #4]
    9cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d00:	1e5a      	subs	r2, r3, #1
    9d02:	490b      	ldr	r1, [pc, #44]	; (9d30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9d04:	9b01      	ldr	r3, [sp, #4]
    9d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    9d0a:	4a0a      	ldr	r2, [pc, #40]	; (9d34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    9d0c:	9b01      	ldr	r3, [sp, #4]
    9d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d12:	f003 0301 	and.w	r3, r3, #1
    9d16:	2b00      	cmp	r3, #0
    9d18:	d106      	bne.n	9d28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    9d1a:	4a05      	ldr	r2, [pc, #20]	; (9d30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9d1c:	9b01      	ldr	r3, [sp, #4]
    9d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d22:	2b00      	cmp	r3, #0
    9d24:	d100      	bne.n	9d28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9d26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9d28:	bf00      	nop
    9d2a:	b003      	add	sp, #12
    9d2c:	f85d fb04 	ldr.w	pc, [sp], #4
    9d30:	1fff91b8 	.word	0x1fff91b8
    9d34:	1fff91b4 	.word	0x1fff91b4

00009d38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    9d38:	b500      	push	{lr}
    9d3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d3c:	f7f6 ff02 	bl	b44 <Sys_GetCoreID>
    9d40:	4603      	mov	r3, r0
    9d42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    9d44:	4a10      	ldr	r2, [pc, #64]	; (9d88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    9d46:	9b01      	ldr	r3, [sp, #4]
    9d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d4c:	2b00      	cmp	r3, #0
    9d4e:	d10d      	bne.n	9d6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9d50:	f7f6 fe1f 	bl	992 <Port_schm_read_msr>
    9d54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9d56:	9b00      	ldr	r3, [sp, #0]
    9d58:	f003 0301 	and.w	r3, r3, #1
    9d5c:	2b00      	cmp	r3, #0
    9d5e:	d100      	bne.n	9d62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9d60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    9d62:	490a      	ldr	r1, [pc, #40]	; (9d8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    9d64:	9b01      	ldr	r3, [sp, #4]
    9d66:	9a00      	ldr	r2, [sp, #0]
    9d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    9d6c:	4a06      	ldr	r2, [pc, #24]	; (9d88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    9d6e:	9b01      	ldr	r3, [sp, #4]
    9d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d74:	1c5a      	adds	r2, r3, #1
    9d76:	4904      	ldr	r1, [pc, #16]	; (9d88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    9d78:	9b01      	ldr	r3, [sp, #4]
    9d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9d7e:	bf00      	nop
    9d80:	b003      	add	sp, #12
    9d82:	f85d fb04 	ldr.w	pc, [sp], #4
    9d86:	bf00      	nop
    9d88:	1fff91c0 	.word	0x1fff91c0
    9d8c:	1fff91bc 	.word	0x1fff91bc

00009d90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    9d90:	b500      	push	{lr}
    9d92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d94:	f7f6 fed6 	bl	b44 <Sys_GetCoreID>
    9d98:	4603      	mov	r3, r0
    9d9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    9d9c:	4a0d      	ldr	r2, [pc, #52]	; (9dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9d9e:	9b01      	ldr	r3, [sp, #4]
    9da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9da4:	1e5a      	subs	r2, r3, #1
    9da6:	490b      	ldr	r1, [pc, #44]	; (9dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9da8:	9b01      	ldr	r3, [sp, #4]
    9daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    9dae:	4a0a      	ldr	r2, [pc, #40]	; (9dd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    9db0:	9b01      	ldr	r3, [sp, #4]
    9db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9db6:	f003 0301 	and.w	r3, r3, #1
    9dba:	2b00      	cmp	r3, #0
    9dbc:	d106      	bne.n	9dcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    9dbe:	4a05      	ldr	r2, [pc, #20]	; (9dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9dc0:	9b01      	ldr	r3, [sp, #4]
    9dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dc6:	2b00      	cmp	r3, #0
    9dc8:	d100      	bne.n	9dcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9dca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9dcc:	bf00      	nop
    9dce:	b003      	add	sp, #12
    9dd0:	f85d fb04 	ldr.w	pc, [sp], #4
    9dd4:	1fff91c0 	.word	0x1fff91c0
    9dd8:	1fff91bc 	.word	0x1fff91bc

00009ddc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    9ddc:	b500      	push	{lr}
    9dde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9de0:	f7f6 feb0 	bl	b44 <Sys_GetCoreID>
    9de4:	4603      	mov	r3, r0
    9de6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    9de8:	4a10      	ldr	r2, [pc, #64]	; (9e2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9dea:	9b01      	ldr	r3, [sp, #4]
    9dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9df0:	2b00      	cmp	r3, #0
    9df2:	d10d      	bne.n	9e10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9df4:	f7f6 fdcd 	bl	992 <Port_schm_read_msr>
    9df8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9dfa:	9b00      	ldr	r3, [sp, #0]
    9dfc:	f003 0301 	and.w	r3, r3, #1
    9e00:	2b00      	cmp	r3, #0
    9e02:	d100      	bne.n	9e06 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9e04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    9e06:	490a      	ldr	r1, [pc, #40]	; (9e30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    9e08:	9b01      	ldr	r3, [sp, #4]
    9e0a:	9a00      	ldr	r2, [sp, #0]
    9e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    9e10:	4a06      	ldr	r2, [pc, #24]	; (9e2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9e12:	9b01      	ldr	r3, [sp, #4]
    9e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e18:	1c5a      	adds	r2, r3, #1
    9e1a:	4904      	ldr	r1, [pc, #16]	; (9e2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9e1c:	9b01      	ldr	r3, [sp, #4]
    9e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9e22:	bf00      	nop
    9e24:	b003      	add	sp, #12
    9e26:	f85d fb04 	ldr.w	pc, [sp], #4
    9e2a:	bf00      	nop
    9e2c:	1fff91c8 	.word	0x1fff91c8
    9e30:	1fff91c4 	.word	0x1fff91c4

00009e34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    9e34:	b500      	push	{lr}
    9e36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e38:	f7f6 fe84 	bl	b44 <Sys_GetCoreID>
    9e3c:	4603      	mov	r3, r0
    9e3e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    9e40:	4a0d      	ldr	r2, [pc, #52]	; (9e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9e42:	9b01      	ldr	r3, [sp, #4]
    9e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e48:	1e5a      	subs	r2, r3, #1
    9e4a:	490b      	ldr	r1, [pc, #44]	; (9e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9e4c:	9b01      	ldr	r3, [sp, #4]
    9e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    9e52:	4a0a      	ldr	r2, [pc, #40]	; (9e7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    9e54:	9b01      	ldr	r3, [sp, #4]
    9e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e5a:	f003 0301 	and.w	r3, r3, #1
    9e5e:	2b00      	cmp	r3, #0
    9e60:	d106      	bne.n	9e70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    9e62:	4a05      	ldr	r2, [pc, #20]	; (9e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9e64:	9b01      	ldr	r3, [sp, #4]
    9e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e6a:	2b00      	cmp	r3, #0
    9e6c:	d100      	bne.n	9e70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9e6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9e70:	bf00      	nop
    9e72:	b003      	add	sp, #12
    9e74:	f85d fb04 	ldr.w	pc, [sp], #4
    9e78:	1fff91c8 	.word	0x1fff91c8
    9e7c:	1fff91c4 	.word	0x1fff91c4

00009e80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    9e80:	b500      	push	{lr}
    9e82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e84:	f7f6 fe5e 	bl	b44 <Sys_GetCoreID>
    9e88:	4603      	mov	r3, r0
    9e8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    9e8c:	4a10      	ldr	r2, [pc, #64]	; (9ed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9e8e:	9b01      	ldr	r3, [sp, #4]
    9e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e94:	2b00      	cmp	r3, #0
    9e96:	d10d      	bne.n	9eb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9e98:	f7f6 fd7b 	bl	992 <Port_schm_read_msr>
    9e9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9e9e:	9b00      	ldr	r3, [sp, #0]
    9ea0:	f003 0301 	and.w	r3, r3, #1
    9ea4:	2b00      	cmp	r3, #0
    9ea6:	d100      	bne.n	9eaa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9ea8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    9eaa:	490a      	ldr	r1, [pc, #40]	; (9ed4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    9eac:	9b01      	ldr	r3, [sp, #4]
    9eae:	9a00      	ldr	r2, [sp, #0]
    9eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    9eb4:	4a06      	ldr	r2, [pc, #24]	; (9ed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9eb6:	9b01      	ldr	r3, [sp, #4]
    9eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ebc:	1c5a      	adds	r2, r3, #1
    9ebe:	4904      	ldr	r1, [pc, #16]	; (9ed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9ec0:	9b01      	ldr	r3, [sp, #4]
    9ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9ec6:	bf00      	nop
    9ec8:	b003      	add	sp, #12
    9eca:	f85d fb04 	ldr.w	pc, [sp], #4
    9ece:	bf00      	nop
    9ed0:	1fff91d0 	.word	0x1fff91d0
    9ed4:	1fff91cc 	.word	0x1fff91cc

00009ed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    9ed8:	b500      	push	{lr}
    9eda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9edc:	f7f6 fe32 	bl	b44 <Sys_GetCoreID>
    9ee0:	4603      	mov	r3, r0
    9ee2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    9ee4:	4a0d      	ldr	r2, [pc, #52]	; (9f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9ee6:	9b01      	ldr	r3, [sp, #4]
    9ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eec:	1e5a      	subs	r2, r3, #1
    9eee:	490b      	ldr	r1, [pc, #44]	; (9f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9ef0:	9b01      	ldr	r3, [sp, #4]
    9ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    9ef6:	4a0a      	ldr	r2, [pc, #40]	; (9f20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    9ef8:	9b01      	ldr	r3, [sp, #4]
    9efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9efe:	f003 0301 	and.w	r3, r3, #1
    9f02:	2b00      	cmp	r3, #0
    9f04:	d106      	bne.n	9f14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    9f06:	4a05      	ldr	r2, [pc, #20]	; (9f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9f08:	9b01      	ldr	r3, [sp, #4]
    9f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f0e:	2b00      	cmp	r3, #0
    9f10:	d100      	bne.n	9f14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9f12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9f14:	bf00      	nop
    9f16:	b003      	add	sp, #12
    9f18:	f85d fb04 	ldr.w	pc, [sp], #4
    9f1c:	1fff91d0 	.word	0x1fff91d0
    9f20:	1fff91cc 	.word	0x1fff91cc

00009f24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    9f24:	b500      	push	{lr}
    9f26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f28:	f7f6 fe0c 	bl	b44 <Sys_GetCoreID>
    9f2c:	4603      	mov	r3, r0
    9f2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    9f30:	4a10      	ldr	r2, [pc, #64]	; (9f74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9f32:	9b01      	ldr	r3, [sp, #4]
    9f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f38:	2b00      	cmp	r3, #0
    9f3a:	d10d      	bne.n	9f58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9f3c:	f7f6 fd29 	bl	992 <Port_schm_read_msr>
    9f40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9f42:	9b00      	ldr	r3, [sp, #0]
    9f44:	f003 0301 	and.w	r3, r3, #1
    9f48:	2b00      	cmp	r3, #0
    9f4a:	d100      	bne.n	9f4e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9f4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    9f4e:	490a      	ldr	r1, [pc, #40]	; (9f78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    9f50:	9b01      	ldr	r3, [sp, #4]
    9f52:	9a00      	ldr	r2, [sp, #0]
    9f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    9f58:	4a06      	ldr	r2, [pc, #24]	; (9f74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9f5a:	9b01      	ldr	r3, [sp, #4]
    9f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f60:	1c5a      	adds	r2, r3, #1
    9f62:	4904      	ldr	r1, [pc, #16]	; (9f74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9f64:	9b01      	ldr	r3, [sp, #4]
    9f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9f6a:	bf00      	nop
    9f6c:	b003      	add	sp, #12
    9f6e:	f85d fb04 	ldr.w	pc, [sp], #4
    9f72:	bf00      	nop
    9f74:	1fff91d8 	.word	0x1fff91d8
    9f78:	1fff91d4 	.word	0x1fff91d4

00009f7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    9f7c:	b500      	push	{lr}
    9f7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f80:	f7f6 fde0 	bl	b44 <Sys_GetCoreID>
    9f84:	4603      	mov	r3, r0
    9f86:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    9f88:	4a0d      	ldr	r2, [pc, #52]	; (9fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9f8a:	9b01      	ldr	r3, [sp, #4]
    9f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f90:	1e5a      	subs	r2, r3, #1
    9f92:	490b      	ldr	r1, [pc, #44]	; (9fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9f94:	9b01      	ldr	r3, [sp, #4]
    9f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    9f9a:	4a0a      	ldr	r2, [pc, #40]	; (9fc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    9f9c:	9b01      	ldr	r3, [sp, #4]
    9f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fa2:	f003 0301 	and.w	r3, r3, #1
    9fa6:	2b00      	cmp	r3, #0
    9fa8:	d106      	bne.n	9fb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    9faa:	4a05      	ldr	r2, [pc, #20]	; (9fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9fac:	9b01      	ldr	r3, [sp, #4]
    9fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fb2:	2b00      	cmp	r3, #0
    9fb4:	d100      	bne.n	9fb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9fb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9fb8:	bf00      	nop
    9fba:	b003      	add	sp, #12
    9fbc:	f85d fb04 	ldr.w	pc, [sp], #4
    9fc0:	1fff91d8 	.word	0x1fff91d8
    9fc4:	1fff91d4 	.word	0x1fff91d4

00009fc8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
    9fc8:	b500      	push	{lr}
    9fca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9fcc:	f7f6 fdba 	bl	b44 <Sys_GetCoreID>
    9fd0:	4603      	mov	r3, r0
    9fd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId])
    9fd4:	4a10      	ldr	r2, [pc, #64]	; (a018 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
    9fd6:	9b01      	ldr	r3, [sp, #4]
    9fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fdc:	2b00      	cmp	r3, #0
    9fde:	d10d      	bne.n	9ffc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9fe0:	f7f6 fce0 	bl	9a4 <Pwm_schm_read_msr>
    9fe4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9fe6:	9b00      	ldr	r3, [sp, #0]
    9fe8:	f003 0301 	and.w	r3, r3, #1
    9fec:	2b00      	cmp	r3, #0
    9fee:	d100      	bne.n	9ff2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9ff0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    9ff2:	490a      	ldr	r1, [pc, #40]	; (a01c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
    9ff4:	9b01      	ldr	r3, [sp, #4]
    9ff6:	9a00      	ldr	r2, [sp, #0]
    9ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]++;
    9ffc:	4a06      	ldr	r2, [pc, #24]	; (a018 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
    9ffe:	9b01      	ldr	r3, [sp, #4]
    a000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a004:	1c5a      	adds	r2, r3, #1
    a006:	4904      	ldr	r1, [pc, #16]	; (a018 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
    a008:	9b01      	ldr	r3, [sp, #4]
    a00a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a00e:	bf00      	nop
    a010:	b003      	add	sp, #12
    a012:	f85d fb04 	ldr.w	pc, [sp], #4
    a016:	bf00      	nop
    a018:	1fff91e0 	.word	0x1fff91e0
    a01c:	1fff91dc 	.word	0x1fff91dc

0000a020 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
    a020:	b500      	push	{lr}
    a022:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a024:	f7f6 fd8e 	bl	b44 <Sys_GetCoreID>
    a028:	4603      	mov	r3, r0
    a02a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]--;
    a02c:	4a0d      	ldr	r2, [pc, #52]	; (a064 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
    a02e:	9b01      	ldr	r3, [sp, #4]
    a030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a034:	1e5a      	subs	r2, r3, #1
    a036:	490b      	ldr	r1, [pc, #44]	; (a064 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
    a038:	9b01      	ldr	r3, [sp, #4]
    a03a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    a03e:	4a0a      	ldr	r2, [pc, #40]	; (a068 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
    a040:	9b01      	ldr	r3, [sp, #4]
    a042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a046:	f003 0301 	and.w	r3, r3, #1
    a04a:	2b00      	cmp	r3, #0
    a04c:	d106      	bne.n	a05c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    a04e:	4a05      	ldr	r2, [pc, #20]	; (a064 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
    a050:	9b01      	ldr	r3, [sp, #4]
    a052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a056:	2b00      	cmp	r3, #0
    a058:	d100      	bne.n	a05c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a05a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a05c:	bf00      	nop
    a05e:	b003      	add	sp, #12
    a060:	f85d fb04 	ldr.w	pc, [sp], #4
    a064:	1fff91e0 	.word	0x1fff91e0
    a068:	1fff91dc 	.word	0x1fff91dc

0000a06c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
    a06c:	b500      	push	{lr}
    a06e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a070:	f7f6 fd68 	bl	b44 <Sys_GetCoreID>
    a074:	4603      	mov	r3, r0
    a076:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId])
    a078:	4a10      	ldr	r2, [pc, #64]	; (a0bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
    a07a:	9b01      	ldr	r3, [sp, #4]
    a07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a080:	2b00      	cmp	r3, #0
    a082:	d10d      	bne.n	a0a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a084:	f7f6 fc8e 	bl	9a4 <Pwm_schm_read_msr>
    a088:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a08a:	9b00      	ldr	r3, [sp, #0]
    a08c:	f003 0301 	and.w	r3, r3, #1
    a090:	2b00      	cmp	r3, #0
    a092:	d100      	bne.n	a096 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a094:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    a096:	490a      	ldr	r1, [pc, #40]	; (a0c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
    a098:	9b01      	ldr	r3, [sp, #4]
    a09a:	9a00      	ldr	r2, [sp, #0]
    a09c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]++;
    a0a0:	4a06      	ldr	r2, [pc, #24]	; (a0bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
    a0a2:	9b01      	ldr	r3, [sp, #4]
    a0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0a8:	1c5a      	adds	r2, r3, #1
    a0aa:	4904      	ldr	r1, [pc, #16]	; (a0bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
    a0ac:	9b01      	ldr	r3, [sp, #4]
    a0ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a0b2:	bf00      	nop
    a0b4:	b003      	add	sp, #12
    a0b6:	f85d fb04 	ldr.w	pc, [sp], #4
    a0ba:	bf00      	nop
    a0bc:	1fff91e8 	.word	0x1fff91e8
    a0c0:	1fff91e4 	.word	0x1fff91e4

0000a0c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
    a0c4:	b500      	push	{lr}
    a0c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0c8:	f7f6 fd3c 	bl	b44 <Sys_GetCoreID>
    a0cc:	4603      	mov	r3, r0
    a0ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]--;
    a0d0:	4a0d      	ldr	r2, [pc, #52]	; (a108 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
    a0d2:	9b01      	ldr	r3, [sp, #4]
    a0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0d8:	1e5a      	subs	r2, r3, #1
    a0da:	490b      	ldr	r1, [pc, #44]	; (a108 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
    a0dc:	9b01      	ldr	r3, [sp, #4]
    a0de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    a0e2:	4a0a      	ldr	r2, [pc, #40]	; (a10c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
    a0e4:	9b01      	ldr	r3, [sp, #4]
    a0e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ea:	f003 0301 	and.w	r3, r3, #1
    a0ee:	2b00      	cmp	r3, #0
    a0f0:	d106      	bne.n	a100 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    a0f2:	4a05      	ldr	r2, [pc, #20]	; (a108 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
    a0f4:	9b01      	ldr	r3, [sp, #4]
    a0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	d100      	bne.n	a100 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a0fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a100:	bf00      	nop
    a102:	b003      	add	sp, #12
    a104:	f85d fb04 	ldr.w	pc, [sp], #4
    a108:	1fff91e8 	.word	0x1fff91e8
    a10c:	1fff91e4 	.word	0x1fff91e4

0000a110 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
    a110:	b500      	push	{lr}
    a112:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a114:	f7f6 fd16 	bl	b44 <Sys_GetCoreID>
    a118:	4603      	mov	r3, r0
    a11a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId])
    a11c:	4a10      	ldr	r2, [pc, #64]	; (a160 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
    a11e:	9b01      	ldr	r3, [sp, #4]
    a120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a124:	2b00      	cmp	r3, #0
    a126:	d10d      	bne.n	a144 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a128:	f7f6 fc3c 	bl	9a4 <Pwm_schm_read_msr>
    a12c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a12e:	9b00      	ldr	r3, [sp, #0]
    a130:	f003 0301 	and.w	r3, r3, #1
    a134:	2b00      	cmp	r3, #0
    a136:	d100      	bne.n	a13a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a138:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    a13a:	490a      	ldr	r1, [pc, #40]	; (a164 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
    a13c:	9b01      	ldr	r3, [sp, #4]
    a13e:	9a00      	ldr	r2, [sp, #0]
    a140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]++;
    a144:	4a06      	ldr	r2, [pc, #24]	; (a160 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
    a146:	9b01      	ldr	r3, [sp, #4]
    a148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a14c:	1c5a      	adds	r2, r3, #1
    a14e:	4904      	ldr	r1, [pc, #16]	; (a160 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
    a150:	9b01      	ldr	r3, [sp, #4]
    a152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a156:	bf00      	nop
    a158:	b003      	add	sp, #12
    a15a:	f85d fb04 	ldr.w	pc, [sp], #4
    a15e:	bf00      	nop
    a160:	1fff91f0 	.word	0x1fff91f0
    a164:	1fff91ec 	.word	0x1fff91ec

0000a168 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
    a168:	b500      	push	{lr}
    a16a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a16c:	f7f6 fcea 	bl	b44 <Sys_GetCoreID>
    a170:	4603      	mov	r3, r0
    a172:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]--;
    a174:	4a0d      	ldr	r2, [pc, #52]	; (a1ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
    a176:	9b01      	ldr	r3, [sp, #4]
    a178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a17c:	1e5a      	subs	r2, r3, #1
    a17e:	490b      	ldr	r1, [pc, #44]	; (a1ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
    a180:	9b01      	ldr	r3, [sp, #4]
    a182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    a186:	4a0a      	ldr	r2, [pc, #40]	; (a1b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
    a188:	9b01      	ldr	r3, [sp, #4]
    a18a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a18e:	f003 0301 	and.w	r3, r3, #1
    a192:	2b00      	cmp	r3, #0
    a194:	d106      	bne.n	a1a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    a196:	4a05      	ldr	r2, [pc, #20]	; (a1ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
    a198:	9b01      	ldr	r3, [sp, #4]
    a19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a19e:	2b00      	cmp	r3, #0
    a1a0:	d100      	bne.n	a1a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a1a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a1a4:	bf00      	nop
    a1a6:	b003      	add	sp, #12
    a1a8:	f85d fb04 	ldr.w	pc, [sp], #4
    a1ac:	1fff91f0 	.word	0x1fff91f0
    a1b0:	1fff91ec 	.word	0x1fff91ec

0000a1b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
    a1b4:	b500      	push	{lr}
    a1b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a1b8:	f7f6 fcc4 	bl	b44 <Sys_GetCoreID>
    a1bc:	4603      	mov	r3, r0
    a1be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId])
    a1c0:	4a10      	ldr	r2, [pc, #64]	; (a204 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
    a1c2:	9b01      	ldr	r3, [sp, #4]
    a1c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1c8:	2b00      	cmp	r3, #0
    a1ca:	d10d      	bne.n	a1e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a1cc:	f7f6 fbea 	bl	9a4 <Pwm_schm_read_msr>
    a1d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a1d2:	9b00      	ldr	r3, [sp, #0]
    a1d4:	f003 0301 	and.w	r3, r3, #1
    a1d8:	2b00      	cmp	r3, #0
    a1da:	d100      	bne.n	a1de <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a1dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    a1de:	490a      	ldr	r1, [pc, #40]	; (a208 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
    a1e0:	9b01      	ldr	r3, [sp, #4]
    a1e2:	9a00      	ldr	r2, [sp, #0]
    a1e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]++;
    a1e8:	4a06      	ldr	r2, [pc, #24]	; (a204 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
    a1ea:	9b01      	ldr	r3, [sp, #4]
    a1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1f0:	1c5a      	adds	r2, r3, #1
    a1f2:	4904      	ldr	r1, [pc, #16]	; (a204 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
    a1f4:	9b01      	ldr	r3, [sp, #4]
    a1f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a1fa:	bf00      	nop
    a1fc:	b003      	add	sp, #12
    a1fe:	f85d fb04 	ldr.w	pc, [sp], #4
    a202:	bf00      	nop
    a204:	1fff91f8 	.word	0x1fff91f8
    a208:	1fff91f4 	.word	0x1fff91f4

0000a20c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
    a20c:	b500      	push	{lr}
    a20e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a210:	f7f6 fc98 	bl	b44 <Sys_GetCoreID>
    a214:	4603      	mov	r3, r0
    a216:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]--;
    a218:	4a0d      	ldr	r2, [pc, #52]	; (a250 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
    a21a:	9b01      	ldr	r3, [sp, #4]
    a21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a220:	1e5a      	subs	r2, r3, #1
    a222:	490b      	ldr	r1, [pc, #44]	; (a250 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
    a224:	9b01      	ldr	r3, [sp, #4]
    a226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    a22a:	4a0a      	ldr	r2, [pc, #40]	; (a254 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
    a22c:	9b01      	ldr	r3, [sp, #4]
    a22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a232:	f003 0301 	and.w	r3, r3, #1
    a236:	2b00      	cmp	r3, #0
    a238:	d106      	bne.n	a248 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    a23a:	4a05      	ldr	r2, [pc, #20]	; (a250 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
    a23c:	9b01      	ldr	r3, [sp, #4]
    a23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a242:	2b00      	cmp	r3, #0
    a244:	d100      	bne.n	a248 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a246:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a248:	bf00      	nop
    a24a:	b003      	add	sp, #12
    a24c:	f85d fb04 	ldr.w	pc, [sp], #4
    a250:	1fff91f8 	.word	0x1fff91f8
    a254:	1fff91f4 	.word	0x1fff91f4

0000a258 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
    a258:	b500      	push	{lr}
    a25a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a25c:	f7f6 fc72 	bl	b44 <Sys_GetCoreID>
    a260:	4603      	mov	r3, r0
    a262:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId])
    a264:	4a10      	ldr	r2, [pc, #64]	; (a2a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
    a266:	9b01      	ldr	r3, [sp, #4]
    a268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a26c:	2b00      	cmp	r3, #0
    a26e:	d10d      	bne.n	a28c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a270:	f7f6 fb98 	bl	9a4 <Pwm_schm_read_msr>
    a274:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a276:	9b00      	ldr	r3, [sp, #0]
    a278:	f003 0301 	and.w	r3, r3, #1
    a27c:	2b00      	cmp	r3, #0
    a27e:	d100      	bne.n	a282 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a280:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    a282:	490a      	ldr	r1, [pc, #40]	; (a2ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
    a284:	9b01      	ldr	r3, [sp, #4]
    a286:	9a00      	ldr	r2, [sp, #0]
    a288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]++;
    a28c:	4a06      	ldr	r2, [pc, #24]	; (a2a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
    a28e:	9b01      	ldr	r3, [sp, #4]
    a290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a294:	1c5a      	adds	r2, r3, #1
    a296:	4904      	ldr	r1, [pc, #16]	; (a2a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
    a298:	9b01      	ldr	r3, [sp, #4]
    a29a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a29e:	bf00      	nop
    a2a0:	b003      	add	sp, #12
    a2a2:	f85d fb04 	ldr.w	pc, [sp], #4
    a2a6:	bf00      	nop
    a2a8:	1fff9200 	.word	0x1fff9200
    a2ac:	1fff91fc 	.word	0x1fff91fc

0000a2b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
    a2b0:	b500      	push	{lr}
    a2b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a2b4:	f7f6 fc46 	bl	b44 <Sys_GetCoreID>
    a2b8:	4603      	mov	r3, r0
    a2ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]--;
    a2bc:	4a0d      	ldr	r2, [pc, #52]	; (a2f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
    a2be:	9b01      	ldr	r3, [sp, #4]
    a2c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2c4:	1e5a      	subs	r2, r3, #1
    a2c6:	490b      	ldr	r1, [pc, #44]	; (a2f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
    a2c8:	9b01      	ldr	r3, [sp, #4]
    a2ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    a2ce:	4a0a      	ldr	r2, [pc, #40]	; (a2f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
    a2d0:	9b01      	ldr	r3, [sp, #4]
    a2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2d6:	f003 0301 	and.w	r3, r3, #1
    a2da:	2b00      	cmp	r3, #0
    a2dc:	d106      	bne.n	a2ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    a2de:	4a05      	ldr	r2, [pc, #20]	; (a2f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
    a2e0:	9b01      	ldr	r3, [sp, #4]
    a2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	d100      	bne.n	a2ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a2ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a2ec:	bf00      	nop
    a2ee:	b003      	add	sp, #12
    a2f0:	f85d fb04 	ldr.w	pc, [sp], #4
    a2f4:	1fff9200 	.word	0x1fff9200
    a2f8:	1fff91fc 	.word	0x1fff91fc

0000a2fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
    a2fc:	b500      	push	{lr}
    a2fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a300:	f7f6 fc20 	bl	b44 <Sys_GetCoreID>
    a304:	4603      	mov	r3, r0
    a306:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId])
    a308:	4a10      	ldr	r2, [pc, #64]	; (a34c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
    a30a:	9b01      	ldr	r3, [sp, #4]
    a30c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a310:	2b00      	cmp	r3, #0
    a312:	d10d      	bne.n	a330 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a314:	f7f6 fb46 	bl	9a4 <Pwm_schm_read_msr>
    a318:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a31a:	9b00      	ldr	r3, [sp, #0]
    a31c:	f003 0301 	and.w	r3, r3, #1
    a320:	2b00      	cmp	r3, #0
    a322:	d100      	bne.n	a326 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a324:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    a326:	490a      	ldr	r1, [pc, #40]	; (a350 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
    a328:	9b01      	ldr	r3, [sp, #4]
    a32a:	9a00      	ldr	r2, [sp, #0]
    a32c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]++;
    a330:	4a06      	ldr	r2, [pc, #24]	; (a34c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
    a332:	9b01      	ldr	r3, [sp, #4]
    a334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a338:	1c5a      	adds	r2, r3, #1
    a33a:	4904      	ldr	r1, [pc, #16]	; (a34c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
    a33c:	9b01      	ldr	r3, [sp, #4]
    a33e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a342:	bf00      	nop
    a344:	b003      	add	sp, #12
    a346:	f85d fb04 	ldr.w	pc, [sp], #4
    a34a:	bf00      	nop
    a34c:	1fff9208 	.word	0x1fff9208
    a350:	1fff9204 	.word	0x1fff9204

0000a354 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
    a354:	b500      	push	{lr}
    a356:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a358:	f7f6 fbf4 	bl	b44 <Sys_GetCoreID>
    a35c:	4603      	mov	r3, r0
    a35e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]--;
    a360:	4a0d      	ldr	r2, [pc, #52]	; (a398 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
    a362:	9b01      	ldr	r3, [sp, #4]
    a364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a368:	1e5a      	subs	r2, r3, #1
    a36a:	490b      	ldr	r1, [pc, #44]	; (a398 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
    a36c:	9b01      	ldr	r3, [sp, #4]
    a36e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    a372:	4a0a      	ldr	r2, [pc, #40]	; (a39c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
    a374:	9b01      	ldr	r3, [sp, #4]
    a376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a37a:	f003 0301 	and.w	r3, r3, #1
    a37e:	2b00      	cmp	r3, #0
    a380:	d106      	bne.n	a390 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    a382:	4a05      	ldr	r2, [pc, #20]	; (a398 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
    a384:	9b01      	ldr	r3, [sp, #4]
    a386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a38a:	2b00      	cmp	r3, #0
    a38c:	d100      	bne.n	a390 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a38e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a390:	bf00      	nop
    a392:	b003      	add	sp, #12
    a394:	f85d fb04 	ldr.w	pc, [sp], #4
    a398:	1fff9208 	.word	0x1fff9208
    a39c:	1fff9204 	.word	0x1fff9204

0000a3a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
    a3a0:	b500      	push	{lr}
    a3a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a3a4:	f7f6 fbce 	bl	b44 <Sys_GetCoreID>
    a3a8:	4603      	mov	r3, r0
    a3aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId])
    a3ac:	4a10      	ldr	r2, [pc, #64]	; (a3f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
    a3ae:	9b01      	ldr	r3, [sp, #4]
    a3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3b4:	2b00      	cmp	r3, #0
    a3b6:	d10d      	bne.n	a3d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a3b8:	f7f6 faf4 	bl	9a4 <Pwm_schm_read_msr>
    a3bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a3be:	9b00      	ldr	r3, [sp, #0]
    a3c0:	f003 0301 	and.w	r3, r3, #1
    a3c4:	2b00      	cmp	r3, #0
    a3c6:	d100      	bne.n	a3ca <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a3c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    a3ca:	490a      	ldr	r1, [pc, #40]	; (a3f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
    a3cc:	9b01      	ldr	r3, [sp, #4]
    a3ce:	9a00      	ldr	r2, [sp, #0]
    a3d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]++;
    a3d4:	4a06      	ldr	r2, [pc, #24]	; (a3f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
    a3d6:	9b01      	ldr	r3, [sp, #4]
    a3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3dc:	1c5a      	adds	r2, r3, #1
    a3de:	4904      	ldr	r1, [pc, #16]	; (a3f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
    a3e0:	9b01      	ldr	r3, [sp, #4]
    a3e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a3e6:	bf00      	nop
    a3e8:	b003      	add	sp, #12
    a3ea:	f85d fb04 	ldr.w	pc, [sp], #4
    a3ee:	bf00      	nop
    a3f0:	1fff9210 	.word	0x1fff9210
    a3f4:	1fff920c 	.word	0x1fff920c

0000a3f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
    a3f8:	b500      	push	{lr}
    a3fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a3fc:	f7f6 fba2 	bl	b44 <Sys_GetCoreID>
    a400:	4603      	mov	r3, r0
    a402:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]--;
    a404:	4a0d      	ldr	r2, [pc, #52]	; (a43c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
    a406:	9b01      	ldr	r3, [sp, #4]
    a408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a40c:	1e5a      	subs	r2, r3, #1
    a40e:	490b      	ldr	r1, [pc, #44]	; (a43c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
    a410:	9b01      	ldr	r3, [sp, #4]
    a412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    a416:	4a0a      	ldr	r2, [pc, #40]	; (a440 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
    a418:	9b01      	ldr	r3, [sp, #4]
    a41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a41e:	f003 0301 	and.w	r3, r3, #1
    a422:	2b00      	cmp	r3, #0
    a424:	d106      	bne.n	a434 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    a426:	4a05      	ldr	r2, [pc, #20]	; (a43c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
    a428:	9b01      	ldr	r3, [sp, #4]
    a42a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a42e:	2b00      	cmp	r3, #0
    a430:	d100      	bne.n	a434 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a432:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a434:	bf00      	nop
    a436:	b003      	add	sp, #12
    a438:	f85d fb04 	ldr.w	pc, [sp], #4
    a43c:	1fff9210 	.word	0x1fff9210
    a440:	1fff920c 	.word	0x1fff920c

0000a444 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
    a444:	b500      	push	{lr}
    a446:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a448:	f7f6 fb7c 	bl	b44 <Sys_GetCoreID>
    a44c:	4603      	mov	r3, r0
    a44e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId])
    a450:	4a10      	ldr	r2, [pc, #64]	; (a494 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
    a452:	9b01      	ldr	r3, [sp, #4]
    a454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a458:	2b00      	cmp	r3, #0
    a45a:	d10d      	bne.n	a478 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a45c:	f7f6 faa2 	bl	9a4 <Pwm_schm_read_msr>
    a460:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a462:	9b00      	ldr	r3, [sp, #0]
    a464:	f003 0301 	and.w	r3, r3, #1
    a468:	2b00      	cmp	r3, #0
    a46a:	d100      	bne.n	a46e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a46c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    a46e:	490a      	ldr	r1, [pc, #40]	; (a498 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
    a470:	9b01      	ldr	r3, [sp, #4]
    a472:	9a00      	ldr	r2, [sp, #0]
    a474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]++;
    a478:	4a06      	ldr	r2, [pc, #24]	; (a494 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
    a47a:	9b01      	ldr	r3, [sp, #4]
    a47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a480:	1c5a      	adds	r2, r3, #1
    a482:	4904      	ldr	r1, [pc, #16]	; (a494 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
    a484:	9b01      	ldr	r3, [sp, #4]
    a486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a48a:	bf00      	nop
    a48c:	b003      	add	sp, #12
    a48e:	f85d fb04 	ldr.w	pc, [sp], #4
    a492:	bf00      	nop
    a494:	1fff9218 	.word	0x1fff9218
    a498:	1fff9214 	.word	0x1fff9214

0000a49c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
    a49c:	b500      	push	{lr}
    a49e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4a0:	f7f6 fb50 	bl	b44 <Sys_GetCoreID>
    a4a4:	4603      	mov	r3, r0
    a4a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]--;
    a4a8:	4a0d      	ldr	r2, [pc, #52]	; (a4e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
    a4aa:	9b01      	ldr	r3, [sp, #4]
    a4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4b0:	1e5a      	subs	r2, r3, #1
    a4b2:	490b      	ldr	r1, [pc, #44]	; (a4e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
    a4b4:	9b01      	ldr	r3, [sp, #4]
    a4b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    a4ba:	4a0a      	ldr	r2, [pc, #40]	; (a4e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
    a4bc:	9b01      	ldr	r3, [sp, #4]
    a4be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4c2:	f003 0301 	and.w	r3, r3, #1
    a4c6:	2b00      	cmp	r3, #0
    a4c8:	d106      	bne.n	a4d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    a4ca:	4a05      	ldr	r2, [pc, #20]	; (a4e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
    a4cc:	9b01      	ldr	r3, [sp, #4]
    a4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4d2:	2b00      	cmp	r3, #0
    a4d4:	d100      	bne.n	a4d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a4d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a4d8:	bf00      	nop
    a4da:	b003      	add	sp, #12
    a4dc:	f85d fb04 	ldr.w	pc, [sp], #4
    a4e0:	1fff9218 	.word	0x1fff9218
    a4e4:	1fff9214 	.word	0x1fff9214

0000a4e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
    a4e8:	b500      	push	{lr}
    a4ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4ec:	f7f6 fb2a 	bl	b44 <Sys_GetCoreID>
    a4f0:	4603      	mov	r3, r0
    a4f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId])
    a4f4:	4a10      	ldr	r2, [pc, #64]	; (a538 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
    a4f6:	9b01      	ldr	r3, [sp, #4]
    a4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4fc:	2b00      	cmp	r3, #0
    a4fe:	d10d      	bne.n	a51c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a500:	f7f6 fa50 	bl	9a4 <Pwm_schm_read_msr>
    a504:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a506:	9b00      	ldr	r3, [sp, #0]
    a508:	f003 0301 	and.w	r3, r3, #1
    a50c:	2b00      	cmp	r3, #0
    a50e:	d100      	bne.n	a512 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a510:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    a512:	490a      	ldr	r1, [pc, #40]	; (a53c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
    a514:	9b01      	ldr	r3, [sp, #4]
    a516:	9a00      	ldr	r2, [sp, #0]
    a518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]++;
    a51c:	4a06      	ldr	r2, [pc, #24]	; (a538 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
    a51e:	9b01      	ldr	r3, [sp, #4]
    a520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a524:	1c5a      	adds	r2, r3, #1
    a526:	4904      	ldr	r1, [pc, #16]	; (a538 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
    a528:	9b01      	ldr	r3, [sp, #4]
    a52a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a52e:	bf00      	nop
    a530:	b003      	add	sp, #12
    a532:	f85d fb04 	ldr.w	pc, [sp], #4
    a536:	bf00      	nop
    a538:	1fff9220 	.word	0x1fff9220
    a53c:	1fff921c 	.word	0x1fff921c

0000a540 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
    a540:	b500      	push	{lr}
    a542:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a544:	f7f6 fafe 	bl	b44 <Sys_GetCoreID>
    a548:	4603      	mov	r3, r0
    a54a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]--;
    a54c:	4a0d      	ldr	r2, [pc, #52]	; (a584 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
    a54e:	9b01      	ldr	r3, [sp, #4]
    a550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a554:	1e5a      	subs	r2, r3, #1
    a556:	490b      	ldr	r1, [pc, #44]	; (a584 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
    a558:	9b01      	ldr	r3, [sp, #4]
    a55a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    a55e:	4a0a      	ldr	r2, [pc, #40]	; (a588 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
    a560:	9b01      	ldr	r3, [sp, #4]
    a562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a566:	f003 0301 	and.w	r3, r3, #1
    a56a:	2b00      	cmp	r3, #0
    a56c:	d106      	bne.n	a57c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    a56e:	4a05      	ldr	r2, [pc, #20]	; (a584 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
    a570:	9b01      	ldr	r3, [sp, #4]
    a572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a576:	2b00      	cmp	r3, #0
    a578:	d100      	bne.n	a57c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a57a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a57c:	bf00      	nop
    a57e:	b003      	add	sp, #12
    a580:	f85d fb04 	ldr.w	pc, [sp], #4
    a584:	1fff9220 	.word	0x1fff9220
    a588:	1fff921c 	.word	0x1fff921c

0000a58c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
    a58c:	b500      	push	{lr}
    a58e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a590:	f7f6 fad8 	bl	b44 <Sys_GetCoreID>
    a594:	4603      	mov	r3, r0
    a596:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId])
    a598:	4a10      	ldr	r2, [pc, #64]	; (a5dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
    a59a:	9b01      	ldr	r3, [sp, #4]
    a59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5a0:	2b00      	cmp	r3, #0
    a5a2:	d10d      	bne.n	a5c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a5a4:	f7f6 f9fe 	bl	9a4 <Pwm_schm_read_msr>
    a5a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a5aa:	9b00      	ldr	r3, [sp, #0]
    a5ac:	f003 0301 	and.w	r3, r3, #1
    a5b0:	2b00      	cmp	r3, #0
    a5b2:	d100      	bne.n	a5b6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a5b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    a5b6:	490a      	ldr	r1, [pc, #40]	; (a5e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
    a5b8:	9b01      	ldr	r3, [sp, #4]
    a5ba:	9a00      	ldr	r2, [sp, #0]
    a5bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]++;
    a5c0:	4a06      	ldr	r2, [pc, #24]	; (a5dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
    a5c2:	9b01      	ldr	r3, [sp, #4]
    a5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5c8:	1c5a      	adds	r2, r3, #1
    a5ca:	4904      	ldr	r1, [pc, #16]	; (a5dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
    a5cc:	9b01      	ldr	r3, [sp, #4]
    a5ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a5d2:	bf00      	nop
    a5d4:	b003      	add	sp, #12
    a5d6:	f85d fb04 	ldr.w	pc, [sp], #4
    a5da:	bf00      	nop
    a5dc:	1fff9228 	.word	0x1fff9228
    a5e0:	1fff9224 	.word	0x1fff9224

0000a5e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
    a5e4:	b500      	push	{lr}
    a5e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a5e8:	f7f6 faac 	bl	b44 <Sys_GetCoreID>
    a5ec:	4603      	mov	r3, r0
    a5ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]--;
    a5f0:	4a0d      	ldr	r2, [pc, #52]	; (a628 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
    a5f2:	9b01      	ldr	r3, [sp, #4]
    a5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5f8:	1e5a      	subs	r2, r3, #1
    a5fa:	490b      	ldr	r1, [pc, #44]	; (a628 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
    a5fc:	9b01      	ldr	r3, [sp, #4]
    a5fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    a602:	4a0a      	ldr	r2, [pc, #40]	; (a62c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
    a604:	9b01      	ldr	r3, [sp, #4]
    a606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a60a:	f003 0301 	and.w	r3, r3, #1
    a60e:	2b00      	cmp	r3, #0
    a610:	d106      	bne.n	a620 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    a612:	4a05      	ldr	r2, [pc, #20]	; (a628 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
    a614:	9b01      	ldr	r3, [sp, #4]
    a616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a61a:	2b00      	cmp	r3, #0
    a61c:	d100      	bne.n	a620 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a61e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a620:	bf00      	nop
    a622:	b003      	add	sp, #12
    a624:	f85d fb04 	ldr.w	pc, [sp], #4
    a628:	1fff9228 	.word	0x1fff9228
    a62c:	1fff9224 	.word	0x1fff9224

0000a630 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
    a630:	b500      	push	{lr}
    a632:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a634:	f7f6 fa86 	bl	b44 <Sys_GetCoreID>
    a638:	4603      	mov	r3, r0
    a63a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId])
    a63c:	4a10      	ldr	r2, [pc, #64]	; (a680 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
    a63e:	9b01      	ldr	r3, [sp, #4]
    a640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a644:	2b00      	cmp	r3, #0
    a646:	d10d      	bne.n	a664 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a648:	f7f6 f9ac 	bl	9a4 <Pwm_schm_read_msr>
    a64c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a64e:	9b00      	ldr	r3, [sp, #0]
    a650:	f003 0301 	and.w	r3, r3, #1
    a654:	2b00      	cmp	r3, #0
    a656:	d100      	bne.n	a65a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a658:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    a65a:	490a      	ldr	r1, [pc, #40]	; (a684 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
    a65c:	9b01      	ldr	r3, [sp, #4]
    a65e:	9a00      	ldr	r2, [sp, #0]
    a660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]++;
    a664:	4a06      	ldr	r2, [pc, #24]	; (a680 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
    a666:	9b01      	ldr	r3, [sp, #4]
    a668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a66c:	1c5a      	adds	r2, r3, #1
    a66e:	4904      	ldr	r1, [pc, #16]	; (a680 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
    a670:	9b01      	ldr	r3, [sp, #4]
    a672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a676:	bf00      	nop
    a678:	b003      	add	sp, #12
    a67a:	f85d fb04 	ldr.w	pc, [sp], #4
    a67e:	bf00      	nop
    a680:	1fff9230 	.word	0x1fff9230
    a684:	1fff922c 	.word	0x1fff922c

0000a688 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
    a688:	b500      	push	{lr}
    a68a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a68c:	f7f6 fa5a 	bl	b44 <Sys_GetCoreID>
    a690:	4603      	mov	r3, r0
    a692:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]--;
    a694:	4a0d      	ldr	r2, [pc, #52]	; (a6cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
    a696:	9b01      	ldr	r3, [sp, #4]
    a698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a69c:	1e5a      	subs	r2, r3, #1
    a69e:	490b      	ldr	r1, [pc, #44]	; (a6cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
    a6a0:	9b01      	ldr	r3, [sp, #4]
    a6a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    a6a6:	4a0a      	ldr	r2, [pc, #40]	; (a6d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
    a6a8:	9b01      	ldr	r3, [sp, #4]
    a6aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6ae:	f003 0301 	and.w	r3, r3, #1
    a6b2:	2b00      	cmp	r3, #0
    a6b4:	d106      	bne.n	a6c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    a6b6:	4a05      	ldr	r2, [pc, #20]	; (a6cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
    a6b8:	9b01      	ldr	r3, [sp, #4]
    a6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6be:	2b00      	cmp	r3, #0
    a6c0:	d100      	bne.n	a6c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a6c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a6c4:	bf00      	nop
    a6c6:	b003      	add	sp, #12
    a6c8:	f85d fb04 	ldr.w	pc, [sp], #4
    a6cc:	1fff9230 	.word	0x1fff9230
    a6d0:	1fff922c 	.word	0x1fff922c

0000a6d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
    a6d4:	b500      	push	{lr}
    a6d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a6d8:	f7f6 fa34 	bl	b44 <Sys_GetCoreID>
    a6dc:	4603      	mov	r3, r0
    a6de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId])
    a6e0:	4a10      	ldr	r2, [pc, #64]	; (a724 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
    a6e2:	9b01      	ldr	r3, [sp, #4]
    a6e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	d10d      	bne.n	a708 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a6ec:	f7f6 f95a 	bl	9a4 <Pwm_schm_read_msr>
    a6f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a6f2:	9b00      	ldr	r3, [sp, #0]
    a6f4:	f003 0301 	and.w	r3, r3, #1
    a6f8:	2b00      	cmp	r3, #0
    a6fa:	d100      	bne.n	a6fe <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a6fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    a6fe:	490a      	ldr	r1, [pc, #40]	; (a728 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
    a700:	9b01      	ldr	r3, [sp, #4]
    a702:	9a00      	ldr	r2, [sp, #0]
    a704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]++;
    a708:	4a06      	ldr	r2, [pc, #24]	; (a724 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
    a70a:	9b01      	ldr	r3, [sp, #4]
    a70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a710:	1c5a      	adds	r2, r3, #1
    a712:	4904      	ldr	r1, [pc, #16]	; (a724 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
    a714:	9b01      	ldr	r3, [sp, #4]
    a716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a71a:	bf00      	nop
    a71c:	b003      	add	sp, #12
    a71e:	f85d fb04 	ldr.w	pc, [sp], #4
    a722:	bf00      	nop
    a724:	1fff9238 	.word	0x1fff9238
    a728:	1fff9234 	.word	0x1fff9234

0000a72c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
    a72c:	b500      	push	{lr}
    a72e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a730:	f7f6 fa08 	bl	b44 <Sys_GetCoreID>
    a734:	4603      	mov	r3, r0
    a736:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]--;
    a738:	4a0d      	ldr	r2, [pc, #52]	; (a770 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
    a73a:	9b01      	ldr	r3, [sp, #4]
    a73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a740:	1e5a      	subs	r2, r3, #1
    a742:	490b      	ldr	r1, [pc, #44]	; (a770 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
    a744:	9b01      	ldr	r3, [sp, #4]
    a746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    a74a:	4a0a      	ldr	r2, [pc, #40]	; (a774 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
    a74c:	9b01      	ldr	r3, [sp, #4]
    a74e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a752:	f003 0301 	and.w	r3, r3, #1
    a756:	2b00      	cmp	r3, #0
    a758:	d106      	bne.n	a768 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    a75a:	4a05      	ldr	r2, [pc, #20]	; (a770 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
    a75c:	9b01      	ldr	r3, [sp, #4]
    a75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a762:	2b00      	cmp	r3, #0
    a764:	d100      	bne.n	a768 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a766:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a768:	bf00      	nop
    a76a:	b003      	add	sp, #12
    a76c:	f85d fb04 	ldr.w	pc, [sp], #4
    a770:	1fff9238 	.word	0x1fff9238
    a774:	1fff9234 	.word	0x1fff9234

0000a778 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
    a778:	b500      	push	{lr}
    a77a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a77c:	f7f6 f9e2 	bl	b44 <Sys_GetCoreID>
    a780:	4603      	mov	r3, r0
    a782:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId])
    a784:	4a10      	ldr	r2, [pc, #64]	; (a7c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
    a786:	9b01      	ldr	r3, [sp, #4]
    a788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a78c:	2b00      	cmp	r3, #0
    a78e:	d10d      	bne.n	a7ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a790:	f7f6 f908 	bl	9a4 <Pwm_schm_read_msr>
    a794:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a796:	9b00      	ldr	r3, [sp, #0]
    a798:	f003 0301 	and.w	r3, r3, #1
    a79c:	2b00      	cmp	r3, #0
    a79e:	d100      	bne.n	a7a2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a7a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    a7a2:	490a      	ldr	r1, [pc, #40]	; (a7cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
    a7a4:	9b01      	ldr	r3, [sp, #4]
    a7a6:	9a00      	ldr	r2, [sp, #0]
    a7a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]++;
    a7ac:	4a06      	ldr	r2, [pc, #24]	; (a7c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
    a7ae:	9b01      	ldr	r3, [sp, #4]
    a7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7b4:	1c5a      	adds	r2, r3, #1
    a7b6:	4904      	ldr	r1, [pc, #16]	; (a7c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
    a7b8:	9b01      	ldr	r3, [sp, #4]
    a7ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a7be:	bf00      	nop
    a7c0:	b003      	add	sp, #12
    a7c2:	f85d fb04 	ldr.w	pc, [sp], #4
    a7c6:	bf00      	nop
    a7c8:	1fff9240 	.word	0x1fff9240
    a7cc:	1fff923c 	.word	0x1fff923c

0000a7d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
    a7d0:	b500      	push	{lr}
    a7d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a7d4:	f7f6 f9b6 	bl	b44 <Sys_GetCoreID>
    a7d8:	4603      	mov	r3, r0
    a7da:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]--;
    a7dc:	4a0d      	ldr	r2, [pc, #52]	; (a814 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
    a7de:	9b01      	ldr	r3, [sp, #4]
    a7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7e4:	1e5a      	subs	r2, r3, #1
    a7e6:	490b      	ldr	r1, [pc, #44]	; (a814 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
    a7e8:	9b01      	ldr	r3, [sp, #4]
    a7ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    a7ee:	4a0a      	ldr	r2, [pc, #40]	; (a818 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
    a7f0:	9b01      	ldr	r3, [sp, #4]
    a7f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7f6:	f003 0301 	and.w	r3, r3, #1
    a7fa:	2b00      	cmp	r3, #0
    a7fc:	d106      	bne.n	a80c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    a7fe:	4a05      	ldr	r2, [pc, #20]	; (a814 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
    a800:	9b01      	ldr	r3, [sp, #4]
    a802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a806:	2b00      	cmp	r3, #0
    a808:	d100      	bne.n	a80c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a80a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a80c:	bf00      	nop
    a80e:	b003      	add	sp, #12
    a810:	f85d fb04 	ldr.w	pc, [sp], #4
    a814:	1fff9240 	.word	0x1fff9240
    a818:	1fff923c 	.word	0x1fff923c

0000a81c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
    a81c:	b500      	push	{lr}
    a81e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a820:	f7f6 f990 	bl	b44 <Sys_GetCoreID>
    a824:	4603      	mov	r3, r0
    a826:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId])
    a828:	4a10      	ldr	r2, [pc, #64]	; (a86c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
    a82a:	9b01      	ldr	r3, [sp, #4]
    a82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a830:	2b00      	cmp	r3, #0
    a832:	d10d      	bne.n	a850 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a834:	f7f6 f8b6 	bl	9a4 <Pwm_schm_read_msr>
    a838:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a83a:	9b00      	ldr	r3, [sp, #0]
    a83c:	f003 0301 	and.w	r3, r3, #1
    a840:	2b00      	cmp	r3, #0
    a842:	d100      	bne.n	a846 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a844:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    a846:	490a      	ldr	r1, [pc, #40]	; (a870 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
    a848:	9b01      	ldr	r3, [sp, #4]
    a84a:	9a00      	ldr	r2, [sp, #0]
    a84c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]++;
    a850:	4a06      	ldr	r2, [pc, #24]	; (a86c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
    a852:	9b01      	ldr	r3, [sp, #4]
    a854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a858:	1c5a      	adds	r2, r3, #1
    a85a:	4904      	ldr	r1, [pc, #16]	; (a86c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
    a85c:	9b01      	ldr	r3, [sp, #4]
    a85e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a862:	bf00      	nop
    a864:	b003      	add	sp, #12
    a866:	f85d fb04 	ldr.w	pc, [sp], #4
    a86a:	bf00      	nop
    a86c:	1fff9248 	.word	0x1fff9248
    a870:	1fff9244 	.word	0x1fff9244

0000a874 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
    a874:	b500      	push	{lr}
    a876:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a878:	f7f6 f964 	bl	b44 <Sys_GetCoreID>
    a87c:	4603      	mov	r3, r0
    a87e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]--;
    a880:	4a0d      	ldr	r2, [pc, #52]	; (a8b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
    a882:	9b01      	ldr	r3, [sp, #4]
    a884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a888:	1e5a      	subs	r2, r3, #1
    a88a:	490b      	ldr	r1, [pc, #44]	; (a8b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
    a88c:	9b01      	ldr	r3, [sp, #4]
    a88e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    a892:	4a0a      	ldr	r2, [pc, #40]	; (a8bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
    a894:	9b01      	ldr	r3, [sp, #4]
    a896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a89a:	f003 0301 	and.w	r3, r3, #1
    a89e:	2b00      	cmp	r3, #0
    a8a0:	d106      	bne.n	a8b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    a8a2:	4a05      	ldr	r2, [pc, #20]	; (a8b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
    a8a4:	9b01      	ldr	r3, [sp, #4]
    a8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8aa:	2b00      	cmp	r3, #0
    a8ac:	d100      	bne.n	a8b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a8ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a8b0:	bf00      	nop
    a8b2:	b003      	add	sp, #12
    a8b4:	f85d fb04 	ldr.w	pc, [sp], #4
    a8b8:	1fff9248 	.word	0x1fff9248
    a8bc:	1fff9244 	.word	0x1fff9244

0000a8c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
    a8c0:	b500      	push	{lr}
    a8c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a8c4:	f7f6 f93e 	bl	b44 <Sys_GetCoreID>
    a8c8:	4603      	mov	r3, r0
    a8ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId])
    a8cc:	4a10      	ldr	r2, [pc, #64]	; (a910 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
    a8ce:	9b01      	ldr	r3, [sp, #4]
    a8d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8d4:	2b00      	cmp	r3, #0
    a8d6:	d10d      	bne.n	a8f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a8d8:	f7f6 f864 	bl	9a4 <Pwm_schm_read_msr>
    a8dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a8de:	9b00      	ldr	r3, [sp, #0]
    a8e0:	f003 0301 	and.w	r3, r3, #1
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	d100      	bne.n	a8ea <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a8e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    a8ea:	490a      	ldr	r1, [pc, #40]	; (a914 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
    a8ec:	9b01      	ldr	r3, [sp, #4]
    a8ee:	9a00      	ldr	r2, [sp, #0]
    a8f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]++;
    a8f4:	4a06      	ldr	r2, [pc, #24]	; (a910 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
    a8f6:	9b01      	ldr	r3, [sp, #4]
    a8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8fc:	1c5a      	adds	r2, r3, #1
    a8fe:	4904      	ldr	r1, [pc, #16]	; (a910 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
    a900:	9b01      	ldr	r3, [sp, #4]
    a902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a906:	bf00      	nop
    a908:	b003      	add	sp, #12
    a90a:	f85d fb04 	ldr.w	pc, [sp], #4
    a90e:	bf00      	nop
    a910:	1fff9250 	.word	0x1fff9250
    a914:	1fff924c 	.word	0x1fff924c

0000a918 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
    a918:	b500      	push	{lr}
    a91a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a91c:	f7f6 f912 	bl	b44 <Sys_GetCoreID>
    a920:	4603      	mov	r3, r0
    a922:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]--;
    a924:	4a0d      	ldr	r2, [pc, #52]	; (a95c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
    a926:	9b01      	ldr	r3, [sp, #4]
    a928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a92c:	1e5a      	subs	r2, r3, #1
    a92e:	490b      	ldr	r1, [pc, #44]	; (a95c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
    a930:	9b01      	ldr	r3, [sp, #4]
    a932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    a936:	4a0a      	ldr	r2, [pc, #40]	; (a960 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
    a938:	9b01      	ldr	r3, [sp, #4]
    a93a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a93e:	f003 0301 	and.w	r3, r3, #1
    a942:	2b00      	cmp	r3, #0
    a944:	d106      	bne.n	a954 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    a946:	4a05      	ldr	r2, [pc, #20]	; (a95c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
    a948:	9b01      	ldr	r3, [sp, #4]
    a94a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a94e:	2b00      	cmp	r3, #0
    a950:	d100      	bne.n	a954 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a952:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a954:	bf00      	nop
    a956:	b003      	add	sp, #12
    a958:	f85d fb04 	ldr.w	pc, [sp], #4
    a95c:	1fff9250 	.word	0x1fff9250
    a960:	1fff924c 	.word	0x1fff924c

0000a964 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
    a964:	b500      	push	{lr}
    a966:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a968:	f7f6 f8ec 	bl	b44 <Sys_GetCoreID>
    a96c:	4603      	mov	r3, r0
    a96e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId])
    a970:	4a10      	ldr	r2, [pc, #64]	; (a9b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
    a972:	9b01      	ldr	r3, [sp, #4]
    a974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a978:	2b00      	cmp	r3, #0
    a97a:	d10d      	bne.n	a998 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a97c:	f7f6 f812 	bl	9a4 <Pwm_schm_read_msr>
    a980:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a982:	9b00      	ldr	r3, [sp, #0]
    a984:	f003 0301 	and.w	r3, r3, #1
    a988:	2b00      	cmp	r3, #0
    a98a:	d100      	bne.n	a98e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a98c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    a98e:	490a      	ldr	r1, [pc, #40]	; (a9b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
    a990:	9b01      	ldr	r3, [sp, #4]
    a992:	9a00      	ldr	r2, [sp, #0]
    a994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]++;
    a998:	4a06      	ldr	r2, [pc, #24]	; (a9b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
    a99a:	9b01      	ldr	r3, [sp, #4]
    a99c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9a0:	1c5a      	adds	r2, r3, #1
    a9a2:	4904      	ldr	r1, [pc, #16]	; (a9b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
    a9a4:	9b01      	ldr	r3, [sp, #4]
    a9a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a9aa:	bf00      	nop
    a9ac:	b003      	add	sp, #12
    a9ae:	f85d fb04 	ldr.w	pc, [sp], #4
    a9b2:	bf00      	nop
    a9b4:	1fff9258 	.word	0x1fff9258
    a9b8:	1fff9254 	.word	0x1fff9254

0000a9bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
    a9bc:	b500      	push	{lr}
    a9be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a9c0:	f7f6 f8c0 	bl	b44 <Sys_GetCoreID>
    a9c4:	4603      	mov	r3, r0
    a9c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]--;
    a9c8:	4a0d      	ldr	r2, [pc, #52]	; (aa00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
    a9ca:	9b01      	ldr	r3, [sp, #4]
    a9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9d0:	1e5a      	subs	r2, r3, #1
    a9d2:	490b      	ldr	r1, [pc, #44]	; (aa00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
    a9d4:	9b01      	ldr	r3, [sp, #4]
    a9d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    a9da:	4a0a      	ldr	r2, [pc, #40]	; (aa04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
    a9dc:	9b01      	ldr	r3, [sp, #4]
    a9de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9e2:	f003 0301 	and.w	r3, r3, #1
    a9e6:	2b00      	cmp	r3, #0
    a9e8:	d106      	bne.n	a9f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    a9ea:	4a05      	ldr	r2, [pc, #20]	; (aa00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
    a9ec:	9b01      	ldr	r3, [sp, #4]
    a9ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9f2:	2b00      	cmp	r3, #0
    a9f4:	d100      	bne.n	a9f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a9f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a9f8:	bf00      	nop
    a9fa:	b003      	add	sp, #12
    a9fc:	f85d fb04 	ldr.w	pc, [sp], #4
    aa00:	1fff9258 	.word	0x1fff9258
    aa04:	1fff9254 	.word	0x1fff9254

0000aa08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
    aa08:	b500      	push	{lr}
    aa0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa0c:	f7f6 f89a 	bl	b44 <Sys_GetCoreID>
    aa10:	4603      	mov	r3, r0
    aa12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId])
    aa14:	4a10      	ldr	r2, [pc, #64]	; (aa58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
    aa16:	9b01      	ldr	r3, [sp, #4]
    aa18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa1c:	2b00      	cmp	r3, #0
    aa1e:	d10d      	bne.n	aa3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aa20:	f7f5 ffc0 	bl	9a4 <Pwm_schm_read_msr>
    aa24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aa26:	9b00      	ldr	r3, [sp, #0]
    aa28:	f003 0301 	and.w	r3, r3, #1
    aa2c:	2b00      	cmp	r3, #0
    aa2e:	d100      	bne.n	aa32 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aa30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    aa32:	490a      	ldr	r1, [pc, #40]	; (aa5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
    aa34:	9b01      	ldr	r3, [sp, #4]
    aa36:	9a00      	ldr	r2, [sp, #0]
    aa38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]++;
    aa3c:	4a06      	ldr	r2, [pc, #24]	; (aa58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
    aa3e:	9b01      	ldr	r3, [sp, #4]
    aa40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa44:	1c5a      	adds	r2, r3, #1
    aa46:	4904      	ldr	r1, [pc, #16]	; (aa58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
    aa48:	9b01      	ldr	r3, [sp, #4]
    aa4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aa4e:	bf00      	nop
    aa50:	b003      	add	sp, #12
    aa52:	f85d fb04 	ldr.w	pc, [sp], #4
    aa56:	bf00      	nop
    aa58:	1fff9260 	.word	0x1fff9260
    aa5c:	1fff925c 	.word	0x1fff925c

0000aa60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
    aa60:	b500      	push	{lr}
    aa62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa64:	f7f6 f86e 	bl	b44 <Sys_GetCoreID>
    aa68:	4603      	mov	r3, r0
    aa6a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]--;
    aa6c:	4a0d      	ldr	r2, [pc, #52]	; (aaa4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
    aa6e:	9b01      	ldr	r3, [sp, #4]
    aa70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa74:	1e5a      	subs	r2, r3, #1
    aa76:	490b      	ldr	r1, [pc, #44]	; (aaa4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
    aa78:	9b01      	ldr	r3, [sp, #4]
    aa7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    aa7e:	4a0a      	ldr	r2, [pc, #40]	; (aaa8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
    aa80:	9b01      	ldr	r3, [sp, #4]
    aa82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa86:	f003 0301 	and.w	r3, r3, #1
    aa8a:	2b00      	cmp	r3, #0
    aa8c:	d106      	bne.n	aa9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    aa8e:	4a05      	ldr	r2, [pc, #20]	; (aaa4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
    aa90:	9b01      	ldr	r3, [sp, #4]
    aa92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa96:	2b00      	cmp	r3, #0
    aa98:	d100      	bne.n	aa9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aa9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aa9c:	bf00      	nop
    aa9e:	b003      	add	sp, #12
    aaa0:	f85d fb04 	ldr.w	pc, [sp], #4
    aaa4:	1fff9260 	.word	0x1fff9260
    aaa8:	1fff925c 	.word	0x1fff925c

0000aaac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
    aaac:	b500      	push	{lr}
    aaae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aab0:	f7f6 f848 	bl	b44 <Sys_GetCoreID>
    aab4:	4603      	mov	r3, r0
    aab6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId])
    aab8:	4a10      	ldr	r2, [pc, #64]	; (aafc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
    aaba:	9b01      	ldr	r3, [sp, #4]
    aabc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aac0:	2b00      	cmp	r3, #0
    aac2:	d10d      	bne.n	aae0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aac4:	f7f5 ff6e 	bl	9a4 <Pwm_schm_read_msr>
    aac8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aaca:	9b00      	ldr	r3, [sp, #0]
    aacc:	f003 0301 	and.w	r3, r3, #1
    aad0:	2b00      	cmp	r3, #0
    aad2:	d100      	bne.n	aad6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aad4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    aad6:	490a      	ldr	r1, [pc, #40]	; (ab00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
    aad8:	9b01      	ldr	r3, [sp, #4]
    aada:	9a00      	ldr	r2, [sp, #0]
    aadc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]++;
    aae0:	4a06      	ldr	r2, [pc, #24]	; (aafc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
    aae2:	9b01      	ldr	r3, [sp, #4]
    aae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aae8:	1c5a      	adds	r2, r3, #1
    aaea:	4904      	ldr	r1, [pc, #16]	; (aafc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
    aaec:	9b01      	ldr	r3, [sp, #4]
    aaee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aaf2:	bf00      	nop
    aaf4:	b003      	add	sp, #12
    aaf6:	f85d fb04 	ldr.w	pc, [sp], #4
    aafa:	bf00      	nop
    aafc:	1fff9268 	.word	0x1fff9268
    ab00:	1fff9264 	.word	0x1fff9264

0000ab04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
    ab04:	b500      	push	{lr}
    ab06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab08:	f7f6 f81c 	bl	b44 <Sys_GetCoreID>
    ab0c:	4603      	mov	r3, r0
    ab0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]--;
    ab10:	4a0d      	ldr	r2, [pc, #52]	; (ab48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
    ab12:	9b01      	ldr	r3, [sp, #4]
    ab14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab18:	1e5a      	subs	r2, r3, #1
    ab1a:	490b      	ldr	r1, [pc, #44]	; (ab48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
    ab1c:	9b01      	ldr	r3, [sp, #4]
    ab1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    ab22:	4a0a      	ldr	r2, [pc, #40]	; (ab4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
    ab24:	9b01      	ldr	r3, [sp, #4]
    ab26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab2a:	f003 0301 	and.w	r3, r3, #1
    ab2e:	2b00      	cmp	r3, #0
    ab30:	d106      	bne.n	ab40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    ab32:	4a05      	ldr	r2, [pc, #20]	; (ab48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
    ab34:	9b01      	ldr	r3, [sp, #4]
    ab36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	d100      	bne.n	ab40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ab3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ab40:	bf00      	nop
    ab42:	b003      	add	sp, #12
    ab44:	f85d fb04 	ldr.w	pc, [sp], #4
    ab48:	1fff9268 	.word	0x1fff9268
    ab4c:	1fff9264 	.word	0x1fff9264

0000ab50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
    ab50:	b500      	push	{lr}
    ab52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab54:	f7f5 fff6 	bl	b44 <Sys_GetCoreID>
    ab58:	4603      	mov	r3, r0
    ab5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId])
    ab5c:	4a10      	ldr	r2, [pc, #64]	; (aba0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
    ab5e:	9b01      	ldr	r3, [sp, #4]
    ab60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab64:	2b00      	cmp	r3, #0
    ab66:	d10d      	bne.n	ab84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ab68:	f7f5 ff1c 	bl	9a4 <Pwm_schm_read_msr>
    ab6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ab6e:	9b00      	ldr	r3, [sp, #0]
    ab70:	f003 0301 	and.w	r3, r3, #1
    ab74:	2b00      	cmp	r3, #0
    ab76:	d100      	bne.n	ab7a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ab78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    ab7a:	490a      	ldr	r1, [pc, #40]	; (aba4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
    ab7c:	9b01      	ldr	r3, [sp, #4]
    ab7e:	9a00      	ldr	r2, [sp, #0]
    ab80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]++;
    ab84:	4a06      	ldr	r2, [pc, #24]	; (aba0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
    ab86:	9b01      	ldr	r3, [sp, #4]
    ab88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab8c:	1c5a      	adds	r2, r3, #1
    ab8e:	4904      	ldr	r1, [pc, #16]	; (aba0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
    ab90:	9b01      	ldr	r3, [sp, #4]
    ab92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ab96:	bf00      	nop
    ab98:	b003      	add	sp, #12
    ab9a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab9e:	bf00      	nop
    aba0:	1fff9270 	.word	0x1fff9270
    aba4:	1fff926c 	.word	0x1fff926c

0000aba8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
    aba8:	b500      	push	{lr}
    abaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    abac:	f7f5 ffca 	bl	b44 <Sys_GetCoreID>
    abb0:	4603      	mov	r3, r0
    abb2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]--;
    abb4:	4a0d      	ldr	r2, [pc, #52]	; (abec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
    abb6:	9b01      	ldr	r3, [sp, #4]
    abb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abbc:	1e5a      	subs	r2, r3, #1
    abbe:	490b      	ldr	r1, [pc, #44]	; (abec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
    abc0:	9b01      	ldr	r3, [sp, #4]
    abc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    abc6:	4a0a      	ldr	r2, [pc, #40]	; (abf0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
    abc8:	9b01      	ldr	r3, [sp, #4]
    abca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abce:	f003 0301 	and.w	r3, r3, #1
    abd2:	2b00      	cmp	r3, #0
    abd4:	d106      	bne.n	abe4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    abd6:	4a05      	ldr	r2, [pc, #20]	; (abec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
    abd8:	9b01      	ldr	r3, [sp, #4]
    abda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abde:	2b00      	cmp	r3, #0
    abe0:	d100      	bne.n	abe4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    abe2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    abe4:	bf00      	nop
    abe6:	b003      	add	sp, #12
    abe8:	f85d fb04 	ldr.w	pc, [sp], #4
    abec:	1fff9270 	.word	0x1fff9270
    abf0:	1fff926c 	.word	0x1fff926c

0000abf4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
    abf4:	b500      	push	{lr}
    abf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    abf8:	f7f5 ffa4 	bl	b44 <Sys_GetCoreID>
    abfc:	4603      	mov	r3, r0
    abfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId])
    ac00:	4a10      	ldr	r2, [pc, #64]	; (ac44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
    ac02:	9b01      	ldr	r3, [sp, #4]
    ac04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac08:	2b00      	cmp	r3, #0
    ac0a:	d10d      	bne.n	ac28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ac0c:	f7f5 feca 	bl	9a4 <Pwm_schm_read_msr>
    ac10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ac12:	9b00      	ldr	r3, [sp, #0]
    ac14:	f003 0301 	and.w	r3, r3, #1
    ac18:	2b00      	cmp	r3, #0
    ac1a:	d100      	bne.n	ac1e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ac1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    ac1e:	490a      	ldr	r1, [pc, #40]	; (ac48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
    ac20:	9b01      	ldr	r3, [sp, #4]
    ac22:	9a00      	ldr	r2, [sp, #0]
    ac24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]++;
    ac28:	4a06      	ldr	r2, [pc, #24]	; (ac44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
    ac2a:	9b01      	ldr	r3, [sp, #4]
    ac2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac30:	1c5a      	adds	r2, r3, #1
    ac32:	4904      	ldr	r1, [pc, #16]	; (ac44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
    ac34:	9b01      	ldr	r3, [sp, #4]
    ac36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ac3a:	bf00      	nop
    ac3c:	b003      	add	sp, #12
    ac3e:	f85d fb04 	ldr.w	pc, [sp], #4
    ac42:	bf00      	nop
    ac44:	1fff9278 	.word	0x1fff9278
    ac48:	1fff9274 	.word	0x1fff9274

0000ac4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
    ac4c:	b500      	push	{lr}
    ac4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac50:	f7f5 ff78 	bl	b44 <Sys_GetCoreID>
    ac54:	4603      	mov	r3, r0
    ac56:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]--;
    ac58:	4a0d      	ldr	r2, [pc, #52]	; (ac90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
    ac5a:	9b01      	ldr	r3, [sp, #4]
    ac5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac60:	1e5a      	subs	r2, r3, #1
    ac62:	490b      	ldr	r1, [pc, #44]	; (ac90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
    ac64:	9b01      	ldr	r3, [sp, #4]
    ac66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    ac6a:	4a0a      	ldr	r2, [pc, #40]	; (ac94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
    ac6c:	9b01      	ldr	r3, [sp, #4]
    ac6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac72:	f003 0301 	and.w	r3, r3, #1
    ac76:	2b00      	cmp	r3, #0
    ac78:	d106      	bne.n	ac88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    ac7a:	4a05      	ldr	r2, [pc, #20]	; (ac90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
    ac7c:	9b01      	ldr	r3, [sp, #4]
    ac7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac82:	2b00      	cmp	r3, #0
    ac84:	d100      	bne.n	ac88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ac86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ac88:	bf00      	nop
    ac8a:	b003      	add	sp, #12
    ac8c:	f85d fb04 	ldr.w	pc, [sp], #4
    ac90:	1fff9278 	.word	0x1fff9278
    ac94:	1fff9274 	.word	0x1fff9274

0000ac98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
    ac98:	b500      	push	{lr}
    ac9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac9c:	f7f5 ff52 	bl	b44 <Sys_GetCoreID>
    aca0:	4603      	mov	r3, r0
    aca2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId])
    aca4:	4a10      	ldr	r2, [pc, #64]	; (ace8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
    aca6:	9b01      	ldr	r3, [sp, #4]
    aca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acac:	2b00      	cmp	r3, #0
    acae:	d10d      	bne.n	accc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    acb0:	f7f5 fe78 	bl	9a4 <Pwm_schm_read_msr>
    acb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    acb6:	9b00      	ldr	r3, [sp, #0]
    acb8:	f003 0301 	and.w	r3, r3, #1
    acbc:	2b00      	cmp	r3, #0
    acbe:	d100      	bne.n	acc2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    acc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    acc2:	490a      	ldr	r1, [pc, #40]	; (acec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
    acc4:	9b01      	ldr	r3, [sp, #4]
    acc6:	9a00      	ldr	r2, [sp, #0]
    acc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]++;
    accc:	4a06      	ldr	r2, [pc, #24]	; (ace8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
    acce:	9b01      	ldr	r3, [sp, #4]
    acd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acd4:	1c5a      	adds	r2, r3, #1
    acd6:	4904      	ldr	r1, [pc, #16]	; (ace8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
    acd8:	9b01      	ldr	r3, [sp, #4]
    acda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    acde:	bf00      	nop
    ace0:	b003      	add	sp, #12
    ace2:	f85d fb04 	ldr.w	pc, [sp], #4
    ace6:	bf00      	nop
    ace8:	1fff9280 	.word	0x1fff9280
    acec:	1fff927c 	.word	0x1fff927c

0000acf0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
    acf0:	b500      	push	{lr}
    acf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    acf4:	f7f5 ff26 	bl	b44 <Sys_GetCoreID>
    acf8:	4603      	mov	r3, r0
    acfa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]--;
    acfc:	4a0d      	ldr	r2, [pc, #52]	; (ad34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
    acfe:	9b01      	ldr	r3, [sp, #4]
    ad00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad04:	1e5a      	subs	r2, r3, #1
    ad06:	490b      	ldr	r1, [pc, #44]	; (ad34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
    ad08:	9b01      	ldr	r3, [sp, #4]
    ad0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    ad0e:	4a0a      	ldr	r2, [pc, #40]	; (ad38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
    ad10:	9b01      	ldr	r3, [sp, #4]
    ad12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad16:	f003 0301 	and.w	r3, r3, #1
    ad1a:	2b00      	cmp	r3, #0
    ad1c:	d106      	bne.n	ad2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    ad1e:	4a05      	ldr	r2, [pc, #20]	; (ad34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
    ad20:	9b01      	ldr	r3, [sp, #4]
    ad22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad26:	2b00      	cmp	r3, #0
    ad28:	d100      	bne.n	ad2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ad2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ad2c:	bf00      	nop
    ad2e:	b003      	add	sp, #12
    ad30:	f85d fb04 	ldr.w	pc, [sp], #4
    ad34:	1fff9280 	.word	0x1fff9280
    ad38:	1fff927c 	.word	0x1fff927c

0000ad3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
    ad3c:	b500      	push	{lr}
    ad3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad40:	f7f5 ff00 	bl	b44 <Sys_GetCoreID>
    ad44:	4603      	mov	r3, r0
    ad46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId])
    ad48:	4a10      	ldr	r2, [pc, #64]	; (ad8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
    ad4a:	9b01      	ldr	r3, [sp, #4]
    ad4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad50:	2b00      	cmp	r3, #0
    ad52:	d10d      	bne.n	ad70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ad54:	f7f5 fe26 	bl	9a4 <Pwm_schm_read_msr>
    ad58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ad5a:	9b00      	ldr	r3, [sp, #0]
    ad5c:	f003 0301 	and.w	r3, r3, #1
    ad60:	2b00      	cmp	r3, #0
    ad62:	d100      	bne.n	ad66 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ad64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    ad66:	490a      	ldr	r1, [pc, #40]	; (ad90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
    ad68:	9b01      	ldr	r3, [sp, #4]
    ad6a:	9a00      	ldr	r2, [sp, #0]
    ad6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]++;
    ad70:	4a06      	ldr	r2, [pc, #24]	; (ad8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
    ad72:	9b01      	ldr	r3, [sp, #4]
    ad74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad78:	1c5a      	adds	r2, r3, #1
    ad7a:	4904      	ldr	r1, [pc, #16]	; (ad8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
    ad7c:	9b01      	ldr	r3, [sp, #4]
    ad7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad82:	bf00      	nop
    ad84:	b003      	add	sp, #12
    ad86:	f85d fb04 	ldr.w	pc, [sp], #4
    ad8a:	bf00      	nop
    ad8c:	1fff9288 	.word	0x1fff9288
    ad90:	1fff9284 	.word	0x1fff9284

0000ad94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
    ad94:	b500      	push	{lr}
    ad96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad98:	f7f5 fed4 	bl	b44 <Sys_GetCoreID>
    ad9c:	4603      	mov	r3, r0
    ad9e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]--;
    ada0:	4a0d      	ldr	r2, [pc, #52]	; (add8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
    ada2:	9b01      	ldr	r3, [sp, #4]
    ada4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ada8:	1e5a      	subs	r2, r3, #1
    adaa:	490b      	ldr	r1, [pc, #44]	; (add8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
    adac:	9b01      	ldr	r3, [sp, #4]
    adae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    adb2:	4a0a      	ldr	r2, [pc, #40]	; (addc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
    adb4:	9b01      	ldr	r3, [sp, #4]
    adb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adba:	f003 0301 	and.w	r3, r3, #1
    adbe:	2b00      	cmp	r3, #0
    adc0:	d106      	bne.n	add0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    adc2:	4a05      	ldr	r2, [pc, #20]	; (add8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
    adc4:	9b01      	ldr	r3, [sp, #4]
    adc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adca:	2b00      	cmp	r3, #0
    adcc:	d100      	bne.n	add0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    adce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    add0:	bf00      	nop
    add2:	b003      	add	sp, #12
    add4:	f85d fb04 	ldr.w	pc, [sp], #4
    add8:	1fff9288 	.word	0x1fff9288
    addc:	1fff9284 	.word	0x1fff9284

0000ade0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
    ade0:	b500      	push	{lr}
    ade2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ade4:	f7f5 feae 	bl	b44 <Sys_GetCoreID>
    ade8:	4603      	mov	r3, r0
    adea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId])
    adec:	4a10      	ldr	r2, [pc, #64]	; (ae30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
    adee:	9b01      	ldr	r3, [sp, #4]
    adf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adf4:	2b00      	cmp	r3, #0
    adf6:	d10d      	bne.n	ae14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    adf8:	f7f5 fdd4 	bl	9a4 <Pwm_schm_read_msr>
    adfc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    adfe:	9b00      	ldr	r3, [sp, #0]
    ae00:	f003 0301 	and.w	r3, r3, #1
    ae04:	2b00      	cmp	r3, #0
    ae06:	d100      	bne.n	ae0a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ae08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    ae0a:	490a      	ldr	r1, [pc, #40]	; (ae34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
    ae0c:	9b01      	ldr	r3, [sp, #4]
    ae0e:	9a00      	ldr	r2, [sp, #0]
    ae10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]++;
    ae14:	4a06      	ldr	r2, [pc, #24]	; (ae30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
    ae16:	9b01      	ldr	r3, [sp, #4]
    ae18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae1c:	1c5a      	adds	r2, r3, #1
    ae1e:	4904      	ldr	r1, [pc, #16]	; (ae30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
    ae20:	9b01      	ldr	r3, [sp, #4]
    ae22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae26:	bf00      	nop
    ae28:	b003      	add	sp, #12
    ae2a:	f85d fb04 	ldr.w	pc, [sp], #4
    ae2e:	bf00      	nop
    ae30:	1fff9290 	.word	0x1fff9290
    ae34:	1fff928c 	.word	0x1fff928c

0000ae38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
    ae38:	b500      	push	{lr}
    ae3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae3c:	f7f5 fe82 	bl	b44 <Sys_GetCoreID>
    ae40:	4603      	mov	r3, r0
    ae42:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]--;
    ae44:	4a0d      	ldr	r2, [pc, #52]	; (ae7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
    ae46:	9b01      	ldr	r3, [sp, #4]
    ae48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae4c:	1e5a      	subs	r2, r3, #1
    ae4e:	490b      	ldr	r1, [pc, #44]	; (ae7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
    ae50:	9b01      	ldr	r3, [sp, #4]
    ae52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    ae56:	4a0a      	ldr	r2, [pc, #40]	; (ae80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
    ae58:	9b01      	ldr	r3, [sp, #4]
    ae5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae5e:	f003 0301 	and.w	r3, r3, #1
    ae62:	2b00      	cmp	r3, #0
    ae64:	d106      	bne.n	ae74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    ae66:	4a05      	ldr	r2, [pc, #20]	; (ae7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
    ae68:	9b01      	ldr	r3, [sp, #4]
    ae6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae6e:	2b00      	cmp	r3, #0
    ae70:	d100      	bne.n	ae74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae74:	bf00      	nop
    ae76:	b003      	add	sp, #12
    ae78:	f85d fb04 	ldr.w	pc, [sp], #4
    ae7c:	1fff9290 	.word	0x1fff9290
    ae80:	1fff928c 	.word	0x1fff928c

0000ae84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
    ae84:	b500      	push	{lr}
    ae86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae88:	f7f5 fe5c 	bl	b44 <Sys_GetCoreID>
    ae8c:	4603      	mov	r3, r0
    ae8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId])
    ae90:	4a10      	ldr	r2, [pc, #64]	; (aed4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
    ae92:	9b01      	ldr	r3, [sp, #4]
    ae94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae98:	2b00      	cmp	r3, #0
    ae9a:	d10d      	bne.n	aeb8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ae9c:	f7f5 fd82 	bl	9a4 <Pwm_schm_read_msr>
    aea0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aea2:	9b00      	ldr	r3, [sp, #0]
    aea4:	f003 0301 	and.w	r3, r3, #1
    aea8:	2b00      	cmp	r3, #0
    aeaa:	d100      	bne.n	aeae <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aeac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    aeae:	490a      	ldr	r1, [pc, #40]	; (aed8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
    aeb0:	9b01      	ldr	r3, [sp, #4]
    aeb2:	9a00      	ldr	r2, [sp, #0]
    aeb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]++;
    aeb8:	4a06      	ldr	r2, [pc, #24]	; (aed4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
    aeba:	9b01      	ldr	r3, [sp, #4]
    aebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aec0:	1c5a      	adds	r2, r3, #1
    aec2:	4904      	ldr	r1, [pc, #16]	; (aed4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
    aec4:	9b01      	ldr	r3, [sp, #4]
    aec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aeca:	bf00      	nop
    aecc:	b003      	add	sp, #12
    aece:	f85d fb04 	ldr.w	pc, [sp], #4
    aed2:	bf00      	nop
    aed4:	1fff9298 	.word	0x1fff9298
    aed8:	1fff9294 	.word	0x1fff9294

0000aedc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
    aedc:	b500      	push	{lr}
    aede:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aee0:	f7f5 fe30 	bl	b44 <Sys_GetCoreID>
    aee4:	4603      	mov	r3, r0
    aee6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]--;
    aee8:	4a0d      	ldr	r2, [pc, #52]	; (af20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
    aeea:	9b01      	ldr	r3, [sp, #4]
    aeec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aef0:	1e5a      	subs	r2, r3, #1
    aef2:	490b      	ldr	r1, [pc, #44]	; (af20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
    aef4:	9b01      	ldr	r3, [sp, #4]
    aef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    aefa:	4a0a      	ldr	r2, [pc, #40]	; (af24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
    aefc:	9b01      	ldr	r3, [sp, #4]
    aefe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af02:	f003 0301 	and.w	r3, r3, #1
    af06:	2b00      	cmp	r3, #0
    af08:	d106      	bne.n	af18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    af0a:	4a05      	ldr	r2, [pc, #20]	; (af20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
    af0c:	9b01      	ldr	r3, [sp, #4]
    af0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af12:	2b00      	cmp	r3, #0
    af14:	d100      	bne.n	af18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    af18:	bf00      	nop
    af1a:	b003      	add	sp, #12
    af1c:	f85d fb04 	ldr.w	pc, [sp], #4
    af20:	1fff9298 	.word	0x1fff9298
    af24:	1fff9294 	.word	0x1fff9294

0000af28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
    af28:	b500      	push	{lr}
    af2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af2c:	f7f5 fe0a 	bl	b44 <Sys_GetCoreID>
    af30:	4603      	mov	r3, r0
    af32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId])
    af34:	4a10      	ldr	r2, [pc, #64]	; (af78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
    af36:	9b01      	ldr	r3, [sp, #4]
    af38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af3c:	2b00      	cmp	r3, #0
    af3e:	d10d      	bne.n	af5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    af40:	f7f5 fd30 	bl	9a4 <Pwm_schm_read_msr>
    af44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    af46:	9b00      	ldr	r3, [sp, #0]
    af48:	f003 0301 	and.w	r3, r3, #1
    af4c:	2b00      	cmp	r3, #0
    af4e:	d100      	bne.n	af52 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    af50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    af52:	490a      	ldr	r1, [pc, #40]	; (af7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
    af54:	9b01      	ldr	r3, [sp, #4]
    af56:	9a00      	ldr	r2, [sp, #0]
    af58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]++;
    af5c:	4a06      	ldr	r2, [pc, #24]	; (af78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
    af5e:	9b01      	ldr	r3, [sp, #4]
    af60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af64:	1c5a      	adds	r2, r3, #1
    af66:	4904      	ldr	r1, [pc, #16]	; (af78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
    af68:	9b01      	ldr	r3, [sp, #4]
    af6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af6e:	bf00      	nop
    af70:	b003      	add	sp, #12
    af72:	f85d fb04 	ldr.w	pc, [sp], #4
    af76:	bf00      	nop
    af78:	1fff92a0 	.word	0x1fff92a0
    af7c:	1fff929c 	.word	0x1fff929c

0000af80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
    af80:	b500      	push	{lr}
    af82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af84:	f7f5 fdde 	bl	b44 <Sys_GetCoreID>
    af88:	4603      	mov	r3, r0
    af8a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]--;
    af8c:	4a0d      	ldr	r2, [pc, #52]	; (afc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
    af8e:	9b01      	ldr	r3, [sp, #4]
    af90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af94:	1e5a      	subs	r2, r3, #1
    af96:	490b      	ldr	r1, [pc, #44]	; (afc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
    af98:	9b01      	ldr	r3, [sp, #4]
    af9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    af9e:	4a0a      	ldr	r2, [pc, #40]	; (afc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
    afa0:	9b01      	ldr	r3, [sp, #4]
    afa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afa6:	f003 0301 	and.w	r3, r3, #1
    afaa:	2b00      	cmp	r3, #0
    afac:	d106      	bne.n	afbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    afae:	4a05      	ldr	r2, [pc, #20]	; (afc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
    afb0:	9b01      	ldr	r3, [sp, #4]
    afb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afb6:	2b00      	cmp	r3, #0
    afb8:	d100      	bne.n	afbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    afba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    afbc:	bf00      	nop
    afbe:	b003      	add	sp, #12
    afc0:	f85d fb04 	ldr.w	pc, [sp], #4
    afc4:	1fff92a0 	.word	0x1fff92a0
    afc8:	1fff929c 	.word	0x1fff929c

0000afcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
    afcc:	b500      	push	{lr}
    afce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afd0:	f7f5 fdb8 	bl	b44 <Sys_GetCoreID>
    afd4:	4603      	mov	r3, r0
    afd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId])
    afd8:	4a10      	ldr	r2, [pc, #64]	; (b01c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
    afda:	9b01      	ldr	r3, [sp, #4]
    afdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afe0:	2b00      	cmp	r3, #0
    afe2:	d10d      	bne.n	b000 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    afe4:	f7f5 fcde 	bl	9a4 <Pwm_schm_read_msr>
    afe8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    afea:	9b00      	ldr	r3, [sp, #0]
    afec:	f003 0301 	and.w	r3, r3, #1
    aff0:	2b00      	cmp	r3, #0
    aff2:	d100      	bne.n	aff6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aff4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    aff6:	490a      	ldr	r1, [pc, #40]	; (b020 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
    aff8:	9b01      	ldr	r3, [sp, #4]
    affa:	9a00      	ldr	r2, [sp, #0]
    affc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]++;
    b000:	4a06      	ldr	r2, [pc, #24]	; (b01c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
    b002:	9b01      	ldr	r3, [sp, #4]
    b004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b008:	1c5a      	adds	r2, r3, #1
    b00a:	4904      	ldr	r1, [pc, #16]	; (b01c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
    b00c:	9b01      	ldr	r3, [sp, #4]
    b00e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b012:	bf00      	nop
    b014:	b003      	add	sp, #12
    b016:	f85d fb04 	ldr.w	pc, [sp], #4
    b01a:	bf00      	nop
    b01c:	1fff92a8 	.word	0x1fff92a8
    b020:	1fff92a4 	.word	0x1fff92a4

0000b024 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
    b024:	b500      	push	{lr}
    b026:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b028:	f7f5 fd8c 	bl	b44 <Sys_GetCoreID>
    b02c:	4603      	mov	r3, r0
    b02e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]--;
    b030:	4a0d      	ldr	r2, [pc, #52]	; (b068 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
    b032:	9b01      	ldr	r3, [sp, #4]
    b034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b038:	1e5a      	subs	r2, r3, #1
    b03a:	490b      	ldr	r1, [pc, #44]	; (b068 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
    b03c:	9b01      	ldr	r3, [sp, #4]
    b03e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    b042:	4a0a      	ldr	r2, [pc, #40]	; (b06c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
    b044:	9b01      	ldr	r3, [sp, #4]
    b046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b04a:	f003 0301 	and.w	r3, r3, #1
    b04e:	2b00      	cmp	r3, #0
    b050:	d106      	bne.n	b060 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    b052:	4a05      	ldr	r2, [pc, #20]	; (b068 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
    b054:	9b01      	ldr	r3, [sp, #4]
    b056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b05a:	2b00      	cmp	r3, #0
    b05c:	d100      	bne.n	b060 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b05e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b060:	bf00      	nop
    b062:	b003      	add	sp, #12
    b064:	f85d fb04 	ldr.w	pc, [sp], #4
    b068:	1fff92a8 	.word	0x1fff92a8
    b06c:	1fff92a4 	.word	0x1fff92a4

0000b070 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
    b070:	b500      	push	{lr}
    b072:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b074:	f7f5 fd66 	bl	b44 <Sys_GetCoreID>
    b078:	4603      	mov	r3, r0
    b07a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId])
    b07c:	4a10      	ldr	r2, [pc, #64]	; (b0c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
    b07e:	9b01      	ldr	r3, [sp, #4]
    b080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b084:	2b00      	cmp	r3, #0
    b086:	d10d      	bne.n	b0a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b088:	f7f5 fc8c 	bl	9a4 <Pwm_schm_read_msr>
    b08c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b08e:	9b00      	ldr	r3, [sp, #0]
    b090:	f003 0301 	and.w	r3, r3, #1
    b094:	2b00      	cmp	r3, #0
    b096:	d100      	bne.n	b09a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b098:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    b09a:	490a      	ldr	r1, [pc, #40]	; (b0c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
    b09c:	9b01      	ldr	r3, [sp, #4]
    b09e:	9a00      	ldr	r2, [sp, #0]
    b0a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]++;
    b0a4:	4a06      	ldr	r2, [pc, #24]	; (b0c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
    b0a6:	9b01      	ldr	r3, [sp, #4]
    b0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0ac:	1c5a      	adds	r2, r3, #1
    b0ae:	4904      	ldr	r1, [pc, #16]	; (b0c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
    b0b0:	9b01      	ldr	r3, [sp, #4]
    b0b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b0b6:	bf00      	nop
    b0b8:	b003      	add	sp, #12
    b0ba:	f85d fb04 	ldr.w	pc, [sp], #4
    b0be:	bf00      	nop
    b0c0:	1fff92b0 	.word	0x1fff92b0
    b0c4:	1fff92ac 	.word	0x1fff92ac

0000b0c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
    b0c8:	b500      	push	{lr}
    b0ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0cc:	f7f5 fd3a 	bl	b44 <Sys_GetCoreID>
    b0d0:	4603      	mov	r3, r0
    b0d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]--;
    b0d4:	4a0d      	ldr	r2, [pc, #52]	; (b10c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
    b0d6:	9b01      	ldr	r3, [sp, #4]
    b0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0dc:	1e5a      	subs	r2, r3, #1
    b0de:	490b      	ldr	r1, [pc, #44]	; (b10c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
    b0e0:	9b01      	ldr	r3, [sp, #4]
    b0e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    b0e6:	4a0a      	ldr	r2, [pc, #40]	; (b110 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
    b0e8:	9b01      	ldr	r3, [sp, #4]
    b0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0ee:	f003 0301 	and.w	r3, r3, #1
    b0f2:	2b00      	cmp	r3, #0
    b0f4:	d106      	bne.n	b104 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    b0f6:	4a05      	ldr	r2, [pc, #20]	; (b10c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
    b0f8:	9b01      	ldr	r3, [sp, #4]
    b0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0fe:	2b00      	cmp	r3, #0
    b100:	d100      	bne.n	b104 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b102:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b104:	bf00      	nop
    b106:	b003      	add	sp, #12
    b108:	f85d fb04 	ldr.w	pc, [sp], #4
    b10c:	1fff92b0 	.word	0x1fff92b0
    b110:	1fff92ac 	.word	0x1fff92ac

0000b114 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
    b114:	b500      	push	{lr}
    b116:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b118:	f7f5 fd14 	bl	b44 <Sys_GetCoreID>
    b11c:	4603      	mov	r3, r0
    b11e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId])
    b120:	4a10      	ldr	r2, [pc, #64]	; (b164 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
    b122:	9b01      	ldr	r3, [sp, #4]
    b124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b128:	2b00      	cmp	r3, #0
    b12a:	d10d      	bne.n	b148 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b12c:	f7f5 fc3a 	bl	9a4 <Pwm_schm_read_msr>
    b130:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b132:	9b00      	ldr	r3, [sp, #0]
    b134:	f003 0301 	and.w	r3, r3, #1
    b138:	2b00      	cmp	r3, #0
    b13a:	d100      	bne.n	b13e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b13c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    b13e:	490a      	ldr	r1, [pc, #40]	; (b168 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
    b140:	9b01      	ldr	r3, [sp, #4]
    b142:	9a00      	ldr	r2, [sp, #0]
    b144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]++;
    b148:	4a06      	ldr	r2, [pc, #24]	; (b164 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
    b14a:	9b01      	ldr	r3, [sp, #4]
    b14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b150:	1c5a      	adds	r2, r3, #1
    b152:	4904      	ldr	r1, [pc, #16]	; (b164 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
    b154:	9b01      	ldr	r3, [sp, #4]
    b156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b15a:	bf00      	nop
    b15c:	b003      	add	sp, #12
    b15e:	f85d fb04 	ldr.w	pc, [sp], #4
    b162:	bf00      	nop
    b164:	1fff92b8 	.word	0x1fff92b8
    b168:	1fff92b4 	.word	0x1fff92b4

0000b16c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
    b16c:	b500      	push	{lr}
    b16e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b170:	f7f5 fce8 	bl	b44 <Sys_GetCoreID>
    b174:	4603      	mov	r3, r0
    b176:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]--;
    b178:	4a0d      	ldr	r2, [pc, #52]	; (b1b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
    b17a:	9b01      	ldr	r3, [sp, #4]
    b17c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b180:	1e5a      	subs	r2, r3, #1
    b182:	490b      	ldr	r1, [pc, #44]	; (b1b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
    b184:	9b01      	ldr	r3, [sp, #4]
    b186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    b18a:	4a0a      	ldr	r2, [pc, #40]	; (b1b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
    b18c:	9b01      	ldr	r3, [sp, #4]
    b18e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b192:	f003 0301 	and.w	r3, r3, #1
    b196:	2b00      	cmp	r3, #0
    b198:	d106      	bne.n	b1a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    b19a:	4a05      	ldr	r2, [pc, #20]	; (b1b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
    b19c:	9b01      	ldr	r3, [sp, #4]
    b19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1a2:	2b00      	cmp	r3, #0
    b1a4:	d100      	bne.n	b1a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b1a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b1a8:	bf00      	nop
    b1aa:	b003      	add	sp, #12
    b1ac:	f85d fb04 	ldr.w	pc, [sp], #4
    b1b0:	1fff92b8 	.word	0x1fff92b8
    b1b4:	1fff92b4 	.word	0x1fff92b4

0000b1b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
    b1b8:	b500      	push	{lr}
    b1ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1bc:	f7f5 fcc2 	bl	b44 <Sys_GetCoreID>
    b1c0:	4603      	mov	r3, r0
    b1c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId])
    b1c4:	4a10      	ldr	r2, [pc, #64]	; (b208 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
    b1c6:	9b01      	ldr	r3, [sp, #4]
    b1c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1cc:	2b00      	cmp	r3, #0
    b1ce:	d10d      	bne.n	b1ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b1d0:	f7f5 fbe8 	bl	9a4 <Pwm_schm_read_msr>
    b1d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b1d6:	9b00      	ldr	r3, [sp, #0]
    b1d8:	f003 0301 	and.w	r3, r3, #1
    b1dc:	2b00      	cmp	r3, #0
    b1de:	d100      	bne.n	b1e2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b1e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_28[u32CoreId] = msr;
    b1e2:	490a      	ldr	r1, [pc, #40]	; (b20c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
    b1e4:	9b01      	ldr	r3, [sp, #4]
    b1e6:	9a00      	ldr	r2, [sp, #0]
    b1e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]++;
    b1ec:	4a06      	ldr	r2, [pc, #24]	; (b208 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
    b1ee:	9b01      	ldr	r3, [sp, #4]
    b1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1f4:	1c5a      	adds	r2, r3, #1
    b1f6:	4904      	ldr	r1, [pc, #16]	; (b208 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
    b1f8:	9b01      	ldr	r3, [sp, #4]
    b1fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b1fe:	bf00      	nop
    b200:	b003      	add	sp, #12
    b202:	f85d fb04 	ldr.w	pc, [sp], #4
    b206:	bf00      	nop
    b208:	1fff92c0 	.word	0x1fff92c0
    b20c:	1fff92bc 	.word	0x1fff92bc

0000b210 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
    b210:	b500      	push	{lr}
    b212:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b214:	f7f5 fc96 	bl	b44 <Sys_GetCoreID>
    b218:	4603      	mov	r3, r0
    b21a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]--;
    b21c:	4a0d      	ldr	r2, [pc, #52]	; (b254 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
    b21e:	9b01      	ldr	r3, [sp, #4]
    b220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b224:	1e5a      	subs	r2, r3, #1
    b226:	490b      	ldr	r1, [pc, #44]	; (b254 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
    b228:	9b01      	ldr	r3, [sp, #4]
    b22a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
    b22e:	4a0a      	ldr	r2, [pc, #40]	; (b258 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
    b230:	9b01      	ldr	r3, [sp, #4]
    b232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b236:	f003 0301 	and.w	r3, r3, #1
    b23a:	2b00      	cmp	r3, #0
    b23c:	d106      	bne.n	b24c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    b23e:	4a05      	ldr	r2, [pc, #20]	; (b254 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
    b240:	9b01      	ldr	r3, [sp, #4]
    b242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b246:	2b00      	cmp	r3, #0
    b248:	d100      	bne.n	b24c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b24a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b24c:	bf00      	nop
    b24e:	b003      	add	sp, #12
    b250:	f85d fb04 	ldr.w	pc, [sp], #4
    b254:	1fff92c0 	.word	0x1fff92c0
    b258:	1fff92bc 	.word	0x1fff92bc

0000b25c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
    b25c:	b500      	push	{lr}
    b25e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b260:	f7f5 fc70 	bl	b44 <Sys_GetCoreID>
    b264:	4603      	mov	r3, r0
    b266:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId])
    b268:	4a10      	ldr	r2, [pc, #64]	; (b2ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
    b26a:	9b01      	ldr	r3, [sp, #4]
    b26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b270:	2b00      	cmp	r3, #0
    b272:	d10d      	bne.n	b290 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b274:	f7f5 fb96 	bl	9a4 <Pwm_schm_read_msr>
    b278:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b27a:	9b00      	ldr	r3, [sp, #0]
    b27c:	f003 0301 	and.w	r3, r3, #1
    b280:	2b00      	cmp	r3, #0
    b282:	d100      	bne.n	b286 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b284:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    b286:	490a      	ldr	r1, [pc, #40]	; (b2b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
    b288:	9b01      	ldr	r3, [sp, #4]
    b28a:	9a00      	ldr	r2, [sp, #0]
    b28c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]++;
    b290:	4a06      	ldr	r2, [pc, #24]	; (b2ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
    b292:	9b01      	ldr	r3, [sp, #4]
    b294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b298:	1c5a      	adds	r2, r3, #1
    b29a:	4904      	ldr	r1, [pc, #16]	; (b2ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
    b29c:	9b01      	ldr	r3, [sp, #4]
    b29e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b2a2:	bf00      	nop
    b2a4:	b003      	add	sp, #12
    b2a6:	f85d fb04 	ldr.w	pc, [sp], #4
    b2aa:	bf00      	nop
    b2ac:	1fff92c8 	.word	0x1fff92c8
    b2b0:	1fff92c4 	.word	0x1fff92c4

0000b2b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
    b2b4:	b500      	push	{lr}
    b2b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2b8:	f7f5 fc44 	bl	b44 <Sys_GetCoreID>
    b2bc:	4603      	mov	r3, r0
    b2be:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]--;
    b2c0:	4a0d      	ldr	r2, [pc, #52]	; (b2f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
    b2c2:	9b01      	ldr	r3, [sp, #4]
    b2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2c8:	1e5a      	subs	r2, r3, #1
    b2ca:	490b      	ldr	r1, [pc, #44]	; (b2f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
    b2cc:	9b01      	ldr	r3, [sp, #4]
    b2ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    b2d2:	4a0a      	ldr	r2, [pc, #40]	; (b2fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
    b2d4:	9b01      	ldr	r3, [sp, #4]
    b2d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2da:	f003 0301 	and.w	r3, r3, #1
    b2de:	2b00      	cmp	r3, #0
    b2e0:	d106      	bne.n	b2f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    b2e2:	4a05      	ldr	r2, [pc, #20]	; (b2f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
    b2e4:	9b01      	ldr	r3, [sp, #4]
    b2e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2ea:	2b00      	cmp	r3, #0
    b2ec:	d100      	bne.n	b2f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b2ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b2f0:	bf00      	nop
    b2f2:	b003      	add	sp, #12
    b2f4:	f85d fb04 	ldr.w	pc, [sp], #4
    b2f8:	1fff92c8 	.word	0x1fff92c8
    b2fc:	1fff92c4 	.word	0x1fff92c4

0000b300 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
    b300:	b500      	push	{lr}
    b302:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b304:	f7f5 fc1e 	bl	b44 <Sys_GetCoreID>
    b308:	4603      	mov	r3, r0
    b30a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId])
    b30c:	4a10      	ldr	r2, [pc, #64]	; (b350 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
    b30e:	9b01      	ldr	r3, [sp, #4]
    b310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b314:	2b00      	cmp	r3, #0
    b316:	d10d      	bne.n	b334 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b318:	f7f5 fb44 	bl	9a4 <Pwm_schm_read_msr>
    b31c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b31e:	9b00      	ldr	r3, [sp, #0]
    b320:	f003 0301 	and.w	r3, r3, #1
    b324:	2b00      	cmp	r3, #0
    b326:	d100      	bne.n	b32a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b328:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    b32a:	490a      	ldr	r1, [pc, #40]	; (b354 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
    b32c:	9b01      	ldr	r3, [sp, #4]
    b32e:	9a00      	ldr	r2, [sp, #0]
    b330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]++;
    b334:	4a06      	ldr	r2, [pc, #24]	; (b350 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
    b336:	9b01      	ldr	r3, [sp, #4]
    b338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b33c:	1c5a      	adds	r2, r3, #1
    b33e:	4904      	ldr	r1, [pc, #16]	; (b350 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
    b340:	9b01      	ldr	r3, [sp, #4]
    b342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b346:	bf00      	nop
    b348:	b003      	add	sp, #12
    b34a:	f85d fb04 	ldr.w	pc, [sp], #4
    b34e:	bf00      	nop
    b350:	1fff92d0 	.word	0x1fff92d0
    b354:	1fff92cc 	.word	0x1fff92cc

0000b358 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
    b358:	b500      	push	{lr}
    b35a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b35c:	f7f5 fbf2 	bl	b44 <Sys_GetCoreID>
    b360:	4603      	mov	r3, r0
    b362:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]--;
    b364:	4a0d      	ldr	r2, [pc, #52]	; (b39c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
    b366:	9b01      	ldr	r3, [sp, #4]
    b368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b36c:	1e5a      	subs	r2, r3, #1
    b36e:	490b      	ldr	r1, [pc, #44]	; (b39c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
    b370:	9b01      	ldr	r3, [sp, #4]
    b372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    b376:	4a0a      	ldr	r2, [pc, #40]	; (b3a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
    b378:	9b01      	ldr	r3, [sp, #4]
    b37a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b37e:	f003 0301 	and.w	r3, r3, #1
    b382:	2b00      	cmp	r3, #0
    b384:	d106      	bne.n	b394 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    b386:	4a05      	ldr	r2, [pc, #20]	; (b39c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
    b388:	9b01      	ldr	r3, [sp, #4]
    b38a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b38e:	2b00      	cmp	r3, #0
    b390:	d100      	bne.n	b394 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b392:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b394:	bf00      	nop
    b396:	b003      	add	sp, #12
    b398:	f85d fb04 	ldr.w	pc, [sp], #4
    b39c:	1fff92d0 	.word	0x1fff92d0
    b3a0:	1fff92cc 	.word	0x1fff92cc

0000b3a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
    b3a4:	b500      	push	{lr}
    b3a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3a8:	f7f5 fbcc 	bl	b44 <Sys_GetCoreID>
    b3ac:	4603      	mov	r3, r0
    b3ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId])
    b3b0:	4a10      	ldr	r2, [pc, #64]	; (b3f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
    b3b2:	9b01      	ldr	r3, [sp, #4]
    b3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3b8:	2b00      	cmp	r3, #0
    b3ba:	d10d      	bne.n	b3d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b3bc:	f7f5 faf2 	bl	9a4 <Pwm_schm_read_msr>
    b3c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b3c2:	9b00      	ldr	r3, [sp, #0]
    b3c4:	f003 0301 	and.w	r3, r3, #1
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	d100      	bne.n	b3ce <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b3cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    b3ce:	490a      	ldr	r1, [pc, #40]	; (b3f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
    b3d0:	9b01      	ldr	r3, [sp, #4]
    b3d2:	9a00      	ldr	r2, [sp, #0]
    b3d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]++;
    b3d8:	4a06      	ldr	r2, [pc, #24]	; (b3f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
    b3da:	9b01      	ldr	r3, [sp, #4]
    b3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3e0:	1c5a      	adds	r2, r3, #1
    b3e2:	4904      	ldr	r1, [pc, #16]	; (b3f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
    b3e4:	9b01      	ldr	r3, [sp, #4]
    b3e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b3ea:	bf00      	nop
    b3ec:	b003      	add	sp, #12
    b3ee:	f85d fb04 	ldr.w	pc, [sp], #4
    b3f2:	bf00      	nop
    b3f4:	1fff92d8 	.word	0x1fff92d8
    b3f8:	1fff92d4 	.word	0x1fff92d4

0000b3fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
    b3fc:	b500      	push	{lr}
    b3fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b400:	f7f5 fba0 	bl	b44 <Sys_GetCoreID>
    b404:	4603      	mov	r3, r0
    b406:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]--;
    b408:	4a0d      	ldr	r2, [pc, #52]	; (b440 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
    b40a:	9b01      	ldr	r3, [sp, #4]
    b40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b410:	1e5a      	subs	r2, r3, #1
    b412:	490b      	ldr	r1, [pc, #44]	; (b440 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
    b414:	9b01      	ldr	r3, [sp, #4]
    b416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    b41a:	4a0a      	ldr	r2, [pc, #40]	; (b444 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
    b41c:	9b01      	ldr	r3, [sp, #4]
    b41e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b422:	f003 0301 	and.w	r3, r3, #1
    b426:	2b00      	cmp	r3, #0
    b428:	d106      	bne.n	b438 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    b42a:	4a05      	ldr	r2, [pc, #20]	; (b440 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
    b42c:	9b01      	ldr	r3, [sp, #4]
    b42e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b432:	2b00      	cmp	r3, #0
    b434:	d100      	bne.n	b438 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b436:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b438:	bf00      	nop
    b43a:	b003      	add	sp, #12
    b43c:	f85d fb04 	ldr.w	pc, [sp], #4
    b440:	1fff92d8 	.word	0x1fff92d8
    b444:	1fff92d4 	.word	0x1fff92d4

0000b448 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
    b448:	b500      	push	{lr}
    b44a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b44c:	f7f5 fb7a 	bl	b44 <Sys_GetCoreID>
    b450:	4603      	mov	r3, r0
    b452:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId])
    b454:	4a10      	ldr	r2, [pc, #64]	; (b498 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
    b456:	9b01      	ldr	r3, [sp, #4]
    b458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b45c:	2b00      	cmp	r3, #0
    b45e:	d10d      	bne.n	b47c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b460:	f7f5 faa0 	bl	9a4 <Pwm_schm_read_msr>
    b464:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b466:	9b00      	ldr	r3, [sp, #0]
    b468:	f003 0301 	and.w	r3, r3, #1
    b46c:	2b00      	cmp	r3, #0
    b46e:	d100      	bne.n	b472 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b470:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_32[u32CoreId] = msr;
    b472:	490a      	ldr	r1, [pc, #40]	; (b49c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
    b474:	9b01      	ldr	r3, [sp, #4]
    b476:	9a00      	ldr	r2, [sp, #0]
    b478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]++;
    b47c:	4a06      	ldr	r2, [pc, #24]	; (b498 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
    b47e:	9b01      	ldr	r3, [sp, #4]
    b480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b484:	1c5a      	adds	r2, r3, #1
    b486:	4904      	ldr	r1, [pc, #16]	; (b498 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
    b488:	9b01      	ldr	r3, [sp, #4]
    b48a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b48e:	bf00      	nop
    b490:	b003      	add	sp, #12
    b492:	f85d fb04 	ldr.w	pc, [sp], #4
    b496:	bf00      	nop
    b498:	1fff92e0 	.word	0x1fff92e0
    b49c:	1fff92dc 	.word	0x1fff92dc

0000b4a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
    b4a0:	b500      	push	{lr}
    b4a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4a4:	f7f5 fb4e 	bl	b44 <Sys_GetCoreID>
    b4a8:	4603      	mov	r3, r0
    b4aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]--;
    b4ac:	4a0d      	ldr	r2, [pc, #52]	; (b4e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
    b4ae:	9b01      	ldr	r3, [sp, #4]
    b4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4b4:	1e5a      	subs	r2, r3, #1
    b4b6:	490b      	ldr	r1, [pc, #44]	; (b4e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
    b4b8:	9b01      	ldr	r3, [sp, #4]
    b4ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
    b4be:	4a0a      	ldr	r2, [pc, #40]	; (b4e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
    b4c0:	9b01      	ldr	r3, [sp, #4]
    b4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4c6:	f003 0301 	and.w	r3, r3, #1
    b4ca:	2b00      	cmp	r3, #0
    b4cc:	d106      	bne.n	b4dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    b4ce:	4a05      	ldr	r2, [pc, #20]	; (b4e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
    b4d0:	9b01      	ldr	r3, [sp, #4]
    b4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4d6:	2b00      	cmp	r3, #0
    b4d8:	d100      	bne.n	b4dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b4da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b4dc:	bf00      	nop
    b4de:	b003      	add	sp, #12
    b4e0:	f85d fb04 	ldr.w	pc, [sp], #4
    b4e4:	1fff92e0 	.word	0x1fff92e0
    b4e8:	1fff92dc 	.word	0x1fff92dc

0000b4ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
    b4ec:	b500      	push	{lr}
    b4ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4f0:	f7f5 fb28 	bl	b44 <Sys_GetCoreID>
    b4f4:	4603      	mov	r3, r0
    b4f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId])
    b4f8:	4a10      	ldr	r2, [pc, #64]	; (b53c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
    b4fa:	9b01      	ldr	r3, [sp, #4]
    b4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b500:	2b00      	cmp	r3, #0
    b502:	d10d      	bne.n	b520 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b504:	f7f5 fa4e 	bl	9a4 <Pwm_schm_read_msr>
    b508:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b50a:	9b00      	ldr	r3, [sp, #0]
    b50c:	f003 0301 	and.w	r3, r3, #1
    b510:	2b00      	cmp	r3, #0
    b512:	d100      	bne.n	b516 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b514:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_33[u32CoreId] = msr;
    b516:	490a      	ldr	r1, [pc, #40]	; (b540 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
    b518:	9b01      	ldr	r3, [sp, #4]
    b51a:	9a00      	ldr	r2, [sp, #0]
    b51c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]++;
    b520:	4a06      	ldr	r2, [pc, #24]	; (b53c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
    b522:	9b01      	ldr	r3, [sp, #4]
    b524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b528:	1c5a      	adds	r2, r3, #1
    b52a:	4904      	ldr	r1, [pc, #16]	; (b53c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
    b52c:	9b01      	ldr	r3, [sp, #4]
    b52e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b532:	bf00      	nop
    b534:	b003      	add	sp, #12
    b536:	f85d fb04 	ldr.w	pc, [sp], #4
    b53a:	bf00      	nop
    b53c:	1fff92e8 	.word	0x1fff92e8
    b540:	1fff92e4 	.word	0x1fff92e4

0000b544 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
    b544:	b500      	push	{lr}
    b546:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b548:	f7f5 fafc 	bl	b44 <Sys_GetCoreID>
    b54c:	4603      	mov	r3, r0
    b54e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]--;
    b550:	4a0d      	ldr	r2, [pc, #52]	; (b588 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
    b552:	9b01      	ldr	r3, [sp, #4]
    b554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b558:	1e5a      	subs	r2, r3, #1
    b55a:	490b      	ldr	r1, [pc, #44]	; (b588 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
    b55c:	9b01      	ldr	r3, [sp, #4]
    b55e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
    b562:	4a0a      	ldr	r2, [pc, #40]	; (b58c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
    b564:	9b01      	ldr	r3, [sp, #4]
    b566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b56a:	f003 0301 	and.w	r3, r3, #1
    b56e:	2b00      	cmp	r3, #0
    b570:	d106      	bne.n	b580 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    b572:	4a05      	ldr	r2, [pc, #20]	; (b588 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
    b574:	9b01      	ldr	r3, [sp, #4]
    b576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b57a:	2b00      	cmp	r3, #0
    b57c:	d100      	bne.n	b580 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b57e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b580:	bf00      	nop
    b582:	b003      	add	sp, #12
    b584:	f85d fb04 	ldr.w	pc, [sp], #4
    b588:	1fff92e8 	.word	0x1fff92e8
    b58c:	1fff92e4 	.word	0x1fff92e4

0000b590 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
    b590:	b500      	push	{lr}
    b592:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b594:	f7f5 fad6 	bl	b44 <Sys_GetCoreID>
    b598:	4603      	mov	r3, r0
    b59a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId])
    b59c:	4a10      	ldr	r2, [pc, #64]	; (b5e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
    b59e:	9b01      	ldr	r3, [sp, #4]
    b5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5a4:	2b00      	cmp	r3, #0
    b5a6:	d10d      	bne.n	b5c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b5a8:	f7f5 f9fc 	bl	9a4 <Pwm_schm_read_msr>
    b5ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b5ae:	9b00      	ldr	r3, [sp, #0]
    b5b0:	f003 0301 	and.w	r3, r3, #1
    b5b4:	2b00      	cmp	r3, #0
    b5b6:	d100      	bne.n	b5ba <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b5b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_34[u32CoreId] = msr;
    b5ba:	490a      	ldr	r1, [pc, #40]	; (b5e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
    b5bc:	9b01      	ldr	r3, [sp, #4]
    b5be:	9a00      	ldr	r2, [sp, #0]
    b5c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]++;
    b5c4:	4a06      	ldr	r2, [pc, #24]	; (b5e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
    b5c6:	9b01      	ldr	r3, [sp, #4]
    b5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5cc:	1c5a      	adds	r2, r3, #1
    b5ce:	4904      	ldr	r1, [pc, #16]	; (b5e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
    b5d0:	9b01      	ldr	r3, [sp, #4]
    b5d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b5d6:	bf00      	nop
    b5d8:	b003      	add	sp, #12
    b5da:	f85d fb04 	ldr.w	pc, [sp], #4
    b5de:	bf00      	nop
    b5e0:	1fff92f0 	.word	0x1fff92f0
    b5e4:	1fff92ec 	.word	0x1fff92ec

0000b5e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
    b5e8:	b500      	push	{lr}
    b5ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5ec:	f7f5 faaa 	bl	b44 <Sys_GetCoreID>
    b5f0:	4603      	mov	r3, r0
    b5f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]--;
    b5f4:	4a0d      	ldr	r2, [pc, #52]	; (b62c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
    b5f6:	9b01      	ldr	r3, [sp, #4]
    b5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5fc:	1e5a      	subs	r2, r3, #1
    b5fe:	490b      	ldr	r1, [pc, #44]	; (b62c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
    b600:	9b01      	ldr	r3, [sp, #4]
    b602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
    b606:	4a0a      	ldr	r2, [pc, #40]	; (b630 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
    b608:	9b01      	ldr	r3, [sp, #4]
    b60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b60e:	f003 0301 	and.w	r3, r3, #1
    b612:	2b00      	cmp	r3, #0
    b614:	d106      	bne.n	b624 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    b616:	4a05      	ldr	r2, [pc, #20]	; (b62c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
    b618:	9b01      	ldr	r3, [sp, #4]
    b61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b61e:	2b00      	cmp	r3, #0
    b620:	d100      	bne.n	b624 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b622:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b624:	bf00      	nop
    b626:	b003      	add	sp, #12
    b628:	f85d fb04 	ldr.w	pc, [sp], #4
    b62c:	1fff92f0 	.word	0x1fff92f0
    b630:	1fff92ec 	.word	0x1fff92ec

0000b634 <Clock_Ip_au8DividerCallbackIndex>:
    b634:	0e0d0c00 06030201 0a070409 000b0805     ................

0000b644 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000b654 <Clock_Ip_au8XoscCallbackIndex>:
    b654:	00000100 00000000 00000000 00000000     ................

0000b664 <Clock_Ip_au8IrcoscCallbackIndex>:
    b664:	03020100 00000004 00000000 00000000     ................

0000b674 <Clock_Ip_au8GateCallbackIndex>:
    b674:	06010200 01040301 00000500 00000000     ................

0000b684 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000b694 <Clock_Ip_au8PllCallbackIndex>:
    b694:	00000100 00000000 00000000 00000000     ................

0000b6a4 <Clock_Ip_au8SelectorCallbackIndex>:
    b6a4:	0a090800 03020109 07060504 00000000     ................

0000b6b4 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000b6c4 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000b6d4 <Clock_Ip_au8ClockFeatures>:
	...
    b6e4:	01000000 00000000 00000000 00000002     ................
    b6f4:	00000000 00000300 00000000 00040000     ................
    b704:	00000000 05000000 00000000 00000000     ................
    b714:	00000006 00000000 00000100 00000000     ................
    b724:	00010000 00000000 04000000 00000000     ................
    b734:	00000000 00000005 00000001 00000401     ................
    b744:	00000200 00050100 00030000 04020000     ................
    b754:	04000000 02000000 00000005 00000005     ................
    b764:	00000403 00000600 00050300 00070000     ................
    b774:	05000000 00000000 00000000 00000006     ................
	...
    b7b4:	00050000 00000000 06000000 00000100     ................
    b7c4:	00000000 00030007 00000000 00000000     ................
    b7d4:	00000000 00060000 00000000 07000000     ................
    b7e4:	00000100 00000000 00030008 00000000     ................
	...
    b7fc:	00090000 00000000 0a000000 00000100     ................
    b80c:	00000000 0003000b 00000000 00000000     ................
    b81c:	00000000 000c0000 00000000 0d000000     ................
    b82c:	00000100 00000000 0003000e 00000000     ................
    b83c:	00000800 00000000 00090000 00000000     ................
    b84c:	0a000000 00000000 00000000 0000000b     ................
    b85c:	00000000 00000b01 00000000 000b0200     ................
    b86c:	00000000 0b030000 00000000 00000000     ................
	...
    b884:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    b894:	01000000 00000000 00000000 00000007     ................
    b8a4:	00007300 00000700 00320000 00090000     .s........2.....
    b8b4:	02000000 07000000 00000000 00000021     ............!...
    b8c4:	00000009 00000400 00000900 00030000     ................
    b8d4:	00070000 61000000 07000000 00000000     .......a........
    b8e4:	00000024 00000007 00002500 00000700     $........%......
    b8f4:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    b904:	00000000 00000020 38000004 00003800     .... ......8.8..
    b914:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    b924:	04000000 00260000 00000026 66000004     ......&.&......f
    b934:	00006600 00000400 00370037 00040000     .f......7.7.....
    b944:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    b954:	2e000004 00002e00 00000200 00404040     ............@@@.
    b964:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    b974:	0000006b 6c000004 00006c00 00000900     k......l.l......
    b984:	00010000 00090000 00000000 07000000     ................
    b994:	00000000 00000036 00000007 00003100     ....6........1..
    b9a4:	00000700 00490000 00070000 4a000000     ......I........J
    b9b4:	07000000 00000000 0000004b 00000007     ........K.......
    b9c4:	00004c00 00000700 004d0000 00070000     .L........M.....
    b9d4:	3d000000 03000000 00000000 00000000     ...=............

0000b9e4 <Clock_Ip_au16SelectorEntryHardwareValue>:
    b9e4:	01010a03 01010001 04040002 02000603     ................
    b9f4:	00010810 02020100 00000000 00000007     ................
    ba04:	00000009 00000000 00000c0e 00000000     ................
	...

0000ba3c <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    ba3c:	00020000 00000300 00000601 00000000     ................
	...

0000ba6c <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    ba6c:	00000700 00000000 02020000 01010303     ................
    ba7c:	03020606 00000000 00000000 00000000     ................
	...

0000ba9c <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    ba9c:	00000001 00000000 02020000 01010303     ................
    baac:	03020606 00000000 00000000 00000000     ................
	...

0000bacc <Clock_Ip_au8DividerValueHardwareValue>:
    bacc:	00020100 00000003 00000004 00000000     ................
    badc:	00000005 00000000 00000000 00000000     ................
    baec:	00000006 00000000 00000000 00000000     ................
	...
    bb0c:	00000007                                ....

0000bb10 <Clock_Ip_apxScgPeriphAsyncDivs>:
    bb10:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000bb20 <Clock_Ip_aeSourceTypeClockName>:
    bb20:	00000000 00000001 00000001 00000001     ................
    bb30:	00000001 00000001 00000001 00000001     ................
    bb40:	00000002 00000003 00000001 00000001     ................
    bb50:	00000001 00000001 00000002 00000002     ................
    bb60:	00000003 00000003 00000001 00000001     ................
    bb70:	00000004 00000004 00000004 00000004     ................
	...

0000bbdc <Clock_Ip_aeHwPllName>:
    bbdc:	00000009                                ....

0000bbe0 <Clock_Ip_aeHwDfsName>:
    bbe0:	00000057                                W...

0000bbe4 <Clock_Ip_axDividerCallbacks>:
    bbe4:	00001c59 00001c63 00001c7d 00001c97     Y...c...}.......
    bbf4:	00001cb1 00001ccb 00001ce5 00001cff     ................
    bc04:	00001d19 00001d33 00001d4d 00001d67     ....3...M...g...
    bc14:	00001d81 00001d9b 00001db5              ............

0000bc20 <Clock_Ip_axDividerTriggerCallbacks>:
    bc20:	00002129 00002129                       )!..)!..

0000bc28 <Clock_Ip_axExtOscCallbacks>:
    bc28:	00002135 00002135 00002135 0000213f     5!..5!..5!..?!..
    bc38:	00002135 00002149 00002163 0000217d     5!..I!..c!..}!..
    bc48:	00002201 00002215                       ."..."..

0000bc50 <Clock_Ip_axFracDivCallbacks>:
    bc50:	000023d5 000023d5 000023df              .#...#...#..

0000bc5c <Clock_Ip_axGateCallbacks>:
    bc5c:	000023f9 00002403 00002503 0000251d     .#...$...%...%..
    bc6c:	000024b3 000024cd 00002463 0000247d     .$...$..c$..}$..
    bc7c:	00002413 0000242d 00002553 0000256d     .$..-$..S%..m%..
    bc8c:	000025a3 000025bd                       .%...%..

0000bc94 <Clock_Ip_axIntOscCallbacks>:
    bc94:	00002769 00002769 00002773 0000277d     i'..i'..s'..}'..
    bca4:	00002797 000027b1 000027c5 000027df     .'...'...'...'..
    bcb4:	000027f9 0000280d 00002827 00002841     .'...(..'(..A(..
    bcc4:	000028e9 00002903 0000291d              .(...)...)..

0000bcd0 <Clock_Ip_axCmuCallbacks>:
    bcd0:	00002eb9 00002ec3 00002ecf 00002eb9     ................

0000bce0 <Clock_Ip_axPllCallbacks>:
    bce0:	00002ed9 00002ed9 00002ee3 00002ed9     ................
    bcf0:	00002eef 00002ef9 00002f13 00002f2d     ........./..-/..
    bd00:	00002fd1 00002fbd                       ./.../..

0000bd08 <Clock_Ip_axPcfsCallbacks>:
    bd08:	0000312d                                -1..

0000bd0c <Clock_Ip_axSelectorCallbacks>:
    bd0c:	00003139 00003139 00003143 0000315d     91..91..C1..]1..
    bd1c:	00003139 00003177 00003191 000031ab     91..w1...1...1..
    bd2c:	000031c5 000031df 000031f9 00003213     .1...1...1...2..
    bd3c:	0000322d 00003247 00003261 0000327b     -2..G2..a2..{2..
    bd4c:	00003295 000032af 000032c9 000032e3     .2...2...2...2..
    bd5c:	000032fd 00003317                       .2...3..

0000bd64 <ClockSource>:
    bd64:	00000000 00000008 00000002 00000005     ................
	...
    bd7c:	00000009                                ....

0000bd80 <ResetReasonArray>:
    bd80:	00000000 00000001 00000002 00000003     ................
    bd90:	00000004 00000005 00000006 00000007     ................
    bda0:	00000008 00000009 0000000a 0000000b     ................
    bdb0:	0000000c 0000000d 0000000e              ............

0000bdbc <Port_au32PortCiPortBaseAddr>:
    bdbc:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    bdcc:	4004d000                                ...@

0000bdd0 <Port_au32PortCiGpioBaseAddr>:
    bdd0:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    bde0:	400ff100                                ...@

0000bde4 <Ftm_Pwm_Ip_aFtmBase>:
    bde4:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

0000bdf4 <Mcu_aClockConfigPB>:
	...
    bdfc:	1c000101 04000010 01000029 00000005     ........).......
    be0c:	00000001 00000000 00000057 00000000     ........W.......
    be1c:	00000000 00000008 007a1200 00000001     ..........z.....
    be2c:	00000001 00000000 00000057 00000000     ........W.......
    be3c:	00000057 00000000 00000000 00000000     W...............
	...
    be5c:	00000019 00000005 0000001a 00000002     ................
    be6c:	0000001b 00000005 0000002a 00000005     ........*.......
    be7c:	00000028 0000000e 00000029 00000001     (.......).......
    be8c:	00000056 0000001c 00000032 0000002a     V.......2...*...
    be9c:	0000002b 00000014 0000002c 00000014     +.......,.......
    beac:	0000002d 00000014 0000002e 00000014     -...............
    bebc:	0000003f 00000000 00000040 00000000     ?.......@.......
    becc:	00000041 00000000 00000042 00000000     A.......B.......
    bedc:	00000031 00000000 00000045 00000000     1.......E.......
    beec:	00000046 00000000 00000047 00000000     F.......G.......
    befc:	00000044 00000000 00000030 00000000     D.......0.......
    bf0c:	0000003d 00000000 00000043 00000000     =.......C.......
    bf1c:	00000049 00000000 0000004a 00000000     I.......J.......
    bf2c:	0000004b 00000000 00000048 00000000     K.......H.......
    bf3c:	0000000c 00000001 00000000 0000000d     ................
    bf4c:	00000002 00000000 0000000e 00000001     ................
    bf5c:	00000000 0000000f 00000001 00000000     ................
    bf6c:	0000001d 00000001 00000000 0000001e     ................
    bf7c:	00000008 00000000 0000001f 00000001     ................
    bf8c:	00000000 00000021 00000001 00000000     ....!...........
    bf9c:	00000022 00000002 00000000 00000023     "...........#...
    bfac:	00000001 00000000 00000025 00000003     ........%.......
    bfbc:	00000000 00000026 00000004 00000000     ....&...........
    bfcc:	00000027 00000002 00000000 00000032     '...........2...
    bfdc:	00000001 00000000 00000048 00000001     ........H.......
    bfec:	00000001 00000056 00000001 00000001     ....V...........
    bffc:	00000057 00000000 00000000 00000057     W...........W...
	...
    c014:	00000057 00000000 00000000 00000057     W...........W...
	...
    c02c:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    c048:	00000014 00007d00 00000015 00007d00     .....}.......}..
    c058:	00000016 00007d00 00000017 00008000     .....}..........
    c068:	00000012 00000001 00000013 00000001     ................
    c078:	00000030 00000000 00000031 00000000     0.......1.......
    c088:	00000032 00000000 00000033 00000000     2.......3.......
    c098:	00000034 00000000 00000035 00000001     4.......5.......
    c0a8:	00000036 00000000 00000037 00000001     6.......7.......
    c0b8:	00000038 00000001 00000039 00000000     8.......9.......
    c0c8:	0000003a 00000000 0000003b 00000000     :.......;.......
    c0d8:	0000003c 00000000 0000003d 00000000     <.......=.......
    c0e8:	0000003e 00000000 0000003f 00000001     >.......?.......
    c0f8:	00000040 00000000 00000041 00000000     @.......A.......
    c108:	00000042 00000000 00000043 00000000     B.......C.......
    c118:	00000044 00000000 00000045 00000000     D.......E.......
    c128:	00000046 00000000 00000047 00000000     F.......G.......
    c138:	00000048 00000000 00000049 00000000     H.......I.......
    c148:	0000004a 00000000 0000004b 00000000     J.......K.......
    c158:	0000004c 00000001 0000004d 00000001     L.......M.......
    c168:	0000004e 00000000 0000004f 00000000     N.......O.......
    c178:	00000050 00000001 00000051 00000001     P.......Q.......
    c188:	00000052 00000001 00000053 00000001     R.......S.......
    c198:	00000054 00000001 00000055 00000000     T.......U.......
    c1a8:	00000056 00000001 00000057 00000000     V.......W.......
    c1b8:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0000c1ec <Ftm_Pwm_Ip_SyncCfg0>:
	...
    c208:	00000003 00000003                       ........

0000c210 <Ftm_Pwm_Ip_InstCfg0>:
    c210:	00000001 00000007 00000000 00000000     ................
	...
    c244:	0000927c 00000001 00000000 00000000     |...............
    c254:	00000000 0000c1ec                       ........

0000c25c <Ftm_Pwm_Ip_I0_Ch2>:
    c25c:	00000002 0000000a 00000000 00000000     ................
    c26c:	00000000 00000001 00000000 00000000     ................
	...

0000c284 <Ftm_Pwm_Ip_I0_ChArray>:
    c284:	0000c25c                                \...

0000c288 <Ftm_Pwm_Ip_UserCfg0>:
    c288:	0000c210 0000c284 00000001 00000000     ................
    c298:	00000000                                ....

0000c29c <Mcu_Config>:
    c29c:	0000005a 00000000 00000001 00000001     Z...............
    c2ac:	0000c3f0 0000bdf4 0000c3fc              ............

0000c2b8 <OsIf_xPredefinedConfig>:
    c2b8:	00000000 02dc6c00                       .....l..

0000c2c0 <OsIf_apxPredefinedConfig>:
    c2c0:	0000c2b8                                ....

0000c2c4 <g_pin_mux_InitConfigArr>:
    c2c4:	4004c000 00000000 00000000 00000002     ...@............
    c2d4:	00000002 00000002 00000000 00000000     ................
	...

0000c2ec <au8Port_PartitionList>:
    c2ec:	00000001                                ....

0000c2f0 <au32Port_PinToPartitionMap>:
    c2f0:	00000001                                ....

0000c2f4 <Port_au16NoUnUsedPadsArrayDefault>:
    c2f4:	00010000 00030002 00070006 00090008     ................
    c304:	000c000b 000e000d 0010000f 00200011     .............. .
    c314:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    c324:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    c334:	00400031 00420041 00460043 00480047     1.@.A.B.C.F.G.H.
    c344:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    c354:	00610051 00630062 00650064 00670066     Q.a.b.c.d.e.f.g.
    c364:	00690068 006b006a 006d006c 006f006e     h.i.j.k.l.m.n.o.
    c374:	00710070 00810080 00830082 00850084     p.q.............
    c384:	00870086 00890088 008b008a 008d008c     ................
    c394:	008f008e 00000090                       ........

0000c39c <Port_UnUsedPin>:
    c39c:	00000100 00000001 00000000              ............

0000c3a8 <Port_aPinConfigDefault>:
    c3a8:	00000060 00000200 00000000 00000002     `...............
    c3b8:	00010000                                ....

0000c3bc <Port_Config>:
    c3bc:	00530001 0000c2f4 0000c39c 0000c3a8     ..S.............
	...
    c3d4:	0000c2f0 0000c2ec 0000c2c4              ............

0000c3e0 <Power_Ip_RCM_ConfigPB>:
	...

0000c3e8 <Power_Ip_PMC_ConfigPB>:
    c3e8:	00000000                                ....

0000c3ec <Power_Ip_SMC_ConfigPB>:
    c3ec:	00000000                                ....

0000c3f0 <Power_Ip_aModeConfigPB>:
	...

0000c3fc <Power_Ip_HwIPsConfigPB>:
    c3fc:	0000c3e0 0000c3e8 0000c3ec              ............

0000c408 <Pwm_Channels_PB>:
    c408:	00000000 00000001 00000001 0000c25c     ............\...
    c418:	00000000 00000001                       ........

0000c420 <Pwm_Instances_PB>:
    c420:	00000000 00000001 0000c288              ............

0000c42c <Pwm_Config>:
    c42c:	00000001 0000c408 00000001 0000c420     ............ ...

0000c43c <__INIT_TABLE>:
    c43c:	00000002 	.word	0x00000002
    c440:	1fff8b10 	.word	0x1fff8b10
    c444:	0000c464 	.word	0x0000c464
    c448:	0000c48c 	.word	0x0000c48c
    c44c:	1fff8800 	.word	0x1fff8800
    c450:	00000000 	.word	0x00000000
    c454:	00000310 	.word	0x00000310

0000c458 <__ZERO_TABLE>:
    c458:	00000001 	.word	0x00000001
    c45c:	1fff8b40 	.word	0x1fff8b40
    c460:	1fff9300 	.word	0x1fff9300
